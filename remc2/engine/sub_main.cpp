#include "sub_main.h"

#undef EDITOR

#ifdef EDITOR
#include "editor.h"
#endif


#include "file_handling.h"
#include "menus_and_intros.h"

#ifdef __linux__
  #include <strings.h>
  #include <array>
  #include <cstdlib>
  #include <cstring>
	#define _stricmp strcasecmp
	#define _strnicmp strncasecmp
	#define strnicmp strncasecmp
  #define __cdecl
  #include <ctype.h>
  #include "../../findfirst/findfirst.h"
  #include <filesystem>
  #include <iostream>
  #include <functional>
  void _strupr(char *s)
  {
    char *p = s;
  
    while (*p) {
      *p = toupper(*p);
      ++p;
    }
  }       
#endif

using namespace remc2;

std::unique_ptr<FileHandling> file_handling;

//#define MOUSE_OFF

//#define RIGHT_BUTTON
//#define ROTATE_PLAYER
//#define MOVE_PLAYER
//#define SET_OBJECTIVE
//#define SET_LEVEL


//#define FIX_DETECT_SPEED

//#define PLAYING_GAME
#define LINUX_GAME

#ifdef RELEASE_GAME
#define AUTO_CHANGE_RES
#define TEST_BIG_TEXTURE
#define TEST_BIG_SPRITES
#define FIX_FLYASISTANT
#elif defined(LINUX_GAME)
#define AUTO_CHANGE_RES
#undef TEST_BIG_TEXTURE
#undef TEST_BIG_SPRITES
#define FIX_FLYASISTANT
#elif defined(PLAYING_GAME)
#define AUTO_CHANGE_RES
#define TEST_BIG_TEXTURE
#define TEST_BIG_SPRITES
#define INTERVAL_SAVE
#define FIX_FLYASISTANT
#else
#define COPY_SKIP_CONFIG
#define FIX_MOUSE
#define MOUSE_OFF2
#define OFF_PAUSE_5
//#define RIGHT_BUTTON
#endif

#define DETECT_DWORD_A

#define FIX_sub_48B90// - when set game have error, but compactible with original


//#define ALT_RESOLUTION
bool alterscreensize = true;
int alt_resolution_width = 1024;
int alt_resolution_height = 768;

int debugafterload = 0;
int count_begin = 1;//1
//int stage__4A190_0x6E8E = 0;
int debugnextlevel = 0;

bool config_EDITOR = false;
bool config_LOAD_EDITED_LEVEL = false;
#define LOAD_EDITED_LEVEL


#define OLD_PARTICLES

Bit8u origbyte;
Bit8u remakebyte;
int comp1;
int comp2;
int comp3;
int comp4;
int comp5;


//posistruct var_2BB3E0_x_DWORD_EA3D4_14[0x3e9];

Bit8u* SEARCH_BEGIN_BUFFER = 0;
Bit8u* SEARCH_END_BUFFER = 0;
Bit8u* FONTS0DAT_BEGIN_BUFFER = 0;
Bit8u* FONTS0TAB_BEGIN_BUFFER = 0;
Bit8u* FONTS0TAB_END_BUFFER = 0;
Bit8u* FONTS1DAT_BEGIN_BUFFER = 0;//2baa94
Bit8u* FONTS1TAB_BEGIN_BUFFER = 0;//2bab24
Bit8u* FONTS1TAB_END_BUFFER = 0;//2bab04
Bit8u* TMAPS00TAB_BEGIN_BUFFER = 0;//2c7ed0
Bit8u* PALDATA_BEGIN_BUFFER = 0;//2bb3c8
Bit8u* PALMEM_BEGIN_BUFFER = 0;//6d654d
Bit8u* POINTERSDAT_BEGIN_BUFFER = 0;//2bc390
Bit8u* POINTERSTAB_BEGIN_BUFFER = 0;//2bc394
Bit8u* POINTERSTAB_END_BUFFER = 0;//2bc388*/

Bit8u* BUILD00DAT_BEGIN_BUFFER = 0;
Bit8u* BUILD00TAB_BEGIN_BUFFER = 0;
Bit8u* BUILD00TAB_END_BUFFER = 0;

Bit8u* ETEXT_BEGIN_BUFFER = 0;
Bit8u* FTEXT_BEGIN_BUFFER = 0;
Bit8u* GTEXT_BEGIN_BUFFER = 0;
Bit8u* ITEXT_BEGIN_BUFFER = 0;

Bit8u* BLOCK16DAT_BEGIN_BUFFER = 0;
Bit8u* BLOCK32DAT_BEGIN_BUFFER = 0;

Bit8u* BSCREEN_BEGIN_BUFFER = 0;
Bit8u* BSCREEN_END_BUFFER = 0;

Bit8u* PALD0DAT_BEGIN_BUFFER = 0;
Bit8u* PALD0DAT2_BEGIN_BUFFER = 0;

Bit8u* WSCREEN_BEGIN_BUFFER = 0;
Bit8u* WSCREEN_END_BUFFER = 0;

//Bit8u* BSCREEN2_BEGIN_BUFFER = 0;
Bit8u* BSCREEN2_END_BUFFER = 0;

Bit8u* MSPRD00DAT_BEGIN_BUFFER = 0;
Bit8u* MSPRD00TAB_BEGIN_BUFFER = 0;
Bit8u* MSPRD00TAB_END_BUFFER = 0;

Bit8u* HSPRD00DAT_BEGIN_BUFFER = 0;
Bit8u* HSPRD00TAB_BEGIN_BUFFER = 0;
Bit8u* HSPRD00TAB_END_BUFFER = 0;

Bit8u* HFONT3DAT_BEGIN_BUFFER = 0;
Bit8u* HFONT3TAB_BEGIN_BUFFER = 0;
Bit8u* HFONT3TAB_END_BUFFER = 0;

Bit8u* CLRD0DAT_BEGIN_BUFFER = 0;
#pragma pack (1)
typedef struct {//lenght 26
	Bit32s dword_2;
	Bit32s dword_6;
	Bit32s dword_A;
	Bit32s dword_E;	
	Bit32s dword_0x12;
	Bit16s word_0x16x;
	Bit16s word_0x18;
	Bit8s byte_0x1A;
	Bit8u byte_0x1B;
}
type_SPELLS_BEGIN_BUFFER_str_sub;

typedef struct{//lenght 80
	Bit8s byte_0;
	Bit8u byte_1;
	type_SPELLS_BEGIN_BUFFER_str_sub subspell[3];
}
type_SPELLS_BEGIN_BUFFER_str;
#pragma pack (16)

type_SPELLS_BEGIN_BUFFER_str SPELLS_BEGIN_BUFFER_str[26] =
{ {0x03,0x00,{
{0x000000FA,0x00000064,0x00000000,0x00000000,0x00000000,0x00BA,0x0005,0x00,0x00},
{0x000000A0,0x000000FA,0x00000000,0x00000190,0x00000096,0x00BB,0x000B,0x01,0x01},
{0x00000050,0x000005DC,0x000009C4,0x00001388,0x000002EE,0x00BC,0x000F,0x02,0x00}}},
{0x03,0x00,{
{0x0000000A,0x00000064,0x00000000,0x00000000,0x00000000,0x00BD,0x0003,0x00,0x00},
{0x0000000F,0x000000FA,0x00000000,0x0000012C,0x00000032,0x00BE,0x0029,0x01,0x00},
{0x00000014,0x000003E8,0x000003E8,0x00000384,0x00000096,0x00BF,0x0033,0x02,0x00}}},
{0x03,0x00,{
{0x00000000,0x000003E8,0x00000000,0x00000000,0x00000000,0x00C0,0x0065,0x00,0x00},
{0x00000000,0x000004E2,0x00000000,0x00000019,0x00000004,0x00C1,0x0065,0x01,0x00},
{0x00000001,0x000007D0,0x00000000,0x0000007D,0x00000006,0x00C2,0x0065,0x02,0x00}}},
{0x03,0x04,{
{0x00000002,0x000003E8,0x00000000,0x00000000,0x00000000,0x00C3,0x012D,0x00,0x00},
{0x00000003,0x000009C4,0x00000000,0x0000008C,0x0000000F,0x00C4,0x01C3,0x00,0x00},
{0x00000004,0x00001388,0x00000000,0x00000118,0x0000002D,0x00C5,0x01F5,0x00,0x00}}},
{0x03,0x04,{
{0x00000064,0x00001388,0x00004E20,0x00000000,0x00000000,0x00C6,0x00C9,0x13,0x00},
{0x00000064,0x00001D4C,0x00004E20,0x00000050,0x00000014,0x00C8,0x012D,0x19,0x00},
{0x00000064,0x00003A98,0x000061A8,0x000000F0,0x0000003C,0x00C9,0x01C7,0x10,0x00}}},
{0x03,0x00,{
{0x00000001,0x000001F4,0x00000000,0x00000000,0x00000000,0x00CA,0x000B,0x00,0x00},
{0x00000001,0x000002EE,0x00000000,0x0000012C,0x0000004B,0x00CB,0x0015,0x00,0x00},
{0x0000000A,0x000005DC,0x00000000,0x00000384,0x0000012C,0x00CC,0x0029,0x00,0x00}}},
{0x03,0x04,{
{0x00000064,0x000003E8,0x00000000,0x00000000,0x00000000,0x00CD,0x0065,0x00,0x00},
{0x00000064,0x000005DC,0x00000000,0x00000078,0x0000001E,0x00CE,0x00C9,0x00,0x00},
{0x00000064,0x00002710,0x00000000,0x00000118,0x00000046,0x00CF,0x012D,0x01,0x00}}},
{0x03,0x00,{
{0x000000C8,0x000001F4,0x000002EE,0x00000000,0x00000000,0x00D0,0x0005,0x00,0x01},
{0x000000FA,0x000009C4,0x00001388,0x00000258,0x00000096,0x00D1,0x0023,0x01,0x00},
{0x00000320,0x00002710,0x00004E20,0x00001D4C,0x000001F4,0x00D2,0x002D,0x02,0x00}}},
{0x03,0x04,{
{0x00000000,0x000009C4,0x00001388,0x00000000,0x00000000,0x00D3,0x007D,0x00,0x00},
{0x00000000,0x00000EA6,0x00001D4C,0x00000078,0x0000001E,0x00D4,0x00FB,0x00,0x00},
{0x00000000,0x00001B58,0x00002710,0x000000F0,0x0000003C,0x00D5,0x007D,0x01,0x00}}},
{0x03,0x00,{
{0x000006D6,0x000003E8,0x00001388,0x00000000,0x00000000,0x00D6,0x0009,0x02,0x00},
{0x00000DAC,0x000005DC,0x00002328,0x00000352,0x00000032,0x00D7,0x0011,0x05,0x00},
{0x00001B58,0x000007D0,0x00004650,0x0000092E,0x00000096,0x00D8,0x0019,0x0A,0x00}}},
{0x03,0x00,{
{0x00000000,0x00001388,0x00001388,0x00000000,0x00000000,0x00D9,0x000B,0x00,0x00},
{0x00000000,0x00001770,0x00001388,0x000000C8,0x0000001E,0x00DA,0x000B,0x01,0x00},
{0x00000000,0x00001D4C,0x00001388,0x00000190,0x0000005A,0x00DB,0x0015,0x02,0x00}}},
{0x03,0x04,{
{0x00000000,0x000007D0,0x000007D0,0x00000000,0x00000000,0x00DC,0x00B5,0x01,0x00},
{0x00000000,0x000009C4,0x00000BB8,0x00000064,0x0000001E,0x00DD,0x00B7,0x02,0x00},
{0x00000000,0x00000BB8,0x00000FA0,0x0000012C,0x0000005A,0x00DE,0x00B7,0x03,0x00}}},
{0x03,0x04,{
{0x00000000,0x00000708,0x00000000,0x00000000,0x00000000,0x00DF,0x0097,0x00,0x00},
{0x00000000,0x00000960,0x00002710,0x00000078,0x0000001E,0x00E0,0x0105,0x00,0x00},
{0x00000000,0x00001388,0x00002710,0x00000168,0x0000003C,0x00E1,0x0169,0x00,0x00}}},
{0x03,0x00,{
{0x000007D0,0x000001F4,0x00002710,0x00000000,0x00000000,0x00E2,0x0005,0x00,0x00},
{0x00000FA0,0x000003E8,0x00003A98,0x00000190,0x00000064,0x00E3,0x0007,0x00,0x00},
{0x0000000A,0x000004B0,0x00002EE0,0x00000320,0x000000C8,0x00E4,0x0015,0x01,0x00}}},
{0x03,0x04,{
{0x00001432,0x000009C4,0x00002710,0x00000000,0x00000000,0x00E5,0x00C3,0x00,0x00},
{0x00001E28,0x00000DAC,0x00003A98,0x00000064,0x00000032,0x00E6,0x018B,0x01,0x00},
{0x00001E28,0x00001388,0x00004E20,0x000000C8,0x00000064,0x00E7,0x025B,0x02,0x00}}},
{0x03,0x00,{
{0x00000014,0x00001388,0x00002710,0x00000000,0x00000000,0x00E8,0x001F,0x3C,0x00},
{0x00000028,0x00001D4C,0x00004E20,0x000003E8,0x00000028,0x00E9,0x0029,0x50,0x00},
{0x00000032,0x00002710,0x00009C40,0x000007D0,0x00000064,0x00EA,0x003D,0x78,0x00}}},
{0x03,0x00,{
{0x00000032,0x00001770,0x00003A98,0x00000000,0x00000000,0x00EB,0x001F,0x06,0x00},
{0x00000064,0x00002328,0x00007530,0x000005DC,0x00000028,0x00EC,0x0029,0x0C,0x00},
{0x0000012C,0x00002EE0,0x0000EA60,0x00000BB8,0x00000050,0x00ED,0x0033,0x18,0x00}}},
{0x03,0x00,{
{0x00000050,0x00002710,0x00004650,0x00000000,0x00000000,0x00EE,0x0015,0x10,0x00},
{0x00000078,0x00002EE0,0x00008CA0,0x00000708,0x0000003C,0x00EF,0x001F,0x20,0x00},
{0x00000140,0x00003A98,0x00011940,0x00000E10,0x00000078,0x00F0,0x0029,0x40,0x00}}},
{0x03,0x00,{
{0x00000078,0x00002EE0,0x00004E20,0x00000000,0x00000000,0x00F1,0x003F,0x07,0x00},
{0x000000F0,0x00003A98,0x00009C40,0x000007D0,0x00000028,0x00F2,0x0049,0x09,0x00},
{0x000001E0,0x00004650,0x00013880,0x00000FA0,0x00000050,0x00F3,0x0053,0x0B,0x00}}},
{0x03,0x00,{
{0x00000064,0x00002710,0x00004E20,0x00000000,0x00000000,0x00F4,0x012B,0x13,0x00},
{0x00000064,0x00004E20,0x00009C40,0x00000050,0x00000028,0x00F6,0x018F,0x19,0x00},
{0x00000064,0x00009C40,0x00015F90,0x000000A0,0x00000050,0x00F7,0x01F3,0x10,0x00}}},
{0x03,0x00,{
{0x000002EE,0x00003A98,0x00007530,0x00000000,0x00000000,0x00F8,0x001F,0x10,0x00},
{0x000005DC,0x00004E20,0x0000EA60,0x000009C4,0x00000019,0x00F9,0x0033,0x1A,0x00},
{0x00000BB8,0x00007530,0x00015F90,0x00001388,0x00000032,0x00FA,0x003D,0x28,0x00}}},
{0x03,0x00,{
{0x00000064,0x000007D0,0x00000000,0x00000000,0x00000000,0x00FB,0x001F,0x05,0x00},
{0x00000064,0x000009C4,0x000009C4,0x000000C8,0x00000032,0x00FC,0x0033,0x0A,0x00},
{0x000000C8,0x00001388,0x00002710,0x00000190,0x00000064,0x00FD,0x003D,0x0A,0x00}}},
{0x03,0x00,{
{0x000000FA,0x000003E8,0x00001388,0x00000000,0x00000000,0x00FE,0x001F,0x00,0x00},
{0x000001F4,0x000005DC,0x00002710,0x00000050,0x0000001E,0x00FF,0x001F,0x01,0x00},
{0x000003E8,0x000007D0,0x00002710,0x000000A0,0x0000003C,0x0100,0x001F,0x02,0x00}}},
{0x03,0x00,{
{0x000003E8,0x00002710,0x00004E20,0x00000000,0x00000000,0x0101,0x002F,0x00,0x00},
{0x00001388,0x00002EE0,0x00004E20,0x00000078,0x0000001E,0x0102,0x0043,0x01,0x00},
{0x00002710,0x00005DC0,0x0000EA60,0x000000F0,0x0000003C,0x0103,0x0057,0x02,0x00}}},
{0x03,0x00,{
{0x00000262,0x00002710,0x00004E20,0x00000000,0x00000000,0x0104,0x002B,0x10,0x00},
{0x0000044C,0x00004650,0x00008CA0,0x0000005A,0x0000001E,0x0105,0x0021,0x1A,0x00},
{0x00000A96,0x00007530,0x00015F90,0x00000118,0x00000046,0x0106,0x0021,0x20,0x00}}},
{0x03,0x00,{
{0x00000064,0x00002AF8,0x00004A38,0x00000000,0x00000000,0x0107,0x001F,0x00,0x00},
{0x00000082,0x000032C8,0x00009470,0x000000C8,0x00000028,0x0108,0x0029,0x01,0x00},
{0x00000186,0x00006590,0x0000DAC0,0x00000190,0x00000078,0x0109,0x0033,0x02,0x00}}}
};


Bit8u* SPELLS_BEGIN_BUFFER_ptr = (Bit8u*)SPELLS_BEGIN_BUFFER_str;

Bit8u* LANG_BEGIN_BUFFER = 0;



Bit8u* ZERO_BUFFER = 0;

int help_VGA_type_resolution=0;

static unsigned long int    _RWD_randnext = 1;

static unsigned long* watcominitrandnext(void)
{
	//_INITRANDNEXT(RETURN_ARG(unsigned long*, NULL));
	return((unsigned long*)& _RWD_randnext);
}

int watcomrand(void)
{
	unsigned long* randptr;

	randptr = watcominitrandnext();
	if (randptr == NULL) {
		return(0);
	}
	*randptr = *randptr * 1103515245 + 12345;
	return((int)((*randptr >> 16) & 0x7FFF));
}

void watcomsrand(unsigned int seed)
{
	unsigned long* randptr;

	randptr = watcominitrandnext();
	if (randptr != NULL) {
		*randptr = seed;
	}
}


#pragma pack (1)
typedef struct {
	axis_3d v51y;//v51x_struct v51x; // [esp+A8h] [ebp-12h]//0
	//Bit16u v52xw_4;//int16_t v52; // [esp+ACh] [ebp-Eh]//+4
	Bit8u* v53xdw_6;//Bit8u* v53; // [esp+AEh] [ebp-Ch]//+6
	Bit32u v54xdw_10;//int v54; // [esp+B2h] [ebp-8h]//+10
	Bit32u v55xdw_14;//int v55; // [esp+B6h] [ebp-4h]//+14
	Bit32u v56xdw_18;//int v56; // [esp+BAh] [ebp+0h]//+18
	Bit32u v57xdw_22;//int v57; // [esp+BEh] [ebp+4h]//+22
	Bit32u v58xdw_26;//int v58; // [esp+C2h] [ebp+8h]//+26
	Bit32u v59xdw_30;//int v59; // [esp+C6h] [ebp+Ch]//+30
	Bit32u v60xdw_34;//int v60; // [esp+CAh] [ebp+10h]//+34
	Bit32u v61xdw_38;//int v61; // [esp+CEh] [ebp+14h]//+38
	Bit16u v62xw_42;//int16_t v62; // [esp+D2h] [ebp+18h]//+42
	Bit16u v63xw_44;//int16_t v63; // [esp+D4h] [ebp+1Ah]//+44
	Bit8u v64xb_46;//char v64; // [esp+D6h] [ebp+1Ch]//+46 //color
} v51x_struct;
#pragma pack (16)

posistruct* posistruct1;//fix it
posistruct* posistruct2;//fix it
posistruct* posistruct3;//fix it
posistruct* posistruct4;//fix it
posistruct* posistruct5;//fix it
posistruct* posistruct6;//fix it
posistruct* posistruct7;//fix it
posistruct* posistruct8;//fix it
posistruct* posistruct9;//fix it
posistruct* posistruct10;//fix it
posistruct* posistruct11;//fix it


posistruct* x_DWORD_EA3D4; // weak
//posistruct x_DWORD_EA3D4[1700];//fix it

void initposistruct() {//fix it
	posistruct1 = (posistruct*)malloc(sizeof(posistruct)*1700);
	posistruct2 = (posistruct*)malloc(sizeof(posistruct) * 1700);
	posistruct3 = (posistruct*)malloc(sizeof(posistruct) * 1700);
	posistruct4 = (posistruct*)malloc(sizeof(posistruct) * 1700);
	posistruct5 = (posistruct*)malloc(sizeof(posistruct) * 1700);
	posistruct6 = (posistruct*)malloc(sizeof(posistruct) * 1700);
	posistruct7 = (posistruct*)malloc(sizeof(posistruct) * 1700);
	posistruct8 = (posistruct*)malloc(sizeof(posistruct) * 1700);
	posistruct9 = (posistruct*)malloc(sizeof(posistruct) * 1700);
	posistruct10 = (posistruct*)malloc(sizeof(posistruct) * 1700);
	posistruct11= (posistruct*)malloc(sizeof(posistruct) * 1700);

	x_DWORD_EA3D4 = (posistruct*)malloc(sizeof(posistruct) * 1700);
};


filearray_struct filearray_2aa18c[] = {
	{ &POINTERSTAB_BEGIN_BUFFER,&POINTERSTAB_END_BUFFER,&POINTERSDAT_BEGIN_BUFFER,&posistruct1 },
	{ &FONTS0TAB_BEGIN_BUFFER,&FONTS0TAB_END_BUFFER,&FONTS0DAT_BEGIN_BUFFER,&posistruct2 },
	{ &FONTS1TAB_BEGIN_BUFFER,&FONTS1TAB_END_BUFFER,&FONTS1DAT_BEGIN_BUFFER,&posistruct3 },
	{ &ZERO_BUFFER,&ZERO_BUFFER,&ZERO_BUFFER,&posistruct4 },
	{ &MSPRD00TAB_BEGIN_BUFFER,&MSPRD00TAB_END_BUFFER,&MSPRD00DAT_BEGIN_BUFFER,&posistruct5 },
	{ &ZERO_BUFFER,&ZERO_BUFFER,&ZERO_BUFFER,&posistruct6 },
	{ &HFONT3TAB_BEGIN_BUFFER,&HFONT3TAB_END_BUFFER,&HFONT3DAT_BEGIN_BUFFER,&posistruct7 },
	{ &ZERO_BUFFER,&ZERO_BUFFER,&ZERO_BUFFER,&posistruct8 },
	{ &BUILD00TAB_BEGIN_BUFFER,&BUILD00TAB_END_BUFFER,&BUILD00DAT_BEGIN_BUFFER,&posistruct9 },
	{ &ZERO_BUFFER,&ZERO_BUFFER,&ZERO_BUFFER,&posistruct10 },
	{ &ZERO_BUFFER,&ZERO_BUFFER,&ZERO_BUFFER,&posistruct11 }
};

int filearrayindex_POINTERSDATTAB = 0;
int filearrayindex_FONTS0DATTAB = 1;
int filearrayindex_MSPRDDATTAB = 2;
int filearrayindex_ZERO1 = 3;
int filearrayindex_MSPRD00DATTAB = 4;
int filearrayindex_ZERO2 = 5;
int filearrayindex_HFONT3DATTAB = 6;
int filearrayindex_ZERO3 = 7;
int filearrayindex_BUILD00DATTAB = 8;
int filearrayindex_ZERO4 = 9;

char* x_DWORD_D41BC_langbuffer;
/*
typedef struct {
	Bit32u pointer[0x700];
}
type_E9C38_smalltit_59360;

type_E9C38_smalltit_59360 str_E9C38_smalltit_59360;*/

Bit8u* x_DWORD_E9C38_smalltit;

Pathstruct xasearchd_2bac30 = { "*SearchD\0",&SEARCH_BEGIN_BUFFER,&SEARCH_END_BUFFER,0x1000,NULL };
//#define psxasearchd_2bac30 0
Pathstruct xafonts0dat = { "DATA/FONT0.DAT\0",&FONTS0DAT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxafonts0dat 1
Pathstruct xafonts0tab = { "DATA/FONT0.TAB\0",&FONTS0TAB_BEGIN_BUFFER,&FONTS0TAB_END_BUFFER,NULL,NULL };
//#define psxafonts0tab 2
Pathstruct xafonts1dat = { "DATA/FONT1.DAT\0",&FONTS1DAT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxafonts1dat 3
Pathstruct xafonts1tab = { "DATA/FONT1.TAB\0",&FONTS1TAB_BEGIN_BUFFER,&FONTS1TAB_END_BUFFER,NULL,NULL };
//#define psxafonts1tab 4
Pathstruct xadatatmaps00tab = { "DATA/TMAPS0-0.TAB",&TMAPS00TAB_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadatatmaps00tab 5
Pathstruct xapaldata = { "*PalData\0",&PALDATA_BEGIN_BUFFER,NULL,0x400,NULL };
//#define psxapaldata 6
Pathstruct xapalmem = { "*PalMem\0",&PALMEM_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxapalmem 7
Pathstruct xadatapointersdat = { "DATA/POINTERS.DAT\0",&POINTERSDAT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadatapointersdat 8
Pathstruct xadatapointerstab = { "DATA/POINTERS.TAB\0",&POINTERSTAB_BEGIN_BUFFER,&POINTERSTAB_END_BUFFER,NULL,NULL };
//#define psxadatapointerstab 9
Pathstruct xazero = { "\0",NULL,NULL,NULL,NULL };
//#define psxazero0 10
Pathstruct xadatabuild00dat = { "DATA/BUILD0-0.DAT\0",&BUILD00DAT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadatabuild00dat 11
Pathstruct xadatabuild00tab = { "DATA/BUILD0-0.TAB\0",&BUILD00TAB_BEGIN_BUFFER,&BUILD00TAB_END_BUFFER,NULL,NULL };
//#define psxadatabuild00tab 12
//zero
//#define psxazero1 13
Pathstruct xadataetextdat = { "DATA/ETEXT.DAT\0",&ETEXT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadataetextdat 14
//zero
//#define psxazero2 15
Pathstruct xadataftextdat = { "DATA/FTEXT.DAT\0",&FTEXT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadataftextdat 16
//zero
//#define psxazero3 17
Pathstruct xadatagtextdat = { "DATA/GTEXT.DAT\0",&GTEXT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadatagtextdat 18
//zero
//#define psxazero4 19
Pathstruct xadataitextdat = { "DATA/ITEXT.DAT\0",&ITEXT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadataitextdat 20
//zero
//#define psxazero5 21
Pathstruct xadatablock16dat = { "DATA/BLOCK16.DAT\0",&BLOCK16DAT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadatablock16dat 22
Pathstruct xadatablock32dat = { "DATA/BLOCK32.DAT\0",&BLOCK32DAT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadatablock32dat 23
//zero
//#define psxazero6 24
Pathstruct xabscreen = { "*BScreen\0",&BSCREEN_BEGIN_BUFFER,&BSCREEN_END_BUFFER,0x011508,NULL };
//#define psxabscreen 25
Pathstruct xadatapald0dat = { "DATA/PALD-0.DAT\0",&PALD0DAT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadatapald0dat 26
//zero
//#define psxazero7 27
Pathstruct xawscreen_351628 = { "*WScreen\0",&WSCREEN_BEGIN_BUFFER,&WSCREEN_END_BUFFER,0x04b100,NULL };
//#define psxawscreen_351628 28
Pathstruct xabscreen2 = { "*BScreen\0",&x_DWORD_E9C38_smalltit,&BSCREEN2_END_BUFFER,0x11170/*0x011508*/,NULL };
//#define psxabscreen2 29

Pathstruct xadatapald0dat2 = { "DATA/PALD-0.DAT\0",&PALD0DAT2_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadatapald0dat2 30
//zero
//#define psxazero8 31
Pathstruct xadatamsprd00dat = { "DATA/MSPRD0-0.DAT\0",&MSPRD00DAT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadatamsprd00dat 32
Pathstruct xadatamsprd00tab = { "DATA/MSPRD0-0.TAB\0",&MSPRD00TAB_BEGIN_BUFFER,&MSPRD00TAB_END_BUFFER,NULL,NULL };
//#define psxadatamsprd00tab 33
//zero
//#define psxazero9 34
Pathstruct xadatahsprd00dat = { "DATA/HSPRD0-0.DAT\0",&HSPRD00DAT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadatahsprd00dat 35
Pathstruct xadatahsprd00tab = { "DATA/HSPRD0-0.TAB\0",&HSPRD00TAB_BEGIN_BUFFER,&HSPRD00TAB_END_BUFFER,NULL,NULL };
//#define psxadatahsprd00tab 36
Pathstruct xadatahfont3dat = { "DATA/HFONT3.DAT\0",&HFONT3DAT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadatahfont3dat 37
Pathstruct xadatahfont3tab = { "DATA/HFONT3.TAB\0",&HFONT3TAB_BEGIN_BUFFER,&HFONT3TAB_END_BUFFER,NULL,NULL };
//#define psxadatahfont3tab 38
//zero
//#define psxazero10 39
Pathstruct xadataclrd0dat = { "DATA/CLRD-0.DAT\0",&CLRD0DAT_BEGIN_BUFFER,NULL,NULL,NULL };
//#define psxadataclrd0dat 40
//zero
//#define psxazero11 41
Pathstruct xadataspellsdatx = { "DATA/SPELLS.DAT\0",&SPELLS_BEGIN_BUFFER_ptr,NULL,NULL,NULL };
//#define psxadataspellsdat 42
//zero
//#define psxazero12 43
Pathstruct xadatalang = { "",(Bit8u**)&x_DWORD_D41BC_langbuffer,&LANG_BEGIN_BUFFER,NULL,NULL };
//#define psxadatalangbuffer 44
//zero
//#define psxazero13 45
Pathstruct xadatatables = { "",(Bit8u**)&x_DWORD_D41BC_langbuffer,&LANG_BEGIN_BUFFER,NULL,NULL };
//#define psxadatalangbuffer2 46
//zero
//#define psxazero14 47


Pathstruct pstr[100] = { xasearchd_2bac30 ,//00
xafonts0dat,//01
xafonts0tab,//02
xafonts1dat,//03
xafonts1tab,//04
xadatatmaps00tab,//05
xapaldata,//06
xapalmem,//07
xadatapointersdat,//08
xadatapointerstab,//09
xazero,//10-a
xadatabuild00dat,//11-b
xadatabuild00tab,//12-c
xazero,//13
xadataetextdat,//14
xazero,//15
xadataftextdat,//16
xazero,//17
xadatagtextdat,//18
xazero,//19
xadataitextdat,//20
xazero,//21
xadatablock16dat,//22
xadatablock32dat,//23
xazero,//24
xabscreen,//25
xadatapald0dat,//26
xazero,//27
xawscreen_351628,//28
xabscreen2,//29
xadatapald0dat2,//30
xazero,//31
xadatamsprd00dat,//32
xadatamsprd00tab,//33
xazero,//34
xadatahsprd00dat,//35
xadatahsprd00tab,//36
xadatahfont3dat,//37
xadatahfont3tab,//38
xazero,//39
xadataclrd0dat,//40
xazero,//41
xadataspellsdatx,//42
xazero };//43

/*typedef struct {
	Bit8u* pointer;
	Bit32u size;
} SpriteStr;*/



type_str_unk_1804B0ar str_unk_1804B0ar;
#pragma pack (1)
typedef struct {//lenght 22
	Bit16s word_0;
	Bit16s word_2;
	Bit16s word_4;
	Bit16s word_6;
	Bit16s word_8;
	Bit16s word_10;
	Bit16s word_12_x; //X
	Bit16s word_14_y; //Y
	Bit16s word_16;
	Bit8s byte_18_act;//1-hidden 2-activated
	Bit8s byte_19;
	Bit16s word_20;	
}type_unk_E17CC_str_0x194;
#pragma pack (16)



x_DWORD unk_D5621;
x_DWORD unk_E1328;


axis_2d x_WORD_E3760_mouse;
//Bit16s x_WORD_E3760_mouse.x;//2b4760
//Bit16s x_WORD_E3760_mouse.y;//2b4762

const char* dword_E4CC4[7] = { "PATH=Z:\\",
"COMSPEC=Z:\\COMMAND.COM",
"PROMPT=$P$G",
"BLASTER=A220 I7 D1 H5 T6",
"AIL_DEBUG=sound.dbg",//debug
"AIL_SYS_DEBUG=soundd.dbg",//debug
NULL };



long unknown_libname_2_findfirst(char*, Bit16u, _finddata_t* c_file);// weak
long unknown_libname_3_findnext(_finddata_t* c_file, long hFile);// weak
int unknown_libname_4_find_close(_finddata_t* c_file, long hFile);// weak
//x_DWORD _GETDS;
//unsigned char MEMORY[0x1000000];

Bit8u loc_A0000_vga_buffer[307200];

void stub_fix_it() { allert_error(); };
//int sub_5FA96() { stub_fix_it();return 0; };
void sub_5FA96(type_str_0x6E8E* a1x);
void sub_5FBB1(type_str_0x6E8E* a1x);
void sub_5FB09(type_str_0x6E8E* a1x);
void sub_5FB22(type_str_0x6E8E* a1x);
void sub_5FB3A(type_str_0x6E8E* a1x);
void sub_5FB8C(type_str_0x6E8E* a1x);
int sub_AEF40() { stub_fix_it();return 0; };
int sub_AEF51() { stub_fix_it();return 0; };
int sub_AFB7E() { stub_fix_it();return 0; };
int sub_AFB9F() { stub_fix_it();return 0; };
//int loc_A0000_vga_buffer() { stub_fix_it();return 0; };
int sub_B1EB6() { stub_fix_it();return 0; };
int sub_B1EBC() { stub_fix_it();return 0; };
int sub_B1EC2() { stub_fix_it();return 0; };
int sub_B1EC8() { stub_fix_it();return 0; };
int sub_B1F78() { stub_fix_it();return 0; };
int sub_B1ED6() { stub_fix_it();return 0; };
int sub_B1EDC() { stub_fix_it();return 0; };
int sub_B1EE2() { stub_fix_it();return 0; };
int sub_B1EE8() { stub_fix_it();return 0; };
int sub_B1EF0() { stub_fix_it();return 0; };
int sub_B1EF8() { stub_fix_it();return 0; };
int sub_B1F00() { stub_fix_it();return 0; };
int sub_B1F12() { stub_fix_it();return 0; };
int sub_B1F1C() { stub_fix_it();return 0; };
int sub_B1F24() { stub_fix_it();return 0; };
int sub_B1F2C() { stub_fix_it();return 0; };
int sub_B1F35() { stub_fix_it();return 0; };
int sub_B1F3E() { stub_fix_it();return 0; };
int sub_B1F47() { stub_fix_it();return 0; };
int sub_B1F5B() { stub_fix_it();return 0; };
int sub_B1F66() { stub_fix_it();return 0; };
int sub_B1F6F() { stub_fix_it();return 0; };
int sub_B1ECE() { stub_fix_it();return 0; };
int sub_B1F08() { stub_fix_it();return 0; };
int sub_B1F50() { stub_fix_it();return 0; };
int sub_B1FB5() { stub_fix_it();return 0; };
int sub_B20A7() { stub_fix_it();return 0; };
int sub_B2183() { stub_fix_it();return 0; };
int sub_B2275() { stub_fix_it();return 0; };
int sub_B230F() { stub_fix_it();return 0; };
int sub_B2468() { stub_fix_it();return 0; };
int sub_B256E() { stub_fix_it();return 0; };
int sub_B2670() { stub_fix_it();return 0; };
int sub_B1FD4() { stub_fix_it();return 0; };
int sub_B278C(short a, short b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, int n, short o) { stub_fix_it();return 0; };
int _null_int23_exit() { stub_fix_it();return 0; };
int x_free(void* ptr) { free(ptr);return 0; };
//int malloc(x_DWORD size) { stub_fix_it();return 0; };
void sub_A0EEC_s_plus2();

//void sub_9BA00() { stub_fix_it(); };
int nullsub_3(x_DWORD number) { stub_fix_it();return 0; };
int _no_support_loaded(x_DWORD number1, x_DWORD number2) { stub_fix_it();return 0; };






//-------------------------------------------------------------------------

char x_BYTE_E4CB2 = 0; // weak
// Function declarations -weak
//int /*__noreturn*/ sub_10000() { stub_fix_it();return 0; }; // weak
void sub_9A1B6(int a1, void *a2, void *a3)
{
	if (x_BYTE_E4CB2 == 9)
	{
		//__asm { int     21h; DOS - GET DISK TRANSFER AREA ADDRESS }
		qmemcpy(a2, a3, 0x2Bu);
	}
}

long unknown_libname_2_findfirst(char* path, Bit16u a2, _finddata_t* c_file) {//findfirst
	long hFile;
	//char path2[2048] = "\0";
	//pathfix(path, path2);//only for DOSBOX version

	//struct _finddata_t c_file;
	if ((hFile = my_findfirst(path, c_file)) == -1L)
		return(-1);//file not found
	//strcmp(filename, c_file.name);
	return(hFile);
	/*
if ((hFile = _findfirst(path2, &c_file)) == -1L)
	printf("file not found");
else
{
	do
	{
		printf("%s\n", c_file.name);
	} while (_findnext(hFile, &c_file) == 0);
		_findclose(hFile);
}
return 0;*/
/*char* v3; // eax //language/l.txt

//ecx dfc628 c3cd34c3cd35c3cd36
//eax //language/l.txt
//edx 78651a 0b0005a1a1a1a10005a1b413aaa100
//mov edx,ebx

int result; // eax

v3 = a1;
//__asm { int     21h; DOS - SET DISK TRANSFER AREA ADDRESS }// fix it
BYTE1(v3) = 78;
//__asm { int     21h; DOS - 2 + -FIND FIRST ASCIZ(FINDFIRST) }// fix it
result = 0;//_doserror(v3, a1); // fix it
sub_9A1B6(result, (void*)a3, (void*)a3);
return result;*/
};// weak
long unknown_libname_3_findnext(_finddata_t* c_file, long hFile) {//258193
	//char path[100];//fix
	//char filename[100];//fix it

	/*char path2[2048] = "\0";
	pathfix(path, path2);//only for DOSBOX version
	*/
	//struct _finddata_t c_file;
	//long hFile;
	if ((hFile = my_findnext(hFile, c_file)) == -1L)
	{
		return(-1);//file not found
	}
	//strcmp(filename, c_file.name);
	//_findclose(hFile);
	return(hFile);
	/*

	if ((hFile = _findfirst(path2, &c_file)) == -1L)
	printf("file not found");
	else
	{
	do
	{
	printf("%s\n", c_file.name);
	} while (_findnext(hFile, &c_file) == 0);
	_findclose(hFile);
	}

	*/
	/*int v2; // eax
	int v3; // eax
	int v4; // edx
	int result; // eax
	void *v6; // edx

	v2 = a2;
	BYTE1(v2) = 26;
	__asm { int     21h; DOS - SET DISK TRANSFER AREA ADDRESS }
	v3 = sub_9A1D9(v2, a2);
	BYTE1(v3) = 79;
	__asm { int     21h; DOS - 2 + -FIND NEXT ASCIZ(FINDNEXT) }
	result = _doserror(v3, v4);
	sub_9A1B6(result, v6, a1);
	return result;*/
	return 0;
};// weak
int unknown_libname_4_find_close(struct _finddata_t *c_file, long hFile) {//27b1b3
	my_findclose(hFile);
	return 0;
};// weak
int _wcpp_1_unwind_leave__120(/*x_DWORD a, */x_DWORD b, x_DWORD c) { /*stub_fix_it();*/return 0; };// weak // fix this
void JUMPOUT(int* adr) { 
	stub_fix_it(); exit(0);
};//error must fix this
void JUMPOUT(x_WORD cs, int* adr) {
	stub_fix_it(); exit(0);
};//error must fix this
void JUMPOUT(x_WORD cs, int a, int* adr) {
	stub_fix_it(); exit(0);
};//error must fix this
void qmemcpy(void* a, void* b, size_t c) {
	memcpy(a, b, c);
};
int _wcpp_1_unwind_leave__62(void) { /*stub_fix_it();*/return 0; }; //weak
char x_toupper(char inputchar) {
	return toupper(inputchar);
}; //weak
long x_filelength(FILE* decriptor) {
  // TODO: replace by std::filesystem::file_size in calling functions
	long size;
	myfseek(decriptor, 0, SEEK_END); // seek to end of file
	size = myftell(decriptor); // get current file pointer
	myfseek(decriptor, 0, SEEK_SET); // seek back to beginning of file
	return size;
};

void gotoxy(int x, int y) //positions text cursor at (x, y) screen position 
{
	VGA_GotoXY(x, y);
}
/*-------------------------wherex()------------------------------------*/
int wherex() //returns current text cursor (x) coordinate 
{
	return VGA_WhereX();
}
/*-------------------------wherey()----------------------------------*/
int wherey() //returns current text cursor (y) coordinate 
{
	return VGA_WhereY();
}


x_DWORD outtext(char* text) { myWriteOut(text);return 0; };// weak
POSITION gettextposition(/*x_DWORD, x_DWORD, x_DWORD*/) {
	return VGA_WhereXY();
};// weak
x_DWORD signal(x_DWORD, x_DWORD) { stub_fix_it();return 0; };// weak
int /*__fastcall*/ _wcpp_1_unwind_leave__93(x_DWORD, x_DWORD, x_DWORD, x_DWORD, x_DWORD, x_DWORD) { stub_fix_it();return 0; };// weak
int _wcpp_1_unwind_leave__100(x_DWORD, x_DWORD) { /*stub_fix_it();*/return 0; };// weak
long x_InterlockedExchange(long volatile * Target, long Value) { stub_fix_it();return 0; };
int _wcpp_1_unwind_leave__98(x_DWORD) { /*stub_fix_it();*/return 0; };// weak
int /*__fastcall*/ _wcpp_1_unwind_leave__130(x_DWORD) { stub_fix_it();return 0; };// weak
void x_BitScanReverse(Bit32u* Destination, Bit32u Source) {
	*Destination = 0;
	if (Source & 0x80000000)
	{
		*Destination = 0x1f;
		return;
	}
	if (Source & 0x40000000)
	{
		*Destination = 0x1e;
		return;
	}
	if (Source & 0x20000000)
	{
		*Destination = 0x1d;
		return;
	}
	if (Source & 0x10000000)
	{
		*Destination = 0x1c;
		return;
	}
	if (Source & 0x8000000)
	{
		*Destination = 0x1b;
		return;
	}
	if (Source & 0x4000000)
	{
		*Destination = 0x1a;
		return;
	}
	if (Source & 0x2000000)
	{
		*Destination = 0x19;
		return;
	}
	if (Source & 0x1000000)
	{
		*Destination = 0x18;
		return;
	}
	if (Source & 0x800000)
	{
		*Destination = 0x17;
		return;
	}
	if (Source & 0x400000)
	{
		*Destination = 0x16;
		return;
	}
	if (Source & 0x200000)
	{
		*Destination = 0x15;
		return;
	}
	if (Source & 0x100000)
	{
		*Destination = 0x14;
		return;
	}
	if (Source & 0x80000)
	{
		*Destination = 0x13;
		return;
	}
	if (Source & 0x40000)
	{
		*Destination = 0x12;
		return;
	}
	if (Source & 0x20000)
	{
		*Destination = 0x11;
		return;
	}
	if (Source & 0x10000)
	{
		*Destination = 0x10;
		return;
	}
	if (Source & 0x8000)
	{
		*Destination = 0xf;
		return;
	}
	if (Source & 0x4000)
	{
		*Destination = 0xe;
		return;
	}
	if (Source & 0x2000)
	{
		*Destination = 0xd;
		return;
	}
	if (Source & 0x1000)
	{
		*Destination = 0xc;
		return;
	}
	if (Source & 0x800)
	{
		*Destination = 0xb;
		return;
	}
	if (Source & 0x400)
	{
		*Destination = 0xa;
		return;
	}
	if (Source & 0x200)
	{
		*Destination = 0x9;
		return;
	}
	if (Source & 0x100)
	{
		*Destination = 0x8;
		return;
	}
	if (Source & 0x80)
	{
		*Destination = 0x7;
		return;
	}
	if (Source & 0x40)
	{
		*Destination = 0x6;
		return;
	}
	if (Source & 0x20)
	{
		*Destination = 0x5;
		return;
	}
	if (Source & 0x10)
	{
		*Destination = 0x4;
		return;
	}
	if (Source & 0x8)
	{
		*Destination = 0x3;
		return;
	}
	if (Source & 0x4)
	{
		*Destination = 0x2;
		return;
	}
	if (Source & 0x2)
	{
		*Destination = 0x1;
		return;
	}
	if (Source & 0x1)
	{
		*Destination = 0x0;
		return;
	}
	Destination = NULL;
	return;
};

//x_DWORD int386x(x_DWORD, x_DWORD, x_DWORD, x_DWORD) { stub_fix_it();return 0; };// weak
uint32_t sub_AB59E(SREGS* a1, REGS* a2, int intvar)
{
	uint32_t v2; // bp
	uint32_t result; // eax
	uint32_t v4; // ebx
	uint32_t v5; // ecx
	uint32_t v6; // edx
	uint32_t v7; // esi
	uint32_t v8; // edi

	// fix it:__ES__ = *a1;
	v2 = a1->gs;
	result = a2->eax;
	v4 = a2->ebx;
	v5 = a2->ecx;
	v6 = a2->edx;
	v7 = a2->edi;
	v8 = a2->eax;
	//esi je typ 21
	return result;
}
unsigned char __readgsx_BYTE(unsigned long Offset) { stub_fix_it();return 0; };
unsigned short __readgsx_WORD(unsigned long Offset) { stub_fix_it();return 0; };
unsigned     int x__readeflags(void) { stub_fix_it();return 0; };
void x__writeeflags(unsigned Value) { stub_fix_it(); };
x_DWORD gets(x_DWORD) { stub_fix_it();return 0; };// weak
//x_DWORD tell(x_DWORD) { stub_fix_it();return 0; };// weak
void* x_expand(void* memblock, size_t size) {
	return realloc(memblock, size * sizeof(Bit8u));
};
int /*__fastcall*/ _wcpp_1_unwind_leave__132(x_DWORD) { /*stub_fix_it();*/ return 0; };// weak
double /*__fastcall*/ _CHP(x_DWORD) { stub_fix_it();return 0; };// weak
size_t x_read2(FILE* descriptor, Bit8u* data, Bit32u size) {
	size_t result = fread(data, 1, size, descriptor);
	return result;
};
double IF_DPOW(double, double) { stub_fix_it();return 0; };// weak
x_DWORD x_dos_setdrive(Bit32s a, Bit32s* b) {
	*b = 0x1a;
	return 0;
};// weak
x_DWORD x_outp(x_DWORD, char) { stub_fix_it();return 0; };// weak
x_DWORD x_inp(x_DWORD) { stub_fix_it();return 0; };// weak
FILE* x_creat(const char* path, Bit32u flags) {
	return mycreate(path, flags);
	/*FILE *fp;
	char path2[512] = "\0";
	pathfix(path, path2);//only for DOSBOX version
	fp = fopen(path2, "wb+");
	return fp;*/
};// weak

x_DWORD x_setmode(FILE* path, int mode) { stub_fix_it();return 0; };// weak
FILE* x_sopen(const char* path, int pmode, Bit32u flags) {
	return myopen(path, pmode, flags);
};
int x_close(FILE* descriptor) {
	return myclose(descriptor);
};
x_DWORD x_lseek(FILE* filedesc, x_DWORD position, char type) {
	return mylseek(filedesc, position, type);
};
unsigned __CFRCR__(int16_t a, uint8_t b) { stub_fix_it();return 0; };
unsigned __CFRCL__(int16_t a, uint8_t b) { stub_fix_it();return 0; };
size_t x_write2(FILE* descriptor, Bit8u* buffer, Bit32u size_t) {
	return fwrite(buffer, 1, size_t, descriptor);
};// weak
x_DWORD x_tolower(x_DWORD) { stub_fix_it();return 0; };// weak
FILE* x_open(char* path, int pmodex) {
	return myopent(path, (char*)"rb");
};
void __writegsx_WORD(unsigned long Offset, unsigned short Data) { stub_fix_it(); };
void __writegsx_DWORD(unsigned long Offset, unsigned long Data) { stub_fix_it(); };
x_DWORD dos_read(FILE*, char, x_DWORD, x_DWORD, x_DWORD) { stub_fix_it();return 0; };// weak
unsigned long __readgsx_DWORD(unsigned long Offset) { stub_fix_it();return 0; };
void __inx_BYTEstring(unsigned short Port, unsigned char* Buffer, unsigned long Count) { stub_fix_it(); };
int* MK_FP(unsigned int segment, unsigned int offset) { stub_fix_it();return 0; };
unsigned int x__getcallerseflags(void) { stub_fix_it();return 0; };
int /*__fastcall*/ _hook387(x_DWORD, x_DWORD, x_DWORD) { stub_fix_it();return 0; };// weak
void x__sidt(void *Destination) { stub_fix_it(); };
unsigned long x__readcr0(void) { stub_fix_it();return 0; };
void x__writecr0(uint32_t Data) { stub_fix_it(); };
int _FDFS(void) { stub_fix_it();return 0; };// weak
int _sigfpe_handler() { stub_fix_it();return 0; };// weak
int _DOS4G_hook_init(void) { stub_fix_it();return 0; };// weak
int _Phar_hook_init(void) { stub_fix_it();return 0; };// weak
//int _Ergo_hook_init(x_DWORD, x_DWORD) { stub_fix_it();return 0; };// weak
int _Intel_hook_init(void) { stub_fix_it();return 0; };// weak
int _DOS4G_hook_fini(void) { stub_fix_it();return 0; };// weak
int _Intel_hook_fini(void) { stub_fix_it();return 0; };// weak
int _Phar_hook_fini(void) { stub_fix_it();return 0; };// weak
//int _Ergo_hook_fini(x_DWORD) { stub_fix_it();return 0; };// weak

int _nmemneed(Bit8u*) { stub_fix_it();return 0; };// weak
int _nmemneed_0(Bit8u*) { stub_fix_it();return 0; };// weak
int /*__fastcall*/ nullsub_1(x_DWORD) { stub_fix_it();return 0; }; // weak
//int sub_365F8() { stub_fix_it();return 0; }; // weak 222712
//type_str_0x6E8E* sub_48930(int16_t a1, int16_t a2, int16_t a3, int16_t a4, char a5);

int _wcpp_1_unwind_leave__99(Bit8u*) { /*stub_fix_it();*/return 0; };// weak
//int sub_6FD30() { stub_fix_it();return 0; }; // weak
//int sub_752C0() { stub_fix_it();return 0; }; // weak
//int sub_76F40() { stub_fix_it();return 0; }; // weak
int sub_8E0D0() { stub_fix_it();return 0; }; // weak
void sub_8F4B0(HMDIDRIVER user) { stub_fix_it(); }; // weak
int dword_1820E0 = 0;
long clock_value()
{
	return mygethundredths();
}
long _clock()
{
	return clock_value();
}
long /*__fastcall*/ j___clock() {
	return _clock();
}; // weak
void sub_99830(HMDIDRIVER user) { stub_fix_it(); }; // weak
x_DWORD j___delay(x_DWORD x) { mydelay(x);return 0; }; // weak
int /*__fastcall*/ j_j___clock(x_DWORD, x_DWORD, x_DWORD) { stub_fix_it();return 0; }; // weak
int x_DWORD_E3E38 = 0; // weak
int x_DWORD_181DA8; // weak
unsigned int sub_91F20();
Bit32s sub_91F70_AIL_call_driver(AIL_DRIVER* drvr, Bit32s fn, VDI_CALL* in, VDI_CALL* out);//AIL_call_driver
void sub_91F50(unsigned int a1);
void sub_9E250(HMDIDRIVER mdidrv) {
	if (!x_DWORD_E3E38)
	{
		x_DWORD_E3E38 = 1;
		x_DWORD_181DA8 = sub_91F20();
		sub_91F70_AIL_call_driver(mdidrv->drvr_0, 770, 0, 0);
		sub_91F50(x_DWORD_181DA8);
		x_DWORD_E3E38 = 0;
	}
}; // weak
void sub_A2450(HMDIDRIVER user) { stub_fix_it(); }; // weak
int sub_A2DE0() { stub_fix_it();return 0; }; // weak
int sub_A47A0() { stub_fix_it();return 0; }; // weak
int sub_A4920() { stub_fix_it();return 0; }; // weak
//void sub_A6530(Bit32u user) { stub_fix_it();}; // weak
int sub_A9C00() { stub_fix_it();return 0; }; // weak
int sub_A9C50() { stub_fix_it();return 0; }; // weak
void sub_A6F30(void* a/*HDIGDRIVER a*/) { stub_fix_it();/*return 0; */ }; // weak
int sub_B1DC8() { stub_fix_it();return 0; }; // weak
int sub_B46F0() { stub_fix_it();return 0; }; // weak
//int /*__far*/ sub_C0000() { stub_fix_it();return 0; }; // weak





//char sounddir[512];



// Function declarations
/*void __noreturn sub_10000(); // weak*/
int16_t sub_10010();
unsigned int sub_10080(int a1, int a2);
void sub_10100(int a1);
signed int sub_10130(int a1, x_DWORD *a2, x_DWORD *a3);
void sub_101C0();
int sub_102D0(type_str_0x6E8E* a1, axis_3d* a2, char a3);
signed int sub_104A0(axis_3d* a1);
Bit32u sub_104D0_terrain_tile_is_water(axis_3d* a1);
Bit32u sub_10590_terrain_tile_type(char a1);
bool sub_10630(axis_3d* a1, axis_4d* a2, axis_3d* a3, axis_4d* a4);
bool sub_106C0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
bool sub_106F0(axis_3d* a1, axis_4d* a2, axis_3d* a3, axis_4d* a4);
bool sub_10750(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
type_str_0x6E8E* sub_10780(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_108B0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_10A50(type_str_0x6E8E* a1);
signed int sub_10B70(axis_3d* a1, char a2, char a3);
int sub_10C40_getTerrainAlt(axis_3d* a1);
int sub_10C60(axis_3d* a1);
int sub_10C80(type_str_0x6E8E* a1, uint8_t a2, uint16_t a3);
void sub_112D0(type_str_0x6E8E* a1, uint16_t a2);
void sub_11400(type_str_0x6E8E* a1, char a2, uint16_t a3);
int sub_116A0(type_str_0x6E8E* a1, char a2, uint16_t a3);
int sub_11900(type_str_0x6E8E* a1, type_str_0x6E8E* a2, uint8_t a3, uint16_t a4);
void sub_11960(x_WORD *a1);
char sub_11A10(type_str_0x6E8E* a1);
char sub_11C80(uaxis_2d a1);
bool sub_11CB0(axis_3d* a1);
bool sub_11E20(type_str_0x6E8E* a1, axis_3d* a2);
bool sub_11E70(type_str_0x6E8E* a1, axis_3d* a2);
void sub_11EE0(/*Bit8u* a1*/);
void sub_12100(type_str_0x30311* a1, type_str_0x6E8E* a2, char a3);
void sub_122A0(type_str_0x6E8E* a1);
void sub_122C0(int16_t a1);
void sub_12330(type_str_0x6E8E* a1, int16_t a2);
void sub_12410(Bit8u* a1, char a2);
void sub_12470(type_str_0x6E8E* a1, char a2);
void sub_12500(Bit8u* a1);
void sub_12780();
void sub_12870();
signed int sub_12910(type_str_0x6E8E* a1);
signed int sub_12A70(type_str_0x6E8E* a1);
signed int sub_12E70(type_str_0x6E8E* a1);
signed int sub_12FF0(type_str_0x6E8E* a1);
int _nmemneed(x_DWORD);// weak
signed int sub_13100(type_str_0x6E8E* a1);
signed int sub_131F0(type_str_0x6E8E* a1);
signed int sub_13270(type_str_0x6E8E* a1);
signed int sub_133B0(type_str_0x6E8E* a1);
int _nmemneed_0(x_DWORD);// weak
signed int sub_135C0(type_str_0x6E8E* a1);
signed int sub_13710(type_str_0x6E8E* a1);
signed int sub_13830(type_str_0x6E8E* a1);
signed int sub_13850(type_str_0x6E8E* a1);
int sub_13870(type_str_0x6E8E* a1);
int /*__fastcall*/ nullsub_1(x_DWORD); // weak
signed int sub_13890(type_str_0x6E8E* a1);
signed int sub_13B00(type_str_0x6E8E* a1);
signed int sub_13C50(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_13CE0(type_str_0x6E8E* a1);
signed int sub_13DC0(type_str_0x6E8E* a1);
signed int sub_13E40(type_str_0x6E8E* a1);
signed int sub_14030(type_str_0x6E8E* a1);
signed int sub_14250(type_str_0x6E8E* a1);
signed int sub_14530(type_str_0x6E8E* a1);
signed int sub_14630(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_146C0(type_str_0x6E8E* a1, uint8_t a2);
void sub_146F0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_148E0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_14B10(type_str_0x6E8E* a1, uint8_t a2);
type_str_0x6E8E* sub_14BD0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
int16_t sub_14C40(type_str_0x6E8E* a1);
bool sub_14C60(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_14C90(type_str_0x6E8E* a1, type_str_0x6E8E* a2, signed int a3, signed int a4);
signed int sub_14E10(type_str_0x6E8E* a1, uint8_t a2);
type_str_0x6E8E* sub_15170(type_str_0x6E8E* a1, uint8_t a2);
signed int sub_155E0(type_str_0x6E8E* a1);
bool sub_156F0(type_str_0x6E8E* a1, uint8_t a2);
bool sub_15730(type_str_0x6E8E* a1, uint8_t a2);
type_str_0x6E8E* sub_15760(type_str_0x6E8E* a1, uint8_t a2);
char sub_15790(type_str_0x6E8E* a1);
char sub_15910(type_str_0x6E8E* a1);
void sub_159E0();
// unsigned int sub_15CB0(unsigned int a1, int a2);
void sub_15D20(type_str_0x6E8E* a1);
// char sub_15D40(int16_t a1, int a2, int a3);
bool sub_15E60(type_str_0x6E8E* a1);
char sub_15EE0();
signed int sub_15F20(type_str_0x6E8E* a1, int16_t a2, signed int a3);
signed int sub_15FC0(type_str_0x6E8E* a1);
signed int sub_161A0(type_str_0x6E8E* a1);
bool sub_164B0(type_str_0x6E8E* a1);
signed int sub_16580(type_str_0x6E8E* a1);
// int sub_16730(int a1, int a2, char a3);
char sub_169C0(type_str_0x6E8E* a1);
// int sub_16CA0(int a1, int *a2, int16_t a3, char a4);
int sub_16E70(baxis_2d* a1, baxis_2d* a2);
type_str_0x6E8E* sub_16FC0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_17060_compute_mouse_relative_pos(int16_t a1, int16_t a2);
void sub_17190();
// char sub_17A00_mouse_and_keys_events(x_BYTE *a1, signed int a2, int16_t a3);
void sub_18AA0();
void sub_18B30();
void sub_18BB0();
char sub_18DA0(type_str_0x6E8E* a1, char a2, char a3);
void sub_18F80(type_str_0x6E8E* a1);
void sub_191B0(int16_t a1, char a2);
void sub_19760_set_message(const char *a1, uint8_t a2, int16_t a3);
void sub_197F0();
void sub_19A50();
void sub_19A70();
void sub_19AB0();
void sub_19CA0_sound_proc5(uint8_t a1);
// int sub_19D60(signed int a1, int a2);
void sub_19E00();
void sub_1A030();
// void sub_1A070(signed int a1, int16_t a2);
void sub_1A280();
int sub_1A4A0();
int sub_1A5B0_getLangStrings(int a1, int *a2, int *a3);
void sub_1A7A0_fly_asistant();
void sub_1A8A0();
void sub_1A970_change_game_settings(char a1, int a2, int a3);
int sub_1B5F0();
void sub_1B6B0(type_str_0x6E8E* a1);
int sub_1B7A0_tile_compare(axis_3d* a1);
int sub_1B830(axis_3d* a1);
signed int sub_1B8C0(type_str_0x6E8E* a1);
int sub_1BD90(type_str_0x6E8E* a1, char a2);
void sub_1BF90(type_str_0x6E8E* a1, char a2);
signed int sub_1C310(type_str_0x6E8E* a1, char a2, uint16_t(*a3)(type_str_0x6E8E*, type_str_0x6E8E*));
void sub_1C560(type_str_0x6E8E* a1, uint16_t a2);
void sub_1C890(type_str_0x6E8E* a1, char a2);
void sub_1C930(type_str_0x6E8E* a1);
void sub_1C980(type_str_0x6E8E* a1, char a2);
signed int sub_1CC20(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_1CCE0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_1CDA0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_1CE80(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_1CED0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_1CF20(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_1D0E0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_1D1A0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_1D260(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_1D460(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_1D5D0(type_str_0x6E8E* a1, int16_t a2);
void sub_1D700(type_str_0x6E8E* a1, int16_t a2);
void sub_1D7C0(type_str_0x6E8E* a1, int16_t a2);
void sub_1D880(type_str_0x6E8E* a1, int16_t a2);
void sub_1D8A0(type_str_0x6E8E* a1, int16_t a2);
void sub_1D8C0(type_str_0x6E8E* a1, int16_t a2);
void sub_1DBF0(type_str_0x6E8E* a1, uint16_t a2);
void sub_1DDA0(type_str_0x6E8E* a1, int16_t a2);
void sub_1E000(type_str_0x6E8E* a1, int16_t a2);
void sub_1E020(type_str_0x6E8E* a1, int16_t a2);
void sub_1E040(type_str_0x6E8E* a1, char a2);
void sub_1E1C0(type_str_0x6E8E* a1, int16_t a2);
void sub_1E320(type_str_0x6E8E* a1);
int sub_1E3E0(type_str_0x6E8E* a1);
void sub_1E4D0(type_str_0x6E8E* a1);
void sub_1E580(type_str_0x6E8E* a1, int16_t a2);
void sub_1E700(type_str_0x6E8E* a1, char a2);
void sub_1E9C0(type_str_0x6E8E* a1, int16_t a2);
type_str_0x6E8E* sub_1ED30(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
int sub_1EEE0(type_str_0x6E8E* a1);
void sub_1EF20(type_str_0x6E8E* a1);
// int sub_1EF40(int a1, x_WORD *a2);
// int sub_1EF70(int a1, x_WORD *a2);
// int sub_1EFD0(int a1, x_WORD *a2);
void sub_1F000(type_str_0x6E8E* a1);
void sub_1F020(type_str_0x6E8E* a1);
void sub_1F040(type_str_0x6E8E* a1);
// void sub_1F0C0(int a1, int a2);
// int sub_1F300(int a1, int a2);
void sub_1F340(type_str_0x6E8E* a1);
void sub_1F3C0(type_str_0x6E8E* a1);
void sub_1F440(type_str_0x6E8E* a1);
void sub_1F470(type_str_0x6E8E* a1);
void sub_1F4F0(type_str_0x6E8E* a1);
void sub_1F510(type_str_0x6E8E* a1);
void sub_1F530(type_str_0x6E8E* a1);
void sub_1F5B0(type_str_0x6E8E* a1);
int sub_1F630(type_str_0x6E8E* a1);
void sub_1F660(type_str_0x6E8E* a1);
void sub_1F6D0(type_str_0x6E8E* a1);
void sub_1F800(type_str_0x6E8E* a1);
void sub_1F830(type_str_0x6E8E* a1);
void sub_1F850(type_str_0x6E8E* a1);
void sub_1F8A0(type_str_0x6E8E* a1);
void sub_1F950(type_str_0x6E8E* a1);
void sub_1F970(type_str_0x6E8E* a1);
void sub_1F990(type_str_0x6E8E* a1);
void sub_1F9E0(type_str_0x6E8E* a1);
void sub_1FA00(type_str_0x6E8E* a1);
void sub_1FA20(type_str_0x6E8E* a1);
void sub_1FA50(type_str_0x6E8E* a1);
void sub_1FA70(type_str_0x6E8E* a1);
void sub_1FAA0(type_str_0x6E8E* a1);
void sub_1FF40(type_str_0x6E8E* a1);
void sub_1FFE0(type_str_0x6E8E* a1);
void sub_20010(type_str_0x6E8E* a1);
void sub_20040(type_str_0x6E8E* a1);
void sub_20060(type_str_0x6E8E* a1);
void sub_200F0(type_str_0x6E8E* a1);
void sub_20140(type_str_0x6E8E* a1);
void sub_20370(type_str_0x6E8E* a1);
void sub_203D0(type_str_0x6E8E* a1);
void sub_20940(type_str_0x6E8E* a1);
void sub_20C50(type_str_0x6E8E* a1);
void sub_20E50(type_str_0x6E8E* a1);
void sub_20E80(type_str_0x6E8E* a1);
void sub_20EA0(type_str_0x6E8E* a1);
void sub_20EC0(type_str_0x6E8E* a1);
void sub_20F20(type_str_0x6E8E* a1);
void sub_20F60(type_str_0x6E8E* a1);
void sub_20F80(type_str_0x6E8E* a1);
void sub_20FC0(type_str_0x6E8E* a1);
void sub_21030(type_str_0x6E8E* a1);
char sub_21490(type_str_0x6E8E* a1);
void sub_21850(type_str_0x6E8E* a1);
void sub_21AB0(type_str_0x6E8E* a1);
char sub_21F60(type_str_0x6E8E* a1);
char sub_22190(type_str_0x6E8E* a1);
void sub_221F0(type_str_0x6E8E* a1, int16_t a2);
void sub_22270(type_str_0x6E8E* a1);
void sub_222B0(type_str_0x6E8E* a1);
void sub_223E0();
void sub_22490(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_22530(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_22540(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_22550(type_str_0x6E8E* a1);
void sub_22560(type_str_0x6E8E* a1);
void sub_22580(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_225A0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_225B0(type_str_0x6E8E* a1);
bool sub_22640(axis_3d* a1, uint16_t a2, uint16_t a3, uint16_t a4);
void sub_226D0(uint16_t a1, Bit16s* exwidth, Bit16s* expheight);
void sub_22760(type_str_0x6E8E* a1);
void sub_22C80(type_str_0x6E8E* a1);
void sub_22E60(type_str_0x6E8E* a1);
void sub_23020(type_str_0x6E8E* a1);
void sub_231E0(type_str_0x6E8E* a1);
void sub_23200(type_str_0x6E8E* a1);
void sub_23260(type_str_0x6E8E* a1);
void sub_232A0(type_str_0x6E8E* a1);
char sub_232C0();
void sub_23320(type_str_0x6E8E* a1);
void sub_23340(type_str_0x6E8E* a1);
void sub_23640(type_str_0x6E8E* a1);
void sub_23660(type_str_0x6E8E* a1);
void sub_23680(type_str_0x6E8E* a1);
void sub_236F0(type_str_0x6E8E* a1);
void sub_23710(type_str_0x6E8E* a1);
void sub_23750(type_str_0x6E8E* a1);
void sub_23790(type_str_0x6E8E* a1);
void sub_237B0(type_str_0x6E8E* a1);
void sub_23AC0(type_str_0x6E8E* a1);
void sub_23AE0(type_str_0x6E8E* a1);
void sub_23B00(type_str_0x6E8E* a1);
void sub_23B30(type_str_0x6E8E* a1);
void sub_23B90(type_str_0x6E8E* a1);
void sub_23BD0(type_str_0x6E8E* a1);
void sub_23C20(type_str_0x6E8E* a1);
void sub_23C40(type_str_0x6E8E* a1);
void sub_23E60(type_str_0x6E8E* a1);
void sub_240A0(type_str_0x6E8E* a1);
void sub_240C0(type_str_0x6E8E* a1);
void sub_240E0(type_str_0x6E8E* a1);
void sub_24100(type_str_0x6E8E* a1);
void sub_24150(type_str_0x6E8E* a1);
void sub_24190(type_str_0x6E8E* a1);
void sub_24400(type_str_0x6E8E* a1);
void sub_24420(type_str_0x6E8E* a1);
void sub_24440(type_str_0x6E8E* a1);
int16_t sub_24510(type_str_0x6E8E* a1);
void sub_247D0(type_str_0x6E8E* a1);
void sub_247F0(type_str_0x6E8E* a1);
void sub_24810(type_str_0x6E8E* a1);
void sub_24840(type_str_0x6E8E* a1);
void sub_24860(type_str_0x6E8E* a1);
void sub_248C0(type_str_0x6E8E* a1);
int16_t sub_24930(type_str_0x6E8E* a1);
void sub_24D40(type_str_0x6E8E* a1);
void sub_24DA0(type_str_0x6E8E* a1);
void sub_24DC0(type_str_0x6E8E* a1);
void sub_24DF0(type_str_0x6E8E* a1);
int sub_24E20(type_str_0x6E8E* a1);
int sub_25050(type_str_0x6E8E* a1);
int sub_250B0(type_str_0x6E8E* a1);
// int sub_25280(int a1, int a2);
void sub_252A0(type_str_0x6E8E* a1);
void sub_252C0(type_str_0x6E8E* a1);
unsigned int sub_252E0(type_str_0x6E8E* a1);
// int sub_253B0(int result, int a2, uint8_t a3, uint8_t a4);
int sub_254E0(type_str_0x6E8E* a1, type_str_0x6E8E* a2, uint8_t a3);
void sub_25550(type_str_0x6E8E* a1x);
void sub_25590(type_str_0x6E8E* a1x);
void sub_255C0(type_str_0x6E8E* a1x);
void sub_25610(type_str_0x6E8E* a1x);
void sub_25CD0(type_str_0x6E8E* a1);
void sub_25D00(type_str_0x6E8E* a1);
void sub_25D20(type_str_0x6E8E* a1);
void sub_25D50(type_str_0x6E8E* a1);
void sub_25D80(type_str_0x6E8E* a1);
void sub_25DE0(type_str_0x6E8E* a1);
void sub_25E40(type_str_0x6E8E* a1);
void sub_25F70(type_str_0x6E8E* a1);
void sub_25FD0(type_str_0x6E8E* a1);
void sub_25FF0(type_str_0x6E8E* a1);
void sub_26020(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_26050(type_str_0x6E8E* a1);
char sub_26070(type_str_0x6E8E* a1);
// unsigned int sub_26220(unsigned int a1, int a2);
type_str_0x6E8E* sub_263C0(type_str_0x6E8E* a1);
void sub_263E0(type_str_0x6E8E* a1);
void sub_26400(type_str_0x6E8E* a1);
void sub_26470(type_str_0x6E8E* a1);
// int sub_26500(int result, int a2);
void sub_265A0(type_str_0x6E8E* a1);
signed int sub_26830(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_268F0(type_str_0x6E8E* a1, uint8_t a2);
char sub_26930(type_str_0x6E8E* a1);
void sub_26960(type_str_0x6E8E* a1);
void sub_26990(type_str_0x6E8E* a1);
void sub_26AA0(type_str_0x6E8E* a1);
void sub_26BD0(type_str_0x6E8E* a1);
void sub_26CA0(type_str_0x6E8E* a1);
int sub_26CC0(type_str_0x6E8E* a1);
void sub_26D20(type_str_0x6E8E* a1);
int sub_26F10(type_str_0x6E8E* a1);
void sub_26FF0(type_str_0x6E8E* a1);
void sub_27120(type_str_0x6E8E* a1);
void sub_271D0(type_str_0x6E8E* a1);
void sub_272C0(type_str_0x6E8E* a1);
int sub_273C0(int16_t a1, char a2, int16_t a3, int16_t a4);
int sub_27430(int a1);
type_str_0x6E8E* sub_27470(type_str_0x6E8E* a1, int16_t a2);
void sub_274C0(type_str_0x6E8E* a1, type_str_0x6E8E* a2, type_str_0x6E8E* a3, int16_t a4);
// int sub_27590(signed int a1, int a2);
// int sub_27610(signed int a1, int a2);
void sub_276E0(type_str_0x6E8E* a1);
void sub_27720(type_str_0x6E8E* a1, int16_t a2);
void sub_27880(type_str_0x6E8E* a1);
int sub_278F0(int a1, int16_t a2, int16_t a3);
void sub_27930(type_str_0x6E8E* a1);
void sub_27950(type_str_0x6E8E* a1);
void sub_27B20(type_str_0x6E8E* a1);
void sub_27C10(type_str_0x6E8E* a1);
void sub_27E00(type_str_0x6E8E* a1);
void sub_27FA0(type_str_0x6E8E* a1);
void sub_27FC0(type_str_0x6E8E* a1);
void sub_27FE0(type_str_0x6E8E* a1, char a2, char a3, int a4);
type_str_0x6E8E* sub_28000(type_str_0x6E8E* a1);
char sub_28060(type_str_0x6E8E* a1);
void sub_28110(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_282D0(type_str_0x6E8E* a1);
char sub_28390(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
type_str_0x6E8E* sub_28420(type_str_0x6E8E* a1);
void sub_28470(type_str_0x6E8E* a1);
void sub_28490(type_str_0x6E8E* a1);
void sub_28500(type_str_0x6E8E* a1);
void sub_28570(type_str_0x6E8E* a1);
void sub_285D0(type_str_0x6E8E* a1);
void sub_285F0(type_str_0x6E8E* a1);
void sub_28610(type_str_0x6E8E* a1);
void sub_28630(type_str_0x6E8E* a1);
void sub_28660(type_str_0x6E8E* a1);
void sub_28690(type_str_0x6E8E* a1);
void sub_287B0(type_str_0x6E8E* a1);
int16_t sub_28860(type_str_0x6E8E* a1);
int sub_28C30(type_str_0x6E8E* a1);
signed int sub_28C60(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_28CC0(type_str_0x6E8E* a1);
void sub_28CE0(type_str_0x6E8E* a1x);
void sub_28EC0(type_str_0x6E8E* a1);
void sub_28F50(type_str_0x6E8E* a1);
void sub_28F90(type_str_0x6E8E* a1);
void sub_28FC0(type_str_0x6E8E* a1);
void sub_28FF0(type_str_0x6E8E* a1);
void sub_29300(type_str_0x6E8E* a1);
void sub_29330(type_str_0x6E8E* a1);
void sub_29350(type_str_0x6E8E* a1);
void sub_29380(type_str_0x6E8E* a1);
void sub_293B0(type_str_0x6E8E* a1);
void sub_293D0(type_str_0x6E8E* a1);
void sub_29400(type_str_0x6E8E* a1);
void sub_29670(type_str_0x6E8E* a1);
void sub_29710(type_str_0x6E8E* a1);
void sub_29890(type_str_0x6E8E* a1);
void sub_298B0(type_str_0x6E8E* a1);
int sub_298D0(type_str_0x6E8E* a1);
void sub_29930(type_str_0x6E8E* a1);
void sub_29A90(type_str_0x6E8E* a1);
// char sub_2A340(int a1, int a2, int a3, int a4, int a5, int a6);
void sub_2A5B0(type_str_0x6E8E* a1, type_str_0x6E8E* a2, int16_t a3);
void sub_2A660(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_2A6B0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_2A6F0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_2A7B0(type_str_0x6E8E* a1);
void sub_2A7F0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2, char a3);
void sub_2A940(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_2A9F0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
// uint16_t sub_2AA90(int a1, int a2, int a3);
void sub_2AC50(type_str_0x6E8E* a1);
void sub_2AD40(type_str_0x6E8E* a1);
void sub_2AE30(type_str_0x6E8E* a1);
void sub_2AE80(type_str_0x6E8E* a1);
void sub_2AED0(type_str_0x6E8E* a1, int a2);
char sub_2AF10(type_str_0x6E8E* a1, char a2);
void sub_2B1D0(type_str_0x6E8E* a1);
void sub_2B200(type_str_0x6E8E* a1);
void sub_2B260(type_str_0x6E8E* a1);
void sub_2B750(type_str_0x6E8E* a1);
void sub_2B760(type_str_0x6E8E* a1);
void sub_2B780(type_str_0x6E8E* a1);
void sub_2B7B0(type_str_0x6E8E* a1);
char sub_2B7E0(type_str_0x6E8E* a1);
void sub_2B840(type_str_0x6E8E* a1);
void sub_2B860(type_str_0x6E8E* a1, uint8_t a2);
signed int sub_2B9A0(type_str_0x6E8E* a1x);
void sub_2BA50(type_str_0x6E8E* a1, uint8_t a2);
// int _wcpp_1_unwind_leave__62(void); weak
void sub_2BB40_draw_bitmap(Bit16s posx, Bit16s posy, posistruct temposstr);
void sub_2BBB0(int16_t a1, int16_t a2, posistruct a3);
//void sub_2BC10_draw_text(char* text, int16_t a2, int16_t a3, uint8_t a4);
void sub_2BC80(Bit16s a1, Bit16s a2, Bit16s a3, Bit16s a4, Bit8u a5);
void sub_2BD10_draw_line(int16_t a1, int16_t a2, int16_t a3, int16_t a4, uint8_t a5);
int sub_2BE30_draw_game_frame();
void sub_2CA60(int16_t a1, int16_t a2, int16_t a3, int16_t a4);
int sub_2CA90(int16_t a1);
void sub_2CB30(type_str_0x6E8E*a1, int16_t a2, int a3, int16_t a4);
void sub_2CE30_pause_end_level(int a1, int a2);
void sub_2D190(int16_t a1, int16_t a2, int a3, int16_t a4, int a5, uint8_t a6);
int sub_2D1D0();
void sub_2D710_draw_top_menu(type_str_0x6E8E* a1);
void sub_2DE80_draw_bitmapxx(int16_t a1, int16_t a2, posistruct a3);
char sub_2DFD0(int16_t a1, int16_t a2, posistruct a3, uint8_t a4);
void sub_2E260_draw_spell(int16_t a1, int16_t a2, type_str_0x6E8E* a3, char a4);
int sub_2E790(int16_t a1, int a2, int a3, int a4, uint8_t a5);
int sub_2E850(int16_t a1, int a2, int a3, int a4, uint8_t a5);
void sub_2EB60();
void sub_2EBB0_draw_text_with_border_630x340(char* a1);
void sub_2EC30_clear_img_mem();
void sub_2EC60();
void sub_2EC90(char a1);
void sub_2ECC0_draw_bottom_menu();
void sub_2F6B0();
void sub_2FD90_draw_pause_menu();
int *sub_2FFE0(int *a1, int *a2, x_DWORD *a3, x_DWORD *a4);
void sub_30050_draw_in_game_menu_320();
// int sub_303D0(signed int a1);
void sub_30630();
void sub_30870();
void sub_30A60_in_game_menu(int16_t a1, int16_t a2);
x_DWORD *sub_30BE0(x_DWORD *a1, x_DWORD *a2);
void sub_30D50(type_str_0x6E8E* a1/*, Bit8u v2, Bit8u v4*/);
void sub_30F60(type_str_0x6E8E* a1);
void sub_31100(type_str_0x6E8E* a1);
void sub_31120(type_str_0x6E8E* a1);
void sub_311E0(type_str_0x6E8E* a1);
void sub_31760(type_str_0x6E8E* a1);
void sub_31870(type_str_0x6E8E* a1);
void sub_31890(type_str_0x6E8E* a1);
void sub_318B0(type_str_0x6E8E* a1);
void sub_31920(type_str_0x6E8E* a1);
void sub_31940(type_str_0x6E8E* a1);
void sub_31E90(type_str_0x6E8E* a1);
void sub_31F00(type_str_0x6E8E* a1, int16_t a2, int16_t a3);
void sub_31FB0(type_str_0x6E8E* a1x);
void sub_320E0(type_str_0x6E8E* a1x);
void sub_32120(type_str_0x6E8E* a1);
void sub_32160(type_str_0x6E8E* a1);
void sub_322A0(type_str_0x6E8E* a1);
void sub_323E0(type_str_0x6E8E* a1);
void sub_32400(type_str_0x6E8E* a1);
void sub_32420(type_str_0x6E8E* a1);
void sub_32530(type_str_0x6E8E* a1);
void sub_32600(type_str_0x6E8E* a1);
void sub_32880(type_str_0x6E8E* a1);
void sub_32A70(type_str_0x6E8E* a1);
void sub_32CF0(type_str_0x6E8E* a1);
void sub_32F40(type_str_0x6E8E* a1);
void sub_33110(type_str_0x6E8E* a1);
void sub_331A0(type_str_0x6E8E* a1);
void sub_33340(type_str_0x6E8E* a1);
void sub_33710(type_str_0x6E8E* a1);
char sub_33810(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_338D0(type_str_0x6E8E* a1);
void sub_339B0(type_str_0x6E8E* a1);
void sub_33AD0(type_str_0x6E8E* a1);
void sub_33B20(type_str_0x6E8E* a1);
void sub_33C00(type_str_0x6E8E* a1);
void sub_33C70(type_str_0x6E8E* a1);
void sub_33D40(type_str_0x6E8E* a1);
void sub_33D80(type_str_0x6E8E* a1);
void sub_33E20(type_str_0x6E8E* a1);
void sub_33E80(type_str_0x6E8E* a1);
bool sub_33F70(uint16_t a1);
void sub_34000(type_str_0x6E8E* a1);
void sub_34110(type_str_0x6E8E* a1);
void sub_34210(type_str_0x6E8E* a1);
void sub_34330(type_str_0x6E8E* a1);
void sub_34350(type_str_0x6E8E* a1);
void sub_34390(type_str_0x6E8E* a1);
void sub_343C0(type_str_0x6E8E* a1);
void sub_343F0(type_str_0x6E8E* a1);
void sub_34480(type_str_0x6E8E* a1);
void sub_344A0(type_str_0x6E8E* a1);
void sub_34520(type_str_0x6E8E* a1);
void sub_34540(type_str_0x6E8E* a1);
void sub_34910(type_str_0x6E8E* a1);
void sub_34B00(char a1, char a2, int16_t a3, int16_t a4);
void sub_34C40(type_str_0x6E8E* a1);
// void sub_34EE0(signed int a1, int a2, int a3);
void sub_352A0(type_str_0x6E8E* a1);
void sub_352C0(type_str_0x6E8E* a1);
void sub_35390(type_str_0x6E8E* a1);
void sub_35530(type_str_0x6E8E* a1);
void sub_35600(type_str_0x6E8E* a1);
void sub_35640(type_str_0x6E8E* a1);
void sub_357C0(type_str_0x6E8E* a1);
void sub_35940(type_str_0x6E8E* a1);
//int sub_365F8(); // weak
char sub_36680(type_str_0x6E8E* a1);
void sub_36770(type_str_0x6E8E* a1);
void sub_36850(type_str_0x6E8E* a1);
// char sub_36920(int16_t a1, int a2);
// signed int sub_369F0(signed int a1, int16_t a2);
// signed int sub_36A50(signed int a1, char a2);
void sub_36AE0(type_str_0x6E8E* a1);
void sub_36BA0(type_str_0x6E8E* a1, char a2);
void sub_36D50(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_36F30(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_36FC0(type_str_0x6E8E* a1x);
void sub_37240(type_str_0x6E8E* a1x);
char sub_37740(type_str_0x6E8E* a1);
void sub_377A0(type_str_0x6E8E* a1);
void sub_377F0(type_str_0x6E8E* a1);
void sub_37BC0_modify_terrain(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_38270(type_str_0x6E8E* a1);
int sub_38330(type_str_0x6E8E* a1);
void sub_385C0_remove_castle_stage(type_str_0x6E8E* a1);
int sub_389F0(type_str_0x6E8E* a1);
signed int sub_38B00(type_str_0x6E8E* a1);
int sub_38B90(type_str_0x6E8E* a1);
unsigned int sub_38D80(type_str_0x6E8E* a1);
int sub_38E20(type_str_0x6E8E* a1);
int sub_38E40(type_str_0x6E8E* a1);
int sub_38E70(type_str_0x6E8E* a1);
int sub_38F70(type_str_0x6E8E* a1);
void sub_39040(type_str_0x6E8E* a1);
void sub_396A0(type_str_0x6E8E* a1);
uint8_t sub_396D0(type_str_0x6E8E* a1);
void sub_39B60(type_str_0x6E8E* a1);
char sub_39E40(type_str_0x6E8E* a1);
char sub_39FA0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_3A090(type_str_0x6E8E* a1);
void sub_3A200(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_3A2D0(type_str_0x6E8E* a1);
void sub_3A5B0(type_str_0x6E8E* a1);
void sub_3A630(type_str_0x6E8E* a1);
int sub_3A650(type_str_0x6E8E* a1);
char sub_3A7F0(type_str_0x6E8E* a1);
void sub_3A8B0(type_str_0x6E8E* a1);
void sub_3AF00_castle_defend_event(type_str_0x6E8E* a1);
void sub_3B4D0_fill_unk_D4350_256(int a1);
x_DWORD* sub_3B560_set_billboards(int16_t a1);
int16_t sub_40950_draw_sky(int16_t a1);
void sub_40BF0(int a1, int a2, int a3, int a4);
void sub_40C50(int a1);
int /*__fastcall*/ sub_40D10();
void sub_40F80();
void sub_411A0_draw_world(Bit8u* a1, int a2, int a3, int16_t a4, signed int a5, int a6, int16_t a7, int a8);
void sub_417A0_install_pal_and_mouse_minmax();
void sub_417D0_install_pal_and_mouse_minmax2();
void sub_41AF0();
void sub_41B60();
void sub_41BD3_subDrawSprite(unsigned int a1);
uint16_t sub_46180(uint16_t a1, char a2);
void sub_462A0(uaxis_2d a1x, uaxis_2d a2x);
void sub_46570(uaxis_2d a1, uaxis_2d a2);
void sub_46820_simple_timer(Bit32u user);
// int sub_46830_main_loop(int16_t *a1, signed int a2, uint16_t a3);
void sub_46B40();
void sub_46B40_alt();
void /*__fastcall*/ sub_46DD0_init_sound_and_music(/*int a1, int a2, char* a3*/);
void sub_46F50_sound_proc7();
void sub_46F80();
void sub_47130();
void sub_47160();
// int sub_47320_in_game_loop(signed int a1);
int sub_473E0();
// void sub_47560_draw_and_events_in_game(int a1, int a2, x_BYTE *a3, signed int a4, int16_t a5);
void sub_47650(int a1/*, int a2*/);
void sub_47760(/*int a1,*/Bit32u user/* int a2, int a3*/);
void sub_47FC0_load_screen(char a1);
void sub_480A0_set_clear_pallette(/*int a1, int a2, int a3*/);
void sub_48120();
int sub_48370(int16_t a1, int16_t a2, int16_t a3);
int sub_483A0(int16_t a1, int a2, char a3, char a4);
int sub_48400(int a1, int a2, int a3, int a4);
type_str_0x6E8E* sub_48690(Bit16s a1, Bit16s a2, Bit16s a3, Bit16s a4);
type_str_0x6E8E* sub_487D0(uint16_t a1, uint16_t a2, int16_t a3, int16_t a4, char a5);
void sub_48880(uint16_t a1, uint16_t a2, int16_t a3, int16_t a4);
//int sub_48930(); // weak
int sub_48990(char a1, char a2, char a3, char a4);
// int16_t sub_48A20(int a1, char a2, char a3, int a4, int a5, uint8_t a6);
void sub_48B50(uint8_t a1, char a2, int a3, int a4);
void sub_48B90(uaxis_2d a1);
int16_t sub_48D20(int a1, uint16_t a2);
int16_t sub_48DF0(char a1, char a2, char a3, char a4);
signed int sub_48E60(int16_t a1, int16_t a2, int16_t a3, uint16_t a4);
signed int sub_48E90(int16_t a1, int16_t a2, int16_t a3, uint16_t a4);
signed int sub_48EC0(int16_t a1, int16_t a2, int16_t a3, uint16_t a4);
signed int sub_48EF0(int16_t a1, int16_t a2, int16_t a3, uint16_t a4);
signed int sub_48F20(char a1, char a2, int16_t a3, uint16_t a4, int a5);
signed int sub_48FD0(char a1, char a2, int16_t a3, uint16_t a4, int a5);
void sub_49090(type_str_2FECE* a1, type_str_2FECE* a2);
void sub_49270_generate_level_features(type_str_2FECE* a1);
//void sub_49290(type_str_2FECE* a1, char a2);
void sub_49540(type_str_2FECE* a1, type_str_0x30311* a2);
//void sub_49830(type_str_2FECE* a1);
void sub_498A0();
void sub_49A20_remove_event(type_str_0x6E8E* a1x);
void sub_49A30(type_str_0x6E8E* a1, uint16_t a2);
void sub_49C70(type_str_0x6E8E* a1);
void sub_49C90(type_str_0x6E8E* a1, int16_t a2);
void sub_49CD0(type_str_0x6E8E* a1, int16_t a2);
void sub_49D50(type_str_0x6E8E* a1, int16_t a2);
int sub_49DA0(type_str_0x6E8E* a1, int16_t a2);
void sub_49E10(type_str_0x6E8E* a1, int16_t a2);
void sub_49EA0(type_str_0x6E8E* a1, int16_t a2, int16_t a3);
void sub_49EC0(type_str_0x6E8E* a1, int16_t a2);
//void sub_49F30();
void sub_49F90();
type_str_0x6E8E* sub_4A050_new_event();
type_str_0x6E8E* sub_4A190(axis_3d* a1, int a2, int a3);
void sub_4A1E0(int a1, char a2);
void sub_4A310(type_str_0x30311* a1);
int sub_4A810_get_0x35plus();
type_str_0x6E8E* sub_4A820(axis_3d* a1);
type_str_0x6E8E* sub_4A840(axis_3d* a1);
type_str_0x6E8E* sub_4A860(axis_3d* a1);
type_str_0x6E8E* sub_4A880(axis_3d* a1);
type_str_0x6E8E* sub_4A8A0(axis_3d* a1);
type_str_0x6E8E* sub_4A8C0(axis_3d* a1);
type_str_0x6E8E* sub_4A8E0(axis_3d* a1);
type_str_0x6E8E* sub_4A900(axis_3d* a1);
type_str_0x6E8E* sub_4A920(axis_3d* a1);
type_str_0x6E8E* sub_4A9C0(axis_3d* a1);
type_str_0x6E8E* sub_4AA40(axis_3d* a1);
type_str_0x6E8E* sub_4ABA0(axis_3d* a1);
type_str_0x6E8E* sub_4AC40(axis_3d* a1);
type_str_0x6E8E* sub_4AD70(axis_3d* a1);
type_str_0x6E8E* sub_4ADF0(axis_3d* a1);
type_str_0x6E8E* sub_4AE80(axis_3d* a1);
type_str_0x6E8E* sub_4AF00(axis_3d* a1);
type_str_0x6E8E* sub_4AF70(axis_3d* a1);
type_str_0x6E8E* sub_4AFE0(axis_3d* a1);
type_str_0x6E8E* sub_4B0F0(axis_3d* a1);
type_str_0x6E8E* sub_4B120(axis_3d* a1);
type_str_0x6E8E* sub_4B150(axis_3d* a1, char a2, char a3, int16_t a4);
type_str_0x6E8E* sub_4B240(axis_3d* a1);
type_str_0x6E8E* sub_4B490(axis_3d* a1);
type_str_0x6E8E* sub_4B590(axis_3d* a1);
type_str_0x6E8E* sub_4B6F0(axis_3d* a1);
type_str_0x6E8E* sub_4BA10(axis_3d* a1);
type_str_0x6E8E* sub_4BBB0(axis_3d* a1);
type_str_0x6E8E* sub_4BD00(axis_3d* a1);
type_str_0x6E8E* sub_4BDF0(axis_3d* a1);
type_str_0x6E8E* sub_4BF40(axis_3d* a1);
type_str_0x6E8E* sub_4C0B0(axis_3d* a1);
type_str_0x6E8E* sub_4C1E0(axis_3d* a1);
type_str_0x6E8E* sub_4C310(axis_3d* a1);
type_str_0x6E8E* sub_4C460(axis_3d* a1);
type_str_0x6E8E* sub_4C590(axis_3d* a1);
type_str_0x6E8E* sub_4C6B0(axis_3d* a1);
type_str_0x6E8E* sub_4C7F0(axis_3d* a1);
type_str_0x6E8E* sub_4C8F0(axis_3d* a1);
type_str_0x6E8E* sub_4CA00(axis_3d* a1);
void sub_4CB60(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_4CBF0(axis_3d* a1);
type_str_0x6E8E* sub_4CCF0(axis_3d* a1);
type_str_0x6E8E* sub_4CE00(axis_3d* a1);
type_str_0x6E8E* sub_4CF00(axis_3d* a1);
type_str_0x6E8E* sub_4D000(/*Bit8u* a1,*/ axis_3d* a2);
type_str_0x6E8E* sub_4D1D0(axis_3d* a1);
type_str_0x6E8E* sub_4D2E0(axis_3d* a1);
type_str_0x6E8E* sub_4D380(axis_3d* a1);
type_str_0x6E8E* sub_4D3B0(axis_3d* a1);
type_str_0x6E8E* sub_4D470(axis_3d* a1);
type_str_0x6E8E* sub_4D500(axis_3d* a1);
type_str_0x6E8E* sub_4D590(axis_3d* a1);
type_str_0x6E8E* sub_4D620(axis_3d* a1);
type_str_0x6E8E* sub_4D6B0(axis_3d* a1);
type_str_0x6E8E* sub_4D740(axis_3d* a1);
type_str_0x6E8E* sub_4D7D0(axis_3d* a1);
type_str_0x6E8E* sub_4D860(axis_3d* a1);
type_str_0x6E8E* sub_4D900(axis_3d* a1);
type_str_0x6E8E* sub_4D990(axis_3d* a1);
type_str_0x6E8E* sub_4DA20(axis_3d* a1);
type_str_0x6E8E* sub_4DAB0(axis_3d* a1);
type_str_0x6E8E* sub_4DBC0(axis_3d* a1);
type_str_0x6E8E* sub_4DC40(axis_3d* a1);
type_str_0x6E8E* sub_4DCC0(axis_3d* a1);
type_str_0x6E8E* sub_4DD50(axis_3d* a1);
type_str_0x6E8E* sub_4DDD0(axis_3d* a1);
type_str_0x6E8E* sub_4DEA0(axis_3d* a1);
type_str_0x6E8E* sub_4DF30(axis_3d* a1);
type_str_0x6E8E* sub_4DFC0(axis_3d* a1);
type_str_0x6E8E* sub_4E050(axis_3d* a1);
type_str_0x6E8E* sub_4E0F0(axis_3d* a1);
type_str_0x6E8E* sub_4E180(axis_3d* a1);
type_str_0x6E8E* sub_4E210(axis_3d* a1);
type_str_0x6E8E* sub_4E2A0(axis_3d* a1);
type_str_0x6E8E* sub_4E320(axis_3d* a1);
type_str_0x6E8E* sub_4E3B0(axis_3d* a1);
type_str_0x6E8E* sub_4E430(axis_3d* a1);
type_str_0x6E8E* sub_4E490(axis_3d* a1);
type_str_0x6E8E* sub_4E500(axis_3d* a1);
type_str_0x6E8E* sub_4E570(axis_3d* a1);
type_str_0x6E8E* sub_4E5F0(axis_3d* a1);
type_str_0x6E8E* sub_4E6A0(axis_3d* a1);
type_str_0x6E8E* sub_4E750();
type_str_0x6E8E* sub_4E760(axis_3d* a1);
type_str_0x6E8E* sub_4E7D0(axis_3d* a1);
type_str_0x6E8E* sub_4E840(axis_3d* a1);
type_str_0x6E8E* sub_4E8C0(axis_3d* a1);
type_str_0x6E8E* sub_4E950(axis_3d* a1);
type_str_0x6E8E* sub_4E9E0(axis_3d* a1);
type_str_0x6E8E* sub_4EA20(axis_3d* a1);
type_str_0x6E8E* sub_4EA60(axis_3d* a1);
type_str_0x6E8E* sub_4EAA0(axis_3d* a1, char a2, char a3, int16_t a4, int a5);
type_str_0x6E8E* sub_4EB50(axis_3d* a1);
type_str_0x6E8E* sub_4EC10(axis_3d* a1);
type_str_0x6E8E* sub_4ECD0(axis_3d* a1);
type_str_0x6E8E* sub_4ED70(axis_3d* a1);
type_str_0x6E8E* sub_4EDC0(axis_3d* a1);
type_str_0x6E8E* sub_4EED0(axis_3d* a1);
type_str_0x6E8E* sub_4EF30(axis_3d* a1);
type_str_0x6E8E* sub_4EF90(axis_3d* a1);
type_str_0x6E8E* sub_4F040(axis_3d* a1);
uint16_t sub_4F1C0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_4F2A0(axis_3d*  a1);
int16_t sub_4F440(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_4F5F0(axis_3d* a1);
type_str_0x6E8E* sub_4F6A0(axis_3d* a1);
type_str_0x6E8E* sub_4F720(axis_3d* a1);
type_str_0x6E8E* sub_4F7A0(axis_3d* a1);
type_str_0x6E8E* sub_4F800(axis_3d* a1);
type_str_0x6E8E* sub_4F860(axis_3d* a1);
type_str_0x6E8E* sub_4F8B0(axis_3d* a1);
type_str_0x6E8E* sub_4F900(axis_3d* a1);
type_str_0x6E8E* sub_4F950(axis_3d* a1);
type_str_0x6E8E* sub_4F9A0(axis_3d* a1);
type_str_0x6E8E* sub_4FA00(axis_3d* a1);
type_str_0x6E8E* sub_4FA60(axis_3d* a1);
type_str_0x6E8E* sub_4FAC0(axis_3d* a1);
type_str_0x6E8E* sub_4FB20(axis_3d* a1);
type_str_0x6E8E* sub_4FB80(axis_3d* a1);
type_str_0x6E8E* sub_4FBE0(axis_3d* a1);
type_str_0x6E8E* sub_4FC30(axis_3d* a1);
type_str_0x6E8E* sub_4FCA0(axis_3d* a1);
type_str_0x6E8E* sub_4FCD0(axis_3d* a1);
type_str_0x6E8E* sub_4FD00(axis_3d* a1);
type_str_0x6E8E* sub_4FD70(axis_3d* a1);
type_str_0x6E8E* sub_4FDE0(axis_3d* a1);
type_str_0x6E8E* sub_4FE40(axis_3d* a1);
type_str_0x6E8E* sub_4FF20();
type_str_0x6E8E* sub_4FF30(axis_3d* a1);
type_str_0x6E8E* sub_4FFB0(axis_3d* a1);
type_str_0x6E8E* sub_50020(axis_3d* a1);
type_str_0x6E8E* sub_50080(axis_3d* a1);
type_str_0x6E8E* sub_500A0(axis_3d* a1);
type_str_0x6E8E* sub_500C0(axis_3d* a1, int16_t a2);
type_str_0x6E8E* sub_50130(axis_3d* a1);
type_str_0x6E8E* sub_501D0(axis_3d* a1);
type_str_0x6E8E* sub_50250(axis_3d* a1);
type_str_0x6E8E* sub_502B0(axis_3d* a1);
type_str_0x6E8E* sub_50320(axis_3d* a1);
type_str_0x6E8E* sub_50370(axis_3d* a1);
type_str_0x6E8E* sub_503D0(axis_3d* a1);
type_str_0x6E8E* sub_50430(axis_3d* a1);
type_str_0x6E8E* sub_504B0(axis_3d* a1);
type_str_0x6E8E* sub_50500(axis_3d* a1);
type_str_0x6E8E* sub_505A0(axis_3d* a1);
type_str_0x6E8E* sub_505E0(axis_3d* a1);
type_str_0x6E8E* sub_50640(axis_3d* a1);
type_str_0x6E8E* sub_506E0(axis_3d* a1);
type_str_0x6E8E* sub_50780(axis_3d* a1);
type_str_0x6E8E* sub_507C0(axis_3d* a1);
type_str_0x6E8E* sub_50800();
type_str_0x6E8E* sub_50840(axis_3d* a1);
type_str_0x6E8E* sub_508E0_castle_defend_create(axis_3d* a1);
type_str_0x6E8E* sub_50960(axis_3d* a1);
type_str_0x6E8E* sub_50A20(axis_3d* a1);
type_str_0x6E8E* sub_50A90(axis_3d* a1, char a2, char a3);
type_str_0x6E8E* sub_50AE0(axis_3d* a1);
type_str_0x6E8E* sub_50B00(axis_3d* a1);
type_str_0x6E8E* sub_50B20(axis_3d* a1);
type_str_0x6E8E* sub_50B40(axis_3d* a1);
type_str_0x6E8E* sub_50B60(axis_3d* a1);
type_str_0x6E8E* sub_50B80(axis_3d* a1);
type_str_0x6E8E* sub_50C10(axis_3d* a1);
type_str_0x6E8E* sub_50C30(axis_3d* a1);
type_str_0x6E8E* sub_50C50(axis_3d* a1);
type_str_0x6E8E* sub_50C70(axis_3d* a1);
type_str_0x6E8E* sub_50C90(axis_3d* a1);
type_str_0x6E8E* sub_50CB0(axis_3d* a1);
type_str_0x6E8E* sub_50CD0(axis_3d* a1);
type_str_0x6E8E* sub_50CF0(axis_3d* a1);
type_str_0x6E8E* sub_50D10(axis_3d* a1);
type_str_0x6E8E* sub_50D30(axis_3d* a1);
type_str_0x6E8E* sub_50D50(axis_3d* a1);
type_str_0x6E8E* sub_50D70(axis_3d* a1);
type_str_0x6E8E* sub_50D90(axis_3d* a1);
type_str_0x6E8E* sub_50DB0(axis_3d* a1);
type_str_0x6E8E* sub_50DD0(axis_3d* a1);
type_str_0x6E8E* sub_50DF0(axis_3d* a1);
type_str_0x6E8E* sub_50E10(axis_3d* a1);
type_str_0x6E8E* sub_50E30(axis_3d* a1);
type_str_0x6E8E* sub_50E50(axis_3d* a1);
type_str_0x6E8E* sub_50E70(axis_3d* a1);
type_str_0x6E8E* sub_50E90(axis_3d* a1);
type_str_0x6E8E* sub_50EB0(axis_3d* a1);
type_str_0x6E8E* sub_50ED0(axis_3d* a1);
type_str_0x6E8E* sub_50EF0(axis_3d* a1);
type_str_0x6E8E* sub_50F10(axis_3d* a1);
type_str_0x6E8E* sub_50F30(axis_3d* a1);
type_str_0x6E8E* sub_50F50(axis_3d* a1);
type_str_0x6E8E* sub_50F70(axis_3d* a1);
type_str_0x6E8E* sub_50F90(axis_3d* a1);
type_str_0x6E8E* sub_50FB0(axis_3d* a1);
type_str_0x6E8E* sub_50FD0(axis_3d* a1);
type_str_0x6E8E* sub_50FF0(axis_3d* a1);
type_str_0x6E8E* sub_51120(axis_3d* a1, char a2, char a3);
type_str_0x6E8E* sub_511A0(axis_3d* a1);
type_str_0x6E8E* sub_511C0(axis_3d* a1);
type_str_0x6E8E* sub_511E0(axis_3d* a1);
type_str_0x6E8E* sub_51200(axis_3d* a1);
type_str_0x6E8E* sub_51220(axis_3d* a1);
type_str_0x6E8E* sub_51240(axis_3d* a1);
type_str_0x6E8E* sub_51260(axis_3d* a1);
type_str_0x6E8E* sub_51280(axis_3d* a1);
type_str_0x6E8E* sub_512A0(axis_3d* a1);
type_str_0x6E8E* sub_512C0(axis_3d* a1);
type_str_0x6E8E* sub_512E0(axis_3d* a1);
type_str_0x6E8E* sub_51300(axis_3d* a1);
type_str_0x6E8E* sub_51320(axis_3d* a1);
type_str_0x6E8E* sub_51340(axis_3d* a1);
type_str_0x6E8E* sub_51360(axis_3d* a1);
type_str_0x6E8E* sub_51380(axis_3d* a1);
type_str_0x6E8E* sub_513A0(axis_3d* a1);
type_str_0x6E8E* sub_513C0(axis_3d* a1);
type_str_0x6E8E* sub_513E0(axis_3d* a1);
type_str_0x6E8E* sub_51400(axis_3d* a1);
type_str_0x6E8E* sub_51420(axis_3d* a1);
type_str_0x6E8E* sub_51440(axis_3d* a1);
type_str_0x6E8E* sub_51460(axis_3d* a1);
type_str_0x6E8E* sub_51480(axis_3d* a1);
type_str_0x6E8E* sub_514A0(axis_3d* a1);
type_str_0x6E8E* sub_514C0(axis_3d* a1);
type_str_0x6E8E* sub_514E0(axis_3d* a1, char a2, char a3, int16_t a4);
type_str_0x6E8E* sub_51530(axis_3d* a1);
type_str_0x6E8E* sub_51570(axis_3d* a1);
type_str_0x6E8E* sub_515C0(axis_3d* a1);
type_str_0x6E8E* sub_51610(axis_3d* a1);
type_str_0x6E8E* sub_51660(axis_3d* a1);
type_str_0x6E8E* sub_516C0(axis_3d* a1);
type_str_0x6E8E* sub_51730(axis_3d* a1);
type_str_0x6E8E* sub_51790(axis_3d* a1);
type_str_0x6E8E* sub_51800(axis_3d* a1);
type_str_0x6E8E* sub_51A00(axis_3d* a1);
// int sub_51BB0_game_events(int a1);
void sub_52D70(uint16_t a1, char *a2);
void sub_52E90(type_str_0x2BDE* a1, signed int a2, char a3);
void sub_53120();
void sub_53160();
//char sub_533B0_decompress_levels(int16_t a1, type_str_2FECE* a2);
void sub_53590(type_str_2FECE* a1);
char sub_53770_test_open_moviegam(Bit16u a1);
char sub_53950_test_open_moviemap(Bit16u a1);
void sub_539A0_load_bldgprm();
void sub_53A40(type_str_0x6E3E* a1);
void sub_53C70();
void sub_53CA0();
void sub_53CC0_close_movie();
int sub_53CF0_access(char* a1);
int sub_53E60_readfile_and_decompress(const char* path, Bit8u** a2);
bool sub_53EF0_fileexist(char* path, char* path2);
bool sub_53F60(char* a1);

void sub_54630_load_psxblock(Bit16u TextSize);
void sub_54660_read_and_decompress_sky_and_blocks(MC2LevelType a1, Bit8u a2);
void sub_54800_read_and_decompress_tables(MC2LevelType level_type);
void sub_548B0(type_str_0x2BDE* a1);
void sub_548F0(type_str_0x2BDE* a1);
void sub_54960();
void sub_549A0(type_str_611* a1, type_str_611* a2);
void sub_54A50(uint16_t a1, int v0index/*Bit8u* a2*/);
char sub_54D30(int16_t a1);
char sub_54F00(int16_t a1);
char sub_55080(uint8_t a1, int LevelNumber,char* filenameindex);
void sub_55100(char a1);
char sub_55250(uint8_t a1, char* filenameindex);
bool sub_55320_InGameSave(uint8_t a1, char* filenameindex);
char sub_55450(uint8_t a1, int a2, char* filenameindex);
char sub_555D0(Bit8u fileindex, int levelindex);
Bit8u sub_55750_TestSaveFile(Bit8u fileindex, int levelindex);
bool sub_558E0_InGameLoad(Bit8u fileindex);
char sub_55A10(uint8_t a1);
void sub_55AB0(int a1, type_str_0x2BDE* a2);
char sub_55C00(int16_t a1);
// unsigned int sub_55C60(int a1, int a2, int a3);
void sub_55EB0(int16_t a1);
void sub_56210_process_command_line(int a1, char** a2);
int sub_56730_clean_memory();
void sub_567C0();
// char sub_56A30_init_game_level(unsigned int a1);
void sub_56C00_sound_proc2(type_str_2FECE* a1);
// char sub_56D60(unsigned int a1, char a2);
bool sub_56EE0(uaxis_2d a1);
char sub_56F10(int16_t a1, int16_t a2, int16_t a3, char a4);
char sub_570F0(int16_t a1, int16_t a2, int16_t a3, char a4, char a5, char a6);
char sub_572C0(type_str_0x6E8E* a1, int16_t a2, int16_t a3, int16_t a4, char a5);
void sub_57390(uaxis_2d a1, uint16_t a2);
char sub_57450(uint8_t a1);
void sub_574A0();
void sub_57570();
void sub_575C0();
void sub_57640();
void sub_57680_FixPointersAfterLoad();
void sub_57730();
void sub_57B20(type_str_0x2BDE* a1, type_str_0x6E8E* a2);
void sub_57CF0(type_str_0x6E8E* a1, axis_3d* a2);
signed int sub_57D40(type_str_0x6E8E* a1, axis_3d* a2);
void sub_57D70_actualize_event(type_str_0x6E8E* a1, axis_3d* a2);
void sub_57E50(type_str_0x6E8E* a1);
void sub_57F10(type_str_0x6E8E* a1);
void sub_57F20(type_str_0x6E8E* a1);
void sub_57FA0(axis_3d* a1, uint16_t a2, int16_t a3, int16_t a4);
void sub_58030(axis_3d* a1, axis_3d* a2);
int sub_580E0(axis_3d* a1, signed int a2, int a3, int a4, int16_t a5);
int16_t sub_581E0_maybe_tan2(axis_3d* a1, axis_3d* a2);
int16_t sub_58210_radix_tan(axis_3d* a1, axis_3d* a2);
int sub_582B0(int16_t a1, int16_t a2);
int sub_582F0(int a1, int16_t a2);
int sub_58350(uint16_t a1, int16_t a2, int a3, uint16_t a4);
int sub_583B0(axis_3d* a1, axis_3d* a2);
unsigned int sub_583F0_distance_3d(axis_3d* a1, axis_3d* a2);
int sub_58440(axis_3d* a1, axis_3d* a2);
unsigned int sub_58490_radix_3d_2(axis_3d* a1, axis_3d* a2);
int sub_584D0_SQdistX_SQdistY(axis_3d* a1, axis_3d* a2);
void sub_585A0(type_str_0x6E8E* a1);
void sub_585D0();
void sub_58630();
void sub_58940(/*Bit8u* a1*/);
void sub_58DA0(type_str_0x30311* a1, type_str_0x6E8E* a2);
void sub_58F00_game_objectives();
char sub_595C0(int16_t a1);
char sub_59610(type_str_0x6E8E** a1, int16_t a2);
char sub_596C0(axis_3d* a1, int16_t a2);
void sub_59760(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_59820();
int sub_59A50_sound_proc8();
void sub_59AF0_sound_proc9();
void sub_59B50_sound_proc10(HMDIDRIVER user);
void sub_59BF0_sound_proc11_volume();
void sub_59C40_getTerrtoZ(type_str_0x6E8E* a1);
int sub_59C60(type_str_0x6E8E* a1);
int sub_59C80(type_str_0x6E8E* a1);
char sub_59DC0(type_str_0x6E8E* a1);
void sub_59F60(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_5B070(type_str_0x6E8E* a1);
void sub_5B100(/*int a2,*/type_str_0x6E8E* a1);
void sub_5B7A0_prepare_textures();
// int /*__fastcall*/ _wcpp_1_unwind_leave__93(x_DWORD, x_DWORD, x_DWORD, x_DWORD, x_DWORD, x_DWORD); weak
void sub_5B840_load_pallette_and_help_pallette();
//char sub_5B8D0_initialize();
void sub_5BC20();
void sub_5BCC0_set_any_variables1();
void sub_5BDC0_set_mouse_position(Bit16s a1, Bit16s a2);
char sub_5BF10();
signed int sub_5BF50_load_psxdata();
signed int sub_5C060();
void sub_5C0A0();
signed int sub_5C1B0_set_any_variables2();
void sub_5C330();
int sub_5C430_multi_allocation();
void sub_5C450();
int sub_5C490_testers_info();
void sub_5C530();
void sub_5C800(type_str_0x6E8E* a1, char a2);
void sub_5C830(type_str_0x6E8E* a1, char a2, int16_t a3);
void sub_5C870(type_str_0x6E8E* a1);
void sub_5C8D0(type_str_0x6E8E* a1);
void sub_5C950(type_str_0x2BDE* a1, type_str_0x6E8E* a2);
void sub_5CF40(type_str_0x6E8E* a1, char a2);
int sub_5D0A0(type_str_0x6E8E* a1);
// int _wcpp_1_unwind_leave__98(x_DWORD); weak
void sub_5D530(type_str_0x6E8E* a1);
void sub_5DD50(type_str_0x6E8E* a1);
void sub_5DE30(type_str_0x6E8E* a1);
int _wcpp_1_unwind_leave__99(x_DWORD);// weak
void sub_5E010(type_str_0x6E8E* a1);
void sub_5E310_multiplayer_test_die(type_str_0x6E8E* a1);
int sub_5E660(type_str_0x6E8E* a1);
int16_t sub_5E6C0(type_str_0x6E8E* a1);
void sub_5E7C0_multiplayer_test_banished(type_str_0x6E8E* a1);
signed int sub_5E8C0_endGameSeq(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_5EF70(type_str_0x6E8E* a1);
signed int sub_5EFA0(type_str_0x6E8E* a1);
void sub_5F380(type_str_0x6E8E* a1);
char sub_5F660(type_str_0x6E8E* a1, type_str_0x6E8E* a2, int a3);
void sub_5F7B0(type_str_0x6E8E* a1, type_str_0x6E8E* a2, int a3);
void sub_5F7E0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
type_str_0x6E8E* sub_5F810(type_str_0x6E8E* a1, type_str_0x6E8E* a2, type_str_0x6E8E* a3);
void sub_5F890(type_str_0x6E8E* a1, int16_t a2);
void sub_5F8F0(type_str_0x6E8E* a1);
void sub_5FA70(type_str_0x6E8E* a1);
void sub_5FBD0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_5FC40(type_str_0x6E8E* a1);
void sub_5FCA0_destroy_castle_level(type_str_0x6E8E* a1);
// int _wcpp_1_unwind_leave__100(x_DWORD, x_DWORD); weak
void sub_5FD00(type_str_0x6E8E* a1);
void sub_5FF50(type_str_0x6E8E* a1);
x_WORD *sub_60400(int16_t a1, x_WORD *a2, x_WORD *a3);
void sub_60480(type_str_0x6E8E* a1);
void sub_605E0(type_str_0x6E8E* a1);
int sub_60780(type_str_0x6E8E* a1, type_str_0x6E8E* a2, int a3, int a4);
unsigned int sub_60810(type_str_0x6E8E* a1);
signed int sub_609E0(type_str_0x6E8E* a1);
void sub_60AB0(type_str_0x6E8E* a1);
void sub_60D50(axis_3d* a1, type_str_0x6E8E* a2);
void sub_60EA0(type_str_0x6E8E* a1);
void sub_60F00();
type_str_0x6E8E* sub_61000(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_61050(type_str_0x6E8E* a1);
void sub_613D0(type_str_0x6E8E* a1);
char sub_61620(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_616D0(signed int a1);
signed int sub_61790(signed int a1);
signed int sub_61810(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_61880_draw_minimap_entites(int a1, int a2, int16_t a3, int16_t a4, int a5, int a6, int16_t a7, int a8);
void sub_61A00_draw_minimap_entites_b(int a1, int a2, int16_t a3, int16_t a4, int a5, int a6, int16_t a7, int a8);
void sub_627F0_draw_minimap_entites_a(int a1, int a2, int16_t a3, int16_t a4, int a5, int a6, int16_t a7, int a8);
char sub_63570(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_63600_draw_minimap(int a1, int a2, int a3, int a4, int a5, int a6, int16_t a7, int a8, int a9, int a10);
void sub_63670_draw_minimap_a(int a1, int a2, int a3, int a4, int a5, int a6, int16_t a7, int a8, int a9, int a10);
void sub_63C90_draw_minimap_b(int a1, int a2, int a3, int a4, int a5, int a6, int16_t a7, int a8, int a9, int a10);
void sub_644F0_draw_minimap_marks(int a1, int a2, int16_t a3, int16_t a4, int a5, int a6, int16_t a7, int a8);
char sub_64CE0_draw_follow_rectangle(v51x_struct* a1);
Bit32u sub_64E20(type_str_0x6E8E* a1);
Bit32u sub_64F60(type_str_0x6E8E* a1);
Bit32u sub_64FF0(type_str_0x6E8E* a1);
int sub_65040(type_str_0x6E8E* a1);
void sub_65080(type_str_0x6E8E* a1);
int sub_65110(type_str_0x6E8E* a1);
Bit32u sub_651B0(type_str_0x6E8E* a1);
Bit32u sub_65240(type_str_0x6E8E* a1);
void sub_65280(type_str_0x6E8E* a1);
void sub_652A0(type_str_0x6E8E* a1);
void sub_652C0(type_str_0x6E8E* a1);
void sub_654B0(/*axis_3d* a1,*/ type_str_0x6E8E* a2);
void sub_65580(type_str_0x6E8E* a1);
void sub_655A0(type_str_0x6E8E* a1);
void sub_655C0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_65610(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
int16_t sub_656D0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_65780(type_str_0x6E8E* a1, type_str_0x6E8E* a2, type_str_0x6E8E* a3);
type_str_0x6E8E* sub_65820(type_str_0x6E8E* a1);
void sub_65B30(type_str_0x6E8E* a1);
void sub_65B50(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_65C20(type_str_0x6E8E* a1);
void sub_65F60(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_66160(type_str_0x6E8E* a1);
void sub_66180(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_66250(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_66280(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_662A0(type_str_0x6E8E* a1);
void sub_662C0(type_str_0x6E8E* a1);
void sub_662E0(type_str_0x6E8E* a1);
void sub_66610(type_str_0x6E8E* a1);
void sub_66750(type_str_0x6E8E* a1);
void sub_66B30(type_str_0x6E8E* a1);
char sub_66D00(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_66FB0(type_str_0x6E8E* a1);
void sub_66FD0(type_str_0x6E8E* a1);
void sub_672E0(type_str_0x6E8E* a1);
void sub_67410(type_str_0x6E8E* a1);
void sub_67430(type_str_0x6E8E* a1);
void sub_67450(type_str_0x6E8E* a1);
void sub_67470(type_str_0x6E8E* a1);
void sub_674C0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_676F0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_67740(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_67760(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_67780(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_677A0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_677D0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_67800(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_67890(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_678E0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_67910(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_67940(type_str_0x6E8E* a1);
// int sub_67960(unsigned int a1, int a2);
signed int sub_67CB0(type_str_0x6E8E* a1);
int sub_68490(type_str_0x6E8E* a1, type_str_0x6E8E* a2, uint16_t a3, uint16_t a4);
int sub_685D0(type_str_0x6E8E* a1, type_str_0x6E8E* a2, uint16_t a3, uint16_t a4);
void sub_686D0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
char sub_68740(type_str_0x6E8E* a1, type_str_0x6E8E* a2, uint16_t a3, int16_t a4);
char sub_68940(type_str_0x6E8E* a1);
char sub_68AC0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
char sub_68BD0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_68BF0();
int sub_68C70(type_str_0x6E8E* a1);
signed int sub_68D50(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_68DE0(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_68E50(type_str_0x6E8E* a1, type_str_0x6E8E* a2, type_str_0x6E8E* a3);
signed int sub_68FF0(type_str_0x6E8E* a1, char a2, char a3);
signed int sub_69250(type_str_0x6E8E* a1);
signed int sub_692A0(type_str_0x6E8E* a1);
char sub_692C0(type_str_0x6E8E* a1);
void sub_69300(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
void sub_693F0(type_str_0x6E8E* a1);
signed int sub_69600(type_str_0x6E8E* a1);
signed int sub_69620(type_str_0x6E8E* a1);
void sub_69640(type_str_0x6E8E* a1);
void sub_69900(type_str_0x6E8E* a1, type_str_0x6E8E* a2);
signed int sub_69A70(type_str_0x6E8E* a1);
signed int sub_69A90(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_69AB0(type_str_0x6E8E* a1);
signed int sub_69D70(type_str_0x6E8E* a1);
signed int sub_69D90(type_str_0x6E8E* a1);
void sub_69DB0(type_str_0x6E8E* a1);
signed int sub_69FF0(type_str_0x6E8E* a1);
signed int sub_6A010(type_str_0x6E8E* a1);
void sub_6A030(type_str_0x6E8E* a1);
signed int sub_6A2C0(type_str_0x6E8E* a1);
signed int sub_6A2E0(type_str_0x6E8E* a1);
void sub_6A300(type_str_0x6E8E* a1);
signed int sub_6A440(type_str_0x6E8E* a1);
signed int sub_6A460(type_str_0x6E8E* a1);
void sub_6A480(type_str_0x6E8E* a1);
signed int sub_6A580(type_str_0x6E8E* a1);
signed int sub_6A5A0(type_str_0x6E8E* a1);
void sub_6A5C0(type_str_0x6E8E* a1);
signed int sub_6A9C0(type_str_0x6E8E* a1);
signed int sub_6A9E0(type_str_0x6E8E* a1);
int16_t sub_6AA00(type_str_0x6E8E* a1);
signed int sub_6AAC0(type_str_0x6E8E* a1);
signed int sub_6AAE0(type_str_0x6E8E* a1);
void sub_6AB00(type_str_0x6E8E* a1);
signed int sub_6AD00(type_str_0x6E8E* a1);
signed int sub_6AD20(type_str_0x6E8E* a1);
void sub_6AD60(type_str_0x6E8E* a1);
signed int sub_6B180(type_str_0x6E8E* a1);
signed int sub_6B1A0(type_str_0x6E8E* a1);
void sub_6B1C0(type_str_0x6E8E* a1);
signed int sub_6B2D0(type_str_0x6E8E* a1);
signed int sub_6B2F0(type_str_0x6E8E* a1);
int16_t sub_6B310(type_str_0x6E8E* a1);
signed int sub_6B3A0(type_str_0x6E8E* a1);
signed int sub_6B3C0(type_str_0x6E8E* a1);
void sub_6B3E0(type_str_0x6E8E* a1);
signed int sub_6B5D0(type_str_0x6E8E* a1);
signed int sub_6B5F0(type_str_0x6E8E* a1);
int16_t sub_6B610(type_str_0x6E8E* a1);
signed int sub_6B830(type_str_0x6E8E* a1);
signed int sub_6B850(type_str_0x6E8E* a1);
void sub_6B870(type_str_0x6E8E* a1);
signed int sub_6BA70(type_str_0x6E8E* a1);
signed int sub_6BA90(type_str_0x6E8E* a1);
void sub_6BAB0(type_str_0x6E8E* a1);
signed int sub_6BCB0(type_str_0x6E8E* a1);
signed int sub_6BCD0(type_str_0x6E8E* a1);
void sub_6BCF0(type_str_0x6E8E* a1);
signed int sub_6BEF0(type_str_0x6E8E* a1);
signed int sub_6BF10(type_str_0x6E8E* a1);
void sub_6BF30(type_str_0x6E8E* a1);
signed int sub_6C130(type_str_0x6E8E* a1);
signed int sub_6C150(type_str_0x6E8E* a1);
void sub_6C170(type_str_0x6E8E* a1);
signed int sub_6C3A0(type_str_0x6E8E* a1);
signed int sub_6C3C0(type_str_0x6E8E* a1);
void sub_6C3E0(type_str_0x6E8E* a1);
signed int sub_6C5E0(type_str_0x6E8E* a1);
signed int sub_6C600(type_str_0x6E8E* a1);
void sub_6C620(type_str_0x6E8E* a1);
signed int sub_6C830(type_str_0x6E8E* a1);
signed int sub_6C850(type_str_0x6E8E* a1);
void sub_6C870(type_str_0x6E8E* a1);
signed int sub_6CA80(type_str_0x6E8E* a1);
signed int sub_6CAA0(type_str_0x6E8E* a1);
void sub_6CAC0(type_str_0x6E8E* a1);
signed int sub_6CCE0(type_str_0x6E8E* a1);
signed int sub_6CD00(type_str_0x6E8E* a1);
void sub_6CD20(type_str_0x6E8E* a1);
signed int sub_6CF60(type_str_0x6E8E* a1);
signed int sub_6CF80(type_str_0x6E8E* a1);
void sub_6CFA0(type_str_0x6E8E* a1);
signed int sub_6D1C0(type_str_0x6E8E* a1);
signed int sub_6D1E0(type_str_0x6E8E* a1);
void sub_6D200(type_str_0x2BDE* a1);
int sub_6D420_mouse_to_spell(int16_t a1, int16_t a2);
char sub_6D4C0(type_str_611* a1);
int sub_6D4F0(type_str_611* a1, int16_t a2);
// int /*__fastcall*/ _wcpp_1_unwind_leave__120(x_DWORD, x_DWORD, x_DWORD); weak
void sub_6D5E0(type_str_0x6E8E* a1, char a2);
int sub_6D710(type_str_0x6E8E* a1, uint8_t a2, uint8_t a3);
void sub_6D830(type_str_0x6E8E* a1, char a2);
void sub_6D880(type_str_0x6E8E* a1);
void sub_6D8B0(uint16_t a1, uint16_t a2, int16_t a3);
void sub_6D9C0(type_str_611* a1, type_SPELLS_BEGIN_BUFFER_str* a2, int16_t a3, char a4, char a5);
void sub_6DAD0(type_str_611* a1, type_SPELLS_BEGIN_BUFFER_str* a2, int16_t a3);
void sub_6DB50(char a1, char a2);
void sub_6DBD0();
void sub_6DC40_improve_ability(uint8_t a1);
type_str_0x6E8E* sub_6DCA0(type_str_0x6E8E* a1, axis_3d* a2, uint16_t a3, type_SPELLS_BEGIN_BUFFER_str_sub* a4, int16_t a5, char a6);
signed int sub_6E020(uint16_t a1);
void sub_6E090(type_str_611* a1, int a2);
void sub_6E0D0();
void sub_6E150();
void sub_6E450_distance_sound(int16_t a1, int16_t a2, int16_t a3);
bool sub_6EA90(int a1, int a2);
void sub_6EAB0(int a1, int16_t a2, int16_t a3);
void sub_6EDE0_set_mouse_position2(int16_t a1, int16_t a2);
void sub_6EF10_set_mouse_minmax(int16_t a1, int16_t a2, int16_t a3, int16_t a4);
type_str_0x6E8E* sub_6F030(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_6F070(type_str_0x6E8E* a1);
void sub_6F0B0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_6F100(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_6F150(type_str_0x6E8E* a1);
int sub_6F1C0(type_str_0x6E8E* a1);
void sub_6F2B0(type_str_0x6E8E* a1);
unsigned int sub_6F300(type_str_0x6E8E* a1, signed int a2);
unsigned int sub_6F420(type_str_0x6E8E* a1);
unsigned int sub_6F440(type_str_0x6E8E* a1);
unsigned int sub_6F460(type_str_0x6E8E* a1);
unsigned int sub_6F480(type_str_0x6E8E* a1);
unsigned int sub_6F4A0(type_str_0x6E8E* a1);
unsigned int sub_6F4C0(type_str_0x6E8E* a1);
unsigned int sub_6F4E0(type_str_0x6E8E* a1);
unsigned int sub_6F500(type_str_0x6E8E* a1);
unsigned int sub_6F520(type_str_0x6E8E* a1);
unsigned int sub_6F540(type_str_0x6E8E* a1);
unsigned int sub_6F560(type_str_0x6E8E* a1);
unsigned int sub_6F580(type_str_0x6E8E* a1);
unsigned int sub_6F5A0(type_str_0x6E8E* a1);
unsigned int sub_6F5C0(type_str_0x6E8E* a1);
unsigned int sub_6F5E0(type_str_0x6E8E* a1);
unsigned int sub_6F600(type_str_0x6E8E* a1);
unsigned int sub_6F620(type_str_0x6E8E* a1);
unsigned int sub_6F640(type_str_0x6E8E* a1);
unsigned int sub_6F660(type_str_0x6E8E* a1);
unsigned int sub_6F680(type_str_0x6E8E* a1);
unsigned int sub_6F6A0(type_str_0x6E8E* a1);
unsigned int sub_6F6C0(type_str_0x6E8E* a1);
unsigned int sub_6F6E0(type_str_0x6E8E* a1);
unsigned int sub_6F700(type_str_0x6E8E* a1);
unsigned int sub_6F720(type_str_0x6E8E* a1);
unsigned int sub_6F740(type_str_0x6E8E* a1);
unsigned int sub_6F760(type_str_0x6E8E* a1);
unsigned int sub_6F780(type_str_0x6E8E* a1);
unsigned int sub_6F7A0(type_str_0x6E8E* a1);
unsigned int sub_6F7C0(type_str_0x6E8E* a1);
x_BYTE *sub_6F7E0(type_str_0x6E8E* a1);
type_str_0x6E8E* sub_6F850(type_str_0x6E8E* a1, int a2);
type_str_0x6E8E* sub_6F8E0(type_str_0x6E8E* a1, int a2);
//void sub_6F940_sub_draw_text(char* a1, int a2, int a3, Bit8u color);
Bit8u sub_6FC10_letter_width();
Bit8u sub_6FC30_get34_height();
//void sub_6FC50(int16_t a1);
unsigned int sub_6FC80_pre_draw_text(char *a1, int16_t a2, int16_t a3, int16_t a4, uint8_t a5);
//int sub_6FD30(); // weak
void sub_6FDA0();
void sub_6FE20();
// int /*__fastcall*/ _wcpp_1_unwind_leave__130(x_DWORD); weak
int sub_6FE90(uint8_t *a1, unsigned int a2);
void sub_6FEC0();
void sub_70890_print_header();
void sub_70910_print_string(char* a1);
void sub_70940();
void sub_70A60_open_tmaps();
void sub_70BF0_close_tmaps();
int sub_70C60_decompress_tmap(uint16_t a1, Bit8u* a2);
char sub_70D20(uint16_t a1);
char sub_70E10(uint16_t a1);
int sub_70EF0(uint16_t a1);
void sub_70F50_initTmaps(uint16_t a1);
unsigned int sub_71090(unsigned int a1);
void sub_712F0();
void sub_713A0();
//int sub_71410_process_tmaps_process_tmaps();
bool sub_71520_mainInitTmaps(uint16_t a1);
void sub_715B0();
void sub_716C0(uint16_t a1, uint16_t a2, uint16_t a3);
void sub_71730(uint16_t a1);
void sub_71780();
char sub_71890();
void sub_718F0();
int sub_71930();
void sub_71990();
void sub_71A70_setTmaps(uint8_t a1);
void sub_71AB0(int16_t a1, char a2);

// FIXME: trying to remove type_x_DWORD_E9C28_str and replace by 64-bit-safe alternative using decompressed tmaps from file_handling
type_x_DWORD_E9C28_str* sub_71B40(int a1, uint16_t a2, type_x_DWORD_E9C28_str* a3);
signed int sub_71CD0(const type_x_DWORD_E9C28_str &a1);
int sub_71E60(type_x_DWORD_E9C28_str* a1);
Bit8u* sub_71E70(type_x_DWORD_E9C28_str &a1, unsigned int a2, int16_t a3);
int16_t sub_71F20(type_x_DWORD_E9C28_str* a1, Bit8u* a2);
void sub_720C0(type_x_DWORD_E9C28_str** a1);

type_E9C08* sub_72120(uint16_t a1);
type_animations1* sub_721C0_initTmap(type_E9C08* a1, int *a2, int16_t a3);
void sub_72350(type_animations1* a1);
uint16_t sub_723B0(type_animations1* a1, char a2);
x_DWORD *sub_72410(x_DWORD *a1);
type_animations1* sub_724F0(type_E9C08* a1, int16_t a2);
void sub_72550(type_E9C08** a1);
Bit16u /*__spoils<>*/ sub_72633_maybe_tan(Bit16s a1, Bit16s a2);
unsigned int sub_7277A_radix_3d(unsigned int a1);
void sub_727F0(uint8_t a1, uint8_t a2, uint8_t a3, uint8_t a4);
// void /*__spoils<ecx>*/ sub_72883_clear_graphics_320(int a1, void *a2, uint16_t a3, char a4);
// void /*__spoils<ecx>*/ sub_728A9_clear_graphics_640(int a1, void *a2, uint16_t a3, char a4);
void sub_72C40_draw_bitmap_640_setcolor(int16_t a1, int16_t a2, posistruct a3, uint8_t a4);
int sub_72CB0(uint8_t *a1, int a2);
void sub_72D04();
// int sub_72DDE(int16_t *a1, int a2);
int /*__fastcall*/ sub_72E70(int a1, int a2, int16_t *a3);
signed int /*__fastcall*/ sub_72FBB(int a1, int a2, int16_t *a3);
signed int sub_7302E();
// int sub_7308F(int16_t *a1, int a2, int16_t a3);
int sub_73669(int16_t a1);
void sub_7373D(int16_t a1);
int16_t sub_739AD(int16_t a1);
int16_t sub_73AA1(int16_t a1);
int16_t sub_73D11(int16_t a1);
uint16_t sub_74006(uint16_t a1, int a2, unsigned int a3);
void sub_7404E(uint16_t a1, Bit8u* a2, unsigned int a3);
int16_t sub_74374();
void sub_7438A(Bit8u* a1, unsigned int a2);
int16_t sub_7449C();
int sub_74515();
int sub_74536();
Bit8u sub_74556();
// signed int sub_74767(int16_t *a1, x_BYTE *a2, int a3);
int sub_74809(int16_t a1);
signed int sub_748F7(int16_t a1);
signed int sub_74A11();
int sub_74A86(x_BYTE *a1, Bit8u* a2);
int sub_74B19(x_BYTE *a1);
signed int sub_74B75(int16_t a1);
int sub_74C9D(unsigned int a1, int a2);
void sub_74D41(unsigned int a1, int a2, unsigned int a3);
signed int sub_74DD4(unsigned int a1, int a2, uint16_t a3);
int sub_74E6D(unsigned int a1, int a2, int a3);
int sub_74EF1(unsigned int a1, int a2, unsigned int a3);
int16_t sub_74F76();
signed int sub_74FE1(int16_t a1);
int sub_75044(unsigned int a1);
HSAMPLE* sub_75110(int16_t a1, int16_t a2, int16_t a3, uint16_t a4, int16_t a5);
HSAMPLE* sub_75160(int16_t a1, int16_t a2, int16_t a3, uint16_t a4, int16_t a5);
HSAMPLE* sub_751B0(int16_t a1, int16_t a2, int16_t a3, uint16_t a4, int16_t a5);
//int sub_752C0(); // weak
//int sub_75420();
int sub_75440();
int sub_754C0(int a1, x_DWORD *a2, int a3);
int sub_75540(int a1, int a2);
int sub_755B0(int a1, x_DWORD *a2, int a3);
signed int sub_75650();
void sub_75900();
signed int sub_75910();
void sub_759B0_set_mouse_minmax_vert();
uint8_t sub_75A10(int a1, uint8_t *a2);
void sub_75AB0();
//void sub_75AE0(int a1);
void sub_75B50(int16_t a1);
int sub_75B80_alloc_mem_block(int a1, x_WORD *a2, x_WORD *a3);
void sub_75C50();
void sub_75CB0();
//void sub_75D70(void *a1, unsigned int a2);
void sub_75D70(Bit8u* a1, Bit32u a2);
void sub_76260_read_intro_pallette(Bit8u a1);
void sub_76300();
int sub_76430();
int sub_76540();
void sub_765FC(int16_t a1, int16_t a2);
int sub_76619(int a1, int a2);
void sub_766A4();
int16_t sub_76752();
int sub_7677C();
int16_t sub_7678D();
int sub_76840();
//int sub_76F40(); // weak
char /*__fastcall*/ sub_77680(/*int a1, */int a2, int16_t *a3);
char sub_77980_exit_dialog(Bit8u* a1);
char sub_780F0_load_game_dialog(Bit8u* a1);
char sub_78730_save_game_dialog(x_WORD *a1);
// char sub_78E00_set_player_name_dialog(int a1, int a2, int16_t *a3);
char sub_79160_set_joystick_dialog(Bit8u* a1);
char sub_79610_set_keys_dialog();
signed int sub_79E10(char *a1, char a2);
//char sub_7A060_get_mouse_and_keyboard_events();
// int (**sub_7AB00_draw_menu_animations(int16_t a1, int a2, int16_t *a3, uint8_t a4))(int);
//bool sub_7B200_in_region(Bit16s* a1, Bit16s testx, Bit16s testy);
int sub_7B660_draw_scroll_dialog2(int a1, int a2, int16_t a3, x_WORD *a4, char* a5, char a6);
int sub_7BF20_draw_scroll_dialog(int16_t *a1);
void sub_7C020(x_WORD *a1);
signed int /*__fastcall*/ sub_7C050_get_keyboard_keys1();
void sub_7C140_draw_text_background(Bit16s a1, Bit16s a2, Bit16s a3, Bit16s a4, Bit8u a5);
Bit32s sub_A7C20_AIL_API_init_sequence(HSEQUENCE S, void* start, Bit32s sequence_num, Bit32u track);
int /*__fastcall*/ sub_7C230(int a1, int a2, int16_t *a3);
signed int sub_7C390();
void sub_7C710();
int sub_7C720(uint8_t a1, x_BYTE *a2);
int sub_7C7C0(int a1, int a2);
void sub_7C800(int16_t a1);
void sub_7C9D0(int16_t a1);
int sub_7CB10();
char sub_7CBF0();
char sub_7CC40();
int sub_7CCA0();
int sub_7CCF0();
int sub_7CD30();
int sub_7CDA0();
int sub_7CDC0(uint8_t a1, uint8_t a2);
signed int sub_7CE50();
void sub_7D1F0();
signed int sub_7D230(char a1, uint8_t a2, uint8_t a3);
int sub_7D310();
void sub_7D380();
// int sub_7D400_draw_texts_and_play_sounds(int a1, int16_t a2, int16_t a3, char a4);
void sub_7DA70(int16_t a1, int16_t a2, int16_t a3, int16_t a4, int16_t a5, int16_t a6);
void sub_7DD70();
// char sub_7DE80(int a1, int a2);
signed int sub_7E0E0_mouse_events();
Bit16s sub_7E1F0_test_mouse_regions();
// signed int sub_7E320_draw_bitmaps_and_play_sounds(int16_t a1, int a2);
// signed int sub_7E5A0_pre_draw(int a1, int a2, int16_t a3, int16_t a4, int a5, int16_t a6, int16_t a7);
signed int sub_7E620(Bit8u* a1);
signed int sub_7E640(Bit8u* a1);
char sub_7E800(Bit8u* a1);
char sub_7E820(Bit8u* a1);
void sub_7E840_draw_textbox_with_line(Bit16u* a1, int16_t a2, int16_t a3);
void sub_7E8D0(x_WORD *a1, int16_t a2, int16_t a3, int16_t a4, int16_t a5, int16_t a6, int16_t a7);
signed int sub_7E9D0(x_WORD *a1, x_WORD *a2, x_WORD *a3);
int sub_7EAE0_new_game_draw(int16_t *a1, int16_t *a2, int16_t *a3, int16_t *a4, Bit8s* a5, x_WORD *a6);
// int sub_7F6A0(int a1, int a2, int16_t a3, int16_t a4, char *a5, x_BYTE *a6, uint8_t a7);
//int sub_7F7D0(Bit8u** a1, Bit8u** a2, Bit8u* a3, char* a4);
int sub_7F7D0(Bit8u** a1, Bit8u** a2, Bit8u* a3, char* langfilename, posistruct* a3dattabindex);//2607d0
//int sub_7F960(Bit8u* a1, Bit8u* a2, unsigned int a3, Bit8u* a4);
int sub_7F960(Bit8u* a1, Bit8u* a2, Bit8u* a3, char* langcountstring, posistruct* a3dattabindex);
Bit32u sub_7FAE0_draw_text(char* a1, int16_t a2, int16_t a3, int16_t a4, uint8_t a5);
void sub_7FB90_draw_text(char* a1, Bit16s a2, Bit16s a3, Bit8u a4);
// int sub_7FCB0_draw_text_with_border(int a1, x_BYTE *a2, int a3, int a4, int a5, char a6, uint8_t a7, int16_t a8);
void sub_80C30_draw_texts(int16_t a1, int16_t a2, int16_t a3);
// signed int sub_80D40_move_graphics_and_play_sounds(int16_t a1, int16_t a2, int16_t a3, int16_t a4, int16_t a5, char a6);
// int sub_81260(int a1, int a2, int a3, int16_t a4, int16_t a5);
int sub_812D0_drawDotBitmap(int16_t a1, int16_t a2);
void sub_81360_draw_bitmap_line(Bit16s a1, Bit16s a2, Bit16s a3, Bit16s a4, int16_t a5);
void sub_81760_new_game_subdraw(type_unk_E17CC_str_0x194* a1);
// unsigned int sub_81CA0(int a1, int a2, int16_t a3, int16_t a4, int a5);
void sub_81EE0_draw_and_sound_dragon_and_fire(int a1, int a2, int a3, int16_t a4, int16_t a5, int16_t a6);
type_x_WORD_E2970* sub_824B0(int16_t a1);
void sub_82AB0(uint8_t a1);
void sub_82C20_drawEndGameTable(int16_t a1);
void sub_833C0();
void sub_83B50();
void sub_83CC0(char a1);
char sub_83E00(int a1, int a2);
int sub_84000(int a1);
void sub_84050();
bool sub_84250_load_file_array(int psindex);
void sub_844A0_sound_proc5();
char sub_844F0_read_and_decompress_sound(FILE* a1, uint8_t a2);
void sub_84790();
char sub_847D0(type_str_0x6E8E* a1, char a2, char a3, char a4);
void sub_84880(type_str_0x3664C* a1);
void sub_848A0();
void sub_84B80();
void sub_84EA0(uaxis_2d a1x, type_str_0x3664C* a2, char a3, int16_t a4);
int sub_84FB0_3dim_scalar(axis_3d* a1, axis_3d* a2);
int sub_85060(int a1);
void sub_85070();
void* sub_85450_allocate_mem_pool(unsigned int a1);
int16_t sub_856D0(int a1, int a2, int16_t a3, int a4);
unsigned int *sub_85AF0(int a1);
int sub_85B20_copy_bitmap(x_BYTE *a1, x_WORD *a2, uint16_t a3);
int sub_85BF5(x_BYTE *a1, int a2, int a3, int a4, int a5, int a6);
int sub_85C42(int a1, int a2, int a3, int a4, int a5, uint8_t a6);
void sub_85C8B_draw_new_game_map_background(Bit8u* a1, Bit8u* a2, int a3, int a4, int a5, int a6);
// void /*__spoils<ecx>*/ sub_85CC3_draw_round_frame(unsigned int a1, int a2, uint16_t *a3);
int sub_85E40();
int16_t sub_85EB0_alloc_memory(int16_t a1);
int16_t sub_85F00_free_memory(int16_t a1);
int sub_85F60(int a1);
bool sub_85FD0();
int sub_86010();
int16_t sub_86180(uint16_t a1);
int16_t sub_86270(uint16_t a1);
int16_t sub_86370(uint16_t a1, char a2);
void sub_86460(Bit16u a1);
int sub_86550();
char sub_86780(uint16_t a1, int a2, int a3);
char sub_86930(uint16_t a1);
void sub_86A00_some_allocs();
bool sub_86BD0_freemem1();
void sub_86EA0(/*int a1, int a2, int a3*/Bit32u user);
void sub_86EB0(uint8_t a1, uint8_t a2, char a3);
void sub_86F20(char a1);
void sub_86F70_sound_proc12(uint8_t a1, int16_t a2, int16_t a3);
void sub_86FF0(uint8_t a1, int16_t a2, int16_t a3);
void sub_87090();
char sub_871E0();
void sub_871F0();
void sub_872A0();
void sub_87580();
void sub_87610();
void sub_87860();
void sub_87970();
void sub_87A30();
void sub_87B30();
void sub_87B70();
// int /*__fastcall*/ _wcpp_1_unwind_leave__132(x_DWORD); weak
void sub_87BE0();
void sub_87C10();
void sub_87CF0();
int sub_88450();
void sub_884D0(int a1, int16_t a2, Bit16s* a3, char a4, char a5);
void sub_88580();
void sub_885E0(type_str_0x6E8E* a1, int a2, int a3, uint16_t a4);
void sub_88740(type_str_0x6E8E* a1, int a2, int a3);
void sub_889F0(Bit16u a1);
void sub_88B20();
void sub_88B60();
void sub_88BA0();
void sub_88D00();
char sub_88D40();
char sub_89360();
void sub_89420(type_sub_str_unk_1804B0ar* a1, const char *a2);
void sub_89520(type_sub_str_unk_1804B0ar* a1);
void sub_895D0_draw_textbox(type_sub_str_unk_1804B0ar* a1x, char *a2);
void sub_89690_draw_frame(type_sub_str_unk_1804B0ar* a1);
void sub_89830(type_sub_str_unk_1804B0ar* a1);
void sub_898A0(type_sub_str_unk_1804B0ar* a1);
void sub_89920(type_sub_str_unk_1804B0ar* a1, int16_t a2, Bit16s* a3);
void sub_89980(type_sub_str_unk_1804B0ar* a1);
void sub_89A30_draw_line(type_sub_str_unk_1804B0ar* a1);
void sub_89AC0(x_BYTE *a1, int a2);
Bit16s sub_89B60_aplicate_setting(Bit8u a1);
int sub_89D10_analyze_keys();
int sub_8B5A0();

#pragma pack (1)
typedef struct {
	Bit32s x_DWORD_18058C;
	Bit32s x_DWORD_180590; // [0x04]//unk_18058Cstr.x_DWORD_180590//1
	Bit32s x_DWORD_180594; // [0x08]//unk_18058Cstr.x_DWORD_180594//2
	Bit32s x_DWORD_180598; // [0x0c]//unk_18058Cstr.x_DWORD_180598//3
	Bit32s x_DWORD_18059C; // [0x10]//unk_18058Cstr.x_DWORD_18059C//4
	Bit32s x_DWORD_1805A0; // weak//unk_18058Car[0x14]//5
	Bit32s x_DWORD_1805A4; // weak//unk_18058Car[0x18]//6
	Bit32s x_DWORD_1805A8; // weak//unk_18058Car[0x1c]//7
	Bit32s x_DWORD_1805AC; // weak//unk_18058Car[0x20]//8
	axis_2d_32 x_DWORD_1805B0_mouse;
	//Bit32s x_DWORD_1805B0_mouse.x; // weak//unk_18058Car[0x24]
	//Bit32s x_DWORD_1805B0_mouse.y; // weak//unk_18058Car[0x28]
	Bit32s x_DWORD_1805B8_mouse_position_x; // weak//unk_18058Car[0x2c]
	Bit32s x_DWORD_1805BC_mouse_position_y; // weak//unk_18058Car[0x30]
	Bit16s x_WORD_1805C0_arrow_keys; // weak//unk_18058Car[0x34] // keyboard buttons
	Bit16s x_WORD_1805C2_joystick; // weak//unk_18058Car[0x36]
	Bit16s x_WORD_1805C4_vio1_analog_joy; // weak//unk_18058Car[0x38]
	Bit16s x_WORD_1805C6_vio2_analog_joy; // weak//unk_18058Car[0x3a]
	Bit16s x_WORD_1805C8; // weak//unk_18058Car[0x3c]
	Bit8u unk_1805CE[0x54]; // weak//unk_18058Car[0x42]
	Bit16s stub_180622;
} type_unk_18058Cstr;//end 180624
#pragma pack (16)

signed int sub_8B600(type_unk_18058Cstr a1);
int sub_8B770();
signed int sub_8B790(type_unk_18058Cstr a1);
char sub_8B880(int *a1, char a2, signed int a3, int a4);
int sub_8BB10(int a1);
int sub_8BB40(int a1, char a2);
signed int sub_8BBE0(int a1);
void sub_8C0E0(uint8_t(/*__fastcall*/ *a1)(signed int));
char sub_8C140(uint16_t a1, int a2);
int sub_8C21F_any_graphics_command();
void sub_8C2CD();
int sub_8C329();
void sub_8C635_draw_cursor();
int sub_8C839();
int sub_8CA16();
void sub_8CACD_draw_cursor2();
void sub_8CB1F();
void sub_8CB3A(Bit32u a1, Bit32s a2, int a3, Bit32s a4);
int sub_8D12F_set_mouse_viewport();
void /*__fastcall*/ sub_8D290_init_sound(/*char* a1*//*, int a2, int a3*/);
void sub_8D800_sound_proc2();
void /*__fastcall*/ sub_8D970_init_music(/*char* a1*//*int a1, int a2, char* a3*/);
int sub_8E0D0(); // weak
int16_t sub_8E673();
int16_t sub_8E736();
int sub_8E799();
int sub_8E7B7();
int sub_8E7D5();
void sub_8E7FC();
int16_t sub_8E871();
int sub_8E948();
char sub_8E9EF();
void /*__fastcall*/ sub_8EA7B(int a1, uint16_t a2);
signed int sub_8EAD0_load_music(int a1);
void sub_8EC90_get_music_sequence_count();
char sub_8ED00_load_music_track(FILE* a1, uint8_t a2);
int sub_8F023(int a1, int a2, unsigned int a3);
int sub_8F0AB(FILE* a1, int a2, int a3);
HSAMPLE* sub_8F100_sound_proc19(Bit32u a1, int16_t a2, int a3, int a4, uint16_t a5, char a6, uint8_t a7);
void sub_8F420_sound_proc20(int a1, int16_t a2);
int sub_8F4B0(); // weak
void sub_8F710_sound_proc21(int a1, int16_t a2, signed int a3, uint8_t a4, char a5);
void sub_8F850_sound_proc22();
void sub_8F8B0_draw_bitmap320(Bit16s posx, Bit16s posy, posistruct temppstr);
void sub_8F8E8_draw_bitmap640(Bit16s posx, Bit16s posy, posistruct temppstr);
void sub_90164(Bit16s a1, Bit16s a2, Bit16s a3, Bit16s a4, Bit8u a5);
void sub_901E4(Bit16s a1, Bit16s a2, Bit16s a3, Bit16s a4, uint16_t a5);
int sub_9025C(int16_t a1, int16_t a2, int16_t a3, int16_t a4, uint16_t a5, int16_t a6);
int sub_90374(int16_t a1, int16_t a2, int16_t a3, int16_t a4, uint16_t a5, int16_t a6);
char sub_904C0(float a1);
signed int sub_90668(int a1);
int sub_906B4();
void sub_90D27();
char* sub_90D3F_unload_file_array(int a1);
void sub_90E07_VGA_set_video_mode_alt_and_pallette(Bit8u* pallette);
int sub_90EA0(int a1, char* a2);
int sub_90EE0();
int sub_90F20_restore_old_directory();
int sub_90F60();
void sub_90FD0(/*char* a1*//*, int a2, char* a3*/);
void sub_91010();
int sub_91420();
void sub_915A0_sound_proc23();
signed int sub_916F0_sound_proc24();
signed int sub_919C0();
int sub_91A80_AIL_set_preference(Bit32u number, Bit32s value);
void sub_91BD0_s_plus();
void sub_91BF0_s_minus();
Bit16u sub_A121D_AIL_API_get_real_vect(Bit32u vectnum/*int a1, int16_t a2, int a3, int a4*/);
void sub_91D50_AIL_set_real_vect(Bit32u vectnum, Bit16u real_ptr);
void sub_91E90_AIL_restore_USE16_ISR(Bit32s a1);


void sub_920D0_AIL_delay(int a1);
int sub_92160();
int sub_92190_AIL_read_INI(AIL_INI* INI, char* filename/*, char* a8, IO_PARMS IO*/);
IO_PARMS* sub_92ED0_AIL_get_IO_environment(AIL_DRIVER* drvr);
int sub_93160_AIL_uninstall_driver(AIL_DRIVER* a1);
int sub_93480_AIL_uninstall_DIG_driver(unsigned int *a1);
HSAMPLE sub_93510_AIL_allocate_sample_handle(HDIGDRIVER a1);
int sub_937A0_AIL_release_sample_handle(int a1);
void sub_93830_AIL_init_sample(HSAMPLE a1);
Bit32s sub_938C0_AIL_set_sample_file(HSAMPLE S, Bit8u* file_image, Bit32s block);
void sub_93A10_AIL_set_sample_address(HSAMPLE S, Bit8u* start, Bit32u len);
void sub_93AB0_AIL_set_sample_type(x_DWORD *a1, int a2, int a3);
void sub_93B50_AIL_start_sample(HSAMPLE S);
void sub_93D00_AIL_end_sample(HSAMPLE S);
void sub_93D90_AIL_set_sample_playback_rate(HSAMPLE S, Bit32s playback_rate);
void sub_93E30_AIL_set_sample_volume(HSAMPLE S, Bit32s volume);
void sub_93ED0_AIL_set_sample_volume_pan(HSAMPLE S, Bit32s volume);
void sub_93F70_AIL_set_sample_loop_count(HSAMPLE S, int loop_count);
Bit32u sub_94010_AIL_sample_status(HSAMPLE S);
void sub_94650_AIL_set_digital_master_volume(x_DWORD *a1, int a2);
EOS_callback_type sub_95140_AIL_register_EOS_callback(HSAMPLE a1, EOS_callback_type a2);
void sub_953E0_AIL_set_sample_user_data(HSAMPLE S, int a2, int a3);
int sub_95480_AIL_sample_user_data(HSAMPLE S, int a2);
int sub_959A0_AIL_uninstall_MDI_driver(HMDIDRIVER  mdi);
HSEQUENCE sub_95A30_AIL_allocate_sequence_handle(HMDIDRIVER mdi);
Bit32s sub_95C00_AIL_init_sequence(HSEQUENCE S, Bit8u* start, Bit32s sequence_num, Bit32u track);
void sub_95D50_AIL_start_sequence(HSEQUENCE S, Bit32u track);
void sub_95DE0_AIL_stop_sequence(HSEQUENCE S);
void sub_95E70_AIL_resume_sequence(HSEQUENCE S);
void sub_95F00_AIL_end_sequence(HSEQUENCE S);
void sub_96030_AIL_set_sequence_volume(HSEQUENCE S, Bit32s volume, Bit32s milliseconds);
int sub_96170_AIL_sequence_status(HSEQUENCE S);
void sub_96670_AIL_set_XMIDI_master_volume(HMDIDRIVER mdi, Bit32s master_volume);
Bit32s sub_969A0_AIL_MDI_driver_type(HMDIDRIVER mdi);
void sub_96AE0_AIL_set_GTL_filename_prefix(Bit8u* a1);
int sub_97330_AIL_sequence_position(x_DWORD *a1, x_DWORD *a2, x_DWORD *a3);
x_DWORD *sub_97480_AIL_branch_index(HSEQUENCE S, int a2);
xCALLBACK sub_97670_AIL_register_trigger_callback(HSEQUENCE S, xCALLBACK a2);
int sub_97A60_AIL_register_event_callback(int a1, int a2);
int sub_97BB0_AIL_register_timbre_callback(int a1, int a2);
int sub_97F90_AIL_lock_channel(x_DWORD *a1);
int sub_980D0_AIL_release_channel(x_DWORD *a1, int a2);
int sub_98170_AIL_map_sequence_channel(x_DWORD *a1, int a2, int a3);
void sub_98360_AIL_send_channel_voice_message(HMDIDRIVER mdi, HSEQUENCE S, Bit32s status, Bit32s data_1, Bit32s data_2);
bool sub_986A0_unlock_linear_region();
void sub_986E0();
long j___clock(); // weak
void sub_98790(uint16_t a1, uint8_t a2);
FILE* sub_98817_open(const char* path, int __pmode);
signed int sub_98C48_open_nwrite_close(const char* file, Bit8u* buffer, Bit32u count);
size_t sub_98CAA_write(FILE* a1, Bit8u* a2, Bit32u a3);
void sub_99080(char a1);
int sub_9937E_set_video_mode(int16_t a1);
int sub_994BA_cursor_move(int16_t a1);
signed int sub_9951B(int16_t a1);
int sub_995B0_test_vga_driver();
void sub_99830(Bit32u user); // weak
void sub_99970(char a1, uint8_t a2);
void sub_99A77_create_index_dattab_div(Bit8u* a1, Bit8u* a2, Bit8u* a3, posistruct* a4);
void sub_99AEB_create_index_dattab_minus(Bit8u* a1, Bit8u* a2, Bit8u* a3, posistruct* a4);
void sub_99C10_sound_proc4();
void sub_99C90();
signed int sub_99E8E(uint8_t *a1, uint8_t **a2, signed int a3, int a4);
signed int sub_99FF0(char* a1, uint8_t **a2, signed int a3);
int sub_99FF5(uint8_t a1);
void sub_9A0FC_wait_to_screen_beam();
int sub_9A230_set_x_WORD_E37B4(int a1);
Bit8u* sub_9A2F5_freemem_of_begin_buffer(Pathstruct path);
signed int sub_9A32D_malloc_open_unpack(Pathstruct a1);
int sub_9AD16_free_mem_pool(void* a1);
int sub_9AD9C(int a1);
int sub_9ADB4(int a1);
int /*__fastcall*/ j_j___clock(x_DWORD, x_DWORD, x_DWORD); // weak
void sub_9AEEC(x_DWORD **a1, char *a2);
char sub_9B038(int *a1, char *a2, int a3);
int sub_9B234(int *a1);
signed int sub_9B260(x_DWORD **a1);
char sub_9B274(int *a1, int a2);
char *sub_9B498(char a1);
bool sub_9B540_lock_linear_mem_region(unsigned int a1, unsigned int a2);
bool sub_9B5B4_unlock_mem_region(unsigned int a1, unsigned int a2);
void sub_9B628();
int sub_9B63C(int a1);
x_WORD *sub_9B688(int a1);
int sub_9B7E8(int a1);
void sub_9BAB0();
int sub_9BAC4(int a1, signed int a2);
int sub_9BBFC_unlock_and_free_memory(int a1);
signed int sub_9BC68_allocate_and_lock_memory(x_WORD *a1, int a2, unsigned int a3);
int sub_9BE18(int a1, int a2, char a3, unsigned int a4, unsigned int a5);
signed int sub_9C810(x_DWORD *a1, char a2);
signed int sub_9C938(x_DWORD *a1);
bool sub_9C9D0(int a1);
void sub_9CBBC(x_DWORD *a1);
int sub_9CCB4(int a1, int a2);
int sub_9CCF8(int a1, int a2);
int sub_9CD9C(int a1, int a2);
int16_t /*__fastcall*/ sub_9D31C(int16_t result);
int sub_9D380(int a1, int a2, char a3, int a4, int a5);
Bit8u* sub_9D450_malloc4(int a1);
int sub_9D490_free4(void* a1, int a2);
signed int sub_9D4D0(int a1, Bit8u* a2, Bit32u* a3, Bit32u* a4);
void sub_9D560(Bit8u* a1);
void sub_9D590_lock_linear_region(Bit8u* a1, unsigned int a2);
bool sub_9D650(unsigned int a1, unsigned int a2);
void sub_9D710(Bit8u* a1, int a2);
bool sub_9D740(unsigned int a1, int a2);
int sub_9D770(char* a1, char a2);
signed int sub_9DE20_get_file_lenght(char* a1);
Bit8u* sub_9DEA0_read_file(char* a1, Bit8u* a2);
void sub_9E1B0();
void sub_9E250(Bit32u user); // weak
int sub_9E2B0(char* a1, int a2, x_DWORD *a3);
int sub_9E3A0_AIL_API_read_INI(AIL_INI* INI, char* filename/*, char* a8, IO_PARMS* IO*/);
int sub_9E6E0_set_preference(Bit32u number, Bit32s value);
AIL_DRIVER* sub_9E720_AIL_API_install_driver(/*int a1, */Bit8u* driver_image, Bit32s n_bytes);//27f720
int sub_9EA60_AIL_API_uninstall_driver(AIL_DRIVER* a1);
IO_PARMS* sub_9EB60_AIL_API_get_IO_environment(AIL_DRIVER *drvr);
void sub_9EC30();
signed int sub_9ED70();
bool sub_9EDD0();
int sub_9EE70(); // weak
void sub_9F040();
int64_t sub_9F110(int a1);
int sub_9F170(int a1, uint16_t a2);
int sub_9F1D0(int a1);
int sub_9F220(int a1);
int sub_9F280(int *a1);
VDI_CALL sub_9F2E0(int *a1, int a2, uint16_t a3, uint16_t a4);
int64_t sub_9F3D0(int *a1, int a2, uint16_t a3, uint16_t a4);
VDI_CALL sub_9F4F0(int *a1, int a2, uint16_t a3, uint16_t a4);
VDI_CALL sub_9F5E0(int *a1, int a2, uint16_t a3, uint16_t a4);
VDI_CALL sub_9F6D0(int *a1, int16_t a2);
void sub_9F740(char* a1);
void sub_9FA80();
int sub_A0B24(int a1);
int sub_A0BB0(int *a1, int a2);
void sub_A0D2C_VGA_get_pallette(Bit8u* a1);
void sub_A0D50_set_viewport(int16_t a1, int16_t a2, int16_t a3, int16_t a4);
void sub_A0EF9_s_minus2();
char sub_A102C(int a1);
char sub_A105C(unsigned int a1);
void sub_A108F();
void sub_A10F4_sound_proc_irq();
signed int sub_A11E2();
void sub_A1249_AIL_API_set_real_vect(Bit32u vectnum, Bit16u real_ptr);
signed int sub_A12C5_sound_proc_irq(int a1, int a2, int16_t a3);
void sub_A14DB_AIL_API_restore_USE16_ISR(int a1);
unsigned int sub_A1520();
void sub_A1524(unsigned int a1);
Bit32s sub_A158B_AIL_API_call_driver(AIL_DRIVER* drvr, Bit32s fn, VDI_CALL* in, VDI_CALL* out);
void sub_A1665_AIL_API_delay(int a1);
int sub_A16A2();
void sub_A171D_release_timer_handle(Bit32s a1);
void sub_A1744_AIL_API_release_all_timers();
void sub_A1798();
void sub_A17BC_stop_timer(HTIMER timer);
void sub_A17EC();
void sub_A1810_set_timer_period(HTIMER timer, Bit32u microseconds);
void sub_A1840_AIL_API_set_timer_frequency(HTIMER timer, Bit32u hertz);
void sub_A1870(int a1, unsigned int a2);
int sub_A18B2();
void sub_A18BE();
void sub_A1F90();
void sub_A2070(HDIGDRIVER a1);
void sub_A20D0(HDIGDRIVER a1);
void sub_A2110(HSAMPLE S);
void sub_A2450(Bit32u user); // weak
int sub_A2650(HDIGDRIVER a1);
int sub_A2C80(HDIGDRIVER a1, IO_PARMS* a2);
int sub_A2DE0(); // weak
HDIGDRIVER sub_A2EA0(AIL_DRIVER* a1, IO_PARMS IO);
int sub_A37A0(unsigned int *a1);
int sub_A37C0(int a1);
HSAMPLE sub_A3820_allocate_sample_handle(HDIGDRIVER dig);
int sub_A38C0_AIL_API_release_sample_handle(int a1);
void sub_A38E0_init_sample(HSAMPLE S);
Bit32u sub_A3A00_sample_status(HSAMPLE S);
void sub_A3A30_set_sample_address(HSAMPLE S, Bit8u* start, Bit32u len);
void sub_A3A70_set_sample_type(HSAMPLE S, Bit32s a2, Bit32u a3);
int sub_A3AC0(int a1);
void sub_A3AF0_set_sample_playback_rate(HSAMPLE S, Bit32s playback_rate);
Bit32s sub_A3B10_get_sample_volume(HSAMPLE S);
void sub_A3B40_set_sample_volume(HSAMPLE S, Bit32s volume);
Bit32s sub_A3B80_get_sample_volume_pan(HSAMPLE S);
void sub_A3BB0_set_sample_volume_pan(HSAMPLE S, Bit32s volume);
int sub_A3BF0(HSAMPLE S);
int sub_A3C30(HSAMPLE S, int a2);
signed int sub_A3C60_get_sample_loop_count(HSAMPLE S);
void sub_A3C90_set_sample_loop_count(HSAMPLE S, Bit32s loop_count);
void sub_A3CB0_API_AIL_start_sample(HSAMPLE S);
void sub_A3D30(HSAMPLE S);
void sub_A3D60(HSAMPLE S);
void sub_A3DA0__API_AIL_end_sample(HSAMPLE S);
int sub_A3E10(HSAMPLE S, int a2);
int sub_A3E60(HSAMPLE S, int a2);
EOS_callback_type sub_A3EB0_register_EOS_callback(HSAMPLE S, EOS_callback_type EOS);
void sub_A3F00_set_sample_user_data(HSAMPLE S, int a2, int a3);
int sub_A3F30_sample_user_data(HSAMPLE S, int index);
void sub_A3F70_set_digital_master_volume(x_DWORD *a1, int a2);
int sub_A3FE0(int a1);
char sub_A4000(x_DWORD *a1, int a2, unsigned int a3);
void sub_A4100(int *a1, int a2, int a3, int a4);
signed int sub_A41B0(x_DWORD *a1);
bool sub_A4260();
void sub_A4330();
int sub_A4370(x_DWORD *a1);
int sub_A4390(int a1);
void sub_A43E0(int a1);
int sub_A47A0(); // weak
void sub_A47C0_sub_set_sample_file(Bit8u* file_image, HSAMPLE S);
int sub_A4920(); // weak
HSAMPLE sub_A4970(int a1, Bit8u* a2, int a3);
Bit32s sub_A4B20_set_sample_file(HSAMPLE S, Bit8u* file_image, Bit32s block);
int sub_A4C60(int a1, int a2);
bool sub_A4CB0();
void sub_A4CF0();
signed int sub_A4E10(char a1);
void sub_A4EB0(HMDIDRIVER a1);
void sub_A4F10(HMDIDRIVER a1, char a2, char a3, char a4);
void sub_A4FD0(int a1, int a2, unsigned int a3);
int sub_A5040(x_DWORD *a1);
unsigned int sub_A50A0(int a1);
Bit8u* sub_A50F0(Bit8u* a1, int a2);
int sub_A5210(int a1, char a2, unsigned int a3);
x_DWORD *sub_A5530(int a1, char a2, unsigned int a3, uint8_t a4);
void sub_A5850(HSEQUENCE S, char a2, unsigned int a3, signed int a4, int a5);
void sub_A5E50(HSEQUENCE S);
void sub_A5F30(int *a1, int a2);
void sub_A5FD0(int a1, int a2);
void sub_A6370(HSEQUENCE S);
void sub_A6490(HSEQUENCE S);
void sub_A64C0(HSEQUENCE S);
int sub_A6E00_sound_proc25(HMDIDRIVER a1, IO_PARMS* a2);
int sub_A6F30(); // weak
HMDIDRIVER sub_A6FB0_sound_proc26(AIL_DRIVER* a1, IO_PARMS *a2);
int sub_A7970_AIL_API_uninstall_MDI_driver(HMDIDRIVER mdi);
Bit32s sub_A7990_AIL_API_MDI_driver_type(HMDIDRIVER mdi);
void sub_A7AA0_AIL_API_set_GTL_filename_prefix(Bit8u* a1);
HSEQUENCE sub_A7B30_AIL_API_allocate_sequence_handle(HMDIDRIVER mdi);
void sub_A7BF0_sound_proc33(HSEQUENCE S);
int sub_A7C20_AIL_API_init_sequence(HSEQUENCE S, int a2, int a3);
void sub_A8010_AIL_API_start_sequence(HSEQUENCE S, Bit32u track);
void sub_A8050_AIL_API_stop_sequence(HSEQUENCE S);
void sub_A8180_AIL_API_resume_sequence(HSEQUENCE S);
void sub_A8250_AIL_API_end_sequence(HSEQUENCE S);
int sub_A82A0(int a1, int a2);
void sub_A82C0(x_DWORD *a1, int a2, int a3);
void sub_A8360_AIL_API_set_sequence_volume(HSEQUENCE S, Bit32s volume, Bit32s milliseconds);
int sub_A8410_AIL_API_sequence_status(HSEQUENCE S);
signed int sub_A8440(int a1);
int sub_A8470(int a1);
int sub_A84A0(int a1);
void sub_A84D0_AIL_API_set_XMIDI_master_volume(HMDIDRIVER mdi, Bit32s master_volume);
int sub_A8550(int a1);
int sub_A8570_sound_proc39(int *a1, int16_t a2, int16_t a3);
VDI_CALL sub_A85B0_sound_proc40(int *a1, int a2, int a3);
int sub_A8690_sound_proc41(int *a1, int16_t a2, int16_t a3);
int sub_A86D0_sound_proc42(int *a1, int16_t a2, int16_t a3);
int sub_A8710(int a1);
int sub_A8770(int a1, char a2, unsigned int a3);
int sub_A87C0(int a1, int a2);
int sub_A8830(x_DWORD *a1, x_DWORD *a2, x_DWORD *a3);
x_DWORD *sub_A8900(HSEQUENCE S, int a2);
int sub_A89E0(int a1, int a2);
xCALLBACK sub_A8A20_AIL_API_trigger_callback(HSEQUENCE S, xCALLBACK a2);
int sub_A8A60(int a1, int a2);
int sub_A8AA0(int a1, int a2);
int sub_A8AE0(int a1, int a2);
int sub_A8B20(int a1, int a2);
int sub_A8B60(int a1, int a2, int a3);
int sub_A8B90(int a1, int a2);
int sub_A8BD0(int a1, int a2);
int sub_A8BF0(x_DWORD *a1);
int sub_A8EA0(x_DWORD *a1, int a2);
int sub_A9080(x_DWORD *a1, int a2, int a3);
int sub_A9100(int a1, int a2);
void sub_A9140_AIL_API_send_channel_voice_message(HMDIDRIVER mdi, HSEQUENCE S, Bit32s status, Bit32s data_1, Bit32s data_2);
int sub_A9230(int a1, int a2);
bool sub_A9280();
void sub_A9590();
x_DWORD *sub_A95D0(int a1, char a2, unsigned int a3, uint8_t a4);
x_DWORD *sub_A98D0(x_DWORD *a1, int a2, int a3);
void sub_A9950(int a1, int a2);
void sub_A9A30(int a1, int a2);
int sub_A9C00(); // weak
int sub_A9C50(); // weak
x_DWORD *sub_AA310(int a1, int a2, int a3, signed int a4);
int sub_AA590(int *a1);
bool sub_AA620();
signed int sub_AB9E1_get_file_unpack_size(char* a1);
int sub_AC24B();
signed int sub_AC250(int a1, int a2, int a3, int a4, int a5, x_DWORD *a6, x_DWORD *a7, signed int *a8);
int16_t sub_AC70E();
void sub_AC7D9();
int16_t sub_AC843();
int16_t sub_AC8DD();
int16_t sub_AC918();
signed int sub_ACB61(int a1, uint8_t *a2, int *a3);
uint8_t *sub_ACD79(uint8_t *a1, int a2);
int sub_ACE56(int a1);
x_BYTE *sub_AD09E(x_BYTE *a1, int a2);
int sub_AD754(signed int a1);
int sub_AD783(int a1);
int sub_AEAF5();
int sub_B0B87(HDIGDRIVER a1, int a2);
void sub_B0C1A(HDIGDRIVER a1);
void sub_B0C46();
char *sub_B0CC8();
void sub_B0D80();
signed int sub_B1138(signed int *a1, signed int a2);
int sub_B11E8(x_DWORD *a1, int a2);
int sub_B12A4(int a1);
int sub_B1304(int a1, int a2);
int sub_B1414(int a1);
int sub_B148C(int a1);
int sub_B14F8(int *a1, int a2);
int sub_B1DC8(); // weak
int /*__fastcall*/ sub_B3542(int a1, int a2);
void sub_B392B(int *a1);
int /*__fastcall*/ sub_B3930(int *a1,Bit8u bl=0x20);
int /*__fastcall*/ sub_B399A(int a1, int a2);
int /*__fastcall*/ sub_B39AB(unsigned int a1, int a2,Bit32u edx=0x3fff);
int /*__fastcall*/ sub_B3A60(int a1);
signed int /*__fastcall*/ sub_B3BA6(signed int result, int a2);
unsigned int /*__fastcall*/ sub_B3C6B(unsigned int result, int16_t a2);
int /*__fastcall*/ sub_B46CB(int a1);
int /*__fastcall*/ sub_B46D5(int a1);
int /*__fastcall*/ sub_B46E2(int a1);
int sub_B46F0(); // weak
int /*__fastcall*/ sub_B4718(int a1, int a2, int a3, int a4);
int /*__fastcall*/ sub_B48EC(uint64_t a1);
void /*__spoils<edx,ecx>*/ sub_B4F46();
void /*__spoils<edx,ecx>*/ sub_B4FA3();
int sub_B5C5B();
int sub_B5C60_getTerrainAlt2(Bit16u a1, Bit16u a2);
int sub_B5D68(int16_t a1, int16_t a2);
void /*__spoils<ecx>*/ sub_B6253_draw_triangle(x_DWORD *a1, x_DWORD *a2, x_DWORD *a3);
void /*__spoils<>*/ sub_BCD45(Bit8u* a1, int a2, int a3, int a4, int a5);
void /*__spoils<ecx>*/ sub_BD1B6(int a1);
void /*__spoils<ecx>*/ sub_BD2CB(int a1);
void sub_BD3DD();
void sub_BD524(uint16_t a1, uint16_t a2, uint16_t a3, uint16_t a4, char a5);
void sub_BD542(uint16_t a1, uint16_t a2, uint16_t a3, uint16_t a4, char a5);
void sub_67960(/*type_str_0x6E8E* a1x,*/ type_str_0x6E8E* a2x);

//-------------------------------------------------------------------------
// Data declarations

//_UNKNOWN loc_4AFFE; // weak
//Bit8u algn_4BB85[11] = { '\x8D', '\x80', '\0', '\0', '\0', '\0', '\x8D', 'R', '\0', '\x8B', '\0' }; // weak
Bit8u algn_4BB85[11] = {0x8d, 0x80, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x52, 0x00, 0x8b, 0x00};

Bit16u x_WORD_727B0[0xe0] = { 
0x0001,0x0002,0x0002,0x0004,0x0005,0x0008,0x000B,0x0010,
0x0016,0x0020,0x002D,0x0040,0x005A,0x0080,0x00B5,0x0100,
0x016A,0x0200,0x02D4,0x0400,0x05A8,0x0800,0x0B50,0x1000,
0x16A0,0x2000,0x2D41,0x4000,0x5A82,0x8000,0xB504,0xFFFF,
0x8B55,0x50EC,0x5251,0xBA66,0x03C8,0x0F66,0x45B6,0xEE08,
0xC9B2,0x458A,0xEE0C,0x458A,0xEE10,0x458A,0xEE14,0x595A,
0xC958,0x55C3,0xEC8B,0x5350,0x5251,0x5756,0x7D8B,0x8A08,
0x0C45,0x658A,0xC10C,0x10E0,0x458A,0x8A0C,0x0C65,0x4D8B,
0x8B10,0x83D9,0x03E3,0xE9C1,0x8302,0x00F9,0x0B74,0xABF3,
0xFB83,0x7400,0x8B04,0xF3CB,0x5FAA,0x5A5E,0x5B59,0xC958,
0x55C3,0xEC8B,0x5350,0x5251,0x5756,0x758B,0x8B0C,0x087D,
0x4D8B,0x8B10,0x83D9,0x03E3,0xE9C1,0x8302,0x00F9,0x0B74,
0xA5F3,0xFB83,0x7400,0x8B04,0xF3CB,0x5FA4,0x5A5E,0x5B59,
0xC958,0x55C3,0xEC8B,0x5157,0x8B50,0x087D,0xB70F,0x0C4D,
0xC96B,0x8A50,0x1045,0x658A,0xC110,0x10E0,0x458A,0x8A10,
0x1065,0xABF3,0x5958,0xC95F,0x55C3,0xEC8B,0x5157,0x8B50,
0x087D,0xB70F,0x0C4D,0xC969,0x00A0,0x0000,0x458A,0x8A10,
0x1065,0xE0C1,0x8A10,0x1045,0x658A,0xF310,0x58AB,0x5F59,
0xC3C9,0x0000,0x8B55,0x53EC,0x5251,0x5756,0x7D8B,0x8B08,
0x0C75,0x00B9,0x002D,0xF300,0x5FA5,0x5A5E,0x5B59,0xC3C9,
0x8B55,0x83EC,0xF8C4,0x5153,0x5652,0xFC57,0x458B,0x8D10,
0x4004,0xC003,0x4589,0x8BFC,0x0C7D,0x7D89,0x8AF8,0x1455,
0xF28A,0x758B,0xAC08,0xC00A,0x840F,0x0171,0x0000,0x203C,
0x2873,0x093C,0x1575,0x08BB,0x0000,0x8B00,0xF845,0xC303,
0xC383,0x3B08,0x7EC7,0x8BF4,0xEBF8,0x3C0D,0x750A,0x8B09,
0xF87D,0x7D03,0x89FC,0xF87D,0xCBEB,0x202C,0xB60F,0x66C0,
0xE0C1,0x5703,0xB966,0x0006,0xB60F,0x0098,0x19E0,0x6600,
0xFF40,0x67A3,0x2539,0x7600,0x253A,0xEE00,0x2539,0xF900
}; // weak
int x_DWORD_A1270 = 1397753374; // weak
Bit16u x_WORD_A1277 = 39321; // weak
Bit16u x_WORD_A1286 = 39321; // weak
int x_DWORD_A128C = 2576980377; // weak
Bit16u x_WORD_A12A2 = 39321; // weak
Bit16u x_WORD_A12AC = 39321; // weak
Bit16u x_WORD_A12B3 = 39321; // weak
//void *off_A4400 = &loc_A4459; // weak
int x_DWORD_A9390[0x80] = { 
0x00000008,0x00000011,0x00000012,0x00000013,
0x00000014,0x00000015,0x00000017,0x00000018,
0x0000001A,0x0000001B,0x0000001D,0x0000001E,
0x00000020,0x00000022,0x00000024,0x00000026,
0x00000029,0x0000002B,0x0000002E,0x00000031,
0x00000033,0x00000037,0x0000003A,0x0000003D,
0x00000041,0x00000045,0x00000049,0x0000004D,
0x00000052,0x00000057,0x0000005C,0x00000062,
0x00000067,0x0000006E,0x00000074,0x0000007B,
0x00000082,0x0000008A,0x00000092,0x0000009B,
0x000000A4,0x000000AE,0x000000B9,0x000000C4,
0x000000CF,0x000000DC,0x000000E9,0x000000F7,
0x00000105,0x00000115,0x00000125,0x00000137,
0x00000149,0x0000015D,0x00000172,0x00000188,
0x0000019F,0x000001B8,0x000001D2,0x000001ED,
0x0000020B,0x0000022A,0x0000024B,0x0000026E,
0x00000293,0x000002BA,0x000002E4,0x00000310,
0x0000033E,0x00000370,0x000003A4,0x000003DB,
0x00000416,0x00000454,0x00000496,0x000004DC,
0x00000526,0x00000574,0x000005C8,0x00000620,
0x0000067D,0x000006E0,0x00000748,0x000007B7,
0x0000082D,0x000008A9,0x0000092D,0x000009B8,
0x00000A4C,0x00000AE9,0x00000B90,0x00000C40,
0x00000CFA,0x00000DC0,0x00000E91,0x00000F6F,
0x0000105A,0x00001153,0x0000125B,0x00001371,
0x00001499,0x000015D3,0x00001720,0x00001880,
0x000019F4,0x00001B80,0x00001D23,0x00001EDE,
0x000020B4,0x000022A6,0x000024B6,0x000026E3,
0x00002933,0x00002BA6,0x00002E40,0x00003100,
0x000033E9,0x00003700,0x00003A46,0x00003DBC,
0x00004169,0x0000454C,0x0000496C,0x00004DC6,
0x00005266,0x0000574C,0x00005C80,0x00006200 }; // weak
//_UNKNOWN loc_ACF14; // weak //fix - function
int(*off_AEB40[2])() = { &sub_AEF40, &sub_AEF51 }; // weak
int(*off_AED40[2])() = { &sub_AFB7E, &sub_AFB9F }; // weak
//_UNKNOWN loc_AFFFE; // weak
int x_DWORD_B184C[2] = { 0, 0 }; // weak
void *off_B1854 = &loc_A0000_vga_buffer; // weak
int x_DWORD_B1858[2] = { 70, 0 }; // weak
int x_DWORD_B1860[41] =
{
  20,
  67584,
  1966080,
  268435466,
  2,
  1310760,
  202752,
  3276800,
  536870942,
  4,
  2621500,
  337920,
  4587520,
  805306418,
  6,
  3932160,
  473088,
  4294705152,
  1,
  196610,
  327667,
  524288,
  4291756044,
  16,
  3145760,
  4259647,
  8388608,
  4244570304,
  256,
  50332160,
  67171327,
  134217728,
  3489598464,
  4096,
  805314560,
  1073758207,
  2147483648,
  1073856512,
  33572096,
  50414144,
  3683074881
}; // weak
int(*off_B1904[57])() =
{
  &sub_B1EB6,
  &sub_B1EBC,
  &sub_B1EC2,
  &sub_B1EC8,
  &sub_B1F78,
  &sub_B1ED6,
  &sub_B1EDC,
  &sub_B1EE2,
  &sub_B1EE8,
  &sub_B1EF0,
  &sub_B1EF8,
  &sub_B1F00,
  &sub_B1F78,
  &sub_B1F12,
  &sub_B1F1C,
  &sub_B1F24,
  &sub_B1F2C,
  &sub_B1F35,
  &sub_B1F3E,
  &sub_B1F47,
  &sub_B1F78,
  &sub_B1F5B,
  &sub_B1F66,
  &sub_B1F6F,
  &sub_B1EB6,
  &sub_B1EBC,
  &sub_B1EC2,
  &sub_B1EC8,
  &sub_B1ECE,
  &sub_B1ED6,
  &sub_B1EDC,
  &sub_B1EE2,
  &sub_B1EE8,
  &sub_B1EF0,
  &sub_B1EF8,
  &sub_B1F00,
  &sub_B1F08,
  &sub_B1F12,
  &sub_B1F1C,
  &sub_B1F24,
  &sub_B1F2C,
  &sub_B1F35,
  &sub_B1F3E,
  &sub_B1F47,
  &sub_B1F50,
  &sub_B1F5B,
  &sub_B1F66,
  &sub_B1F6F,
  &sub_B1FB5,
  &sub_B20A7,
  &sub_B2183,
  &sub_B2275,
  &sub_B230F,
  &sub_B2468,
  &sub_B256E,
  &sub_B2670,
  &sub_B1FD4
}; // weak
int(*off_B1964[33])() =
{
  &sub_B1EB6,
  &sub_B1EBC,
  &sub_B1EC2,
  &sub_B1EC8,
  &sub_B1ECE,
  &sub_B1ED6,
  &sub_B1EDC,
  &sub_B1EE2,
  &sub_B1EE8,
  &sub_B1EF0,
  &sub_B1EF8,
  &sub_B1F00,
  &sub_B1F08,
  &sub_B1F12,
  &sub_B1F1C,
  &sub_B1F24,
  &sub_B1F2C,
  &sub_B1F35,
  &sub_B1F3E,
  &sub_B1F47,
  &sub_B1F50,
  &sub_B1F5B,
  &sub_B1F66,
  &sub_B1F6F,
  &sub_B1FB5,
  &sub_B20A7,
  &sub_B2183,
  &sub_B2275,
  &sub_B230F,
  &sub_B2468,
  &sub_B256E,
  &sub_B2670,
  &sub_B1FD4
}; // weak
int(*off_B2D96)(int16_t, int16_t, int, int, int, int, int, int, int, int, int, int, int, int, int16_t) = &sub_B278C; // weak
int(*off_B2E1F[2])(int16_t, int16_t, int, int, int, int, int, int, int, int, int, int, int, int, int16_t) = { &sub_B278C, &sub_B278C }; // weak
int(*off_B3028)(int16_t, int16_t, int, int, int, int, int, int, int, int, int, int, int, int, int16_t) = &sub_B278C; // weak
int x_DWORD_B3BEB[0x20] = {
0x7FFFFFFF,0x3FFFFFFF,0x1FFFFFFF,0x0FFFFFFF,
0x07FFFFFF,0x03FFFFFF,0x01FFFFFF,0x00FFFFFF,
0x007FFFFF,0x003FFFFF,0x001FFFFF,0x000FFFFF,
0x0007FFFF,0x0003FFFF,0x0001FFFF,0x0000FFFF,
0x00007FFF,0x00003FFF,0x00001FFF,0x00000FFF,
0x000007FF,0x000003FF,0x000001FF,0x000000FF,
0x0000007F,0x0000003F,0x0000001F,0x0000000F,
0x00000007,0x00000003,0x00000001,0x00000000 }; // weak
int16_t x_WORD_B3D9E = 6222; // weak
int16_t x_WORD_B419A = 18153; // weak
int x_DWORD_B41B8 = 0; // weak
int16_t x_WORD_B440E[7*5] = {
0x5359,0x856A,0x3B81,0xCA96,0x3FCE,
0xF88F,0x9DC0,0x9F39,0xD73F,0xBFD6,
0x4BE5,0x4368,0x309D,0xB092,0x3FDE,
0x1C7F,0xAA27,0x2B3F,0xD732,0xBFE5,
0x9C7D,0xB639,0x1D2A,0xB8EF,0x3FEC,
0xD00C,0x0D00,0x00D0,0xD00D,0xBFF2,
0x8888,0x8888,0x8888,0x8888,0x3FF8
}; // weak
int x_DWORD_B4468[19] =
{
  2646669455,
  3611270969,
  3909435346,
  2772829156,
  3218786763,
  3334782378,
  2406926207,
  3818340322,
  2109457658,
  3219756018,
  218157069,
  3490513104,
  3054190575,
  1622543200,
  3220551179,
  2863311530,
  2863311530,
  16378,
  0
}; // weak
int16_t x_WORD_B44C2[9] = { 0x00,0x01,0x02,0x03,0x04,0x04,0x05,0x5,0x6 }; // weak
int x_DWORD_B8845[16] = { 
0x00000000,0xFFFFFFF1,0xFFFFFFF2,0xFFFFFFF3,
0xFFFFFFF4,0xFFFFFFF5,0xFFFFFFF6,0xFFFFFFF7,
0xFFFFFFF8,0xFFFFFFF9,0xFFFFFFFA,0xFFFFFFFB,
0xFFFFFFFC,0xFFFFFFFD,0xFFFFFFFE,0xFFFFFFFF };
void *off_D1F10 = (void *)0xD5221; // weak
float flt_D1F40 = 0.000061035156; // weak
void *off_D1F78 = &unk_D5621; // weak
double dbl_D1F7C = 1.003; // weak
char x_BYTE_D3450[17] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F',0 }; // weak
char IsTable[256] =
{
  0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x03,0x03,0x03,0x03,0x03,0x01,
  0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
  0x01,0x0A,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,
  0x0C,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x0C,0x0C,0x0C,0x0C,0x0C,
  0x0C,0x0C,0x58,0x58,0x58,0x58,0x58,0x58,0x48,0x48,0x48,0x48,0x48,0x48,0x48,0x48,
  0x48,0x48,0x48,0x48,0x48,0x48,0x48,0x48,0x48,0x48,0x48,0x48,0x0C,0x0C,0x0C,0x0C,
  0x0C,0x0C,0x98,0x98,0x98,0x98,0x98,0x98,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,
  0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x0C,0x0C,0x0C,0x0C,
  0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
}; // weak
char x_BYTE_D3EA0[6] = { 1, 2, 4, 8, 16, 32 }; // idb
char x_BYTE_D3F48 = 0; // weak
int16_t x_WORD_D3F4C[26] ={  2,10,40,32,300,1,1,1,1,4,1,1,0,0,0,0,0,0,400,600,600,400,400,0,0,0}; // idb
Bit8u unk_D3F80x[0x9] = { 0x10,0x12,0x09,0x07,0x14,0x15,0x13,0x00,0xFF };
Bit8u unk_D3F89x[0x8] = { 0x10,0x12,0x07,0x09,0x11,0x14,0x00,0xFF };
Bit8u unk_D3F91x[0x5] = {0x02,0x13,0x19,0x10,0xFF };
//_UNKNOWN unk_D3F89; // weak
//_UNKNOWN unk_D3F91; // weak
char x_BYTE_D3F96[14] ={0x00,0xff,0x00,0xff,0x01,0xff,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00 }; // idb
char x_BYTE_D3FA4[14] ={0x00,0x00,0xff,0x00,0x00,0x00,0xff,0xff,0x01,0x01,0x00,0x01,0x00,0x00 }; // weak
char x_BYTE_D3FB2[14] ={0x00,0x01,0x00,0x00,0xff,0x01,0xff,0x00,0x00,0x01,0x01,0x00,0x00,0x00 }; // idb
char x_BYTE_D3FC0[14] ={0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x01,0xff,0x00,0x00,0x01,0xff,0x00 }; // weak
int16_t x_WORD_D3FCE[13] = { 0, 1536, 0, 1536, 512, 1536, 0, 0, 1024, 1024, 1536, 1024, 512 }; // idb
int16_t x_WORD_D3FE8[14] = { 1024, 512, 1024, 1024, 1536, 512, 1536, 1024, 0, 512, 512, 1024, 0, 0 }; // idb
int16_t x_WORD_D4004 = 0; // weak
char x_BYTE_D400C[64] =
{
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
	0x03,0x02,0x01,0x00,0x00,0x00,0x00,0x00,
	0x04,0x03,0x02,0x01,0x00,0x00,0x00,0x00,
	0x05,0x04,0x03,0x03,0x01,0x00,0x00,0x00,
	0x06,0x05,0x04,0x03,0x02,0x01,0x00,0x00,
	0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00
}; // idb
Bit8u ar_D404C[22 * 5]
{
0x86,0x01,0x14,0x00,0x62,0x02,0x1E,0x00,0x3C,0x00,0xB0,0xFF,0x09,0x00,0xEB,0x06,0x86,0x01,0x21,0x01,0x81,0x00,//D4062
0xB8,0x01,0x6E,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x9C,0xFF,0x97,0x01,0x95,0x06,0xB8,0x01,0x46,0x01,0x92,0x00,//D4078
0xAE,0x01,0x9C,0xFF,0x58,0x02,0x00,0x00,0x00,0x00,0x9C,0xFF,0x69,0x06,0xAB,0x06,0xAE,0x01,0x3F,0x01,0x8E,0x00,//D408E
0xA4,0x01,0x32,0x00,0xC2,0x01,0x00,0x00,0x00,0x00,0xBA,0xFF,0x1C,0x01,0x71,0x07,0xA4,0x01,0x37,0x01,0x8B,0x00,//D40A4
0xA4,0x01,0xF6,0xFF,0xC2,0x01,0x28,0x00,0x5E,0x0B,0xBA,0xFF,0x02,0x03,0x85,0x04,0xA4,0x01,0x37,0x01,0x8B,0x00
};
int x_DWORD_D40BC[51] =  // weak//min 16*3 //2a50bc
//int x_DWORD_D40C0[] = { 0 }; // weak//x_DWORD_D40BC[1+

{0x00000000, 0x00000000, 0x00000000, 0x0000006A,
0x00000024, 0x00000000, 0x00000097, 0x00000033,
0x00000000, 0x000000BF, 0x00000041, 0x00000000,
0x000000DC, 0x0000004B, 0x00000000, 0x000000F6,
0x00000054, 0x00000000, 0x00000113, 0x0000005E,
0x00000000, 0x00000129, 0x00000066, 0x00000000,
0x0000013E, 0x0000006D, 0x00000000, 0x00000152,
0x00000074, 0x00000000, 0x00000169, 0x0000007C,
0x00000000, 0x0000017C, 0x00000082, 0x00000000,
0x0000018E, 0x00000088, 0x00000000, 0x000001A0,
0x0000008F, 0x00000000, 0x000001B5, 0x00000096,
0x00000000, 0x000001C6, 0x0000009C, 0x00000000,
0x00000000, 0x00000000, 0x00000000};


Bit8u* x_DWORD_D4188 = 0; // weak
Bit8u* x_DWORD_D418C=0; // weak
int x_DWORD_D4190 = 0; // weak
Bit8u* x_DWORD_D4198 = 0; // weak
char x_BYTE_D419C_level_num = -1; // weak
char x_BYTE_D419D_fonttype = 1; // weak
char x_BYTE_D419E = 0; // weak//2a519e


//x_DWORD x_DWORD_D41A4 = 0;
x_DWORD x_DWORD_D41A4_4 = 0;
x_DWORD x_DWORD_D41A4_6 = 127;
x_DWORD x_DWORD_D41A4_8 = 127;
x_BYTE x_BYTE_D41A4_10 = 1;
x_BYTE x_BYTE_D41A4_11 = 0;
x_BYTE x_BYTE_D41A4_12 = 0;
x_BYTE x_BYTE_D41A4_13 = 0;


char x_BYTE_D41AD_skip_screen = 0; // weak
Bit8u x_BYTE_D41B5_texture_size = 32; // weak
char x_BYTE_D41B6 = 1; // weak
Bit8u x_BYTE_D41B7 = 44; // weak

char x_BYTE_D41C0 = 0; // weak
char x_BYTE_D41C1 = 0; // weak
char x_BYTE_D41C4 = 99; // weak
char x_BYTE_D41C6_old_graphics_mode = 40; // weak
int x_DWORD_D41C8 = 0; // weak
char x_BYTE_D41CE = 0; // weak
char* x_DWORD_D41D0 = 0; // weak
int16_t x_WORD_D41D4 = 1; // weak
char x_BYTE_D41D8[0x148] = { //002A51d8
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,
0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
}; // weak//002A51D8

bool isNotDayLevel = false;

int x_DWORD_D4324 = 0; // weak
Bit8u unk_D4328x[0x28] = { 
0xED,0x01,0x00,0x00,0x00,0xFF,0xD8,0xFF,0x01,0x00,0x00,0xED,0xFF,0x00,0x01,0x00,
0x01,0xD8,0x00,0x01,0x13,0x00,0xFF,0xFF,0x00,0x01,0x28,0x01,0xFF,0x00,0x01,0x13,
0x00,0xFF,0xFF,0x00,0xFF,0x28,0x00,0xFF
}; // weak //2a5328
Bit32u unk_D4350[256] = {
0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000
}; // weak //fix
char x_BYTE_D4750[0x3c] = { //2a5750
0x00,0x00,0x02,0x03,0x04,0x05,0x01,0x00,0x06,0x07,0x04,0x05,0x00,0x01,0x01,0x02,
0x02,0x03,0x03,0x04,0x04,0x03,0x03,0x02,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x01,
0x01,0x01,0x02,0x02,0x02,0x02,0x02,0x01,0x01,0x01,0x00,0x00,0x03,0x03,0x03,0x03,
0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0C,0x0C,0x0C}; // weak
//char x_BYTE_D4756[] = { '\x01' }; // weak//x_BYTE_D4750[6]
/*char x_BYTE_D475C[16] =//x_BYTE_D4750[0xc]
{
  '\0',
  '\x01',
  '\x01',
  '\x02',
  '\x02',
  '\x03',
  '\x03',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\0'
}; // idb*/
/*char x_BYTE_D476C[16] =//x_BYTE_D4750[0x1c]
{
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0'
}; // idb*/
/*char x_BYTE_D477C[16] =//x_BYTE_D4750[0x2c]
{
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x04',
  '\x05',
  '\x06',
  '\a',
  '\b',
  '\t',
  '\n',
  '\v',
  '\f',
  '\f',
  '\f',
  '\f'
}; // idb*/
char x_BYTE_D478C = 0; // weak
int x_DWORD_D4790 = 20; // weak
int x_DWORD_D4794 = 0; // weak
int x_DWORD_D4798 = 0; // weak
char x_BYTE_D47D8 = 0; // weak
char x_BYTE_D47D9 = 0; // weak
int x_DWORD_D47DC = 1; // weak
Bit8s unk_D47E0[592] = {
0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x03,
0x04,0x04,0x04,0x04,0x05,0x05,0x05,0x05,0x06,0x06,0x06,0x06,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x06,0x00,0x01,0x04,
0x01,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x01,0x01,0x01,
0x06,0x06,0x04,0x04,0x06,0x04,0x06,0x04,0x06,0x04,0x06,0x06,0x04,0x06,0x04,0x04,
0x04,0x04,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x00,0x04,0x00,0x04,
0x01,0x03,0x03,0x03,0x01,0x03,0x01,0x03,0x03,0x01,0x01,0x01,0x01,0x01,0x03,0x03,
0x05,0x01,0x01,0x01,0x01,0x01,0x05,0x05,0x01,0x05,0x01,0x05,0x01,0x05,0x05,0x05,
0x02,0x05,0x02,0x05,0x05,0x02,0x02,0x02,0x02,0x05,0x05,0x05,0x05,0x05,0x02,0x02,
0x04,0x04,0x03,0x03,0x04,0x03,0x03,0x03,0x03,0x04,0x03,0x04,0x03,0x04,0x04,0x04,
0x04,0x05,0x05,0x05,0x05,0x04,0x04,0x04,0x05,0x04,0x05,0x04,0x04,0x04,0x05,0x05,
0x01,0x02,0x01,0x02,0x02,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x01,0x01,0x02,0x02,
0x04,0x01,0x01,0x01,0x01,0x04,0x01,0x04,0x01,0x04,0x04,0x04,0x01,0x01,0x04,0x04,
0x01,0x06,0x01,0x01,0x06,0x06,0x01,0x01,0x06,0x01,0x06,0x01,0x06,0x01,0x06,0x06,
0x06,0x06,0x00,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x06,0x00,0x06,0x00,0x00,
0x02,0x01,0x05,0x01,0x01,0x01,0x05,0x02,0x05,0x01,0x05,0x02,0x02,0x01,0x02,0x05,
0x02,0x02,0x01,0x05,0x05,0x05,0x01,0x02,0x03,0x03,0x04,0x01,0x04,0x03,0x04,0x01,
0x01,0x01,0x04,0x03,0x01,0x04,0x04,0x03,0x03,0x04,0x03,0x01,0x01,0x03,0x01,0x04,
0x01,0x06,0x04,0x06,0x01,0x06,0x01,0x04,0x01,0x06,0x06,0x04,0x01,0x04,0x06,0x04,
0x01,0x06,0x04,0x01,0x01,0x06,0x04,0x04,0x06,0x04,0x00,0x04,0x00,0x04,0x06,0x06,
0x00,0x04,0x00,0x06,0x00,0x00,0x04,0x06,0x00,0x06,0x04,0x04,0x06,0x00,0x06,0x04,
0x06,0x00,0x06,0x01,0x01,0x00,0x06,0x00,0x01,0x06,0x00,0x00,0x01,0x06,0x06,0x00,
0x01,0x06,0x01,0x00,0x01,0x01,0x00,0x06,0x01,0x00,0x04,0x00,0x01,0x04,0x00,0x04,
0x01,0x04,0x00,0x00,0x01,0x01,0x04,0x00,0x04,0x01,0x00,0x04,0x01,0x04,0x01,0x00,
0x01,0x05,0x05,0x04,0x04,0x05,0x04,0x01,0x01,0x01,0x04,0x05,0x01,0x05,0x04,0x05,
0x01,0x04,0x01,0x05,0x01,0x04,0x04,0x05,0x01,0x06,0x00,0x04,0x06,0x01,0x00,0x04,
0x06,0x06,0x05,0x05,0x06,0x05,0x06,0x05,0x06,0x05,0x06,0x06,0x05,0x06,0x05,0x05,
0x06,0x06,0x03,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x06,0x03,0x06,0x03,0x03,
0x01,0x05,0x05,0x06,0x06,0x05,0x06,0x01,0x01,0x01,0x06,0x05,0x01,0x05,0x06,0x05,
0x01,0x06,0x01,0x05,0x01,0x06,0x06,0x05,0x01,0x03,0x03,0x06,0x06,0x03,0x06,0x01,
0x01,0x01,0x06,0x03,0x01,0x03,0x06,0x03,0x01,0x06,0x01,0x03,0x01,0x06,0x06,0x03
}; // weak
Bit8u unk_D4A30[0x120] = {
0x1B,0x00,0x1B,0x50,0x1B,0x30,0x1B,0x60,0x1A,0x00,0x1A,0x50,0x1A,0x30,0x1A,0x60,
0x0A,0x00,0x0A,0x50,0x0A,0x30,0x0A,0x60,0x0A,0x00,0x0A,0x50,0x0A,0x30,0x0A,0x60,
0x0B,0x00,0x0B,0x50,0x0B,0x30,0x0B,0x60,0x0B,0x00,0x0B,0x50,0x0B,0x30,0x0B,0x60,
0x0C,0x00,0x0C,0x50,0x0C,0x30,0x0C,0x60,0x0C,0x00,0x0C,0x50,0x0C,0x30,0x0C,0x60,
0x15,0x00,0x15,0x50,0x15,0x30,0x15,0x60,0x16,0x00,0x16,0x50,0x16,0x30,0x16,0x60,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x50,0x18,0x30,0x18,0x60,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x00,0x17,0x50,0x17,0x30,0x17,0x60,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x00,0x19,0x50,0x19,0x30,0x19,0x60,
0x10,0x00,0x10,0x50,0x10,0x30,0x10,0x60,0x0F,0x00,0x0F,0x50,0x0F,0x30,0x0F,0x60,
0x10,0x00,0x10,0x50,0x10,0x30,0x10,0x60,0x0F,0x00,0x0F,0x50,0x0F,0x30,0x0F,0x60,
0x1E,0x00,0x1E,0x50,0x1E,0x30,0x1D,0x60,0x1F,0x00,0x1D,0x50,0x1D,0x30,0x1D,0x60,
0x1E,0x00,0x1E,0x50,0x1E,0x30,0x1E,0x60,0x1D,0x00,0x1D,0x50,0x1D,0x30,0x1D,0x60,
0x21,0x00,0x21,0x50,0x21,0x30,0x21,0x60,0x22,0x00,0x20,0x50,0x20,0x30,0x20,0x60,
0x21,0x00,0x21,0x50,0x21,0x30,0x21,0x60,0x20,0x00,0x20,0x50,0x20,0x30,0x20,0x60,
0x13,0x00,0x13,0x50,0x13,0x30,0x13,0x60,0x14,0x00,0x12,0x50,0x12,0x30,0x12,0x60,
0x13,0x00,0x13,0x50,0x13,0x30,0x13,0x60,0x12,0x00,0x12,0x50,0x12,0x30,0x12,0x60,
0x13,0x00,0x13,0x50,0x13,0x30,0x13,0x60,0x14,0x00,0x12,0x50,0x12,0x30,0x12,0x60,
0x21,0x00,0x21,0x50,0x21,0x30,0x21,0x60,0x20,0x00,0x20,0x50,0x20,0x30,0x20,0x60}; // weak
//_UNKNOWN unk_D4A40; // &unk_D4A30[0x10]
//_UNKNOWN unk_D4A70; // &unk_D4A30[0x40]
//_UNKNOWN unk_D4A80; // &unk_D4A30[0x50]
//_UNKNOWN unk_D4AB0; // &unk_D4A30[0x80]
char x_BYTE_D4B50 = 0; // weak
char x_BYTE_D4B51 = 0; // weak
char x_BYTE_D4B78 = 0; // weak
char x_BYTE_D4B79 = 0; // weak
char x_BYTE_D4B7A = 0; // weak
int16_t x_WORD_D4B7C = 254; // weak
int16_t x_WORD_D4B7E = 0; // weak
char x_BYTE_D4B80 = 0; // weak
int x_DWORD_D4B84 = 16; // weak
int x_DWORD_D4B88 = 4294967216; // weak
int x_DWORD_D4B8C = 80; // weak
int x_DWORD_D4B90 = 4294967292; // weak
int16_t x_WORD_D4BA4 = 16; // weak
int x_DWORD_D4BA8 = 4294967216; // weak
int x_DWORD_D4BAC = 80; // weak
int16_t x_WORD_D4BB0 = 65532; // weak

Bit8u xx211d50ar[0x5000] = { 
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x04,0x8B,0x5D,0x14,0xF6,0x43,0x10,0x03,
0x0F,0x85,0xE4,0x01,0x00,0x00,0x8B,0x43,0x08,0x8D,0x50,0xFF,0x89,0x53,0x08,0x85,
0xC0,0x7D,0x0B,0x53,0xE8,0x97,0x71,0x02,0x00,0xE9,0xC2,0x01,0x00,0x00,0x8A,0x53,
0x0C,0x8D,0x43,0x4C,0x80,0xE2,0xFE,0x50,0x88,0x53,0x0C,0xE8,0xB0,0xFE,0xFD,0xFF,
0x83,0xC4,0x04,0x8A,0x73,0x0C,0x0F,0xBF,0xF0,0xF6,0xC6,0x02,0x0F,0x85,0x5A,0x01,
0x00,0x00,0x0F,0xBF,0x43,0x4C,0x05,0x80,0x00,0x00,0x00,0xC1,0xF8,0x08,0x88,0x45,
0xFC,0x0F,0xBF,0x43,0x4E,0x05,0x80,0x00,0x00,0x00,0xC1,0xF8,0x08,0x8A,0x4B,0x0E,
0x88,0x45,0xFD,0xF6,0xC1,0x01,0x75,0x12,0x31,0xC0,0x66,0x8B,0x43,0x2A,0x50,0x6A,
0x00,0x53,0xE8,0xA9,0xFE,0xFD,0xFF,0x83,0xC4,0x0C,0x31,0xC0,0x66,0x8B,0x45,0xFC,
0x8A,0xA8,0xE0,0xC4,0x2D,0x00,0x84,0xED,0x0F,0x84,0xBD,0x00,0x00,0x00,0x80,0xFD,
0x1A,0x75,0x16,0x31,0xC0,0x6A,0x14,0x66,0x8B,0x45,0xFC,0x50,0xE8,0xBF,0x4F,0x01,
0x00,0x83,0xC4,0x08,0xE9,0xA2,0x00,0x00,0x00,0x80,0xFD,0x0A,0x75,0x16,0x31,0xC0,
0x6A,0x15,0x66,0x8B,0x45,0xFC,0x50,0xE8,0xA4,0x4F,0x01,0x00,0x83,0xC4,0x08,0xE9,
0x87,0x00,0x00,0x00,0x80,0xFD,0x0B,0x75,0x16,0x31,0xC0,0x6A,0x16,0x66,0x8B,0x45,
0xFC,0x50,0xE8,0x89,0x4F,0x01,0x00,0x83,0xC4,0x08,0xE9,0x6C,0x00,0x00,0x00,0x80,
0xFD,0x06,0x72,0x05,0x80,0xFD,0x22,0x76,0x62,0x31,0xC0,0x66,0x8B,0x45,0xFC,0x8A,
0x80,0xE0,0xC4,0x30,0x00,0x24,0x07,0x3C,0x01,0x74,0x50,0x0F,0xBF,0x43,0x50,0x29,
0xF0,0x3D,0x80,0x00,0x00,0x00,0x7F,0x43,0x8D,0x43,0x4C,0x50,0xE8,0x2F,0xF6,0xFD,
0xFF,0x83,0xC4,0x04,0xA8,0x01,0x75,0x33,0x66,0x69,0x43,0x14,0xA1,0x24,0x05,0xDF,
0x24,0x00,0x00,0xB9,0x07,0x00,0x00,0x00,0x66,0x89,0x43,0x14,0x31,0xC0,0x31,0xD2,
0x66,0x8B,0x43,0x14,0xF7,0xF1,0x89,0xD0,0xF7,0xD8,0x6A,0x01,0x98,0x50,0x6A,0x00,
0x6A,0x00,0x53,0xE8,0x18,0x64,0x02,0x00,0x83,0xC4,0x14,0x66,0x69,0x43,0x14,0xA1,
0x24,0x80,0x4B,0x0C,0x02,0x05,0xDF,0x24,0x00,0x00,0x31,0xD2,0x66,0x89,0x43,0x14,
0x31,0xC0,0xB9,0x41,0x00,0x00,0x00,0x66,0x8B,0x43,0x14,0xF7,0xF1,0xA1,0xA0,0x51,
0x2A,0x00,0x83,0xEA,0x20,0x05,0x8E,0x6E,0x00,0x00,0x66,0x89,0x53,0x2C,0x89,0xDA,
0x29,0xC2,0xB9,0xA8,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xF9,0x6A,0x03,
0x6A,0xFF,0x98,0x50,0xE8,0x57,0xD5,0x03,0x00,0x83,0xC4,0x0C,0x0F,0xBF,0x43,0x2C,
0x50,0x6A,0x00,0x6A,0x00,0x56,0x8D,0x73,0x4C,0x56,0xE8,0xD1,0x71,0x02,0x00,0x8A,
0x0D,0xB6,0x51,0x2A,0x00,0x83,0xC4,0x14,0x84,0xC9,0x74,0x1E,0x56,0x0F,0xBF,0x7B,
0x58,0xE8,0x3A,0xFD,0xFD,0xFF,0x0F,0xBF,0xF0,0x0F,0xBF,0x43,0x50,0x29,0xFE,0x83,
0xC4,0x04,0x39,0xF0,0x7E,0x04,0x66,0x89,0x73,0x50,0x53,0xE8,0x60,0x76,0x02,0x00,
0x83,0xC4,0x04,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0xFF,0x4B,0x10,0x89,0xEC,0x5D,
0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x10,0x8B,0x5D,0x14,0x8B,0x43,0x08,0x8D,
0x50,0xFF,0x89,0x53,0x08,0x85,0xC0,0x7D,0x0B,0x53,0xE8,0x91,0x6F,0x02,0x00,0xE9,
0x6B,0x01,0x00,0x00,0x8A,0x63,0x0C,0xF6,0xC4,0x02,0x75,0x30,0x88,0xE2,0xA1,0xA0,
0x51,0x2A,0x00,0x80,0xCA,0x02,0x05,0x8E,0x6E,0x00,0x00,0x88,0x53,0x0C,0x89,0xDA,
0x29,0xC2,0xB9,0xA8,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xF9,0x6A,0x03,
0x6A,0xFF,0x98,0x50,0xE8,0x97,0xD4,0x03,0x00,0x83,0xC4,0x0C,0x8B,0x53,0x10,0x52,
0x52,0xE8,0xBA,0xF0,0xFD,0xFF,0x83,0xC4,0x08,0x89,0xC6,0x85,0xC0,0x0F,0x84,0x1F,
0x01,0x00,0x00,0xE9,0xF7,0x00,0x00,0x00,0x66,0x69,0x43,0x14,0xA1,0x24,0x05,0xDF,
0x24,0x00,0x00,0xB9,0x9D,0x00,0x00,0x00,0x66,0x89,0x43,0x14,0x31,0xC0,0x31,0xD2,
0x66,0x8B,0x43,0x14,0xF7,0xF1,0xB9,0x4F,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,
0xF7,0xF9,0x01,0xC0,0x48,0x85,0xC0,0x0F,0x8E,0xC2,0x00,0x00,0x00,0x66,0x69,0x43,
0x14,0xA1,0x24,0x05,0xDF,0x24,0x00,0x00,0x31,0xD2,0x66,0x89,0x43,0x14,0x31,0xC0,
0xB9,0x81,0x00,0x00,0x00,0x66,0x8B,0x43,0x14,0xF7,0xF1,0x89,0xD1,0x8B,0x55,0xFC,
0x8D,0x04,0x95,0x00,0x00,0x00,0x00,0x0F,0xBF,0x7B,0x4C,0x29,0xD0,0x83,0xEF,0x60,
0xC1,0xE0,0x06,0x01,0xF8,0x01,0xC1,0x83,0xE9,0x40,0x66,0x89,0x4D,0xF0,0x66,0x69,
0x43,0x14,0xA1,0x24,0x05,0xDF,0x24,0x00,0x00,0x31,0xD2,0x66,0x89,0x43,0x14,0x31,
0xC0,0xB9,0x81,0x00,0x00,0x00,0x66,0x8B,0x43,0x14,0xF7,0xF1,0x89,0xD1,0x8B,0x55,
0xF8,0x8D,0x04,0x95,0x00,0x00,0x00,0x00,0x29,0xD0,0x0F,0xBF,0x7B,0x4E,0xC1,0xE0,
0x06,0x8D,0x57,0xA0,0x01,0xD0,0x01,0xC1,0x83,0xE9,0x40,0x66,0x89,0x4D,0xF2,0x6A,
0x00,0x66,0x8B,0x43,0x50,0x6A,0x0A,0x66,0x89,0x45,0xF4,0x8D,0x45,0xF0,0x50,0xE8,
0xEC,0x90,0x01,0x00,0x83,0xC4,0x0C,0x85,0xC0,0x74,0x24,0x66,0x8B,0x53,0x1A,0x66,
0x89,0x50,0x1A,0x66,0x8B,0x53,0x1C,0x66,0x89,0x50,0x1C,0x8B,0x53,0x0C,0x81,0xE2,
0x00,0x00,0x01,0x00,0x8B,0x78,0x0C,0x80,0xCA,0x80,0x09,0xD7,0x89,0x78,0x0C,0x8D,
0x45,0xF8,0x50,0x8D,0x45,0xFC,0x50,0x56,0xE8,0x53,0xF0,0xFD,0xFF,0x83,0xC4,0x0C,
0x83,0xF8,0x01,0x0F,0x84,0xEF,0xFE,0xFF,0xFF,0x56,0xE8,0x11,0xF0,0xFD,0xFF,0x83,
0xC4,0x04,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x90,
0x53,0x55,0x89,0xE5,0x8B,0x55,0x0C,0x8B,0x42,0x08,0x8D,0x58,0xFF,0x89,0x5A,0x08,
0x85,0xC0,0x7D,0x09,0x52,0xE8,0xF6,0x6D,0x02,0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,
0x53,0x56,0x55,0x89,0xE5,0x83,0xEC,0x04,0x8B,0x5D,0x10,0x8D,0x73,0x4C,0x30,0xE4,
0x56,0x88,0x65,0xFC,0xE8,0x07,0xFB,0xFD,0xFF,0x66,0x8B,0x53,0x50,0x83,0xC4,0x04,
0x66,0x39,0xD0,0x0F,0x85,0x7A,0x00,0x00,0x00,0x8B,0x43,0x04,0x8B,0x53,0x08,0x83,
0xE8,0x05,0x39,0xD0,0x75,0x55,0x6A,0x57,0x6A,0x0A,0x56,0xE8,0x30,0x90,0x01,0x00,
0x8B,0x15,0xA0,0x51,0x2A,0x00,0x69,0x42,0x08,0xA1,0x24,0x00,0x00,0x05,0xDF,0x24,
0x00,0x00,0x83,0xC4,0x0C,0x89,0x42,0x08,0x83,0xE0,0x01,0x75,0x2E,0x66,0x8B,0x43,
0x5A,0x81,0xE8,0x1A,0x01,0x00,0x00,0x98,0x81,0xC2,0x8E,0x6E,0x00,0x00,0x50,0x89,
0xD8,0x29,0xD0,0x89,0xC2,0xBE,0xA8,0x00,0x00,0x00,0xC1,0xFA,0x1F,0xF7,0xFE,0x6A,
0xFF,0x98,0x50,0xE8,0xA8,0xD2,0x03,0x00,0x83,0xC4,0x0C,0x8B,0x43,0x08,0x8D,0x50,
0xFF,0x89,0x53,0x08,0x85,0xC0,0x7C,0x0B,0x53,0xE8,0xE2,0x73,0x02,0x00,0x83,0xC4,
0x04,0xEB,0x04,0xC6,0x45,0xFC,0x01,0x80,0x7D,0xFC,0x00,0x74,0x09,0x53,0xE8,0x3D,
0x6D,0x02,0x00,0x83,0xC4,0x04,0x89,0xEC,0x5D,0x5E,0x5B,0xC3,0x8D,0x44,0x20,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x50,0x8B,0x5D,0x14,0x8B,0x43,0x04,0x83,
0xF8,0x01,0x72,0x1B,0x76,0x07,0x83,0xF8,0x02,0x74,0x0B,0xEB,0x12,0xC7,0x45,0xDC,
0x05,0x00,0x00,0x00,0xEB,0x10,0xC7,0x45,0xDC,0x07,0x00,0x00,0x00,0xEB,0x07,0xC7,
0x45,0xDC,0x03,0x00,0x00,0x00,0x8B,0x45,0xDC,0x83,0xC0,0x0C,0x89,0x45,0xD0,0x8A,
0x43,0x46,0x3C,0x02,0x72,0x13,0x0F,0x86,0x8B,0x00,0x00,0x00,0x3C,0x03,0x0F,0x84,
0xF6,0x04,0x00,0x00,0xE9,0xFA,0x04,0x00,0x00,0x84,0xC0,0x0F,0x85,0xF2,0x04,0x00,
0x00,0x0F,0xBF,0x43,0x4E,0x0F,0xBF,0x53,0x4C,0x05,0x80,0x00,0x00,0x00,0x81,0xC2,
0x80,0x00,0x00,0x00,0xC1,0xF8,0x08,0xC1,0xFA,0x08,0x8A,0x65,0xD0,0x28,0xE2,0x28,
0xE0,0x88,0x45,0xF9,0x8B,0x45,0xD0,0x01,0xC0,0x50,0x50,0x0F,0xB6,0x7D,0xF9,0x57,
0x0F,0xB6,0xF2,0x56,0x88,0x55,0xF8,0xE8,0x74,0x7C,0x01,0x00,0x66,0x89,0x43,0x50,
0x8B,0x45,0xD0,0x83,0xC4,0x10,0x01,0xC0,0x25,0xFF,0xFF,0x00,0x00,0x50,0x50,0x57,
0x56,0xE8,0xCA,0x7B,0x01,0x00,0xC7,0x43,0x08,0x28,0x00,0x00,0x00,0x66,0xC7,0x43,
0x2C,0xE3,0x00,0x66,0xC7,0x43,0x36,0x00,0x00,0xC6,0x43,0x46,0x02,0x83,0xC4,0x10,
0x66,0x89,0x83,0x9E,0x00,0x00,0x00,0x0F,0xBF,0x43,0x50,0x89,0x45,0xC0,0x0F,0xBF,
0x83,0x9E,0x00,0x00,0x00,0x89,0x45,0xE8,0x8B,0x45,0xC0,0x8B,0x7D,0xE8,0x31,0xC9,
0x29,0xF8,0x89,0x4D,0xC4,0x89,0x45,0xF0,0x89,0x4D,0xCC,0x8B,0x55,0xF0,0xD1,0xF8,
0x0F,0xBF,0x7B,0x2C,0x01,0xC2,0x8B,0x45,0xDC,0x89,0x55,0xF0,0x89,0x45,0xD8,0xE9,
0x3D,0x03,0x00,0x00,0x8B,0x45,0xCC,0x2D,0x00,0x04,0x00,0x00,0x89,0x45,0xEC,0x85,
0xC0,0x7D,0x05,0x31,0xD2,0x89,0x55,0xEC,0x8B,0x45,0xD0,0x8B,0x4D,0xEC,0xC1,0xE0,
0x08,0x39,0xC8,0x7D,0x03,0x89,0x45,0xEC,0x8B,0x45,0xD8,0xC1,0xE0,0x08,0x89,0x45,
0xCC,0x8B,0x45,0xD8,0x01,0xC0,0x89,0x45,0xE4,0x85,0xFF,0x0F,0x8E,0xED,0x02,0x00,
0x00,0x81,0xFF,0x00,0x02,0x00,0x00,0x0F,0x8F,0xE1,0x02,0x00,0x00,0x0F,0xBF,0x53,
0x4C,0x81,0xC2,0x80,0x00,0x00,0x00,0x0F,0xBF,0x43,0x4E,0xC1,0xFA,0x08,0x05,0x80,
0x00,0x00,0x00,0x8A,0x75,0xD8,0xC1,0xF8,0x08,0x28,0xF2,0x28,0xF0,0x88,0x55,0xF8,
0x88,0x45,0xF9,0x31,0xF6,0x8B,0x45,0xF8,0x89,0x75,0xC8,0x66,0x89,0x45,0xFC,0xE9,
0x9E,0x02,0x00,0x00,0x31,0xC0,0x89,0x45,0xE0,0x8A,0x45,0xF8,0xE9,0x73,0x02,0x00,
0x00,0x31,0xC0,0x8A,0x45,0xFC,0xC1,0xE0,0x08,0x66,0x89,0x45,0xB0,0x31,0xC0,0x8A,
0x45,0xFD,0xC1,0xE0,0x08,0x66,0x89,0x45,0xB2,0x8D,0x45,0xB0,0x50,0x8D,0x43,0x4C,
0x50,0xE8,0xEA,0x70,0x02,0x00,0x8B,0x55,0xCC,0x83,0xC4,0x08,0x39,0xD0,0x0F,0x8D,
0x00,0x02,0x00,0x00,0x3B,0x45,0xEC,0x0F,0x8C,0xF7,0x01,0x00,0x00,0xC1,0xE0,0x0A,
0x89,0xC2,0x8B,0x75,0xCC,0xC1,0xFA,0x1F,0xF7,0xFE,0x8B,0x34,0x85,0x50,0xCF,0x2A,
0x00,0x81,0xC6,0x00,0x00,0x01,0x00,0x8B,0x55,0xF0,0xD1,0xFE,0x0F,0xAF,0xF2,0x8B,
0x0C,0xBD,0x50,0xCF,0x2A,0x00,0xB8,0x00,0x00,0x01,0x00,0x29,0xC8,0xC1,0xFE,0x10,
0x0F,0xAF,0xC6,0x8B,0x55,0xE8,0x89,0xC6,0xC1,0xF8,0x12,0x01,0xC2,0x31,0xC0,0x66,
0x8B,0x45,0xFC,0xC1,0xFE,0x10,0x89,0x55,0xF4,0x8A,0x80,0xE0,0xC4,0x2E,0x00,0x25,
0xFF,0x00,0x00,0x00,0x39,0xD0,0x7D,0x1F,0x6A,0x01,0x6A,0x01,0x6A,0x00,0x0F,0xBF,
0x45,0xF4,0x50,0x31,0xC0,0x8A,0x45,0xFD,0x50,0x31,0xC0,0x8A,0x45,0xFC,0x50,0xE8,
0xBC,0x5C,0x02,0x00,0x83,0xC4,0x18,0x31,0xC0,0x66,0x8B,0x45,0xFC,0x8A,0x80,0xE0,
0xC4,0x31,0x00,0x8B,0x55,0xC0,0x29,0xF2,0x25,0xFF,0x00,0x00,0x00,0x89,0x55,0xF4,
0x85,0xD2,0x7D,0x05,0x31,0xF6,0x89,0x75,0xF4,0x3B,0x45,0xF4,0x7E,0x0F,0x31,0xC0,
0x66,0x8B,0x45,0xFC,0x8A,0x55,0xF4,0x88,0x90,0xE0,0xC4,0x31,0x00,0x8B,0x35,0xA4,
0x51,0x2A,0x00,0x8B,0xB6,0x77,0x96,0x00,0x00,0xE9,0x2A,0x01,0x00,0x00,0x80,0x7E,
0x40,0x00,0x0F,0x85,0x1E,0x01,0x00,0x00,0x0F,0xBF,0x55,0xB0,0x0F,0xBF,0x46,0x4C,
0x29,0xC2,0x89,0xD0,0x99,0x31,0xD0,0x29,0xD0,0x89,0xC1,0x3D,0x00,0x80,0x00,0x00,
0x7C,0x0C,0x2D,0x00,0x00,0x01,0x00,0x99,0x31,0xD0,0x29,0xD0,0x89,0xC1,0x0F,0xBF,
0x55,0xB2,0x0F,0xBF,0x46,0x4E,0x29,0xC2,0x89,0xD0,0x99,0x31,0xD0,0x29,0xD0,0x89,
0xC2,0x3D,0x00,0x80,0x00,0x00,0x7C,0x0C,0x2D,0x00,0x00,0x01,0x00,0x99,0x31,0xD0,
0x29,0xD0,0x89,0xC2,0x0F,0xAF,0xC9,0x0F,0xAF,0xD2,0x8D,0x04,0x11,0x3D,0x00,0x40,
0x06,0x00,0x0F,0x8F,0xBE,0x00,0x00,0x00,0xB8,0x00,0x40,0x06,0x00,0x29,0xC8,0x89,
0xC1,0x29,0xD1,0x51,0xE8,0x81,0x12,0x04,0x00,0xC1,0xE8,0x05,0x89,0x45,0xBC,0x0F,
0xBF,0x46,0x50,0xC1,0xF8,0x05,0x8B,0x55,0xBC,0x89,0x45,0xB8,0x29,0xD0,0x83,0xC4,
0x04,0x89,0x45,0xF4,0x85,0xC0,0x7D,0x05,0x31,0xC0,0x89,0x45,0xF4,0x81,0x7D,0xF4,
0xFE,0x00,0x00,0x00,0x7E,0x07,0xC7,0x45,0xF4,0xFE,0x00,0x00,0x00,0x31,0xC0,0x66,
0x8B,0x45,0xFC,0x8A,0x80,0xE0,0xC4,0x2E,0x00,0x8B,0x55,0xF4,0x25,0xFF,0x00,0x00,
0x00,0x39,0xD0,0x7E,0x1F,0x6A,0x01,0x6A,0x00,0x6A,0x00,0x0F,0xBF,0x45,0xF4,0x50,
0x31,0xC0,0x8A,0x45,0xFD,0x50,0x31,0xC0,0x8A,0x45,0xFC,0x50,0xE8,0x8F,0x5B,0x02,
0x00,0x83,0xC4,0x18,0x8B,0x45,0xB8,0x8B,0x4D,0xBC,0x01,0xC8,0x89,0x45,0xF4,0x85,
0xC0,0x7D,0x05,0x31,0xD2,0x89,0x55,0xF4,0x81,0x7D,0xF4,0xFE,0x00,0x00,0x00,0x7E,
0x07,0xC7,0x45,0xF4,0xFE,0x00,0x00,0x00,0x31,0xC0,0x66,0x8B,0x45,0xFC,0x31,0xD2,
0x8B,0x4D,0xF4,0x8A,0x90,0xE0,0xC4,0x31,0x00,0x39,0xCA,0x7D,0x09,0x8A,0x55,0xF4,
0x88,0x90,0xE0,0xC4,0x31,0x00,0x8B,0x36,0x3B,0x35,0xE4,0xB3,0x2B,0x00,0x0F,0x87,
0xCA,0xFE,0xFF,0xFF,0x31,0xC0,0x66,0x8B,0x45,0xFC,0x8A,0x90,0xE0,0xC4,0x31,0x00,
0x8A,0xB0,0xE0,0xC4,0x2E,0x00,0x38,0xF2,0x77,0x17,0x8A,0x88,0xE0,0xC4,0x30,0x00,
0x80,0xC9,0x08,0x88,0xB0,0xE0,0xC4,0x31,0x00,0x88,0x88,0xE0,0xC4,0x30,0x00,0xEB,
0x07,0x80,0xA0,0xE0,0xC4,0x30,0x00,0xF7,0x8B,0x55,0xE0,0x8A,0x45,0xFC,0x42,0xFE,
0xC0,0x89,0x55,0xE0,0x88,0x45,0xFC,0x8B,0x45,0xE0,0x3B,0x45,0xE4,0x0F,0x8C,0x7E,
0xFD,0xFF,0xFF,0x8B,0x75,0xC8,0x8A,0x65,0xFD,0x46,0xFE,0xC4,0x89,0x75,0xC8,0x88,
0x65,0xFD,0x8B,0x45,0xC8,0x3B,0x45,0xE4,0x0F,0x8C,0x56,0xFD,0xFF,0xFF,0x8B,0x4D,
0xC4,0x8B,0x75,0xD8,0x83,0xEF,0x44,0x41,0x83,0xC6,0x02,0x89,0x4D,0xC4,0x89,0x75,
0xD8,0x83,0x7D,0xC4,0x06,0x0F,0x8C,0xB9,0xFC,0xFF,0xFF,0x66,0x83,0x7B,0x36,0x00,
0x0F,0x85,0xBE,0x00,0x00,0x00,0x66,0x81,0x7B,0x2C,0xC7,0x01,0x0F,0x8E,0xB2,0x00,
0x00,0x00,0x31,0xD2,0x66,0xC7,0x43,0x36,0x01,0x00,0x89,0x55,0xD4,0xE9,0x95,0x00,
0x00,0x00,0x8B,0x45,0xDC,0xBF,0x98,0xC3,0x2B,0x00,0xC1,0xE0,0x08,0x8D,0x73,0x4C,
0x2D,0x00,0x03,0x00,0x00,0xA5,0x66,0xA5,0x3D,0x00,0x01,0x00,0x00,0x7D,0x05,0xB8,
0x00,0x01,0x00,0x00,0x3D,0x00,0x20,0x00,0x00,0x7E,0x05,0xB8,0x00,0x20,0x00,0x00,
0x98,0x50,0x31,0xC0,0x6A,0x00,0x66,0x8B,0x45,0xD4,0x50,0x68,0x98,0xC3,0x2B,0x00,
0xE8,0xFB,0x68,0x02,0x00,0x83,0xC4,0x10,0x6A,0x0D,0x6A,0x0A,0x68,0x98,0xC3,0x2B,
0x00,0xE8,0xDA,0x8A,0x01,0x00,0x83,0xC4,0x0C,0x85,0xC0,0x74,0x36,0x8B,0x55,0xD4,
0x66,0x89,0x50,0x1C,0x31,0xD2,0x66,0x8B,0x55,0xFC,0x66,0xC7,0x80,0x86,0x00,0x00,
0x00,0x00,0x02,0x8A,0x92,0xE0,0xC4,0x2E,0x00,0x30,0xF6,0x68,0x98,0xC3,0x2B,0x00,
0xC1,0xE2,0x05,0x50,0x66,0x89,0x15,0x9C,0xC3,0x2B,0x00,0xE8,0x00,0x66,0x02,0x00,
0x83,0xC4,0x08,0x83,0x45,0xD4,0x1C,0x81,0x7D,0xD4,0x00,0x08,0x00,0x00,0x0F,0x8C,
0x5E,0xFF,0xFF,0xFF,0x8B,0x7B,0x08,0x66,0x8B,0x73,0x2C,0x83,0xC7,0x04,0x83,0xC6,
0x16,0x89,0x7B,0x08,0x66,0x89,0x73,0x2C,0x66,0x81,0xFE,0x00,0x04,0x7E,0x14,0xC6,
0x43,0x46,0x03,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x53,0xE8,0xE0,0x67,0x02,0x00,
0x83,0xC4,0x04,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,
0x55,0x89,0xE5,0x5D,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x55,0x89,0xE5,0x5D,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x53,0x56,0x57,0x55,0x89,0xE5,0x8B,0x5D,0x14,0x8B,0x43,0x08,0x8D,0x50,0xFF,0x89,
0x53,0x08,0x85,0xC0,0x0F,0x8C,0xC9,0x00,0x00,0x00,0x53,0xE8,0xF0,0xB0,0x02,0x00,
0x8B,0x53,0x08,0x83,0xC4,0x04,0x83,0xFA,0x0C,0x7C,0x1F,0x83,0x7B,0x10,0x06,0x0F,
0x8F,0x8A,0x00,0x00,0x00,0x66,0x8B,0x53,0x5A,0x8B,0x73,0x10,0x42,0x46,0x66,0x89,
0x53,0x5A,0x89,0x73,0x10,0xE9,0x75,0x00,0x00,0x00,0x83,0x7B,0x10,0x00,0x7E,0x6F,
0x8B,0x43,0x10,0x48,0x66,0x8B,0x4B,0x5A,0x89,0x43,0x10,0x49,0x8A,0x63,0x0C,0x66,
0x89,0x4B,0x5A,0xF6,0xC4,0x80,0x75,0x57,0x66,0x69,0x43,0x14,0xA1,0x24,0x05,0xDF,
0x24,0x00,0x00,0x31,0xD2,0x66,0x89,0x43,0x14,0x31,0xC0,0xBE,0x07,0x00,0x00,0x00,
0x66,0x8B,0x43,0x14,0xF7,0xF6,0x85,0xD2,0x75,0x35,0x6A,0x0E,0x6A,0x0A,0x8D,0x43,
0x4C,0x50,0xE8,0x99,0x89,0x01,0x00,0x83,0xC4,0x0C,0x85,0xC0,0x74,0x21,0x66,0x8B,
0x53,0x1A,0xC7,0x40,0x10,0x64,0x00,0x00,0x00,0x66,0x8B,0x78,0x5A,0xC7,0x40,0x08,
0x0F,0x00,0x00,0x00,0x83,0xC7,0x02,0x66,0x89,0x50,0x1A,0x66,0x89,0x78,0x5A,0x8D,
0x73,0x4C,0x56,0xE8,0x18,0xF4,0xFD,0xFF,0x66,0x8B,0x53,0x2C,0x83,0xC4,0x04,0x01,
0xD0,0x56,0x66,0x89,0x43,0x50,0xE8,0x95,0xEC,0xFD,0xFF,0x83,0xC4,0x04,0x83,0xF8,
0x01,0x75,0x09,0x53,0xE8,0xC7,0x66,0x02,0x00,0x83,0xC4,0x04,0xF6,0x43,0x0E,0x01,
0x75,0x12,0x31,0xC0,0x66,0x8B,0x43,0x2A,0x50,0x6A,0x00,0x53,0xE8,0x9F,0xFB,0xFD,
0xFF,0x83,0xC4,0x0C,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x90,
0x55,0x89,0xE5,0x8B,0x55,0x08,0x52,0xE8,0x94,0x66,0x02,0x00,0x83,0xC4,0x04,0x5D,
0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8D,0x40,0x00,
0x53,0x55,0x89,0xE5,0x8B,0x55,0x0C,0x8B,0x42,0x08,0x8D,0x58,0xFF,0x89,0x5A,0x08,
0x85,0xC0,0x7D,0x09,0x52,0xE8,0x66,0x66,0x02,0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,
0x53,0x55,0x89,0xE5,0x8B,0x5D,0x0C,0x8B,0x53,0x08,0x8D,0x42,0xFF,0x89,0x43,0x08,
0x85,0xD2,0x7D,0x0C,0x53,0xE8,0x46,0x66,0x02,0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,
0x53,0xE8,0xCA,0x6C,0x02,0x00,0x8A,0x63,0x0C,0x83,0xC4,0x04,0xF6,0xC4,0x02,0x75,
0x30,0x88,0xE2,0xA1,0xA0,0x51,0x2A,0x00,0x80,0xCA,0x02,0x05,0x8E,0x6E,0x00,0x00,
0x88,0x53,0x0C,0x89,0xDA,0x29,0xC2,0xBB,0xA8,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,
0x1F,0xF7,0xFB,0x6A,0x1B,0x6A,0xFF,0x98,0x50,0xE8,0x42,0xCB,0x03,0x00,0x83,0xC4,
0x0C,0x5D,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,
0x55,0x89,0xE5,0x8B,0x55,0x08,0x52,0xE8,0xE4,0x65,0x02,0x00,0x83,0xC4,0x04,0x5D,
0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8D,0x40,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x3C,0x8B,0x45,0x14,0x0F,0xBF,0x40,0x4C,
0x05,0x80,0x00,0x00,0x00,0xC1,0xF8,0x08,0x88,0x45,0xFC,0x8B,0x45,0x14,0x0F,0xBF,
0x40,0x4E,0x05,0x80,0x00,0x00,0x00,0xC1,0xF8,0x08,0x88,0x45,0xFD,0x8B,0x45,0x14,
0x31,0xD2,0x8A,0x40,0x46,0x89,0x55,0xE4,0x3C,0x01,0x72,0x13,0x0F,0x86,0xA6,0x00,
0x00,0x00,0x3C,0x02,0x0F,0x84,0xFD,0x03,0x00,0x00,0xE9,0xDE,0x04,0x00,0x00,0x84,
0xC0,0x0F,0x85,0xD6,0x04,0x00,0x00,0x8B,0x5D,0x14,0x8B,0x5B,0x04,0x80,0xCB,0x01,
0x8D,0x34,0x5D,0x00,0x00,0x00,0x00,0x89,0xD8,0x68,0x00,0x40,0x00,0x00,0xC1,0xE0,
0x08,0x50,0x8B,0x4D,0x14,0x51,0xE8,0xE5,0x84,0x01,0x00,0x8A,0x45,0xFC,0x28,0xD8,
0x88,0x45,0xF8,0x8A,0x45,0xFD,0x28,0xD8,0x88,0x45,0xF9,0x31,0xC0,0x83,0xC4,0x0C,
0x66,0x89,0xF0,0x50,0x50,0x31,0xC0,0x8A,0x45,0xF9,0x50,0x31,0xC0,0x8A,0x45,0xF8,
0x50,0x01,0xDB,0xE8,0x78,0x74,0x01,0x00,0x8B,0x55,0x14,0x83,0xC3,0x64,0x66,0x89,
0x42,0x50,0x66,0x89,0x5A,0x2C,0x89,0xD0,0x0F,0xBF,0x52,0x50,0x0F,0xBF,0x40,0x2C,
0x01,0xD0,0x83,0xC4,0x10,0x3D,0xFF,0x00,0x00,0x00,0x7E,0x15,0x8B,0x45,0x14,0xBA,
0xFF,0x00,0x00,0x00,0x66,0x8B,0x40,0x50,0x29,0xC2,0x8B,0x45,0x14,0x66,0x89,0x50,
0x2C,0x8B,0x45,0x14,0xC6,0x40,0x46,0x01,0x8B,0x45,0x14,0x8B,0x70,0x08,0x4E,0x89,
0x70,0x08,0x85,0xF6,0x0F,0x8E,0x42,0x03,0x00,0x00,0x0F,0xBF,0x78,0x54,0x89,0xF8,
0x89,0xFE,0xC1,0xF8,0x08,0x89,0xFB,0x8D,0x50,0xF9,0xC1,0xFE,0x07,0xD1,0xFA,0x8A,
0x65,0xFC,0xC1,0xE2,0x08,0x28,0xC4,0x81,0xC2,0x00,0x02,0x00,0x00,0x88,0x65,0xF8,
0x8A,0x65,0xFD,0x29,0xD3,0x28,0xC4,0x89,0x5D,0xD0,0x88,0x65,0xF9,0x31,0xC0,0x8B,
0x5D,0xF8,0xE9,0x7A,0x01,0x00,0x00,0x31,0xD2,0x8A,0x5D,0xF8,0xE9,0x5E,0x01,0x00,
0x00,0x31,0xC0,0x88,0xD8,0xC1,0xE0,0x08,0x66,0x89,0x45,0xC4,0x31,0xC0,0x88,0xF8,
0xC1,0xE0,0x08,0x66,0x89,0x45,0xC6,0x8D,0x45,0xC4,0x50,0x8B,0x45,0x14,0x83,0xC0,
0x4C,0x50,0xE8,0xE9,0x69,0x02,0x00,0x83,0xC4,0x08,0x89,0x45,0xCC,0x39,0xF8,0x0F,
0x8D,0xF8,0x00,0x00,0x00,0xC1,0xE0,0x0A,0x89,0xC2,0xC1,0xFA,0x1F,0xF7,0xFF,0x8B,
0x04,0x85,0x50,0xCF,0x2A,0x00,0x8B,0x55,0x14,0x05,0x00,0x00,0x01,0x00,0x0F,0xBF,
0x52,0x2C,0xD1,0xF8,0x0F,0xAF,0xC2,0x8B,0x55,0x14,0x0F,0xBF,0x52,0x50,0xC1,0xF8,
0x10,0x01,0xC2,0x31,0xC0,0x66,0x89,0xD8,0x89,0x55,0xF4,0x8A,0x80,0xE0,0xC4,0x2E,
0x00,0x25,0xFF,0x00,0x00,0x00,0x89,0x45,0xF0,0x89,0xD0,0x8B,0x55,0xF0,0x39,0xD0,
0x7E,0x12,0x29,0xD0,0x89,0xC2,0x8B,0x4D,0x14,0xC1,0xFA,0x1F,0xF7,0x79,0x08,0x8B,
0x55,0xF0,0x01,0xC2,0x89,0x55,0xF4,0x8B,0x45,0xCC,0x8B,0x55,0xD0,0x6A,0x01,0x39,
0xD0,0x0F,0x9E,0xC0,0x25,0xFF,0x00,0x00,0x00,0x25,0xFF,0x00,0x00,0x00,0x50,0x6A,
0x00,0x0F,0xBF,0x45,0xF4,0x50,0x31,0xC0,0x88,0xF8,0x50,0x31,0xC0,0x88,0xD8,0x50,
0xE8,0xAB,0x55,0x02,0x00,0x8A,0x25,0xB6,0x51,0x2A,0x00,0x83,0xC4,0x18,0x84,0xE4,
0x74,0x5B,0x8B,0x4D,0xF4,0x83,0xC1,0x40,0x89,0x4D,0xF4,0x81,0xF9,0xFE,0x00,0x00,
0x00,0x7E,0x07,0xC7,0x45,0xF4,0xFE,0x00,0x00,0x00,0x31,0xC0,0x66,0x89,0xD8,0x89,
0x45,0xDC,0x8B,0x55,0xDC,0x31,0xC0,0x8A,0x82,0xE0,0xC4,0x31,0x00,0x89,0x45,0xE0,
0x8B,0x45,0xF4,0x8B,0x4D,0xE0,0x39,0xC8,0x7E,0x23,0x89,0xCA,0x29,0xC2,0x8B,0x4D,
0x14,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0x79,0x08,0x8B,0x55,0xE0,0x29,0xC2,0x89,0x55,
0xF4,0x8B,0x55,0xDC,0x8A,0x45,0xF4,0x88,0x82,0xE0,0xC4,0x31,0x00,0x80,0x3D,0xB6,
0x51,0x2A,0x00,0x00,0x74,0x23,0x31,0xC0,0x66,0x89,0xD8,0x8A,0x90,0xE0,0xC4,0x31,
0x00,0x3A,0x90,0xE0,0xC4,0x2E,0x00,0x77,0x09,0x80,0x88,0xE0,0xC4,0x30,0x00,0x08,
0xEB,0x07,0x80,0xA0,0xE0,0xC4,0x30,0x00,0xF7,0x8B,0x55,0xE8,0x42,0xFE,0xC3,0x89,
0x55,0xE8,0x3B,0x75,0xE8,0x0F,0x8F,0x96,0xFE,0xFF,0xFF,0x8B,0x45,0xEC,0x40,0xFE,
0xC7,0x89,0x45,0xEC,0x3B,0x75,0xEC,0x0F,0x8F,0x7A,0xFE,0xFF,0xFF,0xA1,0xA0,0x51,
0x2A,0x00,0x80,0xB8,0x03,0x6E,0x03,0x00,0x00,0x75,0x19,0x8B,0x55,0x14,0x31,0xC0,
0x66,0x8B,0x42,0x2A,0x50,0x6A,0x00,0x52,0xE8,0x83,0xFA,0xFD,0xFF,0x98,0x83,0xC4,
0x0C,0x89,0x45,0xE4,0x8B,0x4D,0xE4,0x85,0xC9,0x74,0x13,0x51,0x8B,0x45,0x14,0x6A,
0x12,0x0F,0xBF,0x40,0x1A,0x50,0xE8,0x75,0xBC,0x03,0x00,0x83,0xC4,0x0C,0xA1,0xA0,
0x51,0x2A,0x00,0x8B,0x55,0x14,0x05,0x8E,0x6E,0x00,0x00,0x29,0xC2,0xBB,0xA8,0x00,
0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xFB,0x6A,0x0A,0x6A,0xFF,0x98,0x50,0xE8,
0xEC,0xC7,0x03,0x00,0xA1,0xA0,0x51,0x2A,0x00,0x8A,0xB0,0x03,0x6E,0x03,0x00,0x83,
0xC4,0x0C,0x84,0xF6,0x74,0x2A,0x8B,0x55,0x14,0xF6,0x42,0x3E,0x03,0x75,0x21,0x05,
0x8E,0x6E,0x00,0x00,0x29,0xC2,0xBB,0xA8,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,
0xF7,0xFB,0x6A,0x3F,0x6A,0xFF,0x98,0x50,0xE8,0xB3,0xC7,0x03,0x00,0x83,0xC4,0x0C,
0x8B,0x45,0x14,0x83,0x78,0x08,0x03,0x0F,0x85,0xC0,0x01,0x00,0x00,0x0F,0xBF,0x50,
0x50,0x0F,0xBF,0x40,0x2C,0x8B,0x5D,0xFC,0x01,0xD0,0xFE,0xCF,0x83,0xE8,0x18,0x31,
0xD2,0x89,0x45,0xF4,0xEB,0x52,0x8A,0x5D,0xFC,0x31,0xC0,0xFE,0xCB,0xEB,0x41,0x31,
0xF6,0x8A,0x4D,0xF4,0x66,0x89,0xDE,0x80,0xE9,0x10,0x88,0x8E,0xE0,0xC4,0x2E,0x00,
0x8B,0x35,0xA0,0x51,0x2A,0x00,0x80,0xBE,0xD4,0xFE,0x02,0x00,0x00,0x75,0x09,0xC7,
0x45,0xD4,0x3F,0x00,0x00,0x00,0xEB,0x07,0xC7,0x45,0xD4,0x01,0x00,0x00,0x00,0x31,
0xF6,0x8A,0x4D,0xD4,0x66,0x89,0xDE,0x40,0xFE,0xC3,0x88,0x8E,0xE0,0xC4,0x2F,0x00,
0x83,0xF8,0x02,0x7C,0xBA,0x42,0xFE,0xC7,0x83,0xFA,0x02,0x7C,0xA9,0x8B,0x75,0x14,
0xBF,0x98,0xC3,0x2B,0x00,0x8D,0x76,0x4C,0x68,0x98,0xC3,0x2B,0x00,0xA5,0x66,0xA5,
0xE8,0x0B,0xEF,0xFD,0xFF,0x66,0xA3,0x9C,0xC3,0x2B,0x00,0xA1,0xA0,0x51,0x2A,0x00,
0x8A,0xA8,0x03,0x6E,0x03,0x00,0x83,0xC4,0x04,0x84,0xED,0x75,0x04,0x6A,0x12,0xEB,
0x02,0x6A,0x5B,0x6A,0x0A,0x68,0x98,0xC3,0x2B,0x00,0xE8,0x31,0x84,0x01,0x00,0x83,
0xC4,0x0C,0x85,0xC0,0x0F,0x84,0x03,0x01,0x00,0x00,0x8B,0x55,0x14,0x66,0x8B,0x52,
0x1A,0x66,0x89,0x50,0x1A,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0xC6,0x40,0x46,0x02,
0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8B,0x55,0x14,0x8B,0x45,0x14,0x0F,0xBF,0x52,
0x50,0x0F,0xBF,0x40,0x2C,0x01,0xD0,0x83,0xE8,0x18,0x89,0x45,0xF4,0x8B,0x45,0x14,
0x0F,0xBF,0x40,0x54,0x89,0xC6,0xC1,0xF8,0x08,0x8A,0x65,0xFC,0x28,0xC4,0x88,0x65,
0xF8,0x8A,0x65,0xFD,0x28,0xC4,0x88,0x65,0xF9,0xC1,0xFE,0x07,0x8B,0x5D,0xF8,0x31,
0xC0,0x39,0xF0,0x7C,0x0C,0x8B,0x5D,0xFC,0x31,0xC0,0xFE,0xCF,0xE9,0x8B,0x00,0x00,
0x00,0x8A,0x5D,0xF8,0x31,0xD2,0xEB,0x1E,0x31,0xFF,0x66,0x89,0xDF,0x31,0xC9,0x8A,
0x8F,0xE0,0xC4,0x2E,0x00,0x3B,0x4D,0xF4,0x7E,0x09,0x8A,0x4D,0xF4,0x88,0x8F,0xE0,
0xC4,0x2E,0x00,0x42,0xFE,0xC3,0x39,0xF2,0x7C,0xDE,0x40,0xFE,0xC7,0x39,0xF0,0x7C,
0xD0,0x8B,0x5D,0xFC,0x31,0xC0,0xFE,0xCF,0xEB,0x52,0x8A,0x5D,0xFC,0x31,0xD2,0xFE,
0xCB,0xEB,0x41,0x31,0xF6,0x8A,0x4D,0xF4,0x66,0x89,0xDE,0x80,0xE9,0x10,0x88,0x8E,
0xE0,0xC4,0x2E,0x00,0x8B,0x35,0xA0,0x51,0x2A,0x00,0x80,0xBE,0xD4,0xFE,0x02,0x00,
0x00,0x75,0x09,0xC7,0x45,0xD8,0x3F,0x00,0x00,0x00,0xEB,0x07,0xC7,0x45,0xD8,0x01,
0x00,0x00,0x00,0x31,0xF6,0x8A,0x4D,0xD8,0x66,0x89,0xDE,0x42,0xFE,0xC3,0x88,0x8E,
0xE0,0xC4,0x2F,0x00,0x83,0xFA,0x02,0x7C,0xBA,0x40,0xFE,0xC7,0x83,0xF8,0x02,0x7C,
0xA9,0x8B,0x75,0x14,0x56,0xE8,0xA6,0x60,0x02,0x00,0x83,0xC4,0x04,0x89,0xEC,0x5D,
0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,
0x55,0x89,0xE5,0x5D,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x53,0x55,0x89,0xE5,0x8B,0x5D,0x0C,0x8D,0x43,0x4C,0x50,0xE8,0x00,0xE6,0xFD,0xFF,
0x83,0xC4,0x04,0xA8,0x01,0x75,0x44,0x66,0x69,0x43,0x14,0xA1,0x24,0x05,0xDF,0x24,
0x00,0x00,0xB9,0x07,0x00,0x00,0x00,0x66,0x89,0x43,0x14,0x31,0xC0,0x31,0xD2,0x66,
0x8B,0x43,0x14,0xF7,0xF1,0xF7,0xDA,0x6A,0x01,0x0F,0xBF,0xC2,0x0F,0xBF,0x53,0x54,
0x50,0x89,0xD0,0xC1,0xFA,0x1F,0xC1,0xE2,0x08,0x1B,0xC2,0xC1,0xF8,0x08,0x98,0x50,
0x6A,0x00,0x53,0xE8,0xD8,0x53,0x02,0x00,0x83,0xC4,0x14,0x53,0xE8,0x1F,0x60,0x02,
0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x0C,0x8B,0x55,0x14,0x8B,0x5D,0x1C,0x0F,
0xBF,0x72,0x4C,0x0F,0xBF,0x7A,0x4E,0x0F,0xBF,0x52,0x54,0x89,0xD0,0xC1,0xFA,0x1F,
0xC1,0xE2,0x08,0x1B,0xC2,0xC1,0xF8,0x08,0x81,0xC6,0x80,0x00,0x00,0x00,0x81,0xC7,
0x80,0x00,0x00,0x00,0xC1,0xFE,0x08,0x0F,0xBF,0xD3,0xC1,0xFF,0x08,0x39,0xC2,0x7E,
0x02,0x89,0xC3,0x0F,0xBF,0xC3,0x50,0x0F,0xBF,0x45,0x18,0xBA,0xFD,0xFF,0xFF,0xFF,
0x50,0x89,0x55,0xFC,0xE8,0x27,0xE1,0xFD,0xFF,0x83,0xC4,0x08,0x89,0xC3,0x85,0xC0,
0x74,0x3E,0xEB,0x1D,0x6A,0x00,0x0F,0xBF,0x45,0xFC,0x50,0x8B,0x45,0xF4,0x01,0xF8,
0x98,0x50,0x8B,0x45,0xF8,0x01,0xF0,0x98,0x50,0xE8,0x92,0x4F,0x02,0x00,0x83,0xC4,
0x10,0x8D,0x45,0xF4,0x50,0x8D,0x45,0xF8,0x50,0x53,0xE8,0xA1,0xE1,0xFD,0xFF,0x83,
0xC4,0x0C,0x83,0xF8,0x01,0x74,0xCD,0x53,0xE8,0x63,0xE1,0xFD,0xFF,0x83,0xC4,0x04,
0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,
0x53,0x56,0x55,0x89,0xE5,0x8B,0x5D,0x10,0x31,0xD2,0x8A,0x53,0x3E,0xB9,0x03,0x00,
0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xF9,0x85,0xD2,0x75,0x03,0xFF,0x43,0x10,
0x8B,0x53,0x08,0x8D,0x42,0xFF,0x89,0x43,0x08,0x85,0xD2,0x7C,0x10,0x8D,0x43,0x4C,
0x50,0xE8,0xBA,0xE4,0xFD,0xFF,0x83,0xC4,0x04,0xA8,0x01,0x74,0x0D,0x53,0xE8,0x1D,
0x5F,0x02,0x00,0x83,0xC4,0x04,0x5D,0x5E,0x5B,0xC3,0xF6,0x43,0x0C,0x02,0x75,0x08,
0x31,0xC0,0x66,0x8B,0x43,0x2A,0xEB,0x17,0x31,0xD2,0x66,0x8B,0x53,0x2A,0xB9,0x19,
0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xF9,0x25,0xFF,0xFF,0x00,0x00,0x50,
0x6A,0x00,0x53,0xE8,0x78,0xF6,0xFD,0xFF,0x83,0xC4,0x0C,0x66,0x85,0xC0,0x74,0x2B,
0x66,0x8B,0x53,0x26,0x66,0x83,0xFA,0x0B,0x72,0x21,0x76,0x08,0x66,0x83,0xFA,0x0F,
0x74,0x08,0xEB,0x17,0x98,0x50,0x6A,0x10,0xEB,0x04,0x98,0x50,0x6A,0x11,0x0F,0xBF,
0x43,0x1A,0x50,0xE8,0x58,0xB8,0x03,0x00,0x83,0xC4,0x0C,0x0F,0xBF,0x53,0x54,0x89,
0xD0,0xC1,0xFA,0x1F,0xC1,0xE2,0x08,0x1B,0xC2,0xC1,0xF8,0x08,0x66,0x8B,0x73,0x10,
0x0F,0xBF,0xCE,0x8D,0x50,0xFF,0x39,0xD1,0x7E,0x19,0x89,0xD6,0xF6,0x43,0x0C,0x02,
0x75,0x11,0x89,0xF0,0x40,0x0F,0xBF,0xD0,0x52,0x52,0x53,0xE8,0x70,0xFE,0xFF,0xFF,
0x83,0xC4,0x0C,0x0F,0xBF,0xC6,0x50,0x8A,0x73,0x0C,0x6A,0x00,0x80,0xCE,0x02,0x53,
0x88,0x73,0x0C,0xE8,0x58,0xFE,0xFF,0xFF,0xA1,0xA0,0x51,0x2A,0x00,0x89,0xDA,0x05,
0x8E,0x6E,0x00,0x00,0x29,0xC2,0xBB,0xA8,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,
0xF7,0xFB,0x83,0xC4,0x0C,0x6A,0x0A,0x6A,0xFF,0x98,0x50,0xE8,0x80,0xC3,0x03,0x00,
0x83,0xC4,0x0C,0x5D,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,
0x53,0x55,0x89,0xE5,0x8B,0x5D,0x0C,0x8B,0x53,0x10,0x42,0x8B,0x43,0x08,0x89,0x53,
0x10,0x8D,0x50,0xFF,0x89,0x53,0x08,0x85,0xC0,0x7D,0x0C,0x53,0xE8,0x0F,0x5E,0x02,
0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,0x53,0xE8,0x93,0x64,0x02,0x00,0x83,0xC4,0x04,
0x6A,0x00,0x53,0xE8,0xB8,0xF1,0xFD,0xFF,0x83,0xC4,0x08,0x5D,0x5B,0xC3,0x8B,0xC0,
0x53,0x55,0x89,0xE5,0x8B,0x5D,0x0C,0x8B,0x53,0x10,0x42,0x8B,0x43,0x08,0x89,0x53,
0x10,0x8D,0x50,0xFF,0x89,0x53,0x08,0x85,0xC0,0x7D,0x0C,0x53,0xE8,0xCF,0x5D,0x02,
0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,0x53,0xE8,0x53,0x64,0x02,0x00,0x83,0xC4,0x04,
0x6A,0x01,0x53,0xE8,0x78,0xF1,0xFD,0xFF,0x83,0xC4,0x08,0x5D,0x5B,0xC3,0x8B,0xC0,
0x53,0x56,0x57,0x55,0x89,0xE5,0x8B,0x5D,0x14,0x8B,0x43,0x08,0x8D,0x50,0xFF,0x89,
0x53,0x08,0x85,0xC0,0x7D,0x0E,0x53,0xE8,0x94,0x5D,0x02,0x00,0x83,0xC4,0x04,0x5D,
0x5F,0x5E,0x5B,0xC3,0xBF,0x98,0xC3,0x2B,0x00,0x8D,0x73,0x4C,0xA5,0x66,0xA5,0x66,
0x8B,0x93,0x82,0x00,0x00,0x00,0x83,0xEA,0x04,0x66,0x89,0x93,0x82,0x00,0x00,0x00,
0x66,0x83,0xFA,0x40,0x7D,0x09,0x66,0xC7,0x83,0x82,0x00,0x00,0x00,0x40,0x00,0x66,
0x81,0xBB,0x82,0x00,0x00,0x00,0x80,0x00,0x7E,0x09,0x66,0xC7,0x83,0x82,0x00,0x00,
0x00,0x80,0x00,0x66,0x8B,0x3D,0x9C,0xC3,0x2B,0x00,0x66,0x03,0xBB,0x82,0x00,0x00,
0x00,0x8D,0x43,0x4C,0x50,0x66,0x89,0x3D,0x9C,0xC3,0x2B,0x00,0xE8,0x5F,0xEA,0xFD,
0xFF,0x0F,0xBF,0x15,0x9C,0xC3,0x2B,0x00,0x98,0x83,0xC4,0x04,0x39,0xC2,0x7D,0x06,
0x66,0xA3,0x9C,0xC3,0x2B,0x00,0x8B,0x53,0x10,0x42,0x89,0x53,0x10,0x83,0xFA,0x10,
0x7D,0x69,0x0F,0xBF,0x83,0x86,0x00,0x00,0x00,0x50,0x31,0xC0,0x6A,0x00,0x66,0x8B,
0x43,0x1C,0x50,0x68,0x98,0xC3,0x2B,0x00,0xE8,0x83,0x5D,0x02,0x00,0x66,0x8B,0x83,
0x86,0x00,0x00,0x00,0x83,0xE8,0x34,0x83,0xC4,0x10,0x66,0x89,0x83,0x86,0x00,0x00,
0x00,0x66,0x3D,0x1E,0x00,0x7D,0x09,0x66,0xC7,0x83,0x86,0x00,0x00,0x00,0x1E,0x00,
0x66,0x81,0xBB,0x86,0x00,0x00,0x00,0x00,0x04,0x7E,0x09,0x66,0xC7,0x83,0x86,0x00,
0x00,0x00,0x00,0x04,0xF6,0x43,0x10,0x01,0x75,0x11,0x66,0x8B,0x73,0x5A,0x66,0x83,
0xFE,0x4A,0x7D,0x07,0x89,0xF7,0x47,0x66,0x89,0x7B,0x5A,0x83,0x7B,0x08,0x06,0x7D,
0x11,0x66,0x8B,0x43,0x5A,0x66,0x3D,0x43,0x00,0x7E,0x07,0x89,0xC2,0x4A,0x66,0x89,
0x53,0x5A,0x68,0x98,0xC3,0x2B,0x00,0x53,0xE8,0x63,0x5A,0x02,0x00,0x83,0xC4,0x08,
0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x53,0x56,0x57,0x55,0x89,0xE5,0x8B,0x5D,0x14,0x8B,0x43,0x08,0x8D,0x50,0xFF,0x89,
0x53,0x08,0x85,0xC0,0x7D,0x0E,0x53,0xE8,0x54,0x5C,0x02,0x00,0x83,0xC4,0x04,0x5D,
0x5F,0x5E,0x5B,0xC3,0xBF,0x98,0xC3,0x2B,0x00,0x8D,0x73,0x4C,0xA5,0x66,0xA5,0x66,
0x8B,0x93,0x82,0x00,0x00,0x00,0x83,0xEA,0x04,0x66,0x89,0x93,0x82,0x00,0x00,0x00,
0x66,0x83,0xFA,0x40,0x7D,0x09,0x66,0xC7,0x83,0x82,0x00,0x00,0x00,0x40,0x00,0x66,
0x81,0xBB,0x82,0x00,0x00,0x00,0x80,0x00,0x7E,0x09,0x66,0xC7,0x83,0x82,0x00,0x00,
0x00,0x80,0x00,0x66,0x8B,0x3D,0x9C,0xC3,0x2B,0x00,0x66,0x03,0xBB,0x82,0x00,0x00,
0x00,0x8D,0x43,0x4C,0x50,0x66,0x89,0x3D,0x9C,0xC3,0x2B,0x00,0xE8,0x1F,0xE9,0xFD,
0xFF,0x0F,0xBF,0x15,0x9C,0xC3,0x2B,0x00,0x98,0x83,0xC4,0x04,0x39,0xC2,0x7D,0x06,
0x66,0xA3,0x9C,0xC3,0x2B,0x00,0x8B,0x53,0x10,0x42,0x89,0x53,0x10,0x83,0xFA,0x10,
0x7D,0x69,0x0F,0xBF,0x83,0x86,0x00,0x00,0x00,0x50,0x31,0xC0,0x6A,0x00,0x66,0x8B,
0x43,0x1C,0x50,0x68,0x98,0xC3,0x2B,0x00,0xE8,0x43,0x5C,0x02,0x00,0x66,0x8B,0x83,
0x86,0x00,0x00,0x00,0x83,0xE8,0x34,0x83,0xC4,0x10,0x66,0x89,0x83,0x86,0x00,0x00,
0x00,0x66,0x3D,0x1E,0x00,0x7D,0x09,0x66,0xC7,0x83,0x86,0x00,0x00,0x00,0x1E,0x00,
0x66,0x81,0xBB,0x86,0x00,0x00,0x00,0x00,0x04,0x7E,0x09,0x66,0xC7,0x83,0x86,0x00,
0x00,0x00,0x00,0x04,0xF6,0x43,0x10,0x01,0x75,0x11,0x66,0x8B,0x73,0x5A,0x66,0x83,
0xFE,0x10,0x7D,0x07,0x89,0xF7,0x47,0x66,0x89,0x7B,0x5A,0x83,0x7B,0x08,0x06,0x7D,
0x11,0x66,0x8B,0x43,0x5A,0x66,0x3D,0x09,0x00,0x7E,0x07,0x89,0xC2,0x4A,0x66,0x89,
0x53,0x5A,0x68,0x98,0xC3,0x2B,0x00,0x53,0xE8,0x23,0x59,0x02,0x00,0x83,0xC4,0x08,
0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x55,0x89,0xE5,0x8B,0x55,0x08,0x52,0xE8,0x34,0x00,0x00,0x00,0x83,0xC4,0x04,0x5D,
0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8D,0x40,0x00,
0x55,0x89,0xE5,0x8B,0x55,0x08,0x52,0xE8,0x14,0x00,0x00,0x00,0x83,0xC4,0x04,0x5D,
0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8D,0x40,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x08,0x8B,0x5D,0x14,0x8B,0x43,0x08,0x8D,
0x50,0xFF,0x89,0x53,0x08,0x85,0xC0,0x7D,0x0E,0x53,0xE8,0xD1,0x5A,0x02,0x00,0x83,
0xC4,0x04,0xE9,0xCA,0x00,0x00,0x00,0x8D,0x7D,0xF8,0x8D,0x73,0x4C,0xA5,0x66,0xA5,
0x66,0x69,0x43,0x14,0xA1,0x24,0x05,0xDF,0x24,0x00,0x00,0xBE,0xA0,0x00,0x00,0x00,
0x66,0x89,0x43,0x14,0x31,0xC0,0x31,0xD2,0x66,0x8B,0x43,0x14,0xF7,0xF6,0x0F,0xBF,
0x45,0xF8,0x01,0xD0,0x66,0x89,0x45,0xF8,0x66,0x69,0x43,0x14,0xA1,0x24,0x05,0xDF,
0x24,0x00,0x00,0x31,0xD2,0x66,0x89,0x43,0x14,0x31,0xC0,0xBE,0xA0,0x00,0x00,0x00,
0x66,0x8B,0x43,0x14,0xF7,0xF6,0x0F,0xBF,0x45,0xFC,0x01,0xD0,0x66,0x89,0x45,0xFC,
0x8A,0x43,0x40,0x3C,0x3B,0x72,0x21,0x76,0x06,0x3C,0x3C,0x74,0x0D,0xEB,0x19,0x8D,
0x45,0xF8,0x50,0xE8,0x28,0xC5,0x01,0x00,0xEB,0x09,0x8D,0x45,0xF8,0x50,0xE8,0x5D,
0xC5,0x01,0x00,0x83,0xC4,0x04,0x89,0xC1,0x85,0xC9,0x74,0x45,0x66,0x69,0x43,0x14,
0xA1,0x24,0x05,0xDF,0x24,0x00,0x00,0xBE,0x4D,0x00,0x00,0x00,0x66,0x89,0x43,0x14,
0x31,0xC0,0x31,0xD2,0x66,0x8B,0x43,0x14,0xF7,0xF6,0x0F,0xBF,0x83,0x82,0x00,0x00,
0x00,0xC7,0x41,0x08,0x20,0x00,0x00,0x00,0x01,0xC2,0x0F,0xBF,0x81,0x82,0x00,0x00,
0x00,0xC7,0x41,0x04,0x20,0x00,0x00,0x00,0x01,0xD0,0x66,0x89,0x81,0x82,0x00,0x00,
0x00,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8B,0xD2,
0x55,0x89,0xE5,0x5D,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x53,0x56,0x57,0x55,0x89,0xE5,0x8B,0x5D,0x14,0x8D,0x43,0x4C,0x50,0xE8,0x5E,0xDF,
0xFD,0xFF,0x83,0xC4,0x04,0xA8,0x01,0x74,0x05,0xFF,0x43,0x10,0xEB,0x0D,0x8B,0x4B,
0x10,0x85,0xC9,0x7E,0x06,0x8D,0x71,0xFF,0x89,0x73,0x10,0x8B,0x43,0x08,0x8D,0x50,
0xFF,0x89,0x53,0x08,0x85,0xC0,0x7C,0x06,0x83,0x7B,0x10,0x08,0x7E,0x0E,0x53,0xE8,
0x9C,0x59,0x02,0x00,0x83,0xC4,0x04,0x5D,0x5F,0x5E,0x5B,0xC3,0x66,0x69,0x43,0x14,
0xA1,0x24,0x05,0xDF,0x24,0x00,0x00,0xBE,0x5B,0x00,0x00,0x00,0x66,0x89,0x43,0x14,
0x31,0xC0,0x31,0xD2,0x66,0x8B,0x43,0x14,0xF7,0xF6,0x31,0xC0,0x66,0x8B,0x43,0x1C,
0x01,0xD0,0x83,0xE8,0x2D,0x25,0xFF,0x07,0x00,0x00,0x68,0x00,0x01,0x00,0x00,0x66,
0x89,0x43,0x1C,0x31,0xC0,0x6A,0x00,0x66,0x8B,0x43,0x1C,0x50,0x8D,0x73,0x4C,0x56,
0xE8,0xDB,0x59,0x02,0x00,0x83,0xC4,0x10,0x6A,0x0B,0x6A,0x0A,0x56,0xE8,0xBE,0x7B,
0x01,0x00,0x83,0xC4,0x0C,0x85,0xC0,0x74,0x1E,0x8D,0x78,0x54,0x8D,0x73,0x54,0xA5,
0x66,0xA5,0xC7,0x40,0x08,0x0A,0x00,0x00,0x00,0x66,0x8B,0x53,0x1A,0x66,0xC7,0x40,
0x26,0x0F,0x00,0x66,0x89,0x50,0x1A,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x44,0x20,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x8B,0x5D,0x14,0x8B,0x43,0x08,0x8D,0x50,0xFF,0x89,
0x53,0x08,0x85,0xC0,0x7D,0x0E,0x53,0xE8,0xF4,0x58,0x02,0x00,0x83,0xC4,0x04,0x5D,
0x5F,0x5E,0x5B,0xC3,0x8A,0x63,0x0C,0xF6,0xC4,0x02,0x75,0x08,0x88,0xE2,0x80,0xCA,
0x02,0x88,0x53,0x0C,0x0F,0xBF,0x83,0x9A,0x00,0x00,0x00,0x83,0xF8,0xB0,0x7D,0x09,
0x66,0xC7,0x83,0x9A,0x00,0x00,0x00,0xB0,0xFF,0x66,0x83,0xBB,0x9A,0x00,0x00,0x00,
0x50,0x7E,0x09,0x66,0xC7,0x83,0x9A,0x00,0x00,0x00,0x50,0x00,0x0F,0xBF,0x83,0x9C,
0x00,0x00,0x00,0x83,0xF8,0xB0,0x7D,0x09,0x66,0xC7,0x83,0x9C,0x00,0x00,0x00,0xB0,
0xFF,0x66,0x83,0xBB,0x9C,0x00,0x00,0x00,0x50,0x7E,0x09,0x66,0xC7,0x83,0x9C,0x00,
0x00,0x00,0x50,0x00,0xBF,0x98,0xC3,0x2B,0x00,0x8D,0x73,0x4C,0xA5,0x66,0xA5,0x66,
0x8B,0x43,0x4C,0x66,0x03,0x83,0x9A,0x00,0x00,0x00,0x66,0x8B,0xBB,0x9C,0x00,0x00,
0x00,0x66,0xA3,0x98,0xC3,0x2B,0x00,0x66,0x8B,0x43,0x4E,0x01,0xF8,0x66,0xA3,0x9A,
0xC3,0x2B,0x00,0x66,0x8B,0x43,0x2C,0x66,0x8B,0x15,0x9C,0xC3,0x2B,0x00,0x89,0xC1,
0x01,0xC2,0x83,0xE9,0x1C,0x66,0x89,0x15,0x9C,0xC3,0x2B,0x00,0x0F,0xBF,0xC1,0x66,
0x89,0x4B,0x2C,0x3D,0x80,0xFE,0xFF,0xFF,0x7D,0x06,0x66,0xC7,0x43,0x2C,0x80,0xFE,
0x66,0x81,0x7B,0x2C,0x00,0x01,0x7E,0x06,0x66,0xC7,0x43,0x2C,0x00,0x01,0x68,0x98,
0xC3,0x2B,0x00,0xE8,0x48,0xE5,0xFD,0xFF,0x66,0x8B,0x3D,0x9C,0xC3,0x2B,0x00,0x83,
0xC4,0x04,0x89,0xC6,0x66,0x39,0xF8,0x0F,0x8E,0xB0,0x00,0x00,0x00,0x0F,0xBF,0x53,
0x2C,0x66,0xA3,0x9C,0xC3,0x2B,0x00,0x89,0xD0,0xC1,0xFA,0x1F,0xC1,0xE2,0x02,0x1B,
0xC2,0xC1,0xF8,0x02,0xF7,0xD8,0x66,0x89,0x43,0x2C,0x8D,0x43,0x4C,0x50,0xE8,0x9D,
0xDD,0xFD,0xFF,0x83,0xC4,0x04,0x83,0xF8,0x01,0x75,0x28,0x6A,0x05,0x6A,0x0A,0x68,
0x98,0xC3,0x2B,0x00,0xE8,0x47,0x7A,0x01,0x00,0x83,0xC4,0x0C,0x85,0xC0,0x74,0x6D,
0x66,0x8B,0x53,0x1A,0x53,0x66,0x89,0x50,0x1A,0xE8,0xB2,0x57,0x02,0x00,0x83,0xC4,
0x04,0xEB,0x5A,0x6A,0x06,0x6A,0x0A,0x68,0x98,0xC3,0x2B,0x00,0xE8,0xFF,0xE3,0xFD,
0xFF,0x83,0xC4,0x0C,0x85,0xC0,0x75,0x38,0x6A,0x06,0x6A,0x0A,0x68,0x98,0xC3,0x2B,
0x00,0xE8,0x0A,0x7A,0x01,0x00,0x89,0xC2,0x83,0xC4,0x0C,0x85,0xC0,0x74,0x21,0x66,
0x8B,0x43,0x1A,0x66,0x8B,0x4A,0x2A,0x66,0x89,0x42,0x1A,0x6B,0xC1,0x03,0xC7,0x42,
0x08,0x1E,0x00,0x00,0x00,0x66,0x89,0x42,0x2A,0xC7,0x43,0x10,0x00,0x00,0x00,0x00,
0x66,0x83,0x7B,0x2C,0x1C,0x7F,0x06,0x66,0xC7,0x43,0x2C,0x00,0x00,0x8B,0x53,0x10,
0x68,0x98,0xC3,0x2B,0x00,0x42,0x53,0x89,0x53,0x10,0xE8,0x21,0x55,0x02,0x00,0x66,
0xA1,0x9C,0xC3,0x2B,0x00,0x83,0xC4,0x08,0x66,0x39,0xC6,0x0F,0x85,0x8E,0x00,0x00,
0x00,0x68,0x98,0xC3,0x2B,0x00,0x8D,0x43,0x4C,0x50,0xE8,0x41,0x58,0x02,0x00,0x66,
0xA1,0x98,0xC3,0x2B,0x00,0x66,0x01,0x83,0x9A,0x00,0x00,0x00,0x66,0x8B,0x8B,0x9C,
0x00,0x00,0x00,0x66,0xA1,0x9A,0xC3,0x2B,0x00,0x0F,0xBF,0x93,0x9A,0x00,0x00,0x00,
0x01,0xC1,0x89,0xD0,0xC1,0xE0,0x05,0x29,0xD0,0x8D,0x04,0x85,0x00,0x00,0x00,0x00,
0x01,0xC2,0x01,0xD2,0x89,0xD0,0xC1,0xFA,0x1F,0xC1,0xE2,0x08,0x1B,0xC2,0xC1,0xF8,
0x08,0x66,0x89,0x8B,0x9C,0x00,0x00,0x00,0x0F,0xBF,0x93,0x9C,0x00,0x00,0x00,0x66,
0x89,0x83,0x9A,0x00,0x00,0x00,0x89,0xD0,0xC1,0xE0,0x05,0x29,0xD0,0x8D,0x04,0x85,
0x00,0x00,0x00,0x00,0x01,0xC2,0x01,0xD2,0x89,0xD0,0xC1,0xFA,0x1F,0xC1,0xE2,0x08,
0x1B,0xC2,0xC1,0xF8,0x08,0x83,0xC4,0x08,0x66,0x89,0x83,0x9C,0x00,0x00,0x00,0x5D,
0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x10,0x8B,0x5D,0x14,0x8B,0x53,0x08,0x4A,
0x89,0x53,0x08,0x85,0xD2,0x7D,0x0E,0x53,0xE8,0x73,0x56,0x02,0x00,0x83,0xC4,0x04,
0xE9,0xC3,0x01,0x00,0x00,0xF6,0x43,0x0C,0x02,0x75,0x34,0xA1,0xA0,0x51,0x2A,0x00,
0x89,0xDA,0x8B,0x73,0x0C,0x05,0x8E,0x6E,0x00,0x00,0x81,0xCE,0x02,0x00,0x01,0x00,
0x29,0xC2,0x89,0x73,0x0C,0xBE,0xA8,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,
0xFE,0x6A,0x1E,0x6A,0xFF,0x98,0x50,0xE8,0x74,0xBB,0x03,0x00,0x83,0xC4,0x0C,0x8B,
0x43,0x10,0x8D,0x14,0x85,0x00,0x00,0x00,0x00,0x29,0xC2,0xC1,0xE2,0x08,0x89,0xD0,
0xC1,0xFA,0x1F,0xC1,0xE2,0x02,0x1B,0xC2,0xC1,0xF8,0x02,0x68,0x00,0x02,0x00,0x00,
0x50,0x53,0xE8,0x99,0x75,0x01,0x00,0x31,0xD2,0x66,0x8B,0x53,0x2A,0x8B,0x7B,0x04,
0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xFF,0x83,0xC4,0x0C,0x25,0xFF,0xFF,0x00,0x00,0x50,
0x6A,0x00,0x53,0xE8,0x58,0xE3,0xFD,0xFF,0x98,0x83,0xC4,0x0C,0x85,0xC0,0x74,0x10,
0x50,0x6A,0x09,0x0F,0xBF,0x43,0x1A,0x50,0xE8,0x73,0xAF,0x03,0x00,0x83,0xC4,0x0C,
0x8B,0x43,0x10,0x50,0x50,0xE8,0x36,0xD7,0xFD,0xFF,0x83,0xC4,0x08,0x89,0xC7,0x85,
0xC0,0x0F,0x84,0xFA,0x00,0x00,0x00,0xE9,0xD2,0x00,0x00,0x00,0x66,0x69,0x43,0x14,
0xA1,0x24,0x05,0xDF,0x24,0x00,0x00,0xB9,0x81,0x00,0x00,0x00,0x66,0x89,0x43,0x14,
0x31,0xC0,0x31,0xD2,0x66,0x8B,0x43,0x14,0xF7,0xF1,0x8B,0x45,0xF8,0x8D,0x34,0x85,
0x00,0x00,0x00,0x00,0x0F,0xBF,0x4B,0x4C,0x01,0xC6,0x83,0xE9,0x60,0xC1,0xE6,0x05,
0x01,0xCE,0x01,0xF2,0x83,0xEA,0x40,0x66,0x89,0x55,0xF0,0x66,0x69,0x43,0x14,0xA1,
0x24,0x05,0xDF,0x24,0x00,0x00,0x31,0xD2,0x66,0x89,0x43,0x14,0x31,0xC0,0xB9,0x81,
0x00,0x00,0x00,0x66,0x8B,0x43,0x14,0xF7,0xF1,0x8B,0x45,0xFC,0x8D,0x34,0x85,0x00,
0x00,0x00,0x00,0x01,0xC6,0x0F,0xBF,0x4B,0x4E,0xC1,0xE6,0x05,0x8D,0x41,0xA0,0x01,
0xF0,0x01,0xD0,0x83,0xE8,0x40,0x66,0x89,0x45,0xF2,0x6A,0x00,0x66,0x8B,0x43,0x50,
0x6A,0x0A,0x66,0x89,0x45,0xF4,0x8D,0x45,0xF0,0x50,0xE8,0xA1,0x77,0x01,0x00,0x89,
0xC6,0x83,0xC4,0x0C,0x85,0xC0,0x74,0x36,0x68,0x00,0x02,0x00,0x00,0x66,0x8B,0x43,
0x1A,0x8B,0x4E,0x0C,0x66,0x89,0x46,0x1A,0x68,0x00,0x02,0x00,0x00,0x66,0x8B,0x43,
0x1C,0x81,0xC9,0x80,0x00,0x01,0x00,0x66,0x89,0x46,0x1C,0x56,0x89,0x4E,0x0C,0xE8,
0x7C,0x74,0x01,0x00,0x83,0xC4,0x0C,0xC7,0x46,0x10,0x00,0x00,0x00,0x00,0x8D,0x45,
0xFC,0x50,0x8D,0x45,0xF8,0x50,0x57,0xE8,0xF4,0xD6,0xFD,0xFF,0x83,0xC4,0x0C,0x83,
0xF8,0x01,0x0F,0x84,0x14,0xFF,0xFF,0xFF,0x57,0xE8,0xB2,0xD6,0xFD,0xFF,0x83,0xC4,
0x04,0x8B,0x73,0x10,0x83,0xC6,0x02,0xB9,0x0B,0x00,0x00,0x00,0x89,0xF2,0x89,0xF0,
0xC1,0xFA,0x1F,0xF7,0xF9,0x89,0x53,0x10,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x90,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x04,0x8B,0x5D,0x14,0x81,0x7B,0x10,0xC4,
0x09,0x00,0x00,0x7E,0x5C,0x66,0x69,0x43,0x14,0xA1,0x24,0x05,0xDF,0x24,0x00,0x00,
0xB9,0x64,0x00,0x00,0x00,0x66,0x89,0x43,0x14,0x31,0xC0,0x31,0xD2,0x66,0x8B,0x43,
0x14,0xF7,0xF1,0x85,0xD2,0x75,0x3A,0xA1,0xA0,0x51,0x2A,0x00,0x66,0x83,0x78,0x31,
0x00,0x75,0x2E,0x8D,0x43,0x4C,0x50,0x66,0x8B,0x73,0x50,0xE8,0x80,0xE1,0xFD,0xFF,
0x83,0xC4,0x04,0x66,0x89,0x43,0x50,0x66,0x39,0xC6,0x74,0x0E,0x53,0xE8,0x3E,0x54,
0x02,0x00,0x83,0xC4,0x04,0xE9,0x0E,0x02,0x00,0x00,0xC7,0x43,0x10,0x00,0x00,0x00,
0x00,0x81,0x7B,0x10,0x80,0x00,0x00,0x00,0x7D,0x28,0xF6,0x43,0x10,0x0F,0x74,0x22,
0x66,0x69,0x43,0x14,0xA1,0x24,0x05,0xDF,0x24,0x00,0x00,0xB9,0x05,0x00,0x00,0x00,
0x66,0x89,0x43,0x14,0x31,0xC0,0x31,0xD2,0x66,0x8B,0x43,0x14,0xF7,0xF1,0x85,0xD2,
0x74,0x0A,0x83,0x7B,0x10,0x00,0x0F,0x85,0xC9,0x01,0x00,0x00,0x8D,0x43,0x4C,0x50,
0x66,0x8B,0x73,0x50,0xE8,0x17,0xE1,0xFD,0xFF,0x83,0xC4,0x04,0x66,0x89,0x43,0x50,
0x66,0x39,0xC6,0x74,0x1B,0x53,0xE8,0xD5,0x53,0x02,0x00,0xA1,0xA0,0x51,0x2A,0x00,
0x83,0xC4,0x04,0x66,0xC7,0x40,0x31,0x00,0x00,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,
0x83,0x7B,0x10,0x00,0x0F,0x85,0xAC,0x00,0x00,0x00,0xA1,0xA0,0x51,0x2A,0x00,0x66,
0x8B,0x40,0x31,0x25,0xFF,0xFF,0x00,0x00,0x8B,0x15,0xE4,0xB3,0x2B,0x00,0x8B,0x04,
0x85,0xE4,0xB3,0x2B,0x00,0x39,0xD0,0x76,0x07,0xC7,0x40,0x10,0xFA,0x00,0x00,0x00,
0x8B,0x0D,0xA0,0x51,0x2A,0x00,0x89,0xD8,0x8D,0x91,0x8E,0x6E,0x00,0x00,0x29,0xD0,
0x89,0xC2,0xBE,0xA8,0x00,0x00,0x00,0xC1,0xFA,0x1F,0xF7,0xFE,0x6A,0x13,0x6A,0x0A,
0x66,0x89,0x41,0x31,0x8D,0x43,0x4C,0x50,0xE8,0xE3,0x75,0x01,0x00,0x83,0xC4,0x0C,
0x89,0xC6,0x85,0xC0,0x74,0x50,0x66,0x8B,0x53,0x1A,0x66,0x89,0x50,0x1A,0xA1,0xA0,
0x51,0x2A,0x00,0x66,0x8B,0x40,0x33,0x25,0xFF,0xFF,0x00,0x00,0x8B,0x0D,0xE4,0xB3,
0x2B,0x00,0x8B,0x04,0x85,0xE4,0xB3,0x2B,0x00,0x39,0xC8,0x76,0x09,0x50,0xE8,0x2D,
0x53,0x02,0x00,0x83,0xC4,0x04,0x8B,0x0D,0xA0,0x51,0x2A,0x00,0x8D,0x91,0x8E,0x6E,
0x00,0x00,0x29,0xD6,0x89,0xF2,0xBE,0xA8,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,
0xF7,0xFE,0x66,0x89,0x41,0x33,0x6A,0x10,0x6A,0x0A,0x8D,0x43,0x4C,0x50,0xE8,0x7D,
0x75,0x01,0x00,0x83,0xC4,0x0C,0x85,0xC0,0x74,0x1C,0x66,0x8B,0x53,0x1A,0x66,0x89,
0x50,0x1A,0x66,0x69,0x53,0x14,0xA1,0x24,0x81,0xC2,0xDF,0x24,0x00,0x00,0x66,0x89,
0x53,0x14,0x66,0x89,0x50,0x14,0x8A,0x53,0x1D,0x80,0xC2,0x05,0x8B,0x73,0x10,0x88,
0x53,0x1D,0x85,0xF6,0x0F,0x85,0x81,0x00,0x00,0x00,0x56,0x6A,0x09,0x8D,0x43,0x4C,
0x50,0xE8,0x3A,0x75,0x01,0x00,0x89,0x45,0xFC,0x83,0xC4,0x0C,0x85,0xC0,0x74,0x6B,
0x8B,0x55,0xFC,0x66,0x8B,0x43,0x1A,0x66,0x89,0x42,0x1A,0x66,0x8B,0x43,0x1C,0x66,
0xC7,0x42,0x1E,0x7E,0xFE,0xC6,0x42,0x43,0x0A,0xC6,0x42,0x44,0x11,0x80,0xE4,0x07,
0xC7,0x42,0x08,0x01,0x00,0x00,0x00,0x89,0xD7,0x66,0x89,0x42,0x1C,0x89,0xD0,0x8D,
0xBF,0x9A,0x00,0x00,0x00,0x8D,0x73,0x4C,0x68,0x00,0x06,0x00,0x00,0x31,0xD0,0xA5,
0x66,0xA5,0x6A,0x00,0x66,0x8B,0x42,0x1C,0x50,0x8D,0xB2,0x9A,0x00,0x00,0x00,0x56,
0xE8,0xEB,0x52,0x02,0x00,0x83,0xC4,0x10,0x56,0xE8,0x82,0xDF,0xFD,0xFF,0x8B,0x55,
0xFC,0x83,0xC4,0x04,0x66,0x89,0x82,0x9E,0x00,0x00,0x00,0x83,0x7B,0x10,0x7F,0x7C,
0x14,0x53,0xE8,0x39,0x52,0x02,0x00,0xA1,0xA0,0x51,0x2A,0x00,0x83,0xC4,0x04,0x66,
0xC7,0x40,0x31,0x00,0x00,0xFF,0x43,0x10,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x90,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x04,0x31,0xD2,0x89,0x55,0xFC,0xE9,0xD0,
0x01,0x00,0x00,0x6A,0x27,0x8B,0x45,0x14,0x6A,0x0A,0x83,0xC0,0x4C,0x50,0xE8,0x7D,
0x74,0x01,0x00,0x89,0xC1,0x83,0xC4,0x0C,0x89,0xC3,0x85,0xC0,0x0F,0x84,0xAE,0x01,
0x00,0x00,0x8A,0x60,0x0D,0x80,0xCC,0x20,0xC7,0x41,0x04,0x8C,0x00,0x00,0x00,0x88,
0x61,0x0D,0x8B,0x41,0x04,0x89,0x41,0x08,0x8B,0x45,0x14,0x66,0x69,0x40,0x14,0xA1,
0x24,0x8B,0x55,0x14,0x05,0xDF,0x24,0x00,0x00,0x66,0x89,0x42,0x14,0x31,0xC0,0xBE,
0x00,0x03,0x00,0x00,0x66,0x8B,0x42,0x14,0x31,0xD2,0xF7,0xF6,0x66,0x89,0x91,0x82,
0x00,0x00,0x00,0x66,0x83,0xFA,0x40,0x7D,0x09,0x66,0xC7,0x81,0x82,0x00,0x00,0x00,
0x40,0x00,0x66,0x81,0xBB,0x82,0x00,0x00,0x00,0x00,0x03,0x7E,0x09,0x66,0xC7,0x83,
0x82,0x00,0x00,0x00,0x00,0x03,0x8B,0x45,0x14,0x66,0x69,0x40,0x14,0xA1,0x24,0x8B,
0x55,0x14,0x05,0xDF,0x24,0x00,0x00,0x66,0x89,0x42,0x14,0x31,0xC0,0x66,0x8B,0x42,
0x14,0x83,0xE0,0x7F,0x66,0xC7,0x83,0x94,0x00,0x00,0x00,0x00,0x00,0x05,0x80,0x00,
0x00,0x00,0x66,0x89,0x43,0x2C,0x66,0x69,0x42,0x14,0xA1,0x24,0x05,0xDF,0x24,0x00,
0x00,0x66,0x89,0x42,0x14,0x31,0xC0,0xB9,0x09,0x00,0x00,0x00,0x66,0x8B,0x42,0x14,
0x31,0xD2,0xF7,0xF1,0x8B,0x45,0x14,0x66,0x69,0x40,0x14,0xA1,0x24,0x8D,0x4A,0xFF,
0x8B,0x55,0x14,0x05,0xDF,0x24,0x00,0x00,0x66,0x89,0x42,0x14,0x31,0xC0,0xBE,0x00,
0x0A,0x00,0x00,0x66,0x8B,0x42,0x14,0x31,0xD2,0xF7,0xF6,0x42,0x31,0xF6,0x89,0x93,
0x90,0x00,0x00,0x00,0xEB,0x10,0x8B,0x93,0x90,0x00,0x00,0x00,0x3B,0x14,0xB5,0x38,
0xC5,0x2A,0x00,0x7E,0x06,0x46,0x83,0xFE,0x07,0x7C,0xEB,0x0F,0xBE,0xC1,0x50,0xE8,
0x2C,0x3C,0x00,0x00,0x83,0xC4,0x04,0x01,0xF0,0x50,0x53,0xE8,0xA0,0x6E,0x01,0x00,
0x8B,0x45,0x14,0x66,0x69,0x40,0x14,0xA1,0x24,0x8B,0x55,0x14,0x05,0xDF,0x24,0x00,
0x00,0x66,0x89,0x42,0x14,0x31,0xC0,0x66,0x8B,0x42,0x14,0x25,0xFF,0x07,0x00,0x00,
0x66,0xC7,0x43,0x1E,0x00,0x00,0x66,0x89,0x43,0x1C,0x66,0x8B,0x43,0x1C,0x66,0x89,
0x43,0x20,0x89,0xD6,0x8D,0xBB,0x9A,0x00,0x00,0x00,0x8D,0x76,0x4C,0xA5,0x66,0xA5,
0x83,0xC4,0x08,0x0F,0xBF,0x83,0x82,0x00,0x00,0x00,0x50,0x31,0xC0,0x6A,0x00,0x66,
0x8B,0x43,0x1C,0x50,0x8D,0x83,0x9A,0x00,0x00,0x00,0x50,0xE8,0x10,0x51,0x02,0x00,
0x66,0x8B,0x43,0x4C,0x66,0x8B,0x93,0x9A,0x00,0x00,0x00,0x66,0x8B,0x8B,0x9C,0x00,
0x00,0x00,0x29,0xC2,0x66,0x8B,0x43,0x4E,0x83,0xC4,0x10,0x29,0xC1,0x8D,0x43,0x4C,
0x66,0x89,0x93,0x9A,0x00,0x00,0x00,0x50,0x66,0x89,0x8B,0x9C,0x00,0x00,0x00,0xE8,
0x7C,0xDD,0xFD,0xFF,0x05,0x60,0x00,0x00,0x00,0x83,0xC4,0x04,0x66,0x89,0x43,0x50,
0xFF,0x45,0xFC,0x83,0x7D,0xFC,0x03,0x0F,0x8C,0x26,0xFE,0xFF,0xFF,0x8B,0x45,0x14,
0xF6,0x40,0x3E,0x01,0x75,0x49,0xBE,0x18,0xB8,0x2A,0x00,0x31,0xDB,0xEB,0x3B,0x8B,
0x46,0x42,0x89,0xC2,0xC1,0xFA,0x1F,0xC1,0xE2,0x09,0x1B,0xC2,0xC1,0xF8,0x09,0x50,
0xA1,0xA0,0x51,0x2A,0x00,0x0F,0xBF,0x50,0x0C,0x69,0xD2,0x4C,0x08,0x00,0x00,0x53,
0x66,0x8B,0x84,0x02,0xE8,0x2B,0x00,0x00,0x25,0xFF,0xFF,0x00,0x00,0x50,0x43,0x83,
0xC6,0x50,0xE8,0x89,0xA9,0x03,0x00,0x83,0xC4,0x0C,0x83,0xFB,0x1A,0x7C,0xC0,0x89,
0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x54,0x22,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x14,0x8B,0x5D,0x14,0x8B,0x43,0x08,0x8D,
0x50,0xFF,0x89,0x53,0x08,0x85,0xC0,0x7D,0x19,0x53,0xE8,0xB1,0x4F,0x02,0x00,0xA1,
0xA0,0x51,0x2A,0x00,0x83,0xC4,0x04,0x66,0xC7,0x40,0x33,0x00,0x00,0xE9,0x61,0x01,
0x00,0x00,0xC7,0x43,0x10,0x00,0x00,0x00,0x00,0x8B,0x53,0x10,0x52,0x6A,0x00,0xE8,
0xFC,0xD0,0xFD,0xFF,0x83,0xC4,0x08,0x89,0xC6,0x85,0xC0,0x0F,0x84,0x32,0x01,0x00,
0x00,0xE9,0x0A,0x01,0x00,0x00,0x66,0x69,0x43,0x14,0xA1,0x24,0x05,0xDF,0x24,0x00,
0x00,0xB9,0x9D,0x00,0x00,0x00,0x66,0x89,0x43,0x14,0x31,0xC0,0x31,0xD2,0x66,0x8B,
0x43,0x14,0xF7,0xF1,0xB9,0x4F,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xF9,
0x01,0xC0,0x48,0x85,0xC0,0x0F,0x8E,0xD5,0x00,0x00,0x00,0x66,0x69,0x43,0x14,0xA1,
0x24,0x05,0xDF,0x24,0x00,0x00,0x31,0xD2,0x66,0x89,0x43,0x14,0x31,0xC0,0xB9,0x81,
0x00,0x00,0x00,0x66,0x8B,0x43,0x14,0xF7,0xF1,0x89,0xD1,0x8B,0x55,0xF8,0x8D,0x04,
0x95,0x00,0x00,0x00,0x00,0x0F,0xBF,0x7B,0x4C,0x29,0xD0,0x83,0xEF,0x60,0xC1,0xE0,
0x06,0x01,0xF8,0x01,0xC8,0x83,0xE8,0x40,0x66,0x89,0x45,0xEC,0x66,0x69,0x43,0x14,
0xA1,0x24,0x05,0xDF,0x24,0x00,0x00,0x31,0xD2,0x66,0x89,0x43,0x14,0x31,0xC0,0xB9,
0x81,0x00,0x00,0x00,0x66,0x8B,0x43,0x14,0xF7,0xF1,0x8B,0x4D,0xF4,0x8D,0x04,0x8D,
0x00,0x00,0x00,0x00,0x29,0xC8,0x0F,0xBF,0x7B,0x4E,0xC1,0xE0,0x06,0x8D,0x4F,0xA0,
0x01,0xC8,0x01,0xC2,0x83,0xEA,0x40,0x66,0x89,0x55,0xEE,0x66,0x8B,0x43,0x50,0x66,
0x89,0x45,0xF0,0xF6,0x43,0x08,0x01,0x74,0x47,0x8B,0x43,0x08,0x89,0xC2,0xC1,0xFA,
0x1F,0x2B,0xC2,0xD1,0xF8,0x83,0xE0,0x01,0xC1,0xE0,0x08,0x66,0x89,0x45,0xFC,0xEB,
0x27,0x6A,0x0E,0x6A,0x0A,0x8D,0x45,0xEC,0x50,0xE8,0x12,0x71,0x01,0x00,0x83,0xC4,
0x0C,0x85,0xC0,0x74,0x0F,0x66,0x8B,0x53,0x1A,0x66,0x89,0x50,0x1A,0x8B,0x55,0xFC,
0x66,0x89,0x50,0x1C,0x80,0x45,0xFD,0x02,0x66,0x81,0x7D,0xFC,0x00,0x08,0x72,0xD1,
0x8D,0x45,0xF4,0x50,0x8D,0x45,0xF8,0x50,0x56,0xE8,0x82,0xD0,0xFD,0xFF,0x83,0xC4,
0x0C,0x83,0xF8,0x01,0x0F,0x84,0xDC,0xFE,0xFF,0xFF,0x56,0xE8,0x40,0xD0,0xFD,0xFF,
0x83,0xC4,0x04,0x8D,0x43,0x4C,0x50,0xE8,0x74,0xDB,0xFD,0xFF,0x83,0xC4,0x04,0x66,
0x89,0x43,0x50,0x31,0xC0,0x66,0x8B,0x43,0x2A,0x50,0x6A,0x00,0x53,0xE8,0x9E,0xDB,
0xFD,0xFF,0x83,0xC4,0x0C,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x44,0x20,0x00,
0x55,0x89,0xE5,0x5D,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x55,0x89,0xE5,0x5D,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x53,0x55,0x89,0xE5,0x8B,0x5D,0x0C,0x8B,0x53,0x08,0x4A,0x89,0x53,0x08,0x85,0xD2,
0x7C,0x46,0x53,0xE8,0x78,0x00,0x00,0x00,0x83,0xC4,0x04,0x53,0xE8,0x0F,0x02,0x00,
0x00,0x83,0xC4,0x04,0x53,0xE8,0xD6,0x05,0x00,0x00,0xA1,0xA0,0x51,0x2A,0x00,0x89,
0xDA,0x05,0x8E,0x6E,0x00,0x00,0x29,0xC2,0xBB,0xA8,0x00,0x00,0x00,0x89,0xD0,0xC1,
0xFA,0x1F,0xF7,0xFB,0x83,0xC4,0x04,0x6A,0x31,0x6A,0xFF,0x98,0x50,0xE8,0xEE,0xB2,
0x03,0x00,0x83,0xC4,0x0C,0x5D,0x5B,0xC3,0xA1,0xA0,0x51,0x2A,0x00,0x89,0xDA,0x05,
0x8E,0x6E,0x00,0x00,0x29,0xC2,0xB9,0xA8,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,
0xF7,0xF9,0x6A,0x31,0x6A,0xFF,0x98,0x50,0xE8,0x23,0xB9,0x03,0x00,0x83,0xC4,0x0C,
0x53,0xE8,0x3A,0x07,0x00,0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,0x8D,0x44,0x20,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x04,0x8B,0x5D,0x14,0xBF,0x98,0xC3,0x2B,
0x00,0x8D,0x73,0x4C,0xA5,0x66,0xA5,0x66,0xA1,0x9C,0xC3,0x2B,0x00,0x66,0x89,0x43,
0x30,0xF6,0x43,0x3E,0x0F,0x75,0x25,0x66,0x69,0x43,0x14,0xA1,0x24,0x05,0xDF,0x24,
0x00,0x00,0x66,0x89,0x43,0x14,0x31,0xC0,0x66,0x8B,0x43,0x14,0x83,0xE0,0x01,0x75,
0x0B,0x66,0x8B,0x4B,0x2E,0x6B,0xC1,0xFF,0x66,0x89,0x43,0x2E,0x66,0x6B,0x43,0x2E,
0x0B,0x66,0x03,0x43,0x20,0x80,0xE4,0x07,0x6A,0x20,0x66,0x89,0x43,0x20,0x31,0xC0,
0x6A,0x00,0x66,0x8B,0x43,0x20,0x50,0x68,0x98,0xC3,0x2B,0x00,0xBE,0x98,0xC3,0x2B,
0x00,0xE8,0x8A,0x4D,0x02,0x00,0x8D,0xBB,0x9A,0x00,0x00,0x00,0xA5,0x66,0xA5,0x66,
0x8B,0x43,0x1C,0x05,0x55,0x01,0x00,0x00,0x83,0xC4,0x10,0x80,0xE4,0x07,0x6A,0x78,
0x66,0x89,0x43,0x1C,0x31,0xC0,0x6A,0x00,0x66,0x8B,0x43,0x1C,0x50,0x68,0x98,0xC3,
0x2B,0x00,0xE8,0x59,0x4D,0x02,0x00,0x83,0xC4,0x10,0x68,0x98,0xC3,0x2B,0x00,0xE8,
0xEC,0xD9,0xFD,0xFF,0x83,0xC4,0x04,0x68,0x98,0xC3,0x2B,0x00,0x53,0x66,0xA3,0x9C,
0xC3,0x2B,0x00,0xE8,0x88,0x4A,0x02,0x00,0x31,0xC0,0x66,0x8B,0x43,0x34,0x8B,0x04,
0x85,0xE4,0xB3,0x2B,0x00,0x83,0xC4,0x08,0x89,0x45,0xFC,0x89,0xD8,0xE9,0xA6,0x00,
0x00,0x00,0x8B,0x75,0xFC,0xBF,0x98,0xC3,0x2B,0x00,0x8D,0x76,0x4C,0xA5,0x66,0xA5,
0x8D,0x78,0x4C,0x8B,0x75,0xFC,0x57,0x83,0xC6,0x4C,0x56,0xE8,0x40,0x4F,0x02,0x00,
0x83,0xC4,0x08,0x56,0x8B,0x55,0xFC,0x57,0x66,0x89,0x42,0x1C,0x8B,0x75,0xFC,0xE8,
0xDC,0x51,0x02,0x00,0xBF,0x0C,0x00,0x00,0x00,0x0F,0xBF,0x76,0x2C,0x29,0xF7,0x8D,
0x34,0xBD,0x00,0x00,0x00,0x00,0xBF,0x48,0x00,0x00,0x00,0x29,0xF7,0x83,0xC4,0x08,
0x89,0xFE,0x39,0xF8,0x7E,0x1D,0x29,0xF8,0x98,0x50,0x8B,0x75,0xFC,0x31,0xC0,0x6A,
0x00,0x66,0x8B,0x46,0x1C,0x50,0x68,0x98,0xC3,0x2B,0x00,0xE8,0xB0,0x4C,0x02,0x00,
0x83,0xC4,0x10,0x8B,0x75,0xFC,0x66,0x8B,0x43,0x50,0x66,0x8B,0x56,0x36,0x68,0x98,
0xC3,0x2B,0x00,0x01,0xD0,0x56,0x66,0xA3,0x9C,0xC3,0x2B,0x00,0xE8,0xDF,0x49,0x02,
0x00,0x89,0xF0,0x89,0xC7,0x31,0xF6,0x66,0x8B,0x77,0x34,0x8B,0x14,0xB5,0xE4,0xB3,
0x2B,0x00,0x83,0xC4,0x08,0x89,0x55,0xFC,0x8B,0x55,0xFC,0x3B,0x15,0xE4,0xB3,0x2B,
0x00,0x0F,0x87,0x4B,0xFF,0xFF,0xFF,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8B,0xC0,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x34,0x31,0xD2,0x89,0x55,0xD8,0x8B,0x55,
0x14,0x31,0xC0,0x66,0x8B,0x42,0x4C,0x05,0x80,0x00,0x00,0x00,0xC1,0xF8,0x08,0x89,
0x45,0xDC,0x31,0xC0,0x66,0x8B,0x42,0x4E,0x05,0x80,0x00,0x00,0x00,0x6A,0x0C,0xC1,
0xF8,0x08,0x6A,0x00,0x89,0x45,0xEC,0xE8,0x04,0xCD,0xFD,0xFF,0x83,0xC4,0x08,0x89,
0x45,0xE8,0x85,0xC0,0x0F,0x84,0x76,0x03,0x00,0x00,0xE9,0x31,0x03,0x00,0x00,0x8B,
0x45,0xEC,0x8B,0x5D,0xCC,0x8B,0x55,0xDC,0x8B,0x4D,0xD0,0x01,0xD8,0x01,0xCA,0x25,
0xFF,0x00,0x00,0x00,0x81,0xE2,0xFF,0x00,0x00,0x00,0xC1,0xE0,0x08,0x01,0xD0,0x0F,
0xBF,0x04,0x45,0xE0,0xC4,0x32,0x00,0x8B,0x1C,0x85,0xE4,0xB3,0x2B,0x00,0xE9,0xF1,
0x02,0x00,0x00,0x53,0x8B,0x75,0x14,0x56,0xE8,0x43,0x04,0x00,0x00,0x83,0xC4,0x08,
0x84,0xC0,0x0F,0x84,0xCB,0x02,0x00,0x00,0x8A,0x53,0x3F,0x30,0xE4,0x31,0xFF,0x88,
0x65,0xF8,0x89,0x7D,0xF0,0x89,0x7D,0xD4,0x80,0xFA,0x03,0x75,0x0C,0x80,0x7B,0x40,
0x00,0x75,0x06,0xC6,0x45,0xFC,0x01,0xEB,0x05,0x30,0xED,0x88,0x6D,0xFC,0x80,0x7D,
0xFC,0x00,0x74,0x07,0xB8,0x38,0x00,0x00,0x00,0xEB,0x05,0xB8,0xCC,0x00,0x00,0x00,
0x89,0x45,0xF4,0x80,0x7D,0xFC,0x00,0x74,0x07,0xB8,0x80,0x01,0x00,0x00,0xEB,0x05,
0xB8,0x00,0x03,0x00,0x00,0x8D,0x7B,0x4C,0x8B,0x75,0x14,0x57,0x81,0xC6,0x9A,0x00,
0x00,0x00,0x56,0x89,0x45,0xE4,0xE8,0x95,0x50,0x02,0x00,0x83,0xC4,0x08,0x89,0x45,
0xE0,0x3D,0x00,0x00,0x31,0x00,0x0F,0x8D,0x5D,0x01,0x00,0x00,0x57,0x56,0xE8,0x8D,
0x4D,0x02,0x00,0x83,0xC4,0x08,0x31,0xD2,0x8A,0x4B,0x0F,0x66,0x89,0xC2,0xF6,0xC1,
0x10,0x0F,0x85,0xFE,0x00,0x00,0x00,0x80,0x7D,0xFC,0x00,0x74,0x29,0x8B,0x83,0xA4,
0x00,0x00,0x00,0x66,0x8B,0x88,0x55,0x01,0x00,0x00,0x66,0x81,0xF9,0x00,0x01,0x7D,
0x0C,0x89,0xCE,0x83,0xC6,0x1C,0x66,0x89,0xB0,0x55,0x01,0x00,0x00,0x66,0xC7,0x83,
0x82,0x00,0x00,0x00,0x50,0x00,0x81,0x7D,0xE0,0x00,0x00,0x04,0x00,0x0F,0x8D,0x9A,
0x00,0x00,0x00,0x8A,0x43,0x0D,0x0C,0x08,0x8B,0x75,0x14,0x88,0x43,0x0D,0xBF,0x98,
0xC3,0x2B,0x00,0x8D,0xB6,0x9A,0x00,0x00,0x00,0xA5,0x66,0xA5,0x8B,0x45,0x14,0x0F,
0xBF,0x53,0x50,0x0F,0xBF,0x40,0x30,0x29,0xC2,0x68,0x98,0xC3,0x2B,0x00,0x8D,0x7A,
0x39,0xE8,0x6A,0xD7,0xFD,0xFF,0x0F,0xBF,0xF0,0x89,0xF0,0x01,0xF8,0x66,0xA3,0x9C,
0xC3,0x2B,0x00,0x98,0x83,0xC4,0x04,0x39,0xF0,0x7D,0x07,0x66,0x89,0x35,0x9C,0xC3,
0x2B,0x00,0x8B,0x55,0xF4,0x66,0x8B,0x43,0x1C,0x01,0xD0,0x80,0xE4,0x07,0x66,0x8B,
0x4B,0x14,0x66,0x89,0x43,0x1C,0x69,0xC1,0xA1,0x24,0x00,0x00,0x05,0xDF,0x24,0x00,
0x00,0x8B,0x75,0xE4,0x66,0x89,0x43,0x14,0x31,0xC0,0x31,0xD2,0x66,0x8B,0x43,0x14,
0xF7,0xF6,0x01,0xF2,0x39,0xD7,0x0F,0x8C,0xCC,0x00,0x00,0x00,0x80,0x4B,0x0F,0x10,
0x66,0x8B,0x43,0x1C,0x66,0x89,0x43,0x30,0xE9,0xBB,0x00,0x00,0x00,0xBF,0x98,0xC3,
0x2B,0x00,0x81,0xC2,0x4F,0x02,0x00,0x00,0x8D,0x73,0x4C,0x80,0xE6,0x07,0xA5,0x66,
0xA5,0x66,0x89,0x53,0x30,0x66,0x89,0x53,0x1C,0xC7,0x45,0xD4,0x60,0x00,0x00,0x00,
0xE9,0x93,0x00,0x00,0x00,0xB9,0x80,0x00,0x00,0x00,0x8A,0x53,0x0D,0xBF,0x98,0xC3,
0x2B,0x00,0x80,0xCA,0x08,0x8D,0x73,0x4C,0x88,0x53,0x0D,0x89,0x4D,0xD4,0xA5,0x66,
0xA5,0xB6,0x01,0x8B,0x7D,0xF4,0x66,0x8B,0x35,0x9C,0xC3,0x2B,0x00,0x66,0x8B,0x43,
0x1C,0x88,0x75,0xF8,0x01,0xF8,0x83,0xC6,0x72,0x80,0xE4,0x07,0x66,0x89,0x35,0x9C,
0xC3,0x2B,0x00,0x66,0x89,0x43,0x1C,0xEB,0x4F,0xBF,0x98,0xC3,0x2B,0x00,0x8D,0x73,
0x4C,0xA5,0x66,0xA5,0xF6,0x43,0x0F,0x10,0x74,0x3E,0x8A,0x6B,0x0D,0xB2,0x01,0x80,
0xCD,0x08,0x88,0x55,0xF8,0x8B,0x93,0xA0,0x00,0x00,0x00,0x88,0x6B,0x0D,0x0F,0xBF,
0x52,0x0E,0x8B,0x4D,0xF4,0x89,0x55,0xF0,0x66,0x8B,0x53,0x1C,0x01,0xCA,0xBE,0x40,
0x00,0x00,0x00,0x80,0xE6,0x07,0x89,0x75,0xD4,0x66,0x89,0x53,0x1C,0x3D,0x00,0x00,
0x51,0x00,0x7C,0x04,0x80,0x63,0x0F,0xEF,0x0F,0xBF,0x45,0xD4,0x50,0x31,0xC0,0x6A,
0x00,0x66,0x8B,0x43,0x30,0x50,0x68,0x98,0xC3,0x2B,0x00,0xE8,0x90,0x49,0x02,0x00,
0x8A,0x0D,0xB6,0x51,0x2A,0x00,0x83,0xC4,0x10,0x84,0xC9,0x74,0x28,0x68,0x98,0xC3,
0x2B,0x00,0x0F,0xBF,0x7B,0x58,0xE8,0x35,0xD6,0xFD,0xFF,0x0F,0xBF,0xF0,0x0F,0xBF,
0x05,0x9C,0xC3,0x2B,0x00,0x29,0xFE,0x83,0xC4,0x04,0x39,0xF0,0x7E,0x07,0x66,0x89,
0x35,0x9C,0xC3,0x2B,0x00,0x8B,0x7D,0xF0,0x8B,0x83,0xA0,0x00,0x00,0x00,0x57,0x0F,
0xBF,0x50,0x0A,0x52,0x0F,0xBF,0x40,0x0C,0x50,0x68,0x98,0xC3,0x2B,0x00,0xE8,0xDD,
0xD5,0xFD,0xFF,0x83,0xC4,0x04,0x98,0x50,0x68,0x98,0xC3,0x2B,0x00,0xE8,0x6E,0x4A,
0x02,0x00,0x83,0xC4,0x14,0x68,0x98,0xC3,0x2B,0x00,0x53,0xE8,0x70,0x46,0x02,0x00,
0x8A,0x6D,0xF8,0x83,0xC4,0x08,0x84,0xED,0x74,0x19,0x8B,0x55,0x14,0x31,0xC0,0x66,
0x8B,0x42,0x2A,0x50,0x6A,0x00,0x53,0x52,0xFF,0x45,0xD8,0xE8,0x60,0xE2,0xFD,0xFF,
0x83,0xC4,0x10,0x66,0x8B,0x5B,0x16,0x81,0xE3,0xFF,0xFF,0x00,0x00,0x8B,0x1C,0x9D,
0xE4,0xB3,0x2B,0x00,0x3B,0x1D,0xE4,0xB3,0x2B,0x00,0x0F,0x85,0x03,0xFD,0xFF,0xFF,
0x8D,0x45,0xCC,0x50,0x8D,0x45,0xD0,0x50,0x8B,0x75,0xE8,0x56,0xE8,0x5F,0xCA,0xFD,
0xFF,0x83,0xC4,0x0C,0x83,0xF8,0x01,0x0F,0x84,0xB2,0xFC,0xFF,0xFF,0x56,0xE8,0x1D,
0xCA,0xFD,0xFF,0x8B,0x45,0xD8,0x83,0xC4,0x04,0x85,0xC0,0x74,0x13,0x50,0x8B,0x45,
0x14,0x6A,0x15,0x0F,0xBF,0x40,0x1A,0x50,0xE8,0xB3,0xA1,0x03,0x00,0x83,0xC4,0x0C,
0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x8B,0x75,0x14,0x8A,0x66,0x3E,0x31,0xFF,0xF6,0xC4,
0x07,0x0F,0x85,0xB8,0x00,0x00,0x00,0x8B,0x1D,0xA4,0x51,0x2A,0x00,0x8B,0x9B,0x7F,
0x96,0x00,0x00,0xEB,0x23,0x53,0x56,0xE8,0x14,0xD0,0xFD,0xFF,0x83,0xC4,0x08,0x85,
0xC0,0x74,0x13,0x31,0xC0,0x66,0x8B,0x46,0x2A,0x50,0x6A,0x00,0x53,0x56,0xE8,0xAD,
0xE1,0xFD,0xFF,0x83,0xC4,0x10,0x8B,0x1B,0x3B,0x1D,0xE4,0xB3,0x2B,0x00,0x77,0xD5,
0x8B,0x1D,0xA4,0x51,0x2A,0x00,0x8B,0x9B,0x77,0x96,0x00,0x00,0xEB,0x55,0x80,0x7B,
0x40,0x02,0x75,0x4D,0x53,0x56,0xE8,0xD5,0xCF,0xFD,0xFF,0x83,0xC4,0x08,0x85,0xC0,
0x74,0x3F,0x8B,0x15,0xA0,0x51,0x2A,0x00,0x89,0xF0,0x81,0xC2,0x8E,0x6E,0x00,0x00,
0x29,0xD0,0x89,0xC2,0xB9,0xA8,0x00,0x00,0x00,0xC1,0xFA,0x1F,0xF7,0xF9,0x66,0xC7,
0x43,0x30,0x1E,0x00,0x66,0x89,0x43,0x26,0x31,0xC0,0x8B,0x4B,0x5E,0x66,0x8B,0x46,
0x2A,0x01,0xC1,0x89,0x4B,0x5E,0x66,0x8B,0x46,0x1A,0x83,0xC7,0x02,0x66,0x89,0x43,
0x62,0x8B,0x1B,0x3B,0x1D,0xE4,0xB3,0x2B,0x00,0x77,0xA3,0x85,0xFF,0x74,0x10,0x57,
0x6A,0x15,0x0F,0xBF,0x46,0x1A,0x50,0xE8,0xD4,0xA0,0x03,0x00,0x83,0xC4,0x0C,0x5D,
0x5F,0x5E,0x5B,0xC3,0xB8,0x48,0x21,0x00,0x34,0x48,0x21,0x00,0xC5,0x48,0x21,0x00,
0x54,0x48,0x21,0x00,0xC5,0x48,0x21,0x00,0xC5,0x48,0x21,0x00,0xC5,0x48,0x21,0x00,
0xC5,0x48,0x21,0x00,0x95,0x48,0x21,0x00,0x8D,0x80,0x00,0x00,0x00,0x00,0x8B,0xD2,
0x53,0x55,0x89,0xE5,0x8B,0x55,0x10,0xB0,0x01,0x8A,0x62,0x3F,0x80,0xEC,0x02,0x80,
0xFC,0x08,0x0F,0x87,0x9D,0x00,0x00,0x00,0x31,0xDB,0x88,0xE3,0x2E,0xFF,0x24,0x9D,
0xE4,0x47,0x21,0x00,0x8B,0x4D,0x0C,0x66,0x8B,0x5A,0x1A,0x66,0x3B,0x59,0x1A,0x0F,
0x84,0x80,0x00,0x00,0x00,0x80,0x7A,0x40,0x02,0x0F,0x85,0x78,0x00,0x00,0x00,0x30,
0xC0,0x5D,0x5B,0xC3,0x8A,0x5A,0x45,0x80,0xFB,0xE8,0x0F,0x84,0x65,0x00,0x00,0x00,
0x80,0xFB,0xB4,0x0F,0x84,0x5C,0x00,0x00,0x00,0x8A,0x62,0x40,0x80,0xFC,0x0F,0x72,
0x1A,0x0F,0x86,0x4E,0x00,0x00,0x00,0x80,0xFC,0x12,0x72,0x4B,0x76,0x47,0x80,0xFC,
0x1B,0x72,0x44,0x80,0xFC,0x1C,0x76,0x3D,0x5D,0x5B,0xC3,0x80,0xFC,0x0A,0x75,0x37,
0x30,0xC0,0x5D,0x5B,0xC3,0x8A,0x62,0x40,0x80,0xFC,0x27,0x72,0x0C,0x76,0x28,0x80,
0xFC,0x39,0x74,0x23,0x30,0xC0,0x5D,0x5B,0xC3,0x80,0xFC,0x0D,0x72,0x17,0x80,0xFC,
0x0E,0x76,0x14,0x30,0xC0,0x5D,0x5B,0xC3,0x8A,0x62,0x40,0x80,0xFC,0x07,0x72,0x05,
0x80,0xFC,0x08,0x76,0x02,0x30,0xC0,0x5D,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x08,0x8B,0x55,0x14,0x31,0xC0,0x66,0x8B,
0x42,0x4C,0x8D,0xB0,0x80,0x00,0x00,0x00,0x31,0xC0,0x6A,0x0C,0x66,0x8B,0x42,0x4E,
0x6A,0x00,0x8D,0xB8,0x80,0x00,0x00,0x00,0xC1,0xFE,0x08,0xE8,0x80,0xC7,0xFD,0xFF,
0xC1,0xFF,0x08,0x83,0xC4,0x08,0x89,0xC3,0x85,0xC0,0x74,0x64,0xEB,0x43,0x8B,0x55,
0xF8,0x8B,0x45,0xFC,0x01,0xFA,0x01,0xF0,0x81,0xE2,0xFF,0x00,0x00,0x00,0x25,0xFF,
0x00,0x00,0x00,0xC1,0xE2,0x08,0x01,0xD0,0x0F,0xBF,0x04,0x45,0xE0,0xC4,0x32,0x00,
0xEB,0x10,0x81,0x60,0x0C,0xFF,0xF7,0xFF,0xEF,0x66,0x8B,0x40,0x16,0x25,0xFF,0xFF,
0x00,0x00,0x8B,0x04,0x85,0xE4,0xB3,0x2B,0x00,0x3B,0x05,0xE4,0xB3,0x2B,0x00,0x75,
0xE1,0x8D,0x45,0xF8,0x50,0x8D,0x45,0xFC,0x50,0x53,0xE8,0xD1,0xC7,0xFD,0xFF,0x83,
0xC4,0x0C,0x83,0xF8,0x01,0x74,0xA7,0x53,0xE8,0x93,0xC7,0xFD,0xFF,0x83,0xC4,0x04,
0x8B,0x5D,0x14,0x3B,0x1D,0xE4,0xB3,0x2B,0x00,0x77,0x07,0x89,0xEC,0x5D,0x5F,0x5E,
0x5B,0xC3,0x53,0xE8,0x88,0x45,0x02,0x00,0x83,0xC4,0x04,0x66,0x8B,0x5B,0x34,0x81,
0xE3,0xFF,0xFF,0x00,0x00,0x8B,0x1C,0x9D,0xE4,0xB3,0x2B,0x00,0x3B,0x1D,0xE4,0xB3,
0x2B,0x00,0x77,0xDE,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x40,0x00,0x8B,0xC9,
0x53,0x57,0x55,0x89,0xE5,0x8B,0x5D,0x10,0x8A,0x43,0x46,0x3C,0x01,0x72,0x12,0x0F,
0x86,0x81,0x00,0x00,0x00,0x3C,0x02,0x0F,0x84,0xB1,0x00,0x00,0x00,0x5D,0x5F,0x5B,
0xC3,0x84,0xC0,0x0F,0x85,0xE9,0x00,0x00,0x00,0x66,0x8B,0x93,0x96,0x00,0x00,0x00,
0x66,0x85,0xD2,0x74,0x5D,0x31,0xC0,0x66,0x89,0xD0,0x8B,0x04,0x85,0xE4,0xB3,0x2B,
0x00,0x0F,0xBF,0x50,0x54,0xD1,0xFA,0x66,0x89,0x93,0x86,0x00,0x00,0x00,0x0F,0xBF,
0x50,0x54,0x8D,0x04,0x95,0x00,0x00,0x00,0x00,0x29,0xD0,0x01,0xC0,0xC1,0xF8,0x02,
0x66,0x8B,0x8B,0x86,0x00,0x00,0x00,0x66,0x89,0x83,0x84,0x00,0x00,0x00,0x66,0x81,
0xF9,0x80,0x00,0x7D,0x09,0x66,0xC7,0x83,0x86,0x00,0x00,0x00,0x80,0x00,0x66,0x81,
0xBB,0x84,0x00,0x00,0x00,0x80,0x02,0x7E,0x09,0x66,0xC7,0x83,0x84,0x00,0x00,0x00,
0x80,0x02,0xC6,0x43,0x46,0x01,0x53,0xE8,0x24,0x02,0x00,0x00,0x83,0xC4,0x04,0x53,
0xE8,0x7B,0x00,0x00,0x00,0x83,0xC4,0x04,0x53,0xE8,0xC2,0x00,0x00,0x00,0x83,0xC4,
0x04,0x53,0xE8,0x99,0x01,0x00,0x00,0x8B,0x53,0x08,0x4A,0x83,0xC4,0x04,0x89,0x53,
0x08,0x83,0xFA,0x01,0x7D,0x4C,0xC6,0x43,0x46,0x02,0x5D,0x5F,0x5B,0xC3,0x8A,0x63,
0x3D,0x84,0xE4,0x7D,0x07,0x88,0xE2,0xF6,0xDA,0x88,0x53,0x3D,0x53,0xE8,0x8E,0x00,
0x00,0x00,0x66,0x0F,0xBE,0x43,0x3D,0x66,0x8B,0x7B,0x2C,0x29,0xC7,0x83,0xC4,0x04,
0x66,0x89,0x7B,0x2C,0x66,0x85,0xFF,0x7D,0x19,0x6A,0x00,0x6A,0x0A,0x8D,0x43,0x4C,
0x50,0xE8,0xDA,0x66,0x01,0x00,0x83,0xC4,0x0C,0x53,0xE8,0x81,0x02,0x00,0x00,0x83,
0xC4,0x04,0x5D,0x5F,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x54,0x22,0x00,
0x53,0x56,0x55,0x89,0xE5,0x8B,0x45,0x10,0x66,0x0F,0xBE,0x50,0x3D,0x66,0x8B,0x58,
0x2C,0x01,0xD3,0x66,0x8B,0x88,0x84,0x00,0x00,0x00,0x66,0x89,0x58,0x2C,0x66,0x39,
0xCB,0x7E,0x10,0x8A,0x50,0x3D,0x66,0x89,0x48,0x2C,0xF6,0xDA,0x88,0x50,0x3D,0x5D,
0x5E,0x5B,0xC3,0x66,0x8B,0xB0,0x86,0x00,0x00,0x00,0x66,0x39,0xF3,0x7D,0x0C,0x8A,
0x70,0x3D,0x66,0x89,0x70,0x2C,0xF6,0xDE,0x88,0x70,0x3D,0x5D,0x5E,0x5B,0xC3,0x90,
0x53,0x56,0x57,0x55,0x89,0xE5,0x8B,0x45,0x14,0x66,0x8B,0x40,0x1C,0x05,0x16,0x00,
0x00,0x00,0x8B,0x5D,0x14,0x80,0xE4,0x07,0x66,0x89,0x43,0x1C,0x66,0x8B,0x43,0x1E,
0x05,0x10,0x00,0x00,0x00,0x80,0xE4,0x07,0x66,0x89,0x43,0x1E,0x31,0xC0,0x66,0x8B,
0x43,0x34,0xE9,0x83,0x00,0x00,0x00,0x66,0x8B,0x43,0x1C,0x66,0x03,0x43,0x20,0x80,
0xE4,0x07,0x66,0x89,0x43,0x1C,0x66,0x8B,0x4B,0x22,0x66,0x8B,0x43,0x1E,0x01,0xC8,
0x80,0xE4,0x07,0x8B,0x75,0x14,0x66,0x89,0x43,0x1E,0xBF,0x98,0xC3,0x2B,0x00,0x8D,
0x76,0x4C,0x8B,0x45,0x14,0xA5,0x66,0xA5,0x0F,0xBF,0x40,0x2C,0x50,0x8B,0x45,0x14,
0x66,0x8B,0x73,0x1E,0x66,0x8B,0x40,0x1E,0x01,0xF0,0x80,0xE4,0x07,0x25,0xFF,0xFF,
0x00,0x00,0x50,0x8B,0x45,0x14,0x66,0x8B,0x7B,0x1C,0x66,0x8B,0x40,0x1C,0x01,0xF8,
0x80,0xE4,0x07,0x25,0xFF,0xFF,0x00,0x00,0x50,0x68,0x98,0xC3,0x2B,0x00,0xE8,0xDD,
0x43,0x02,0x00,0x83,0xC4,0x10,0x68,0x98,0xC3,0x2B,0x00,0x53,0xE8,0x1F,0x41,0x02,
0x00,0x31,0xC0,0x66,0x8B,0x43,0x34,0x83,0xC4,0x08,0x8B,0x1C,0x85,0xE4,0xB3,0x2B,
0x00,0x3B,0x1D,0xE4,0xB3,0x2B,0x00,0x0F,0x87,0x6A,0xFF,0xFF,0xFF,0x5D,0x5F,0x5E,
0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8B,0xC0,
0x53,0x56,0x55,0x89,0xE5,0x8B,0x75,0x10,0x31,0xC0,0x66,0x8B,0x46,0x34,0xEB,0x4D,
0x80,0x7B,0x44,0x00,0x75,0x41,0x31,0xC0,0x66,0x8B,0x46,0x2A,0x50,0x6A,0x00,0x53,
0xE8,0x5B,0xD0,0xFD,0xFF,0x83,0xC4,0x0C,0x66,0x85,0xC0,0x74,0x2A,0x8B,0x15,0xA0,
0x51,0x2A,0x00,0x89,0xF0,0x81,0xC2,0x8E,0x6E,0x00,0x00,0x29,0xD0,0x89,0xC2,0xB9,
0xA8,0x00,0x00,0x00,0xC1,0xFA,0x1F,0xF7,0xF9,0x6A,0x03,0x6A,0xFF,0x98,0x50,0xE8,
0xFC,0xA7,0x03,0x00,0x83,0xC4,0x0C,0x31,0xC0,0x66,0x8B,0x43,0x34,0x8B,0x1C,0x85,
0xE4,0xB3,0x2B,0x00,0x3B,0x1D,0xE4,0xB3,0x2B,0x00,0x77,0xA4,0x5D,0x5E,0x5B,0xC3,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x08,0x8B,0x5D,0x14,0x30,0xE4,0x66,0x8B,
0x93,0x96,0x00,0x00,0x00,0x88,0x65,0xFC,0x66,0x85,0xD2,0x74,0x52,0x31,0xF6,0x66,
0x89,0xD6,0x8B,0x04,0xB5,0xE4,0xB3,0x2B,0x00,0x89,0xC6,0xBF,0x98,0xC3,0x2B,0x00,
0x8D,0x76,0x4C,0x68,0x98,0xC3,0x2B,0x00,0xA5,0x66,0xA5,0x89,0x45,0xF8,0x66,0x8B,
0x0D,0x9C,0xC3,0x2B,0x00,0x66,0x8B,0x40,0x52,0x53,0x01,0xC1,0x8B,0x75,0xF8,0x66,
0x89,0x0D,0x9C,0xC3,0x2B,0x00,0xE8,0x25,0x40,0x02,0x00,0x8B,0x56,0x08,0x83,0xC4,
0x08,0x85,0xD2,0x7C,0x06,0xF6,0x46,0x0D,0x04,0x74,0x04,0xC6,0x45,0xFC,0x01,0x8D,
0x73,0x4C,0x56,0x0F,0xBF,0x7B,0x2C,0xE8,0x54,0xCF,0xFD,0xFF,0x0F,0xBF,0xF0,0x01,
0xFE,0x0F,0xBF,0x7B,0x50,0x83,0xC4,0x04,0x39,0xF7,0x7D,0x04,0x66,0x89,0x73,0x50,
0x80,0x3D,0xB6,0x51,0x2A,0x00,0x00,0x74,0x21,0x8D,0x73,0x4C,0x56,0x0F,0xBF,0x7B,
0x2C,0xE8,0x4A,0xCF,0xFD,0xFF,0x0F,0xBF,0xF0,0x29,0xFE,0x0F,0xBF,0x7B,0x50,0x83,
0xC4,0x04,0x39,0xF7,0x7E,0x04,0x66,0x89,0x73,0x50,0x80,0x7D,0xFC,0x00,0x74,0x04,
0xC6,0x43,0x46,0x02,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x40,0x00,0x8B,0xC9,
0x53,0x56,0x55,0x89,0xE5,0x8B,0x75,0x10,0x31,0xDB,0x66,0x8B,0x5E,0x34,0xEB,0x13,
0x53,0xE8,0xBA,0x41,0x02,0x00,0x83,0xC4,0x04,0x66,0x8B,0x5B,0x34,0x81,0xE3,0xFF,
0xFF,0x00,0x00,0x8B,0x1C,0x9D,0xE4,0xB3,0x2B,0x00,0x3B,0x1D,0xE4,0xB3,0x2B,0x00,
0x77,0xDE,0x56,0xE8,0x98,0x41,0x02,0x00,0x83,0xC4,0x04,0x5D,0x5E,0x5B,0xC3,0x90,
0x53,0x55,0x89,0xE5,0x8B,0x5D,0x0C,0x8B,0x53,0x10,0x42,0x8B,0x43,0x08,0x89,0x53,
0x10,0x8D,0x50,0xFF,0x89,0x53,0x08,0x85,0xC0,0x7D,0x0C,0x53,0xE8,0x6F,0x41,0x02,
0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,0xF6,0x43,0x0C,0x02,0x75,0x5F,0x31,0xC0,0x66,
0x8B,0x43,0x2A,0x50,0x6A,0x00,0x53,0xE8,0xC4,0xCE,0xFD,0xFF,0x98,0x83,0xC4,0x0C,
0x85,0xC0,0x74,0x10,0x50,0x6A,0x07,0x0F,0xBF,0x43,0x1A,0x50,0xE8,0xDF,0x9A,0x03,
0x00,0x83,0xC4,0x0C,0xA1,0xA0,0x51,0x2A,0x00,0x89,0xDA,0x05,0x8E,0x6E,0x00,0x00,
0x29,0xC2,0xB9,0xA8,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xF9,0x6A,0x18,
0x6A,0xFF,0x98,0x50,0xE8,0x57,0xA6,0x03,0x00,0x8A,0x53,0x0C,0xC7,0x43,0x08,0x01,
0x00,0x00,0x00,0x80,0xCA,0x02,0x83,0xC4,0x0C,0x88,0x53,0x0C,0x5D,0x5B,0xC3,0x90,
0x55,0x89,0xE5,0x5D,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x53,0x55,0x89,0xE5,0x8B,0x5D,0x0C,0x8B,0x53,0x10,0x8B,0x4B,0x08,0x42,0x49,0x89,
0x53,0x10,0x89,0x4B,0x08,0x85,0xC9,0x7D,0x0C,0x53,0xE8,0xD1,0x40,0x02,0x00,0x83,
0xC4,0x04,0x5D,0x5B,0xC3,0x8A,0x63,0x0C,0xF6,0xC4,0x02,0x75,0x24,0x88,0xE2,0x0F,
0xBE,0x43,0x46,0x50,0x6A,0x03,0x80,0xCA,0x02,0x53,0x88,0x53,0x0C,0xE8,0x1E,0xCE,
0xFD,0xFF,0x83,0xC4,0x0C,0x66,0x85,0xC0,0x74,0x07,0xC7,0x43,0x08,0x00,0x00,0x00,
0x00,0x5D,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,
0x53,0x55,0x89,0xE5,0x8B,0x5D,0x0C,0x8B,0x53,0x10,0x42,0x8B,0x43,0x08,0x89,0x53,
0x10,0x8D,0x50,0xFF,0x89,0x53,0x08,0x85,0xC0,0x7D,0x0C,0x53,0xE8,0x6F,0x40,0x02,
0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,0x53,0xE8,0xF3,0x46,0x02,0x00,0x83,0xC4,0x04,
0x0F,0xBE,0x43,0x46,0x50,0x6A,0x04,0x53,0xE8,0xC3,0xCD,0xFD,0xFF,0x83,0xC4,0x0C,
0x66,0x85,0xC0,0x74,0x07,0xC7,0x43,0x08,0x00,0x00,0x00,0x00,0x5D,0x5B,0xC3,0x90,
0x22,0x4F,0x21,0x00,0x2A,0x4F,0x21,0x00,0x32,0x4F,0x21,0x00,0x3A,0x4F,0x21,0x00,
0x53,0x56,0x55,0x89,0xE5,0x83,0xEC,0x08,0x8B,0x55,0x10,0x66,0x89,0x55,0xF8,0x3C,
0x1E,0x0F,0x83,0x6C,0x00,0x00,0x00,0x8A,0x55,0xF8,0x28,0xC2,0x8A,0x75,0xF9,0xB1,
0x01,0x28,0xC6,0x80,0xF9,0x05,0x73,0x57,0x88,0x4D,0xFC,0xFE,0xC1,0x8A,0x6D,0xFC,
0xFE,0xCD,0x80,0xFD,0x03,0x77,0x29,0x0F,0xB6,0xF5,0x2E,0xFF,0x24,0xB5,0xD0,0x4E,
0x21,0x00,0xB7,0x01,0x88,0xC4,0x30,0xDB,0xEB,0x16,0x30,0xFF,0x88,0xC4,0xB3,0x01,
0xEB,0x0E,0xB7,0xFF,0x88,0xC4,0x30,0xDB,0xEB,0x06,0x30,0xFF,0x88,0xC4,0xB3,0xFF,
0xFE,0xCC,0x80,0xFC,0xFF,0x74,0xBC,0x31,0xF6,0x66,0x89,0xD6,0x80,0xBE,0xE0,0xC4,
0x2E,0x00,0x08,0x74,0x04,0x89,0xD0,0xEB,0x0D,0x00,0xFA,0x00,0xDE,0xEB,0xE1,0xFE,
0xC0,0xEB,0x8C,0x8B,0x45,0xF8,0x89,0xEC,0x5D,0x5E,0x5B,0xC3,0x8D,0x44,0x20,0x00,
0x53,0x55,0x89,0xE5,0x8B,0x45,0x0C,0x31,0xD2,0x66,0x89,0xC2,0x8A,0x92,0xE0,0xC4,
0x2E,0x00,0x30,0xF6,0xFE,0xC8,0x89,0xD3,0x31,0xD2,0x66,0x89,0xC2,0x8A,0x8A,0xE0,
0xC4,0x2D,0x00,0x83,0xC3,0x1E,0x80,0xF9,0x08,0x75,0x5D,0x31,0xC9,0x8A,0x8A,0xE0,
0xC4,0x2E,0x00,0x31,0xD2,0x66,0x89,0xDA,0x39,0xD1,0x7F,0x4C,0x04,0x02,0x31,0xDB,
0x66,0x89,0xC3,0x8A,0x9B,0xE0,0xC4,0x2E,0x00,0x81,0xE3,0xFF,0x00,0x00,0x00,0x39,
0xD3,0x7F,0x35,0xFE,0xC8,0x31,0xDB,0xFE,0xC4,0x66,0x89,0xC3,0x8A,0x9B,0xE0,0xC4,
0x2E,0x00,0x81,0xE3,0xFF,0x00,0x00,0x00,0x39,0xD3,0x7F,0x1C,0x80,0xEC,0x02,0x25,
0xFF,0xFF,0x00,0x00,0x8A,0x80,0xE0,0xC4,0x2E,0x00,0x25,0xFF,0x00,0x00,0x00,0x39,
0xD0,0x7F,0x05,0x30,0xC0,0x5D,0x5B,0xC3,0xB0,0x01,0x5D,0x5B,0xC3,0x8D,0x40,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x0C,0x8B,0x75,0x14,0x0F,0xBF,0x56,0x4C,
0x81,0xC2,0x80,0x00,0x00,0x00,0xC1,0xFA,0x08,0x88,0x55,0xF4,0x0F,0xBF,0x56,0x4E,
0x81,0xC2,0x80,0x00,0x00,0x00,0xC1,0xFA,0x08,0x88,0x55,0xF5,0x31,0xD2,0x66,0x8B,
0x55,0xF4,0xBF,0x02,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xFF,0x85,0xD2,
0x74,0x03,0xFE,0x45,0xF4,0x8A,0x55,0xF4,0x8A,0x46,0x08,0x28,0xC2,0x88,0x55,0xF4,
0x88,0xD6,0xFE,0xC6,0x66,0x8B,0x5E,0x08,0x88,0x75,0xF4,0x66,0x8B,0x56,0x10,0x01,
0xDA,0x89,0x55,0xFC,0xE9,0x85,0x00,0x00,0x00,0x8B,0x5D,0xF4,0x31,0xD2,0xFE,0xCB,
0x66,0x89,0xDA,0x80,0x8A,0xE0,0xC4,0x30,0x00,0x80,0x66,0x8B,0x56,0x08,0xFE,0xC3,
0x89,0x55,0xF8,0xEB,0x3F,0x31,0xFF,0x66,0x89,0xDF,0x80,0xBF,0xE0,0xC4,0x2D,0x00,
0x08,0x75,0x12,0x31,0xD2,0x66,0x89,0xDA,0x52,0xE8,0xD2,0xFE,0xFF,0xFF,0x83,0xC4,
0x04,0x84,0xC0,0x74,0x07,0x80,0x87,0xE0,0xC4,0x2E,0x00,0x30,0x31,0xD2,0x6A,0x08,
0x66,0x89,0xDA,0x52,0xE8,0xC7,0x20,0x01,0x00,0x8B,0x4D,0xF8,0x43,0x49,0x83,0xC4,
0x08,0x89,0x4D,0xF8,0x66,0x83,0x7D,0xF8,0x00,0x75,0xBA,0x31,0xD2,0x66,0x89,0xDA,
0x8A,0x9A,0xE0,0xC4,0x30,0x00,0x80,0xCB,0x80,0x8B,0x45,0xFC,0x88,0x9A,0xE0,0xC4,
0x30,0x00,0x8A,0x7D,0xF5,0x48,0xFE,0xC7,0x89,0x45,0xFC,0x88,0x7D,0xF5,0x66,0x83,
0x7D,0xFC,0x00,0x0F,0x85,0x70,0xFF,0xFF,0xFF,0x56,0xE8,0x11,0x3E,0x02,0x00,0x83,
0xC4,0x04,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x90,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x0C,0x8B,0x7D,0x14,0x0F,0xBF,0x57,0x4C,
0x81,0xC2,0x80,0x00,0x00,0x00,0xC1,0xFA,0x08,0x88,0x55,0xF4,0x0F,0xBF,0x57,0x4E,
0x81,0xC2,0x80,0x00,0x00,0x00,0xC1,0xFA,0x08,0x88,0x55,0xF5,0x31,0xD2,0x66,0x8B,
0x55,0xF4,0xBE,0x02,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xFE,0x85,0xD2,
0x8A,0x65,0xF5,0x66,0x8B,0x57,0x10,0x66,0x8B,0x5F,0x08,0x80,0xC4,0x02,0x01,0xDA,
0x88,0x65,0xF5,0x89,0x55,0xFC,0xE9,0x85,0x00,0x00,0x00,0x8B,0x5D,0xF4,0x31,0xD2,
0xFE,0xCB,0x66,0x89,0xDA,0x80,0x8A,0xE0,0xC4,0x30,0x00,0x80,0x66,0x8B,0x57,0x08,
0xFE,0xC3,0x89,0x55,0xF8,0xEB,0x3F,0x31,0xF6,0x66,0x89,0xDE,0x80,0xBE,0xE0,0xC4,
0x2D,0x00,0x08,0x75,0x12,0x31,0xD2,0x66,0x89,0xDA,0x52,0xE8,0xD0,0xFD,0xFF,0xFF,
0x83,0xC4,0x04,0x84,0xC0,0x74,0x07,0x80,0x86,0xE0,0xC4,0x2E,0x00,0x30,0x31,0xD2,
0x6A,0x08,0x66,0x89,0xDA,0x52,0xE8,0xC5,0x1F,0x01,0x00,0x8B,0x4D,0xF8,0x43,0x49,
0x83,0xC4,0x08,0x89,0x4D,0xF8,0x66,0x83,0x7D,0xF8,0x00,0x75,0xBA,0x31,0xD2,0x66,
0x89,0xDA,0x8A,0x9A,0xE0,0xC4,0x30,0x00,0x80,0xCB,0x80,0x8B,0x45,0xFC,0x88,0x9A,
0xE0,0xC4,0x30,0x00,0x8A,0x7D,0xF5,0x48,0xFE,0xCF,0x89,0x45,0xFC,0x88,0x7D,0xF5,
0x66,0x83,0x7D,0xFC,0x00,0x0F,0x85,0x70,0xFF,0xFF,0xFF,0x57,0xE8,0x0F,0x3D,0x02,
0x00,0x83,0xC4,0x04,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x40,0x00,0x8B,0xC9,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x0C,0x8B,0x75,0x14,0x0F,0xBF,0x56,0x4C,
0x81,0xC2,0x80,0x00,0x00,0x00,0xC1,0xFA,0x08,0x88,0x55,0xF8,0x0F,0xBF,0x56,0x4E,
0x81,0xC2,0x80,0x00,0x00,0x00,0xC1,0xFA,0x08,0x88,0x55,0xF9,0x31,0xD2,0x0F,0xB6,
0x7D,0xF8,0x8A,0x55,0xF9,0x01,0xFA,0xBF,0x02,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,
0x1F,0xF7,0xFF,0x85,0xD2,0x74,0x03,0xFE,0x45,0xF8,0x8B,0x5D,0xF8,0x66,0x8B,0x56,
0x10,0xFE,0xCF,0xEB,0x16,0x31,0xFF,0x66,0x89,0xDF,0x8A,0x8F,0xE0,0xC4,0x30,0x00,
0x4A,0x80,0xC9,0x80,0x43,0x88,0x8F,0xE0,0xC4,0x30,0x00,0x66,0x85,0xD2,0x75,0xE5,
0x66,0x8B,0x56,0x08,0x89,0x55,0xFC,0xEB,0x5E,0x66,0x8B,0x56,0x10,0x8B,0x5D,0xF8,
0xEB,0x3C,0x31,0xFF,0x66,0x89,0xDF,0x80,0xBF,0xE0,0xC4,0x2D,0x00,0x08,0x75,0x12,
0x31,0xD2,0x66,0x89,0xDA,0x52,0xE8,0xC5,0xFC,0xFF,0xFF,0x83,0xC4,0x04,0x84,0xC0,
0x74,0x07,0x80,0x87,0xE0,0xC4,0x2E,0x00,0x30,0x31,0xD2,0x6A,0x08,0x66,0x89,0xDA,
0x52,0xE8,0xBA,0x1E,0x01,0x00,0x8B,0x55,0xF4,0x43,0x4A,0x83,0xC4,0x08,0x89,0x55,
0xF4,0x66,0x83,0x7D,0xF4,0x00,0x75,0xBA,0x8A,0x55,0xF9,0x8B,0x7D,0xFC,0xFE,0xC2,
0x4F,0x88,0x55,0xF9,0x89,0x7D,0xFC,0x66,0x83,0x7D,0xFC,0x00,0x75,0x9B,0x8B,0x5D,
0xF8,0x66,0x8B,0x56,0x10,0xEB,0x16,0x31,0xFF,0x66,0x89,0xDF,0x8A,0x8F,0xE0,0xC4,
0x30,0x00,0x4A,0x80,0xC9,0x80,0x43,0x88,0x8F,0xE0,0xC4,0x30,0x00,0x66,0x85,0xD2,
0x75,0xE5,0x56,0xE8,0xF8,0x3B,0x02,0x00,0x83,0xC4,0x04,0x89,0xEC,0x5D,0x5F,0x5E,
0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8B,0xC0,
0x55,0x89,0xE5,0x8B,0x55,0x08,0x52,0xE8,0xD4,0x3B,0x02,0x00,0x83,0xC4,0x04,0x5D,
0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8D,0x40,0x00,
0x55,0x89,0xE5,0x8B,0x55,0x08,0x52,0xE8,0xB4,0x3B,0x02,0x00,0x83,0xC4,0x04,0x5D,
0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8D,0x40,0x00,
0x55,0x89,0xE5,0x5D,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x55,0x89,0xE5,0x5D,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x53,0x55,0x89,0xE5,0x8B,0x5D,0x0C,0x53,0xE8,0xD3,0x6C,0x02,0x00,0x83,0xC4,0x04,
0x85,0xC0,0x74,0x07,0xC7,0x40,0x08,0x02,0x00,0x00,0x00,0x53,0xE8,0x5F,0x3B,0x02,
0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,
0x53,0x55,0x89,0xE5,0x8B,0x5D,0x0C,0x53,0xE8,0xA3,0x6C,0x02,0x00,0x83,0xC4,0x04,
0x85,0xC0,0x74,0x07,0xC7,0x40,0x08,0x01,0x00,0x00,0x00,0x53,0xE8,0x2F,0x3B,0x02,
0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x08,0x8B,0x75,0x14,0x0F,0xBF,0x46,0x4C,
0x05,0x80,0x00,0x00,0x00,0xC1,0xF8,0x08,0x88,0xC3,0x0F,0xBF,0x46,0x4E,0x05,0x80,
0x00,0x00,0x00,0xC1,0xF8,0x08,0x88,0xC7,0x66,0x8B,0x46,0x1C,0x66,0x89,0x45,0xFC,
0x66,0x8B,0x46,0x1E,0x66,0x8B,0x7E,0x10,0x66,0x89,0x45,0xF8,0xEB,0x36,0x31,0xC0,
0x66,0x89,0xD8,0x8A,0x90,0xE0,0xC4,0x30,0x00,0x80,0xE2,0xF0,0x80,0xCA,0x01,0x88,
0x90,0xE0,0xC4,0x30,0x00,0x31,0xC0,0x66,0x89,0xD8,0x50,0x31,0xC0,0x66,0x89,0xD8,
0x50,0x4F,0xE8,0x49,0x1E,0x01,0x00,0x8A,0x65,0xFC,0x8A,0x55,0xF8,0x00,0xE3,0x83,
0xC4,0x08,0x00,0xD7,0x66,0x85,0xFF,0x75,0xC5,0x56,0xE8,0xA1,0x3A,0x02,0x00,0x83,
0xC4,0x04,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x90,
0x55,0x89,0xE5,0x8B,0x55,0x08,0x52,0xE8,0x84,0x3A,0x02,0x00,0x83,0xC4,0x04,0x5D,
0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8D,0x40,0x00,
0x53,0x56,0x55,0x89,0xE5,0x8B,0x5D,0x10,0x8B,0x43,0x08,0x8D,0x70,0xFF,0x89,0x73,
0x08,0x85,0xC0,0x7C,0x10,0x8D,0x73,0x4C,0x56,0xE8,0xE2,0xBF,0xFD,0xFF,0x83,0xC4,
0x04,0xA8,0x01,0x74,0x0D,0x53,0xE8,0x45,0x3A,0x02,0x00,0x83,0xC4,0x04,0x5D,0x5E,
0x5B,0xC3,0x6A,0x0B,0x6A,0x0A,0x56,0xE8,0xB4,0x5C,0x01,0x00,0x83,0xC4,0x0C,0x85,
0xC0,0x74,0x17,0x66,0x8B,0x73,0x58,0x66,0x89,0x70,0x58,0x66,0x8B,0x73,0x1A,0x66,
0x89,0x70,0x1A,0x0F,0xBE,0x73,0x46,0x89,0x70,0x08,0x0F,0xBF,0x83,0x82,0x00,0x00,
0x00,0x50,0x31,0xC0,0x6A,0x00,0x66,0x8B,0x43,0x1C,0x50,0x83,0xC3,0x4C,0x53,0xE8,
0x8C,0x3A,0x02,0x00,0x83,0xC4,0x10,0x5D,0x5E,0x5B,0xC3,0x8D,0x40,0x00,0x8B,0xC9,
0x55,0x89,0xE5,0x8B,0x55,0x08,0x52,0xE8,0xE4,0x39,0x02,0x00,0x83,0xC4,0x04,0x5D,
0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8D,0x40,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x4C,0x8B,0x45,0x14,0x0F,0xBE,0x40,0x46,
0xC1,0xF8,0x04,0xC1,0xE0,0x08,0x05,0x00,0x02,0x00,0x00,0x89,0x45,0xC8,0x8B,0x45,
0x14,0x8B,0x75,0x14,0x8B,0x5D,0x14,0x8A,0x40,0x46,0x81,0xC6,0x9A,0x00,0x00,0x00,
0x24,0x0F,0x83,0xC3,0x4C,0x0F,0xBE,0xC0,0x56,0xC1,0xE0,0x08,0x53,0x05,0x00,0x02,
0x00,0x00,0xBF,0x55,0x00,0x00,0x00,0x89,0x45,0xC4,0xE8,0x01,0x3F,0x02,0x00,0x31,
0xD2,0xF7,0xF7,0x83,0xC4,0x08,0x56,0x53,0x89,0x45,0xCC,0xE8,0x40,0x3C,0x02,0x00,
0x83,0xC4,0x08,0x8D,0x7D,0xBC,0x8B,0x75,0x14,0x25,0xFF,0xFF,0x00,0x00,0x31,0xD2,
0x8D,0x76,0x4C,0x89,0x45,0xE0,0x89,0x55,0xDC,0xA5,0x66,0xA5,0xEB,0x71,0x0F,0xBF,
0x45,0xBC,0xC1,0xF8,0x08,0x88,0x45,0xF4,0x0F,0xBF,0x45,0xBE,0xC1,0xF8,0x08,0x88,
0x45,0xF5,0x31,0xC0,0x66,0x8B,0x45,0xF4,0x31,0xDB,0x31,0xD2,0x8A,0x98,0xE0,0xC4,
0x2E,0x00,0x8A,0x90,0xE0,0xC4,0x31,0x00,0x01,0xDA,0x89,0xD0,0xC1,0xFA,0x1F,0x2B,
0xC2,0xD1,0xF8,0x89,0xC3,0x85,0xC0,0x7D,0x02,0x31,0xC3,0x81,0xFB,0xFE,0x00,0x00,
0x00,0x7E,0x05,0xBB,0xFE,0x00,0x00,0x00,0x8B,0x45,0xDC,0x6A,0x55,0x88,0x98,0x00,
0x12,0x2C,0x00,0x31,0xC0,0x6A,0x00,0x66,0x8B,0x45,0xE0,0x8B,0x5D,0xDC,0x50,0x8D,
0x45,0xBC,0x43,0x50,0x89,0x5D,0xDC,0xE8,0x74,0x39,0x02,0x00,0x83,0xC4,0x10,0x83,
0x7D,0xDC,0x20,0x7C,0x89,0x31,0xF6,0x89,0x75,0xD0,0x8B,0x75,0x14,0x8D,0x7D,0xB4,
0x8D,0x76,0x4C,0xA5,0x66,0xA5,0xE9,0xA0,0x02,0x00,0x00,0x8B,0x55,0xC4,0x8B,0x7D,
0xC8,0x29,0xFA,0x8B,0x5D,0xCC,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xFB,0x0F,0xAF,0x45,
0xD0,0x01,0xF8,0x89,0xC2,0x0F,0xAF,0xD0,0x0F,0xBF,0x5D,0xB4,0x01,0xC0,0x89,0x55,
0xE8,0x8D,0x90,0x80,0x00,0x00,0x00,0x81,0xC3,0x80,0x00,0x00,0x00,0x31,0xC0,0xC1,
0xFB,0x08,0xA0,0x00,0x12,0x2C,0x00,0x88,0x5D,0xF8,0x89,0x45,0xE4,0x0F,0xBF,0x45,
0xB6,0x89,0xD6,0x05,0x80,0x00,0x00,0x00,0xC1,0xFE,0x08,0xC1,0xF8,0x08,0xC1,0xFA,
0x09,0x88,0x45,0xFC,0x81,0xE3,0xFF,0x00,0x00,0x00,0x29,0xD3,0x88,0x5D,0xEC,0x25,
0xFF,0x00,0x00,0x00,0x29,0xD0,0x88,0x45,0xED,0x8B,0x45,0xEC,0x31,0xFF,0x66,0x89,
0x45,0xF0,0xE9,0x5A,0x01,0x00,0x00,0x31,0xC0,0x89,0x45,0xD8,0x8B,0x45,0xF0,0x66,
0x89,0x45,0xF4,0xE9,0x37,0x01,0x00,0x00,0x31,0xD2,0x31,0xC0,0x8A,0x55,0xF4,0x8A,
0x45,0xF8,0x29,0xC2,0x89,0xD0,0x99,0x31,0xD0,0x29,0xD0,0x89,0xC3,0x3D,0x80,0x00,
0x00,0x00,0x7C,0x0C,0x2D,0x00,0x01,0x00,0x00,0x99,0x31,0xD0,0x29,0xD0,0x89,0xC3,
0x31,0xD2,0x31,0xC0,0x8A,0x55,0xF5,0x8A,0x45,0xFC,0x29,0xC2,0x89,0xD0,0xC1,0xE3,
0x08,0x99,0x31,0xD0,0x29,0xD0,0x89,0xC2,0x3D,0x80,0x00,0x00,0x00,0x7C,0x0A,0x2D,
0x00,0x01,0x00,0x00,0x99,0x31,0xD0,0x29,0xD0,0x0F,0xAF,0xDB,0xC1,0xE0,0x08,0x0F,
0xAF,0xC0,0x8B,0x4D,0xE8,0x8D,0x14,0x03,0x39,0xCA,0x0F,0x8F,0x91,0x00,0x00,0x00,
0x89,0xCA,0x29,0xDA,0x29,0xC2,0x52,0x8B,0x5D,0xE4,0xE8,0x2B,0xE0,0x03,0x00,0xC1,
0xE8,0x05,0x83,0xC4,0x04,0x29,0xC3,0x89,0x45,0xD4,0x85,0xDB,0x7D,0x02,0x31,0xDB,
0x81,0xFB,0xFE,0x00,0x00,0x00,0x7E,0x05,0xBB,0xFE,0x00,0x00,0x00,0x31,0xC0,0x66,
0x8B,0x45,0xF4,0x8A,0x80,0xE0,0xC4,0x2E,0x00,0x25,0xFF,0x00,0x00,0x00,0x39,0xD8,
0x7E,0x1E,0x6A,0x01,0x6A,0x00,0x6A,0x00,0x0F,0xBF,0xC3,0x50,0x31,0xC0,0x8A,0x45,
0xF5,0x50,0x31,0xC0,0x8A,0x45,0xF4,0x50,0xE8,0x53,0x29,0x02,0x00,0x83,0xC4,0x18,
0x8B,0x5D,0xE4,0x03,0x5D,0xD4,0x85,0xDB,0x7D,0x02,0x31,0xDB,0x81,0xFB,0xFE,0x00,
0x00,0x00,0x7E,0x05,0xBB,0xFE,0x00,0x00,0x00,0x31,0xC0,0x66,0x8B,0x45,0xF4,0x31,
0xD2,0x8A,0x90,0xE0,0xC4,0x31,0x00,0x39,0xDA,0x7D,0x06,0x88,0x98,0xE0,0xC4,0x31,
0x00,0x31,0xDB,0x66,0x8B,0x5D,0xF4,0x8A,0x83,0xE0,0xC4,0x31,0x00,0x8A,0xA3,0xE0,
0xC4,0x2E,0x00,0x38,0xE0,0x77,0x1B,0x88,0xE0,0x8A,0x93,0xE0,0xC4,0x30,0x00,0xFE,
0xC8,0x80,0xCA,0x08,0x88,0x83,0xE0,0xC4,0x31,0x00,0x88,0x93,0xE0,0xC4,0x30,0x00,
0xEB,0x07,0x80,0xA3,0xE0,0xC4,0x30,0x00,0xF7,0xFF,0x45,0xD8,0xFE,0x45,0xF4,0x3B,
0x75,0xD8,0x0F,0x8F,0xC0,0xFE,0xFF,0xFF,0x8A,0x7D,0xF1,0xFE,0xC7,0x47,0x88,0x7D,
0xF1,0x39,0xF7,0x0F,0x8C,0x9E,0xFE,0xFF,0xFF,0x46,0x0F,0xBF,0xC6,0x50,0x50,0x8A,
0x45,0xED,0xFE,0xC8,0x25,0xFF,0x00,0x00,0x00,0x50,0x8A,0x45,0xEC,0xFE,0xC8,0x25,
0xFF,0x00,0x00,0x00,0x50,0xE8,0xB6,0x02,0x00,0x00,0x83,0xC4,0x10,0x6A,0x55,0x31,
0xC0,0x6A,0x00,0x66,0x8B,0x45,0xE0,0x50,0x8D,0x45,0xB4,0x50,0xE8,0x3F,0x37,0x02,
0x00,0xB8,0x01,0x00,0x00,0x00,0x83,0xC4,0x10,0xEB,0x0D,0x40,0x8A,0x90,0xFF,0x11,
0x2C,0x00,0x88,0x90,0xFE,0x11,0x2C,0x00,0x83,0xF8,0x20,0x7C,0xEE,0x0F,0xBF,0x45,
0xBC,0xC1,0xF8,0x08,0x88,0x45,0xF4,0x0F,0xBF,0x45,0xBE,0xC1,0xF8,0x08,0x88,0x45,
0xF5,0x31,0xC0,0x66,0x8B,0x45,0xF4,0x31,0xDB,0x31,0xD2,0x8A,0x98,0xE0,0xC4,0x2E,
0x00,0x8A,0x90,0xE0,0xC4,0x31,0x00,0x01,0xDA,0x89,0xD0,0xC1,0xFA,0x1F,0x2B,0xC2,
0xD1,0xF8,0x89,0xC3,0x85,0xC0,0x7D,0x02,0x31,0xC3,0x81,0xFB,0xFE,0x00,0x00,0x00,
0x7E,0x05,0xBB,0xFE,0x00,0x00,0x00,0x6A,0x55,0x31,0xC0,0x6A,0x00,0x66,0x8B,0x45,
0xE0,0x8B,0x75,0xD0,0x50,0x8D,0x45,0xBC,0x46,0x50,0x88,0x1D,0x1F,0x12,0x2C,0x00,
0x89,0x75,0xD0,0xE8,0xB8,0x36,0x02,0x00,0x83,0xC4,0x10,0x8B,0x45,0xD0,0x3B,0x45,
0xCC,0x0F,0x8C,0x54,0xFD,0xFF,0xFF,0x8B,0x45,0x14,0x50,0xE8,0x10,0x36,0x02,0x00,
0x83,0xC4,0x04,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x24,0x8B,0x45,0x14,0x0F,0xBE,0x40,0x46,
0x89,0xC2,0x8D,0x04,0x85,0x00,0x00,0x00,0x00,0x29,0xD0,0x8B,0x5D,0x14,0x89,0x45,
0xEC,0x8B,0x45,0x14,0x0F,0xBE,0x5B,0x43,0x0F,0xBF,0x40,0x4C,0x8D,0x34,0x5D,0x00,
0x00,0x00,0x00,0xC1,0xF8,0x08,0x29,0xD8,0x8B,0x4D,0x14,0x89,0xC3,0x8B,0x45,0x14,
0x0F,0xBE,0x49,0x44,0x0F,0xBF,0x40,0x4E,0x8D,0x3C,0x4D,0x00,0x00,0x00,0x00,0xC1,
0xF8,0x08,0x29,0xC8,0x88,0xC7,0x31,0xC0,0x66,0x89,0xF8,0x50,0x31,0xC0,0x66,0x89,
0xF0,0x50,0x31,0xC0,0x88,0xF8,0x89,0x45,0xDC,0x50,0x31,0xC0,0x88,0xD8,0x50,0x89,
0x45,0xE0,0xE8,0xD9,0x44,0x01,0x00,0x83,0xC4,0x10,0x57,0x56,0x89,0x45,0xE4,0x8B,
0x45,0xDC,0x50,0x8B,0x55,0xE0,0x52,0x66,0x89,0x5D,0xF8,0xE8,0xF0,0x44,0x01,0x00,
0x83,0xC4,0x10,0x31,0xC9,0x89,0x45,0xE8,0x89,0x4D,0xF0,0xE9,0xE1,0x00,0x00,0x00,
0x31,0xC0,0x89,0x45,0xF4,0x8B,0x45,0xF8,0x66,0x89,0x45,0xFC,0xE9,0xB8,0x00,0x00,
0x00,0x8B,0x45,0xE4,0x2B,0x45,0xEC,0x85,0xC0,0x7D,0x02,0x31,0xC0,0x3D,0xFE,0x00,
0x00,0x00,0x7E,0x05,0xB8,0xFE,0x00,0x00,0x00,0x31,0xD2,0x66,0x8B,0x55,0xFC,0x8A,
0x92,0xE0,0xC4,0x2E,0x00,0x81,0xE2,0xFF,0x00,0x00,0x00,0x39,0xC2,0x7E,0x1C,0x6A,
0x00,0x6A,0x00,0x6A,0x00,0x98,0x50,0x31,0xC0,0x8A,0x45,0xFD,0x50,0x31,0xC0,0x8A,
0x45,0xFC,0x50,0xE8,0xE8,0x26,0x02,0x00,0x83,0xC4,0x18,0x8B,0x45,0xE8,0x03,0x45,
0xEC,0x85,0xC0,0x7D,0x02,0x31,0xC0,0x3D,0xFE,0x00,0x00,0x00,0x7E,0x05,0xB8,0xFE,
0x00,0x00,0x00,0x31,0xD2,0x66,0x8B,0x55,0xFC,0x31,0xC9,0x8A,0x8A,0xE0,0xC4,0x31,
0x00,0x39,0xC8,0x7E,0x06,0x88,0x82,0xE0,0xC4,0x31,0x00,0x31,0xC0,0x66,0x8B,0x45,
0xFC,0x8A,0x90,0xE0,0xC4,0x31,0x00,0x8A,0xB0,0xE0,0xC4,0x2E,0x00,0x38,0xF2,0x77,
0x1B,0x88,0xF2,0x8A,0x88,0xE0,0xC4,0x30,0x00,0xFE,0xCA,0x80,0xC9,0x08,0x88,0x90,
0xE0,0xC4,0x31,0x00,0x88,0x88,0xE0,0xC4,0x30,0x00,0xEB,0x07,0x80,0xA0,0xE0,0xC4,
0x30,0x00,0xF7,0xFF,0x45,0xF4,0xFE,0x45,0xFC,0x3B,0x75,0xF4,0x0F,0x8F,0x3F,0xFF,
0xFF,0xFF,0x8B,0x4D,0xF0,0x8A,0x65,0xF9,0x41,0xFE,0xC4,0x89,0x4D,0xF0,0x88,0x65,
0xF9,0x3B,0x7D,0xF0,0x0F,0x8F,0x16,0xFF,0xFF,0xFF,0x89,0xF8,0x40,0x98,0x50,0x89,
0xF0,0x40,0x98,0x50,0x88,0xF8,0xFE,0xC8,0x25,0xFF,0x00,0x00,0x00,0x50,0x88,0xD8,
0xFE,0xC8,0x25,0xFF,0x00,0x00,0x00,0x50,0xE8,0x43,0x00,0x00,0x00,0x31,0xC0,0x83,
0xC4,0x10,0x66,0x89,0xF8,0x50,0x31,0xC0,0x66,0x89,0xF0,0x50,0x31,0xC0,0x88,0xF8,
0x50,0x31,0xC0,0x88,0xD8,0x50,0xE8,0x85,0xF1,0x00,0x00,0x83,0xC4,0x10,0x8B,0x55,
0x14,0x52,0xE8,0x29,0x34,0x02,0x00,0x83,0xC4,0x04,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,
0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8D,0x40,0x00,
0x53,0x56,0x55,0x89,0xE5,0x83,0xEC,0x0C,0x8A,0x45,0x10,0x31,0xD2,0x88,0x45,0xFC,
0x8A,0x45,0x14,0x89,0x55,0xF8,0x88,0x45,0xFD,0xE9,0x77,0x00,0x00,0x00,0x8B,0x5D,
0xFC,0x02,0x5D,0xF8,0x31,0xC0,0x66,0x89,0xD8,0x8A,0x90,0xE0,0xC4,0x30,0x00,0xF6,
0xC2,0x08,0x74,0x27,0x80,0xE2,0xF8,0x80,0xCA,0x01,0x88,0x90,0xE0,0xC4,0x30,0x00,
0xC6,0x80,0xE0,0xC4,0x2D,0x00,0x01,0x31,0xC0,0x66,0x89,0xD8,0x50,0x31,0xC0,0x66,
0x89,0xD8,0x50,0xE8,0x48,0x17,0x01,0x00,0x83,0xC4,0x08,0x8A,0x4D,0x1C,0x31,0xC0,
0x00,0xCF,0x66,0x89,0xD8,0x8A,0xA8,0xE0,0xC4,0x30,0x00,0xF6,0xC5,0x08,0x74,0x22,
0x88,0xEA,0x80,0xE2,0xF8,0x80,0xCA,0x01,0x88,0x90,0xE0,0xC4,0x30,0x00,0x31,0xC0,
0x66,0x89,0xD8,0x50,0x31,0xC0,0x66,0x89,0xD8,0x50,0xE8,0x11,0x17,0x01,0x00,0x83,
0xC4,0x08,0xFF,0x45,0xF8,0x0F,0xBF,0x45,0x18,0x3B,0x45,0xF8,0x7F,0x80,0x31,0xF6,
0x89,0x75,0xF4,0x0F,0xBF,0x45,0x1C,0x3B,0x45,0xF4,0x7F,0x06,0x89,0xEC,0x5D,0x5E,
0x5B,0xC3,0x8B,0x5D,0xFC,0x02,0x7D,0xF4,0x31,0xC0,0x66,0x89,0xD8,0x8A,0x90,0xE0,
0xC4,0x30,0x00,0xF6,0xC2,0x08,0x74,0x27,0x80,0xE2,0xF8,0x80,0xCA,0x01,0x88,0x90,
0xE0,0xC4,0x30,0x00,0xC6,0x80,0xE0,0xC4,0x2D,0x00,0x01,0x31,0xC0,0x66,0x89,0xD8,
0x50,0x31,0xC0,0x66,0x89,0xD8,0x50,0xE8,0xB4,0x16,0x01,0x00,0x83,0xC4,0x08,0x8A,
0x4D,0x18,0x31,0xC0,0x00,0xCB,0x66,0x89,0xD8,0x8A,0xA8,0xE0,0xC4,0x30,0x00,0xF6,
0xC5,0x08,0x74,0x22,0x88,0xEA,0x80,0xE2,0xF8,0x80,0xCA,0x01,0x88,0x90,0xE0,0xC4,
0x30,0x00,0x31,0xC0,0x66,0x89,0xD8,0x50,0x31,0xC0,0x66,0x89,0xD8,0x50,0xE8,0x7D,
0x16,0x01,0x00,0x83,0xC4,0x08,0xFF,0x45,0xF4,0x0F,0xBF,0x45,0x1C,0x3B,0x45,0xF4,
0x7F,0x80,0x89,0xEC,0x5D,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8B,0xD2,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x40,0x8B,0x5D,0x14,0x8B,0x53,0x08,0x4A,
0x89,0x53,0x08,0x85,0xD2,0x0F,0x8E,0x6B,0x02,0x00,0x00,0x0F,0xBF,0x83,0x9A,0x00,
0x00,0x00,0x0F,0xBF,0x4B,0x4C,0x0F,0xBF,0x53,0x4E,0x8D,0x34,0x45,0x00,0x00,0x00,
0x00,0x81,0xC2,0x80,0x00,0x00,0x00,0x81,0xC1,0x80,0x00,0x00,0x00,0xC1,0xFA,0x08,
0xC1,0xF9,0x08,0x28,0xC2,0x28,0xC1,0x88,0x55,0xFD,0x8A,0x53,0x46,0x88,0x4D,0xFC,
0x80,0xFA,0x01,0x72,0x10,0x76,0x64,0x80,0xFA,0x02,0x0F,0x84,0x18,0x02,0x00,0x00,
0xE9,0x2A,0x02,0x00,0x00,0x84,0xD2,0x0F,0x85,0x22,0x02,0x00,0x00,0x31,0xC0,0x66,
0x89,0xF0,0x50,0x50,0x31,0xC0,0x8A,0x45,0xFD,0x50,0x0F,0xB6,0xF9,0x57,0x89,0x45,
0xE4,0xE8,0x9A,0x41,0x01,0x00,0x83,0xC4,0x10,0x56,0x56,0x66,0x89,0x43,0x50,0x8B,
0x45,0xE4,0x50,0x57,0xE8,0x17,0x42,0x01,0x00,0x66,0x89,0x83,0x9E,0x00,0x00,0x00,
0x0F,0xBF,0xD0,0x0F,0xBF,0x43,0x50,0x29,0xC2,0x83,0xC4,0x10,0x85,0xD2,0x0F,0x9E,
0xC0,0xFE,0xC0,0x88,0x43,0x46,0xE9,0xD4,0x01,0x00,0x00,0x89,0xC7,0x0F,0xBF,0x43,
0x50,0xC1,0xE7,0x08,0x89,0x45,0xEC,0x8D,0x0C,0xBD,0x00,0x00,0x00,0x00,0x8B,0x55,
0xEC,0x29,0xF9,0x0F,0xBF,0x83,0x9E,0x00,0x00,0x00,0xC1,0xE1,0x06,0x89,0x45,0xF0,
0xC1,0xF9,0x08,0x29,0xD0,0x89,0x4D,0xD4,0x89,0x45,0xC8,0x31,0xC9,0x8B,0x45,0xFC,
0x89,0x4D,0xE0,0x66,0x89,0x45,0xF8,0x3B,0x75,0xE0,0x7F,0x07,0x89,0xEC,0x5D,0x5F,
0x5E,0x5B,0xC3,0x31,0xC0,0x89,0x45,0xDC,0x8A,0x45,0xFC,0x88,0x45,0xF8,0xE9,0x46,
0x01,0x00,0x00,0x31,0xC0,0x8A,0x45,0xF8,0xC1,0xE0,0x08,0x66,0x89,0x45,0xC0,0x31,
0xC0,0x8A,0x45,0xF9,0xC1,0xE0,0x08,0x66,0x89,0x45,0xC2,0x8D,0x45,0xC0,0x50,0x8D,
0x43,0x4C,0x31,0xD2,0x50,0x89,0x55,0xD0,0xE8,0x13,0x37,0x02,0x00,0x83,0xC4,0x08,
0x89,0x45,0xCC,0x39,0xF8,0x0F,0x8D,0xFF,0x00,0x00,0x00,0x31,0xD2,0x66,0x8B,0x55,
0xF8,0x31,0xC9,0x8A,0x8A,0xE0,0xC4,0x2E,0x00,0x89,0x4D,0xE8,0x8A,0x92,0xE0,0xC4,
0x31,0x00,0x81,0xE2,0xFF,0x00,0x00,0x00,0xC1,0xE0,0x0A,0x89,0x55,0xF4,0x89,0xC2,
0xC1,0xFA,0x1F,0xF7,0xFF,0x8B,0x04,0x85,0x50,0xCF,0x2A,0x00,0x05,0x00,0x00,0x01,
0x00,0x8B,0x4D,0xC8,0xD1,0xF8,0x0F,0xAF,0xC1,0xC1,0xF8,0x10,0x89,0x45,0xD8,0x8B,
0x45,0xEC,0x8B,0x55,0xD8,0x01,0xD0,0x89,0xC1,0x3D,0xFE,0x00,0x00,0x00,0x7E,0x05,
0xB9,0xFE,0x00,0x00,0x00,0x8B,0x45,0xE8,0x39,0xC1,0x7E,0x43,0x29,0xC1,0x89,0xCA,
0x89,0xC8,0xC1,0xFA,0x1F,0xF7,0x7B,0x08,0x8B,0x4D,0xE8,0x8B,0x55,0xD4,0x01,0xC1,
0x8B,0x45,0xCC,0x6A,0x01,0x39,0xD0,0x0F,0x9E,0xC0,0x25,0xFF,0x00,0x00,0x00,0x25,
0xFF,0x00,0x00,0x00,0x50,0x6A,0x00,0x0F,0xBF,0xC1,0x50,0x31,0xC0,0x8A,0x45,0xF9,
0x50,0x31,0xC0,0x8A,0x45,0xF8,0x50,0xE8,0xC4,0x22,0x02,0x00,0x83,0xC4,0x18,0x8B,
0x4D,0xF0,0x8B,0x45,0xD8,0x8B,0x55,0xD0,0x29,0xC1,0x01,0xD1,0x85,0xC9,0x7D,0x02,
0x31,0xC9,0x8B,0x45,0xF4,0x39,0xC1,0x7D,0x1D,0x29,0xC8,0x89,0xC2,0x8B,0x4B,0x08,
0xC1,0xFA,0x1F,0xF7,0xF9,0x8B,0x4D,0xF4,0x29,0xC1,0x31,0xC0,0x66,0x8B,0x45,0xF8,
0x88,0x88,0xE0,0xC4,0x31,0x00,0x31,0xC9,0x66,0x8B,0x4D,0xF8,0x8A,0x81,0xE0,0xC4,
0x31,0x00,0x3A,0x81,0xE0,0xC4,0x2E,0x00,0x77,0x09,0x80,0x89,0xE0,0xC4,0x30,0x00,
0x08,0xEB,0x07,0x80,0xA1,0xE0,0xC4,0x30,0x00,0xF7,0x8B,0x45,0xDC,0x8A,0x4D,0xF8,
0x40,0xFE,0xC1,0x89,0x45,0xDC,0x88,0x4D,0xF8,0x3B,0x75,0xDC,0x0F,0x8F,0xB1,0xFE,
0xFF,0xFF,0xFF,0x45,0xE0,0xFE,0x45,0xF9,0x3B,0x75,0xE0,0x0F,0x8F,0x92,0xFE,0xFF,
0xFF,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0xC7,0x43,0x08,0x00,0x00,0x00,0x00,0x89,
0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x53,0xE8,0x44,0x30,0x02,0x00,0x83,0xC4,0x04,0x89,
0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x54,0x22,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x34,0x8B,0x5D,0x14,0x8B,0x53,0x08,0x4A,
0x89,0x53,0x08,0x85,0xD2,0x0F,0x8E,0x87,0x03,0x00,0x00,0x0F,0xBF,0x83,0x9A,0x00,
0x00,0x00,0x0F,0xBF,0x4B,0x4E,0x8D,0x14,0x00,0x89,0x55,0xF4,0x0F,0xBF,0x53,0x4C,
0x81,0xC1,0x80,0x00,0x00,0x00,0x81,0xC2,0x80,0x00,0x00,0x00,0xC1,0xFA,0x08,0xC1,
0xF9,0x08,0x28,0xC2,0x89,0x4D,0xEC,0x88,0x55,0xF8,0x8A,0x55,0xEC,0x28,0xC2,0x88,
0x55,0xF9,0x8A,0x53,0x46,0x80,0xFA,0x01,0x72,0x14,0x0F,0x86,0x27,0x01,0x00,0x00,
0x80,0xFA,0x02,0x0F,0x84,0x08,0x03,0x00,0x00,0xE9,0x3D,0x03,0x00,0x00,0x84,0xD2,
0x0F,0x85,0x35,0x03,0x00,0x00,0x8A,0x43,0x40,0x3C,0x54,0x0F,0x82,0x82,0x00,0x00,
0x00,0x76,0x06,0x3C,0x55,0x74,0x3F,0xEB,0x7A,0x8B,0x75,0xF4,0x31,0xC0,0x56,0x8A,
0x45,0xF9,0x56,0x89,0x45,0xF0,0x50,0x31,0xC0,0x8A,0x45,0xF8,0x50,0x89,0x45,0xEC,
0xE8,0x6B,0x3F,0x01,0x00,0x83,0xC4,0x10,0x8B,0x4D,0xF4,0x51,0x51,0x8B,0x55,0xF0,
0x52,0x8B,0x4D,0xEC,0x51,0x89,0xC6,0x89,0xC7,0xE8,0xF2,0x3E,0x01,0x00,0x29,0xC6,
0x83,0xC4,0x10,0x4E,0xEB,0x3D,0x31,0xF6,0x66,0x8B,0x75,0xF4,0x31,0xC0,0x56,0x8A,
0x45,0xF9,0x56,0x89,0x45,0xEC,0x50,0x31,0xC0,0x8A,0x45,0xF8,0x50,0x89,0x45,0xF0,
0xE8,0x9B,0x3E,0x01,0x00,0x83,0xC4,0x10,0x56,0x56,0x8B,0x55,0xEC,0x52,0x8B,0x4D,
0xF0,0x89,0xC7,0x51,0x89,0xFE,0xE8,0xE5,0x3E,0x01,0x00,0x29,0xF0,0x83,0xC4,0x10,
0x8D,0x70,0xFF,0x85,0xF6,0x0F,0x8E,0x71,0x00,0x00,0x00,0x66,0x8B,0x53,0x50,0x66,
0x85,0xD2,0x74,0x29,0x0F,0xBF,0xC2,0x8D,0x0C,0x85,0x00,0x00,0x00,0x00,0x29,0xC1,
0x89,0xC8,0xC1,0xE1,0x04,0x89,0xF2,0x01,0xC1,0x0F,0xAF,0xD1,0x89,0xD0,0xC1,0xFA,
0x1F,0xC1,0xE2,0x08,0x1B,0xC2,0xC1,0xF8,0x08,0x89,0xC6,0xEB,0x1B,0x66,0x69,0x43,
0x14,0xA1,0x24,0x05,0xDF,0x24,0x00,0x00,0x66,0x89,0x43,0x14,0x31,0xC0,0x31,0xD2,
0x66,0x8B,0x43,0x14,0xF7,0xF6,0x89,0xD6,0x8A,0x63,0x40,0x66,0x89,0xBB,0x9E,0x00,
0x00,0x00,0x80,0xFC,0x54,0x75,0x04,0x29,0xF7,0xEB,0x02,0x01,0xF7,0x66,0x89,0x7B,
0x50,0xC6,0x43,0x46,0x01,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0xC6,0x43,0x46,0x02,
0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0xC1,0xE0,0x08,0x89,0x45,0xE8,0x8D,0x0C,0x85,
0x00,0x00,0x00,0x00,0x0F,0xBF,0xBB,0x9E,0x00,0x00,0x00,0x29,0xC1,0x0F,0xBF,0x43,
0x50,0x29,0xF8,0xC1,0xE1,0x06,0x99,0x31,0xD0,0x29,0xD0,0x89,0xC6,0x31,0xC0,0xC1,
0xF9,0x08,0x89,0x45,0xE4,0x8B,0x45,0xF8,0x89,0x4D,0xD4,0x66,0x89,0x45,0xFC,0x8B,
0x45,0xE4,0x3B,0x45,0xF4,0x7C,0x07,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x31,0xD2,
0x8A,0x45,0xF8,0x89,0x55,0xE0,0x88,0x45,0xFC,0xE9,0x65,0x01,0x00,0x00,0x31,0xC0,
0x8A,0x45,0xFC,0xC1,0xE0,0x08,0x66,0x89,0x45,0xCC,0x31,0xC0,0x8A,0x45,0xFD,0xC1,
0xE0,0x08,0x66,0x89,0x45,0xCE,0x8D,0x45,0xCC,0x50,0x8D,0x43,0x4C,0x50,0xE8,0xAD,
0x33,0x02,0x00,0x8B,0x4D,0xE8,0x83,0xC4,0x08,0x89,0x45,0xD8,0x39,0xC8,0x0F,0x8D,
0x20,0x01,0x00,0x00,0xC1,0xE0,0x0A,0x89,0xC2,0xC1,0xFA,0x1F,0xF7,0xF9,0x8B,0x0C,
0x85,0x50,0xCF,0x2A,0x00,0x81,0xC1,0x00,0x00,0x01,0x00,0xD1,0xF9,0x0F,0xAF,0xCE,
0x8A,0x43,0x40,0xC1,0xF9,0x10,0x3C,0x54,0x0F,0x82,0xBE,0x00,0x00,0x00,0x76,0x09,
0x3C,0x55,0x74,0x4D,0xE9,0xB3,0x00,0x00,0x00,0x89,0xF8,0x29,0xC8,0x89,0xC1,0x85,
0xC0,0x7D,0x02,0x31,0xC1,0x31,0xC0,0x66,0x8B,0x45,0xFC,0x89,0x45,0xDC,0x8B,0x55,
0xDC,0x31,0xC0,0x8A,0x82,0xE0,0xC4,0x31,0x00,0x89,0x45,0xF0,0x29,0xC8,0x89,0xC2,
0x8B,0x4B,0x08,0xC1,0xFA,0x1F,0xF7,0xF9,0x8B,0x4D,0xF0,0x29,0xC1,0x3B,0x4D,0xF0,
0x0F,0x8D,0x76,0x00,0x00,0x00,0x8B,0x45,0xDC,0x88,0x88,0xE0,0xC4,0x31,0x00,0xEB,
0x6B,0x01,0xF9,0x81,0xF9,0xFE,0x00,0x00,0x00,0x7E,0x05,0xB9,0xFE,0x00,0x00,0x00,
0x31,0xC0,0x66,0x8B,0x45,0xFC,0x8A,0x80,0xE0,0xC4,0x2E,0x00,0x25,0xFF,0x00,0x00,
0x00,0x29,0xC1,0x89,0x45,0xF0,0x89,0xCA,0x89,0xC8,0xC1,0xFA,0x1F,0xF7,0x7B,0x08,
0x8B,0x4D,0xF0,0x01,0xC1,0x3B,0x4D,0xF0,0x7E,0x32,0x8B,0x45,0xD8,0x8B,0x55,0xD4,
0x6A,0x01,0x39,0xD0,0x0F,0x9E,0xC0,0x25,0xFF,0x00,0x00,0x00,0x25,0xFF,0x00,0x00,
0x00,0x50,0x6A,0x00,0x0F,0xBF,0xC1,0x50,0x31,0xC0,0x8A,0x45,0xFD,0x50,0x31,0xC0,
0x8A,0x45,0xFC,0x50,0xE8,0x17,0x1F,0x02,0x00,0x83,0xC4,0x18,0x31,0xC9,0x66,0x8B,
0x4D,0xFC,0x8A,0x81,0xE0,0xC4,0x31,0x00,0x8A,0x91,0xE0,0xC4,0x2E,0x00,0x38,0xD0,
0x77,0x1B,0x88,0xD0,0x8A,0xB1,0xE0,0xC4,0x30,0x00,0xFE,0xC8,0x80,0xCE,0x08,0x88,
0x81,0xE0,0xC4,0x31,0x00,0x88,0xB1,0xE0,0xC4,0x30,0x00,0xEB,0x07,0x80,0xA1,0xE0,
0xC4,0x30,0x00,0xF7,0x8B,0x4D,0xE0,0x8A,0x65,0xFC,0x41,0xFE,0xC4,0x89,0x4D,0xE0,
0x88,0x65,0xFC,0x8B,0x45,0xE0,0x3B,0x45,0xF4,0x0F,0x8C,0x8F,0xFE,0xFF,0xFF,0x8B,
0x4D,0xE4,0x8A,0x55,0xFD,0x41,0xFE,0xC2,0x89,0x4D,0xE4,0x88,0x55,0xFD,0x8B,0x45,
0xE4,0x3B,0x45,0xF4,0x0F,0x8C,0x64,0xFE,0xFF,0xFF,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,
0xC3,0x8A,0x43,0x40,0x3C,0x54,0x75,0x1C,0x31,0xC0,0x66,0x8B,0x45,0xF4,0x50,0x50,
0x31,0xC0,0x8A,0x45,0xF9,0x50,0x31,0xC0,0x8A,0x45,0xF8,0x50,0xE8,0xEF,0xE9,0x00,
0x00,0x83,0xC4,0x10,0xC7,0x43,0x08,0x00,0x00,0x00,0x00,0x89,0xEC,0x5D,0x5F,0x5E,
0x5B,0xC3,0x53,0xE8,0x88,0x2C,0x02,0x00,0x83,0xC4,0x04,0x89,0xEC,0x5D,0x5F,0x5E,
0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8B,0xC0,
0x55,0x89,0xE5,0x8B,0x55,0x08,0x52,0xE8,0x64,0x2C,0x02,0x00,0x83,0xC4,0x04,0x5D,
0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8D,0x40,0x00,
0x53,0x55,0x89,0xE5,0x8B,0x5D,0x0C,0x8B,0x53,0x08,0x8D,0x42,0xFF,0x89,0x43,0x08,
0x85,0xD2,0x7C,0x10,0x8D,0x43,0x4C,0x50,0xE8,0xC3,0xB1,0xFD,0xFF,0x83,0xC4,0x04,
0xA8,0x01,0x74,0x0C,0x53,0xE8,0x26,0x2C,0x02,0x00,0x83,0xC4,0x04,0x5D,0x5B,0xC3,
0x66,0x69,0x43,0x14,0xA1,0x24,0x05,0xDF,0x24,0x00,0x00,0xB9,0x0F,0x00,0x00,0x00,
0x66,0x89,0x43,0x14,0x31,0xC0,0x31,0xD2,0x66,0x8B,0x43,0x14,0xF7,0xF1,0x83,0xC2,
0x0A,0x6A,0x00,0x0F,0xBF,0xC2,0x50,0x68,0x00,0x04,0x00,0x00,0x6A,0x00,0x53,0xE8,
0x9C,0x1F,0x02,0x00,0x83,0xC4,0x14,0x84,0xC0,0x75,0x3C,0x31,0xC0,0x66,0x8B,0x43,
0x2A,0x50,0x6A,0x00,0x53,0xE8,0x46,0xB9,0xFD,0xFF,0x8B,0x15,0xA0,0x51,0x2A,0x00,
0x89,0xD8,0x81,0xC2,0x8E,0x6E,0x00,0x00,0x29,0xD0,0x89,0xC2,0xB9,0xA8,0x00,0x00,
0x00,0xC1,0xFA,0x1F,0xF7,0xF9,0x83,0xC4,0x0C,0x6A,0x0A,0x6A,0xFF,0x98,0x50,0xE8,
0xEC,0x90,0x03,0x00,0x83,0xC4,0x0C,0x0F,0xBF,0x83,0x82,0x00,0x00,0x00,0x50,0x31,
0xC0,0x6A,0x00,0x66,0x8B,0x43,0x1C,0x50,0x83,0xC3,0x4C,0x53,0xE8,0x1F,0x2C,0x02,
0x00,0x83,0xC4,0x10,0x5D,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x10,0x8B,0x5D,0x14,0x8A,0x63,0x0C,0xF6,
0xC4,0x02,0x75,0x30,0x88,0xE2,0xA1,0xA0,0x51,0x2A,0x00,0x80,0xCA,0x02,0x05,0x8E,
0x6E,0x00,0x00,0x88,0x53,0x0C,0x89,0xDA,0x29,0xC2,0xBE,0xA8,0x00,0x00,0x00,0x89,
0xD0,0xC1,0xFA,0x1F,0xF7,0xFE,0x6A,0x15,0x6A,0xFF,0x98,0x50,0xE8,0x7F,0x90,0x03,
0x00,0x83,0xC4,0x0C,0x8B,0x53,0x08,0x85,0xD2,0x7E,0x42,0x8D,0x4A,0xFF,0x89,0x4B,
0x08,0x85,0xC9,0x75,0x38,0x53,0xE8,0x25,0x2B,0x02,0x00,0x8B,0x15,0xA0,0x51,0x2A,
0x00,0x81,0xC2,0x8E,0x6E,0x00,0x00,0x29,0xD3,0x89,0xDA,0xBB,0xA8,0x00,0x00,0x00,
0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xFB,0x83,0xC4,0x04,0x6A,0x14,0x6A,0xFF,0x98,0x50,
0xE8,0x3B,0x90,0x03,0x00,0x83,0xC4,0x0C,0xE9,0x03,0x01,0x00,0x00,0x8B,0x3D,0xA0,
0x51,0x2A,0x00,0x31,0xD2,0x81,0xC7,0xDE,0x2B,0x00,0x00,0x89,0x55,0xFC,0xE9,0xC4,
0x00,0x00,0x00,0x31,0xF6,0x66,0x8B,0x77,0x0A,0x8B,0x34,0xB5,0xE4,0xB3,0x2B,0x00,
0x56,0x53,0xE8,0x79,0xB2,0xFD,0xFF,0x83,0xC4,0x08,0x85,0xC0,0x0F,0x84,0x98,0x00,
0x00,0x00,0x8B,0x45,0xF8,0x50,0x8D,0x46,0x4C,0x50,0xE8,0x81,0x2D,0x02,0x00,0x83,
0xC4,0x08,0x25,0xFF,0xFF,0x00,0x00,0x50,0x31,0xC0,0x66,0x8B,0x46,0x1C,0x50,0xE8,
0x3C,0x2E,0x02,0x00,0x83,0xC4,0x08,0x66,0x3D,0xAA,0x00,0x73,0x6D,0x8B,0x83,0xA0,
0x00,0x00,0x00,0x89,0x45,0xF0,0x8D,0x83,0x9A,0x00,0x00,0x00,0x50,0x89,0x45,0xF4,
0xE8,0xAB,0xB7,0xFD,0xFF,0x8B,0x55,0xF0,0x66,0x8B,0x52,0x0C,0x01,0xD0,0x8B,0x15,
0xA0,0x51,0x2A,0x00,0x66,0x89,0x83,0x9E,0x00,0x00,0x00,0x81,0xC2,0x8E,0x6E,0x00,
0x00,0x89,0xD8,0x29,0xD0,0x89,0xC2,0xB9,0xA8,0x00,0x00,0x00,0xC1,0xFA,0x1F,0xF7,
0xF9,0x83,0xC4,0x04,0x6A,0x16,0x6A,0xFF,0x98,0x50,0xE8,0x81,0x8F,0x03,0x00,0x83,
0xC4,0x0C,0x8B,0x4D,0xF4,0x51,0x56,0xE8,0x14,0x28,0x02,0x00,0x83,0xC4,0x08,0x6A,
0x06,0x56,0xE8,0x19,0x73,0x02,0x00,0x83,0xC4,0x08,0x8B,0x4D,0xFC,0x41,0x81,0xC7,
0x4C,0x08,0x00,0x00,0x89,0x4D,0xFC,0x8D,0x53,0x4C,0xA1,0xA0,0x51,0x2A,0x00,0x89,
0x55,0xF8,0x66,0x8B,0x70,0x0E,0x66,0x3B,0x75,0xFC,0x0F,0x87,0x23,0xFF,0xFF,0xFF,
0x8B,0x75,0xF8,0x56,0xE8,0x27,0xB7,0xFD,0xFF,0x83,0xC4,0x04,0x66,0x89,0x43,0x50,
0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x8B,0x5D,0x14,0x31,0xC0,0x66,0x8B,0x43,0x28,0x8B,
0x15,0xE4,0xB3,0x2B,0x00,0x8B,0x04,0x85,0xE4,0xB3,0x2B,0x00,0x39,0xD0,0x76,0x75,
0x83,0x78,0x08,0x01,0x75,0x0E,0x53,0xE8,0xB4,0x29,0x02,0x00,0x83,0xC4,0x04,0x5D,
0x5F,0x5E,0x5B,0xC3,0xBF,0x98,0xC3,0x2B,0x00,0x8D,0x70,0x4C,0xA5,0x66,0xA5,0x0F,
0xBF,0x83,0x82,0x00,0x00,0x00,0x50,0x31,0xC0,0x66,0x8B,0x43,0x1E,0x50,0x31,0xC0,
0x66,0x8B,0x43,0x1C,0x50,0x68,0x98,0xC3,0x2B,0x00,0xE8,0x11,0x2A,0x02,0x00,0x66,
0x8B,0x43,0x1C,0x05,0x2D,0x00,0x00,0x00,0x83,0xC4,0x10,0x80,0xE4,0x07,0x68,0x98,
0xC3,0x2B,0x00,0x66,0x89,0x43,0x1C,0xE8,0x94,0xB6,0xFD,0xFF,0x83,0xC4,0x04,0x68,
0x98,0xC3,0x2B,0x00,0xFE,0xC4,0x53,0x66,0xA3,0x9C,0xC3,0x2B,0x00,0xE8,0x2E,0x27,
0x02,0x00,0x83,0xC4,0x08,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,
0x53,0x55,0x89,0xE5,0x8B,0x45,0x0C,0xFF,0x40,0x10,0x8B,0x50,0x08,0x8D,0x5A,0xFF,
0x89,0x58,0x08,0x85,0xD2,0x7D,0x09,0x50,0xE8,0x23,0x29,0x02,0x00,0x83,0xC4,0x04,
0x5D,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x90,
0x53,0x55,0x89,0xE5,0x8B,0x45,0x0C,0xFF,0x40,0x10,0x8B,0x50,0x08,0x8D,0x5A,0xFF,
0x89,0x58,0x08,0x85,0xD2,0x7D,0x0C,0x50,0xE8,0xF3,0x28,0x02,0x00,0x83,0xC4,0x04,
0x5D,0x5B,0xC3,0x8A,0x50,0x0C,0xF6,0xC2,0x02,0x75,0x08,0x88,0xD6,0x80,0xCE,0x02,
0x88,0x70,0x0C,0x5D,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x54,0x22,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x04,0x8B,0x5D,0x14,0x8D,0x43,0x4C,0x50,
0x31,0xF6,0xE8,0xE9,0xB5,0xFD,0xFF,0x89,0xC2,0x98,0x0F,0xBF,0x4B,0x50,0x05,0x00,
0x04,0x00,0x00,0x83,0xC4,0x04,0x39,0xC1,0x7D,0x10,0x66,0x8B,0x4B,0x50,0x83,0xC1,
0x40,0xBE,0x01,0x00,0x00,0x00,0x66,0x89,0x4B,0x50,0x0F,0xBF,0xC2,0x0F,0xBF,0x4B,
0x50,0x05,0x00,0x04,0x00,0x00,0x39,0xC1,0x7E,0x0C,0x80,0xC6,0x04,0xBE,0x01,0x00,
0x00,0x00,0x66,0x89,0x53,0x50,0x66,0x85,0xF6,0x0F,0x85,0x0E,0x01,0x00,0x00,0x8B,
0x43,0x08,0x8D,0x50,0xFF,0x89,0x53,0x08,0x85,0xC0,0x7D,0x0E,0x53,0xE8,0x5E,0x28,
0x02,0x00,0x83,0xC4,0x04,0xE9,0xF3,0x00,0x00,0x00,0x66,0x69,0x43,0x14,0xA1,0x24,
0x66,0xC7,0x43,0x1E,0x38,0x00,0x05,0xDF,0x24,0x00,0x00,0x66,0x89,0x43,0x14,0x31,
0xC0,0x66,0x8B,0x43,0x14,0x31,0xD2,0x25,0xFF,0x07,0x00,0x00,0x89,0x55,0xFC,0x66,
0x89,0x43,0x1C,0x83,0x7D,0xFC,0x02,0x7C,0x07,0x89,0xEC,0x5D,0x5F,0x5E,0x5B,0xC3,
0x66,0x8B,0x43,0x1C,0x80,0xC4,0x04,0xBF,0x98,0xC3,0x2B,0x00,0x80,0xE4,0x07,0x8D,
0x73,0x4C,0x66,0x89,0x43,0x1C,0xA5,0x66,0xA5,0x66,0x8B,0x3D,0x9C,0xC3,0x2B,0x00,
0x66,0x03,0x7B,0x52,0x0F,0xBE,0x43,0x44,0x50,0x0F,0xBE,0x43,0x43,0x50,0x8D,0x43,
0x4C,0x50,0x66,0x89,0x3D,0x9C,0xC3,0x2B,0x00,0xE8,0x62,0x4A,0x01,0x00,0x89,0xC1,
0x83,0xC4,0x0C,0x85,0xC0,0x74,0x69,0x66,0x8B,0x43,0x1A,0x66,0x89,0x41,0x1A,0x8B,
0x41,0x08,0x89,0xC2,0xBE,0x03,0x00,0x00,0x00,0xC1,0xFA,0x1F,0xF7,0xFE,0x89,0x41,
0x08,0x66,0x8B,0x43,0x1C,0x66,0x89,0x41,0x1C,0x66,0x8B,0x43,0x1E,0x66,0x89,0x41,
0x1E,0x66,0x8B,0x43,0x2A,0xC6,0x41,0x43,0x0A,0xC6,0x41,0x44,0x17,0x8B,0x75,0xFC,
0x66,0x89,0x41,0x2A,0x85,0xF6,0x75,0x28,0xA1,0xA0,0x51,0x2A,0x00,0x89,0xCA,0x05,
0x8E,0x6E,0x00,0x00,0x29,0xC2,0xB9,0xA8,0x00,0x00,0x00,0x89,0xD0,0xC1,0xFA,0x1F,
0xF7,0xF9,0x6A,0x17,0x6A,0xFF,0x98,0x50,0xE8,0xB3,0x8C,0x03,0x00,0x83,0xC4,0x0C,
0xFF,0x45,0xFC,0x83,0x7D,0xFC,0x02,0x0F,0x8C,0x43,0xFF,0xFF,0xFF,0x89,0xEC,0x5D,
0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x10,0x8B,0x45,0x14,0x66,0xC7,0x40,0x2A,
0x10,0x27,0x66,0x83,0x78,0x2A,0x00,0x0F,0x86,0x45,0x01,0x00,0x00,0xE8,0x2E,0x50,
0x01,0x00,0x89,0xC3,0x66,0x85,0xC0,0x7D,0x02,0x31,0xC3,0x66,0x83,0xFB,0x08,0x7E,
0x05,0xBB,0x08,0x00,0x00,0x00,0xA1,0xA4,0x51,0x2A,0x00,0x31,0xC9,0x8B,0x80,0x27,
0x96,0x00,0x00,0xEB,0x17,0x31,0xF6,0x8B,0x55,0x14,0x66,0x8B,0xB0,0x94,0x00,0x00,
0x00,0x0F,0xBF,0x52,0x1A,0x39,0xD6,0x75,0x01,0x41,0x8B,0x00,0x3B,0x05,0xE4,0xB3,
0x2B,0x00,0x77,0xE1,0x66,0x85,0xDB,0x7D,0x02,0x31,0xDB,0x31,0xC0,0xBA,0x40,0x00,
0x00,0x00,0x66,0x89,0xC8,0x29,0xC2,0x89,0xD0,0x0F,0xBF,0xD3,0x39,0xC2,0x7E,0x07,
0xBB,0x40,0x00,0x00,0x00,0x29,0xCB,0x66,0x85,0xDB,0x0F,0x8E,0xD2,0x00,0x00,0x00,
0x8B,0x45,0x14,0x66,0x8B,0x40,0x2A,0x0F,0xBF,0xCB,0x0F,0xBF,0xD0,0x89,0x45,0xF0,
0x89,0xD0,0xC1,0xFA,0x1F,0xF7,0xF9,0x89,0x45,0xFC,0xB8,0x00,0x08,0x00,0x00,0x89,
0xC2,0xC1,0xFA,0x1F,0xF7,0xF9,0x31,0xC9,0x89,0x45,0xF8,0x89,0x4D,0xF4,0xE9,0x96,
0x00,0x00,0x00,0x68,0x00,0x02,0x00,0x00,0x31,0xC0,0x6A,0x00,0x66,0x8B,0x45,0xF4,
0x8B,0x75,0x14,0x50,0xBF,0x98,0xC3,0x2B,0x00,0x8D,0x76,0x4C,0x68,0x98,0xC3,0x2B,
0x00,0xA5,0x66,0xA5,0xE8,0xF7,0x26,0x02,0x00,0x83,0xC4,0x10,0x6A,0x09,0x6A,0x05,
0x68,0x98,0xC3,0x2B,0x00,0xE8,0xD6,0x48,0x01,0x00,0x89,0xC1,0x83,0xC4,0x0C,0x85,
0xC0,0x74,0x4A,0x0F,0xBF,0x55,0xF0,0x0F,0xBF,0x75,0xFC,0x89,0xD0,0xC1,0xFA,0x1F,
0xF7,0xFE,0x8B,0x45,0x14,0x89,0x91,0x90,0x00,0x00,0x00,0x66,0x8B,0x40,0x1A,0x66,
0x89,0x81,0x94,0x00,0x00,0x00,0x8B,0x45,0x14,0x66,0x8B,0x40,0x1A,0x66,0x89,0x41,
0x1A,0x8B,0x45,0xF4,0x80,0xC4,0x04,0x80,0xE4,0x07,0x66,0x89,0x41,0x20,0x8B,0x75,
0xF0,0x66,0x89,0x41,0x1C,0x8B,0x45,0xFC,0x29,0xC6,0x89,0x75,0xF0,0x8B,0x45,0xF8,
0x8B,0x7D,0xF4,0x01,0xC7,0x4B,0x89,0x7D,0xF4,0x66,0x85,0xDB,0x0F,0x8F,0x61,0xFF,
0xFF,0xFF,0x8B,0x5D,0x14,0x53,0xE8,0xE5,0x25,0x02,0x00,0x83,0xC4,0x04,0x89,0xEC,
0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x53,0x56,0x57,0x55,0x89,0xE5,0x83,0xEC,0x1C,0x8B,0x5D,0x14,0x30,0xE4,0x8A,0x73,
0x0D,0x88,0x65,0xF8,0x88,0x65,0xFC,0xF6,0xC6,0x08,0x74,0x0D,0x88,0xF1,0x80,0xE1,
0xF7,0x88,0x4B,0x0D,0xE9,0x35,0x06,0x00,0x00,0x66,0x8B,0x53,0x68,0x66,0x85,0xD2,
0x0F,0x84,0x75,0x00,0x00,0x00,0x66,0x3B,0x93,0x94,0x00,0x00,0x00,0x74,0x5F,0xB5,
0x01,0x8B,0x53,0x64,0x88,0x6D,0xFC,0x85,0xD2,0x75,0x2A,0xF6,0x43,0x0E,0x20,0x75,
0x4D,0x6A,0x04,0x66,0x8B,0x43,0x68,0x6A,0xFF,0x66,0x89,0x83,0x94,0x00,0x00,0x00,
0x98,0x50,0xE8,0xA9,0x8A,0x03,0x00,0x8A,0x63,0x0C,0x80,0xE4,0xBF,0x83,0xC4,0x0C,
0x88,0x63,0x0C,0xEB,0x29,0x6A,0x04,0x66,0x8B,0x43,0x68,0x6A,0xFF,0x66,0x89,0x83,
0x94,0x00,0x00,0x00,0x98,0x50,0xE8,0x85,0x8A,0x03,0x00,0x81,0x63,0x0C,0xBF,0xFF,
0xDF,0xFF,0x8A,0x53,0x0E,0x80,0xCA,0x20,0x83,0xC4,0x0C,0x88,0x53,0x0E,0x66,0xC7,
0x43,0x68,0x00,0x00,0xC7,0x43,0x64,0x00,0x00,0x00,0x00,0x66,0x8B,0x73,0x7A,0x66,
0x85,0xF6,0x74,0x75,0x31,0xC0,0x66,0x89,0xF0,0x8B,0x04,0x85,0xE4,0xB3,0x2B,0x00,
0x83,0xC0,0x4C,0x50,0x8D,0x43,0x4C,0xB6,0x01,0x50,0x88,0x75,0xF8,0xE8,0xCE,0x27,
0x02,0x00,0x66,0x89,0x43,0x1C,0x83,0xC4,0x08,0x0F,0xBF,0x43,0x76,0x50,0x31,0xC0,
0x6A,0x00,0x66,0x8B,0x43,0x1C,0x31,0xFF,0x50,0x66,0x89,0x3D,0x98,0xC3,0x2B,0x00,
0x68,0x98,0xC3,0x2B,0x00,0x66,0x89,0x3D,0x9A,0xC3,0x2B,0x00,0x66,0x89,0x3D,0x9C,
0xC3,0x2B,0x00,0xE8,0x58,0x25,0x02,0x00,0x66,0xA1,0x98,0xC3,0x2B,0x00,0x66,0x89,
0x83,0x9A,0x00,0x00,0x00,0x66,0xA1,0x9A,0xC3,0x2B,0x00,0x66,0x89,0x83,0x9C,0x00,
0x00,0x00,0x83,0xC4,0x10,0x66,0x89,0x7B,0x7A,0xF6,0x43,0x0C,0x40,0x0F,0x84,0x6A,
0x01,0x00,0x00,0x31,0xC0,0x66,0x8B,0x83,0x96,0x00,0x00,0x00,0x8B,0x04,0x85,0xE4,
0xB3,0x2B,0x00,0x8A,0x68,0x3F,0xB2,0x01,0x80,0xFD,0x03,0x75,0x11,0x3A,0x68,0x40,
0x75,0x0C,0xB9,0x20,0x00,0x00,0x00,0x30,0xD2,0x89,0x4D,0xF0,0xEB,0x15,0x80,0x78,
0x3F,0x05,0x75,0x0F,0x80,0x78,0x40,0x17,0x75,0x09,0x66,0x8B,0x40,0x2C,0x30,0xD2,
0x89,0x45,0xF0,0x84,0xD2,0x74,0x09,0x80,0x63,0x0C,0xBF,0xE9,0x86,0x04,0x00,0x00,
0x31,0xC0,0x66,0x8B,0x83,0x96,0x00,0x00,0x00,0x66,0xC7,0x43,0x2C,0x80,0x00,0x8B,
0x04,0x85,0xE4,0xB3,0x2B,0x00,0x83,0xC0,0x4C,0x50,0x8D,0x73,0x4C,0x56,0xE8,0xFD,
0x26,0x02,0x00,0x66,0x89,0x43,0x1C,0x31,0xC0,0x66,0x8B,0x83,0x96,0x00,0x00,0x00,
0x8B,0x04,0x85,0xE4,0xB3,0x2B,0x00,0x83,0xC4,0x08,0x83,0xC0,0x4C,0x50,0x56,0xE8,
0x8C,0x29,0x02,0x00,0x83,0xC4,0x08,0x3D,0x00,0x04,0x00,0x00,0x7E,0x09,0x80,0x63,
0x0C,0xBF,0xE9,0x2F,0x04,0x00,0x00,0x83,0xF8,0x10,0x7D,0x6C,0xBF,0x98,0xC3,0x2B,
0x00,0x8D,0x73,0x4C,0x31,0xC0,0xA5,0x66,0xA5,0x66,0x8B,0x83,0x96,0x00,0x00,0x00,
0x8B,0x04,0x85,0xE4,0xB3,0x2B,0x00,0x66,0x8B,0x50,0x4C,0x66,0x89,0x15,0x98,0xC3,
0x2B,0x00,0x66,0x8B,0x50,0x4E,0x66,0x8B,0x70,0x50,0x66,0x89,0x15,0x9A,0xC3,0x2B,
0x00,0x66,0x8B,0x15,0x9C,0xC3,0x2B,0x00,0x66,0x39,0xF2,0x7D,0x10,0x8B,0x45,0xF0,
0x89,0xD7,0x01,0xC7,0x66,0x89,0x3D,0x9C,0xC3,0x2B,0x00,0xEB,0x3E,0x0F,0xBF,0xC6,
0x0F,0xBF,0xD2,0x05,0x00,0x02,0x00,0x00,0x39,0xC2,0x7E,0x2F,0x8B,0x45,0xF0,0x66,
0x29,0x05,0x9C,0xC3,0x2B,0x00,0xEB,0x23,0xBF,0x98,0xC3,0x2B,0x00,0x8D,0x73,0x4C,
0x6A,0x10,0x31,0xC0,0xA5,0x66,0xA5,0x6A,0x00,0x66,0x8B,0x43,0x1C,0x50,0x68,0x98,
0xC3,0x2B,0x00,0xE8,0xF8,0x23,0x02,0x00,0x83,0xC4,0x10,0x68,0x98,0xC3,0x2B,0x00,
0xE8,0x8B,0xB0,0xFD,0xFF,0x66,0x8B,0x0D,0x9C,0xC3,0x2B,0x00,0x83,0xC4,0x04,0x66,
0x39,0xC8,0x7E,0x06,0x66,0xA3,0x9C,0xC3,0x2B,0x00,0x68,0x98,0xC3,0x2B,0x00,0x53,
0xE8,0x1B,0x21,0x02,0x00,0x83,0xC4,0x08,0xE9,0x69,0x03,0x00,0x00,0x80,0x7B,0x39,
0x00,0x75,0x0A,0x80,0x7D,0xF8,0x00,0x0F,0x84,0x59,0x03,0x00,0x00,0x0F,0xBF,0x83,
0x9A,0x00,0x00,0x00,0x83,0xF8,0xC0,0x7D,0x09,0x66,0xC7,0x83,0x9A,0x00,0x00,0x00,
0xC0,0xFF,0x66,0x83,0xBB,0x9A,0x00,0x00,0x00,0x40,0x7E,0x09,0x66,0xC7,0x83,0x9A,
0x00,0x00,0x00,0x40,0x00,0x0F,0xBF,0x83,0x9C,0x00,0x00,0x00,0x83,0xF8,0xC0,0x7D,
0x09,0x66,0xC7,0x83,0x9C,0x00,0x00,0x00,0xC0,0xFF,0x66,0x83,0xBB,0x9C,0x00,0x00,
0x00,0x40,0x7E,0x09,0x66,0xC7,0x83,0x9C,0x00,0x00,0x00,0x40,0x00,0xBF,0x98,0xC3,
0x2B,0x00,0x8D,0x73,0x4C,0xA5,0x66,0xA5,0x66,0x8B,0x43,0x4C,0x66,0x03,0x83,0x9A,
0x00,0x00,0x00,0x66,0x8B,0x8B,0x9C,0x00,0x00,0x00,0x66,0xA3,0x98,0xC3,0x2B,0x00,
0x66,0x8B,0x43,0x4E,0x01,0xC8,0x66,0xA3,0x9A,0xC3,0x2B,0x00,0x66,0x8B,0x43,0x2C,
0x66,0x8B,0x35,0x9C,0xC3,0x2B,0x00,0x89,0xC7,0x01,0xC6,0x83,0xEF,0x10,0x66,0x89,
0x35,0x9C,0xC3,0x2B,0x00,0x0F,0xBF,0xC7,0x66,0x89,0x7B,0x2C,0x83,0xF8,0x80,0x7D,
0x06,0x66,0xC7,0x43,0x2C,0x80,0xFF,0x80,0x3D,0xB6,0x51,0x2A,0x00,0x00,0x0F,0x84,
0x40,0x01,0x00,0x00,0x68,0x98,0xC3,0x2B,0x00,0x53,0xE8,0xC1,0xC1,0xFD,0xFF,0x83,
0xC4,0x08,0x84,0xC0,0x0F,0x84,0x2A,0x01,0x00,0x00,0x80,0x7D,0xF8,0x00,0x0F,0x85,
0x0F,0x01,0x00,0x00,0x66,0x83,0xBB,0x82,0x00,0x00,0x00,0x00,0x66,0xC7,0x83,0x82,
0x00,0x00,0x00,0x00,0x01,0xBE,0xAA,0x00,0x00,0x00,0xBF,0x01,0x00,0x00,0x00,0x30,
0xC0,0x89,0x75,0xEC,0x88,0x45,0xF4,0x89,0x7D,0xE4,0xE9,0x8A,0x00,0x00,0x00,0x8B,
0x55,0xEC,0x0F,0xAF,0x55,0xE4,0xBF,0x98,0xC3,0x2B,0x00,0x8D,0x73,0x4C,0x31,0xC0,
0xA5,0x66,0xA5,0x66,0x8B,0x43,0x1C,0x05,0x00,0x02,0x00,0x00,0x01,0xD0,0x25,0xFF,
0x07,0x00,0x00,0x89,0x45,0xE8,0x0F,0xBF,0x83,0x82,0x00,0x00,0x00,0x50,0x31,0xC0,
0x6A,0x00,0x66,0x8B,0x45,0xE8,0x50,0x68,0x98,0xC3,0x2B,0x00,0xE8,0x6F,0x22,0x02,
0x00,0x83,0xC4,0x10,0x68,0x98,0xC3,0x2B,0x00,0xE8,0x02,0xAF,0xFD,0xFF,0x83,0xC4,
0x04,0x68,0x98,0xC3,0x2B,0x00,0x53,0x66,0xA3,0x9C,0xC3,0x2B,0x00,0xE8,0x1E,0xC1
};

#pragma pack (1)
typedef struct {//lenght 14
	Bit32u dword_0;//ok
	Bit16s word_4;//ok
	Bit32u dword_6;
	Bit32s dword_10;//ok	
}
type_D4C52ar2;
#pragma pack (16)
type_D4C52ar2 x_DWORD_D4C52ar_strtest[0x500];
type_D4C52ar2 x_DWORD_D4C52ar_str10[0x1] = {
0x00000000,0x0000,0x00000000,0x00000000
};
type_D4C52ar2 x_DWORD_D4C52ar_str11[0xa] = {
0x002A5C44,0x0001,0x00000000,0x00000001,
0x002A5C44,0x0002,0x00000000,0x00000001,
0x002A5C44,0x0003,0x00000000,0x00000001,
0x002A5C44,0x0004,0x00000000,0x00000001,
0x002A5C44,0x0005,0x00000000,0x00000001,
0x002A5C44,0x0006,0x00000000,0x00000001,
0x002A5C44,0x0007,0x00000000,0x00000001,
0x002A5C44,0x0008,0x00000000,0x00000001,
0x002A5C44,0x0009,0x00000000,0x00000001,
0x00000000,0x0000,0x00000000,0x00000000
};

type_D4C52ar2 x_DWORD_D4C52ar_str20[0x17] = {
0x002A5C44,0x0000,0x00245E20,0x00000001,
0x002A5C44,0x0001,0x00245F60,0x00000001,
0x002A5C44,0x0002,0x00245FF0,0x00000001,
0x002A5C44,0x0003,0x00246040,0x00000001,
0x002A5C44,0x0004,0x00246060,0x00000001,
0x002A5C44,0x0005,0x00246070,0x00000001,
0x002A5C44,0x0006,0x00246080,0x00000001,
0x002A5C44,0x0007,0x002460F0,0x00000001,
0x002A5C44,0x0008,0x00246100,0x00000001,
0x002A5C44,0x0009,0x00246110,0x00000001,
0x002A5C44,0x000A,0x00246130,0x00000001,
0x002A5C44,0x000B,0x00246140,0x00000001,
0x002A5C44,0x000C,0x00246150,0x00000001,
0x002A5C44,0x000D,0x00246160,0x00000001,
0x002A5C44,0x000E,0x00246170,0x00000001,
0x002A5C44,0x000F,0x00246180,0x00000001,
0x002A5C44,0x0010,0x00246190,0x00000001,
0x002A5C44,0x0011,0x002461A0,0x00000001,
0x002A5C44,0x0012,0x002461B0,0x00000001,
0x002A5C44,0x0013,0x00246240,0x00000001,
0x002A5C44,0x0014,0x002462A0,0x00000001,
0x002A5C44,0x0015,0x00246280,0x00000001,
0x00000000,0x0000,0x00000000,0x00000000
};

type_D4C52ar2 x_DWORD_D4C52ar_str21[0xa] = {
0x002A5C44,0x0000,0x0022BC40,0x00000001,
0x002A5C44,0x0001,0x0022BD70,0x00000001,
0x002A5C44,0x0002,0x0022BDF0,0x00000001,
0x002A5C44,0x0003,0x0022BE80,0x00000001,
0x002A5C44,0x0004,0x0022BF00,0x00000001,
0x002A5C44,0x0005,0x0022BF70,0x00000001,
0x002A5C44,0x0006,0x0022BFE0,0x00000001,
0x002A5C44,0x0007,0x0022C0F0,0x00000001,
0x002A5C44,0x0008,0x0022C120,0x00000001,
0x00000000,0x0000,0x00000000,0x00000000
};

type_D4C52ar2 x_DWORD_D4C52ar_str30[0xe] = {
0x002A5C44,0x0000,0x0023F010,0x00000001,
0x002A5C44,0x0001,0x001F3910,0x00000001,
0x002A5C44,0x0002,0x0023F310,0x00000001,
0x002A5C44,0x0003,0x0023F7C0,0x00000001,
0x002A5C44,0x0004,0x002408F0,0x00000001,
0x002A5C44,0x0005,0x00240A70,0x00000001,
0x002A5C44,0x0006,0x00240CA0,0x00000001,
0x002A5C44,0x0007,0x00241A90,0x00000001,
0x002A5C44,0x0008,0x00241AA0,0x00000001,
0x002A5C44,0x0009,0x00241AB0,0x00000001,
0x002A5C44,0x000A,0x00241E90,0x00000001,
0x002A5C44,0x000B,0x0023F8C0,0x00000001,
0x002A5C44,0x000C,0x0023F8C0,0x00000001,
0x00000000,0x0000,0x00000000,0x00000000
};

type_D4C52ar2 x_DWORD_D4C52ar_str31[0xd] = {
0x002A5C44,0x0000,0x0022B920,0x00000001,
0x002A5C44,0x0001,0x0022B9C0,0x00000001,
0x002A5C44,0x0002,0x0022BA40,0x00000001,
0x002A5C44,0x0003,0x0022BBA0,0x00000001,
0x002A5C44,0x0004,0x0022B820,0x00000001,
0x002A5C44,0x0005,0x0022B840,0x00000001,
0x002A5C44,0x0006,0x0022B860,0x00000001,
0x002A5C44,0x0007,0x0022B880,0x00000001,
0x002A5C44,0x0008,0x0022B8A0,0x00000001,
0x002A5C44,0x0009,0x0022B8C0,0x00000001,
0x002A5C44,0x000A,0x0022B8E0,0x00000001,
0x002A5C44,0x000B,0x0022B900,0x00000001,
0x00000000,0x0000,0x00000000,0x00000000
};

type_D4C52ar2 x_DWORD_D4C52ar_str40[0x1] = {
0x00000000,0x0000,0x00000000,0x00000000
};

type_D4C52ar2 x_DWORD_D4C52ar_str41[0x1] = {
0x00000000,0x0000,0x00000000,0x00000000
};

type_D4C52ar2 x_DWORD_D4C52ar_str50[0xec] = {
0x002A5BC8,0x0000,0x001FFF20,0x00000001,
0x002A5BC8,0x0001,0x001FFF40,0x00000001,
0x002A5BC8,0x0002,0x001FFF70,0x00000001,
0x002A5BC8,0x0003,0x001FFFD0,0x00000001,
0x002A5BC8,0x0004,0x00200000,0x00000001,
0x002A5BC8,0x0005,0x00200020,0x00000001,
0x002A5BC8,0x0006,0x002002B0,0x00000001,
0x002A5BC8,0x0007,0x00200300,0x00000001,
0x002A5C3C,0x0008,0x00200340,0x00000001,
0x002A5C3C,0x0009,0x002003C0,0x00000001,
0x002A5C3C,0x000A,0x00200440,0x00000001,
0x002A5C3C,0x000B,0x00200470,0x00000001,
0x002A5C3C,0x000C,0x002004F0,0x00000001,
0x002A5C3C,0x000D,0x00200510,0x00000001,
0x002A5C3C,0x000E,0x00200530,0x00000001,
0x002A5C3C,0x000F,0x002005B0,0x00000001,
0x002A5BD0,0x0010,0x00200630,0x00000001,
0x002A5BD0,0x0011,0x00200660,0x00000001,
0x002A5BD0,0x0012,0x002006D0,0x00000001,
0x002A5BD0,0x0013,0x00200800,0x00000001,
0x002A5BD0,0x0014,0x00200830,0x00000001,
0x002A5BD0,0x0015,0x00200850,0x00000001,
0x002A5BD0,0x0016,0x00200870,0x00000001,
0x002A5BD0,0x0017,0x002008A0,0x00000001,
0x002A5BD4,0x0018,0x00200950,0x00000001,
0x002A5BD4,0x0019,0x00200970,0x00000001,
0x002A5BD4,0x001A,0x00200990,0x00000001,
0x002A5BD4,0x001B,0x002009E0,0x00000001,
0x002A5BD4,0x001C,0x00200A00,0x00000001,
0x002A5BD4,0x001D,0x00200A20,0x00000001,
0x002A5BD4,0x001E,0x00200A40,0x00000001,
0x002A5BD4,0x001F,0x00200A50,0x00000001,
0x002A5BD8,0x0020,0x00200A70,0x00000001,
0x002A5BD8,0x0021,0x00200AA0,0x00000001,
0x002A5BD8,0x0022,0x00200F40,0x00000001,
0x002A5BD8,0x0023,0x00200FE0,0x00000001,
0x002A5BD8,0x0024,0x00201010,0x00000001,
0x002A5BD8,0x0025,0x00201040,0x00000001,
0x002A5BD8,0x0026,0x00201130,0x00000001,
0x002A5BD8,0x0027,0x00201140,0x00000001,
0x002A5BDC,0x0028,0x00201170,0x00000000,
0x002A5BDC,0x0029,0x00201180,0x00000000,
0x002A5BDC,0x002A,0x00201190,0x00000000,
0x002A5BDC,0x002B,0x002011A0,0x00000000,
0x002A5BDC,0x002C,0x002011B0,0x00000000,
0x002A5BDC,0x002D,0x002011C0,0x00000000,
0x002A5BDC,0x002E,0x002011D0,0x00000000,
0x002A5BDC,0x002F,0x002011E0,0x00000000,
0x002A5BE0,0x0030,0x002011F0,0x00000000,
0x002A5BE0,0x0031,0x00201200,0x00000000,
0x002A5BE0,0x0032,0x00201210,0x00000000,
0x002A5BE0,0x0033,0x00201220,0x00000000,
0x002A5BE0,0x0034,0x00201230,0x00000000,
0x002A5BE0,0x0035,0x00201240,0x00000000,
0x002A5BE0,0x0036,0x00201250,0x00000000,
0x002A5BE0,0x0037,0x00201260,0x00000000,
0x002A5BE4,0x0038,0x00201270,0x00000000,
0x002A5BE4,0x0039,0x00201280,0x00000000,
0x002A5BE4,0x003A,0x00201290,0x00000000,
0x002A5BE4,0x003B,0x002012A0,0x00000000,
0x002A5BE4,0x003C,0x002012B0,0x00000000,
0x002A5BE4,0x003D,0x002012C0,0x00000000,
0x002A5BE4,0x003E,0x002012D0,0x00000000,
0x002A5BE4,0x003F,0x002012E0,0x00000000,
0x002A5BE8,0x0040,0x002012F0,0x00000000,
0x002A5BE8,0x0041,0x00201300,0x00000000,
0x002A5BE8,0x0042,0x00201310,0x00000000,
0x002A5BE8,0x0043,0x00201320,0x00000000,
0x002A5BE8,0x0044,0x00201330,0x00000000,
0x002A5BE8,0x0045,0x00201340,0x00000000,
0x002A5BE8,0x0046,0x00201350,0x00000000,
0x002A5BE8,0x0047,0x00201360,0x00000000,
0x002A5BEC,0x0048,0x00201370,0x00000001,
0x002A5BEC,0x0049,0x002013D0,0x00000001,
0x002A5BEC,0x004A,0x00201C50,0x00000001,
0x002A5BEC,0x004B,0x00201E50,0x00000001,
0x002A5BEC,0x004C,0x00201E80,0x00000001,
0x002A5BEC,0x004D,0x00201EA0,0x00000001,
0x002A5BEC,0x004E,0x00201FB0,0x00000001,
0x002A5BEC,0x004F,0x00201FC0,0x00000001,
0x002A5BF0,0x0050,0x00202030,0x00000001,
0x002A5BF0,0x0051,0x00203530,0x00000001,
0x002A5BF0,0x0052,0x00203540,0x00000001,
0x002A5BF0,0x0053,0x00203550,0x00000001,
0x002A5BF0,0x0054,0x00203560,0x00000001,
0x002A5BF0,0x0055,0x00203580,0x00000001,
0x002A5BF0,0x0056,0x002035A0,0x00000001,
0x002A5BF0,0x0057,0x002035B0,0x00000001,
0x002A5BF4,0x0058,0x002035C0,0x00000000,
0x002A5BF4,0x0059,0x002035D0,0x00000000,
0x002A5BF4,0x005A,0x002035E0,0x00000000,
0x002A5BF4,0x005B,0x002035F0,0x00000000,
0x002A5BF4,0x005C,0x00203600,0x00000000,
0x002A5BF4,0x005D,0x00203610,0x00000000,
0x002A5BF4,0x005E,0x00203620,0x00000000,
0x002A5BF4,0x005F,0x00203630,0x00000000,
0x002A5BF8,0x0060,0x00203760,0x00000001,
0x002A5BF8,0x0061,0x00203C80,0x00000001,
0x002A5BF8,0x0062,0x00203E60,0x00000001,
0x002A5BF8,0x0063,0x00204020,0x00000001,
0x002A5BF8,0x0064,0x002041E0,0x00000001,
0x002A5BF8,0x0065,0x00204200,0x00000001,
0x002A5BF8,0x0066,0x00204260,0x00000001,
0x002A5BF8,0x0067,0x002042A0,0x00000001,
0x002A5BFC,0x0068,0x00204320,0x00000001,
0x002A5BFC,0x0069,0x00204340,0x00000001,
0x002A5BFC,0x006A,0x00204640,0x00000001,
0x002A5BFC,0x006B,0x00204660,0x00000001,
0x002A5BFC,0x006C,0x00204680,0x00000001,
0x002A5BFC,0x006D,0x002046F0,0x00000001,
0x002A5BFC,0x006E,0x00204710,0x00000001,
0x002A5BFC,0x006F,0x00204750,0x00000001,
0x002A5C00,0x0070,0x00204790,0x00000001,
0x002A5C00,0x0071,0x002047B0,0x00000001,
0x002A5C00,0x0072,0x00204AC0,0x00000001,
0x002A5C00,0x0073,0x00204AE0,0x00000001,
0x002A5C00,0x0074,0x00204B00,0x00000001,
0x002A5C00,0x0075,0x00204B30,0x00000001,
0x002A5C00,0x0076,0x00204B90,0x00000001,
0x002A5C00,0x0077,0x00204BD0,0x00000001,
0x002A5C04,0x0078,0x00204C20,0x00000001,
0x002A5C04,0x0079,0x00204C40,0x00000001,
0x002A5C04,0x007A,0x00204E60,0x00000001,
0x002A5C04,0x007B,0x002050A0,0x00000001,
0x002A5C04,0x007C,0x002050C0,0x00000001,
0x002A5C04,0x007D,0x002050E0,0x00000001,
0x002A5C04,0x007E,0x002053F0,0x00000001,
0x002A5C04,0x007F,0x00205400,0x00000001,
0x002A5C08,0x0080,0x00205420,0x00000001,
0x002A5C08,0x0081,0x00205440,0x00000001,
0x002A5C08,0x0082,0x00205510,0x00000001,
0x002A5C08,0x0083,0x002057D0,0x00000001,
0x002A5C08,0x0084,0x002057F0,0x00000001,
0x002A5C08,0x0085,0x00205810,0x00000001,
0x002A5C08,0x0086,0x00205830,0x00000001,
0x002A5C08,0x0087,0x00205840,0x00000001,
0x002A5C0C,0x0088,0x00205860,0x00000001,
0x002A5C0C,0x0089,0x002058C0,0x00000001,
0x002A5C0C,0x008A,0x00205930,0x00000001,
0x002A5C0C,0x008B,0x00205D40,0x00000001,
0x002A5C0C,0x008C,0x00205DA0,0x00000001,
0x002A5C0C,0x008D,0x00205DC0,0x00000001,
0x002A5C0C,0x008E,0x00205DE0,0x00000001,
0x002A5C0C,0x008F,0x00205DF0,0x00000001,
0x002A5C10,0x0090,0x00205E20,0x00000001,
0x002A5C10,0x0091,0x00206050,0x00000001,
0x002A5C10,0x0092,0x002060B0,0x00000001,
0x002A5C10,0x0093,0x00206280,0x00000001,
0x002A5C10,0x0094,0x002062A0,0x00000001,
0x002A5C10,0x0095,0x002062C0,0x00000001,
0x002A5C10,0x0096,0x00206540,0x00000001,
0x002A5C10,0x0097,0x00206550,0x00000001,
0x002A5C14,0x0098,0x00206590,0x00000001,
0x002A5C14,0x0099,0x002065C0,0x00000001,
0x002A5C14,0x009A,0x00206610,0x00000001,
0x002A5C14,0x009B,0x00206CD0,0x00000001,
0x002A5C14,0x009C,0x00206D00,0x00000001,
0x002A5C14,0x009D,0x00206D20,0x00000001,
0x002A5C14,0x009E,0x00206D40,0x00000001,
0x002A5C14,0x009F,0x00206D50,0x00000001,
0x002A5C18,0x00A0,0x00206D80,0x00000001,
0x002A5C18,0x00A1,0x00206DE0,0x00000001,
0x002A5C18,0x00A2,0x00206E40,0x00000001,
0x002A5C18,0x00A3,0x00206F70,0x00000001,
0x002A5C18,0x00A4,0x00206FD0,0x00000001,
0x002A5C18,0x00A5,0x00206FF0,0x00000001,
0x002A5C18,0x00A6,0x00207010,0x00000001,
0x002A5C18,0x00A7,0x00207020,0x00000001,
0x002A5C1C,0x00A8,0x00207050,0x00000001,
0x002A5C1C,0x00A9,0x00207070,0x00000001,
0x002A5C1C,0x00AA,0x00207220,0x00000001,
0x002A5C1C,0x00AB,0x002073C0,0x00000001,
0x002A5C1C,0x00AC,0x002073E0,0x00000001,
0x002A5C1C,0x00AD,0x00207400,0x00000001,
0x002A5C1C,0x00AE,0x00207420,0x00000001,
0x002A5C1C,0x00AF,0x00207470,0x00000001,
0x002A5C20,0x00B0,0x00207960,0x00000001,
0x002A5C20,0x00B1,0x00207990,0x00000001,
0x002A5C20,0x00B2,0x00207AA0,0x00000001,
0x002A5C20,0x00B3,0x00207BD0,0x00000001,
0x002A5C20,0x00B4,0x00207CA0,0x00000001,
0x002A5C20,0x00B5,0x00207CC0,0x00000001,
0x002A5C20,0x00B6,0x00208920,0x00000001,
0x002A5C20,0x00B7,0x00208930,0x00000001,
0x002A5C24,0x00B8,0x00208950,0x00000001,
0x002A5C24,0x00B9,0x00208B20,0x00000001,
0x002A5C24,0x00BA,0x00208E00,0x00000001,
0x002A5C24,0x00BB,0x00208C10,0x00000001,
0x002A5C24,0x00BC,0x00208FA0,0x00000001,
0x002A5C24,0x00BD,0x00208FC0,0x00000001,
0x002A5C24,0x00BE,0x00209460,0x00000001,
0x002A5C24,0x00BF,0x00209470,0x00000001,
0x002A5C2C,0x00C0,0x00209490,0x00000001,
0x002A5C2C,0x00C1,0x00209500,0x00000001,
0x002A5C2C,0x00C2,0x00209570,0x00000001,
0x002A5C2C,0x00C3,0x002095D0,0x00000001,
0x002A5C2C,0x00C4,0x002095F0,0x00000001,
0x002A5C2C,0x00C5,0x00209610,0x00000001,
0x002A5C2C,0x00C6,0x00209630,0x00000001,
0x002A5C2C,0x00C7,0x00209660,0x00000001,
0x002A5C28,0x00C8,0x00209860,0x00000001,
0x002A5C28,0x00C9,0x00209C30,0x00000001,
0x002A5C28,0x00CA,0x00209C60,0x00000001,
0x002A5C28,0x00CB,0x00209CC0,0x00000001,
0x002A5C28,0x00CC,0x00209CE0,0x00000001,
0x002A5C28,0x00CD,0x00209EC0,0x00000001,
0x002A5C28,0x00CE,0x00209F40,0x00000001,
0x002A5C28,0x00CF,0x00209F50,0x00000001,
0x002A5C40,0x00D0,0x00209F90,0x00000001,
0x002A5C40,0x00D1,0x00209FC0,0x00000001,
0x002A5C40,0x00D2,0x00209FF0,0x00000001,
0x002A5C40,0x00D3,0x0020A300,0x00000001,
0x002A5C40,0x00D4,0x0020A330,0x00000001,
0x002A5C40,0x00D5,0x0020A350,0x00000001,
0x002A5C40,0x00D6,0x0020A370,0x00000001,
0x002A5C40,0x00D7,0x0020A380,0x00000001,
0x002A5C30,0x00D8,0x0020A400,0x00000001,
0x002A5C30,0x00D9,0x0020A670,0x00000001,
0x002A5C30,0x00DA,0x0020A710,0x00000001,
0x002A5C30,0x00DB,0x0020A890,0x00000001,
0x002A5C30,0x00DC,0x0020A8B0,0x00000001,
0x002A5C30,0x00DD,0x0020A8D0,0x00000001,
0x002A5C30,0x00DE,0x0020A920,0x00000001,
0x002A5C30,0x00DF,0x0020A930,0x00000001,
0x002A5C34,0x00E0,0x0020C1D0,0x00000001,
0x002A5C34,0x00E1,0x0020C200,0x00000001,
0x002A5C34,0x00E2,0x0020C260,0x00000001,
0x002A5C34,0x00E3,0x0020C750,0x00000001,
0x002A5C34,0x00E4,0x0020C760,0x00000001,
0x002A5C34,0x00E5,0x0020C780,0x00000001,
0x002A5C34,0x00E6,0x0020C7A0,0x00000001,
0x002A5C34,0x00E7,0x0020C7B0,0x00000001,
0x002A5C38,0x00E8,0x001FC6B0,0x00000001,
0x002A5C30,0x00E9,0x00000000,0x00000000,
0x002A5C30,0x00EA,0x00000000,0x00000000,
0x00000000,0x0000,0x00000000,0x00000000
};

type_D4C52ar2 x_DWORD_D4C52ar_str51[0x1e] = {
0x002A5BC8,0x0000,0x0022C240,0x00000001,
0x002A5C3C,0x0001,0x0022C490,0x00000001,
0x002A5BD0,0x0002,0x0022C590,0x00000001,
0x002A5BD4,0x0003,0x0022C6F0,0x00000001,
0x002A5BD8,0x0004,0x0022CA10,0x00000001,
0x002A5BDC,0x0005,0x0022CB60,0x00000000,
0x002A5BE0,0x0006,0x0022CB70,0x00000000,
0x002A5BE4,0x0007,0x0022CB90,0x00000000,
0x002A5BE8,0x0008,0x0022CBA0,0x00000000,
0x002A5BEC,0x0009,0x0022CBB0,0x00000001,
0x002A5BF0,0x000A,0x0022CD00,0x00000001,
0x002A5BF4,0x000B,0x0022CDE0,0x00000000,
0x002A5BF8,0x000C,0x0022CDF0,0x00000001,
0x002A5BFC,0x000D,0x0022CF40,0x00000001,
0x002A5C00,0x000E,0x0022D0B0,0x00000001,
0x002A5C04,0x000F,0x0022D1E0,0x00000001,
0x002A5C08,0x0010,0x0022D310,0x00000001,
0x002A5C0C,0x0011,0x0022D460,0x00000001,
0x002A5C10,0x0012,0x0022D590,0x00000001,
0x002A5C14,0x0013,0x0022D6B0,0x00000001,
0x002A5C18,0x0014,0x0022D7F0,0x00000001,
0x002A5C1C,0x0015,0x0022D8F0,0x00000001,
0x002A5C20,0x0016,0x0022DA00,0x00000001,
0x002A5C24,0x0017,0x0022DBF0,0x00000001,
0x002A5C2C,0x0018,0x0022DCF0,0x00000001,
0x002A5C28,0x0019,0x0022DE00,0x00000001,
0x002A5C40,0x001A,0x0022DF00,0x00000001,
0x002A5C30,0x001B,0x0022E000,0x00000001,
0x002A5C34,0x001C,0x0022E1D0,0x00000001,
0x00000000,0x0000,0x00000000,0x00000000
};

type_D4C52ar2 x_DWORD_D4C52ar_str60[0x1] = {
0x00000000,0x0000,0x00000000,0x00000000 };

type_D4C52ar2 x_DWORD_D4C52ar_str61[0x1] = {
0x00000000,0x0000,0x00000000,0x00000000 };

type_D4C52ar2 x_DWORD_D4C52ar_str70[0x1] = {
0x00000000,0x0000,0x00000000,0x00000000 };

type_D4C52ar2 x_DWORD_D4C52ar_str71[0x1] = {
0x00000000,0x0000,0x00000000,0x00000000 };

type_D4C52ar2 x_DWORD_D4C52ar_str80[0x1] = {
0x00000000,0x0000,0x00000000,0x00000000 };

type_D4C52ar2 x_DWORD_D4C52ar_str81[0x1] = {
0x00000000,0x0000,0x00000000,0x00000000 };

type_D4C52ar2 x_DWORD_D4C52ar_str90[0x21] = {
0x002A5C44,0x0000,0x00246B30,0x00000001,
0x002A5C44,0x0001,0x00246F60,0x00000001,
0x002A5C44,0x0002,0x00247160,0x00000001,
0x002A5C44,0x0003,0x00247180,0x00000001,
0x002A5C44,0x0004,0x00247250,0x00000001,
0x002A5C44,0x0005,0x00247280,0x00000001,
0x002A5C44,0x0006,0x002472A0,0x00000001,
0x002A5C44,0x0007,0x002472C0,0x00000001,
0x002A5C44,0x0008,0x002472E0,0x00000001,
0x002A5C44,0x0009,0x00247750,0x00000001,
0x002A5C44,0x000A,0x00247B30,0x00000001,
0x002A5C44,0x000B,0x00247FB0,0x00000001,
0x002A5C44,0x000C,0x00247FD0,0x00000001,
0x002A5C44,0x000D,0x002482E0,0x00000001,
0x002A5C44,0x000E,0x00248410,0x00000001,
0x002A5C44,0x000F,0x00248430,0x00000001,
0x002A5C44, 0x0010, 0x00248450,0x00000001,
0x002A5C44, 0x0011, 0x00248470,0x00000001,
0x002A5C44, 0x0012, 0x002484C0,0x00000001,
0x002A5C44, 0x0013, 0x002486F0,0x00000001,
0x002A5C44, 0x0014, 0x00248740,0x00000001,
0x002A5C44, 0x0015, 0x00248760,0x00000001,
0x002A5C44, 0x0016, 0x00248780,0x00000001,
0x002A5C44, 0x0017, 0x002487A0,0x00000001,
0x002A5C44, 0x0018, 0x002487D0,0x00000001,
0x002A5C44, 0x0019, 0x00248800,0x00000001,
0x002A5C44, 0x001A, 0x00248890,0x00000001,
0x002A5C44, 0x001B, 0x002488E0,0x00000001,
0x002A5C44, 0x001C, 0x00248940,0x00000001,
0x002A5C44, 0x001D, 0x00246B50,0x00000001,
0x002A5C44, 0x001E, 0x00248960,0x00000001,
0x002A5C44, 0x001F, 0x00248910,0x00000001,
0x00000000, 0x0000, 0x00000000, 0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_str91[0x20] = {
0x002A5C44,0x0000,0x0022E2E0,0x00000001,
0x002A5C44,0x0001,0x0022E3B0,0x00000001,
0x002A5C44,0x0002,0x0022E470,0x00000001,
0x002A5C44,0x0003,0x0022E500,0x00000001,
0x002A5C44,0x0004,0x0022E590,0x00000001,
0x002A5C44,0x0005,0x0022E620,0x00000001,
0x002A5C44,0x0006,0x0022E6B0,0x00000001,
0x002A5C44,0x0007,0x0022E740,0x00000001,
0x002A5C44,0x0008,0x0022E7D0,0x00000001,
0x002A5C44,0x0009,0x0022E860,0x00000001,
0x002A5C44,0x000A,0x0022E900,0x00000001,
0x002A5C44,0x000B,0x0022E990,0x00000001,
0x002A5C44,0x000C,0x0022EA20,0x00000001,
0x002A5C44,0x000D,0x0022EAB0,0x00000001,
0x002A5C44,0x000E,0x0022EBC0,0x00000001,
0x002A5C44,0x000F,0x0022ED50,0x00000001,
0x002A5C44,0x0010,0x0022EDC0,0x00000001,
0x002A5C44,0x0011,0x0022EDD0,0x00000001,
0x002A5C44,0x0012,0x0022EE80,0x00000001,
0x002A5C44,0x0013,0x0022EE90,0x00000001,
0x002A5C44,0x0014,0x0022EC40,0x00000001,
0x002A5C44,0x0015,0x0022ECC0,0x00000001,
0x002A5C44,0x0016,0x0022EEA0,0x00000001,
0x002A5C44,0x0017,0x0022EFC0,0x00000001,
0x002A5C44,0x0018,0x0022F050,0x00000001,
0x002A5C44,0x0019,0x0022F0F0,0x00000001,
0x002A5C44,0x001A,0x0022F180,0x00000001,
0x002A5C44,0x001B,0x0022EF30,0x00000001,
0x002A5C44,0x001C,0x0022E380,0x00000001,
0x002A5C44,0x001D,0x0022F2A0,0x00000001,
0x002A5C44, 0x001E, 0x0022F210,0x00000001,
0x00000000, 0x0000, 0x00000000, 0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_strA0[0x64] = {
0x002A5C44,0x0000,0x00211D50,0x00000001,
0x002A5C44,0x0001,0x00211F60,0x00000001,
0x002A5C44,0x0002,0x00212100,0x00000001,
0x002A5C44,0x0003,0x00212890,0x00000001,
0x002A5C44,0x0004,0x00213520,0x00000001,
0x002A5C44,0x0005,0x002128B0,0x00000001,
0x002A5C44,0x0006,0x00212760,0x00000001,
0x002A5C44,0x0007,0x00212870,0x00000001,
0x002A5C44,0x0008,0x00212920,0x00000001,
0x002A5C44,0x0009,0x00212940,0x00000001,
0x002A5C44,0x000A,0x00212E90,0x00000001,
0x002A5C44,0x000B,0x00212FB0,0x00000001,
0x002A5C44,0x000C,0x002130E0,0x00000001,
0x002A5C44,0x000D,0x00213160,0x00000001,
0x002A5C44,0x000E,0x002132A0,0x00000001,
0x002A5C44,0x000F,0x00213530,0x00000001,
0x002A5C44,0x0010,0x00213600,0x00000001,
0x002A5C44,0x0011,0x00213880,0x00000001,
0x002A5C44,0x0012,0x00213A70,0x00000001,
0x002A5C44,0x0013,0x00213F40,0x00000001,
0x002A5C44,0x0014,0x002140F0,0x00000001,
0x002A5C44,0x0015,0x00214100,0x00000001,
0x002A5C44,0x0016,0x00214110,0x00000001,
0x002A5C44,0x0017,0x00214D80,0x00000001,
0x002A5C44,0x0018,0x00214E10,0x00000001,
0x002A5C44,0x0019,0x00214E20,0x00000001,
0x002A5C44,0x001A,0x00214E80,0x00000001,
0x002A5C44,0x001B,0x00215110,0x00000001,
0x002A5C44,0x001C,0x00215000,0x00000001,
0x002A5C44,0x001D,0x00215210,0x00000001,
0x002A5C44,0x001E,0x00215330,0x00000001,
0x002A5C44,0x001F,0x00215350,0x00000001,
0x002A5C44,0x0020,0x002153F0,0x00000001,
0x002A5C44,0x0021,0x00215480,0x00000001,
0x002A5C44,0x0022,0x002154A0,0x00000001,
0x002A5C44,0x0023,0x00216600,0x00000001,
0x002A5C44,0x0024,0x00216390,0x00000001,
0x002A5C44,0x0025,0x00216530,0x00000001,
0x002A5C44,0x0026,0x002167C0,0x00000001,
0x002A5C44,0x0000,0x00000000,0x00000000,
0x002A5C44,0x0028,0x00216640,0x00000001,
0x002A5C44,0x0029,0x00216940,0x00000001,
0x002A5C44,0x002A,0x00217AE0,0x00000001,
0x002A5C44,0x002B,0x002187F0,0x00000001,
0x002A5C44, 0x002C, 0x00218BC0,0x00000001,
0x002A5C44, 0x002D, 0x002199F0,0x00000001,
0x002A5C44, 0x002E, 0x00219AF0, 0x00000000,
0x002A5C44, 0x0000, 0x00000000, 0x00000000,
0x002A5C44, 0x0030, 0x00218240, 0x00000001,
0x002A5C44, 0x0000, 0x00000000, 0x00000000,
0x002A5C44, 0x0000, 0x00000000, 0x00000000,
0x002A5C44, 0x0033, 0x00218240, 0x00000001,
0x002A5C44, 0x0034, 0x00219330, 0x00000001,
0x002A5C44, 0x0035, 0x002195C0, 0x00000001,
0x002A5C44, 0x0036, 0x002162A0, 0x00000001,
0x002A5C44, 0x0037, 0x002162C0, 0x00000001,
0x002A5C44, 0x0038, 0x00219B70, 0x00000001,
0x002A5C44, 0x0039, 0x00219B80, 0x00000001,
0x002A5C44, 0x003A, 0x00219B90, 0x00000001,
0x002A5C44, 0x003B, 0x00219D80, 0x00000001,
0x002A5C44, 0x003C, 0x00219E40, 0x00000001,
0x002A5C44, 0x003D, 0x00219E60, 0x00000001,
0x002A5C44, 0x003E, 0x00216FB0, 0x00000001,
0x002A5C44, 0x0029, 0x00216940, 0x00000001,
0x002A5C44, 0x0040, 0x002133E0, 0x00000001,
0x002A5C44, 0x0041, 0x00213400, 0x00000001,
0x002A5C44, 0x0042, 0x00215370, 0x00000001,
0x002A5C44, 0x0043, 0x00215380, 0x00000001,
0x002A5C44, 0x0044, 0x00215390, 0x00000001,
0x002A5C44, 0x0045, 0x002153C0, 0x00000001,
0x002A5C44, 0x0046, 0x00219E70, 0x00000001,
0x002A5C44, 0x0047, 0x00219F70, 0x00000001,
0x002A5C44, 0x0048, 0x0021A040, 0x00000001,
0x002A5C44, 0x0049, 0x0021A6A0, 0x00000001,
0x002A5C44, 0x004A, 0x0021A6D0, 0x00000001,
0x002A5C44, 0x004B, 0x00219E20, 0x00000001,
0x002A5C44, 0x004C, 0x00219D80, 0x00000001,
0x002A5C44, 0x004D, 0x00213120, 0x00000001,
0x002A5C44, 0x004E, 0x0021B2D0, 0x00000001,
0x002A5C44, 0x004F, 0x0021B5B0, 0x00000001,
0x002A5C44, 0x0050, 0x0021B630, 0x00000001,
0x002A5C44, 0x0051, 0x0021B650, 0x00000001,
0x002A5C44, 0x0052, 0x00000000, 0x00000000,
0x002A5C44, 0x0053, 0x002149B0, 0x00000001,
0x002A5C44, 0x0054, 0x00000000, 0x00000000,
0x002A5C44, 0x0055, 0x0021B8B0, 0x00000001,
0x002A5C44, 0x0056, 0x0021BF00, 0x00000001,
0x002A5C44, 0x0057, 0x00215520, 0x00000001,
0x002A5C44, 0x0058, 0x00215540, 0x00000001,
0x002A5C44, 0x0059, 0x00215910, 0x00000001,
0x002A5C44, 0x005A, 0x00215C40, 0x00000001,
0x002A5C44, 0x005B, 0x00215EE0, 0x00000001,
0x002A5C44, 0x005C, 0x00215EE0, 0x00000001,
0x002A5C44, 0x005D, 0x00212120, 0x00000001,
0x002A5C44, 0x005E, 0x00213160, 0x00000001,
0x002A5C44, 0x005F, 0x00212750, 0x00000001,
0x002A5C44, 0x0060, 0x002121E0, 0x00000001,
0x002A5C44, 0x0061, 0x00212740, 0x00000001,
0x002A5C44, 0x0062, 0x00213CF0, 0x00000001,
0x00000000, 0x0000, 0x00000000, 0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_strA1[0x5D] = {
0x002A5C44,0x0000,0x0022F320,0x00000001,
0x002A5C44,0x0001,0x0022F3B0,0x00000001,
0x002A5C44,0x0002,0x0022F430,0x00000001,
0x002A5C44,0x0003,0x0022F490,0x00000001,
0x002A5C44,0x0004,0x0022F500,0x00000001,
0x002A5C44,0x0005,0x0022F570,0x00000001,
0x002A5C44,0x0006,0x0022F5F0,0x00000001,
0x002A5C44,0x0007,0x0022F6A0,0x00000001,
0x002A5C44,0x0008,0x0022F750,0x00000001,
0x002A5C44,0x0009,0x0022F760,0x00000001,
0x002A5C44,0x000A,0x0022F7D0,0x00000001,
0x002A5C44,0x000B,0x0022F840,0x00000001,
0x002A5C44,0x000C,0x0022F8C0,0x00000001,
0x002A5C44,0x000D,0x0022F9E0,0x00000001,
0x002A5C44,0x000E,0x0022FA20,0x00000001,
0x002A5C44,0x000F,0x0022FCD0,0x00000001,
0x002A5C44,0x0010,0x0022FDC0,0x00000001,
0x002A5C44,0x0011,0x0022FD70,0x00000001,
0x002A5C44,0x0012,0x0022FED0,0x00000001,
0x002A5C44,0x0013,0x0022FF90,0x00000001,
0x002A5C44,0x0014,0x00230020,0x00000001,
0x002A5C44,0x0015,0x00230030,0x00000001,
0x002A5C44,0x0016,0x00230040,0x00000001,
0x002A5C44,0x0017,0x002305F0,0x00000001,
0x002A5C44,0x0018,0x00230690,0x00000001,
0x002A5C44,0x0019,0x002306A0,0x00000001,
0x002A5C44,0x001A,0x00230720,0x00000001,
0x002A5C44,0x001B,0x002307A0,0x00000001,
0x002A5C44,0x001C,0x00230800,0x00000001,
0x002A5C44,0x001D,0x00230A00,0x00000001,
0x002A5C44,0x001E,0x002309A0,0x00000001,
0x002A5C44,0x001F,0x00230AC0,0x00000001,
0x002A5C44,0x0020,0x00230A60,0x00000001,
0x002A5C44,0x0021,0x00231020,0x00000001,
0x002A5C44,0x0022,0x00230E40,0x00000001,
0x002A5C44,0x0023,0x00230F20,0x00000001,
0x002A5C44,0x0024,0x00230F30,0x00000001,
0x002A5C44,0x0000,0x00000000,0x00000000,
0x002A5C44,0x0026,0x00230FB0,0x00000001,
0x002A5C44,0x0027,0x00231080,0x00000001,
0x002A5C44,0x0028,0x002311D0,0x00000001,
0x002A5C44,0x0029,0x00231320,0x00000001,
0x002A5C44, 0x002A, 0x00231370,0x00000001,
0x002A5C44, 0x002B, 0x002312B0,0x00000001,
0x002A5C44, 0x002C, 0x002313D0,0x00000001,
0x002A5C44, 0x002D, 0x00231250, 0x00000001,
0x002A5C44, 0x0000, 0x00000000, 0x00000000,
0x002A5C44, 0x0000, 0x00000000, 0x00000000,
0x002A5C44, 0x0000, 0x00000000, 0x00000000,
0x002A5C44, 0x0000, 0x00000000, 0x00000000,
0x002A5C44, 0x0032, 0x00230DE0, 0x00000001,
0x002A5C44, 0x0033, 0x00230D70, 0x00000001,
0x002A5C44, 0x0034, 0x00231430, 0x00000001,
0x002A5C44, 0x0035, 0x002314B0, 0x00000001,
0x002A5C44, 0x0036, 0x00231500, 0x00000001,
0x002A5C44, 0x0037, 0x00231640, 0x00000001,
0x002A5C44, 0x0038, 0x002316E0, 0x00000001,
0x002A5C44, 0x0039, 0x00231130, 0x00000001,
0x002A5C44, 0x003A, 0x002310A0, 0x00000001,
0x002A5C44, 0x003B, 0x0022FB50, 0x00000001,
0x002A5C44, 0x003C, 0x0022FC10, 0x00000001,
0x002A5C44, 0x003D, 0x00230860, 0x00000001,
0x002A5C44, 0x003E, 0x002308B0, 0x00000001,
0x002A5C44, 0x003F, 0x00230900, 0x00000001,
0x002A5C44, 0x0040, 0x00230950, 0x00000001,
0x002A5C44, 0x0041, 0x00231780, 0x00000001,
0x002A5C44, 0x0042, 0x002317C0, 0x00000001,
0x002A5C44, 0x0043, 0x00232730, 0x00000001,
0x002A5C44, 0x0044, 0x002315A0, 0x00000001,
0x002A5C44, 0x0045, 0x00231500, 0x00000001,
0x002A5C44, 0x0046, 0x0022F950, 0x00000001,
0x002A5C44, 0x0047, 0x00232790, 0x00000001,
0x002A5C44, 0x0048, 0x00232800, 0x00000001,
0x002A5C44, 0x0049, 0x00232A00, 0x00000001,
0x002A5C44, 0x004A, 0x00231800, 0x00000001,
0x002A5C44, 0x004B, 0x00000000, 0x00000000,
0x002A5C44, 0x004C, 0x002302A0, 0x00000001,
0x002A5C44, 0x004D, 0x00000000, 0x00000000,
0x002A5C44, 0x004E, 0x00231840, 0x00000001,
0x002A5C44, 0x004F, 0x002318E0, 0x00000001,
0x002A5C44, 0x0050, 0x00230B80, 0x00000001,
0x002A5C44, 0x0051, 0x00230B20, 0x00000001,
0x002A5C44, 0x0052, 0x00230BE0, 0x00000001,
0x002A5C44, 0x0053, 0x00230C30, 0x00000001,
0x002A5C44, 0x0054, 0x00230CA0, 0x00000001,
0x002A5C44, 0x0055, 0x00230CD0, 0x00000001,
0x002A5C44, 0x0056, 0x00231960, 0x00000001,
0x002A5C44, 0x0057, 0x0022FA60, 0x00000001,
0x002A5C44, 0x0058, 0x00231A10, 0x00000001,
0x002A5C44, 0x0059, 0x00231A20, 0x00000001,
0x002A5C44, 0x005A, 0x00231A80, 0x00000001,
0x002A5C44, 0x005B, 0x0022FF30, 0x00000001,
0x00000000, 0x0000, 0x00000000, 0x00000000};


type_D4C52ar2 x_DWORD_D4C52ar_strB0[0x2e] = {
0x002A5C44,0x0000,0x00250030,0x00000001,
0x002A5C44,0x0001,0x00250070,0x00000001,
0x002A5C44,0x0002,0x002500B0,0x00000001,
0x002A5C44,0x0003,0x00250100,0x00000001,
0x002A5C44,0x0004,0x00250150,0x00000001,
0x002A5C44,0x0005,0x00250240,0x00000001,
0x002A5C44,0x0006,0x00250250,0x00000001,
0x002A5C44,0x0007,0x00250260,0x00000001,
0x002A5C44,0x0008,0x00250270,0x00000001,
0x002A5C44,0x0009,0x00250280,0x00000001,
0x002A5C44,0x000A,0x00250290,0x00000001,
0x002A5C44,0x000B,0x002502A0,0x00000001,
0x002A5C44, 0x000C, 0x002502B0,0x00000001,
0x002A5C44, 0x000D, 0x00250420,0x00000001,
0x002A5C44, 0x000E, 0x00250440,0x00000001,
0x002A5C44, 0x000F, 0x00250460,0x00000001,
0x002A5C44, 0x0010, 0x00250480,0x00000001,
0x002A5C44, 0x0011, 0x002504A0,0x00000001,
0x002A5C44, 0x0012, 0x002504C0,0x00000001,
0x002A5C44, 0x0013, 0x002504E0,0x00000001,
0x002A5C44, 0x0014, 0x00250500,0x00000001,
0x002A5C44, 0x0015, 0x00250520,0x00000001,
0x002A5C44, 0x0016, 0x00250540,0x00000001,
0x002A5C44, 0x0017, 0x00250560,0x00000001,
0x002A5C44, 0x0018, 0x00250580,0x00000001,
0x002A5C44, 0x0019, 0x002505A0,0x00000001,
0x002A5C44, 0x001A, 0x002505C0,0x00000001,
0x002A5C44, 0x001B, 0x002505E0,0x00000001,
0x002A5C44, 0x001C, 0x00250600,0x00000001,
0x002A5C44, 0x001D, 0x00250620,0x00000001,
0x002A5C44, 0x001E, 0x002507C0,0x00000001,
0x002A5C44, 0x001F, 0x002507E0,0x00000001,
0x002A5C44, 0x0020, 0x002501C0,0x00000001,
0x002A5C44, 0x0021, 0x00250640,0x00000001,
0x002A5C44, 0x0022, 0x00250660,0x00000001,
0x002A5C44, 0x0023, 0x00250680,0x00000001,
0x002A5C44, 0x0024, 0x002506A0,0x00000001,
0x002A5C44, 0x0025, 0x002506C0,0x00000001,
0x002A5C44, 0x0026, 0x002506E0,0x00000001,
0x002A5C44, 0x0027, 0x00250700,0x00000001,
0x002A5C44, 0x0028, 0x00250720,0x00000001,
0x002A5C44, 0x0029, 0x00250740,0x00000001,
0x002A5C44, 0x002A, 0x00250760,0x00000001,
0x002A5C44, 0x002B, 0x00250780,0x00000001,
0x002A5C44, 0x002C, 0x002507A0,0x00000001,
0x00000000, 0x0000, 0x00000000, 0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_strB1[0x2e] = {
0x002A5C44, 0x0000, 0x00231AE0,0x00000001,
0x002A5C44, 0x0001, 0x00231B00,0x00000001,
0x002A5C44, 0x0002, 0x00231B20,0x00000001,
0x002A5C44, 0x0003, 0x00231B40,0x00000001,
0x002A5C44, 0x0004, 0x00231B60,0x00000001,
0x002A5C44, 0x0005, 0x00231BA0,0x00000001,
0x002A5C44, 0x0006, 0x00231BB0,0x00000001,
0x002A5C44, 0x0007, 0x00231BC0,0x00000001,
0x002A5C44, 0x0008, 0x00231BD0,0x00000001,
0x002A5C44, 0x0009, 0x00231BE0,0x00000001,
0x002A5C44, 0x000A, 0x00231BF0,0x00000001,
0x002A5C44, 0x000B, 0x00231C00,0x00000001,
0x002A5C44, 0x000C, 0x00231C10,0x00000001,
0x002A5C44, 0x000D, 0x00231C30,0x00000001,
0x002A5C44, 0x000E, 0x00231C50,0x00000001,
0x002A5C44, 0x000F, 0x00231C70,0x00000001,
0x002A5C44, 0x0010, 0x00231C90,0x00000001,
0x002A5C44, 0x0011, 0x00231CB0,0x00000001,
0x002A5C44, 0x0012, 0x00231CD0,0x00000001,
0x002A5C44, 0x0013, 0x00231CF0,0x00000001,
0x002A5C44, 0x0014, 0x00231D10,0x00000001,
0x002A5C44, 0x0015, 0x00231D30,0x00000001,
0x002A5C44, 0x0016, 0x00231D50,0x00000001,
0x002A5C44, 0x0017, 0x00231D70,0x00000001,
0x002A5C44, 0x0018, 0x00231D90,0x00000001,
0x002A5C44, 0x0019, 0x00231DB0,0x00000001,
0x002A5C44, 0x001A, 0x00231DD0,0x00000001,
0x002A5C44, 0x001B, 0x00231DF0,0x00000001,
0x002A5C44, 0x001C, 0x00231E10,0x00000001,
0x002A5C44, 0x001D, 0x00231E30,0x00000001,
0x002A5C44, 0x001E, 0x00231FD0,0x00000001,
0x002A5C44, 0x001F, 0x00231FF0,0x00000001,
0x002A5C44, 0x0020, 0x00231B80,0x00000001,
0x002A5C44, 0x0021, 0x00231E50,0x00000001,
0x002A5C44, 0x0022, 0x00231E70,0x00000001,
0x002A5C44, 0x0023, 0x00231E90,0x00000001,
0x002A5C44, 0x0024, 0x00231EB0,0x00000001,
0x002A5C44, 0x0025, 0x00231ED0,0x00000001,
0x002A5C44, 0x0026, 0x00231EF0,0x00000001,
0x002A5C44, 0x0027, 0x00231F10,0x00000001,
0x002A5C44, 0x0028, 0x00231F30,0x00000001,
0x002A5C44, 0x0029, 0x00231F50,0x00000001,
0x002A5C44, 0x002A, 0x00231F70,0x00000001,
0x002A5C44, 0x002B, 0x00231F90,0x00000001,
0x002A5C44, 0x002C, 0x00231FB0,0x00000001,
0x00000000, 0x0000, 0x00000000, 0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_strC0[0x1] = {
0x00000000,0x0000,0x00000000,0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_strC1[0x1] = {
0x00000000,0x0000,0x00000000,0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_strD0[0xb] = {
0x002A5C44,0x0000,0x00000000,0x00000001,
0x002A5C44,0x0001,0x00000000,0x00000002,
0x002A5C44,0x0002,0x00000000,0x00000003,
0x002A5C44,0x0003,0x00000000,0x00000004,
0x002A5C44,0x0004,0x00000000,0x00000005,
0x002A5C44,0x0005,0x00000000,0x00000006,
0x002A5C44,0x0006,0x00000000,0x00000007,
0x002A5C44,0x0007,0x00000000,0x00000008,
0x002A5C44,0x0008,0x00000000,0x00000009,
0x002A5C44,0x0009,0x00000000,0x0000000A,
0x00000000,0x0000,0x00000000,0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_strD1[0xb] = {
0x002A5C44,0x0000,0x00000000,0x00000001,
0x002A5C44,0x0001,0x00000000,0x00000002,
0x002A5C44,0x0002,0x00000000,0x00000003,
0x002A5C44,0x0003,0x00000000,0x00000004,
0x002A5C44,0x0004,0x00000000,0x00000005,
0x002A5C44,0x0005,0x00000000,0x00000006,
0x002A5C44,0x0006,0x00000000,0x00000007,
0x002A5C44,0x0007,0x00000000,0x00000008,
0x002A5C44,0x0008,0x00000000,0x00000009,
0x002A5C44,0x0009,0x00000000,0x0000000A,
0x00000000,0x0000,0x00000000,0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_strE0[0xc] = {
0x002A5C44,0x0000,0x0023AD90,0x00000001,
0x002A5C44,0x0001,0x0023AD90,0x00000001,
0x002A5C44, 0x0002, 0x0023AD90,0x00000001,
0x002A5C44, 0x0003, 0x0023AD90,0x00000001,
0x002A5C44, 0x0004, 0x0023AD90,0x00000001,
0x002A5C44, 0x0005, 0x0023AD90,0x00000001,
0x002A5C44, 0x0006, 0x0023AF60,0x00000001,
0x002A5C44, 0x0007, 0x0023C100,0x00000001,
0x002A5C44, 0x0008, 0x0023AC40,0x00000001,
0x002A5C44, 0x0009, 0x0023AC60,0x00000001,
0x002A5C44, 0x000A, 0x0023AC80,0x00000001,
0x00000000, 0x0000, 0x00000000, 0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_strE1[0x7] = {
0x002A5C44,0x0000,0x00232530,0x00000001,
0x002A5C44,0x0001,0x00232660,0x00000001,
0x002A5C44,0x0002,0x002326C0,0x00000001,
0x002A5C44,0x0003,0x00232570,0x00000001,
0x002A5C44,0x0004,0x002325C0,0x00000001,
0x002A5C44,0x0005,0x00232610,0x00000001,
0x00000000,0x0000,0x00000000,0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_strF0[0x50] = {
0x002A5C44,0x0000,0x0024A3F0,0x00000001,
0x002A5C44,0x0001,0x0024A600,0x00000001,
0x002A5C44,0x0002,0x0024A620,0x00000001,
0x002A5C44,0x0003,0x0024A640,0x00000001,
0x002A5C44,0x0004,0x0024AA70,0x00000001,
0x002A5C44,0x0005,0x0024AA90,0x00000001,
0x002A5C44,0x0006,0x0024AAB0,0x00000001,
0x002A5C44,0x0007,0x0024AD70,0x00000001,
0x002A5C44, 0x0008, 0x0024AD90,0x00000001,
0x002A5C44, 0x0009, 0x0024ADB0,0x00000001,
0x002A5C44, 0x000A, 0x0024AFF0,0x00000001,
0x002A5C44, 0x000B, 0x0024B010,0x00000001,
0x002A5C44, 0x000C, 0x0024B030,0x00000001,
0x002A5C44, 0x000D, 0x0024B2C0,0x00000001,
0x002A5C44, 0x000E, 0x0024B2E0,0x00000001,
0x002A5C44, 0x000F, 0x0024B300,0x00000001,
0x002A5C44, 0x0010, 0x0024B440,0x00000001,
0x002A5C44, 0x0011, 0x0024B460,0x00000001,
0x002A5C44, 0x0012, 0x0024B480,0x00000001,
0x002A5C44, 0x0013, 0x0024B580,0x00000001,
0x002A5C44, 0x0014, 0x0024B5A0,0x00000001,
0x002A5C44, 0x0015, 0x0024B5C0,0x00000001,
0x002A5C44, 0x0016, 0x0024B9C0,0x00000001,
0x002A5C44, 0x0017, 0x0024B9E0,0x00000001,
0x002A5C44, 0x0018, 0x0024BA00,0x00000001,
0x002A5C44, 0x0019, 0x0024BAC0,0x00000001,
0x002A5C44, 0x001A, 0x0024BAE0,0x00000001,
0x002A5C44, 0x001B, 0x0024BB00,0x00000001,
0x002A5C44, 0x001C, 0x0024BD00,0x00000001,
0x002A5C44, 0x001D, 0x0024BD20,0x00000001,
0x002A5C44, 0x001E, 0x0024BD60,0x00000001,
0x002A5C44, 0x001F, 0x0024C180,0x00000001,
0x002A5C44, 0x0020, 0x0024C1A0,0x00000001,
0x002A5C44, 0x0021, 0x0024C1C0,0x00000001,
0x002A5C44, 0x0022, 0x0024C2D0,0x00000001,
0x002A5C44, 0x0023, 0x0024C2F0,0x00000001,
0x002A5C44, 0x0024, 0x0024C310,0x00000001,
0x002A5C44, 0x0025, 0x0024C3A0,0x00000001,
0x002A5C44, 0x0026, 0x0024C3C0,0x00000001,
0x002A5C44, 0x0027, 0x0024C3E0,0x00000001,
0x002A5C44, 0x0028, 0x0024C5D0,0x00000001,
0x002A5C44, 0x0029, 0x0024C5F0,0x00000001,
0x002A5C44, 0x002A, 0x0024C610,0x00000001,
0x002A5C44, 0x002B, 0x0024C830,0x00000001,
0x002A5C44, 0x002C, 0x0024C850,0x00000001,
0x002A5C44, 0x002D, 0x0024C870,0x00000001,
0x002A5C44, 0x002E, 0x0024CA70,0x00000001,
0x002A5C44, 0x002F, 0x0024CA90,0x00000001,
0x002A5C44, 0x0030, 0x0024CAB0,0x00000001,
0x002A5C44, 0x0031, 0x0024CCB0,0x00000001,
0x002A5C44, 0x0032, 0x0024CCD0,0x00000001,
0x002A5C44, 0x0033, 0x0024CCF0,0x00000001,
0x002A5C44, 0x0034, 0x0024CEF0,0x00000001,
0x002A5C44, 0x0035, 0x0024CF10,0x00000001,
0x002A5C44, 0x0036, 0x0024CF30,0x00000001,
0x002A5C44, 0x0037, 0x0024D130,0x00000001,
0x002A5C44, 0x0038, 0x0024D150,0x00000001,
0x002A5C44, 0x0039, 0x0024D170,0x00000001,
0x002A5C44, 0x003A, 0x0024D3A0,0x00000001,
0x002A5C44, 0x003B, 0x0024D3C0,0x00000001,
0x002A5C44, 0x003C, 0x0024D3E0,0x00000001,
0x002A5C44, 0x003D, 0x0024D5E0,0x00000001,
0x002A5C44, 0x003E, 0x0024D600,0x00000001,
0x002A5C44, 0x003F, 0x0024D620,0x00000001,
0x002A5C44, 0x0040, 0x0024D830,0x00000001,
0x002A5C44, 0x0041, 0x0024D850,0x00000001,
0x002A5C44, 0x0042, 0x0024D870,0x00000001,
0x002A5C44, 0x0043, 0x0024DA80,0x00000001,
0x002A5C44, 0x0044, 0x0024DAA0,0x00000001,
0x002A5C44, 0x0045, 0x0024DAC0,0x00000001,
0x002A5C44, 0x0046, 0x0024DCE0,0x00000001,
0x002A5C44, 0x0047, 0x0024DD00,0x00000001,
0x002A5C44, 0x0048, 0x0024DD20,0x00000001,
0x002A5C44, 0x0049, 0x0024DF60,0x00000001,
0x002A5C44, 0x004A, 0x0024DF80,0x00000001,
0x002A5C44, 0x004B, 0x0024DFA0,0x00000001,
0x002A5C44, 0x004C, 0x0024E1C0,0x00000001,
0x002A5C44, 0x004D, 0x0024E1E0,0x00000001,
0x002A5C44, 0x004E, 0x0024A2C0,0x00000001,
0x00000000, 0x0000, 0x00000000, 0x00000000};

type_D4C52ar2 x_DWORD_D4C52ar_strF1[0x1b] = {
0x002A5C44,0x0000,0x002321A0,0x00000001,
0x002A5C44,0x0001,0x002321C0,0x00000001,
0x002A5C44,0x0002,0x002321E0,0x00000001,
0x002A5C44,0x0003,0x00232200,0x00000001,
0x002A5C44,0x0004,0x00232220,0x00000001,
0x002A5C44,0x0005,0x00232240,0x00000001,
0x002A5C44,0x0006,0x00232260,0x00000001,
0x002A5C44,0x0007,0x00232280,0x00000001,
0x002A5C44,0x0008,0x002322A0,0x00000001,
0x002A5C44,0x0009,0x002322C0,0x00000001,
0x002A5C44,0x000A,0x002322E0,0x00000001,
0x002A5C44,0x000B,0x00232300,0x00000001,
0x002A5C44,0x000C,0x00232320,0x00000001,
0x002A5C44,0x000D,0x00232340,0x00000001,
0x002A5C44,0x000E,0x00232360,0x00000001,
0x002A5C44,0x000F,0x00232380,0x00000001,
0x002A5C44,0x0010,0x002323A0,0x00000001,
0x002A5C44,0x0011,0x002323C0,0x00000001,
0x002A5C44,0x0012,0x002323E0,0x00000001,
0x002A5C44,0x0013,0x00232400,0x00000001,
0x002A5C44,0x0014,0x00232420,0x00000001,
0x002A5C44,0x0015,0x00232440,0x00000001,
0x002A5C44,0x0016,0x00232460,0x00000001,
0x002A5C44,0x0017,0x00232480,0x00000001,
0x002A5C44,0x0018,0x002324A0,0x00000001,
0x002A5C44,0x0019,0x002324C0,0x00000001,
0x00000000,0x0000,0x00000000,0x00000000 };



#pragma pack (1)
typedef struct {//lenght 18
	Bit32u dword_0;
	Bit32u dword_4;
	Bit16s word_8;
	type_D4C52ar2* dword_10;
	type_D4C52ar2* dword_14;
}
type_D4C52ar;
#pragma pack (16)

type_D4C52ar str_D4C48ar[0x11] = {
0x002A5C44,0x00000000,0x0000,NULL,NULL,//0
0x002A5C44,0x00000001,0x0000,x_DWORD_D4C52ar_str10,x_DWORD_D4C52ar_str11,//1
0x002A5C44,0x00000002,0x0000,x_DWORD_D4C52ar_str20,x_DWORD_D4C52ar_str21,//2
0x002A5C44,0x00000003,0x0000,x_DWORD_D4C52ar_str30,x_DWORD_D4C52ar_str31,//3
0x002A5C44,0x00000004,0x0000,x_DWORD_D4C52ar_str40,x_DWORD_D4C52ar_str41,//4
0x002A5C44,0x00000005,0x0000,x_DWORD_D4C52ar_str50,x_DWORD_D4C52ar_str51,//5
0x002A5C44,0x00000006,0x0000,x_DWORD_D4C52ar_str60,x_DWORD_D4C52ar_str61,//6
0x002A5C44,0x00000007,0x0000,x_DWORD_D4C52ar_str70,x_DWORD_D4C52ar_str71,//7
0x002A5C44,0x00000008,0x0000,x_DWORD_D4C52ar_str80,x_DWORD_D4C52ar_str81,//8
0x002A5C44,0x00000009,0x0000,x_DWORD_D4C52ar_str90,x_DWORD_D4C52ar_str91,//9
0x002A5C44,0x0000000A,0x0000,x_DWORD_D4C52ar_strA0,x_DWORD_D4C52ar_strA1,//10
0x002A5C44,0x0000000B,0x0000,x_DWORD_D4C52ar_strB0,x_DWORD_D4C52ar_strB1,//11
0x002A5C44,0x0000000C,0x0000,x_DWORD_D4C52ar_strC0,x_DWORD_D4C52ar_strC1,//12
0x002A5C44,0x0000000D,0x0000,x_DWORD_D4C52ar_strD0,x_DWORD_D4C52ar_strD1,//13
0x002A5C44,0x0000000E,0x0000,x_DWORD_D4C52ar_strE0,x_DWORD_D4C52ar_strE1,//14
0x002A5C44,0x0000000F,0x0000,x_DWORD_D4C52ar_strF0,x_DWORD_D4C52ar_strF1,//15
0x00000000,0x00000000,0x0000,NULL,NULL
};









Bit8u x_DWORD_D4C52ar[0x5bc6] = {//0x4edc//0x5004 //2a5c52 -1d1000 //0x2ab836 -end
/*0x40,0x1E,0x2A,0x00,
0x44,0x5C,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x7C,0x5D,0x2A,0x00,0x8C,0x5D,0x2A,0x00,//0x2a5c44//0x12a 0x13a
0x44,0x5C,0x2A,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x94,0x5F,0x2A,0x00,0xD8,0x60,0x2A,0x00,//0x2a60d8//0x342 0x486
0x44,0x5C,0x2A,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x18,0x5E,0x2A,0x00,0xDC,0x5E,0x2A,0x00,//0x2a5edc//0x28a
0x44,0x5C,0x2A,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x2A,0x00,0x74,0x61,0x2A,0x00,
0x44,0x5C,0x2A,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x84,0x61,0x2A,0x00,0x6C,0x6E,0x2A,0x00,
0x44,0x5C,0x2A,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x10,0x70,0x2A,0x00,0x20,0x70,0x2A,0x00,
0x44,0x5C,0x2A,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x30,0x70,0x2A,0x00,0x40,0x70,0x2A,0x00,
0x44,0x5C,0x2A,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x50,0x70,0x2A,0x00,0x60,0x70,0x2A,0x00,
0x44,0x5C,0x2A,0x00,0x09,0x00,0x00,0x00,0x00,0x00,0x70,0x70,0x2A,0x00,0x40,0x72,0x2A,0x00,
0x44,0x5C,0x2A,0x00,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x74,0x2A,0x00,0x78,0x79,0x2A,0x00,
0x44,0x5C,0x2A,0x00,0x0B,0x00,0x00,0x00,0x00,0x00,0x90,0x7E,0x2A,0x00,0x14,0x81,0x2A,0x00,//10
0x44,0x5C,0x2A,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x98,0x83,0x2A,0x00,0xA8,0x83,0x2A,0x00,
0x44,0x5C,0x2A,0x00,0x0D,0x00,0x00,0x00,0x00,0x00,0x94,0x89,0x2A,0x00,0x30,0x8A,0x2A,0x00,
0x44,0x5C,0x2A,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0xCC,0x8A,0x2A,0x00,0x74,0x8B,0x2A,0x00,
0x44,0x5C,0x2A,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0xB8,0x83,0x2A,0x00,0x18,0x88,0x2A,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,

0x44,0x5C,0x2A,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x09,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x44,0x5C,0x2A,0x00,0x00,0x00,0x10,0xF0,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x01,0x00,0x10,0x39,0x1F,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x02,0x00,0x10,0xF3,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x03,0x00,0xC0,0xF7,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x04,0x00,0xF0,0x08,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x05,0x00,0x70,0x0A,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x06,0x00,0xA0,0x0C,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x07,0x00,0x90,0x1A,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x08,0x00,0xA0,0x1A,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x09,0x00,0xB0,0x1A,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0A,0x00,0x90,0x1E,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0B,0x00,0xC0,0xF8,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0C,0x00,0xC0,0xF8,0x23,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x44,0x5C,0x2A,0x00,0x00,0x00,0x20,0xB9,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x01,0x00,0xC0,0xB9,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x02,0x00,0x40,0xBA,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x03,0x00,0xA0,0xBB,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x04,0x00,0x20,0xB8,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x05,0x00,0x40,0xB8,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x06,0x00,0x60,0xB8,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x07,0x00,0x80,0xB8,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x08,0x00,0xA0,0xB8,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x09,0x00,0xC0,0xB8,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0A,0x00,0xE0,0xB8,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0B,0x00,0x00,0xB9,0x22,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,
0x44,0x5C,0x2A,0x00,0x00,0x00,0x20,0x5E,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x01,0x00,0x60,0x5F,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x02,0x00,0xF0,0x5F,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x03,0x00,0x40,0x60,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x04,0x00,0x60,0x60,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x05,0x00,0x70,0x60,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x06,0x00,0x80,0x60,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x07,0x00,0xF0,0x60,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x08,0x00,0x00,0x61,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x09,0x00,0x10,0x61,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0A,0x00,0x30,0x61,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0B,0x00,0x40,0x61,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0C,0x00,0x50,0x61,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0D,0x00,0x60,0x61,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0E,0x00,0x70,0x61,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0F,0x00,0x80,0x61,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x10,0x00,0x90,0x61,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x11,0x00,0xA0,0x61,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x12,0x00,0xB0,0x61,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x13,0x00,0x40,0x62,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x14,0x00,0xA0,0x62,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x15,0x00,0x80,0x62,0x24,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,
0x44,0x5C,0x2A,0x00,0x00,0x00,0x40,0xBC,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x01,0x00,0x70,0xBD,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x02,0x00,0xF0,0xBD,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x03,0x00,0x80,0xBE,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x04,0x00,0x00,0xBF,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x05,0x00,0x70,0xBF,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x06,0x00,0xE0,0xBF,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x07,0x00,0xF0,0xC0,0x22,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x08,0x00,0x20,0xC1,0x22,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0xC8,0x5B,0x2A,0x00,0x00,0x00,0x20,0xFF,0x1F,0x00,0x01,0x00,0x00,0x00,
0xC8,0x5B,0x2A,0x00,0x01,0x00,0x40,0xFF,0x1F,0x00,0x01,0x00,0x00,0x00,
0xC8,0x5B,0x2A,0x00,0x02,0x00,0x70,0xFF,0x1F,0x00,0x01,0x00,0x00,0x00,
0xC8,0x5B,0x2A,0x00,0x03,0x00,0xD0,0xFF,0x1F,0x00,0x01,0x00,0x00,0x00,
0xC8,0x5B,0x2A,0x00,0x04,0x00,0x00,0x00,0x20,0x00,0x01,0x00,0x00,0x00,
0xC8,0x5B,0x2A,0x00,0x05,0x00,0x20,0x00,0x20,0x00,0x01,0x00,0x00,0x00,
0xC8,0x5B,0x2A,0x00,0x06,0x00,0xB0,0x02,0x20,0x00,0x01,0x00,0x00,0x00,
0xC8,0x5B,0x2A,0x00,0x07,0x00,0x00,0x03,0x20,0x00,0x01,0x00,0x00,0x00,
0x3C,0x5C,0x2A,0x00,0x08,0x00,0x40,0x03,0x20,0x00,0x01,0x00,0x00,0x00,
0x3C,0x5C,0x2A,0x00,0x09,0x00,0xC0,0x03,0x20,0x00,0x01,0x00,0x00,0x00,
0x3C,0x5C,0x2A,0x00,0x0A,0x00,0x40,0x04,0x20,0x00,0x01,0x00,0x00,0x00,
0x3C,0x5C,0x2A,0x00,0x0B,0x00,0x70,0x04,0x20,0x00,0x01,0x00,0x00,0x00,
0x3C,0x5C,0x2A,0x00,0x0C,0x00,0xF0,0x04,0x20,0x00,0x01,0x00,0x00,0x00,
0x3C,0x5C,0x2A,0x00,0x0D,0x00,0x10,0x05,0x20,0x00,0x01,0x00,0x00,0x00,
0x3C,0x5C,0x2A,0x00,0x0E,0x00,0x30,0x05,0x20,0x00,0x01,0x00,0x00,0x00,
0x3C,0x5C,0x2A,0x00,0x0F,0x00,0xB0,0x05,0x20,0x00,0x01,0x00,0x00,0x00,
0xD0,0x5B,0x2A,0x00,0x10,0x00,0x30,0x06,0x20,0x00,0x01,0x00,0x00,0x00,
0xD0,0x5B,0x2A,0x00,0x11,0x00,0x60,0x06,0x20,0x00,0x01,0x00,0x00,0x00,
0xD0,0x5B,0x2A,0x00,0x12,0x00,0xD0,0x06,0x20,0x00,0x01,0x00,0x00,0x00,
0xD0,0x5B,0x2A,0x00,0x13,0x00,0x00,0x08,0x20,0x00,0x01,0x00,0x00,0x00,
0xD0,0x5B,0x2A,0x00,0x14,0x00,0x30,0x08,0x20,0x00,0x01,0x00,0x00,0x00,
0xD0,0x5B,0x2A,0x00,0x15,0x00,0x50,0x08,0x20,0x00,0x01,0x00,0x00,0x00,
0xD0,0x5B,0x2A,0x00,0x16,0x00,0x70,0x08,0x20,0x00,0x01,0x00,0x00,0x00,
0xD0,0x5B,0x2A,0x00,0x17,0x00,0xA0,0x08,0x20,0x00,0x01,0x00,0x00,0x00,
0xD4,0x5B,0x2A,0x00,0x18,0x00,0x50,0x09,0x20,0x00,0x01,0x00,0x00,0x00,
0xD4,0x5B,0x2A,0x00,0x19,0x00,0x70,0x09,0x20,0x00,0x01,0x00,0x00,0x00,
0xD4,0x5B,0x2A,0x00,0x1A,0x00,0x90,0x09,0x20,0x00,0x01,0x00,0x00,0x00,
0xD4,0x5B,0x2A,0x00,0x1B,0x00,0xE0,0x09,0x20,0x00,0x01,0x00,
0x00,0x00,0xD4,0x5B,0x2A,0x00,0x1C,0x00,0x00,0x0A,0x20,0x00,0x01,0x00,
0x00,0x00,0xD4,0x5B,0x2A,0x00,0x1D,0x00,0x20,0x0A,0x20,0x00,0x01,0x00,
0x00,0x00,0xD4,0x5B,0x2A,0x00,0x1E,0x00,0x40,0x0A,0x20,0x00,0x01,0x00,
0x00,0x00,0xD4,0x5B,0x2A,0x00,0x1F,0x00,0x50,0x0A,0x20,0x00,0x01,0x00,
0x00,0x00,0xD8,0x5B,0x2A,0x00,0x20,0x00,0x70,0x0A,0x20,0x00,0x01,0x00,
0x00,0x00,0xD8,0x5B,0x2A,0x00,0x21,0x00,0xA0,0x0A,0x20,0x00,0x01,0x00,
0x00,0x00,0xD8,0x5B,0x2A,0x00,0x22,0x00,0x40,0x0F,0x20,0x00,0x01,0x00,
0x00,0x00,0xD8,0x5B,0x2A,0x00,0x23,0x00,0xE0,0x0F,0x20,0x00,0x01,0x00,
0x00,0x00,0xD8,0x5B,0x2A,0x00,0x24,0x00,0x10,0x10,0x20,0x00,0x01,0x00,
0x00,0x00,0xD8,0x5B,0x2A,0x00,0x25,0x00,0x40,0x10,0x20,0x00,0x01,0x00,
0x00,0x00,0xD8,0x5B,0x2A,0x00,0x26,0x00,0x30,0x11,0x20,0x00,0x01,0x00,
0x00,0x00,0xD8,0x5B,0x2A,0x00,0x27,0x00,0x40,0x11,0x20,0x00,0x01,0x00,
0x00,0x00,0xDC,0x5B,0x2A,0x00,0x28,0x00,0x70,0x11,0x20,0x00,0x00,0x00,
0x00,0x00,0xDC,0x5B,0x2A,0x00,0x29,0x00,0x80,0x11,0x20,0x00,0x00,0x00,
0x00,0x00,0xDC,0x5B,0x2A,0x00,0x2A,0x00,0x90,0x11,0x20,0x00,0x00,0x00,
0x00,0x00,0xDC,0x5B,0x2A,0x00,0x2B,0x00,0xA0,0x11,0x20,0x00,0x00,0x00,
0x00,0x00,0xDC,0x5B,0x2A,0x00,0x2C,0x00,0xB0,0x11,0x20,0x00,0x00,0x00,
0x00,0x00,0xDC,0x5B,0x2A,0x00,0x2D,0x00,0xC0,0x11,0x20,0x00,0x00,0x00,
0x00,0x00,0xDC,0x5B,0x2A,0x00,0x2E,0x00,0xD0,0x11,0x20,0x00,0x00,0x00,
0x00,0x00,0xDC,0x5B,0x2A,0x00,0x2F,0x00,0xE0,0x11,0x20,0x00,0x00,0x00,
0x00,0x00,0xE0,0x5B,0x2A,0x00,0x30,0x00,0xF0,0x11,0x20,0x00,0x00,0x00,
0x00,0x00,0xE0,0x5B,0x2A,0x00,0x31,0x00,0x00,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE0,0x5B,0x2A,0x00,0x32,0x00,0x10,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE0,0x5B,0x2A,0x00,0x33,0x00,0x20,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE0,0x5B,0x2A,0x00,0x34,0x00,0x30,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE0,0x5B,0x2A,0x00,0x35,0x00,0x40,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE0,0x5B,0x2A,0x00,0x36,0x00,0x50,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE0,0x5B,0x2A,0x00,0x37,0x00,0x60,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE4,0x5B,0x2A,0x00,0x38,0x00,0x70,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE4,0x5B,0x2A,0x00,0x39,0x00,0x80,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE4,0x5B,0x2A,0x00,0x3A,0x00,0x90,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE4,0x5B,0x2A,0x00,0x3B,0x00,0xA0,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE4,0x5B,0x2A,0x00,0x3C,0x00,0xB0,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE4,0x5B,0x2A,0x00,0x3D,0x00,0xC0,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE4,0x5B,0x2A,0x00,0x3E,0x00,0xD0,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE4,0x5B,0x2A,0x00,0x3F,0x00,0xE0,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE8,0x5B,0x2A,0x00,0x40,0x00,0xF0,0x12,0x20,0x00,0x00,0x00,
0x00,0x00,0xE8,0x5B,0x2A,0x00,0x41,0x00,0x00,0x13,0x20,0x00,0x00,0x00,
0x00,0x00,0xE8,0x5B,0x2A,0x00,0x42,0x00,0x10,0x13,0x20,0x00,0x00,0x00,
0x00,0x00,0xE8,0x5B,0x2A,0x00,0x43,0x00,0x20,0x13,0x20,0x00,0x00,0x00,
0x00,0x00,0xE8,0x5B,0x2A,0x00,0x44,0x00,0x30,0x13,0x20,0x00,0x00,0x00,
0x00,0x00,0xE8,0x5B,0x2A,0x00,0x45,0x00,0x40,0x13,0x20,0x00,0x00,0x00,
0x00,0x00,0xE8,0x5B,0x2A,0x00,0x46,0x00,0x50,0x13,0x20,0x00,0x00,0x00,
0x00,0x00,0xE8,0x5B,0x2A,0x00,0x47,0x00,0x60,0x13,0x20,0x00,0x00,0x00,
0x00,0x00,0xEC,0x5B,0x2A,0x00,0x48,0x00,0x70,0x13,0x20,0x00,0x01,0x00,
0x00,0x00,0xEC,0x5B,0x2A,0x00,0x49,0x00,0xD0,0x13,0x20,0x00,0x01,0x00,
0x00,0x00,0xEC,0x5B,0x2A,0x00,0x4A,0x00,0x50,0x1C,0x20,0x00,0x01,0x00,
0x00,0x00,0xEC,0x5B,0x2A,0x00,0x4B,0x00,0x50,0x1E,0x20,0x00,0x01,0x00,
0x00,0x00,0xEC,0x5B,0x2A,0x00,0x4C,0x00,0x80,0x1E,0x20,0x00,0x01,0x00,
0x00,0x00,0xEC,0x5B,0x2A,0x00,0x4D,0x00,0xA0,0x1E,0x20,0x00,0x01,0x00,
0x00,0x00,0xEC,0x5B,0x2A,0x00,0x4E,0x00,0xB0,0x1F,0x20,0x00,0x01,0x00,
0x00,0x00,0xEC,0x5B,0x2A,0x00,0x4F,0x00,0xC0,0x1F,0x20,0x00,0x01,0x00,
0x00,0x00,0xF0,0x5B,0x2A,0x00,0x50,0x00,0x30,0x20,0x20,0x00,0x01,0x00,
0x00,0x00,0xF0,0x5B,0x2A,0x00,0x51,0x00,0x30,0x35,0x20,0x00,0x01,0x00,
0x00,0x00,0xF0,0x5B,0x2A,0x00,0x52,0x00,0x40,0x35,0x20,0x00,0x01,0x00,
0x00,0x00,0xF0,0x5B,0x2A,0x00,0x53,0x00,0x50,0x35,0x20,0x00,0x01,0x00,
0x00,0x00,0xF0,0x5B,0x2A,0x00,0x54,0x00,0x60,0x35,0x20,0x00,0x01,0x00,
0x00,0x00,0xF0,0x5B,0x2A,0x00,0x55,0x00,0x80,0x35,0x20,0x00,0x01,0x00,
0x00,0x00,0xF0,0x5B,0x2A,0x00,0x56,0x00,0xA0,0x35,0x20,0x00,0x01,0x00,
0x00,0x00,0xF0,0x5B,0x2A,0x00,0x57,0x00,0xB0,0x35,0x20,0x00,0x01,0x00,
0x00,0x00,0xF4,0x5B,0x2A,0x00,0x58,0x00,0xC0,0x35,0x20,0x00,0x00,0x00,
0x00,0x00,0xF4,0x5B,0x2A,0x00,0x59,0x00,0xD0,0x35,0x20,0x00,0x00,0x00,
0x00,0x00,0xF4,0x5B,0x2A,0x00,0x5A,0x00,0xE0,0x35,0x20,0x00,0x00,0x00,
0x00,0x00,0xF4,0x5B,0x2A,0x00,0x5B,0x00,0xF0,0x35,0x20,0x00,0x00,0x00,
0x00,0x00,0xF4,0x5B,0x2A,0x00,0x5C,0x00,0x00,0x36,0x20,0x00,0x00,0x00,
0x00,0x00,0xF4,0x5B,0x2A,0x00,0x5D,0x00,0x10,0x36,0x20,0x00,0x00,0x00,
0x00,0x00,0xF4,0x5B,0x2A,0x00,0x5E,0x00,0x20,0x36,0x20,0x00,0x00,0x00,
0x00,0x00,0xF4,0x5B,0x2A,0x00,0x5F,0x00,0x30,0x36,0x20,0x00,0x00,0x00,
0x00,0x00,0xF8,0x5B,0x2A,0x00,0x60,0x00,0x60,0x37,0x20,0x00,0x01,0x00,
0x00,0x00,0xF8,0x5B,0x2A,0x00,0x61,0x00,0x80,0x3C,0x20,0x00,0x01,0x00,
0x00,0x00,0xF8,0x5B,0x2A,0x00,0x62,0x00,0x60,0x3E,0x20,0x00,0x01,0x00,
0x00,0x00,0xF8,0x5B,0x2A,0x00,0x63,0x00,0x20,0x40,0x20,0x00,0x01,0x00,
0x00,0x00,0xF8,0x5B,0x2A,0x00,0x64,0x00,0xE0,0x41,0x20,0x00,0x01,0x00,
0x00,0x00,0xF8,0x5B,0x2A,0x00,0x65,0x00,0x00,0x42,0x20,0x00,0x01,0x00,
0x00,0x00,0xF8,0x5B,0x2A,0x00,0x66,0x00,0x60,0x42,0x20,0x00,0x01,0x00,
0x00,0x00,0xF8,0x5B,0x2A,0x00,0x67,0x00,0xA0,0x42,0x20,0x00,0x01,0x00,
0x00,0x00,0xFC,0x5B,0x2A,0x00,0x68,0x00,0x20,0x43,0x20,0x00,0x01,0x00,
0x00,0x00,0xFC,0x5B,0x2A,0x00,0x69,0x00,0x40,0x43,0x20,0x00,0x01,0x00,
0x00,0x00,0xFC,0x5B,0x2A,0x00,0x6A,0x00,0x40,0x46,0x20,0x00,0x01,0x00,
0x00,0x00,0xFC,0x5B,0x2A,0x00,0x6B,0x00,0x60,0x46,0x20,0x00,0x01,0x00,
0x00,0x00,0xFC,0x5B,0x2A,0x00,0x6C,0x00,0x80,0x46,0x20,0x00,0x01,0x00,
0x00,0x00,0xFC,0x5B,0x2A,0x00,0x6D,0x00,0xF0,0x46,0x20,0x00,0x01,0x00,
0x00,0x00,0xFC,0x5B,0x2A,0x00,0x6E,0x00,0x10,0x47,0x20,0x00,0x01,0x00,
0x00,0x00,0xFC,0x5B,0x2A,0x00,0x6F,0x00,0x50,0x47,0x20,0x00,0x01,0x00,
0x00,0x00,0x00,0x5C,0x2A,0x00,0x70,0x00,0x90,0x47,0x20,0x00,0x01,0x00,
0x00,0x00,0x00,0x5C,0x2A,0x00,0x71,0x00,0xB0,0x47,0x20,0x00,0x01,0x00,
0x00,0x00,0x00,0x5C,0x2A,0x00,0x72,0x00,0xC0,0x4A,0x20,0x00,0x01,0x00,
0x00,0x00,0x00,0x5C,0x2A,0x00,0x73,0x00,0xE0,0x4A,0x20,0x00,0x01,0x00,
0x00,0x00,0x00,0x5C,0x2A,0x00,0x74,0x00,0x00,0x4B,0x20,0x00,0x01,0x00,
0x00,0x00,0x00,0x5C,0x2A,0x00,0x75,0x00,0x30,0x4B,0x20,0x00,0x01,0x00,
0x00,0x00,0x00,0x5C,0x2A,0x00,0x76,0x00,0x90,0x4B,0x20,0x00,0x01,0x00,
0x00,0x00,0x00,0x5C,0x2A,0x00,0x77,0x00,0xD0,0x4B,0x20,0x00,0x01,0x00,
0x00,0x00,0x04,0x5C,0x2A,0x00,0x78,0x00,0x20,0x4C,0x20,0x00,0x01,0x00,
0x00,0x00,0x04,0x5C,0x2A,0x00,0x79,0x00,0x40,0x4C,0x20,0x00,0x01,0x00,
0x00,0x00,0x04,0x5C,0x2A,0x00,0x7A,0x00,0x60,0x4E,0x20,0x00,0x01,0x00,
0x00,0x00,0x04,0x5C,0x2A,0x00,0x7B,0x00,0xA0,0x50,0x20,0x00,0x01,0x00,
0x00,0x00,0x04,0x5C,0x2A,0x00,0x7C,0x00,0xC0,0x50,0x20,0x00,0x01,0x00,
0x00,0x00,0x04,0x5C,0x2A,0x00,0x7D,0x00,0xE0,0x50,0x20,0x00,0x01,0x00,
0x00,0x00,0x04,0x5C,0x2A,0x00,0x7E,0x00,0xF0,0x53,0x20,0x00,0x01,0x00,
0x00,0x00,0x04,0x5C,0x2A,0x00,0x7F,0x00,0x00,0x54,0x20,0x00,0x01,0x00,
0x00,0x00,0x08,0x5C,0x2A,0x00,0x80,0x00,0x20,0x54,0x20,0x00,0x01,0x00,
0x00,0x00,0x08,0x5C,0x2A,0x00,0x81,0x00,0x40,0x54,0x20,0x00,0x01,0x00,
0x00,0x00,0x08,0x5C,0x2A,0x00,0x82,0x00,0x10,0x55,0x20,0x00,0x01,0x00,
0x00,0x00,0x08,0x5C,0x2A,0x00,0x83,0x00,0xD0,0x57,0x20,0x00,0x01,0x00,
0x00,0x00,0x08,0x5C,0x2A,0x00,0x84,0x00,0xF0,0x57,0x20,0x00,0x01,0x00,
0x00,0x00,0x08,0x5C,0x2A,0x00,0x85,0x00,0x10,0x58,0x20,0x00,0x01,0x00,
0x00,0x00,0x08,0x5C,0x2A,0x00,0x86,0x00,0x30,0x58,0x20,0x00,0x01,0x00,
0x00,0x00,0x08,0x5C,0x2A,0x00,0x87,0x00,0x40,0x58,0x20,0x00,0x01,0x00,
0x00,0x00,0x0C,0x5C,0x2A,0x00,0x88,0x00,0x60,0x58,0x20,0x00,0x01,0x00,
0x00,0x00,0x0C,0x5C,0x2A,0x00,0x89,0x00,0xC0,0x58,0x20,0x00,0x01,0x00,
0x00,0x00,0x0C,0x5C,0x2A,0x00,0x8A,0x00,0x30,0x59,0x20,0x00,0x01,0x00,
0x00,0x00,0x0C,0x5C,0x2A,0x00,0x8B,0x00,0x40,0x5D,0x20,0x00,0x01,0x00,
0x00,0x00,0x0C,0x5C,0x2A,0x00,0x8C,0x00,0xA0,0x5D,0x20,0x00,0x01,0x00,
0x00,0x00,0x0C,0x5C,0x2A,0x00,0x8D,0x00,0xC0,0x5D,0x20,0x00,0x01,0x00,
0x00,0x00,0x0C,0x5C,0x2A,0x00,0x8E,0x00,0xE0,0x5D,0x20,0x00,0x01,0x00,
0x00,0x00,0x0C,0x5C,0x2A,0x00,0x8F,0x00,0xF0,0x5D,0x20,0x00,0x01,0x00,
0x00,0x00,0x10,0x5C,0x2A,0x00,0x90,0x00,0x20,0x5E,0x20,0x00,0x01,0x00,
0x00,0x00,0x10,0x5C,0x2A,0x00,0x91,0x00,0x50,0x60,0x20,0x00,0x01,0x00,
0x00,0x00,0x10,0x5C,0x2A,0x00,0x92,0x00,0xB0,0x60,0x20,0x00,0x01,0x00,
0x00,0x00,0x10,0x5C,0x2A,0x00,0x93,0x00,0x80,0x62,0x20,0x00,0x01,0x00,
0x00,0x00,0x10,0x5C,0x2A,0x00,0x94,0x00,0xA0,0x62,0x20,0x00,0x01,0x00,
0x00,0x00,0x10,0x5C,0x2A,0x00,0x95,0x00,0xC0,0x62,0x20,0x00,0x01,0x00,
0x00,0x00,0x10,0x5C,0x2A,0x00,0x96,0x00,0x40,0x65,0x20,0x00,0x01,0x00,
0x00,0x00,0x10,0x5C,0x2A,0x00,0x97,0x00,0x50,0x65,0x20,0x00,0x01,0x00,
0x00,0x00,0x14,0x5C,0x2A,0x00,0x98,0x00,0x90,0x65,0x20,0x00,0x01,0x00,
0x00,0x00,0x14,0x5C,0x2A,0x00,0x99,0x00,0xC0,0x65,0x20,0x00,0x01,0x00,
0x00,0x00,0x14,0x5C,0x2A,0x00,0x9A,0x00,0x10,0x66,0x20,0x00,0x01,0x00,
0x00,0x00,0x14,0x5C,0x2A,0x00,0x9B,0x00,0xD0,0x6C,0x20,0x00,0x01,0x00,
0x00,0x00,0x14,0x5C,0x2A,0x00,0x9C,0x00,0x00,0x6D,0x20,0x00,0x01,0x00,
0x00,0x00,0x14,0x5C,0x2A,0x00,0x9D,0x00,0x20,0x6D,0x20,0x00,0x01,0x00,
0x00,0x00,0x14,0x5C,0x2A,0x00,0x9E,0x00,0x40,0x6D,0x20,0x00,0x01,0x00,
0x00,0x00,0x14,0x5C,0x2A,0x00,0x9F,0x00,0x50,0x6D,0x20,0x00,0x01,0x00,
0x00,0x00,0x18,0x5C,0x2A,0x00,0xA0,0x00,0x80,0x6D,0x20,0x00,0x01,0x00,
0x00,0x00,0x18,0x5C,0x2A,0x00,0xA1,0x00,0xE0,0x6D,0x20,0x00,0x01,0x00,
0x00,0x00,0x18,0x5C,0x2A,0x00,0xA2,0x00,0x40,0x6E,0x20,0x00,0x01,0x00,
0x00,0x00,0x18,0x5C,0x2A,0x00,0xA3,0x00,0x70,0x6F,0x20,0x00,0x01,0x00,
0x00,0x00,0x18,0x5C,0x2A,0x00,0xA4,0x00,0xD0,0x6F,0x20,0x00,0x01,0x00,
0x00,0x00,0x18,0x5C,0x2A,0x00,0xA5,0x00,0xF0,0x6F,0x20,0x00,0x01,0x00,
0x00,0x00,0x18,0x5C,0x2A,0x00,0xA6,0x00,0x10,0x70,0x20,0x00,0x01,0x00,
0x00,0x00,0x18,0x5C,0x2A,0x00,0xA7,0x00,0x20,0x70,0x20,0x00,0x01,0x00,
0x00,0x00,0x1C,0x5C,0x2A,0x00,0xA8,0x00,0x50,0x70,0x20,0x00,0x01,0x00,
0x00,0x00,0x1C,0x5C,0x2A,0x00,0xA9,0x00,0x70,0x70,0x20,0x00,0x01,0x00,
0x00,0x00,0x1C,0x5C,0x2A,0x00,0xAA,0x00,0x20,0x72,0x20,0x00,0x01,0x00,
0x00,0x00,0x1C,0x5C,0x2A,0x00,0xAB,0x00,0xC0,0x73,0x20,0x00,0x01,0x00,
0x00,0x00,0x1C,0x5C,0x2A,0x00,0xAC,0x00,0xE0,0x73,0x20,0x00,0x01,0x00,
0x00,0x00,0x1C,0x5C,0x2A,0x00,0xAD,0x00,0x00,0x74,0x20,0x00,0x01,0x00,
0x00,0x00,0x1C,0x5C,0x2A,0x00,0xAE,0x00,0x20,0x74,0x20,0x00,0x01,0x00,
0x00,0x00,0x1C,0x5C,0x2A,0x00,0xAF,0x00,0x70,0x74,0x20,0x00,0x01,0x00,
0x00,0x00,0x20,0x5C,0x2A,0x00,0xB0,0x00,0x60,0x79,0x20,0x00,0x01,0x00,
0x00,0x00,0x20,0x5C,0x2A,0x00,0xB1,0x00,0x90,0x79,0x20,0x00,0x01,0x00,
0x00,0x00,0x20,0x5C,0x2A,0x00,0xB2,0x00,0xA0,0x7A,0x20,0x00,0x01,0x00,
0x00,0x00,0x20,0x5C,0x2A,0x00,0xB3,0x00,0xD0,0x7B,0x20,0x00,0x01,0x00,
0x00,0x00,0x20,0x5C,0x2A,0x00,0xB4,0x00,0xA0,0x7C,0x20,0x00,0x01,0x00,
0x00,0x00,0x20,0x5C,0x2A,0x00,0xB5,0x00,0xC0,0x7C,0x20,0x00,0x01,0x00,
0x00,0x00,0x20,0x5C,0x2A,0x00,0xB6,0x00,0x20,0x89,0x20,0x00,0x01,0x00,
0x00,0x00,0x20,0x5C,0x2A,0x00,0xB7,0x00,0x30,0x89,0x20,0x00,0x01,0x00,
0x00,0x00,0x24,0x5C,0x2A,0x00,0xB8,0x00,0x50,0x89,0x20,0x00,0x01,0x00,
0x00,0x00,0x24,0x5C,0x2A,0x00,0xB9,0x00,0x20,0x8B,0x20,0x00,0x01,0x00,
0x00,0x00,0x24,0x5C,0x2A,0x00,0xBA,0x00,0x00,0x8E,0x20,0x00,0x01,0x00,
0x00,0x00,0x24,0x5C,0x2A,0x00,0xBB,0x00,0x10,0x8C,0x20,0x00,0x01,0x00,
0x00,0x00,0x24,0x5C,0x2A,0x00,0xBC,0x00,0xA0,0x8F,0x20,0x00,0x01,0x00,
0x00,0x00,0x24,0x5C,0x2A,0x00,0xBD,0x00,0xC0,0x8F,0x20,0x00,0x01,0x00,
0x00,0x00,0x24,0x5C,0x2A,0x00,0xBE,0x00,0x60,0x94,0x20,0x00,0x01,0x00,
0x00,0x00,0x24,0x5C,0x2A,0x00,0xBF,0x00,0x70,0x94,0x20,0x00,0x01,0x00,
0x00,0x00,0x2C,0x5C,0x2A,0x00,0xC0,0x00,0x90,0x94,0x20,0x00,0x01,0x00,
0x00,0x00,0x2C,0x5C,0x2A,0x00,0xC1,0x00,0x00,0x95,0x20,0x00,0x01,0x00,
0x00,0x00,0x2C,0x5C,0x2A,0x00,0xC2,0x00,0x70,0x95,0x20,0x00,0x01,0x00,
0x00,0x00,0x2C,0x5C,0x2A,0x00,0xC3,0x00,0xD0,0x95,0x20,0x00,0x01,0x00,
0x00,0x00,0x2C,0x5C,0x2A,0x00,0xC4,0x00,0xF0,0x95,0x20,0x00,0x01,0x00,
0x00,0x00,0x2C,0x5C,0x2A,0x00,0xC5,0x00,0x10,0x96,0x20,0x00,0x01,0x00,
0x00,0x00,0x2C,0x5C,0x2A,0x00,0xC6,0x00,0x30,0x96,0x20,0x00,0x01,0x00,
0x00,0x00,0x2C,0x5C,0x2A,0x00,0xC7,0x00,0x60,0x96,0x20,0x00,0x01,0x00,
0x00,0x00,0x28,0x5C,0x2A,0x00,0xC8,0x00,0x60,0x98,0x20,0x00,0x01,0x00,
0x00,0x00,0x28,0x5C,0x2A,0x00,0xC9,0x00,0x30,0x9C,0x20,0x00,0x01,0x00,
0x00,0x00,0x28,0x5C,0x2A,0x00,0xCA,0x00,0x60,0x9C,0x20,0x00,0x01,0x00,
0x00,0x00,0x28,0x5C,0x2A,0x00,0xCB,0x00,0xC0,0x9C,0x20,0x00,0x01,0x00,
0x00,0x00,0x28,0x5C,0x2A,0x00,0xCC,0x00,0xE0,0x9C,0x20,0x00,0x01,0x00,
0x00,0x00,0x28,0x5C,0x2A,0x00,0xCD,0x00,0xC0,0x9E,0x20,0x00,0x01,0x00,
0x00,0x00,0x28,0x5C,0x2A,0x00,0xCE,0x00,0x40,0x9F,0x20,0x00,0x01,0x00,
0x00,0x00,0x28,0x5C,0x2A,0x00,0xCF,0x00,0x50,0x9F,0x20,0x00,0x01,0x00,
0x00,0x00,0x40,0x5C,0x2A,0x00,0xD0,0x00,0x90,0x9F,0x20,0x00,0x01,0x00,
0x00,0x00,0x40,0x5C,0x2A,0x00,0xD1,0x00,0xC0,0x9F,0x20,0x00,0x01,0x00,
0x00,0x00,0x40,0x5C,0x2A,0x00,0xD2,0x00,0xF0,0x9F,0x20,0x00,0x01,0x00,
0x00,0x00,0x40,0x5C,0x2A,0x00,0xD3,0x00,0x00,0xA3,0x20,0x00,0x01,0x00,
0x00,0x00,0x40,0x5C,0x2A,0x00,0xD4,0x00,0x30,0xA3,0x20,0x00,0x01,0x00,
0x00,0x00,0x40,0x5C,0x2A,0x00,0xD5,0x00,0x50,0xA3,0x20,0x00,0x01,0x00,
0x00,0x00,0x40,0x5C,0x2A,0x00,0xD6,0x00,0x70,0xA3,0x20,0x00,0x01,0x00,
0x00,0x00,0x40,0x5C,0x2A,0x00,0xD7,0x00,0x80,0xA3,0x20,0x00,0x01,0x00,
0x00,0x00,0x30,0x5C,0x2A,0x00,0xD8,0x00,0x00,0xA4,0x20,0x00,0x01,0x00,
0x00,0x00,0x30,0x5C,0x2A,0x00,0xD9,0x00,0x70,0xA6,0x20,0x00,0x01,0x00,
0x00,0x00,0x30,0x5C,0x2A,0x00,0xDA,0x00,0x10,0xA7,0x20,0x00,0x01,0x00,
0x00,0x00,0x30,0x5C,0x2A,0x00,0xDB,0x00,0x90,0xA8,0x20,0x00,0x01,0x00,
0x00,0x00,0x30,0x5C,0x2A,0x00,0xDC,0x00,0xB0,0xA8,0x20,0x00,0x01,0x00,
0x00,0x00,0x30,0x5C,0x2A,0x00,0xDD,0x00,0xD0,0xA8,0x20,0x00,0x01,0x00,
0x00,0x00,0x30,0x5C,0x2A,0x00,0xDE,0x00,0x20,0xA9,0x20,0x00,0x01,0x00,
0x00,0x00,0x30,0x5C,0x2A,0x00,0xDF,0x00,0x30,0xA9,0x20,0x00,0x01,0x00,
0x00,0x00,0x34,0x5C,0x2A,0x00,0xE0,0x00,0xD0,0xC1,0x20,0x00,0x01,0x00,
0x00,0x00,0x34,0x5C,0x2A,0x00,0xE1,0x00,0x00,0xC2,0x20,0x00,0x01,0x00,
0x00,0x00,0x34,0x5C,0x2A,0x00,0xE2,0x00,0x60,0xC2,0x20,0x00,0x01,0x00,
0x00,0x00,0x34,0x5C,0x2A,0x00,0xE3,0x00,0x50,0xC7,0x20,0x00,0x01,0x00,
0x00,0x00,0x34,0x5C,0x2A,0x00,0xE4,0x00,0x60,0xC7,0x20,0x00,0x01,0x00,
0x00,0x00,0x34,0x5C,0x2A,0x00,0xE5,0x00,0x80,0xC7,0x20,0x00,0x01,0x00,
0x00,0x00,0x34,0x5C,0x2A,0x00,0xE6,0x00,0xA0,0xC7,0x20,0x00,0x01,0x00,
0x00,0x00,0x34,0x5C,0x2A,0x00,0xE7,0x00,0xB0,0xC7,0x20,0x00,0x01,0x00,
0x00,0x00,0x38,0x5C,0x2A,0x00,0xE8,0x00,0xB0,0xC6,0x1F,0x00,0x01,0x00,
0x00,0x00,0x30,0x5C,0x2A,0x00,0xE9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x30,0x5C,0x2A,0x00,0xEA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xC8,0x5B,0x2A,0x00,0x00,0x00,0x40,0xC2,0x22,0x00,0x01,0x00,
0x00,0x00,0x3C,0x5C,0x2A,0x00,0x01,0x00,0x90,0xC4,0x22,0x00,0x01,0x00,
0x00,0x00,0xD0,0x5B,0x2A,0x00,0x02,0x00,0x90,0xC5,0x22,0x00,0x01,0x00,
0x00,0x00,0xD4,0x5B,0x2A,0x00,0x03,0x00,0xF0,0xC6,0x22,0x00,0x01,0x00,
0x00,0x00,0xD8,0x5B,0x2A,0x00,0x04,0x00,0x10,0xCA,0x22,0x00,0x01,0x00,
0x00,0x00,0xDC,0x5B,0x2A,0x00,0x05,0x00,0x60,0xCB,0x22,0x00,0x00,0x00,
0x00,0x00,0xE0,0x5B,0x2A,0x00,0x06,0x00,0x70,0xCB,0x22,0x00,0x00,0x00,
0x00,0x00,0xE4,0x5B,0x2A,0x00,0x07,0x00,0x90,0xCB,0x22,0x00,0x00,0x00,
0x00,0x00,0xE8,0x5B,0x2A,0x00,0x08,0x00,0xA0,0xCB,0x22,0x00,0x00,0x00,
0x00,0x00,0xEC,0x5B,0x2A,0x00,0x09,0x00,0xB0,0xCB,0x22,0x00,0x01,0x00,
0x00,0x00,0xF0,0x5B,0x2A,0x00,0x0A,0x00,0x00,0xCD,0x22,0x00,0x01,0x00,
0x00,0x00,0xF4,0x5B,0x2A,0x00,0x0B,0x00,0xE0,0xCD,0x22,0x00,0x00,0x00,
0x00,0x00,0xF8,0x5B,0x2A,0x00,0x0C,0x00,0xF0,0xCD,0x22,0x00,0x01,0x00,
0x00,0x00,0xFC,0x5B,0x2A,0x00,0x0D,0x00,0x40,0xCF,0x22,0x00,0x01,0x00,
0x00,0x00,0x00,0x5C,0x2A,0x00,0x0E,0x00,0xB0,0xD0,0x22,0x00,0x01,0x00,
0x00,0x00,0x04,0x5C,0x2A,0x00,0x0F,0x00,0xE0,0xD1,0x22,0x00,0x01,0x00,
0x00,0x00,0x08,0x5C,0x2A,0x00,0x10,0x00,0x10,0xD3,0x22,0x00,0x01,0x00,
0x00,0x00,0x0C,0x5C,0x2A,0x00,0x11,0x00,0x60,0xD4,0x22,0x00,0x01,0x00,
0x00,0x00,0x10,0x5C,0x2A,0x00,0x12,0x00,0x90,0xD5,0x22,0x00,0x01,0x00,
0x00,0x00,0x14,0x5C,0x2A,0x00,0x13,0x00,0xB0,0xD6,0x22,0x00,0x01,0x00,
0x00,0x00,0x18,0x5C,0x2A,0x00,0x14,0x00,0xF0,0xD7,0x22,0x00,0x01,0x00,
0x00,0x00,0x1C,0x5C,0x2A,0x00,0x15,0x00,0xF0,0xD8,0x22,0x00,0x01,0x00,
0x00,0x00,0x20,0x5C,0x2A,0x00,0x16,0x00,0x00,0xDA,0x22,0x00,0x01,0x00,
0x00,0x00,0x24,0x5C,0x2A,0x00,0x17,0x00,0xF0,0xDB,0x22,0x00,0x01,0x00,
0x00,0x00,0x2C,0x5C,0x2A,0x00,0x18,0x00,0xF0,0xDC,0x22,0x00,0x01,0x00,
0x00,0x00,0x28,0x5C,0x2A,0x00,0x19,0x00,0x00,0xDE,0x22,0x00,0x01,0x00,
0x00,0x00,0x40,0x5C,0x2A,0x00,0x1A,0x00,0x00,0xDF,0x22,0x00,0x01,0x00,
0x00,0x00,0x30,0x5C,0x2A,0x00,0x1B,0x00,0x00,0xE0,0x22,0x00,0x01,0x00,
0x00,0x00,0x34,0x5C,0x2A,0x00,0x1C,0x00,0xD0,0xE1,0x22,0x00,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x16,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,
0x44,0x5C,0x2A,0x00,0x00,0x00,0x30,0x6B,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x01,0x00,0x60,0x6F,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x02,0x00,0x60,0x71,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x03,0x00,0x80,0x71,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x04,0x00,0x50,0x72,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x05,0x00,0x80,0x72,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x06,0x00,0xA0,0x72,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x07,0x00,0xC0,0x72,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x08,0x00,0xE0,0x72,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x09,0x00,0x50,0x77,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0A,0x00,0x30,0x7B,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0B,0x00,0xB0,0x7F,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0C,0x00,0xD0,0x7F,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0D,0x00,0xE0,0x82,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0E,0x00,0x10,0x84,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0F,0x00,0x30,0x84,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x10,0x00,0x50,0x84,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x11,0x00,0x70,0x84,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x12,0x00,0xC0,0x84,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x13,0x00,0xF0,0x86,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x14,0x00,0x40,0x87,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x15,0x00,0x60,0x87,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x16,0x00,0x80,0x87,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x17,0x00,0xA0,0x87,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x18,0x00,0xD0,0x87,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x19,0x00,0x00,0x88,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x1A,0x00,0x90,0x88,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x1B,0x00,0xE0,0x88,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x1C,0x00,0x40,0x89,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x1D,0x00,0x50,0x6B,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x1E,0x00,0x60,0x89,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x1F,0x00,0x10,0x89,0x24,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0xE0,0xE2,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x01,0x00,0xB0,0xE3,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x02,0x00,0x70,0xE4,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x03,0x00,0x00,0xE5,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x04,0x00,0x90,0xE5,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x05,0x00,0x20,0xE6,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x06,0x00,0xB0,0xE6,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x07,0x00,0x40,0xE7,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x08,0x00,0xD0,0xE7,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x09,0x00,0x60,0xE8,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0A,0x00,0x00,0xE9,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0B,0x00,0x90,0xE9,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0C,0x00,0x20,0xEA,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0D,0x00,0xB0,0xEA,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0E,0x00,0xC0,0xEB,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0F,0x00,0x50,0xED,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x10,0x00,0xC0,0xED,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x11,0x00,0xD0,0xED,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x12,0x00,0x80,0xEE,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x13,0x00,0x90,0xEE,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x14,0x00,0x40,0xEC,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x15,0x00,0xC0,0xEC,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x16,0x00,0xA0,0xEE,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x17,0x00,0xC0,0xEF,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x18,0x00,0x50,0xF0,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x19,0x00,0xF0,0xF0,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1A,0x00,0x80,0xF1,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1B,0x00,0x30,0xEF,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1C,0x00,0x80,0xE3,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1D,0x00,0xA0,0xF2,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1E,0x00,0x10,0xF2,0x22,0x00,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0x50,0x1D,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x01,0x00,0x60,0x1F,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x02,0x00,0x00,0x21,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x03,0x00,0x90,0x28,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x04,0x00,0x20,0x35,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x05,0x00,0xB0,0x28,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x06,0x00,0x60,0x27,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x07,0x00,0x70,0x28,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x08,0x00,0x20,0x29,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x09,0x00,0x40,0x29,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0A,0x00,0x90,0x2E,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0B,0x00,0xB0,0x2F,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0C,0x00,0xE0,0x30,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0D,0x00,0x60,0x31,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0E,0x00,0xA0,0x32,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0F,0x00,0x30,0x35,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x10,0x00,0x00,0x36,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x11,0x00,0x80,0x38,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x12,0x00,0x70,0x3A,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x13,0x00,0x40,0x3F,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x14,0x00,0xF0,0x40,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x15,0x00,0x00,0x41,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x16,0x00,0x10,0x41,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x17,0x00,0x80,0x4D,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x18,0x00,0x10,0x4E,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x19,0x00,0x20,0x4E,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1A,0x00,0x80,0x4E,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1B,0x00,0x10,0x51,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1C,0x00,0x00,0x50,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1D,0x00,0x10,0x52,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1E,0x00,0x30,0x53,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1F,0x00,0x50,0x53,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x20,0x00,0xF0,0x53,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x21,0x00,0x80,0x54,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x22,0x00,0xA0,0x54,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x23,0x00,0x00,0x66,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x24,0x00,0x90,0x63,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x25,0x00,0x30,0x65,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x26,0x00,0xC0,0x67,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x28,0x00,0x40,0x66,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x29,0x00,0x40,0x69,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x2A,0x00,0xE0,0x7A,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x2B,0x00,0xF0,0x87,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x2C,0x00,0xC0,0x8B,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x2D,0x00,0xF0,0x99,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x2E,0x00,0xF0,0x9A,0x21,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x30,0x00,0x40,0x82,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x33,0x00,0x40,0x82,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x34,0x00,0x30,0x93,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x35,0x00,0xC0,0x95,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x36,0x00,0xA0,0x62,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x37,0x00,0xC0,0x62,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x38,0x00,0x70,0x9B,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x39,0x00,0x80,0x9B,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x3A,0x00,0x90,0x9B,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x3B,0x00,0x80,0x9D,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x3C,0x00,0x40,0x9E,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x3D,0x00,0x60,0x9E,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x3E,0x00,0xB0,0x6F,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x29,0x00,0x40,0x69,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x40,0x00,0xE0,0x33,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x41,0x00,0x00,0x34,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x42,0x00,0x70,0x53,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x43,0x00,0x80,0x53,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x44,0x00,0x90,0x53,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x45,0x00,0xC0,0x53,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x46,0x00,0x70,0x9E,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x47,0x00,0x70,0x9F,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x48,0x00,0x40,0xA0,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x49,0x00,0xA0,0xA6,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x4A,0x00,0xD0,0xA6,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x4B,0x00,0x20,0x9E,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x4C,0x00,0x80,0x9D,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x4D,0x00,0x20,0x31,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x4E,0x00,0xD0,0xB2,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x4F,0x00,0xB0,0xB5,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x50,0x00,0x30,0xB6,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x51,0x00,0x50,0xB6,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x52,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x53,0x00,0xB0,0x49,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x55,0x00,0xB0,0xB8,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x56,0x00,0x00,0xBF,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x57,0x00,0x20,0x55,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x58,0x00,0x40,0x55,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x59,0x00,0x10,0x59,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x5A,0x00,0x40,0x5C,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x5B,0x00,0xE0,0x5E,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x5C,0x00,0xE0,0x5E,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x5D,0x00,0x20,0x21,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x5E,0x00,0x60,0x31,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x5F,0x00,0x50,0x27,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x60,0x00,0xE0,0x21,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x61,0x00,0x40,0x27,0x21,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x62,0x00,0xF0,0x3C,0x21,0x00,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0x20,0xF3,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x01,0x00,0xB0,0xF3,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x02,0x00,0x30,0xF4,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x03,0x00,0x90,0xF4,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x04,0x00,0x00,0xF5,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x05,0x00,0x70,0xF5,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x06,0x00,0xF0,0xF5,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x07,0x00,0xA0,0xF6,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x08,0x00,0x50,0xF7,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x09,0x00,0x60,0xF7,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0A,0x00,0xD0,0xF7,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0B,0x00,0x40,0xF8,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0C,0x00,0xC0,0xF8,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0D,0x00,0xE0,0xF9,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0E,0x00,0x20,0xFA,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0F,0x00,0xD0,0xFC,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x10,0x00,0xC0,0xFD,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x11,0x00,0x70,0xFD,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x12,0x00,0xD0,0xFE,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x13,0x00,0x90,0xFF,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x14,0x00,0x20,0x00,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x15,0x00,0x30,0x00,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x16,0x00,0x40,0x00,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x17,0x00,0xF0,0x05,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x18,0x00,0x90,0x06,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x19,0x00,0xA0,0x06,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1A,0x00,0x20,0x07,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1B,0x00,0xA0,0x07,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1C,0x00,0x00,0x08,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1D,0x00,0x00,0x0A,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1E,0x00,0xA0,0x09,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1F,0x00,0xC0,0x0A,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x20,0x00,0x60,0x0A,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x21,0x00,0x20,0x10,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x22,0x00,0x40,0x0E,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x23,0x00,0x20,0x0F,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x24,0x00,
0x30,0x0F,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x26,0x00,0xB0,0x0F,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x27,0x00,0x80,0x10,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x28,0x00,0xD0,0x11,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x29,0x00,0x20,0x13,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x2A,0x00,0x70,0x13,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x2B,0x00,0xB0,0x12,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x2C,0x00,
0xD0,0x13,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x2D,0x00,0x50,0x12,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x32,0x00,0xE0,0x0D,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x33,0x00,0x70,0x0D,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x34,0x00,
0x30,0x14,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x35,0x00,0xB0,0x14,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x36,0x00,0x00,0x15,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x37,0x00,0x40,0x16,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x38,0x00,0xE0,0x16,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x39,0x00,0x30,0x11,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x3A,0x00,0xA0,0x10,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x3B,0x00,0x50,0xFB,0x22,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x3C,0x00,
0x10,0xFC,0x22,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x3D,0x00,0x60,0x08,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x3E,0x00,0xB0,0x08,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x3F,0x00,0x00,0x09,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x40,0x00,0x50,0x09,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x41,0x00,0x80,0x17,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x42,0x00,0xC0,0x17,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x43,0x00,0x30,0x27,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x44,0x00,
0xA0,0x15,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x45,0x00,0x00,0x15,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x46,0x00,0x50,0xF9,0x22,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x47,0x00,0x90,0x27,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x48,0x00,0x00,0x28,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x49,0x00,0x00,0x2A,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x4A,0x00,0x00,0x18,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x4B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x4C,0x00,
0xA0,0x02,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x4D,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x4E,0x00,0x40,0x18,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x4F,0x00,0xE0,0x18,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x50,0x00,0x80,0x0B,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x51,0x00,0x20,0x0B,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x52,0x00,0xE0,0x0B,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x53,0x00,0x30,0x0C,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x54,0x00,
0xA0,0x0C,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x55,0x00,0xD0,0x0C,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x56,0x00,0x60,0x19,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x57,0x00,0x60,0xFA,0x22,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x58,0x00,0x10,0x1A,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x59,0x00,0x20,0x1A,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x5A,0x00,0x80,0x1A,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x5B,0x00,0x30,0xFF,0x22,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,
0x30,0x00,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x01,0x00,0x70,0x00,
0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x02,0x00,0xB0,0x00,0x25,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x03,0x00,0x00,0x01,0x25,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x04,0x00,0x50,0x01,0x25,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x05,0x00,0x40,0x02,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x06,0x00,0x50,0x02,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x07,0x00,0x60,0x02,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x08,0x00,
0x70,0x02,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x09,0x00,0x80,0x02,
0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0A,0x00,0x90,0x02,0x25,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0B,0x00,0xA0,0x02,0x25,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0C,0x00,0xB0,0x02,0x25,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0D,0x00,0x20,0x04,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x0E,0x00,0x40,0x04,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x0F,0x00,0x60,0x04,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x10,0x00,
0x80,0x04,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x11,0x00,0xA0,0x04,
0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x12,0x00,0xC0,0x04,0x25,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x13,0x00,0xE0,0x04,0x25,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x14,0x00,0x00,0x05,0x25,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x15,0x00,0x20,0x05,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x16,0x00,0x40,0x05,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x17,0x00,0x60,0x05,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x18,0x00,
0x80,0x05,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x19,0x00,0xA0,0x05,
0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x1A,0x00,0xC0,0x05,0x25,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x1B,0x00,0xE0,0x05,0x25,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1C,0x00,0x00,0x06,0x25,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x1D,0x00,0x20,0x06,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x1E,0x00,0xC0,0x07,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x1F,0x00,0xE0,0x07,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x20,0x00,
0xC0,0x01,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x21,0x00,0x40,0x06,
0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x22,0x00,0x60,0x06,0x25,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x23,0x00,0x80,0x06,0x25,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x24,0x00,0xA0,0x06,0x25,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x25,0x00,0xC0,0x06,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x26,0x00,0xE0,0x06,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x27,0x00,0x00,0x07,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x28,0x00,
0x20,0x07,0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x29,0x00,0x40,0x07,
0x25,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x2A,0x00,0x60,0x07,0x25,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x2B,0x00,0x80,0x07,0x25,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x2C,0x00,0xA0,0x07,0x25,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x00,0x00,0xE0,0x1A,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x01,0x00,0x00,0x1B,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x02,0x00,
0x20,0x1B,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x03,0x00,0x40,0x1B,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x04,0x00,0x60,0x1B,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x05,0x00,0xA0,0x1B,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x06,0x00,0xB0,0x1B,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x07,0x00,0xC0,0x1B,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x08,0x00,0xD0,0x1B,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x09,0x00,0xE0,0x1B,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0A,0x00,
0xF0,0x1B,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0B,0x00,0x00,0x1C,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0C,0x00,0x10,0x1C,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0D,0x00,0x30,0x1C,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0E,0x00,0x50,0x1C,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x0F,0x00,0x70,0x1C,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x10,0x00,0x90,0x1C,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x11,0x00,0xB0,0x1C,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x12,0x00,
0xD0,0x1C,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x13,0x00,0xF0,0x1C,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x14,0x00,0x10,0x1D,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x15,0x00,0x30,0x1D,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x16,0x00,0x50,0x1D,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x17,0x00,0x70,0x1D,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x18,0x00,0x90,0x1D,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x19,0x00,0xB0,0x1D,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x1A,0x00,
0xD0,0x1D,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x1B,0x00,0xF0,0x1D,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x1C,0x00,0x10,0x1E,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x1D,0x00,0x30,0x1E,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x1E,0x00,0xD0,0x1F,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x1F,0x00,0xF0,0x1F,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x20,0x00,0x80,0x1B,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x21,0x00,0x50,0x1E,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x22,0x00,
0x70,0x1E,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x23,0x00,0x90,0x1E,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x24,0x00,0xB0,0x1E,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x25,0x00,0xD0,0x1E,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x26,0x00,0xF0,0x1E,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x27,0x00,0x10,0x1F,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x28,0x00,0x30,0x1F,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x29,0x00,0x50,0x1F,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x2A,0x00,
0x70,0x1F,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x2B,0x00,0x90,0x1F,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x2C,0x00,0xB0,0x1F,0x23,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0xF0,0xA3,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x01,0x00,0x00,0xA6,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x02,0x00,0x20,0xA6,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x03,0x00,0x40,0xA6,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x04,0x00,
0x70,0xAA,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x05,0x00,0x90,0xAA,
0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x06,0x00,0xB0,0xAA,0x24,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x07,0x00,0x70,0xAD,0x24,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x08,0x00,0x90,0xAD,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x09,0x00,0xB0,0xAD,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x0A,0x00,0xF0,0xAF,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x0B,0x00,0x10,0xB0,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0C,0x00,
0x30,0xB0,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0D,0x00,0xC0,0xB2,
0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0E,0x00,0xE0,0xB2,0x24,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0F,0x00,0x00,0xB3,0x24,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x10,0x00,0x40,0xB4,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x11,0x00,0x60,0xB4,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x12,0x00,0x80,0xB4,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x13,0x00,0x80,0xB5,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x14,0x00,
0xA0,0xB5,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x15,0x00,0xC0,0xB5,
0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x16,0x00,0xC0,0xB9,0x24,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x17,0x00,0xE0,0xB9,0x24,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x18,0x00,0x00,0xBA,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x19,0x00,0xC0,0xBA,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x1A,0x00,0xE0,0xBA,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x1B,0x00,0x00,0xBB,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x1C,0x00,
0x00,0xBD,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x1D,0x00,0x20,0xBD,
0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x1E,0x00,0x60,0xBD,0x24,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x1F,0x00,0x80,0xC1,0x24,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x20,0x00,0xA0,0xC1,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x21,0x00,0xC0,0xC1,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x22,0x00,0xD0,0xC2,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x23,0x00,0xF0,0xC2,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x24,0x00,
0x10,0xC3,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x25,0x00,0xA0,0xC3,
0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x26,0x00,0xC0,0xC3,0x24,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x27,0x00,0xE0,0xC3,0x24,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x28,0x00,0xD0,0xC5,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x29,0x00,0xF0,0xC5,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x2A,0x00,0x10,0xC6,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x2B,0x00,0x30,0xC8,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x2C,0x00,
0x50,0xC8,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x2D,0x00,0x70,0xC8,
0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x2E,0x00,0x70,0xCA,0x24,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x2F,0x00,0x90,0xCA,0x24,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x30,0x00,0xB0,0xCA,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x31,0x00,0xB0,0xCC,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x32,0x00,0xD0,0xCC,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x33,0x00,0xF0,0xCC,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x34,0x00,
0xF0,0xCE,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x35,0x00,0x10,0xCF,
0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x36,0x00,0x30,0xCF,0x24,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x37,0x00,0x30,0xD1,0x24,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x38,0x00,0x50,0xD1,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x39,0x00,0x70,0xD1,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x3A,0x00,0xA0,0xD3,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x3B,0x00,0xC0,0xD3,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x3C,0x00,
0xE0,0xD3,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x3D,0x00,0xE0,0xD5,
0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x3E,0x00,0x00,0xD6,0x24,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x3F,0x00,0x20,0xD6,0x24,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x40,0x00,0x30,0xD8,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x41,0x00,0x50,0xD8,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x42,0x00,0x70,0xD8,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x43,0x00,0x80,0xDA,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x44,0x00,
0xA0,0xDA,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x45,0x00,0xC0,0xDA,
0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x46,0x00,0xE0,0xDC,0x24,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x47,0x00,0x00,0xDD,0x24,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x48,0x00,0x20,0xDD,0x24,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x49,0x00,0x60,0xDF,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x4A,0x00,0x80,0xDF,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x4B,0x00,0xA0,0xDF,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x4C,0x00,
0xC0,0xE1,0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x4D,0x00,0xE0,0xE1,
0x24,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x4E,0x00,0xC0,0xA2,0x24,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0xA0,0x21,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x01,0x00,0xC0,0x21,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x02,0x00,0xE0,0x21,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x03,0x00,0x00,0x22,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x04,0x00,
0x20,0x22,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x05,0x00,0x40,0x22,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x06,0x00,0x60,0x22,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x07,0x00,0x80,0x22,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x08,0x00,0xA0,0x22,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x09,0x00,0xC0,0x22,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x0A,0x00,0xE0,0x22,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x0B,0x00,0x00,0x23,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0C,0x00,
0x20,0x23,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0D,0x00,0x40,0x23,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0E,0x00,0x60,0x23,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x0F,0x00,0x80,0x23,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x10,0x00,0xA0,0x23,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x11,0x00,0xC0,0x23,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x12,0x00,0xE0,0x23,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x13,0x00,0x00,0x24,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x14,0x00,
0x20,0x24,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x15,0x00,0x40,0x24,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x16,0x00,0x60,0x24,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x17,0x00,0x80,0x24,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x18,0x00,0xA0,0x24,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x19,0x00,0xC0,0x24,0x23,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x01,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x02,0x00,
0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x03,0x00,0x00,0x00,
0x00,0x00,0x04,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x06,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x09,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x02,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x02,0x00,0x00,0x00,0x00,0x00,
0x03,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x04,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x07,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x08,0x00,
0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x09,0x00,0x00,0x00,
0x00,0x00,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x00,0x00,0x90,0xAD,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x01,0x00,0x90,0xAD,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x02,0x00,0x90,0xAD,0x23,0x00,0x01,0x00,0x00,0x00,
0x44,0x5C,0x2A,0x00,0x03,0x00,0x90,0xAD,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x04,0x00,0x90,0xAD,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x05,0x00,0x90,0xAD,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x06,0x00,
0x60,0xAF,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x07,0x00,0x00,0xC1,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x08,0x00,0x40,0xAC,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x09,0x00,0x60,0xAC,0x23,0x00,0x01,0x00,
0x00,0x00,0x44,0x5C,0x2A,0x00,0x0A,0x00,0x80,0xAC,0x23,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x5C,
0x2A,0x00,0x00,0x00,0x30,0x25,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,
0x01,0x00,0x60,0x26,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x02,0x00,
0xC0,0x26,0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x03,0x00,0x70,0x25,
0x23,0x00,0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x04,0x00,0xC0,0x25,0x23,0x00,
0x01,0x00,0x00,0x00,0x44,0x5C,0x2A,0x00,0x05,0x00,0x10,0x26,0x23,0x00,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x00,0x00,0x13,0x00,0x28,0x00,0x2A,0x00,0x54,0x01,0x07,0x00,0xF4,0x00,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x05,0x00,0x01,0x00,0xEE,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x05,0x00,0x02,0x00,0x03,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x03,0x00,0x59,0x00,0x58,0x00,0x2A,0x00,
0x54,0x01,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x04,0x00,0x00,0x00,0x01,0x00,
0xCE,0x00,0xC2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x05,0x00,0xB9,0x00,
0x2A,0x00,0x54,0x01,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x06,0x00,
0xC1,0x00,0x32,0x00,0x31,0x00,0xD8,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,
0x07,0x00,0x55,0x00,0xC6,0x00,0x55,0x00,0xC4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x08,0x00,0x2F,0x00,0x2A,0x00,0x54,0x01,0x07,0x00,0xF4,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x05,0x00,0x09,0x00,0xDC,0x00,0xED,0x00,0xCA,0x00,0xC9,0x00,0xF5,0x00,
0xC9,0x00,0xCB,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x05,0x00,0x0A,0x00,0x57,0x01,0x58,0x01,0x55,0x01,0x56,0x01,
0x59,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x0B,0x00,0xC8,0x00,0x2A,0x00,0x54,0x01,
0x07,0x00,0xF4,0x00,0xD1,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x0C,0x00,0xDD,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x0D,0x00,0xD9,0x00,
0xDA,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x0E,0x00,
0xDB,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,
0x0F,0x00,0x00,0x00,0x01,0x00,0xCE,0x00,0xC3,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x10,0x00,0xCF,0x00,0x2A,0x00,0x54,0x01,0x07,0x00,0xF4,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x05,0x00,0x11,0x00,0x1D,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x05,0x00,0x12,0x00,0x1E,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x13,0x00,0x1F,0x01,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x14,0x00,0x20,0x01,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x15,0x00,0x31,0x01,
0x32,0x01,0x33,0x01,0x34,0x01,0x35,0x01,0x36,0x01,0x37,0x01,0x38,0x01,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x16,0x00,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,
0x17,0x00,0x21,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x18,0x00,0x4F,0x01,0x50,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x05,0x00,0x19,0x00,0x22,0x01,0x39,0x01,0x3A,0x01,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x05,0x00,0x1A,0x00,0x3E,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x1B,0x00,0x3B,0x01,0x3C,0x01,0x3D,0x01,
0x51,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x1C,0x00,0x23,0x01,0x24,0x01,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x09,0x00,0xD2,0x00,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x22,0x00,
0xD4,0x00,0xDF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,
0x27,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x39,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x0A,0x00,0x2C,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0A,0x00,0x34,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x2A,0x00,0x54,0x01,0x07,0x00,
0xF4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x01,0x00,0xD1,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x02,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x04,0x00,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,
0x07,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x08,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x0F,0x00,0x09,0x00,0x4C,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0F,0x00,0x0A,0x00,0xD4,0x00,0xDF,0x00,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x0B,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x0C,0x00,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x0D,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x0E,0x00,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,
0x0F,0x00,0xD3,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x10,0x00,0xD3,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x0F,0x00,0x11,0x00,0xD3,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0F,0x00,0x12,0x00,0xD2,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x13,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x14,0x00,0x4C,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x15,0x00,0x40,0x01,
0x25,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x16,0x00,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,
0x17,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x18,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x0F,0x00,0x19,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,
0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x0C,
0x32,0x00,0x00,0x10,0x00,0x02,0x00,0x00,0x01,0x00,0x16,0x00,0x05,0x00,0x16,0x00,
0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,
0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,0x02,0x00,0x71,0x00,0x05,0x00,
0x71,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,
0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,0x03,0x00,0x11,0x00,
0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,
0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,0x04,0x00,
0x0B,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,
0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x05,0x00,0x05,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,
0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,
0x00,0x00,0x06,0x00,0x00,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,
0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,
0x00,0x02,0x00,0x00,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,
0x00,0x01,0xF0,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFE,0xFF,0xFF,0x00,0x18,0x28,0x00,
0x00,0x20,0x00,0x02,0x00,0x00,0x08,0x00,0x00,0x01,0x05,0x00,0x00,0x01,0x05,0x00,
0x00,0x03,0x80,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x18,
0x28,0x00,0x00,0x20,0x00,0x02,0x00,0x00,0x09,0x00,0x38,0x00,0x05,0x00,0x16,0x00,
0x05,0x00,0x00,0x06,0x00,0x02,0xF0,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,
0x00,0x0C,0x32,0x00,0x00,0x10,0x00,0x02,0x00,0x00,0x0A,0x00,0x16,0x00,0x05,0x00,
0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x0F,0x00,0x00,0x02,0xFE,0x80,
0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,0x00,0x02,0x00,0x00,0x0B,0x00,0x16,0x00,
0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x02,0xFC,0xFF,0x46,0x00,0x55,0x01,
0xFF,0xFF,0xFF,0xFF,0x00,0x0F,0x28,0x00,0x00,0x0F,0x00,0x02,0x00,0x00,0x0C,0x00,
0x22,0x00,0x05,0x00,0x55,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0xFC,0xFF,0x1E,0x00,
0x55,0x01,0xFF,0xFF,0xFF,0xFF,0x00,0x14,0x1E,0x00,0x00,0x14,0xAA,0x00,0x01,0x00,
0x0D,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x05,0x00,0x02,0xFC,0xFF,
0x46,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x1E,0x00,0x00,0x0C,0x00,0x02,
0x01,0x00,0x0E,0x00,0x71,0x00,0x11,0x00,0x71,0x00,0x11,0x00,0x00,0x07,0x33,0x00,
0xE0,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x06,0x1E,0x00,0x00,0x14,
0xAA,0x02,0x01,0x00,0x0F,0x00,0x22,0x00,0x05,0x00,0x55,0x00,0x05,0x00,0x00,0x01,
0x00,0x00,0xC0,0xFF,0x14,0x00,0x55,0x01,0xFE,0x80,0xF0,0xFF,0x00,0x14,0x1E,0x00,
0x00,0x14,0xAA,0x00,0x01,0x00,0x10,0x00,0x16,0x00,0x05,0x00,0x71,0x00,0x00,0x00,
0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x0A,
0x1E,0x00,0x00,0x14,0x00,0x02,0x01,0x00,0x11,0x00,0x38,0x00,0x05,0x00,0x16,0x00,
0x05,0x00,0x00,0x01,0x00,0x00,0xC0,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,
0x00,0x09,0x1E,0x00,0x00,0x14,0x00,0x02,0x01,0x00,0x12,0x00,0x16,0x00,0x05,0x00,
0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0xE0,0xFF,0x14,0x00,0x00,0x00,0x01,0x00,
0x00,0x00,0x00,0x09,0x23,0x00,0x00,0x14,0xAA,0x02,0x01,0x00,0x13,0x00,0x16,0x00,
0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,
0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,0x14,0x00,
0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x05,0x00,0x00,0xE7,0xFF,0x50,0x00,
0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x19,0x00,0x02,0x01,0x00,
0x15,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,
0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x19,0x00,0x00,0x08,0x00,0x02,
0x01,0x00,0x16,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,
0x00,0x02,0x01,0x00,0x17,0x00,0x2D,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,
0x00,0x00,0xFC,0xFF,0x3C,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x0A,0x00,
0x00,0x1E,0xC7,0x07,0x01,0x00,0x18,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,
0x00,0x01,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x09,
0x0F,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,0x19,0x00,0x44,0x00,0x05,0x00,0x16,0x00,
0x05,0x00,0x00,0x07,0x00,0x01,0xF8,0xFF,0x46,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,
0x00,0x09,0x28,0x00,0x00,0x12,0x00,0x02,0x11,0x00,0x1A,0x00,0x2D,0x00,0x05,0x00,
0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,
0xF0,0xFF,0x00,0x09,0x14,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,0x1B,0x00,0x16,0x00,
0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,
0xFE,0x80,0xF0,0xFF,0x00,0x09,0x04,0x00,0x00,0x19,0x00,0x02,0x07,0x00,0x1C,0x00,
0x00,0x04,0x05,0x00,0x00,0x02,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x00,
0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x14,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,
0x1D,0x00,0x71,0x00,0x11,0x00,0x71,0x00,0x11,0x00,0x00,0x07,0x33,0x00,0xF8,0xFF,
0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x06,0x23,0x00,0x00,0x14,0xAA,0x02,
0x01,0x00,0x1E,0x00,0xE3,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x23,0x00,0x00,0x14,
0xAA,0x02,0x00,0x00,0x1F,0x00,0x00,0x01,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x14,0x00,
0x00,0x14,0x00,0x02,0x05,0x00,0x20,0x00,0x00,0x01,0x05,0x00,0x16,0x00,0x05,0x00,
0x00,0x20,0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,
0x03,0x00,0x00,0x0C,0xAA,0x02,0x05,0x00,0x21,0x00,0x71,0x00,0x05,0x00,0x16,0x00,
0x05,0x00,0x00,0x20,0x00,0x00,0xE0,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,
0x00,0x09,0x14,0x00,0x00,0x0C,0xAA,0x02,0x05,0x00,0x22,0x00,0x71,0x00,0x05,0x00,
0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x00,0x01,0x00,
0x00,0x00,0x00,0x09,0x10,0x00,0x00,0x10,0xAA,0x02,0x05,0x00,0x23,0x00,0x00,0x01,
0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x00,
0x01,0x00,0x00,0x00,0x00,0x09,0x10,0x00,0x00,0x10,0xAA,0x02,0x05,0x00,0x24,0x00,
0xAA,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x20,0x00,0x00,0x00,0xFF,0x00,0x02,
0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x10,0x00,0x00,0x10,0x00,0x04,0x05,0x00,
0x25,0x00,0x00,0x04,0x00,0x00,0x16,0x00,0x05,0x00,0x00,0x20,0x00,0x00,0x00,0x00,
0x55,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x10,0x00,0x00,0x12,0x9F,0x00,
0x05,0x00,0x26,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,
0x00,0xFE,0xAA,0x00,0xAA,0x00,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x10,0x00,0x00,0x12,
0xAA,0x00,0x07,0x00,0x27,0x00,0x2D,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,
0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x20,0x00,
0x00,0x06,0x55,0x03,0x09,0x00,0x28,0x00,0x5B,0x00,0x05,0x00,0x16,0x00,0x05,0x00,
0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,
0x28,0x00,0x00,0x0E,0xC7,0x07,0x01,0x00,0x29,0x00,0x16,0x00,0x05,0x00,0x16,0x00,
0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x0F,0x00,0x00,0x02,0xFE,0xFE,0xFF,0xFF,
0x00,0x09,0x28,0x00,0x00,0x0E,0x00,0x02,0x09,0x00,0x2A,0x00,0x16,0x00,0x05,0x00,
0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x0F,0x00,0x00,0x02,0xFE,0xFE,
0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x0E,0x00,0x02,0x09,0x00,0x2B,0x00,0xAA,0x00,
0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,
0xFE,0x80,0xF0,0xFF,0x00,0x09,0x08,0x00,0x00,0x0C,0x55,0x03,0x07,0x00,0x2C,0x00,
0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x14,0x00,
0x00,0x01,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x10,0x00,0x00,0x14,0xAA,0x02,0x07,0x00,
0x2D,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0C,0x00,0x01,0xF8,0xFF,
0x00,0x01,0x00,0x02,0xFF,0xFE,0xFF,0xFF,0x00,0x18,0x28,0x00,0x00,0x20,0x00,0x02,
0x00,0x00,0x2E,0x00,0x05,0x00,0x00,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x80,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x04,0x00,0x00,0x19,
0x00,0x02,0x07,0x00,0x2F,0x00,0x11,0x00,0x05,0x00,0x71,0x00,0x05,0x00,0x00,0x07,
0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,
0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x01,0x01,0x01,0x01,0x01,0x02,0x03,
0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x00,0x2A,0x53,
0x65,0x61,0x72,0x63,0x68,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0xAC,0x2B,0x00,0x40,0xAC,
0x2B,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x66,
0x6F,0x6E,0x74,0x30,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x90,0xAA,0x2B,0x00,0x00,0x00,0x00,0x00,0xF1,0x1F,
0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x66,0x6F,0x6E,0x74,0x30,
0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x20,0xAB,0x2B,0x00,0x00,0xAB,0x2B,0x00,0x00,0x06,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x66,0x6F,0x6E,0x74,0x31,0x2E,0x64,0x61,0x74,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x94,0xAA,
0x2B,0x00,0x00,0x00,0x00,0x00,0x8D,0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x66,0x6F,0x6E,0x74,0x31,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0xAB,0x2B,0x00,0x04,0xAB,
0x2B,0x00,0x66,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x74,
0x6D,0x61,0x70,0x73,0x30,0x2D,0x30,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xD0,0x7E,0x2C,0x00,0x00,0x00,0x00,0x00,0xBA,0x13,
0x00,0x00,0x00,0x00,0x00,0x00,0x2A,0x50,0x61,0x6C,0x44,0x61,0x74,0x61,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xC8,0xB3,0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
0x00,0x00,0x2A,0x50,0x61,0x6C,0x4D,0x65,0x6D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB8,0xB3,
0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x70,0x6F,0x69,0x6E,0x74,0x65,0x72,0x73,0x2E,0x64,0x61,0x74,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0xC3,0x2B,0x00,0x00,0x00,
0x00,0x00,0xC9,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x70,
0x6F,0x69,0x6E,0x74,0x65,0x72,0x73,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x94,0xC3,0x2B,0x00,0x88,0xC3,0x2B,0x00,0x42,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x62,0x75,0x69,0x6C,0x64,0x30,0x2D,0x30,0x2E,
0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA8,0xB3,
0x2B,0x00,0xAC,0xB3,0x2B,0x00,0xC0,0x38,0x01,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x62,0x75,0x69,0x6C,0x64,0x30,0x2D,0x30,0x2E,0x74,0x61,0x62,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBC,0xB3,0x2B,0x00,0xB0,0xB3,
0x2B,0x00,0xCE,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x65,0x74,0x65,0x78,0x74,
0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xBC,0x51,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x66,0x74,0x65,0x78,0x74,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBC,0x51,0x2A,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x67,0x74,0x65,0x78,0x74,
0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xBC,0x51,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x69,0x74,0x65,0x78,0x74,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBC,0x51,0x2A,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x62,0x6C,0x6F,0x63,0x6B,
0x31,0x36,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x2C,0xAC,0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x62,0x6C,0x6F,0x63,0x6B,0x33,0x32,0x2E,0x64,0x61,0x74,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2C,0xAC,0x2B,0x00,0x00,0x00,
0x00,0x00,0x00,0x60,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x2A,0x57,0x53,0x63,0x72,0x65,0x65,0x6E,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x28,0x16,0x35,0x00,0x00,0x00,0x00,0x00,0x80,0x15,0x01,0x00,0x00,0x00,
0x00,0x00,0x2A,0x42,0x53,0x63,0x72,0x65,0x65,0x6E,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0xAC,
0x2B,0x00,0x00,0x00,0x00,0x00,0x70,0x11,0x01,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x70,0x61,0x6C,0x64,0x2D,0x30,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0xB3,0x2B,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x2A,0x57,0x53,0x63,0x72,0x65,0x65,0x6E,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x28,0x16,0x35,0x00,0x00,0x00,0x00,0x00,0x00,0xB1,0x04,0x00,0x00,0x00,
0x00,0x00,0x2A,0x42,0x53,0x63,0x72,0x65,0x65,0x6E,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0xAC,
0x2B,0x00,0x00,0x00,0x00,0x00,0x70,0x11,0x01,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x70,0x61,0x6C,0x64,0x2D,0x30,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0xB3,0x2B,0x00,0x00,0x00,
0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x6D,0x73,0x70,0x72,0x6E,
0x30,0x2D,0x30,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x8C,0xC3,0x2B,0x00,0x00,0x00,0x00,0x00,0xC9,0xC0,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x6D,0x73,0x70,0x72,0x6E,0x30,0x2D,0x30,0x2E,
0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0xB3,
0x2B,0x00,0xE0,0xB3,0x2B,0x00,0x24,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x68,
0x73,0x70,0x72,0x6E,0x30,0x2D,0x30,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x8C,0xC3,0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x68,0x73,0x70,0x72,0x6E,
0x30,0x2D,0x30,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xDC,0xB3,0x2B,0x00,0xE0,0xB3,0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x68,0x66,0x6F,0x6E,0x74,0x33,0x2E,0x64,0x61,
0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9C,0xAA,
0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x68,0x66,0x6F,0x6E,0x74,0x33,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2C,0xAB,0x2B,0x00,0x0C,0xAB,
0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x94,0xC3,0x2B,0x00,0x88,0xC3,0x2B,0x00,0x90,0xC3,
0x2B,0x00,0x20,0xAB,0x2B,0x00,0x00,0xAB,0x2B,0x00,0x90,0xAA,0x2B,0x00,0x24,0xAB,
0x2B,0x00,0x04,0xAB,0x2B,0x00,0x94,0xAA,0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0xB3,0x2B,0x00,0xE0,0xB3,0x2B,0x00,0x8C,0xC3,
0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2C,0xAB,
0x2B,0x00,0x0C,0xAB,0x2B,0x00,0x9C,0xAA,0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xBC,0xB3,0x2B,0x00,0xB0,0xB3,0x2B,0x00,0xA8,0xB3,
0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x1E,
0x2A,0x00,0x5C,0x1E,0x2A,0x00,0x68,0x1E,0x2A,0x00,0x78,0x1E,0x2A,0x00,0x88,0x1E,
0x2A,0x00,0x94,0x1E,0x2A,0x00,0xA0,0x1E,0x2A,0x00,0xAC,0x1E,0x2A,0x00,0xBC,0x1E,
0x2A,0x00,0xCC,0x1E,0x2A,0x00,0xDC,0x1E,0x2A,0x00,0xEC,0x1E,0x2A,0x00,0xF8,0x1E,
0x2A,0x00,0x08,0x1F,0x2A,0x00,0x14,0x1F,0x2A,0x00,0x24,0x1F,0x2A,0x00,0x34,0x1F,
0x2A,0x00,0x44,0x1F,0x2A,0x00,0x50,0x1F,0x2A,0x00,0x60,0x1F,0x2A,0x00,0x70,0x1F,
0x2A,0x00,0x80,0x1F,0x2A,0x00,0x8C,0x1F,0x2A,0x00,0x9C,0x1F,0x2A,0x00,0xA8,0x1F,
0x2A,0x00,0xB4,0x1F,0x2A,0x00,0xBC,0x1F,0x2A,0x00,0xC4,0x1F,0x2A,0x00,0xCC,0x1F,
0x2A,0x00,0xD4,0x1F,0x2A,0x00,0xDC,0x1F,0x2A,0x00,0xE8,0x1F,0x2A,0x00,0xF0,0x1F,
0x2A,0x00,0x00,0x20,0x2A,0x00,0x08,0x20,0x2A,0x00,0x14,0x20,0x2A,0x00,0x1C,0x20,
0x2A,0x00,0x24,0x20,0x2A,0x00,0x2C,0x20,0x2A,0x00,0x34,0x20,0x2A,0x00,0x3C,0x20,
0x2A,0x00,0x44,0x20,0x2A,0x00,0x4C,0x20,0x2A,0x00,0x54,0x20,0x2A,0x00,0x5C,0x20,
0x2A,0x00,0x64,0x20,0x2A,0x00,0x6C,0x20,0x2A,0x00,0x74,0x20,0x2A,0x00,0x7C,0x20,
0x2A,0x00,0x84,0x20,0x2A,0x00,0x8C,0x20,0x2A,0x00,0x94,0x20,0x2A,0x00,0x9C,0x20,
0x2A,0x00,0xA4,0x20,0x2A,0x00,0xAC,0x20,0x2A,0x00,0xB8,0x20,0x2A,0x00,0xC0,0x20,
0x2A,0x00,0xC8,0x20,0x2A,0x00,0xD0,0x20,0x2A,0x00,0xDC,0x20,0x2A,0x00,0xE4,0x20,
0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,
0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,
0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,
0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,
0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,
0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,
0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,
0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,
0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,
0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0xE4,0x20,0x2A,0x00,0x00,0x01,
0x00,0x01,0x02,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE8,0x20,0x2A,0x00,0xF4,0x20,
0x2A,0x00,0xFC,0x20,0x2A,0x00,0x04,0x21,0x2A,0x00,0x0C,0x21,0x2A,0x00,0x14,0x21,
0x2A,0x00,0x1C,0x21,0x2A,0x00,0x24,0x21,0x2A,0x00,0x02,0x00,0x03,0x00,0x02,0x00,
0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,
0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,
0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,
0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x0E,0x02,0x00,0x03,0x10,0xF4,0x01,
0x18,0x00,0x06,0x00,0x08,0x15,0x09,0x00,0x03,0x00,0x59,0x01,0x01,0x10,0x06,0x00,
0x08,0x36,0x0F,0x00,0x03,0x00,0x11,0x00,0x08,0x18,0x0F,0x00,0x08,0x1C,0x5E,0x01,
0x08,0x19,0x14,0x00,0x03,0x00,0x8A,0x00,0x08,0x29,0x07,0x00,0x08,0x00,0x1C,0x00,
0x03,0x00,0x19,0x00,0x03,0x00,0x1D,0x00,0x03,0x00,0x33,0x00,0x03,0x00,0x57,0x00,
0x03,0x00,0x76,0x00,0x03,0x00,0x1C,0x00,0x03,0x00,0xF0,0x00,0x08,0x24,0x14,0x00,
0x08,0x25,0xCC,0x01,0x08,0x26,0x1E,0x00,0x03,0x00,0x64,0x00,0x03,0x00,0x5E,0x00,
0x08,0x31,0x34,0x00,0x03,0x00,0xE6,0x00,0x08,0x2C,0xC3,0x00,0x08,0x2D,0x78,0x00,
0x08,0x00,0xA8,0x00,0x01,0x00,0x22,0x00,0x03,0x00,0x55,0x01,0x01,0x00,0x4E,0x00,
0x08,0x00,0x18,0x00,0x03,0x00,0x1E,0x00,0x08,0x00,0x1E,0x00,0x08,0x00,0x1E,0x00,
0x08,0x00,0x08,0x00,0x08,0x00,0x3C,0x00,0x08,0x37,0x33,0x00,0x08,0x38,0x33,0x00,
0x08,0x39,0x90,0x01,0x18,0x00,0x35,0x00,0x08,0x3B,0x29,0x00,0x08,0x3C,0x6B,0x01,
0x00,0x00,0xD7,0x00,0x03,0x00,0xCC,0x01,0x08,0x3F,0x9A,0x01,0x08,0x40,0x29,0x00,
0x08,0x41,0x33,0x00,0x08,0x42,0x90,0x01,0x1C,0x00,0x13,0x01,0x08,0x45,0xC3,0x00,
0x08,0x48,0xBE,0x00,0x08,0x46,0x5A,0x00,0x08,0x47,0x64,0x00,0x08,0x49,0x50,0x00,
0x08,0x00,0xF5,0x00,0x03,0x00,0x28,0x00,0x09,0x00,0xAA,0x00,0x63,0x0D,0x00,0x33,
0x00,0x11,0x3B,0x00,0x33,0x00,0x88,0x3B,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,
0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,
0x17,0x18,0x19,0x00,0x03,0x00,0x08,0x00,0x2C,0x21,0x2A,0x00,0x85,0x00,0xFA,0x00,
0x00,0x01,0x14,0x00,0x0B,0x00,0x2C,0x21,0x2A,0x00,0x95,0x00,0xFA,0x00,0x00,0x01,
0x14,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0xB6,0x00,0x96,0x00,0x00,0x01,0x11,0x00,
0x0E,0x00,0x2C,0x21,0x2A,0x00,0x97,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x0E,0x00,
0x2C,0x21,0x2A,0x00,0x97,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x0E,0x00,0x2C,0x21,
0x2A,0x00,0x97,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x0E,0x00,0x2C,0x21,0x2A,0x00,
0x97,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x26,0x00,0x2C,0x21,0x2A,0x00,0x00,0x01,
0xFA,0x00,0x00,0xFF,0x24,0x00,0x3C,0x00,0x2C,0x21,0x2A,0x00,0xB1,0x00,0x96,0x00,
0x00,0xFF,0x15,0x00,0x3F,0x00,0x2C,0x21,0x2A,0x00,0x3C,0x00,0x32,0x00,0x02,0x01,
0x15,0x00,0x3F,0x00,0x2C,0x21,0x2A,0x00,0x78,0x00,0x64,0x00,0x02,0x01,0x15,0x00,
0x3F,0x00,0x2C,0x21,0x2A,0x00,0xB5,0x00,0x96,0x00,0x02,0x01,0x15,0x00,0x3F,0x00,
0x2C,0x21,0x2A,0x00,0xF1,0x00,0xC8,0x00,0x02,0x01,0x15,0x00,0x3F,0x00,0x2C,0x21,
0x2A,0x00,0x2D,0x01,0xFA,0x00,0x02,0x01,0x15,0x00,0x3F,0x00,0x2C,0x21,0x2A,0x00,
0x6A,0x01,0x2C,0x01,0x02,0x01,0x15,0x00,0x3F,0x00,0x2C,0x21,0x2A,0x00,0xA6,0x01,
0x5E,0x01,0x02,0x01,0x15,0x00,0x3F,0x00,0x2C,0x21,0x2A,0x00,0xE3,0x01,0x90,0x01,
0x02,0x01,0x15,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0xB6,0x00,0x96,0x00,0x00,0x01,
0x11,0x00,0x3D,0x00,0x2C,0x21,0x2A,0x00,0x9A,0x00,0x96,0x00,0x00,0x01,0x15,0x00,
0x38,0x00,0x2C,0x21,0x2A,0x00,0xC4,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x38,0x00,
0x2C,0x21,0x2A,0x00,0xD7,0x00,0xA5,0x00,0x00,0x01,0x15,0x00,0x38,0x00,0x2C,0x21,
0x2A,0x00,0xF1,0x00,0xB9,0x00,0x00,0x01,0x15,0x00,0x38,0x00,0x2C,0x21,0x2A,0x00,
0x05,0x01,0xC8,0x00,0x00,0x01,0x15,0x00,0x38,0x00,0x2C,0x21,0x2A,0x00,0x12,0x01,
0xD2,0x00,0x00,0x01,0x15,0x00,0x38,0x00,0x2C,0x21,0x2A,0x00,0x12,0x01,0xD2,0x00,
0x00,0x01,0x15,0x00,0x38,0x00,0x2C,0x21,0x2A,0x00,0x05,0x01,0xC8,0x00,0x00,0x01,
0x15,0x00,0x38,0x00,0x2C,0x21,0x2A,0x00,0xF8,0x00,0xBE,0x00,0x00,0x01,0x15,0x00,
0x38,0x00,0x2C,0x21,0x2A,0x00,0xDE,0x00,0xAA,0x00,0x00,0x01,0x15,0x00,0x38,0x00,
0x2C,0x21,0x2A,0x00,0xD1,0x00,0xA0,0x00,0x00,0x01,0x15,0x00,0x38,0x00,0x2C,0x21,
0x2A,0x00,0xC4,0x00,0x96,0x00,0x00,0x01,0x15,0x00,0x38,0x00,0x2C,0x21,0x2A,0x00,
0xAA,0x00,0x82,0x00,0x00,0x01,0x15,0x00,0x38,0x00,0x2C,0x21,0x2A,0x00,0x8F,0x00,
0x6E,0x00,0x00,0x01,0x15,0x00,0x38,0x00,0x2C,0x21,0x2A,0x00,0x75,0x00,0x5A,0x00,
0x00,0x01,0x15,0x00,0x38,0x00,0x2C,0x21,0x2A,0x00,0x5B,0x00,0x46,0x00,0x00,0x01,
0x15,0x00,0x38,0x00,0x2C,0x21,0x2A,0x00,0x4E,0x00,0x3C,0x00,0x00,0x01,0x15,0x00,
0x4C,0x00,0x2C,0x21,0x2A,0x00,0xF4,0x01,0x20,0x03,0x00,0x03,0x00,0x00,0x00,0x00,
0x2C,0x21,0x2A,0x00,0xB6,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,
0x2A,0x00,0xB6,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0xB6,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x4F,0x00,0x2C,0x21,0x2A,0x00,0x9A,0x02,
0x90,0x01,0x00,0x01,0x00,0x00,0x16,0x00,0x2C,0x21,0x2A,0x00,0x56,0x01,0x18,0x01,
0x00,0x01,0x11,0x00,0x36,0x00,0x2C,0x21,0x2A,0x00,0x08,0x01,0xFA,0x00,0x00,0xFF,
0x15,0x00,0x37,0x00,0x2C,0x21,0x2A,0x00,0x7F,0x00,0x82,0x00,0x00,0xFF,0x15,0x00,
0x52,0x00,0x2C,0x21,0x2A,0x00,0x4C,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,
0x2C,0x21,0x2A,0x00,0xF3,0x00,0xC8,0x00,0x00,0xFF,0x11,0x00,0x3E,0x00,0x2C,0x21,
0x2A,0x00,0x9A,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0xB6,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x6C,0x01,
0x2C,0x01,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x79,0x00,0x64,0x00,
0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x6C,0x01,0x2C,0x01,0x00,0x01,
0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x79,0x00,0x64,0x00,0x00,0x01,0x11,0x00,
0x41,0x00,0x2C,0x21,0x2A,0x00,0x96,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x3A,0x00,
0x2C,0x21,0x2A,0x00,0x3D,0x00,0x32,0x00,0x00,0xFF,0x15,0x00,0x3A,0x00,0x2C,0x21,
0x2A,0x00,0x7B,0x00,0x64,0x00,0x00,0x01,0x15,0x00,0x3A,0x00,0x2C,0x21,0x2A,0x00,
0xB8,0x00,0x96,0x00,0x00,0x01,0x15,0x00,0x3A,0x00,0x2C,0x21,0x2A,0x00,0xF6,0x00,
0xC8,0x00,0x00,0x01,0x15,0x00,0x3A,0x00,0x2C,0x21,0x2A,0x00,0x33,0x01,0xFA,0x00,
0x00,0x01,0x15,0x00,0x3A,0x00,0x2C,0x21,0x2A,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,
0x15,0x00,0x3A,0x00,0x2C,0x21,0x2A,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,
0x3A,0x00,0x2C,0x21,0x2A,0x00,0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x53,0x00,
0x2C,0x21,0x2A,0x00,0x55,0x03,0x20,0x03,0x00,0x04,0x00,0x00,0x54,0x00,0x2C,0x21,
0x2A,0x00,0x55,0x03,0x20,0x03,0x00,0x04,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0xB6,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x79,0x00,
0x64,0x00,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0xB6,0x00,0x96,0x00,
0x00,0x01,0x11,0x00,0x51,0x00,0x2C,0x21,0x2A,0x00,0x58,0x02,0xC8,0x00,0x00,0xFF,
0x00,0x00,0x50,0x00,0x2C,0x21,0x2A,0x00,0xE3,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x39,0x00,0x2C,0x21,0x2A,0x00,0x3C,0x00,0x32,0x00,0x02,0xFF,0x15,0x00,0x39,0x00,
0x2C,0x21,0x2A,0x00,0x78,0x00,0x64,0x00,0x02,0x01,0x15,0x00,0x39,0x00,0x2C,0x21,
0x2A,0x00,0xB5,0x00,0x96,0x00,0x02,0x01,0x15,0x00,0x39,0x00,0x2C,0x21,0x2A,0x00,
0xF1,0x00,0xC8,0x00,0x02,0x01,0x15,0x00,0x39,0x00,0x2C,0x21,0x2A,0x00,0x2D,0x01,
0xFA,0x00,0x02,0x01,0x15,0x00,0x39,0x00,0x2C,0x21,0x2A,0x00,0x6A,0x01,0x2C,0x01,
0x02,0x01,0x15,0x00,0x39,0x00,0x2C,0x21,0x2A,0x00,0xA6,0x01,0x5E,0x01,0x02,0x01,
0x15,0x00,0x39,0x00,0x2C,0x21,0x2A,0x00,0xE3,0x01,0x90,0x01,0x02,0x01,0x15,0x00,
0x00,0x00,0x2C,0x21,0x2A,0x00,0xB6,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x40,0x00,
0x2C,0x21,0x2A,0x00,0xA4,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x3B,0x00,0x2C,0x21,
0x2A,0x00,0xB8,0x00,0x96,0x00,0x00,0xFF,0x01,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0xB6,0x00,0x96,0x00,0x03,0x01,0x11,0x00,0x4E,0x00,0x2C,0x21,0x2A,0x00,0xF3,0x00,
0xF4,0x01,0x00,0xFF,0x00,0x00,0x56,0x00,0x2C,0x21,0x2A,0x00,0xAF,0x00,0x96,0x00,
0x00,0xFF,0x00,0x00,0x55,0x00,0x2C,0x21,0x2A,0x00,0x75,0x00,0x96,0x00,0x00,0xFF,
0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0xB6,0x00,0x96,0x00,0x00,0x01,0x11,0x00,
0x4B,0x00,0x2C,0x21,0x2A,0x00,0x55,0x03,0x20,0x03,0x00,0x04,0x00,0x00,0x57,0x00,
0x2C,0x21,0x2A,0x00,0x55,0x03,0x20,0x03,0x00,0x04,0x00,0x00,0x00,0x00,0x2C,0x21,
0x2A,0x00,0x2F,0x01,0xFA,0x00,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0x79,0x00,0x64,0x00,0x00,0x01,0x11,0x00,0x1E,0x00,0x2C,0x21,0x2A,0x00,0x40,0x02,
0x96,0x00,0x00,0x01,0x11,0x00,0x1E,0x00,0x2C,0x21,0x2A,0x00,0xB3,0x02,0xB4,0x00,
0x00,0x01,0x11,0x00,0x42,0x00,0x2C,0x21,0x2A,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,
0x00,0x00,0x42,0x00,0x2C,0x21,0x2A,0x00,0xCB,0x00,0xA5,0x00,0x00,0x01,0x00,0x00,
0x42,0x00,0x2C,0x21,0x2A,0x00,0xE3,0x00,0xB9,0x00,0x00,0x01,0x00,0x00,0x42,0x00,
0x2C,0x21,0x2A,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,0x42,0x00,0x2C,0x21,
0x2A,0x00,0x02,0x01,0xD2,0x00,0x00,0x01,0x00,0x00,0x42,0x00,0x2C,0x21,0x2A,0x00,
0x02,0x01,0xD2,0x00,0x00,0x01,0x00,0x00,0x42,0x00,0x2C,0x21,0x2A,0x00,0xF6,0x00,
0xC8,0x00,0x00,0x01,0x00,0x00,0x42,0x00,0x2C,0x21,0x2A,0x00,0xE9,0x00,0xBE,0x00,
0x00,0x01,0x00,0x00,0x42,0x00,0x2C,0x21,0x2A,0x00,0xD1,0x00,0xAA,0x00,0x00,0x01,
0x00,0x00,0x42,0x00,0x2C,0x21,0x2A,0x00,0xC4,0x00,0xA0,0x00,0x00,0x01,0x00,0x00,
0x42,0x00,0x2C,0x21,0x2A,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,0x00,0x00,0x42,0x00,
0x2C,0x21,0x2A,0x00,0xA0,0x00,0x82,0x00,0x00,0x01,0x00,0x00,0x42,0x00,0x2C,0x21,
0x2A,0x00,0x87,0x00,0x6E,0x00,0x00,0x01,0x00,0x00,0x42,0x00,0x2C,0x21,0x2A,0x00,
0x6E,0x00,0x5A,0x00,0x00,0x01,0x00,0x00,0x42,0x00,0x2C,0x21,0x2A,0x00,0x56,0x00,
0x46,0x00,0x00,0x01,0x00,0x00,0x42,0x00,0x2C,0x21,0x2A,0x00,0x49,0x00,0x3C,0x00,
0x00,0x01,0x00,0x00,0x43,0x00,0x2C,0x21,0x2A,0x00,0x3D,0x00,0x32,0x00,0x00,0xFF,
0x15,0x00,0x43,0x00,0x2C,0x21,0x2A,0x00,0x7B,0x00,0x64,0x00,0x00,0x01,0x15,0x00,
0x43,0x00,0x2C,0x21,0x2A,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,0x15,0x00,0x43,0x00,
0x2C,0x21,0x2A,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,0x43,0x00,0x2C,0x21,
0x2A,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x43,0x00,0x2C,0x21,0x2A,0x00,
0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x43,0x00,0x2C,0x21,0x2A,0x00,0xAE,0x01,
0x5E,0x01,0x00,0x01,0x15,0x00,0x43,0x00,0x2C,0x21,0x2A,0x00,0xEC,0x01,0x90,0x01,
0x00,0x01,0x15,0x00,0x44,0x00,0x2C,0x21,0x2A,0x00,0x3D,0x00,0x32,0x00,0x00,0xFF,
0x15,0x00,0x44,0x00,0x2C,0x21,0x2A,0x00,0x7B,0x00,0x64,0x00,0x00,0x01,0x15,0x00,
0x44,0x00,0x2C,0x21,0x2A,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,0x15,0x00,0x44,0x00,
0x2C,0x21,0x2A,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,0x44,0x00,0x2C,0x21,
0x2A,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x44,0x00,0x2C,0x21,0x2A,0x00,
0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x44,0x00,0x2C,0x21,0x2A,0x00,0xAE,0x01,
0x5E,0x01,0x00,0x01,0x15,0x00,0x44,0x00,0x2C,0x21,0x2A,0x00,0xEC,0x01,0x90,0x01,
0x00,0x01,0x15,0x00,0x45,0x00,0x2C,0x21,0x2A,0x00,0x3D,0x00,0x32,0x00,0x00,0xFF,
0x15,0x00,0x45,0x00,0x2C,0x21,0x2A,0x00,0x7B,0x00,0x64,0x00,0x00,0x01,0x15,0x00,
0x45,0x00,0x2C,0x21,0x2A,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,0x15,0x00,0x45,0x00,
0x2C,0x21,0x2A,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,0x45,0x00,0x2C,0x21,
0x2A,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x45,0x00,0x2C,0x21,0x2A,0x00,
0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x45,0x00,0x2C,0x21,0x2A,0x00,0xAE,0x01,
0x5E,0x01,0x00,0x01,0x15,0x00,0x45,0x00,0x2C,0x21,0x2A,0x00,0xEC,0x01,0x90,0x01,
0x00,0x01,0x15,0x00,0x46,0x00,
0x2C,0x21,0x2A,0x00,0x3D,0x00,0x32,0x00,0x00,0xFF,0x15,0x00,0x46,0x00,
0x2C,0x21,0x2A,0x00,0x7B,0x00,0x64,0x00,0x00,0x01,0x15,0x00,0x46,0x00,
0x2C,0x21,0x2A,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,0x15,0x00,0x46,0x00,
0x2C,0x21,0x2A,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,0x46,0x00,
0x2C,0x21,0x2A,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x46,0x00,
0x2C,0x21,0x2A,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x46,0x00,
0x2C,0x21,0x2A,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x46,0x00,
0x2C,0x21,0x2A,0x00,0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x47,0x00,
0x2C,0x21,0x2A,0x00,0x3D,0x00,0x32,0x00,0x00,0xFF,0x15,0x00,0x47,0x00,
0x2C,0x21,0x2A,0x00,0x7B,0x00,0x64,0x00,0x00,0x01,0x15,0x00,0x47,0x00,
0x2C,0x21,0x2A,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,0x15,0x00,0x47,0x00,
0x2C,0x21,0x2A,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,0x47,0x00,
0x2C,0x21,0x2A,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x47,0x00,
0x2C,0x21,0x2A,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x47,0x00,
0x2C,0x21,0x2A,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x47,0x00,
0x2C,0x21,0x2A,0x00,0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x48,0x00,
0x2C,0x21,0x2A,0x00,0x3D,0x00,0x32,0x00,0x00,0xFF,0x15,0x00,0x48,0x00,
0x2C,0x21,0x2A,0x00,0x7B,0x00,0x64,0x00,0x00,0x01,0x15,0x00,0x48,0x00,
0x2C,0x21,0x2A,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,0x15,0x00,0x48,0x00,
0x2C,0x21,0x2A,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,0x48,0x00,
0x2C,0x21,0x2A,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x48,0x00,
0x2C,0x21,0x2A,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x48,0x00,
0x2C,0x21,0x2A,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x48,0x00,
0x2C,0x21,0x2A,0x00,
0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x49,0x00,0x2C,0x21,0x2A,0x00,0x3D,0x00,
0x32,0x00,0x00,0xFF,0x15,0x00,0x49,0x00,0x2C,0x21,0x2A,0x00,0x7B,0x00,0x64,0x00,
0x00,0x01,0x15,0x00,0x49,0x00,0x2C,0x21,0x2A,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,
0x15,0x00,0x49,0x00,0x2C,0x21,0x2A,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,
0x49,0x00,0x2C,0x21,0x2A,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x49,0x00,
0x2C,0x21,0x2A,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x49,0x00,0x2C,0x21,
0x2A,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x49,0x00,0x2C,0x21,0x2A,0x00,
0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x4A,0x00,0x2C,0x21,0x2A,0x00,0x3D,0x00,
0x32,0x00,0x00,0xFF,0x15,0x00,0x4A,0x00,0x2C,0x21,0x2A,0x00,0x7B,0x00,0x64,0x00,
0x00,0x01,0x15,0x00,0x4A,0x00,0x2C,0x21,0x2A,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,
0x15,0x00,0x4A,0x00,0x2C,0x21,0x2A,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,
0x4A,0x00,0x2C,0x21,0x2A,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x4A,0x00,
0x2C,0x21,0x2A,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x4A,0x00,0x2C,0x21,
0x2A,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x4A,0x00,0x2C,0x21,0x2A,0x00,
0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x58,0x00,0x2C,0x21,0x2A,0x00,0x21,0x02,
0x20,0x03,0x00,0xF0,0x00,0x00,0x59,0x00,0x2C,0x21,0x2A,0x00,0x21,0x02,0x20,0x03,
0x00,0xF0,0x00,0x00,0x5A,0x00,0x2C,0x21,0x2A,0x00,0x21,0x02,0x20,0x03,0x00,0xF0,
0x00,0x00,0x5B,0x00,0x2C,0x21,0x2A,0x00,0x21,0x02,0x20,0x03,0x00,0x01,0x00,0x00,
0x5C,0x00,0x2C,0x21,0x2A,0x00,0x21,0x02,0x20,0x03,0x00,0x01,0x00,0x00,0x5D,0x00,
0x2C,0x21,0x2A,0x00,0x21,0x02,0x20,0x03,0x00,0x01,0x00,0x00,0x5E,0x00,0x2C,0x21,
0x2A,0x00,0x21,0x02,0x20,0x03,0x00,0x01,0x00,0x00,0x5F,0x00,0x2C,0x21,0x2A,0x00,
0x21,0x02,0x20,0x03,0x00,0x01,0x00,0x00,0x60,0x00,0x2C,0x21,0x2A,0x00,0x85,0x01,
0x90,0x01,0x00,0xFF,0x00,0x00,0x61,0x00,0x2C,0x21,0x2A,0x00,0xB2,0x01,0x90,0x01,
0x00,0xFF,0x00,0x00,0x62,0x00,0x2C,0x21,0x2A,0x00,0x85,0x01,0x90,0x01,0x00,0xFF,
0x00,0x00,0x63,0x00,0x2C,0x21,0x2A,0x00,0x85,0x01,0x90,0x01,0x00,0x01,0x00,0x00,
0x64,0x00,0x2C,0x21,0x2A,0x00,0x85,0x01,0x90,0x01,0x00,0x01,0x00,0x00,0x65,0x00,
0x2C,0x21,0x2A,0x00,0x85,0x01,0x90,0x01,0x00,0x01,0x00,0x00,0x66,0x00,0x2C,0x21,
0x2A,0x00,0x85,0x01,0x90,0x01,0x00,0x01,0x00,0x00,0x67,0x00,0x2C,0x21,0x2A,0x00,
0x85,0x01,0x90,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x61,0x00,
0x50,0x00,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0xAA,0x00,0x8C,0x00,
0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0xF3,0x00,0xC8,0x00,0x00,0x01,
0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x54,0x01,0x18,0x01,0x00,0x01,0x11,0x00,
0x00,0x00,0x2C,0x21,0x2A,0x00,0xB5,0x01,0x68,0x01,0x00,0x01,0x11,0x00,0x00,0x00,
0x2C,0x21,0x2A,0x00,0x16,0x02,0xB8,0x01,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,
0x2A,0x00,0x78,0x02,0x08,0x02,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0xD9,0x02,0x58,0x02,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x3C,0x00,
0x32,0x00,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x79,0x00,0x64,0x00,
0x00,0x01,0x11,0x00,0x69,0x00,0x2C,0x21,0x2A,0x00,0x2D,0x00,0x3C,0x00,0x00,0xFF,
0x13,0x00,0x3C,0x00,0x2C,0x21,0x2A,0x00,0x76,0x00,0x64,0x00,0x00,0xFF,0x15,0x00,
0x68,0x00,0x2C,0x21,0x2A,0x00,0x7B,0x00,0x64,0x00,0x00,0xFF,0x15,0x00,0x00,0x00,
0x2C,0x21,0x2A,0x00,0x2F,0x01,0xFA,0x00,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,
0x2A,0x00,0xE6,0x01,0x90,0x01,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0x37,0x01,0x00,0x01,0x00,0x01,0x11,0x00,0x6E,0x00,0x2C,0x21,0x2A,0x00,0x94,0x00,
0x00,0x01,0x00,0x01,0x14,0x00,0x71,0x00,0x2C,0x21,0x2A,0x00,0xAD,0x00,0x00,0x01,
0x00,0x01,0x14,0x00,0x74,0x00,0x2C,0x21,0x2A,0x00,0x2D,0x00,0x3C,0x00,0x00,0xFF,
0x13,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x37,0x01,0x00,0x01,0x00,0x01,0x11,0x00,
0x00,0x00,0x2C,0x21,0x2A,0x00,0x37,0x01,0x00,0x01,0x00,0x01,0x11,0x00,0x79,0x00,
0x2C,0x21,0x2A,0x00,0xAA,0x00,0xF0,0x00,0x00,0x01,0x14,0x00,0x7C,0x00,0x2C,0x21,
0x2A,0x00,0xC0,0x06,0xDC,0x05,0x00,0x01,0x11,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0x6C,0x01,0x2C,0x01,0x00,0x01,0x11,0x00,0x90,0x00,0x2C,0x21,0x2A,0x00,0xB4,0x00,
0x96,0x00,0x03,0xFF,0x15,0x00,0x91,0x00,0x2C,0x21,0x2A,0x00,0x9A,0x00,0x96,0x00,
0x00,0xFF,0x15,0x00,0x92,0x00,0x2C,0x21,0x2A,0x00,0x9A,0x00,0x96,0x00,0x00,0xFF,
0x15,0x00,0x93,0x00,0x2C,0x21,0x2A,0x00,0x9A,0x00,0x96,0x00,0x00,0xFF,0x01,0x00,
0x94,0x00,0x2C,0x21,0x2A,0x00,0x9C,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x95,0x00,
0x2C,0x21,0x2A,0x00,0x96,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x96,0x00,0x2C,0x21,
0x2A,0x00,0x9A,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x97,0x00,0x2C,0x21,0x2A,0x00,
0x32,0x00,0x32,0x00,0x03,0xFF,0x15,0x00,0x84,0x00,0x2C,0x21,0x2A,0x00,0x74,0x00,
0xFA,0x00,0x00,0x01,0x14,0x00,0x87,0x00,0x2C,0x21,0x2A,0x00,0x6D,0x00,0xFA,0x00,
0x00,0x01,0x14,0x00,0x8A,0x00,0x2C,0x21,0x2A,0x00,0x7D,0x00,0xFA,0x00,0x00,0x01,
0x14,0x00,0x9E,0x00,0x2C,0x21,0x2A,0x00,0x97,0x00,0x7D,0x00,0x00,0x01,0x00,0x00,
0x8D,0x00,0x2C,0x21,0x2A,0x00,0x84,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,0x9F,0x00,
0x2C,0x21,0x2A,0x00,0x19,0x01,0xFA,0x00,0x00,0x01,0x24,0x00,0xA8,0x00,0x2C,0x21,
0x2A,0x00,0x4D,0x01,0xF4,0x01,0x00,0x01,0x00,0x00,0xA8,0x00,0x2C,0x21,0x2A,0x00,
0x4D,0x01,0xF4,0x01,0x03,0x01,0x00,0x00,0xA8,0x00,0x2C,0x21,0x2A,0x00,0x4D,0x01,
0xF4,0x01,0x00,0x01,0x00,0x00,0xB2,0x00,0x2C,0x21,0x2A,0x00,0x55,0x03,0x20,0x03,
0x00,0x04,0x00,0x00,0xB3,0x00,0x2C,0x21,0x2A,0x00,0x55,0x03,0x20,0x03,0x00,0x04,
0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x2F,0x00,0x32,0x00,0x00,0xFF,0x01,0x00,
0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,0x4D,0x00,
0x2C,0x21,0x2A,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,0x4D,0x00,0x2C,0x21,
0x2A,0x00,0x00,0x00,0xC2,0x01,0x00,0x01,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,
0x00,0x00,0x58,0x02,0x00,0x01,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xBC,0x02,0x00,0x01,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0x20,0x03,
0x00,0x01,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xB6,0x03,0x00,0x01,
0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xA9,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x98,0x00,
0x2C,0x21,0x2A,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,0x9B,0x00,0x2C,0x21,
0x2A,0x00,0x00,0x00,0xC8,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0xB4,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0xFF,0x00,0x00,0xB7,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,
0x00,0xFF,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,
0x00,0x00,0xBA,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0x2C,0x01,0x00,0xFF,0x00,0x00,
0xC5,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xA0,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,
0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,
0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,
0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,
0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,
0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,
0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,
0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,
0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,
0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,
0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0xC6,0x00,
0x2C,0x21,0x2A,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,0xC7,0x00,0x2C,0x21,
0x2A,0x00,0x00,0x00,0x2C,0x01,0x00,0xFF,0x00,0x00,0xCA,0x00,0x2C,0x21,0x2A,0x00,
0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0xD3,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0xFF,0x00,0x00,0xF3,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xC8,0x00,
0x00,0xFF,0x00,0x00,0xCB,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,
0x00,0x00,0xFB,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0xEB,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,0xE3,0x00,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,0xDB,0x00,0x2C,0x21,
0x2A,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,0x03,0x01,0x2C,0x21,0x2A,0x00,
0x00,0x00,0x4B,0x00,0x00,0xFF,0x00,0x00,0x04,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0x01,0x00,0x00,0x05,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x96,0x00,
0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,0x96,0x00,0x00,0x01,
0x00,0x00,0x06,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x07,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x0E,0x01,0x00,0x01,0x00,0x00,0x0F,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xBC,0x02,0x00,0x01,0x00,0x00,0x17,0x01,0x2C,0x21,
0x2A,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,0x1F,0x01,0x2C,0x21,0x2A,0x00,
0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,0x27,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x30,0x02,0x00,0x01,0x00,0x00,0x2F,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x52,0x03,
0x00,0x01,0x00,0x00,0x37,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x58,0x02,0x00,0x01,
0x00,0x00,0x3F,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x3C,0x00,0x00,0x01,0x00,0x00,
0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x46,0x00,0x02,0x01,0x00,0x00,0x47,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0x50,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,
0x2A,0x00,0x00,0x00,0x5A,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,
0x00,0x00,0x64,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x6E,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x78,0x00,
0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x82,0x00,0x02,0x01,
0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x96,0x00,0x02,0x01,0x00,0x00,
0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0xB4,0x00,0x02,0x01,0x00,0x00,0x47,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xDC,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,
0x2A,0x00,0x00,0x00,0x18,0x01,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,
0x00,0x00,0x68,0x01,0x02,0x01,0x00,0x00,0x48,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x50,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,
0x00,0x01,0x00,0x00,0x58,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,
0x00,0x00,0x60,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x68,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x70,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x78,0x01,0x2C,0x21,
0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x80,0x01,0x2C,0x21,0x2A,0x00,
0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,0x88,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x78,0x00,0x00,0x01,0x00,0x00,0x89,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x3C,0x00,
0x00,0x01,0x00,0x00,0x8A,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x20,0x03,0x00,0x01,
0x00,0x00,0x92,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x04,0x01,0x00,0x01,0x00,0x00,
0x9A,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x78,0x00,0x00,0x01,0x00,0x00,0x9B,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0x40,0x01,0x00,0x01,0x00,0x00,0xA3,0x01,0x2C,0x21,
0x2A,0x00,0x00,0x00,0xA0,0x00,0x00,0x01,0x00,0x00,0xA4,0x01,0x2C,0x21,0x2A,0x00,
0x00,0x00,0x78,0x00,0x00,0x01,0x00,0x00,0xA5,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x78,0x00,0x00,0x01,0x00,0x00,0xA6,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0xC8,0x00,
0x00,0x01,0x00,0x00,0xA7,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,
0x00,0x00,0xA8,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0xA8,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,0xA8,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,0xA8,0x01,0x2C,0x21,
0x2A,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0xA9,0x01,0x2C,0x21,0x2A,0x00,
0x00,0x00,0xAF,0x00,0x00,0x01,0x00,0x00,0xA9,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x06,0x01,0x00,0x01,0x00,0x00,0xA9,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x5E,0x01,
0x00,0x01,0x00,0x00,0xA9,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0xB5,0x01,0x00,0x01,
0x00,0x00,0xAA,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x3C,0x00,0x00,0xFF,0x00,0x00,
0xAA,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x64,0x00,0x00,0xFF,0x00,0x00,0xAA,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0x8C,0x00,0x00,0xFF,0x00,0x00,0xB5,0x01,0x2C,0x21,
0x2A,0x00,0x00,0x00,0xC2,0x01,0x00,0x01,0x00,0x00,0xBD,0x01,0x2C,0x21,0x2A,0x00,
0x00,0x00,0xC2,0x01,0x00,0x01,0x00,0x00,0xC5,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x20,0x03,0x00,0x01,0x00,0x00,0xCD,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0xBC,0x02,
0x00,0x01,0x00,0x00,0xCE,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0xE8,0x03,0x00,0x01,
0x00,0x00,0xCF,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0xD0,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xB0,0x04,0x00,0x01,0x00,0x00,0xD8,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xB0,0x04,0x00,0x01,0x00,0x00,0xE0,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xB0,0x04,0x00,0x01,0x00,0x00,0xE8,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xB0,0x04,0x00,0x01,0x00,0x00,0xF0,0x01,
0x2C,0x21,0x2A,0x00,0x00,0x00,0xB0,0x04,0x00,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF

}; // 2a5c56 00000000 445c2a
int(*off_D697E)(int) = (int(*)(int))&sub_4E320; // weak
//Bit8u*(*off_D781E)(Bit8u*) = &sub_511A0; // weak
int(*off_D7B7A)(int) = (int(*)(int))&sub_51530; // weak
Bit8u unk_D7BD6[0xe58+ 0xee + 0x50c + 0xc0] = {
0x05,0x00,0x00,0x00,0x13,0x00,0x28,0x00,0x2A,0x00,0x54,0x01,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x01,0x00,0xEE,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x02,0x00,0x03,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x03,0x00,0x59,0x00,0x58,0x00,0x2A,0x00,0x54,0x01,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0xCE,0x00,0xC2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x05,0x00,0xB9,0x00,0x2A,0x00,0x54,0x01,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x06,0x00,0xC1,0x00,0x32,0x00,0x31,0x00,0xD8,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x07,0x00,0x55,0x00,0xC6,0x00,0x55,0x00,0xC4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x08,0x00,0x2F,0x00,0x2A,0x00,0x54,0x01,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x09,0x00,0xDC,0x00,0xED,0x00,0xCA,0x00,0xC9,0x00,0xF5,0x00,0xC9,0x00,0xCB,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x0A,0x00,0x57,0x01,0x58,0x01,0x55,0x01,0x56,0x01,0x59,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x0B,0x00,0xC8,0x00,0x2A,0x00,0x54,0x01,0x07,0x00,0xF4,0x00,0xD1,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x0C,0x00,0xDD,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x0D,0x00,0xD9,0x00,0xDA,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x0E,0x00,0xDB,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x0F,0x00,0x00,0x00,0x01,0x00,0xCE,0x00,0xC3,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x10,0x00,0xCF,0x00,0x2A,0x00,0x54,0x01,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x11,0x00,0x1D,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x12,0x00,0x1E,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x13,0x00,0x1F,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x14,0x00,0x20,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x15,0x00,0x31,0x01,0x32,0x01,0x33,0x01,0x34,0x01,0x35,0x01,0x36,0x01,0x37,0x01,0x38,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x16,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x17,0x00,0x21,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x18,0x00,0x4F,0x01,0x50,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x19,0x00,0x22,0x01,0x39,0x01,0x3A,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x1A,0x00,0x3E,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x1B,0x00,0x3B,0x01,0x3C,0x01,0x3D,0x01,0x51,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x1C,0x00,0x23,0x01,0x24,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x09,0x00,0xD2,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x22,0x00,0xD4,0x00,0xDF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x27,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x39,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x2C,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x34,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x00,0x00,0x2A,0x00,0x54,0x01,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x01,0x00,0xD1,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x02,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x04,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x07,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x08,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x09,0x00,0x4C,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x0A,0x00,0xD4,0x00,0xDF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x0B,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x0C,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x0D,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x0E,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x0F,0x00,0xD3,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x10,0x00,0xD3,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x11,0x00,0xD3,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x12,0x00,0xD2,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x13,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x14,0x00,0x4C,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x15,0x00,0x40,0x01,0x25,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x16,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x17,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x18,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0F,0x00,0x19,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x0C,0x32,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x01,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x02,0x00,0x71,0x00,0x05,0x00,0x71,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x03,0x00,0x11,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x04,0x00,0x0B,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x05,0x00,0x05,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x06,0x00,0x00,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0x01,0xF0,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFE,0xFF,0xFF,0x00,0x18,0x28,0x00,0x00,0x20,0x00,0x02,0x00,0x00,
0x08,0x00,0x00,0x01,0x05,0x00,0x00,0x01,0x05,0x00,0x00,0x03,0x80,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x18,0x28,0x00,0x00,0x20,0x00,0x02,0x00,0x00,
0x09,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x06,0x00,0x02,0xF0,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x0C,0x32,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x0A,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x0F,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,0x00,0x02,0x00,0x00,
0x0B,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x02,0xFC,0xFF,0x46,0x00,0x55,0x01,0xFF,0xFF,0xFF,0xFF,0x00,0x0F,0x28,0x00,0x00,0x0F,0x00,0x02,0x00,0x00,
0x0C,0x00,0x22,0x00,0x05,0x00,0x55,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0xFC,0xFF,0x1E,0x00,0x55,0x01,0xFF,0xFF,0xFF,0xFF,0x00,0x14,0x1E,0x00,0x00,0x14,0xAA,0x00,0x01,0x00,
0x0D,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x05,0x00,0x02,0xFC,0xFF,0x46,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x1E,0x00,0x00,0x0C,0x00,0x02,0x01,0x00,
0x0E,0x00,0x71,0x00,0x11,0x00,0x71,0x00,0x11,0x00,0x00,0x07,0x33,0x00,0xE0,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x06,0x1E,0x00,0x00,0x14,0xAA,0x02,0x01,0x00,
0x0F,0x00,0x22,0x00,0x05,0x00,0x55,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0xC0,0xFF,0x14,0x00,0x55,0x01,0xFE,0x80,0xF0,0xFF,0x00,0x14,0x1E,0x00,0x00,0x14,0xAA,0x00,0x01,0x00,
0x10,0x00,0x16,0x00,0x05,0x00,0x71,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x0A,0x1E,0x00,0x00,0x14,0x00,0x02,0x01,0x00,
0x11,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0xC0,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x1E,0x00,0x00,0x14,0x00,0x02,0x01,0x00,
0x12,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0xE0,0xFF,0x14,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x09,0x23,0x00,0x00,0x14,0xAA,0x02,0x01,0x00,
0x13,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,
0x14,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x05,0x00,0x00,0xE7,0xFF,0x50,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x19,0x00,0x02,0x01,0x00,
0x15,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x19,0x00,0x00,0x08,0x00,0x02,0x01,0x00,
0x16,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,0x00,0x02,0x01,0x00,
0x17,0x00,0x2D,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x3C,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x0A,0x00,0x00,0x1E,0xC7,0x07,0x01,0x00,
0x18,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x09,0x0F,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,
0x19,0x00,0x44,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x01,0xF8,0xFF,0x46,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x12,0x00,0x02,0x11,0x00,
0x1A,0x00,0x2D,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x14,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,
0x1B,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x04,0x00,0x00,0x19,0x00,0x02,0x07,0x00,
0x1C,0x00,0x00,0x04,0x05,0x00,0x00,0x02,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x14,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,
0x1D,0x00,0x71,0x00,0x11,0x00,0x71,0x00,0x11,0x00,0x00,0x07,0x33,0x00,0xF8,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x06,0x23,0x00,0x00,0x14,0xAA,0x02,0x01,0x00,
0x1E,0x00,0xE3,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x23,0x00,0x00,0x14,0xAA,0x02,0x00,0x00,
0x1F,0x00,0x00,0x01,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x14,0x00,0x00,0x14,0x00,0x02,0x05,0x00,
0x20,0x00,0x00,0x01,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x03,0x00,0x00,0x0C,0xAA,0x02,0x05,0x00,
0x21,0x00,0x71,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x20,0x00,0x00,0xE0,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x14,0x00,0x00,0x0C,0xAA,0x02,0x05,0x00,
0x22,0x00,0x71,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x09,0x10,0x00,0x00,0x10,0xAA,0x02,0x05,0x00,
0x23,0x00,0x00,0x01,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x09,0x10,0x00,0x00,0x10,0xAA,0x02,0x05,0x00,
0x24,0x00,0xAA,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x20,0x00,0x00,0x00,0xFF,0x00,0x02,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x10,0x00,0x00,0x10,0x00,0x04,0x05,0x00,
0x25,0x00,0x00,0x04,0x00,0x00,0x16,0x00,0x05,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x55,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x10,0x00,0x00,0x12,0x9F,0x00,0x05,0x00,
0x26,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xAA,0x00,0xAA,0x00,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x10,0x00,0x00,0x12,0xAA,0x00,0x07,0x00,
0x27,0x00,0x2D,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x20,0x00,0x00,0x06,0x55,0x03,0x09,0x00,
0x28,0x00,0x5B,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0E,0xC7,0x07,0x01,0x00,
0x29,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x0F,0x00,0x00,0x02,0xFE,0xFE,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x0E,0x00,0x02,0x09,0x00,
0x2A,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x0F,0x00,0x00,0x02,0xFE,0xFE,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x0E,0x00,0x02,0x09,0x00,
0x2B,0x00,0xAA,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x08,0x00,0x00,0x0C,0x55,0x03,0x07,0x00,
0x2C,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x14,0x00,0x00,0x01,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x10,0x00,0x00,0x14,0xAA,0x02,0x07,0x00,
0x2D,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0C,0x00,0x01,0xF8,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFE,0xFF,0xFF,0x00,0x18,0x28,0x00,0x00,0x20,0x00,0x02,0x00,0x00,
0x2E,0x00,0x05,0x00,0x00,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x04,0x00,0x00,0x19,0x00,0x02,0x07,0x00,
0x2F,0x00,0x11,0x00,0x05,0x00,0x71,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//}; // 2a8bd6
//Bit8u unk_D83AC[0xee+0x50c+ 0xc0] = {//unk_D7BD6[0x7d6]
0x00,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x0C,0x32,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x01,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x02,0x00,0x71,0x00,0x05,0x00,0x71,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x03,0x00,0x11,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x04,0x00,0x0B,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x05,0x00,0x05,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x06,0x00,0x00,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
/*}; // weak//2a93ac
Bit8u unk_D849A[0x50c] = {//unk_D83AC[0xee]*/
0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0x01,0xF0,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFE,0xFF,0xFF,0x00,0x18,0x28,0x00,0x00,0x20,0x00,0x02,0x00,0x00,
0x08,0x00,0x00,0x01,0x05,0x00,0x00,0x01,0x05,0x00,0x00,0x03,0x80,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x18,0x28,0x00,0x00,0x20,0x00,0x02,0x00,0x00,
0x09,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x06,0x00,0x02,0xF0,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x0C,0x32,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x0A,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x0F,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,0x00,0x02,0x00,0x00,
0x0B,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x02,0xFC,0xFF,0x46,0x00,0x55,0x01,0xFF,0xFF,0xFF,0xFF,0x00,0x0F,0x28,0x00,0x00,0x0F,0x00,0x02,0x00,0x00,
0x0C,0x00,0x22,0x00,0x05,0x00,0x55,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0xFC,0xFF,0x1E,0x00,0x55,0x01,0xFF,0xFF,0xFF,0xFF,0x00,0x14,0x1E,0x00,0x00,0x14,0xAA,0x00,0x01,0x00,
0x0D,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x05,0x00,0x02,0xFC,0xFF,0x46,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x1E,0x00,0x00,0x0C,0x00,0x02,0x01,0x00,
0x0E,0x00,0x71,0x00,0x11,0x00,0x71,0x00,0x11,0x00,0x00,0x07,0x33,0x00,0xE0,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x06,0x1E,0x00,0x00,0x14,0xAA,0x02,0x01,0x00,
0x0F,0x00,0x22,0x00,0x05,0x00,0x55,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0xC0,0xFF,0x14,0x00,0x55,0x01,0xFE,0x80,0xF0,0xFF,0x00,0x14,0x1E,0x00,0x00,0x14,0xAA,0x00,0x01,0x00,
0x10,0x00,0x16,0x00,0x05,0x00,0x71,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x0A,0x1E,0x00,0x00,0x14,0x00,0x02,0x01,0x00,
0x11,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0xC0,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x1E,0x00,0x00,0x14,0x00,0x02,0x01,0x00,
0x12,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0xE0,0xFF,0x14,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x09,0x23,0x00,0x00,0x14,0xAA,0x02,0x01,0x00,
0x13,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,
0x14,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x05,0x00,0x00,0xE7,0xFF,0x50,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x19,0x00,0x02,0x01,0x00,
0x15,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x19,0x00,0x00,0x08,0x00,0x02,0x01,0x00,
0x16,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,0x00,0x02,0x01,0x00,
0x17,0x00,0x2D,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x3C,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x0A,0x00,0x00,0x1E,0xC7,0x07,0x01,0x00,
0x18,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x09,0x0F,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,
0x19,0x00,0x44,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x01,0xF8,0xFF,0x46,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x12,0x00,0x02,0x11,0x00,
0x1A,0x00,0x2D,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x14,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,
0x1B,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x04,0x00,0x00,0x19,0x00,0x02,0x07,0x00,
0x1C,0x00,0x00,0x04,0x05,0x00,0x00,0x02,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x14,0x00,0x00,0x0F,0x00,0x02,0x01,0x00,
0x1D,0x00,0x71,0x00,0x11,0x00,0x71,0x00,0x11,0x00,0x00,0x07,0x33,0x00,0xF8,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x06,0x23,0x00,0x00,0x14,0xAA,0x02,0x01,0x00,
0x1E,0x00,0xE3,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x23,0x00,0x00,0x14,0xAA,0x02,0x00,0x00,
0x1F,0x00,0x00,0x01,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x14,0x00,0x00,0x14,0x00,0x02,0x05,0x00,
0x20,0x00,0x00,0x01,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x03,0x00,0x00,0x0C,0xAA,0x02,0x05,0x00,
0x21,0x00,0x71,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x20,0x00,0x00,0xE0,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x14,0x00,0x00,0x0C,0xAA,0x02,0x05,0x00,
0x22,0x00,0x71,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x09,0x10,0x00,0x00,0x10,0xAA,0x02,0x05,0x00,
0x23,0x00,0x00,0x01,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x09,0x10,0x00,0x00,0x10,0xAA,0x02,0x05,0x00,
0x24,0x00,0xAA,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x20,0x00,0x00,0x00,0xFF,0x00,0x02,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x10,0x00,0x00,0x10,0x00,0x04,0x05,0x00,
0x25,0x00,0x00,0x04,0x00,0x00,0x16,0x00,0x05,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x55,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x10,0x00,0x00,0x12,0x9F,0x00,0x05,0x00,
0x26,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xAA,0x00,0xAA,0x00,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x10,0x00,0x00,0x12,0xAA,0x00,0x07,0x00,
0x27,0x00,0x2D,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x20,0x00,0x00,0x06,0x55,0x03,0x09,0x00,
0x28,0x00,0x5B,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0E,0xC7,0x07,0x01,0x00,
0x29,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x0F,0x00,0x00,0x02,0xFE,0xFE,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x0E,0x00,0x02,0x09,0x00,
0x2A,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0x0F,0x00,0x00,0x02,0xFE,0xFE,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x0E,0x00,0x02,0x09,0x00,
0x2B,0x00,0xAA,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x08,0x00,0x00,0x0C,0x55,0x03,0x07,0x00,
0x2C,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x14,0x00,0x00,0x01,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x10,0x00,0x00,0x14,0xAA,0x02,0x07,0x00,
//0     1    2    3    4    5    6    7    8    9    a    b    c    d    e    f   10   11   12   13   14   15   16   17   18   19   1a   1b   1c   1d   1e   1f   20   21
0x2D,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0C,0x00,0x01,0xF8,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFE,0xFF,0xFF,0x00,0x18,0x28,0x00,0x00,0x20,0x00,0x02,0x00,0x00,
0x2E,0x00,0x05,0x00,0x00,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x04,0x00,0x00,0x19,0x00,0x02,0x07,0x00,
0x2F,0x00,0x11,0x00,0x05,0x00,0x71,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x01,0x01,0x01,0x01,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,
0x0E,0x0F,0x10,0x00,0x2A,0x53,0x65,0x61,0x72,0x63,0x68,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
}; // weak


//void *off_D89C8 = &loc_5002E; // weak
//void *off_D89EA = &unk_11002F; // weak
char x_BYTE_D8A2E[38] =
{
	1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
	1,1,1,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0
}; // idb

const char *off_D9204_wizards_names1[56] = { "1. Jahwl","2. Kopahk","3. Myrnan Gor","4. Arachnium","5. T'Klom","6. Phyrydia","7. Perilium",
"8. Ul Buthnen","9. Evirith Gor","10. Cymmeria ","11. Tropolos ","12. Jaleen ","13. Galiphur ","14. Tunuk ","15. Zyggogg "
"16. Darklava ","17. C'lannesh ","18. Gleph ","19. Baraghan ","20. Ammyridia ","21. Cresidan ","22. Hodor ","23. Jathnar "
"24. Malak ","25. Uluth ","26. ","27. ","28. ","29. ","30. ","Karakir ","Ymbul","Pav Durivium","Beleem","Ommosyth"
"36. ","37. ","38. ","40. ","41. ","42. ","43. ","44. ","45. ","46. ","47. ","48. ","49. ","50. ","Thrull",
"Keevur","Braak","Trapox","Hibren Zhor","Jinople","Dethrem","Canquin","Zephulum","Verune" };

//const char *off_D9208 = "2. Kopahk"; // weak
const char *off_D93A0_wizards_names2[8] = { "Zanzamar","Nyphur","Rahn","Belix","Jark","Elyssia","Yragore","Prish" };

Bit8u x_WORD_D93C0_bldgprmbuffer[0x13f] = { 0x02,0x00,
//Bit8u x_BYTE_D93C2[0x15a] = { 
	0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,
0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,
0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,
0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x03,0x0E,0x02,0x00,
0x03,0x10,0xF4,0x01,0x18,0x00,0x06,0x00,0x08,0x15,0x09,0x00,0x03,0x00,0x59,0x01,
0x01,0x10,0x06,0x00,0x08,0x36,0x0F,0x00,0x03,0x00,0x11,0x00,0x08,0x18,0x0F,0x00,
0x08,0x1C,0x5E,0x01,0x08,0x19,0x14,0x00,0x03,0x00,0x8A,0x00,0x08,0x29,0x07,0x00,
0x08,0x00,0x1C,0x00,0x03,0x00,0x19,0x00,0x03,0x00,0x1D,0x00,0x03,0x00,0x33,0x00,
0x03,0x00,0x57,0x00,0x03,0x00,0x76,0x00,0x03,0x00,0x1C,0x00,0x03,0x00,0xF0,0x00,
0x08,0x24,0x14,0x00,0x08,0x25,0xCC,0x01,0x08,0x26,0x1E,0x00,0x03,0x00,0x64,0x00,
0x03,0x00,0x5E,0x00,0x08,0x31,0x34,0x00,0x03,0x00,0xE6,0x00,0x08,0x2C,0xC3,0x00,
0x08,0x2D,0x78,0x00,0x08,0x00,0xA8,0x00,0x01,0x00,0x22,0x00,0x03,0x00,0x55,0x01,
0x01,0x00,0x4E,0x00,0x08,0x00,0x18,0x00,0x03,0x00,0x1E,0x00,0x08,0x00,0x1E,0x00,
0x08,0x00,0x1E,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x3C,0x00,0x08,0x37,0x33,0x00,
0x08,0x38,0x33,0x00,0x08,0x39,0x90,0x01,0x18,0x00,0x35,0x00,0x08,0x3B,0x29,0x00,
0x08,0x3C,0x6B,0x01,0x00,0x00,0xD7,0x00,0x03,0x00,0xCC,0x01,0x08,0x3F,0x9A,0x01,
0x08,0x40,0x29,0x00,0x08,0x41,0x33,0x00,0x08,0x42,0x90,0x01,0x1C,0x00,0x13,0x01,
0x08,0x45,0xC3,0x00,0x08,0x48,0xBE,0x00,0x08,0x46,0x5A,0x00,0x08,0x47,0x64,0x00,
0x08,0x49,0x50,0x00,0x08,0x00,0xF5,0x00,0x03,0x00,0x28,0x00,0x09,0x00,0xAA,0x00,
0x63,0x0D,0x00,0x33,0x00,0x11,0x3B,0x00,0x33,0x00,0x88,0x3B,0x00
/*,0x00,0x01,0x02,
0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,
0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x00,0x03,0x00*/
}; // weak//2aa3c2*/
//char x_BYTE_D93C3[] = { '\0' }; // weak //x_BYTE_D93C2[1]
//char x_BYTE_D94F0[] = { '\xAA' }; // weak//x_BYTE_D93C2[0x12e]
//char x_BYTE_D94F1[] = { '\0' }; // weak///x_BYTE_D93C2[0x12f]
//char x_BYTE_D94F2[] = { 'c' }; // weak//x_BYTE_D93C2[0x130]
//char x_BYTE_D94F3[12] = { '\r', '\0', '3', '\0', '\x11', ';', '\0', '3', '\0', '\x88', ';', '\0' }; // idb
//x_BYTE_D93C2[0x131]
char x_BYTE_D94FF_spell_index[29] ={ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,3,0}; // idb
//x_BYTE_D93C2[0x13d]
//int16_t x_WORD_D951C[] = { 8 }; // weak //fix it
Bit16u x_WORD_D951C[0x97d/*0x980*/]= {//2aa51c 0x976
0x0008, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x000B, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x000E, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x000E, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x000E, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x000E, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x0026, 0x212C, 0x002A, 0x0000, 0x00FA, 0xFF00, 0x0000,
0x003C, 0x212C, 0x002A, 0x0000, 0x0096, 0xFF00, 0x0000,
0x003F, 0x212C, 0x002A, 0x0000, 0x0032, 0x0102, 0x0000,
0x003F, 0x212C, 0x002A, 0x0000, 0x0064, 0x0102, 0x0000,
0x003F, 0x212C, 0x002A, 0x0000, 0x0096, 0x0102, 0x0000,
0x003F, 0x212C, 0x002A, 0x0000, 0x00C8, 0x0102, 0x0000,
0x003F, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0102, 0x0000,
0x003F, 0x212C, 0x002A, 0x0000, 0x012C, 0x0102, 0x0000,
0x003F, 0x212C, 0x002A, 0x0000, 0x015E, 0x0102, 0x0000,
0x003F, 0x212C, 0x002A, 0x0000, 0x0190, 0x0102, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x003D, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x0096, 0xFF00, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x00A5, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x00B9, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x00C8, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x00D2, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x00D2, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x00C8, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x00BE, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x00AA, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x00A0, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x0082, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x006E, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x005A, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x0046, 0x0100, 0x0000,
0x0038, 0x212C, 0x002A, 0x0000, 0x003C, 0x0100, 0x0000,
0x004C, 0x212C, 0x002A, 0x0000, 0x0320, 0x0300, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x004F, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x0016, 0x212C, 0x002A, 0x0000, 0x0118, 0x0100, 0x0000,
0x0036, 0x212C, 0x002A, 0x0000, 0x00FA, 0xFF00, 0x0000,
0x0037, 0x212C, 0x002A, 0x0000, 0x0082, 0xFF00, 0x0000,
0x0052, 0x212C, 0x002A, 0x0000, 0x0096, 0xFF00, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00C8, 0xFF00, 0x0000,
0x003E, 0x212C, 0x002A, 0x0000, 0x0096, 0xFF00, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100, 0x0000,
0x0000, 0x212C,0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x0041, 0x212C, 0x002A,0x0000, 0x0096, 0xFF00, 0x0000,
0x003A, 0x212C, 0x002A, 0x0000,0x0032, 0xFF00, 0x0000,
0x003A, 0x212C, 0x002A, 0x0000, 0x0064,0x0100, 0x0000,
0x003A, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100,0x0000,
0x003A, 0x212C, 0x002A, 0x0000, 0x00C8, 0x0100, 0x0000,
0x003A, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x003A,0x212C, 0x002A, 0x0000, 0x012C, 0x0100, 0x0000,
0x003A, 0x212C,0x002A, 0x0000, 0x015E, 0x0100, 0x0000,
0x003A, 0x212C, 0x002A,0x0000, 0x0190, 0x0100, 0x0000,
0x0053, 0x212C, 0x002A, 0x0000,0x0320, 0x0400, 0x0000,
0x0054, 0x212C, 0x002A, 0x0000, 0x0320,0x0400, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100,0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x0051,0x212C, 0x002A, 0x0000, 0x00C8, 0xFF00, 0x0000,
0x0050, 0x212C,0x002A, 0x0000, 0x00C8, 0x0100, 0x0000,
0x0039, 0x212C, 0x002A,0x0000, 0x0032, 0xFF02, 0x0000,
0x0039, 0x212C, 0x002A, 0x0000,0x0064, 0x0102, 0x0000,
0x0039, 0x212C, 0x002A, 0x0000, 0x0096,0x0102, 0x0000,
0x0039, 0x212C, 0x002A, 0x0000, 0x00C8, 0x0102,0x0000,
0x0039, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0102, 0x0000,
0x0039, 0x212C, 0x002A, 0x0000, 0x012C, 0x0102, 0x0000,
0x0039,0x212C, 0x002A, 0x0000, 0x015E, 0x0102, 0x0000,
0x0039, 0x212C,0x002A, 0x0000, 0x0190, 0x0102, 0x0000,
0x0000, 0x212C, 0x002A,0x0000, 0x0096, 0x0100, 0x0000,
0x0040, 0x212C, 0x002A, 0x0000,0x015E, 0x0100, 0x0000,
0x003B, 0x212C, 0x002A, 0x0000, 0x0096,0xFF00, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0096, 0x0103,0x0000,
0x004E, 0x212C, 0x002A, 0x0000, 0x01F4, 0xFF00, 0x0000,
0x0056, 0x212C, 0x002A, 0x0000, 0x0096, 0xFF00, 0x0000,
0x0055,0x212C, 0x002A, 0x0000, 0x0096, 0xFF00, 0x0000,
0x0000, 0x212C,0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x004B, 0x212C, 0x002A,0x0000, 0x0320, 0x0400, 0x0000,
0x0057, 0x212C, 0x002A, 0x0000,0x0320, 0x0400, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0064, 0x0100,0x0000,
0x001E, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x001E, 0x212C, 0x002A, 0x0000, 0x00B4, 0x0100, 0x0000,
0x0042,0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x0042, 0x212C,0x002A, 0x0000, 0x00A5, 0x0100, 0x0000,
0x0042, 0x212C, 0x002A,0x0000, 0x00B9, 0x0100, 0x0000,
0x0042, 0x212C, 0x002A, 0x0000,0x00C8, 0x0100, 0x0000,
0x0042, 0x212C, 0x002A, 0x0000, 0x00D2,0x0100, 0x0000,
0x0042, 0x212C, 0x002A, 0x0000, 0x00D2, 0x0100,0x0000,
0x0042, 0x212C, 0x002A, 0x0000, 0x00C8, 0x0100, 0x0000,
0x0042, 0x212C, 0x002A, 0x0000, 0x00BE, 0x0100, 0x0000,
0x0042,0x212C, 0x002A, 0x0000, 0x00AA, 0x0100, 0x0000,
0x0042, 0x212C,0x002A, 0x0000, 0x00A0, 0x0100, 0x0000,
0x0042, 0x212C, 0x002A,0x0000, 0x0096, 0x0100, 0x0000,
0x0042, 0x212C, 0x002A, 0x0000,0x0082, 0x0100, 0x0000,
0x0042, 0x212C, 0x002A, 0x0000, 0x006E,0x0100, 0x0000,
0x0042, 0x212C, 0x002A, 0x0000, 0x005A, 0x0100,0x0000,
0x0042, 0x212C, 0x002A, 0x0000, 0x0046, 0x0100, 0x0000,
0x0042, 0x212C, 0x002A, 0x0000, 0x003C, 0x0100, 0x0000,
0x0043,0x212C, 0x002A, 0x0000, 0x0032, 0xFF00, 0x0000,
0x0043, 0x212C,0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x0043, 0x212C, 0x002A,0x0000, 0x0096, 0x0100, 0x0000,
0x0043, 0x212C, 0x002A, 0x0000,0x00C8, 0x0100, 0x0000,
0x0043, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0043, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100,0x0000,
0x0043, 0x212C, 0x002A, 0x0000, 0x015E, 0x0100, 0x0000,
0x0043, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x0044,0x212C, 0x002A, 0x0000, 0x0032, 0xFF00, 0x0000,
0x0044, 0x212C,0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x0044, 0x212C, 0x002A,0x0000, 0x0096, 0x0100, 0x0000,
0x0044, 0x212C, 0x002A, 0x0000,0x00C8, 0x0100, 0x0000,
0x0044, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0044, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100,0x0000,
0x0044, 0x212C, 0x002A, 0x0000, 0x015E, 0x0100, 0x0000,
0x0044, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x0045,0x212C, 0x002A, 0x0000, 0x0032, 0xFF00, 0x0000,
0x0045, 0x212C,0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x0045, 0x212C, 0x002A,0x0000, 0x0096, 0x0100, 0x0000,
0x0045, 0x212C, 0x002A, 0x0000,0x00C8, 0x0100, 0x0000,
0x0045, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0045, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100,0x0000,
0x0045, 0x212C, 0x002A, 0x0000, 0x015E, 0x0100, 0x0000,
0x0045, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x0046,0x212C, 0x002A, 0x0000, 0x0032, 0xFF00, 0x0000,
0x0046, 0x212C,0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x0046, 0x212C, 0x002A,0x0000, 0x0096, 0x0100, 0x0000,
0x0046, 0x212C, 0x002A, 0x0000,0x00C8, 0x0100, 0x0000,
0x0046, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0046, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100,0x0000,
0x0046, 0x212C, 0x002A, 0x0000, 0x015E, 0x0100, 0x0000,
0x0046, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x0047,0x212C, 0x002A, 0x0000, 0x0032, 0xFF00, 0x0000,
0x0047, 0x212C,0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x0047, 0x212C, 0x002A,0x0000, 0x0096, 0x0100, 0x0000,
0x0047, 0x212C, 0x002A, 0x0000,0x00C8, 0x0100, 0x0000,
0x0047, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0047, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100,0x0000,
0x0047, 0x212C, 0x002A, 0x0000, 0x015E, 0x0100, 0x0000,
0x0047, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x0048,0x212C, 0x002A, 0x0000, 0x0032, 0xFF00, 0x0000,
0x0048, 0x212C,0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x0048, 0x212C, 0x002A,0x0000, 0x0096, 0x0100, 0x0000,
0x0048, 0x212C, 0x002A, 0x0000,0x00C8, 0x0100, 0x0000,
0x0048, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0048, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100,0x0000,
0x0048, 0x212C, 0x002A, 0x0000, 0x015E, 0x0100, 0x0000,
0x0048, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x0049,0x212C, 0x002A, 0x0000, 0x0032, 0xFF00, 0x0000,
0x0049, 0x212C,0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x0049, 0x212C, 0x002A,0x0000, 0x0096, 0x0100, 0x0000,
0x0049, 0x212C, 0x002A, 0x0000,0x00C8, 0x0100, 0x0000,
0x0049, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0049, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100,0x0000,
0x0049, 0x212C, 0x002A, 0x0000, 0x015E, 0x0100, 0x0000,
0x0049, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x004A,0x212C, 0x002A, 0x0000, 0x0032, 0xFF00, 0x0000,
0x004A, 0x212C,0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x004A, 0x212C, 0x002A,0x0000, 0x0096, 0x0100, 0x0000,
0x004A, 0x212C, 0x002A, 0x0000,0x00C8, 0x0100, 0x0000,
0x004A, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x004A, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100,0x0000,
0x004A, 0x212C, 0x002A, 0x0000, 0x015E, 0x0100, 0x0000,
0x004A, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x0058,0x212C, 0x002A, 0x0000, 0x0320, 0xF000, 0x0000,
0x0059, 0x212C,0x002A, 0x0000, 0x0320, 0xF000, 0x0000,
0x005A, 0x212C, 0x002A,0x0000, 0x0320, 0xF000, 0x0000,
0x005B, 0x212C, 0x002A, 0x0000,0x0320, 0x0100, 0x0000,
0x005C, 0x212C, 0x002A, 0x0000, 0x0320,0x0100, 0x0000,
0x005D, 0x212C, 0x002A, 0x0000, 0x0320, 0x0100,0x0000,
0x005E, 0x212C, 0x002A, 0x0000, 0x0320, 0x0100, 0x0000,
0x005F, 0x212C, 0x002A, 0x0000, 0x0320, 0x0100, 0x0000,
0x0060,0x212C, 0x002A, 0x0000, 0x0190, 0xFF00, 0x0000,
0x0061, 0x212C,0x002A, 0x0000, 0x0190, 0xFF00, 0x0000,
0x0062, 0x212C, 0x002A,0x0000, 0x0190, 0xFF00, 0x0000,
0x0063, 0x212C, 0x002A, 0x0000,0x0190, 0x0100, 0x0000,
0x0064, 0x212C, 0x002A, 0x0000, 0x0190,0x0100, 0x0000,
0x0065, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100,0x0000,
0x0066, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x0067, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x0000,0x212C, 0x002A, 0x0000, 0x0050, 0x0100, 0x0000,
0x0000, 0x212C,0x002A, 0x0000, 0x008C, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A,0x0000, 0x00C8, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000,0x0118, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0168,0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x01B8, 0x0100,0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0208, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0258, 0x0100, 0x0000,
0x0000,0x212C, 0x002A, 0x0000, 0x0032, 0x0100, 0x0000,
0x0000, 0x212C,0x002A, 0x0000, 0x0064, 0x0100, 0x0000,
0x0069, 0x212C, 0x002A,0x0000, 0x003C, 0xFF00, 0x0000,
0x003C, 0x212C, 0x002A, 0x0000,0x0064, 0xFF00, 0x0000,
0x0068, 0x212C, 0x002A, 0x0000, 0x0064,0xFF00, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100,0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0100, 0x0100, 0x0000,
0x006E,0x212C, 0x002A, 0x0000, 0x0100, 0x0100, 0x0000,
0x0071, 0x212C,0x002A, 0x0000, 0x0100, 0x0100, 0x0000,
0x0074, 0x212C, 0x002A,0x0000, 0x003C, 0xFF00, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000,0x0100, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x0100,0x0100, 0x0000,
0x0079, 0x212C, 0x002A, 0x0000, 0x00F0, 0x0100,0x0000,
0x007C, 0x212C, 0x002A, 0x0000, 0x05DC, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100, 0x0000,
0x0090,0x212C, 0x002A, 0x0000, 0x0096, 0xFF03, 0x0000,
0x0091, 0x212C,0x002A, 0x0000, 0x0096, 0xFF00, 0x0000,
0x0092, 0x212C, 0x002A,0x0000, 0x0096, 0xFF00, 0x0000,
0x0093, 0x212C, 0x002A, 0x0000,0x0096, 0xFF00, 0x0000,
0x0094, 0x212C, 0x002A, 0x0000, 0x0096,0xFF00, 0x0000,
0x0095, 0x212C, 0x002A, 0x0000, 0x0096, 0xFF00,0x0000,
0x0096, 0x212C, 0x002A, 0x0000, 0x0096, 0xFF00, 0x0000,
0x0097, 0x212C, 0x002A, 0x0000, 0x0032, 0xFF03, 0x0000,
0x0084,0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0087, 0x212C,0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x008A, 0x212C, 0x002A,0x0000, 0x00FA, 0x0100, 0x0000,
0x009E, 0x212C, 0x002A, 0x0000,0x007D, 0x0100, 0x0000,
0x008D, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x009F, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100,0x0000,
0x00A8, 0x212C, 0x002A, 0x0000, 0x01F4, 0x0100, 0x0000,
0x00A8, 0x212C, 0x002A, 0x0000, 0x01F4, 0x0103, 0x0000,
0x00A8,0x212C, 0x002A, 0x0000, 0x01F4, 0x0100, 0x0000, 
0x00B2, 0x212C,0x002A, 0x0000, 0x0320, 0x0400, 0x0000,
0x00B3, 0x212C, 0x002A,0x0000, 0x0320, 0x0400, 0x0000,
0x004D, 0x212C, 0x002A, 0x0000,0x0032, 0xFF00, 0x0000,
0x004D, 0x212C, 0x002A, 0x0000, 0x0096,0x0100, 0x0000,
0x004D, 0x212C, 0x002A, 0x0000, 0x012C, 0x0100,0x0000,
0x004D, 0x212C, 0x002A, 0x0000, 0x01C2, 0x0100, 0x0000,
0x004D, 0x212C, 0x002A, 0x0000, 0x0258, 0x0100, 0x0000,
0x004D,0x212C, 0x002A, 0x0000, 0x02BC, 0x0100, 0x0000,
0x004D, 0x212C,0x002A, 0x0000, 0x0320, 0x0100, 0x0000,
0x004D, 0x212C, 0x002A,0x0000, 0x03B6, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000,0x00FA, 0x0100, 0x0000,
0x00A9, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0098, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100,0x0000,
0x009B, 0x212C, 0x002A, 0x0000, 0x00C8, 0xFF00, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x00B4,0x212C, 0x002A, 0x0000, 0x00FA, 0xFF00, 0x0000,
0x00B7, 0x212C,0x002A, 0x0000, 0x00FA, 0xFF00, 0x0000,
0x0000, 0x212C, 0x002A,0x0000, 0x00FA, 0x0100, 0x0000,
0x00BA, 0x212C, 0x002A, 0x0000,0x012C, 0xFF00, 0x0000,
0x00C5, 0x212C, 0x002A, 0x0000, 0x00A0,0xFF00, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100,0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000,0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C,0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A,0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000,0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100,0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000,0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C,0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A,0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000,0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100,0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000,0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C,0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A,0x0000, 0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000,0x00FA, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x00C6, 0x212C, 0x002A, 0x0000, 0x0190, 0x0100,0x0000,
0x00C7, 0x212C, 0x002A, 0x0000, 0x012C, 0xFF00, 0x0000,
0x00CA, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x00D3,0x212C, 0x002A, 0x0000, 0x00C8, 0xFF00, 0x0000,
0x00F3, 0x212C,0x002A, 0x0000, 0x00C8, 0xFF00, 0x0000,
0x00CB, 0x212C, 0x002A,0x0000, 0x00C8, 0x0100, 0x0000,
0x00FB, 0x212C, 0x002A, 0x0000,0x00C8, 0x0100, 0x0000,
0x00EB, 0x212C, 0x002A, 0x0000, 0x00C8,0x0100, 0x0000,
0x00E3, 0x212C, 0x002A, 0x0000, 0x00C8, 0x0100,0x0000,
0x00DB, 0x212C, 0x002A, 0x0000, 0x00C8, 0x0100, 0x0000,
0x0103, 0x212C, 0x002A, 0x0000, 0x004B, 0xFF00, 0x0000,
0x0104,0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x0105, 0x212C,0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x0000, 0x212C, 0x002A,0x0000, 0x0096, 0x0100, 0x0000,
0x0106, 0x212C, 0x002A, 0x0000,0x0096, 0x0100, 0x0000,
0x0107, 0x212C, 0x002A, 0x0000, 0x010E,0x0100, 0x0000,
0x010F, 0x212C, 0x002A, 0x0000, 0x02BC, 0x0100,0x0000,
0x0117, 0x212C, 0x002A, 0x0000, 0x00C8, 0x0100, 0x0000,
0x011F, 0x212C, 0x002A, 0x0000, 0x00C8, 0x0100, 0x0000,
0x0127,0x212C, 0x002A, 0x0000, 0x0230, 0x0100, 0x0000,
0x012F, 0x212C,0x002A, 0x0000, 0x0352, 0x0100, 0x0000,
0x0137, 0x212C, 0x002A,0x0000, 0x0258, 0x0100, 0x0000,
0x013F, 0x212C, 0x002A, 0x0000,0x003C, 0x0100, 0x0000,
0x0147, 0x212C, 0x002A, 0x0000, 0x0046,0x0102, 0x0000,
0x0147, 0x212C, 0x002A, 0x0000, 0x0050, 0x0102,0x0000,
0x0147, 0x212C, 0x002A, 0x0000, 0x005A, 0x0102, 0x0000,
0x0147, 0x212C, 0x002A, 0x0000, 0x0064, 0x0102, 0x0000,
0x0147,0x212C, 0x002A, 0x0000, 0x006E, 0x0102, 0x0000,
0x0147, 0x212C,0x002A, 0x0000, 0x0078, 0x0102, 0x0000,
0x0147, 0x212C, 0x002A,0x0000, 0x0082, 0x0102, 0x0000,
0x0147, 0x212C, 0x002A, 0x0000,0x0096, 0x0102, 0x0000,
0x0147, 0x212C, 0x002A, 0x0000, 0x00B4,0x0102, 0x0000,
0x0147, 0x212C, 0x002A, 0x0000, 0x00DC, 0x0102,0x0000,
0x0147, 0x212C, 0x002A, 0x0000, 0x0118, 0x0102, 0x0000,
0x0147, 0x212C, 0x002A, 0x0000, 0x0168, 0x0102, 0x0000,
0x0148,0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0150, 0x212C,0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0158, 0x212C, 0x002A,0x0000, 0x00FA, 0x0100, 0x0000,
0x0160, 0x212C, 0x002A, 0x0000,0x00FA, 0x0100, 0x0000,
0x0168, 0x212C, 0x002A, 0x0000, 0x00FA,0x0100, 0x0000,
0x0170, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100,0x0000,
0x0178, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x0180, 0x212C, 0x002A, 0x0000, 0x0096, 0x0100, 0x0000,
0x0188,0x212C, 0x002A, 0x0000, 0x0078, 0x0100, 0x0000,
0x0189, 0x212C,0x002A, 0x0000, 0x003C, 0x0100, 0x0000,
0x018A, 0x212C, 0x002A,0x0000, 0x0320, 0x0100, 0x0000,
0x0192, 0x212C, 0x002A, 0x0000,0x0104, 0x0100, 0x0000,
0x019A, 0x212C, 0x002A, 0x0000, 0x0078,0x0100, 0x0000,
0x019B, 0x212C, 0x002A, 0x0000, 0x0140, 0x0100,0x0000,
0x01A3, 0x212C, 0x002A, 0x0000, 0x00A0, 0x0100, 0x0000,
0x01A4, 0x212C, 0x002A, 0x0000, 0x0078, 0x0100, 0x0000,
0x01A5,0x212C, 0x002A, 0x0000, 0x0078, 0x0100, 0x0000,
0x01A6, 0x212C,0x002A, 0x0000, 0x00C8, 0x0100, 0x0000,
0x01A7, 0x212C, 0x002A,0x0000, 0x00C8, 0x0100, 0x0000,
0x01A8, 0x212C, 0x002A, 0x0000,0x0064, 0x0100, 0x0000,
0x01A8, 0x212C, 0x002A, 0x0000, 0x0096,0x0100, 0x0000,
0x01A8, 0x212C, 0x002A, 0x0000, 0x00C8, 0x0100,0x0000,
0x01A8, 0x212C, 0x002A, 0x0000, 0x00FA, 0x0100, 0x0000,
0x01A9, 0x212C, 0x002A, 0x0000, 0x00AF, 0x0100, 0x0000,
0x01A9,0x212C, 0x002A, 0x0000, 0x0106, 0x0100, 0x0000,
0x01A9, 0x212C,0x002A, 0x0000, 0x015E, 0x0100, 0x0000,
0x01A9, 0x212C, 0x002A,0x0000, 0x01B5, 0x0100, 0x0000,
0x01AA, 0x212C, 0x002A, 0x0000,0x003C, 0xFF00, 0x0000,
0x01AA, 0x212C, 0x002A, 0x0000, 0x0064,0xFF00, 0x0000,
0x01AA, 0x212C, 0x002A, 0x0000, 0x008C, 0xFF00,0x0000,
0x01B5, 0x212C, 0x002A, 0x0000, 0x01C2, 0x0100, 0x0000,
0x01BD, 0x212C, 0x002A, 0x0000, 0x01C2, 0x0100, 0x0000,
0x01C5,0x212C, 0x002A, 0x0000, 0x0320, 0x0100, 0x0000,
0x01CD, 0x212C,0x002A, 0x0000, 0x02BC, 0x0100, 0x0000,
0x01CE, 0x212C, 0x002A,0x0000, 0x03E8, 0x0100, 0x0000,
0x01CF, 0x212C, 0x002A, 0x0000,0x0064, 0x0100, 0x0000,
0x01D0, 0x212C, 0x002A, 0x0000, 0x04B0, 0x0100, 0x0000,
0x01D8, 0x212C, 0x002A,0x0000, 0x04B0, 0x0100, 0x0000,
0x01E0, 0x212C, 0x002A,0x0000, 0x04B0, 0x0100, 0x0000,
0x01E8, 0x212C, 0x002A,0x0000, 0x04B0, 0x0100, 0x0000,
0x01F0,0x212C, 0x002A,0x0000,0x04B0, 0x0100, 0x0000,
0x0000, 0x0000,0x0000,0x0000,0x0000, 0x0000, 0x0000/*,
0xFF00, 0x0003, 0x00FA*/};
//int16_t x_WORD_D9522[] = { 0 }; // weak//x_WORD_D951C[3]//6-3
//int16_t x_WORD_D9524[] = { 250 }; // weak//x_WORD_D951C[3]//8-4
//char x_BYTE_D9528[] = { '\0' }; // weak//x_WORD_D951C[6];//c-6
//int16_t x_WORD_D99F2 = 0; // weak//x_WORD_D951C[0x26b];//4d6-26b
//int16_t x_WORD_D99F4 = 180; // weak//x_WORD_D951C[0x26c];//4d8-26c
Bit8s x_BYTE_D9F50[0x8c8] = {
0x8C,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,//D9F50
0xC8,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,//D9F50
0x18,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x68,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xB8,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x08,0x02,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x58,0x02,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x32,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x64,0x00,0x00,0x01,0x00,0x00,0x69,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x3C,0x00,0x00,0xFF,0x00,0x00,0x3C,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x64,0x00,0x00,0xFF,0x00,0x00,0x68,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x64,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x90,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x00,0x01,0x00,0x01,0x00,0x00,0x6E,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x00,0x01,0x00,0x01,0x00,0x00,0x71,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x00,0x01,0x00,0x01,0x00,0x00,0x74,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x3C,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x00,0x01,0x00,0x01,0x00,0x00,0x79,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xF0,0x00,0x00,0x01,0x00,0x00,0x7C,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xDC,0x05,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x2C,0x01,0x00,0x01,0x00,0x00,0x90,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x03,0xFF,0x00,0x00,0x91,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0xFF,0x00,0x00,0x92,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0xFF,0x00,0x00,0x93,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0xFF,0x00,0x00,0x94,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0xFF,0x00,0x00,0x95,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0xFF,0x00,0x00,0x96,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0xFF,0x00,0x00,0x97,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x32,0x00,0x03,0xFF,0x00,0x00,0x84,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x87,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x8A,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x9E,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x7D,0x00,0x00,0x01,0x00,0x00,0x8D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x9F,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0xA8,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xF4,0x01,0x00,0x01,0x00,0x00,0xA8,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xF4,0x01,0x03,0x01,0x00,0x00,0xA8,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xF4,0x01,0x00,0x01,0x00,0x00,0xB2,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x20,0x03,0x00,0x04,0x00,0x00,0xB3,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x20,0x03,0x00,0x04,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x32,0x00,0x00,0xFF,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0x01,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x2C,0x01,0x00,0x01,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC2,0x01,0x00,0x01,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x58,0x02,0x00,0x01,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xBC,0x02,0x00,0x01,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x20,0x03,0x00,0x01,0x00,0x00,0x4D,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xB6,0x03,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0xA9,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x98,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0x01,0x00,0x00,0x9B,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0xB4,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0xFF,0x00,0x00,0xB7,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0xBA,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x2C,0x01,0x00,0xFF,0x00,0x00,0xC5,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xA0,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0xC6,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x90,0x01,0x00,0x01,0x00,0x00,0xC7,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x2C,0x01,0x00,0xFF,0x00,0x00,0xCA,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0xD3,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0xFF,0x00,0x00,0xF3,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0xFF,0x00,0x00,0xCB,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0x01,0x00,0x00,0xFB,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0x01,0x00,0x00,0xEB,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0x01,0x00,0x00,0xE3,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0x01,0x00,0x00,0xDB,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0x01,0x00,0x00,0x03,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x4B,0x00,0x00,0xFF,0x00,0x00,0x04,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0x01,0x00,0x00,0x05,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0x01,0x00,0x00,0x06,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0x01,0x00,0x00,0x07,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x0E,0x01,0x00,0x01,0x00,0x00,0x0F,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xBC,0x02,0x00,0x01,0x00,0x00,0x17,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0x01,0x00,0x00,0x1F,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0x01,0x00,0x00,0x27,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x30,0x02,0x00,0x01,0x00,0x00,0x2F,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x52,0x03,0x00,0x01,0x00,0x00,0x37,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x58,0x02,0x00,0x01,0x00,0x00,0x3F,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x3C,0x00,0x00,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x46,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x50,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x5A,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x64,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x6E,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x78,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x82,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xB4,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xDC,0x00,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x18,0x01,0x02,0x01,0x00,0x00,0x47,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x68,0x01,0x02,0x01,0x00,0x00,0x48,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x50,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x58,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x60,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x68,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x70,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x78,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0x80,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0x01,0x00,0x00,0x88,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x78,0x00,0x00,0x01,0x00,0x00,0x89,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x3C,0x00,0x00,0x01,0x00,0x00,0x8A,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x20,0x03,0x00,0x01,0x00,0x00,0x92,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x04,0x01,0x00,0x01,0x00,0x00,0x9A,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x78,0x00,0x00,0x01,0x00,0x00,0x9B,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x40,0x01,0x00,0x01,0x00,0x00,0xA3,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xA0,0x00,0x00,0x01,0x00,0x00,0xA4,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x78,0x00,0x00,0x01,0x00,0x00,0xA5,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x78,0x00,0x00,0x01,0x00,0x00,0xA6,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0x01,0x00,0x00,0xA7,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0x01,0x00,0x00,0xA8,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x64,0x00,0x00,0x01,0x00,0x00,0xA8,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x96,0x00,0x00,0x01,0x00,0x00,0xA8,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC8,0x00,0x00,0x01,0x00,0x00,0xA8,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xFA,0x00,0x00,0x01,0x00,0x00,0xA9,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xAF,0x00,0x00,0x01,0x00,0x00,0xA9,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x06,0x01,0x00,0x01,0x00,0x00,0xA9,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x5E,0x01,0x00,0x01,0x00,0x00,0xA9,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xB5,0x01,0x00,0x01,0x00,0x00,0xAA,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x3C,0x00,0x00,0xFF,0x00,0x00,0xAA,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x64,0x00,0x00,0xFF,0x00,0x00,0xAA,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0x8C,0x00,0x00,0xFF,0x00,0x00,0xB5,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,
0xC2,0x01,0x00,0x01,0x00,0x00,0xBD,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,//da776
0xC2,0x01,0x00,0x01,0x00,0x00,0xC5,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,//da784
0x20,0x03,0x00,0x01,0x00,0x00,0xCD,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,//da792
0xBC,0x02,0x00,0x01,0x00,0x00,0xCE,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,//da7a0
0xE8,0x03,0x00,0x01,0x00,0x00,0xCF,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,//da7ae
0x64,0x00,0x00,0x01,0x00,0x00,0xD0,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,//da7bc
0xB0,0x04,0x00,0x01,0x00,0x00,0xD8,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,//da7ca
0xB0,0x04,0x00,0x01,0x00,0x00,0xE0,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,//da7d8
0xB0,0x04,0x00,0x01,0x00,0x00,0xE8,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,//da7e6
0xB0,0x04,0x00,0x01,0x00,0x00,0xF0,0x01,0x2C,0x21,0x2A,0x00,0x00,0x00,//da7f4
0xB0,0x04,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//da802
0x00, //DA810
0x00, //DA811
0x00, //DA812
0x00, //DA813
0x00, //DA814
0x00, //DA815
0x00, //DA816
0xFF };//DA817
//0xc8+0x800+ x_DWORD_D9F50ar
//load *xadataspellsdat.var28_begin_buffer - lenght 2080

Bit8s x_BYTE_DB038[0x34] = {
0x00,0x00,0x01,0x00,0x04,0x01,0x04,0x01,0x04,0x05,0x04,0x05,0x08,0x09,0x08,0x09,0x00,0x00,0x04,0x04,0x03,0x03,
0x11,0x03,0x03,0x11,0x11,0x11,0x03,0x03,0x1F,0x03,0x03,0x1F,0x1F,0x1F,0x03,0x03,0x18,0x03,0x2D,0x03,0x03,0x18,
0x2D,0x18,0x03,0x2D,0x18,0x2D,0x2D,0x2D
};

Bit8u* off_DB06C[5] = { (Bit8u*)"I",(Bit8u*)"II",(Bit8u*)"III",(Bit8u*)"IV",(Bit8u*)"V"};//x_DWORD_DAF50ar[0x11c]//2ac06c


char x_BYTE_DB080[27*42] = { 
0x02,0x00,0x00,0x00,0xEE,0x02,0x39,0x03,0x2C,0x01,0xB0,0x04,0xC2,0x01,0xBD,0x06,0xC2,0x01,0xCA,0x08,0x77,0x01,0x8C,0x0A,0x77,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4E,0x0C,0x0D,0x02,
0x03,0x00,0x00,0x00,0x65,0x04,0xB0,0x04,0x0D,0x02,0x08,0x07,0x58,0x02,0xAB,0x09,0x2C,0x01,0x22,0x0B,0x0D,0x02,0x7A,0x0D,0xC2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x87,0x0F,0x58,0x02,
0x04,0x00,0x00,0x00,0x84,0x03,0xCF,0x03,0xA3,0x02,0xBD,0x06,0x77,0x01,0x7F,0x08,0xC2,0x01,0x8C,0x0A,0x77,0x01,0x4E,0x0C,0x2C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC5,0x0D,0x77,0x01,
0x05,0x00,0x00,0x00,0x0D,0x02,0x58,0x02,0x2C,0x01,0xCF,0x03,0xC2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0x05,0x58,0x02,
0x06,0x00,0x00,0x00,0xEE,0x02,0x39,0x03,0x77,0x01,0xFB,0x04,0x2C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x72,0x06,0xA3,0x02,
0x07,0x00,0x00,0x00,0x84,0x03,0xCF,0x03,0x77,0x01,0x91,0x05,0x77,0x01,0x53,0x07,0x0D,0x02,0xAB,0x09,0xC2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB8,0x0B,0x77,0x01,
0x08,0x00,0x00,0x00,0x65,0x04,0xB0,0x04,0x77,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x72,0x06,0x0D,0x02,
0x09,0x00,0x00,0x00,0x84,0x03,0xCF,0x03,0xC2,0x01,0xDC,0x05,0x77,0x01,0x9E,0x07,0x2C,0x01,0x15,0x09,0x2C,0x01,0x8C,0x0A,0x58,0x02,0x2F,0x0D,0x0D,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x87,0x0F,0x2C,0x01,
0x0A,0x00,0x00,0x00,0xCF,0x03,0x1A,0x04,0x77,0x01,0xDC,0x05,0x96,0x00,0xBD,0x06,0xE1,0x00,0xE9,0x07,0x0D,0x02,0x41,0x0A,0x0D,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x99,0x0C,0x0D,0x02,
0x0B,0x00,0x00,0x00,0xA3,0x02,0xEE,0x02,0x0D,0x02,0x46,0x05,0x77,0x01,0x08,0x07,0x58,0x02,0xAB,0x09,0x0D,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0C,0x2C,0x01,
0x0C,0x00,0x00,0x00,0x58,0x02,0xA3,0x02,0x77,0x01,0x65,0x04,0x0D,0x02,0xBD,0x06,0x77,0x01,0x7F,0x08,0xC2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8C,0x0A,0x2C,0x01,
0x0D,0x00,0x00,0x00,0x46,0x05,0x91,0x05,0x58,0x02,0x34,0x08,0xC2,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x0A,0x2C,0x01,
0x0E,0x00,0x00,0x00,0xCF,0x03,0x1A,0x04,0xC2,0x01,0x27,0x06,0x77,0x01,0xE9,0x07,0x77,0x01,0xAB,0x09,0x2C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x0B,0xC2,0x01,
0x0F,0x00,0x00,0x00,0xEE,0x02,0x39,0x03,0xA3,0x02,0x27,0x06,0x0D,0x02,0x7F,0x08,0xC2,0x01,0x8C,0x0A,0x77,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4E,0x0C,0x0D,0x02,
0x10,0x00,0x00,0x00,0x65,0x04,0xB0,0x04,0xE1,0x00,0xDC,0x05,0x0D,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x34,0x08,0x0D,0x02,
0x11,0x00,0x00,0x00,0x39,0x03,0x84,0x03,0x0D,0x02,0xDC,0x05,0xE1,0x00,0x08,0x07,0xE1,0x00,0x34,0x08,0x77,0x01,0xF6,0x09,0x2C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6D,0x0B,0x77,0x01,
0x12,0x00,0x00,0x00,0x65,0x04,0xB0,0x04,0x77,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x72,0x06,0x2C,0x01,
0x13,0x00,0x00,0x00,0xDC,0x05,0x27,0x06,0xC2,0x01,0x34,0x08,0x2C,0x01,0xAB,0x09,0xC2,0x01,0xB8,0x0B,0x77,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7A,0x0D,0x2C,0x01,
0x14,0x00,0x00,0x00,0x0D,0x02,0x58,0x02,0x2C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCF,0x03,0xE1,0x00,
0x15,0x00,0x00,0x00,0x39,0x03,0x84,0x03,0x0D,0x02,0xDC,0x05,0x0D,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x34,0x08,0xC2,0x01,
0x16,0x00,0x00,0x00,0x39,0x03,0x84,0x03,0xC2,0x01,0x91,0x05,0x77,0x01,0x53,0x07,0x0D,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAB,0x09,0x77,0x01,
0x17,0x00,0x00,0x00,0x65,0x04,0xB0,0x04,0xE1,0x00,0xDC,0x05,0x0D,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x34,0x08,0xC2,0x01,
0x18,0x00,0x00,0x00,0xCF,0x03,0x1A,0x04,0x2C,0x01,0x91,0x05,0x77,0x01,0x53,0x07,0x0D,0x02,0xAB,0x09,0x2C,0x01,0x22,0x0B,0x2C,0x01,0x99,0x0C,0xC2,0x01,0xA6,0x0E,0x77,0x01,0x00,0x00,0x00,0x00,0x68,0x10,0x2C,0x01,
0x19,0x00,0x00,0x00,0x39,0x03,0x84,0x03,0x77,0x01,0x46,0x05,0x0D,0x02,0x9E,0x07,0x2C,0x01,0x15,0x09,0x2C,0x01,0x8C,0x0A,0x2C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0C,0x77,0x01,
0x1A,0x00,0x00,0x00,0xB0,0x04,0x00,0x00,0x00,0x00,0xFB,0x04,0xA3,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE9,0x07,0x27,0x06,
0x1B,0x00,0x00,0x00,0x77,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x1C,0x00,0x00,0x00,0x77,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
}; // weak//x_DWORD_DAF50ar[0x130]//2ac080 //(27-lenght)*42
char x_BYTE_DB4EE[25] =//x_DWORD_DAF50ar[0x59e]
{
 0x30,0x36,0x3C,0x42,0x45,0x48,0x4D,0x4F,0x56,0x5C,0x61,0x66,0x69,0x6E,0x73,0x76,
0x7C,0x7E,0x83,0x85,0x88,0x8C,0x8F,0x97,0x9C
}; // idb
//char x_BYTE_DB507[11] = { '5', ';', 'A', 'D', 'G', 'L', 'N', 'U', '[', '`' ,'e' }; // idb//x_DWORD_DAF50ar[0x5b7]
char x_BYTE_DB507[25] = { 0x35, 0x3B, 0x41, 0x44, 0x47, 0x4C, 0x4E, 0x55, 0x5B, 0x60, 0x65, 0x68, 0x6D, 0x72, 0x75, 0x7B,
0x7D, 0x82, 0x84, 0x87, 0x8B, 0x8E, 0x96, 0x9C, 0x9E };
//char x_BYTE_DB511 = 'e'; // weak//x_DWORD_DAF50ar[0x5c1]//x_BYTE_DB507[0xa]
//char x_BYTE_DB520[6] = { '0', '3', '?', '=', '\x92', 'q' }; // idb//x_DWORD_DAF50ar[0x5d0]
//char x_BYTE_DB526 = 'N'; // weak//x_DWORD_DAF50ar[0x5d6]//x_BYTE_DB520[6]
char x_BYTE_DB520[24] = {
	0x30, 0x33, 0x3F, 0x3D, 0x92, 0x71,
	0x4E, 0x04, 0x01, 0x00, 0x02, 0x00,
	0x08, 0x00, 0x10, 0x00, 0x20, 0x00,
	0x80, 0x00, 0x00, 0x01, 0x00, 0x04 };
 // idb//x_DWORD_DAF50ar[0x5d0]
int x_DWORD_DB538[8] = { 256, 512, 1024, 2048, 4096, 9192, 18384, 36768 }; // idb//x_DWORD_DAF50ar[0x5e8]
//char *off_DB558[3] = { (char*)"Designed By", (char*)"Bullfrog Productions Ltd", (char*)"!" }; // weak//x_DWORD_DAF50ar[0x608]

char* var_0x002A2144 = (char*)"Designed By";
char* var_0x002A2150 = (char*)"Bullfrog Productions Ltd";
char* var_0x002A216C = (char*)"!";
char* var_0x002A2170 = (char*)"Project Leader";
char* var_0x002A2180 = (char*)" ";
char* var_0x002A2184 = (char*)"Alan Wright";
char* var_0x002A2190 = (char*)"Engine Programming";
char* var_0x002A21A4 = (char*)"Glenn Corpes";
char* var_0x002A21B4 = (char*)"Lead Programming";
char* var_0x002A21C8 = (char*)"Programming";
char* var_0x002A21D4 = (char*)"Mark Lamport";
char* var_0x002A21E4 = (char*)"Mark Adami";
char* var_0x002A21F0 = (char*)"Lead Artist";
char* var_0x002A21FC = (char*)"Eoin Rogan";
char* var_0x002A2208 = (char*)"Graphics and Art";
char* var_0x002A221C = (char*)"Darren Thomas";
char* var_0x002A222C = (char*)"Fin McGechie";
char* var_0x002A223C = (char*)"Introductory Sequence";
char* var_0x002A2254 = (char*)"Chris Hill";
char* var_0x002A2260 = (char*)"Scripting";
char* var_0x002A226C = (char*)"Sean Masterson";
char* var_0x002A227C = (char*)"Level Design";
char* var_0x002A228C = (char*)"Adrian Moore";
char* var_0x002A229C = (char*)"Vince Farquharson";
char* var_0x002A22B0 = (char*)"Barry Meade";
char* var_0x002A22BC = (char*)"Sound and Music";
char* var_0x002A22CC = (char*)"Russell Shaw";
char* var_0x002A22DC = (char*)"Voice Overs";
char* var_0x002A22E8 = (char*)"Hugo Myatt";
char* var_0x002A22F4 = (char*)"Technical Support";
char* var_0x002A2308 = (char*)"Kevin Donkin";
char* var_0x002A2318 = (char*)"Mike Burnham";
char* var_0x002A2328 = (char*)"PR and Marketing";
char* var_0x002A233C = (char*)"Cathy Campos";
char* var_0x002A234C = (char*)"Sean Ratcliffe";
char* var_0x002A235C = (char*)"Playguide";
char* var_0x002A2368 = (char*)"Neil Cook";
char* var_0x002A2374 = (char*)"Playguide Design";
char* var_0x002A2388 = (char*)"Rachel Close";
char* var_0x002A2398 = (char*)"Testing";
char* var_0x002A23A0 = (char*)"Andy Robson, Jeff Brutus";
char* var_0x002A23BC = (char*)"Andy Nuttall, Steve Fitton";
char* var_0x002A23D8 = (char*)"Robert Byrne, Richard Elliot";
char* var_0x002A23F8 = (char*)"David Rogan, Christopher Mitchell";
char* var_0x002A241C = (char*)"Nick Hannah, Ken Malcolm";
char* var_0x002A2438 = (char*)"Phil Norton, Andrew Trowers";
char* var_0x002A2454 = (char*)"Darren Jones, Luke Ferris";
char* var_0x002A2470 = (char*)"Charlie Right, Mike Man";
char* var_0x002A2488 = (char*)"Richard Velati, Mark Stacey";
char* var_0x002A24A4 = (char*)"Kenneth Chan, Mike Diskett";
char* var_0x002A24C0 = (char*)"James Smith, Eoin Rogan";
char* var_0x002A24D8 = (char*)"M Rowbottom, Gerard O'Donaghue";
char* var_0x002A24F8 = (char*)"Peter Blow, Peter Hughes";
char* var_0x002A2514 = (char*)"Barrie Parker";
char* var_0x002A2524 = (char*)"Andrea Da Silva Goncalves";
char* var_0x002A2540 = (char*)"Matt Sullivan, Andy Cakebread";
char* var_0x002A2560 = (char*)"Barry Clarke, Justin Amoore";
char* var_0x002A257C = (char*)"Graham Harbour, Simon Romans";
char* var_0x002A259C = (char*)"Symeon Cosburn";
char* var_0x002A25AC = (char*)"Thanks to";
char* var_0x002A25B8 = (char*)"Jo Goodwin";
char* var_0x002A25C4 = (char*)"Kathy McEntee";
char* var_0x002A25D4 = (char*)"Denis";
char* var_0x002A25DC = (char*)"QA";
char* var_0x002A25E0 = (char*)"Iain Hancock";
char* var_0x002A25F0 = (char*)"Producer";
char* var_0x002A25FC = (char*)"Sean Cooper";


//2AC558:
char* off_DB558[] = {
var_0x002A2144, var_0x002A2150, var_0x002A216C, var_0x002A2170,
var_0x002A2180, var_0x002A2184, var_0x002A2180, var_0x002A2190,
var_0x002A2180, var_0x002A21A4, var_0x002A216C, var_0x002A21B4,
var_0x002A2180, var_0x002A2184, var_0x002A2180, var_0x002A21C8,
var_0x002A2180, var_0x002A21D4, var_0x002A21E4, var_0x002A216C,
var_0x002A21F0, var_0x002A2180, var_0x002A21FC, var_0x002A2180,
var_0x002A2208, var_0x002A2180, var_0x002A221C, var_0x002A222C,
var_0x002A216C, var_0x002A223C, var_0x002A2180, var_0x002A2254,
var_0x002A2180, var_0x002A2260, var_0x002A2180, var_0x002A226C,
var_0x002A216C, var_0x002A227C, var_0x002A2180, var_0x002A226C,
var_0x002A228C, var_0x002A229C, var_0x002A22B0, var_0x002A216C,
var_0x002A22BC, var_0x002A2180, var_0x002A22CC, var_0x002A216C,
var_0x002A22DC, var_0x002A2180, var_0x002A22E8, var_0x002A216C,
var_0x002A22F4, var_0x002A2180, var_0x002A2308, var_0x002A2318,
var_0x002A216C, var_0x002A2328, var_0x002A2180, var_0x002A233C,
var_0x002A234C, var_0x002A216C, var_0x002A235C, var_0x002A2180,
var_0x002A2368, var_0x002A226C, var_0x002A216C, var_0x002A2374,
var_0x002A2180, var_0x002A2388, var_0x002A216C, var_0x002A2398,
var_0x002A2180, var_0x002A23A0, var_0x002A23BC, var_0x002A23D8,
var_0x002A216C, var_0x002A2180, var_0x002A23F8, var_0x002A241C,
var_0x002A2438, var_0x002A216C, var_0x002A2180, var_0x002A2454,
var_0x002A2470, var_0x002A2488, var_0x002A216C, var_0x002A2180,
var_0x002A24A4, var_0x002A24C0, var_0x002A24D8, var_0x002A216C,
var_0x002A2180, var_0x002A24F8, var_0x002A2514, var_0x002A2524,
var_0x002A216C, var_0x002A2180, var_0x002A2540, var_0x002A2560,
var_0x002A257C, var_0x002A259C, var_0x002A216C, var_0x002A2180,
var_0x002A25AC, var_0x002A2180, var_0x002A25B8, var_0x002A25C4,
var_0x002A25D4, var_0x002A216C, var_0x002A25DC, var_0x002A2180,
var_0x002A25E0, var_0x002A216C, var_0x002A25F0, var_0x002A2180,
var_0x002A25FC, NULL, NULL, NULL };




char x_BYTE_DB734 = 0; // weak//x_DWORD_DAF50ar[0x7e4]
char x_BYTE_DB738 = 0; // weak//x_DWORD_DAF50ar[0x7e8]
FILE* x_DWORD_DB73C_tmapsfile;  // FIXME: replace by file_handling
FILE* x_DWORD_DB740_tmaps00file;//x_DWORD_DAF50[0x7f0]
FILE* x_DWORD_DB744_tmaps10file;//x_DWORD_DAF50[0x7f4]
FILE* x_DWORD_DB748_tmaps20file;//x_DWORD_DAF50[0x7f8]
char x_BYTE_DB74C = 1; // weak//x_DWORD_DAF50[0x7fc]
Bit32s x_DWORD_DB750[0x1200] =//2ac750 //speed table1 //sin and cos table
{
  0x00000000,0x000000C9,0x00000192,0x0000025B,
0x00000324,0x000003ED,0x000004B6,0x0000057F,
0x00000648,0x00000711,0x000007DA,0x000008A3,
0x0000096C,0x00000A35,0x00000AFE,0x00000BC7,
0x00000C90,0x00000D59,0x00000E21,0x00000EEA,
0x00000FB3,0x0000107B,0x00001144,0x0000120D,
0x000012D5,0x0000139E,0x00001466,0x0000152E,
0x000015F7,0x000016BF,0x00001787,0x00001850,
0x00001918,0x000019E0,0x00001AA8,0x00001B70,
0x00001C38,0x00001CFF,0x00001DC7,0x00001E8F,
0x00001F56,0x0000201E,0x000020E5,0x000021AD,
0x00002274,0x0000233B,0x00002402,0x000024C9,
0x00002590,0x00002657,0x0000271E,0x000027E4,
0x000028AB,0x00002971,0x00002A38,0x00002AFE,
0x00002BC4,0x00002C8A,0x00002D50,0x00002E16,
0x00002EDC,0x00002FA1,0x00003067,0x0000312C,
0x000031F1,0x000032B7,0x0000337C,0x00003440,
0x00003505,0x000035CA,0x0000368E,0x00003753,
0x00003817,0x000038DB,0x0000399F,0x00003A63,
0x00003B27,0x00003BEA,0x00003CAE,0x00003D71,
0x00003E34,0x00003EF7,0x00003FBA,0x0000407C,
0x0000413F,0x00004201,0x000042C3,0x00004385,
0x00004447,0x00004509,0x000045CB,0x0000468C,
0x0000474D,0x0000480E,0x000048CF,0x00004990,
0x00004A50,0x00004B10,0x00004BD1,0x00004C90,
0x00004D50,0x00004E10,0x00004ECF,0x00004F8E,
0x0000504D,0x0000510C,0x000051CB,0x00005289,
0x00005348,0x00005406,0x000054C3,0x00005581,
0x0000563E,0x000056FC,0x000057B9,0x00005875,
0x00005932,0x000059EE,0x00005AAA,0x00005B66,
0x00005C22,0x00005CDE,0x00005D99,0x00005E54,
0x00005F0F,0x00005FC9,0x00006084,0x0000613E,
0x000061F8,0x000062B1,0x0000636B,0x00006424,
0x000064DD,0x00006595,0x0000664E,0x00006706,
0x000067BE,0x00006876,0x0000692D,0x000069E4,
0x00006A9B,0x00006B52,0x00006C08,0x00006CBE,
0x00006D74,0x00006E2A,0x00006EDF,0x00006F94,
0x00007049,0x000070FE,0x000071B2,0x00007266,
0x0000731A,0x000073CD,0x00007480,0x00007533,
0x000075E6,0x00007698,0x0000774A,0x000077FC,
0x000078AD,0x0000795F,0x00007A10,0x00007AC0,
0x00007B70,0x00007C20,0x00007CD0,0x00007D7F,
0x00007E2F,0x00007EDD,0x00007F8C,0x0000803A,
0x000080E8,0x00008195,0x00008243,0x000082F0,
0x0000839C,0x00008449,0x000084F5,0x000085A0,
0x0000864C,0x000086F7,0x000087A1,0x0000884C,
0x000088F6,0x0000899F,0x00008A49,0x00008AF2,
0x00008B9A,0x00008C43,0x00008CEB,0x00008D93,
0x00008E3A,0x00008EE1,0x00008F88,0x0000902E,
0x000090D4,0x00009179,0x0000921F,0x000092C4,
0x00009368,0x0000940C,0x000094B0,0x00009554,
0x000095F7,0x0000969A,0x0000973C,0x000097DE,
0x00009880,0x00009921,0x000099C2,0x00009A63,
0x00009B03,0x00009BA3,0x00009C42,0x00009CE1,
0x00009D80,0x00009E1E,0x00009EBC,0x00009F5A,
0x00009FF7,0x0000A094,0x0000A130,0x0000A1CC,
0x0000A268,0x0000A303,0x0000A39E,0x0000A438,
0x0000A4D2,0x0000A56C,0x0000A605,0x0000A69E,
0x0000A736,0x0000A7CE,0x0000A866,0x0000A8FD,
0x0000A994,0x0000AA2A,0x0000AAC1,0x0000AB56,
0x0000ABEB,0x0000AC80,0x0000AD14,0x0000ADA8,
0x0000AE3C,0x0000AECF,0x0000AF62,0x0000AFF4,
0x0000B086,0x0000B117,0x0000B1A8,0x0000B239,
0x0000B2C9,0x0000B358,0x0000B3E8,0x0000B477,
0x0000B505,0x0000B593,0x0000B620,0x0000B6AD,
0x0000B73A,0x0000B7C6,0x0000B852,0x0000B8DD,
0x0000B968,0x0000B9F3,0x0000BA7D,0x0000BB06,
0x0000BB8F,0x0000BC18,0x0000BCA0,0x0000BD28,
0x0000BDAF,0x0000BE36,0x0000BEBC,0x0000BF42,
0x0000BFC7,0x0000C04C,0x0000C0D1,0x0000C155,
0x0000C1D8,0x0000C25C,0x0000C2DE,0x0000C360,
0x0000C3E2,0x0000C463,0x0000C4E4,0x0000C564,
0x0000C5E4,0x0000C663,0x0000C6E2,0x0000C761,
0x0000C7DE,0x0000C85C,0x0000C8D9,0x0000C955,
0x0000C9D1,0x0000CA4D,0x0000CAC7,0x0000CB42,
0x0000CBBC,0x0000CC35,0x0000CCAE,0x0000CD27,
0x0000CD9F,0x0000CE17,0x0000CE8E,0x0000CF04,
0x0000CF7A,0x0000CFF0,0x0000D065,0x0000D0D9,
0x0000D14D,0x0000D1C1,0x0000D234,0x0000D2A6,
0x0000D318,0x0000D38A,0x0000D3FB,0x0000D46B,
0x0000D4DB,0x0000D54B,0x0000D5BA,0x0000D628,
0x0000D696,0x0000D703,0x0000D770,0x0000D7DC,
0x0000D848,0x0000D8B4,0x0000D91E,0x0000D989,
0x0000D9F2,0x0000DA5C,0x0000DAC4,0x0000DB2C,
0x0000DB94,0x0000DBFB,0x0000DC62,0x0000DCC8,
0x0000DD2D,0x0000DD92,0x0000DDF7,0x0000DE5B,
0x0000DEBE,0x0000DF21,0x0000DF83,0x0000DFE5,
0x0000E046,0x0000E0A7,0x0000E107,0x0000E167,
0x0000E1C6,0x0000E224,0x0000E282,0x0000E2DF,
0x0000E33C,0x0000E399,0x0000E3F4,0x0000E450,
0x0000E4AA,0x0000E504,0x0000E55E,0x0000E5B7,
0x0000E610,0x0000E667,0x0000E6BF,0x0000E716,
0x0000E76C,0x0000E7C2,0x0000E817,0x0000E86B,
0x0000E8BF,0x0000E913,0x0000E966,0x0000E9B8,
0x0000EA0A,0x0000EA5B,0x0000EAAB,0x0000EAFC,
0x0000EB4B,0x0000EB9A,0x0000EBE8,0x0000EC36,
0x0000EC83,0x0000ECD0,0x0000ED1C,0x0000ED68,
0x0000EDB3,0x0000EDFD,0x0000EE47,0x0000EE90,
0x0000EED9,0x0000EF21,0x0000EF68,0x0000EFAF,
0x0000EFF5,0x0000F03B,0x0000F080,0x0000F0C5,
0x0000F109,0x0000F14C,0x0000F18F,0x0000F1D2,
0x0000F213,0x0000F254,0x0000F295,0x0000F2D5,
0x0000F314,0x0000F353,0x0000F391,0x0000F3CF,
0x0000F40C,0x0000F448,0x0000F484,0x0000F4BF,
0x0000F4FA,0x0000F534,0x0000F56E,0x0000F5A6,
0x0000F5DF,0x0000F616,0x0000F64E,0x0000F684,
0x0000F6BA,0x0000F6EF,0x0000F724,0x0000F758,
0x0000F78C,0x0000F7BF,0x0000F7F1,0x0000F823,
0x0000F854,0x0000F885,0x0000F8B4,0x0000F8E4,
0x0000F913,0x0000F941,0x0000F96E,0x0000F99B,
0x0000F9C8,0x0000F9F3,0x0000FA1F,0x0000FA49,
0x0000FA73,0x0000FA9C,0x0000FAC5,0x0000FAED,
0x0000FB15,0x0000FB3C,0x0000FB62,0x0000FB88,
0x0000FBAD,0x0000FBD1,0x0000FBF5,0x0000FC18,
0x0000FC3B,0x0000FC5D,0x0000FC7F,0x0000FCA0,
0x0000FCC0,0x0000FCDF,0x0000FCFE,0x0000FD1D,
0x0000FD3B,0x0000FD58,0x0000FD74,0x0000FD90,
0x0000FDAC,0x0000FDC7,0x0000FDE1,0x0000FDFA,
0x0000FE13,0x0000FE2B,0x0000FE43,0x0000FE5A,
0x0000FE71,0x0000FE87,0x0000FE9C,0x0000FEB0,
0x0000FEC4,0x0000FED8,0x0000FEEB,0x0000FEFD,
0x0000FF0E,0x0000FF1F,0x0000FF30,0x0000FF3F,
0x0000FF4E,0x0000FF5D,0x0000FF6B,0x0000FF78,
0x0000FF85,0x0000FF91,0x0000FF9C,0x0000FFA7,
0x0000FFB1,0x0000FFBB,0x0000FFC4,0x0000FFCC,
0x0000FFD4,0x0000FFDB,0x0000FFE1,0x0000FFE7,
0x0000FFEC,0x0000FFF1,0x0000FFF5,0x0000FFF8,
0x0000FFFB, 0x0000FFFD, 0x0000FFFF, 0x00010000,
/*};
Bit32s off_DBF50[0x1000] =  // weak//x_DWORD_DB750[0x200]//2acf50 //speed table2
{*/
	0x00010000, 0x00010000, 0x0000FFFF, 0x0000FFFD,
		0x0000FFFB, 0x0000FFF8, 0x0000FFF5, 0x0000FFF1,
		0x0000FFEC, 0x0000FFE7, 0x0000FFE1, 0x0000FFDB,
		0x0000FFD4, 0x0000FFCC, 0x0000FFC4, 0x0000FFBB,
		0x0000FFB1, 0x0000FFA7, 0x0000FF9C, 0x0000FF91,
		0x0000FF85, 0x0000FF78, 0x0000FF6B, 0x0000FF5D,
		0x0000FF4E, 0x0000FF3F, 0x0000FF30, 0x0000FF1F,
		0x0000FF0E, 0x0000FEFD, 0x0000FEEB, 0x0000FED8,
		0x0000FEC4, 0x0000FEB0, 0x0000FE9C, 0x0000FE87,
		0x0000FE71, 0x0000FE5A, 0x0000FE43, 0x0000FE2B,
		0x0000FE13, 0x0000FDFA, 0x0000FDE1, 0x0000FDC7,
		0x0000FDAC, 0x0000FD90, 0x0000FD74, 0x0000FD58,
		0x0000FD3B, 0x0000FD1D, 0x0000FCFE, 0x0000FCDF,
		0x0000FCC0, 0x0000FCA0, 0x0000FC7F, 0x0000FC5D,
		0x0000FC3B, 0x0000FC18, 0x0000FBF5, 0x0000FBD1,
		0x0000FBAD, 0x0000FB88, 0x0000FB62, 0x0000FB3C,
		0x0000FB15, 0x0000FAED, 0x0000FAC5, 0x0000FA9C,
		0x0000FA73, 0x0000FA49, 0x0000FA1F, 0x0000F9F3,
		0x0000F9C8, 0x0000F99B, 0x0000F96E, 0x0000F941,
		0x0000F913, 0x0000F8E4, 0x0000F8B4, 0x0000F885,
		0x0000F854, 0x0000F823, 0x0000F7F1, 0x0000F7BF,
		0x0000F78C, 0x0000F758, 0x0000F724, 0x0000F6EF,
		0x0000F6BA, 0x0000F684, 0x0000F64E, 0x0000F616,
		0x0000F5DF, 0x0000F5A6, 0x0000F56E, 0x0000F534,
		0x0000F4FA, 0x0000F4BF, 0x0000F484, 0x0000F448,
		0x0000F40C, 0x0000F3CF, 0x0000F391, 0x0000F353,
		0x0000F314, 0x0000F2D5, 0x0000F295, 0x0000F254,
		0x0000F213, 0x0000F1D2, 0x0000F18F, 0x0000F14C,
		0x0000F109, 0x0000F0C5, 0x0000F080, 0x0000F03B,
		0x0000EFF5, 0x0000EFAF, 0x0000EF68, 0x0000EF21,
		0x0000EED9, 0x0000EE90, 0x0000EE47, 0x0000EDFD,
		0x0000EDB3, 0x0000ED68, 0x0000ED1C, 0x0000ECD0,
		0x0000EC83, 0x0000EC36, 0x0000EBE8, 0x0000EB9A,
		0x0000EB4B, 0x0000EAFC, 0x0000EAAB, 0x0000EA5B,
		0x0000EA0A, 0x0000E9B8, 0x0000E966, 0x0000E913,
		0x0000E8BF, 0x0000E86B, 0x0000E817, 0x0000E7C2,
		0x0000E76C, 0x0000E716, 0x0000E6BF, 0x0000E667,
		0x0000E610, 0x0000E5B7, 0x0000E55E, 0x0000E504,
		0x0000E4AA, 0x0000E450, 0x0000E3F4, 0x0000E399,
		0x0000E33C, 0x0000E2DF, 0x0000E282, 0x0000E224,
		0x0000E1C6, 0x0000E167, 0x0000E107, 0x0000E0A7,
		0x0000E046, 0x0000DFE5, 0x0000DF83, 0x0000DF21,
		0x0000DEBE, 0x0000DE5B, 0x0000DDF7, 0x0000DD92,
		0x0000DD2D, 0x0000DCC8, 0x0000DC62, 0x0000DBFB,
		0x0000DB94, 0x0000DB2C, 0x0000DAC4, 0x0000DA5C,
		0x0000D9F2, 0x0000D989, 0x0000D91E, 0x0000D8B4,
		0x0000D848, 0x0000D7DC, 0x0000D770, 0x0000D703,
		0x0000D696, 0x0000D628, 0x0000D5BA, 0x0000D54B,
		0x0000D4DB, 0x0000D46B, 0x0000D3FB, 0x0000D38A,
		0x0000D318, 0x0000D2A6, 0x0000D234, 0x0000D1C1,
		0x0000D14D, 0x0000D0D9, 0x0000D065, 0x0000CFF0,
		0x0000CF7A, 0x0000CF04, 0x0000CE8E, 0x0000CE17,
		0x0000CD9F, 0x0000CD27, 0x0000CCAE, 0x0000CC35,
		0x0000CBBC, 0x0000CB42, 0x0000CAC7, 0x0000CA4D,
		0x0000C9D1, 0x0000C955, 0x0000C8D9, 0x0000C85C,
		0x0000C7DE, 0x0000C761, 0x0000C6E2, 0x0000C663,
		0x0000C5E4, 0x0000C564, 0x0000C4E4, 0x0000C463,
		0x0000C3E2, 0x0000C360, 0x0000C2DE, 0x0000C25C,
		0x0000C1D8, 0x0000C155, 0x0000C0D1, 0x0000C04C,
		0x0000BFC7, 0x0000BF42, 0x0000BEBC, 0x0000BE36,
		0x0000BDAF, 0x0000BD28, 0x0000BCA0, 0x0000BC18,
		0x0000BB8F, 0x0000BB06, 0x0000BA7D, 0x0000B9F3,
		0x0000B968, 0x0000B8DD, 0x0000B852, 0x0000B7C6,
		0x0000B73A, 0x0000B6AD, 0x0000B620, 0x0000B593,
		0x0000B505, 0x0000B477, 0x0000B3E8, 0x0000B358,
		0x0000B2C9, 0x0000B239, 0x0000B1A8, 0x0000B117,
		0x0000B086, 0x0000AFF4, 0x0000AF62, 0x0000AECF,
		0x0000AE3C, 0x0000ADA8, 0x0000AD14, 0x0000AC80,
		0x0000ABEB, 0x0000AB56, 0x0000AAC1, 0x0000AA2A,
		0x0000A994, 0x0000A8FD, 0x0000A866, 0x0000A7CE,
		0x0000A736, 0x0000A69E, 0x0000A605, 0x0000A56C,
		0x0000A4D2, 0x0000A438, 0x0000A39E, 0x0000A303,
		0x0000A268, 0x0000A1CC, 0x0000A130, 0x0000A094,
		0x00009FF7, 0x00009F5A, 0x00009EBC, 0x00009E1E,
		0x00009D80, 0x00009CE1, 0x00009C42, 0x00009BA3,
		0x00009B03, 0x00009A63, 0x000099C2, 0x00009921,
		0x00009880, 0x000097DE, 0x0000973C, 0x0000969A,
		0x000095F7, 0x00009554, 0x000094B0, 0x0000940C,
		0x00009368, 0x000092C4, 0x0000921F, 0x00009179,
		0x000090D4, 0x0000902E, 0x00008F88, 0x00008EE1,
		0x00008E3A, 0x00008D93, 0x00008CEB, 0x00008C43,
		0x00008B9A, 0x00008AF2, 0x00008A49, 0x0000899F,
		0x000088F6, 0x0000884C, 0x000087A1, 0x000086F7,
		0x0000864C, 0x000085A0, 0x000084F5, 0x00008449,
		0x0000839C, 0x000082F0, 0x00008243, 0x00008195,
		0x000080E8, 0x0000803A, 0x00007F8C, 0x00007EDD,
		0x00007E2F, 0x00007D7F, 0x00007CD0, 0x00007C20,
		0x00007B70, 0x00007AC0, 0x00007A10, 0x0000795F,
		0x000078AD, 0x000077FC, 0x0000774A, 0x00007698,
		0x000075E6, 0x00007533, 0x00007480, 0x000073CD,
		0x0000731A, 0x00007266, 0x000071B2, 0x000070FE,
		0x00007049, 0x00006F94, 0x00006EDF, 0x00006E2A,
		0x00006D74, 0x00006CBE, 0x00006C08, 0x00006B52,
		0x00006A9B, 0x000069E4, 0x0000692D, 0x00006876,
		0x000067BE, 0x00006706, 0x0000664E, 0x00006595,
		0x000064DD, 0x00006424, 0x0000636B, 0x000062B1,
		0x000061F8, 0x0000613E, 0x00006084, 0x00005FC9,
		0x00005F0F, 0x00005E54, 0x00005D99, 0x00005CDE,
		0x00005C22, 0x00005B66, 0x00005AAA, 0x000059EE,
		0x00005932, 0x00005875, 0x000057B9, 0x000056FC,
		0x0000563E, 0x00005581, 0x000054C3, 0x00005406,
		0x00005348, 0x00005289, 0x000051CB, 0x0000510C,
		0x0000504D, 0x00004F8E, 0x00004ECF, 0x00004E10,
		0x00004D50, 0x00004C90, 0x00004BD1, 0x00004B10,
		0x00004A50, 0x00004990, 0x000048CF, 0x0000480E,
		0x0000474D, 0x0000468C, 0x000045CB, 0x00004509,
		0x00004447, 0x00004385, 0x000042C3, 0x00004201,
		0x0000413F, 0x0000407C, 0x00003FBA, 0x00003EF7,
		0x00003E34, 0x00003D71, 0x00003CAE, 0x00003BEA,
		0x00003B27, 0x00003A63, 0x0000399F, 0x000038DB,
		0x00003817, 0x00003753, 0x0000368E, 0x000035CA,
		0x00003505, 0x00003440, 0x0000337C, 0x000032B7,
		0x000031F1, 0x0000312C, 0x00003067, 0x00002FA1,
		0x00002EDC, 0x00002E16, 0x00002D50, 0x00002C8A,
		0x00002BC4, 0x00002AFE, 0x00002A38, 0x00002971,
		0x000028AB, 0x000027E4, 0x0000271E, 0x00002657,
		0x00002590, 0x000024C9, 0x00002402, 0x0000233B,
		0x00002274, 0x000021AD, 0x000020E5, 0x0000201E,
		0x00001F56, 0x00001E8F, 0x00001DC7, 0x00001CFF,
		0x00001C38, 0x00001B70, 0x00001AA8, 0x000019E0,
		0x00001918, 0x00001850, 0x00001787, 0x000016BF,
		0x000015F7, 0x0000152E, 0x00001466, 0x0000139E,
		0x000012D5, 0x0000120D, 0x00001144, 0x0000107B,
		0x00000FB3, 0x00000EEA, 0x00000E21, 0x00000D59,
		0x00000C90, 0x00000BC7, 0x00000AFE, 0x00000A35,
		0x0000096C, 0x000008A3, 0x000007DA, 0x00000711,
		0x00000648, 0x0000057F, 0x000004B6, 0x000003ED,
		0x00000324, 0x0000025B, 0x00000192, 0x000000C9,
		0x00000000, 0xFFFFFF37, 0xFFFFFE6E, 0xFFFFFDA5,
		0xFFFFFCDC, 0xFFFFFC13, 0xFFFFFB4A, 0xFFFFFA81,
		0xFFFFF9B8, 0xFFFFF8EF, 0xFFFFF826, 0xFFFFF75D,
		0xFFFFF694, 0xFFFFF5CB, 0xFFFFF502, 0xFFFFF439,
		0xFFFFF370, 0xFFFFF2A7, 0xFFFFF1DF, 0xFFFFF116,
		0xFFFFF04D, 0xFFFFEF85, 0xFFFFEEBC, 0xFFFFEDF3,
		0xFFFFED2B, 0xFFFFEC62, 0xFFFFEB9A, 0xFFFFEAD2,
		0xFFFFEA09, 0xFFFFE941, 0xFFFFE879, 0xFFFFE7B0,
		0xFFFFE6E8, 0xFFFFE620, 0xFFFFE558, 0xFFFFE490,
		0xFFFFE3C8, 0xFFFFE301, 0xFFFFE239, 0xFFFFE171,
		0xFFFFE0AA, 0xFFFFDFE2, 0xFFFFDF1B, 0xFFFFDE53,
		0xFFFFDD8C, 0xFFFFDCC5, 0xFFFFDBFE, 0xFFFFDB37,
		0xFFFFDA70, 0xFFFFD9A9, 0xFFFFD8E2, 0xFFFFD81C,
		0xFFFFD755, 0xFFFFD68F, 0xFFFFD5C8, 0xFFFFD502,
		0xFFFFD43C, 0xFFFFD376, 0xFFFFD2B0, 0xFFFFD1EA,
		0xFFFFD124, 0xFFFFD05F, 0xFFFFCF99, 0xFFFFCED4,
		0xFFFFCE0F, 0xFFFFCD49, 0xFFFFCC84, 0xFFFFCBC0,
		0xFFFFCAFB, 0xFFFFCA36, 0xFFFFC972, 0xFFFFC8AD,
		0xFFFFC7E9, 0xFFFFC725, 0xFFFFC661, 0xFFFFC59D,
		0xFFFFC4D9, 0xFFFFC416, 0xFFFFC352, 0xFFFFC28F,
		0xFFFFC1CC, 0xFFFFC109, 0xFFFFC046, 0xFFFFBF84,
		0xFFFFBEC1, 0xFFFFBDFF, 0xFFFFBD3D, 0xFFFFBC7B,
		0xFFFFBBB9, 0xFFFFBAF7, 0xFFFFBA35, 0xFFFFB974,
		0xFFFFB8B3, 0xFFFFB7F2, 0xFFFFB731, 0xFFFFB670,
		0xFFFFB5B0, 0xFFFFB4F0, 0xFFFFB42F, 0xFFFFB370,
		0xFFFFB2B0, 0xFFFFB1F0, 0xFFFFB131, 0xFFFFB072,
		0xFFFFAFB3, 0xFFFFAEF4, 0xFFFFAE35, 0xFFFFAD77,
		0xFFFFACB8, 0xFFFFABFA, 0xFFFFAB3D, 0xFFFFAA7F,
		0xFFFFA9C2, 0xFFFFA904, 0xFFFFA847, 0xFFFFA78B,
		0xFFFFA6CE, 0xFFFFA612, 0xFFFFA556, 0xFFFFA49A,
		0xFFFFA3DE, 0xFFFFA322, 0xFFFFA267, 0xFFFFA1AC,
		0xFFFFA0F1, 0xFFFFA037, 0xFFFF9F7C, 0xFFFF9EC2,
		0xFFFF9E08, 0xFFFF9D4F, 0xFFFF9C95, 0xFFFF9BDC,
		0xFFFF9B23, 0xFFFF9A6B, 0xFFFF99B2, 0xFFFF98FA,
		0xFFFF9842, 0xFFFF978A, 0xFFFF96D3, 0xFFFF961C,
		0xFFFF9565, 0xFFFF94AE, 0xFFFF93F8, 0xFFFF9342,
		0xFFFF928C, 0xFFFF91D6, 0xFFFF9121, 0xFFFF906C,
		0xFFFF8FB7, 0xFFFF8F02, 0xFFFF8E4E, 0xFFFF8D9A,
		0xFFFF8CE6, 0xFFFF8C33, 0xFFFF8B80, 0xFFFF8ACD,
		0xFFFF8A1A, 0xFFFF8968, 0xFFFF88B6, 0xFFFF8804,
		0xFFFF8753, 0xFFFF86A1, 0xFFFF85F0, 0xFFFF8540,
		0xFFFF8490, 0xFFFF83E0, 0xFFFF8330, 0xFFFF8281,
		0xFFFF81D1, 0xFFFF8123, 0xFFFF8074, 0xFFFF7FC6,
		0xFFFF7F18, 0xFFFF7E6B, 0xFFFF7DBD, 0xFFFF7D10,
		0xFFFF7C64, 0xFFFF7BB7, 0xFFFF7B0B, 0xFFFF7A60,
		0xFFFF79B4, 0xFFFF7909, 0xFFFF785F, 0xFFFF77B4,
		0xFFFF770A, 0xFFFF7661, 0xFFFF75B7, 0xFFFF750E,
		0xFFFF7466, 0xFFFF73BD, 0xFFFF7315, 0xFFFF726D,
		0xFFFF71C6, 0xFFFF711F, 0xFFFF7078, 0xFFFF6FD2,
		0xFFFF6F2C, 0xFFFF6E87, 0xFFFF6DE1, 0xFFFF6D3C,
		0xFFFF6C98, 0xFFFF6BF4, 0xFFFF6B50, 0xFFFF6AAC,
		0xFFFF6A09, 0xFFFF6966, 0xFFFF68C4, 0xFFFF6822,
		0xFFFF6780, 0xFFFF66DF, 0xFFFF663E, 0xFFFF659D,
		0xFFFF64FD, 0xFFFF645D, 0xFFFF63BE, 0xFFFF631F,
		0xFFFF6280, 0xFFFF61E2, 0xFFFF6144, 0xFFFF60A6,
		0xFFFF6009, 0xFFFF5F6C, 0xFFFF5ED0, 0xFFFF5E34,
		0xFFFF5D98, 0xFFFF5CFD, 0xFFFF5C62, 0xFFFF5BC8,
		0xFFFF5B2E, 0xFFFF5A94, 0xFFFF59FB, 0xFFFF5962,
		0xFFFF58CA, 0xFFFF5832, 0xFFFF579A, 0xFFFF5703,
		0xFFFF566C, 0xFFFF55D6, 0xFFFF553F, 0xFFFF54AA,
		0xFFFF5415, 0xFFFF5380, 0xFFFF52EC, 0xFFFF5258,
		0xFFFF51C4, 0xFFFF5131, 0xFFFF509E, 0xFFFF500C,
		0xFFFF4F7A, 0xFFFF4EE9, 0xFFFF4E58, 0xFFFF4DC7,
		0xFFFF4D37, 0xFFFF4CA8, 0xFFFF4C18, 0xFFFF4B89,
		0xFFFF4AFB, 0xFFFF4A6D, 0xFFFF49E0, 0xFFFF4953,
		0xFFFF48C6, 0xFFFF483A, 0xFFFF47AE, 0xFFFF4723,
		0xFFFF4698, 0xFFFF460D, 0xFFFF4583, 0xFFFF44FA,
		0xFFFF4471, 0xFFFF43E8, 0xFFFF4360, 0xFFFF42D8,
		0xFFFF4251, 0xFFFF41CA, 0xFFFF4144, 0xFFFF40BE,
		0xFFFF4039, 0xFFFF3FB4, 0xFFFF3F2F, 0xFFFF3EAB,
		0xFFFF3E28, 0xFFFF3DA4, 0xFFFF3D22, 0xFFFF3CA0,
		0xFFFF3C1E, 0xFFFF3B9D, 0xFFFF3B1C, 0xFFFF3A9C,
		0xFFFF3A1C, 0xFFFF399D, 0xFFFF391E, 0xFFFF389F,
		0xFFFF3822, 0xFFFF37A4, 0xFFFF3727, 0xFFFF36AB,
		0xFFFF362F, 0xFFFF35B3, 0xFFFF3539, 0xFFFF34BE,
		0xFFFF3444, 0xFFFF33CB, 0xFFFF3352, 0xFFFF32D9,
		0xFFFF3261, 0xFFFF31E9, 0xFFFF3172, 0xFFFF30FC,
		0xFFFF3086, 0xFFFF3010, 0xFFFF2F9B, 0xFFFF2F27,
		0xFFFF2EB3, 0xFFFF2E3F, 0xFFFF2DCC, 0xFFFF2D5A,
		0xFFFF2CE8, 0xFFFF2C76, 0xFFFF2C05, 0xFFFF2B95,
		0xFFFF2B25, 0xFFFF2AB5, 0xFFFF2A46, 0xFFFF29D8,
		0xFFFF296A, 0xFFFF28FD, 0xFFFF2890, 0xFFFF2824,
		0xFFFF27B8, 0xFFFF274C, 0xFFFF26E2, 0xFFFF2677,
		0xFFFF260E, 0xFFFF25A4, 0xFFFF253C, 0xFFFF24D4,
		0xFFFF246C, 0xFFFF2405, 0xFFFF239E, 0xFFFF2338,
		0xFFFF22D3, 0xFFFF226E, 0xFFFF2209, 0xFFFF21A5,
		0xFFFF2142, 0xFFFF20DF, 0xFFFF207D, 0xFFFF201B,
		0xFFFF1FBA, 0xFFFF1F59, 0xFFFF1EF9, 0xFFFF1E99,
		0xFFFF1E3A, 0xFFFF1DDC, 0xFFFF1D7E, 0xFFFF1D21,
		0xFFFF1CC4, 0xFFFF1C67, 0xFFFF1C0C, 0xFFFF1BB0,
		0xFFFF1B56, 0xFFFF1AFC, 0xFFFF1AA2, 0xFFFF1A49,
		0xFFFF19F0, 0xFFFF1999, 0xFFFF1941, 0xFFFF18EA,
		0xFFFF1894, 0xFFFF183E, 0xFFFF17E9, 0xFFFF1795,
		0xFFFF1741, 0xFFFF16ED, 0xFFFF169A, 0xFFFF1648,
		0xFFFF15F6, 0xFFFF15A5, 0xFFFF1555, 0xFFFF1504,
		0xFFFF14B5, 0xFFFF1466, 0xFFFF1418, 0xFFFF13CA,
		0xFFFF137D, 0xFFFF1330, 0xFFFF12E4, 0xFFFF1298,
		0xFFFF124D, 0xFFFF1203, 0xFFFF11B9, 0xFFFF1170,
		0xFFFF1127, 0xFFFF10DF, 0xFFFF1098, 0xFFFF1051,
		0xFFFF100B, 0xFFFF0FC5, 0xFFFF0F80, 0xFFFF0F3B,
		0xFFFF0EF7, 0xFFFF0EB4, 0xFFFF0E71, 0xFFFF0E2E,
		0xFFFF0DED, 0xFFFF0DAC, 0xFFFF0D6B, 0xFFFF0D2B,
		0xFFFF0CEC, 0xFFFF0CAD, 0xFFFF0C6F, 0xFFFF0C31,
		0xFFFF0BF4, 0xFFFF0BB8, 0xFFFF0B7C, 0xFFFF0B41,
		0xFFFF0B06, 0xFFFF0ACC, 0xFFFF0A92, 0xFFFF0A5A,
		0xFFFF0A21, 0xFFFF09EA, 0xFFFF09B2, 0xFFFF097C,
		0xFFFF0946, 0xFFFF0911, 0xFFFF08DC, 0xFFFF08A8,
		0xFFFF0874, 0xFFFF0841, 0xFFFF080F, 0xFFFF07DD,
		0xFFFF07AC, 0xFFFF077B, 0xFFFF074C, 0xFFFF071C,
		0xFFFF06ED, 0xFFFF06BF, 0xFFFF0692, 0xFFFF0665,
		0xFFFF0638, 0xFFFF060D, 0xFFFF05E1, 0xFFFF05B7,
		0xFFFF058D, 0xFFFF0564, 0xFFFF053B, 0xFFFF0513,
		0xFFFF04EB, 0xFFFF04C4, 0xFFFF049E, 0xFFFF0478,
		0xFFFF0453, 0xFFFF042F, 0xFFFF040B, 0xFFFF03E8,
		0xFFFF03C5, 0xFFFF03A3, 0xFFFF0381, 0xFFFF0360,
		0xFFFF0340, 0xFFFF0321, 0xFFFF0302, 0xFFFF02E3,
		0xFFFF02C5, 0xFFFF02A8, 0xFFFF028C, 0xFFFF0270,
		0xFFFF0254, 0xFFFF0239, 0xFFFF021F, 0xFFFF0206,
		0xFFFF01ED, 0xFFFF01D5, 0xFFFF01BD, 0xFFFF01A6,
		0xFFFF018F, 0xFFFF0179, 0xFFFF0164, 0xFFFF0150,
		0xFFFF013C, 0xFFFF0128, 0xFFFF0115, 0xFFFF0103,
		0xFFFF00F2, 0xFFFF00E1, 0xFFFF00D0, 0xFFFF00C1,
		0xFFFF00B2, 0xFFFF00A3, 0xFFFF0095, 0xFFFF0088,
		0xFFFF007B, 0xFFFF006F, 0xFFFF0064, 0xFFFF0059,
		0xFFFF004F, 0xFFFF0045, 0xFFFF003C, 0xFFFF0034,
		0xFFFF002C, 0xFFFF0025, 0xFFFF001F, 0xFFFF0019,
		0xFFFF0014, 0xFFFF000F, 0xFFFF000B, 0xFFFF0008,
		0xFFFF0005, 0xFFFF0003, 0xFFFF0001, 0xFFFF0000,
		0xFFFF0000, 0xFFFF0000, 0xFFFF0001, 0xFFFF0003,
		0xFFFF0005, 0xFFFF0008, 0xFFFF000B, 0xFFFF000F,
		0xFFFF0014, 0xFFFF0019, 0xFFFF001F, 0xFFFF0025,
		0xFFFF002C, 0xFFFF0034, 0xFFFF003C, 0xFFFF0045,
		0xFFFF004F, 0xFFFF0059, 0xFFFF0064, 0xFFFF006F,
		0xFFFF007B, 0xFFFF0088, 0xFFFF0095, 0xFFFF00A3,
		0xFFFF00B2, 0xFFFF00C1, 0xFFFF00D0, 0xFFFF00E1,
		0xFFFF00F2, 0xFFFF0103, 0xFFFF0115, 0xFFFF0128,
		0xFFFF013C, 0xFFFF0150, 0xFFFF0164, 0xFFFF0179,
		0xFFFF018F, 0xFFFF01A6, 0xFFFF01BD, 0xFFFF01D5,
		0xFFFF01ED, 0xFFFF0206, 0xFFFF021F, 0xFFFF0239,
		0xFFFF0254, 0xFFFF0270, 0xFFFF028C, 0xFFFF02A8,
		0xFFFF02C5, 0xFFFF02E3, 0xFFFF0302, 0xFFFF0321,
		0xFFFF0340, 0xFFFF0360, 0xFFFF0381, 0xFFFF03A3,
		0xFFFF03C5, 0xFFFF03E8, 0xFFFF040B, 0xFFFF042F,
		0xFFFF0453, 0xFFFF0478, 0xFFFF049E, 0xFFFF04C4,
		0xFFFF04EB, 0xFFFF0513, 0xFFFF053B, 0xFFFF0564,
		0xFFFF058D, 0xFFFF05B7, 0xFFFF05E1, 0xFFFF060D,
		0xFFFF0638, 0xFFFF0665, 0xFFFF0692, 0xFFFF06BF,
		0xFFFF06ED, 0xFFFF071C, 0xFFFF074C, 0xFFFF077B,
		0xFFFF07AC, 0xFFFF07DD, 0xFFFF080F, 0xFFFF0841,
		0xFFFF0874, 0xFFFF08A8, 0xFFFF08DC, 0xFFFF0911,
		0xFFFF0946, 0xFFFF097C, 0xFFFF09B2, 0xFFFF09EA,
		0xFFFF0A21, 0xFFFF0A5A, 0xFFFF0A92, 0xFFFF0ACC,
		0xFFFF0B06, 0xFFFF0B41, 0xFFFF0B7C, 0xFFFF0BB8,
		0xFFFF0BF4, 0xFFFF0C31, 0xFFFF0C6F, 0xFFFF0CAD,
		0xFFFF0CEC, 0xFFFF0D2B, 0xFFFF0D6B, 0xFFFF0DAC,
		0xFFFF0DED, 0xFFFF0E2E, 0xFFFF0E71, 0xFFFF0EB4,
		0xFFFF0EF7, 0xFFFF0F3B, 0xFFFF0F80, 0xFFFF0FC5,
		0xFFFF100B, 0xFFFF1051, 0xFFFF1098, 0xFFFF10DF,
		0xFFFF1127, 0xFFFF1170, 0xFFFF11B9, 0xFFFF1203,
		0xFFFF124D, 0xFFFF1298, 0xFFFF12E4, 0xFFFF1330,
		0xFFFF137D, 0xFFFF13CA, 0xFFFF1418, 0xFFFF1466,
		0xFFFF14B5, 0xFFFF1504, 0xFFFF1555, 0xFFFF15A5,
		0xFFFF15F6, 0xFFFF1648, 0xFFFF169A, 0xFFFF16ED,
		0xFFFF1741, 0xFFFF1795, 0xFFFF17E9, 0xFFFF183E,
		0xFFFF1894, 0xFFFF18EA, 0xFFFF1941, 0xFFFF1999,
		0xFFFF19F0, 0xFFFF1A49, 0xFFFF1AA2, 0xFFFF1AFC,
		0xFFFF1B56, 0xFFFF1BB0, 0xFFFF1C0C, 0xFFFF1C67,
		0xFFFF1CC4, 0xFFFF1D21, 0xFFFF1D7E, 0xFFFF1DDC,
		0xFFFF1E3A, 0xFFFF1E99, 0xFFFF1EF9, 0xFFFF1F59,
		0xFFFF1FBA, 0xFFFF201B, 0xFFFF207D, 0xFFFF20DF,
		0xFFFF2142, 0xFFFF21A5, 0xFFFF2209, 0xFFFF226E,
		0xFFFF22D3, 0xFFFF2338, 0xFFFF239E, 0xFFFF2405,
		0xFFFF246C, 0xFFFF24D4, 0xFFFF253C, 0xFFFF25A4,
		0xFFFF260E, 0xFFFF2677, 0xFFFF26E2, 0xFFFF274C,
		0xFFFF27B8, 0xFFFF2824, 0xFFFF2890, 0xFFFF28FD,
		0xFFFF296A, 0xFFFF29D8, 0xFFFF2A46, 0xFFFF2AB5,
		0xFFFF2B25, 0xFFFF2B95, 0xFFFF2C05, 0xFFFF2C76,
		0xFFFF2CE8, 0xFFFF2D5A, 0xFFFF2DCC, 0xFFFF2E3F,
		0xFFFF2EB3, 0xFFFF2F27, 0xFFFF2F9B, 0xFFFF3010,
		0xFFFF3086, 0xFFFF30FC, 0xFFFF3172, 0xFFFF31E9,
		0xFFFF3261, 0xFFFF32D9, 0xFFFF3352, 0xFFFF33CB,
		0xFFFF3444, 0xFFFF34BE, 0xFFFF3539, 0xFFFF35B3,
		0xFFFF362F, 0xFFFF36AB, 0xFFFF3727, 0xFFFF37A4,
		0xFFFF3822, 0xFFFF389F, 0xFFFF391E, 0xFFFF399D,
		0xFFFF3A1C, 0xFFFF3A9C, 0xFFFF3B1C, 0xFFFF3B9D,
		0xFFFF3C1E, 0xFFFF3CA0, 0xFFFF3D22, 0xFFFF3DA4,
		0xFFFF3E28, 0xFFFF3EAB, 0xFFFF3F2F, 0xFFFF3FB4,
		0xFFFF4039, 0xFFFF40BE, 0xFFFF4144, 0xFFFF41CA,
		0xFFFF4251, 0xFFFF42D8, 0xFFFF4360, 0xFFFF43E8,
		0xFFFF4471, 0xFFFF44FA, 0xFFFF4583, 0xFFFF460D,
		0xFFFF4698, 0xFFFF4723, 0xFFFF47AE, 0xFFFF483A,
		0xFFFF48C6, 0xFFFF4953, 0xFFFF49E0, 0xFFFF4A6D,
		0xFFFF4AFB, 0xFFFF4B89, 0xFFFF4C18, 0xFFFF4CA8,
		0xFFFF4D37, 0xFFFF4DC7, 0xFFFF4E58, 0xFFFF4EE9,
		0xFFFF4F7A, 0xFFFF500C, 0xFFFF509E, 0xFFFF5131,
		0xFFFF51C4, 0xFFFF5258, 0xFFFF52EC, 0xFFFF5380,
		0xFFFF5415, 0xFFFF54AA, 0xFFFF553F, 0xFFFF55D6,
		0xFFFF566C, 0xFFFF5703, 0xFFFF579A, 0xFFFF5832,
		0xFFFF58CA, 0xFFFF5962, 0xFFFF59FB, 0xFFFF5A94,
		0xFFFF5B2E, 0xFFFF5BC8, 0xFFFF5C62, 0xFFFF5CFD,
		0xFFFF5D98, 0xFFFF5E34, 0xFFFF5ED0, 0xFFFF5F6C,
		0xFFFF6009, 0xFFFF60A6, 0xFFFF6144, 0xFFFF61E2,
		0xFFFF6280, 0xFFFF631F, 0xFFFF63BE, 0xFFFF645D,
		0xFFFF64FD, 0xFFFF659D, 0xFFFF663E, 0xFFFF66DF,
		0xFFFF6780, 0xFFFF6822, 0xFFFF68C4, 0xFFFF6966,
		0xFFFF6A09, 0xFFFF6AAC, 0xFFFF6B50, 0xFFFF6BF4,
		0xFFFF6C98, 0xFFFF6D3C, 0xFFFF6DE1, 0xFFFF6E87,
		0xFFFF6F2C, 0xFFFF6FD2, 0xFFFF7078, 0xFFFF711F,
		0xFFFF71C6, 0xFFFF726D, 0xFFFF7315, 0xFFFF73BD,
		0xFFFF7466, 0xFFFF750E, 0xFFFF75B7, 0xFFFF7661,
		0xFFFF770A, 0xFFFF77B4, 0xFFFF785F, 0xFFFF7909,
		0xFFFF79B4, 0xFFFF7A60, 0xFFFF7B0B, 0xFFFF7BB7,
		0xFFFF7C64, 0xFFFF7D10, 0xFFFF7DBD, 0xFFFF7E6B,
		0xFFFF7F18, 0xFFFF7FC6, 0xFFFF8074, 0xFFFF8123,
		0xFFFF81D1, 0xFFFF8281, 0xFFFF8330, 0xFFFF83E0,
		0xFFFF8490, 0xFFFF8540, 0xFFFF85F0, 0xFFFF86A1,
		0xFFFF8753, 0xFFFF8804, 0xFFFF88B6, 0xFFFF8968,
		0xFFFF8A1A, 0xFFFF8ACD, 0xFFFF8B80, 0xFFFF8C33,
		0xFFFF8CE6, 0xFFFF8D9A, 0xFFFF8E4E, 0xFFFF8F02,
		0xFFFF8FB7, 0xFFFF906C, 0xFFFF9121, 0xFFFF91D6,
		0xFFFF928C, 0xFFFF9342, 0xFFFF93F8, 0xFFFF94AE,
		0xFFFF9565, 0xFFFF961C, 0xFFFF96D3, 0xFFFF978A,
		0xFFFF9842, 0xFFFF98FA, 0xFFFF99B2, 0xFFFF9A6B,
		0xFFFF9B23, 0xFFFF9BDC, 0xFFFF9C95, 0xFFFF9D4F,
		0xFFFF9E08, 0xFFFF9EC2, 0xFFFF9F7C, 0xFFFFA037,
		0xFFFFA0F1, 0xFFFFA1AC, 0xFFFFA267, 0xFFFFA322,
		0xFFFFA3DE, 0xFFFFA49A, 0xFFFFA556, 0xFFFFA612,
		0xFFFFA6CE, 0xFFFFA78B, 0xFFFFA847, 0xFFFFA904,
		0xFFFFA9C2, 0xFFFFAA7F, 0xFFFFAB3D, 0xFFFFABFA,
		0xFFFFACB8, 0xFFFFAD77, 0xFFFFAE35, 0xFFFFAEF4,
		0xFFFFAFB3, 0xFFFFB072, 0xFFFFB131, 0xFFFFB1F0,
		0xFFFFB2B0, 0xFFFFB370, 0xFFFFB42F, 0xFFFFB4F0,
		0xFFFFB5B0, 0xFFFFB670, 0xFFFFB731, 0xFFFFB7F2,
		0xFFFFB8B3, 0xFFFFB974, 0xFFFFBA35, 0xFFFFBAF7,
		0xFFFFBBB9, 0xFFFFBC7B, 0xFFFFBD3D, 0xFFFFBDFF,
		0xFFFFBEC1, 0xFFFFBF84, 0xFFFFC046, 0xFFFFC109,
		0xFFFFC1CC, 0xFFFFC28F, 0xFFFFC352, 0xFFFFC416,
		0xFFFFC4D9, 0xFFFFC59D, 0xFFFFC661, 0xFFFFC725,
		0xFFFFC7E9, 0xFFFFC8AD, 0xFFFFC972, 0xFFFFCA36,
		0xFFFFCAFB, 0xFFFFCBC0, 0xFFFFCC84, 0xFFFFCD49,
		0xFFFFCE0F, 0xFFFFCED4, 0xFFFFCF99, 0xFFFFD05F,
		0xFFFFD124, 0xFFFFD1EA, 0xFFFFD2B0, 0xFFFFD376,
		0xFFFFD43C, 0xFFFFD502, 0xFFFFD5C8, 0xFFFFD68F,
		0xFFFFD755, 0xFFFFD81C, 0xFFFFD8E2, 0xFFFFD9A9,
		0xFFFFDA70, 0xFFFFDB37, 0xFFFFDBFE, 0xFFFFDCC5,
		0xFFFFDD8C, 0xFFFFDE53, 0xFFFFDF1B, 0xFFFFDFE2,
		0xFFFFE0AA, 0xFFFFE171, 0xFFFFE239, 0xFFFFE301,
		0xFFFFE3C8, 0xFFFFE490, 0xFFFFE558, 0xFFFFE620,
		0xFFFFE6E8, 0xFFFFE7B0, 0xFFFFE879, 0xFFFFE941,
		0xFFFFEA09, 0xFFFFEAD2, 0xFFFFEB9A, 0xFFFFEC62,
		0xFFFFED2B, 0xFFFFEDF3, 0xFFFFEEBC, 0xFFFFEF85,
		0xFFFFF04D, 0xFFFFF116, 0xFFFFF1DF, 0xFFFFF2A7,
		0xFFFFF370, 0xFFFFF439, 0xFFFFF502, 0xFFFFF5CB,
		0xFFFFF694, 0xFFFFF75D, 0xFFFFF826, 0xFFFFF8EF,
		0xFFFFF9B8, 0xFFFFFA81, 0xFFFFFB4A, 0xFFFFFC13,
		0xFFFFFCDC, 0xFFFFFDA5, 0xFFFFFE6E, 0xFFFFFF37,
		0x00000000, 0x000000C9, 0x00000192, 0x0000025B,
		0x00000324, 0x000003ED, 0x000004B6, 0x0000057F,
		0x00000648, 0x00000711, 0x000007DA, 0x000008A3,
		0x0000096C, 0x00000A35, 0x00000AFE, 0x00000BC7,
		0x00000C90, 0x00000D59, 0x00000E21, 0x00000EEA,
		0x00000FB3, 0x0000107B, 0x00001144, 0x0000120D,
		0x000012D5, 0x0000139E, 0x00001466, 0x0000152E,
		0x000015F7, 0x000016BF, 0x00001787, 0x00001850,
		0x00001918, 0x000019E0, 0x00001AA8, 0x00001B70,
		0x00001C38, 0x00001CFF, 0x00001DC7, 0x00001E8F,
		0x00001F56, 0x0000201E, 0x000020E5, 0x000021AD,
		0x00002274, 0x0000233B, 0x00002402, 0x000024C9,
		0x00002590, 0x00002657, 0x0000271E, 0x000027E4,
		0x000028AB, 0x00002971, 0x00002A38, 0x00002AFE,
		0x00002BC4, 0x00002C8A, 0x00002D50, 0x00002E16,
		0x00002EDC, 0x00002FA1, 0x00003067, 0x0000312C,
		0x000031F1, 0x000032B7, 0x0000337C, 0x00003440,
		0x00003505, 0x000035CA, 0x0000368E, 0x00003753,
		0x00003817, 0x000038DB, 0x0000399F, 0x00003A63,
		0x00003B27, 0x00003BEA, 0x00003CAE, 0x00003D71,
		0x00003E34, 0x00003EF7, 0x00003FBA, 0x0000407C,
		0x0000413F, 0x00004201, 0x000042C3, 0x00004385,
		0x00004447, 0x00004509, 0x000045CB, 0x0000468C,
		0x0000474D, 0x0000480E, 0x000048CF, 0x00004990,
		0x00004A50, 0x00004B10, 0x00004BD1, 0x00004C90,
		0x00004D50, 0x00004E10, 0x00004ECF, 0x00004F8E,
		0x0000504D, 0x0000510C, 0x000051CB, 0x00005289,
		0x00005348, 0x00005406, 0x000054C3, 0x00005581,
		0x0000563E, 0x000056FC, 0x000057B9, 0x00005875,
		0x00005932, 0x000059EE, 0x00005AAA, 0x00005B66,
		0x00005C22, 0x00005CDE, 0x00005D99, 0x00005E54,
		0x00005F0F, 0x00005FC9, 0x00006084, 0x0000613E,
		0x000061F8, 0x000062B1, 0x0000636B, 0x00006424,
		0x000064DD, 0x00006595, 0x0000664E, 0x00006706,
		0x000067BE, 0x00006876, 0x0000692D, 0x000069E4,
		0x00006A9B, 0x00006B52, 0x00006C08, 0x00006CBE,
		0x00006D74, 0x00006E2A, 0x00006EDF, 0x00006F94,
		0x00007049, 0x000070FE, 0x000071B2, 0x00007266,
		0x0000731A, 0x000073CD, 0x00007480, 0x00007533,
		0x000075E6, 0x00007698, 0x0000774A, 0x000077FC,
		0x000078AD, 0x0000795F, 0x00007A10, 0x00007AC0,
		0x00007B70, 0x00007C20, 0x00007CD0, 0x00007D7F,
		0x00007E2F, 0x00007EDD, 0x00007F8C, 0x0000803A,
		0x000080E8, 0x00008195, 0x00008243, 0x000082F0,
		0x0000839C, 0x00008449, 0x000084F5, 0x000085A0,
		0x0000864C, 0x000086F7, 0x000087A1, 0x0000884C,
		0x000088F6, 0x0000899F, 0x00008A49, 0x00008AF2,
		0x00008B9A, 0x00008C43, 0x00008CEB, 0x00008D93,
		0x00008E3A, 0x00008EE1, 0x00008F88, 0x0000902E,
		0x000090D4, 0x00009179, 0x0000921F, 0x000092C4,
		0x00009368, 0x0000940C, 0x000094B0, 0x00009554,
		0x000095F7, 0x0000969A, 0x0000973C, 0x000097DE,
		0x00009880, 0x00009921, 0x000099C2, 0x00009A63,
		0x00009B03, 0x00009BA3, 0x00009C42, 0x00009CE1,
		0x00009D80, 0x00009E1E, 0x00009EBC, 0x00009F5A,
		0x00009FF7, 0x0000A094, 0x0000A130, 0x0000A1CC,
		0x0000A268, 0x0000A303, 0x0000A39E, 0x0000A438,
		0x0000A4D2, 0x0000A56C, 0x0000A605, 0x0000A69E,
		0x0000A736, 0x0000A7CE, 0x0000A866, 0x0000A8FD,
		0x0000A994, 0x0000AA2A, 0x0000AAC1, 0x0000AB56,
		0x0000ABEB, 0x0000AC80, 0x0000AD14, 0x0000ADA8,
		0x0000AE3C, 0x0000AECF, 0x0000AF62, 0x0000AFF4,
		0x0000B086, 0x0000B117, 0x0000B1A8, 0x0000B239,
		0x0000B2C9, 0x0000B358, 0x0000B3E8, 0x0000B477,
		0x0000B505, 0x0000B593, 0x0000B620, 0x0000B6AD,
		0x0000B73A, 0x0000B7C6, 0x0000B852, 0x0000B8DD,
		0x0000B968, 0x0000B9F3, 0x0000BA7D, 0x0000BB06,
		0x0000BB8F, 0x0000BC18, 0x0000BCA0, 0x0000BD28,
		0x0000BDAF, 0x0000BE36, 0x0000BEBC, 0x0000BF42,
		0x0000BFC7, 0x0000C04C, 0x0000C0D1, 0x0000C155,
		0x0000C1D8, 0x0000C25C, 0x0000C2DE, 0x0000C360,
		0x0000C3E2, 0x0000C463, 0x0000C4E4, 0x0000C564,
		0x0000C5E4, 0x0000C663, 0x0000C6E2, 0x0000C761,
		0x0000C7DE, 0x0000C85C, 0x0000C8D9, 0x0000C955,
		0x0000C9D1, 0x0000CA4D, 0x0000CAC7, 0x0000CB42,
		0x0000CBBC, 0x0000CC35, 0x0000CCAE, 0x0000CD27,
		0x0000CD9F, 0x0000CE17, 0x0000CE8E, 0x0000CF04,
		0x0000CF7A, 0x0000CFF0, 0x0000D065, 0x0000D0D9,
		0x0000D14D, 0x0000D1C1, 0x0000D234, 0x0000D2A6,
		0x0000D318, 0x0000D38A, 0x0000D3FB, 0x0000D46B,
		0x0000D4DB, 0x0000D54B, 0x0000D5BA, 0x0000D628,
		0x0000D696, 0x0000D703, 0x0000D770, 0x0000D7DC,
		0x0000D848, 0x0000D8B4, 0x0000D91E, 0x0000D989,
		0x0000D9F2, 0x0000DA5C, 0x0000DAC4, 0x0000DB2C,
		0x0000DB94, 0x0000DBFB, 0x0000DC62, 0x0000DCC8,
		0x0000DD2D, 0x0000DD92, 0x0000DDF7, 0x0000DE5B,
		0x0000DEBE, 0x0000DF21, 0x0000DF83, 0x0000DFE5,
		0x0000E046, 0x0000E0A7, 0x0000E107, 0x0000E167,
		0x0000E1C6, 0x0000E224, 0x0000E282, 0x0000E2DF,
		0x0000E33C, 0x0000E399, 0x0000E3F4, 0x0000E450,
		0x0000E4AA, 0x0000E504, 0x0000E55E, 0x0000E5B7,
		0x0000E610, 0x0000E667, 0x0000E6BF, 0x0000E716,
		0x0000E76C, 0x0000E7C2, 0x0000E817, 0x0000E86B,
		0x0000E8BF, 0x0000E913, 0x0000E966, 0x0000E9B8,
		0x0000EA0A, 0x0000EA5B, 0x0000EAAB, 0x0000EAFC,
		0x0000EB4B, 0x0000EB9A, 0x0000EBE8, 0x0000EC36,
		0x0000EC83, 0x0000ECD0, 0x0000ED1C, 0x0000ED68,
		0x0000EDB3, 0x0000EDFD, 0x0000EE47, 0x0000EE90,
		0x0000EED9, 0x0000EF21, 0x0000EF68, 0x0000EFAF,
		0x0000EFF5, 0x0000F03B, 0x0000F080, 0x0000F0C5,
		0x0000F109, 0x0000F14C, 0x0000F18F, 0x0000F1D2,
		0x0000F213, 0x0000F254, 0x0000F295, 0x0000F2D5,
		0x0000F314, 0x0000F353, 0x0000F391, 0x0000F3CF,
		0x0000F40C, 0x0000F448, 0x0000F484, 0x0000F4BF,
		0x0000F4FA, 0x0000F534, 0x0000F56E, 0x0000F5A6,
		0x0000F5DF, 0x0000F616, 0x0000F64E, 0x0000F684,
		0x0000F6BA, 0x0000F6EF, 0x0000F724, 0x0000F758,
		0x0000F78C, 0x0000F7BF, 0x0000F7F1, 0x0000F823,
		0x0000F854, 0x0000F885, 0x0000F8B4, 0x0000F8E4,
		0x0000F913, 0x0000F941, 0x0000F96E, 0x0000F99B,
		0x0000F9C8, 0x0000F9F3, 0x0000FA1F, 0x0000FA49,
		0x0000FA73, 0x0000FA9C, 0x0000FAC5, 0x0000FAED,
		0x0000FB15, 0x0000FB3C, 0x0000FB62, 0x0000FB88,
		0x0000FBAD, 0x0000FBD1, 0x0000FBF5, 0x0000FC18,
		0x0000FC3B, 0x0000FC5D, 0x0000FC7F, 0x0000FCA0,
		0x0000FCC0, 0x0000FCDF, 0x0000FCFE, 0x0000FD1D,
		0x0000FD3B, 0x0000FD58, 0x0000FD74, 0x0000FD90,
		0x0000FDAC, 0x0000FDC7, 0x0000FDE1, 0x0000FDFA,
		0x0000FE13, 0x0000FE2B, 0x0000FE43, 0x0000FE5A,
		0x0000FE71, 0x0000FE87, 0x0000FE9C, 0x0000FEB0,
		0x0000FEC4, 0x0000FED8, 0x0000FEEB, 0x0000FEFD,
		0x0000FF0E, 0x0000FF1F, 0x0000FF30, 0x0000FF3F,
		0x0000FF4E, 0x0000FF5D, 0x0000FF6B, 0x0000FF78,
		0x0000FF85, 0x0000FF91, 0x0000FF9C, 0x0000FFA7,
		0x0000FFB1, 0x0000FFBB, 0x0000FFC4, 0x0000FFCC,
		0x0000FFD4, 0x0000FFDB, 0x0000FFE1, 0x0000FFE7,
		0x0000FFEC, 0x0000FFF1, 0x0000FFF5, 0x0000FFF8,
		0x0000FFFB, 0x0000FFFD, 0x0000FFFF, 0x00010000
};

Bit8u* x_DWORD_DDF50_texture_adresses[0x100] /*= { 0,32 }*/; // weak
//2aef50
//int x_DWORD_DDF54 = 32; // weak
Bit16u x_WORD_DE350[0x101] = { //speed table3//2af350 tang?
	0x0000,0x0001,0x0002,0x0003,0x0005,0x0006,0x0007,0x0008,
0x000A,0x000B,0x000C,0x000D,0x000F,0x0010,0x0011,0x0013,
0x0014,0x0015,0x0016,0x0018,0x0019,0x001A,0x001B,0x001D,
0x001E,0x001F,0x0020,0x0022,0x0023,0x0024,0x0026,0x0027,
0x0028,0x0029,0x002B,0x002C,0x002D,0x002E,0x0030,0x0031,
0x0032,0x0033,0x0035,0x0036,0x0037,0x0038,0x0039,0x003B,
0x003C,0x003D,0x003E,0x0040,0x0041,0x0042,0x0043,0x0044,
0x0046,0x0047,0x0048,0x0049,0x004B,0x004C,0x004D,0x004E,
0x004F,0x0051,0x0052,0x0053,0x0054,0x0055,0x0057,0x0058,
0x0059,0x005A,0x005B,0x005C,0x005E,0x005F,0x0060,0x0061,
0x0062,0x0063,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,
0x006B,0x006D,0x006E,0x006F,0x0070,0x0071,0x0072,0x0073,
0x0074,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,
0x007D,0x007E,0x007F,0x0081,0x0082,0x0083,0x0084,0x0085,
0x0086,0x0087,0x0088,0x0089,0x008A,0x008B,0x008C,0x008D,
0x008E,0x008F,0x0090,0x0091,0x0093,0x0094,0x0095,0x0096,
0x0097,0x0098,0x0099,0x009A,0x009B,0x009C,0x009D,0x009E,
0x009F,0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,
0x00A7,0x00A7,0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,
0x00AE,0x00AF,0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,
0x00B6,0x00B6,0x00B7,0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,
0x00BD,0x00BE,0x00BF,0x00BF,0x00C0,0x00C1,0x00C2,0x00C3,
0x00C4,0x00C5,0x00C6,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,
0x00CB,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,0x00D0,0x00D0,
0x00D1,0x00D2,0x00D3,0x00D4,0x00D4,0x00D5,0x00D6,0x00D7,
0x00D8,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DC,0x00DD,
0x00DE,0x00DF,0x00DF,0x00E0,0x00E1,0x00E2,0x00E2,0x00E3,
0x00E4,0x00E5,0x00E5,0x00E6,0x00E7,0x00E8,0x00E8,0x00E9,
0x00EA,0x00EB,0x00EB,0x00EC,0x00ED,0x00ED,0x00EE,0x00EF,
0x00EF,0x00F0,0x00F1,0x00F2,0x00F2,0x00F3,0x00F4,0x00F4,
0x00F5,0x00F6,0x00F6,0x00F7,0x00F8,0x00F8,0x00F9,0x00FA,
0x00FA,0x00FB,0x00FC,0x00FC,0x00FD,0x00FE,0x00FE,0x00FF,
0x0100
}; // weak
Bit8u* x_DWORD_DE554 = 0; // weak
Bit8u* x_DWORD_DE558 = 0; // weak - fix to array?
int x_DWORD_DE55C_ActTexture = 0; // weak
int x_DWORD_DE560_ScreenWidth = 0; // weak //screen X
int x_DWORD_DE564 = 0; // weak
int x_DWORD_DE568 = 0; // weak
Bit8u unk_DE56Cx[0x400000]; // weak//number of polygon
char x_BYTE_E126C = 112; // weak
char x_BYTE_E126D = 0; // weak
char x_BYTE_E1274 = 0; // weak
char x_BYTE_E1275 = 0; // weak
Bit16s x_WORD_E1276 = -1; // weak
int16_t x_WORD_E1278 = 0; // weak
int16_t x_WORD_E127A = 8; // weak
Bit8u* x_DWORD_E127E = 0; // weak
Bit8u* x_DWORD_E1282 = 0; // weak
Bit8u* x_DWORD_E1286[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // idb
int16_t x_WORD_E12A6 = 0; // weak
int16_t x_WORD_E12A8 = 0; // weak
Bit8u* x_DWORD_E12AA = 0; // weak
Bit8u* x_DWORD_E12AE[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // idb
char x_BYTE_E12CE[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // idb
//char aTester[7] = "TESTER"; // weak
char x_BYTE_E12EC = 0; // weak
char x_BYTE_E12ED = 0; // weak
Bit8u* x_DWORD_E12F4 = 0; // weak
int16_t x_WORD_E12FC = 1; // weak
int16_t x_WORD_E12FE = 0; // weak
int x_DWORD_E1300 = 0; // weak
int x_DWORD_E1304 = 0; // weak
int x_DWORD_E1308 = 0; // weak
int16_t x_WORD_E130C = 0; // weak
int16_t x_WORD_E130E = 0; // weak
int16_t x_WORD_E1310 = 0; // weak
int16_t x_WORD_E1312ar[2] = {0,0}; // weak
int16_t x_WORD_E1316 = 0; // weak
int16_t x_WORD_E131A = 0; // weak
char x_BYTE_E131C[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // idb
char x_BYTE_E1324 = 50; // weak



char x_BYTE_E1711[55] = {
0x36,0x36,0x36,
0x00,0x26,0x00,
0x2D,0x00,0x00,
0x23,0x00,0x21,
0x3F,0x0F,0x28,
0x16,0x0F,0x00,
0x00,0x00,0x17,
0x3F,0x1F,0x00,
0x00,0x00,0x00,
0x22,0x22,0x22,//27
0x00,0x16,0x00,
0x1B,0x00,0x00,
0x14,0x00,0x16,
0x31,0x00,0x19,
0x0E,0x0A,0x00,
0x00,0x00,0x1E,
0x3C,0x1C,0x00,
0x00,0x00,0x00,
0x00
}; // weak//2b2711

type_str_unk_E1748 unk_E1748x[5] = {
	{0,17, 159, 1, 1,8},
	{0,531,156, 9, 9,16},
	{0,154,308, 17,17,25},
	{0,226,308, 26,26,34},
	{0,0,0,0,0,0}
};

type_str_unk_E1748 unk_E1784x[3] = {
	{0,299, 306, 1, 1,8},
	{0,348, 118, 9, 9,16},
	{0,0,0,0,0,0}
};

/*
v+0 - number of frame
v+2 - function
v+3 - parameter
*/
Bit8u unk_E17CC_0[0x160] = {//intro events(draw text and etc)
0x00,0x00,0x45,0x04,0x00,0x00,0x00,//0
0x00,0x00,0x56,0x00,0x00,0x00,0x00,//1
0x00,0x00,0x57,0x00,0x00,0x00,0x00,//2
0x00,0x00,0x55,0x10,0x00,0x00,0x00,//3
0x00,0x00,0x41,0x0A,0x00,0x00,0x00,//4
0x02,0x00,0x44,0x05,0x00,0x00,0x00,//5
0x05,0x00,0x53,0x03,0x00,0x00,0x00,//6
0x48,0x00,0x57,0x00,0x00,0x00,0x00,//7
0x48,0x00,0x55,0x11,0x00,0x00,0x00,//8
0x87,0x00,0x57,0x00,0x00,0x00,0x00,//9
0x87,0x00,0x55,0x12,0x00,0x00,0x00,//10
0xBD,0x00,0x41,0xF0,0x00,0x00,0x00,//11
0xBE,0x00,0x41,0x05,0x00,0x00,0x00,//12
0xBE,0x00,0x48,0x01,0x00,0x00,0x00,//13
0xBE,0x00,0x50,0x01,0x00,0x00,0x00,//14
0x04,0x01,0x53,0x02,0x00,0x00,0x00,//15
0x5E,0x01,0x53,0x0B,0x00,0x00,0x00,//16
0x6D,0x01,0x53,0x0D,0x00,0x00,0x00,//17
0x90,0x01,0x46,0x01,0x00,0x00,0x00,//18
0x94,0x01,0x41,0x07,0x00,0x00,0x00,//19
0x9A,0x01,0x53,0x06,0x00,0x00,0x00,//20
0x9A,0x01,0x57,0x00,0x00,0x00,0x00,//21
0x9A,0x01,0x55,0x13,0x00,0x00,0x00,//22
0xFE,0x01,0x53,0x04,0x00,0x00,0x00,
0xFE,0x01,0x57,0x00,0x00,0x00,0x00,
0xFE,0x01,0x55,0x14,0x00,0x00,0x00,
0x46,0x02,0x53,0x09,0x00,0x00,0x00,
0x4D,0x02,0x41,0x05,0x00,0x00,0x00,
0x67,0x02,0x53,0x0A,0x00,0x00,0x00,
0xBC,0x02,0x53,0x08,0x00,0x00,0x00,
0xBC,0x02,0x57,0x00,0x00,0x00,0x00,
0xBC,0x02,0x55,0x15,0x00,0x00,0x00,
0xCD,0x02,0x53,0x0C,0x00,0x00,0x00,
0x22,0x03,0x48,0x0E,0x00,0x00,0x00,
0x22,0x03,0x4F,0x0E,0x00,0x00,0x00,
0x8E,0x03,0x41,0x09,0x00,0x00,0x00,
0xFD,0x03,0x41,0x05,0x00,0x00,0x00,
0xFD,0x03,0x46,0x0E,0x00,0x00,0x00,
0xFF,0x03,0x53,0x07,0x00,0x00,0x00,
0x10,0x04,0x57,0x00,0x00,0x00,0x00,
0x10,0x04,0x55,0x16,0x00,0x00,0x00,
0x17,0x04,0x41,0x0A,0x00,0x00,0x00,
0x17,0x04,0x53,0x05,0x00,0x00,0x00,
0x50,0x04,0x41,0x05,0x00,0x00,0x00,
0x60,0x04,0x53,0x0F,0x00,0x00,0x00,
0xC9,0x04,0x53,0x10,0x00,0x00,0x00,
0xCE,0x04,0x53,0x11,0x00,0x00,0x00,
0xFC,0x04,0x41,0x03,0x00,0x00,0x00,
0xFC,0x04,0x59,0x00,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFE,0x01 };
//unk_E1960 - 0x194


type_unk_E17CC_str_0x194 unk_E17CC_str_0x194[26] = {//E1960 //0x2b2960
{0x0000,0x0000,0x0074,0x01DE,0x0028,0x0028,0x01A4,0x0334,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0170,0x01DE,0x0028,0x0028,0x029A,0x0325,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0240,0x01DE,0x0028,0x0028,0x0371,0x02DE,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0104,0x0192,0x0028,0x0028,0x0225,0x0272,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0104,0x0192,0x0028,0x0028,0x01C2,0x028C,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0130,0x0192,0x0028,0x0028,0x0262,0x029A,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0130,0x0192,0x0028,0x0028,0x02FB,0x028C,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0130,0x0192,0x0028,0x0028,0x02DC,0x022E,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0130,0x0192,0x0028,0x0028,0x0284,0x022A,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0130,0x0192,0x0028,0x0028,0x0218,0x021C,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0200,0x0132,0x0028,0x0028,0x0336,0x01C2,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x027E,0x00BE,0x0028,0x0028,0x03F1,0x019C,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x027E,0x005C,0x0028,0x0028,0x0422,0x010C,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x01DE,0x005C,0x0028,0x0028,0x0385,0x0130,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x01DE,0x005C,0x0028,0x0028,0x0331,0x00CA,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x01DE,0x005C,0x0028,0x0028,0x02AC,0x0106,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x007A,0x0060,0x0028,0x0028,0x0212,0x013C,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x007A,0x0060,0x0028,0x0028,0x01AB,0x00CE,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x007A,0x0060,0x0028,0x0028,0x0142,0x00FE,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0132,0x00C4,0x0028,0x0028,0x0273,0x01A0,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0001,0x0044,0x0028,0x0028,0x00B4,0x0116,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0128,0x0044,0x0028,0x0028,0x0261,0x00DA,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x01E0,0x0000,0x0028,0x0028,0x0346,0x0060,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0134,0x0000,0x0028,0x0028,0x02A7,0x007E,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0134,0x0000,0x0028,0x0028,0x025D,0x0078,0x0021,0x02,0x00,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00,0x00,0x0000} };

char x_BYTE_E1B9C[8] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // idb x_WORD_E1964x[0x238+
char x_BYTE_E1BA4[8] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // idb x_WORD_E1964x[0x240+
Bit8u off_E1BAC[0x3c4/*4096*/] =//buttons positions
{
	//adress                          //var1  //var4       //var5                                                                          //var 26(13) //var 28(14)                      //var26+4(17) //var 26+5(18)
	0x50,0x83,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0xCE,0x00, 0x43,0x00,0x50,0x00,0x50,0x00,0x9A,0x01,0x3B,0x33,0x06,0x01,0x00,0x00, 0x4E,0x00,  0x4E,0x00,    0x00,0x00,0x00,0x00, 0x50,0x00,    0x00,0x00,    0x00,0x00,0x00,0x00,0x03,0x00,
	0x00,0x9E,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x19,0x01, 0x41,0x00,0x50,0x00,0x50,0x00,0x94,0x01,0x3C,0x34,0x0A,0x01,0x00,0x00, 0x64,0x01,  0x70,0x00,    0x00,0x00,0x00,0x00, 0x50,0x00,    0x00,0x00,    0xA4,0x01,0x00,0x00,0x03,0x00,
	0x80,0xEE,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x6A,0x01, 0x48,0x00,0x50,0x00,0x50,0x00,0x99,0x01,0x3D,0x35,0x07,0x01,0x00,0x00, 0xAE,0x01,  0x4E,0x00,    0x00,0x00,0x00,0x00, 0x50,0x00,    0x00,0x00,    0x9C,0x01,0x00,0x00,0x03,0x00,
	0x30,0x97,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0xC8,0x00, 0x9D,0x00,0x50,0x00,0x50,0x00,0x96,0x01,0x3E,0x36,0x09,0x01,0x00,0x00, 0x4E,0x00,  0xA0,0x00,    0x00,0x00,0x00,0x00, 0xC8,0x00,    0x00,0x00,    0xA6,0x01,0x00,0x00,0x03,0x00,
	0x10,0xA6,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x95,0x01, 0xE7,0x00,0x3C,0x00,0x2C,0x00,0xCF,0x01,0x6A,0x6A,0x0F,0x01,0x00,0x00, 0x60,0x01,  0xAE,0x00,    0x00,0x00,0x00,0x00, 0x50,0x00,    0x00,0x00,    0x00,0x00,0x00,0x00,0x03,0x00,
	0xF0,0x90,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x87,0x01, 0x9E,0x00,0x50,0x00,0x50,0x00,0x95,0x01,0x3F,0x37,0x08,0x01,0x00,0x00, 0xC0,0x01,  0xA0,0x00,    0x00,0x00,0x00,0x00, 0xC8,0x00,    0x00,0x00,    0xA5,0x01,0x00,0x00,0x03,0x00,
	0x80,0x89,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x26,0x01, 0x19,0x00,0x34,0x00,0x2C,0x00,0x97,0x01,0x40,0x38,0x0B,0x01,0x00,0x00, 0x60,0x01,  0x1A,0x00,    0x00,0x00,0x00,0x00, 0x50,0x00,    0x00,0x00,    0x97,0x01,0x00,0x00,0x03,0x00,
	0xE0,0x89,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x21,0x01, 0x9B,0x00,0x3C,0x00,0x2C,0x00,0x98,0x01,0x41,0x39,0x0C,0x01,0x00,0x00, 0x60,0x01,  0xAE,0x00,    0x00,0x00,0x00,0x00, 0x50,0x00,    0x00,0x00,    0x00,0x00,0x00,0x00,0x03,0x00,
	0x60,0xA1,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0xB9,0x00, 0xE8,0x00,0x3C,0x00,0x2C,0x00,0x9B,0x01,0x42,0x3A,0x0D,0x01,0x00,0x00, 0x4A,0x00,  0xF6,0x00,    0x00,0x00,0x00,0x00, 0x64,0x00,    0x00,0x00,    0x9B,0x01,0x00,0x00,0x03,0x00,
	0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,  0x00,0x00,    0x00,0x00,0x00,0x00, 0x00,0x00,    0x00,0x00,    0x00,0x00,0x00,0x00,0x00,0x00,
	
	0xF0,0xDC,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x1C,0x01, 0x02,0x00,0x1E,0x00,0x0A,0x00,0x00,0x00,0x0B,0x04,0x00,0x01,0x00,0x00, 0x00,0x00,  0x00,0x00,    0x00,0x00,0x00,0x00, 0x00,0x00,    0x00,0x00,    0x00,0x00,0x00,0x00,0x03,0x00,
	0x30,0xDD,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x1A,0x01, 0x22,0x00,0x1E,0x00,0x0A,0x00,0x00,0x00,0x0C,0x05,0x00,0x01,0x00,0x00, 0x00,0x00,  0x00,0x00,    0x00,0x00,0x00,0x00, 0x00,0x00,    0x00,0x00,    0x00,0x00,0x00,0x00,0x03,0x00,
	0xA0,0xDC,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x6F,0x00, 0x65,0x00,0x28,0x00,0x28,0x00,0x00,0x00,0x08,0x01,0x00,0x01,0x00,0x00, 0x00,0x00,  0x00,0x00,    0x00,0x00,0x00,0x00, 0x00,0x00,    0x00,0x00,    0x00,0x00,0x00,0x00,0x03,0x00,
	0xA0,0xDD,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0xC1,0x01, 0x64,0x00,0x28,0x00,0x28,0x00,0x00,0x00,0x09,0x02,0x00,0x01,0x00,0x00, 0x00,0x00,  0x00,0x00,    0x00,0x00,0x00,0x00, 0x00,0x00,    0x00,0x00,    0x00,0x00,0x00,0x00,0x03,0x00,
	0xF0,0xDB,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x9A,0x00, 0x03,0x01,0x50,0x00,0x96,0x00,0x00,0x00,0x0D,0x06,0x00,0x01,0x00,0x00, 0x00,0x00,  0x00,0x00,    0x00,0x00,0x00,0x00, 0x00,0x00,    0x00,0x00,    0x00,0x00,0x00,0x00,0x03,0x00,
	0x40,0xDC,0x25,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x8F,0x01, 0x02,0x01,0x50,0x00,0x96,0x00,0x00,0x00,0x0E,0x07,0x00,0x01,0x00,0x00, 0x00,0x00,  0x00,0x00,    0x00,0x00,0x00,0x00, 0x00,0x00,    0x00,0x00,    0x00,0x00,0x00,0x00,0x03,0x00,
	0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00, 0x00,0x00,     0x00,0x00,0x00,0x00, 0x00,0x00,    0x00,0x00,    0x00,0x00,0x00,0x00,0x03,0x00,
	
	0x1E,0xBC,0x05,0x00,0xD0,0x32,0x00,0x00,0xBD,0x6B,0x07,0x00,0x00,0x03,0x00,0x00,0xF4,0x00,0x85,0x00,0x88,0x00,0x5C,0x01,
	0xEE,0xEE,0x05,0x00,0x82,0x32,0x00,0x00,0xBD,0x6E,0x07,0x00,0x00,0x03,0x00,0x00,0xD0,0x00,0x81,0x00,0xB4,0x00,0x60,0x01,
	0x70,0x21,0x06,0x00,0xE3,0x3B,0x00,0x00,0xBD,0x71,0x07,0x00,0x00,0x03,0x00,0x00,0xE2,0x00,0x90,0x00,0x96,0x00,0x51,0x01,
	0x53,0x5D,0x06,0x00,0xB6,0x42,0x00,0x00,0xBD,0x74,0x07,0x00,0x00,0x03,0x00,0x00,0xE0,0x00,0x6F,0x00,0xA4,0x00,0x72,0x01,
	0x09,0xA0,0x06,0x00,0x29,0x30,0x00,0x00,0xBD,0x77,0x07,0x00,0x00,0x03,0x00,0x00,0xEC,0x00,0x70,0x00,0x9C,0x00,0x71,0x01,
	0x32,0xD0,0x06,0x00,0x89,0x2E,0x00,0x00,0xBD,0x7A,0x07,0x00,0x00,0x03,0x00,0x00,0xE0,0x00,0x87,0x00,0xB4,0x00,0x60,0x01,
	0xBB,0xFE,0x06,0x00,0xDC,0x3B,0x00,0x00,0xBD,0x7D,0x07,0x00,0x00,0x03,0x00,0x00,0xDD,0x00,0x84,0x00,0xA5,0x00,0x5D,0x01,
	0x97,0x3A,0x07,0x00,0x26,0x31,0x00,0x00,0xBD,0x80,0x07,0x00,0x00,0x03,0x00,0x00,0xF0,0x00,0x8B,0x00,0x8C,0x00,0x56,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
}; // idb
//void *off_E1E98 = (void *)0x5BC1E; // weak //off_E1BAC[0x2ec
int16_t x_WORD_E1F70[10] = { 430, 78, 0, 0, 80, 0, 413, 0, 0, 0 }; // idb
Bit16s x_WORD_E1F84[68] =//in region?
{
	//                                   xmin  ymin   sizex	 sizey        type?
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0123,0x00CD,0x003C,0x003C,0x0000,0x2324,
	//11      12    13     14     15    16       17   18     19     click  noncl
	0x0101,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,

	0x0000,0x0000,0x0000,0x0000,0x0000,0x0120,0x0063,0x003C,0x003C,0x0000,0x4D4C,
	0x0102,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,

	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,

	0x0000,0x0000
}; // idb
x_WORD x_WORD_E2008[66] =//2b3008 zmena 2b3008
{
0x0000,0x0000,0x0000,0x0000,0x0000,0x0111,0x000A,0x003C,0x003C,0x0000,0x6D00,0x0101,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
0x0000,0x0000,0x0000,0x0000,0x0000,0x011B,0x017D,0x003C,0x003C,0x0000,0x6C00,0x0102,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000

}; // idb
int x_DWORD_E208C = 0; // weak
int16_t x_WORD_E2094 = 40; // weak
char x_BYTE_E2096 = 40; // weak
char x_BYTE_E2097 = 49; // weak
Bit16s x_WORD_E20A4[440] =//2b30a4
{
  0x0000,0x0000,0x0000,0x0000,0x0001,0x0025,0x0002,0x0025,0x0003,0x0000,0x0000,0x0180,0x0000,0x021F,0x03C0,0x008C,0x0091,0x008C,0x008C,0x0091,0x0032,0x0001,0x0003,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0100,0x2500,0x0200,0x2500,0x0300,0x0000,0x0000,0x8B00,0x0A01,0x2600,0xCA02,0x8C03,0x9100,0x8C00,0x8C00,0x9100,0x3200,0x0100,0x0300,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
  0x0000,0x0000,0x0000,0x0000,0x0001,0x0025,0x0002,0x0025,0x0003,0x0000,0x0000,0x0190,0x0006,0x022B,0x03D4,0x008C,0x0091,0x008C,0x008C,0x0091,0x0032,0x0001,0x0003,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0100,0x2700,0x0200,0x2700,0x0300,0x0000,0x0000,0x0100,0xBE00,0xFC00,0x3404,0xCE01,0xD300,0xCE00,0xCE00,0xD300,0x2800,0x0100,0x0300,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
  0x0000,0x0000,0x0000,0x0000,0x0001,0x0025,0x0002,0x0025,0x0003,0x0000,0x0000,0x01CB,0x0000,0x04FE,0x03C0,0x0092,0x0097,0x0092,0x0092,0x0097,0x0014,0x0001,0x0003,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0100,0x0900,0x0200,0x0300,0x0300,0x0000,0x0000,0x5300,0x0002,0x3A00,0x7C02,0x1502,0x1C01,0x1501,0x5D01,0x6700,0x0000,0x0200,0x0300,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
  0x0000,0x0000,0x0000,0x0000,0x0001,0x0009,0x0002,0x0003,0x0003,0x0000,0x0000,0x0262,0x0072,0x0262,0x0072,0x0129,0x0130,0x0129,0x0129,0x0130,0x0000,0x0003,0x0018,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0100,0x0900,0x0200,0x0300,0x0300,0x0000,0x0000,0x6500,0x0001,0x1F00,0x9001,0x6B02,0x7200,0x6B00,0x5D00,0x6700,0x0F00,0x0100,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
  0x0000,0x0000,0x0000,0x0000,0x0002,0x0009,0x0002,0x0003,0x0003,0x0000,0x0000,0x03AB,0x0000,0x036F,0x0266,0x006B,0x0072,0x006B,0x005D,0x0067,0x000F,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0300,0x0900,0x0200,0x0300,0x0300,0x0000,0x0000,0xAF00,0x0001,0x6900,0x0001,0x6B02,0x7200,0x6B00,0x5D00,0x6700,0x0B00,0x0100,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
  0x0000,0x0000,0x0000,0x0000,0x0004,0x0009,0x0002,0x0003,0x0003,0x0000,0x0000,0x01C7,0x0000,0x018B,0x0072,0x006B,0x0072,0x006B,0x005D,0x0067,0x0012,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
  0xF620,0x0025,0x0000,0x0000,0x0000,0x0245,0x01AB,0x0028,0x0046,0x0000,0xF6F7,0x010B,0x0100,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,0xF640,0x0025,0x0000,0x0000
}; // idb
Bit8u off_E23E0[264] =
{
//0  1     2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17  18    19   20   21    22   23   24   25   26   27   28   29  30  31     32   33   34  35   36   37   38    39  40   41   42   43   
0x20,0xF6,0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x45,0x02,0xAB,0x01,0x28,0x00,0x46,0x00,0x00,0x00,0xF7,0xF6,0x0B,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,
0x40,0xF6,0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0xAB,0x01,0x28,0x00,0x46,0x00,0x00,0x00,0xF9,0xF8,0x10,0x01,0x00,0x01,0x25,0x00,0x5C,0x01,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0xD3,0x01,0x00,0x00,0x03,0x00,
0x00,0xF8,0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0x00,0x46,0x00,0x96,0x01,0xFB,0xFA,0x09,0x01,0x00,0x01,0x1D,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00,0xA6,0x01,0x00,0x00,0x03,0x00,
0x20,0xF8,0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x45,0x02,0x00,0x00,0x28,0x00,0x46,0x00,0x95,0x01,0xFD,0xFC,0x08,0x01,0x00,0x01,0xFE,0x01,0x3C,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00,0xA5,0x01,0x00,0x00,0x03,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xC7,0x01,0x28,0x00,0x31,0x00,0xC4,0x00,0x26,0x00,0x00,0x00,0x1B,0x01,0x6A,0x00,0x02,0x00,0xC6,0x01,0x2A,0x01,0x2C,0x01,0x8D,0x01,0x2A,0x01,0x00,0x00,0x41,0x01,0xEC,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
}; // idb
Bit8u unk_E24BCx[0x51a] = {
0xC7,0x01,0x28,0x00,0x31,0x00,0xC4,0x00,0x26,0x00,0x00,0x00,0x1B,0x01,0x6A,0x00,0x02,0x00,
0xC6,0x01,0x2A,0x01,0x2C,0x01,0x8D,0x01,0x2A,0x01,0x00,0x00,0x41,0x01,0xEC,0x00,0x08,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xD1,0x01,0x03,0x01,0x20,0x03,0x5D,0x01,0x20,0x03,0x00,0x00,0x53,0x01,0x20,0x03,0x02,0x0B,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xD2,0x01,0x2F,0x01,0x69,0x01,0xDC,0x01,0x6A,0x01,0x00,0x00,0x3C,0x02,0xB8,0x01,0x02,0x0B,
0x95,0x01,0x5E,0x01,0x41,0x00,0x11,0x02,0x52,0x00,0x00,0x00,0x54,0x02,0x1C,0x00,0x08,0x08,
0x96,0x01,0x7E,0x00,0x41,0x00,0x7B,0x00,0x52,0x00,0x00,0x00,0x37,0x00,0x1C,0x00,0x08,0x09,
0xD3,0x01,0x7F,0x00,0x68,0x01,0x7B,0x00,0x76,0x01,0x00,0x00,0x34,0x00,0xB0,0x01,0x08,0x10,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xC9,0x01,0x04,0x00,0xB8,0x00,0x42,0x00,0xB6,0x00,0x00,0x00,0x7E,0x00,0x82,0x00,0x00,0x00,
0xCB,0x01,0x05,0x00,0x68,0x01,0x4D,0x00,0x68,0x01,0x00,0x00,0x95,0x00,0x30,0x01,0x00,0x00,
0xCA,0x01,0xBC,0x01,0x6A,0x01,0x27,0x02,0x6A,0x01,0x00,0x00,0xC6,0x01,0x22,0x01,0x00,0x00,
0xC8,0x01,0xBC,0x01,0xA8,0x00,0x28,0x02,0xA8,0x00,0x00,0x00,0xE8,0x01,0x74,0x00,0x00,0x00,
0xCC,0x01,0xA3,0x01,0x0D,0x00,0xD7,0x01,0x19,0x00,0x00,0x00,0x48,0x01,0x18,0x00,0x08,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x9F,0x01,0x02,0x00,0x4D,0x00,0x7D,0x00,0x5A,0x00,0x3B,0x00,0xDE,0x00,0x5A,0x00,0x02,0x06,
0xA0,0x01,0x13,0x00,0x74,0x00,0xAC,0x00,0x7C,0x00,0x01,0x00,0x19,0x01,0x7C,0x00,0x02,0x0A,
0x96,0x01,0x11,0x00,0xF6,0x00,0x5F,0x00,0xF6,0x00,0x3E,0x00,0xC0,0x00,0xAA,0x00,0x00,0x09,
0x9B,0x01,0x11,0x00,0x68,0x01,0x5F,0x00,0x68,0x01,0x3E,0x00,0xC1,0x00,0x1C,0x01,0x00,0x0D,
0xA3,0x01,0xDC,0x00,0x55,0x01,0x3E,0x01,0x55,0x01,0x41,0x00,0x3C,0x01,0xD0,0x00,0x00,0x0C,
0xCF,0x01,0x9A,0x01,0x48,0x01,0x03,0x02,0x61,0x01,0x3F,0x00,0xB5,0x01,0x22,0x01,0x08,0x0F,
0xA2,0x01,0x84,0x01,0xED,0x00,0xE5,0x01,0xEC,0x00,0x3F,0x00,0xB0,0x01,0xC4,0x00,0x08,0x08,
0xA1,0x01,0x96,0x01,0x9D,0x00,0xFC,0x01,0xA6,0x00,0x3D,0x00,0xA8,0x01,0x62,0x00,0x08,0x07,
0x97,0x01,0x9B,0x01,0x1F,0x00,0xE8,0x01,0x29,0x00,0x40,0x00,0x5A,0x01,0x28,0x00,0x08,0x0B,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB5,0x01,0x00,0x00,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB6,0x01,0x00,0x00,0x02,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x68,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0x01,0x74,0x02,0x73,0x00,0x8A,0x00,
0x73,0x00,0x04,0x00,
0x00,0x01,0x07,0x00,0x26,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x6C,0x03,0x16,0x02,0x73,0x00,0x8A,0x00,0x75,0x00,0x08,0x00,0x00,0x01,
0x08,0x00,0x26,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x21,0x02,0x36,0x00,0x55,0x00,0x55,0x00,0x55,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8F,0x02,
0x3A,0x00,0x55,0x00,0x55,0x00,0x57,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x34,0x02,0x58,0x00,
0x55,0x00,0x55,0x00,0x58,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x66,0x02,0x7B,0x00,0x55,0x00,
0x55,0x00,0x59,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x02,0x36,0x00,0x56,0x00,0x5C,0x00,
0x56,0x00,0x08,0x00,0x00,0x01,0x09,0x00,0x17,0x00,0x03,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x8F,0x02,0x3A,0x00,0x56,0x00,0x5C,0x00,0x58,0x00,
0x04,0x00,0x00,0x01,0xFF,0xFF,0x17,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x34,0x02,0x58,0x00,0x56,0x00,0x5C,0x00,0x59,0x00,0x16,0x00,
0x00,0x01,0xFF,0xFF,0x17,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x66,0x02,0x7B,0x00,0x56,0x00,0x5C,0x00,0x5A,0x00,0x15,0x00,0x00,0x01,
0xFF,0xFF,0x17,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x3F,0x03,0xF5,0x00,0x2E,0x00,0x3A,0x00,0x31,0x00,0x00,0x00,0x01,0x00,0x0A,0x00,
0x05,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x03,
0xF5,0x00,0x2E,0x00,0x3A,0x00,0x31,0x00,0x00,0x00,0x01,0x01,0x0A,0x00,0x05,0x00,
0x02,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5F,0x03,0x49,0x01,
0x2E,0x00,0x3A,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x05,0x00,0x02,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x02,0x5F,0x02,0x2E,0x00,
0x3A,0x00,0x34,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x05,0x00,0x02,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF4,0x00,0x78,0x02,0x2E,0x00,0x3A,0x00,
0x38,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x05,0x00,0x02,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD4,0x00,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBC,0x01,0x01,0x00,0x00,0x00,0xD4,0x00,
0x53,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBD,0x01,0x00,0x00,0x00,0x00,
0xD4,0x00,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBE,0x01,0x00,0x00,
0x00,0x00,0xD4,0x00,0x95,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0x01,
0x00,0x00,0x00,0x00,0xD4,0x00,0xB6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xC0,0x01,0x00,0x00,0x00,0x00,0xD4,0x00,0xD7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xC1,0x01,0x00,0x00,0x00,0x00,0xD4,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xC2,0x01,0x00,0x00,0x00,0x00,0xD4,0x00,0x19,0x01,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xC3,0x01,0x00,0x00,0x00,0x00,0xD4,0x00,0x3A,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x01,0x00,0x00,0x00,0x00,0xD4,0x00,
0x5B,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC5,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x1E,0x00,0x1F,0x01,0x90,0x02,
0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x1F,0x00,0x6F,0x03,0x66,
0x02,0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x20,0x00,0x56,0x03,
0x90,0x01,0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x21,0x00,0x8B,
0x01,0x72,0x00,0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x22,0x00,
0x6D,0x01,0xF8,0x01,0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
}; // weak
//int16_t x_WORD_E24BE[18] = { 40, 49, 196, 38, 0, 283, 106, 2, 454, 298, 300, 397, 298, 0, 321, 236, 8, 0 }; // 2b34be
Bit16u x_WORD_E24BE[27] = { // 2b34be

0x0028,0x0031,0x00C4,0x0026,0x0000,0x011B,0x006A,0x0002,0x01C6,
0x012A,0x012C,0x018D,0x012A,0x0000,0x0141,0x00EC,0x0008,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x01D1


};


Bit8u unk_E24F2[12] = { 0xD1,0x01,0x03,0x01,0x20,0x03,0x5D,0x01,0x20,0x03,0x00,0x00 };
Bit16s unk_E24FE;
Bit16s unk_E2516[] = {
	0x01D2,0x012F,0x0169,0x01DC,0x016A,0x0000,0x023C,0x01B8,0x0B02,//0
	0x0195,0x015E,0x0041,0x0211,0x0052,0x0000,0x0254,0x001C,0x0808,//18
	0x0196,0x007E,0x0041,0x007B,0x0052,0x0000,0x0037,0x001C,0x0908,//36
	0x01D3,0x007F,0x0168,0x007B,0x0176,0x0000,0x0034,0x01B0,0x1008,//36
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,//54
	0x01C9,0x0004,0x00B8,0x0042,0x00B6,0x0000,0x007E,0x0082,0x0000,//72
	0x01CB,0x0005,0x0168,0x004D,0x0168,0x0000,0x0095,0x0130,0x0000,//90
	0x01CA,0x01BC,0x016A,0x0227,0x016A,0x0000,0x01C6,0x0122,0x0000,//108
	0x01C8,0x01BC,0x00A8,0x0228,0x00A8,0x0000,0x01E8,0x0074,0x0000,//126
	0x01CC,0x01A3,0x000D,0x01D7,0x0019,0x0000,0x0148,0x0018,0x0008,//144
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000//162

}; // weak
//int16_t x_WORD_E2518[] = { 303 }; // weak
//_UNKNOWN unk_E2570; // weak



Bit8u unk_E25DC[0x1000] = {
0x9F,0x01,0x02,0x00,0x4D,0x00,0x7D,0x00,0x5A,0x00,0x3B,0x00,0xDE,0x00,0x5A,0x00,0x02,0x06,
0xA0,0x01,0x13,0x00,0x74,0x00,0xAC,0x00,0x7C,0x00,0x01,0x00,0x19,0x01,0x7C,0x00,0x02,0x0A,
0x96,0x01,0x11,0x00,0xF6,0x00,0x5F,0x00,0xF6,0x00,0x3E,0x00,0xC0,0x00,0xAA,0x00,0x00,0x09,
0x9B,0x01,0x11,0x00,0x68,0x01,0x5F,0x00,0x68,0x01,0x3E,0x00,0xC1,0x00,0x1C,0x01,0x00,0x0D,
0xA3,0x01,0xDC,0x00,0x55,0x01,0x3E,0x01,0x55,0x01,0x41,0x00,0x3C,0x01,0xD0,0x00,0x00,0x0C,
0xCF,0x01,0x9A,0x01,0x48,0x01,0x03,0x02,0x61,0x01,0x3F,0x00,0xB5,0x01,0x22,0x01,0x08,0x0F,
0xA2,0x01,0x84,0x01,0xED,0x00,0xE5,0x01,0xEC,0x00,0x3F,0x00,0xB0,0x01,0xC4,0x00,0x08,0x08,
0xA1,0x01,0x96,0x01,0x9D,0x00,0xFC,0x01,0xA6,0x00,0x3D,0x00,0xA8,0x01,0x62,0x00,0x08,0x07,
0x97,0x01,0x9B,0x01,0x1F,0x00,0xE8,0x01,0x29,0x00,0x40,0x00,0x5A,0x01,0x28,0x00,0x08,0x0B,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xB5,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xB6,0x01,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x68,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xBF,0x01,0x74,0x02,0x73,0x00,0x8A,0x00,0x73,0x00,0x04,0x00,
0x00,0x01,0x07,0x00,0x26,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x6C,0x03,0x16,0x02,0x73,0x00,0x8A,0x00,0x75,0x00,0x08,0x00,0x00,0x01,
0x08,0x00,0x26,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x21,0x02,0x36,0x00,0x55,0x00,0x55,0x00,0x55,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8F,0x02,
0x3A,0x00,0x55,0x00,0x55,0x00,0x57,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x34,0x02,0x58,0x00,
0x55,0x00,0x55,0x00,0x58,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x66,0x02,0x7B,0x00,0x55,0x00,
0x55,0x00,0x59,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x02,0x36,0x00,0x56,0x00,0x5C,0x00,
0x56,0x00,0x08,0x00,0x00,0x01,0x09,0x00,0x17,0x00,0x03,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x8F,0x02,0x3A,0x00,0x56,0x00,0x5C,0x00,0x58,0x00,
0x04,0x00,0x00,0x01,0xFF,0xFF,0x17,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x34,0x02,0x58,0x00,0x56,0x00,0x5C,0x00,0x59,0x00,0x16,0x00,
0x00,0x01,0xFF,0xFF,0x17,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x66,0x02,0x7B,0x00,0x56,0x00,0x5C,0x00,0x5A,0x00,0x15,0x00,0x00,0x01,
0xFF,0xFF,0x17,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x3F,0x03,0xF5,0x00,0x2E,0x00,0x3A,0x00,0x31,0x00,0x00,0x00,0x01,0x00,0x0A,0x00,
0x05,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x03,
0xF5,0x00,0x2E,0x00,0x3A,0x00,0x31,0x00,0x00,0x00,0x01,0x01,0x0A,0x00,0x05,0x00,
0x02,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5F,0x03,0x49,0x01,
0x2E,0x00,0x3A,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x05,0x00,0x02,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x02,0x5F,0x02,0x2E,0x00,
0x3A,0x00,0x34,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x05,0x00,0x02,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF4,0x00,0x78,0x02,0x2E,0x00,0x3A,0x00,
0x38,0x00,0x00,0x00,0x01,0x00,0xFF,0xFF,0x05,0x00,0x02,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD4,0x00,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBC,0x01,0x01,0x00,0x00,0x00,0xD4,0x00,
0x53,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBD,0x01,0x00,0x00,0x00,0x00,
0xD4,0x00,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBE,0x01,0x00,0x00,
0x00,0x00,0xD4,0x00,0x95,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0x01,
0x00,0x00,0x00,0x00,0xD4,0x00,0xB6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xC0,0x01,0x00,0x00,0x00,0x00,0xD4,0x00,0xD7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xC1,0x01,0x00,0x00,0x00,0x00,0xD4,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xC2,0x01,0x00,0x00,0x00,0x00,0xD4,0x00,0x19,0x01,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xC3,0x01,0x00,0x00,0x00,0x00,0xD4,0x00,0x3A,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC4,0x01,0x00,0x00,0x00,0x00,0xD4,0x00,
0x5B,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC5,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x1E,0x00,0x1F,0x01,0x90,0x02,
0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x1F,0x00,0x6F,0x03,0x66,
0x02,0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x20,0x00,0x56,0x03,
0x90,0x01,0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x21,0x00,0x8B,
0x01,0x72,0x00,0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x22,0x00,
0x6D,0x01,0xF8,0x01,0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x01,0x00,
0x00,0x00,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,
0x04,0x01,0x00,0x02,0x01,0x00,0x00,0x00,0x7F,0x03,0x02,0x04,0x00,0x00,0x47,0x65,
0x6E,0x75,0x69,0x6E,0x65,0x49,0x6E,0x74,0x65,0x6C,0x01,0x00,0x47,0x65,0x6E,0x75,
0x69,0x6E,0x65,0x49,0x6E,0x74,0x65,0x6C,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x0A,0x00,0x00,0x00,0x03,0x01,0x00,
0x64,0x2C,0x2A,0x00,0x7C,0x2C,0x2A,0x00,0x8C,0x2C,0x2A,0x00,0x9C,0x2C,0x2A,0x00,
0xAC,0x2C,0x2A,0x00,0xB8,0x2C,0x2A,0x00,0xDC,0x2C,0x2A,0x00,0xE8,0x2C,0x2A,0x00,
0xF8,0x2C,0x2A,0x00,0x0C,0x2D,0x2A,0x00,0x24,0x2D,0x2A,0x00,0x30,0x2D,0x2A,0x00,
0x3C,0x2D,0x2A,0x00,0x4C,0x2D,0x2A,0x00,0x4C,0x2D,0x2A,0x00,0x58,0x2D,0x2A,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x1E,0x01,0x32,0x00,0x40,0x01,
0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x02,0x02,0x01,0x00,0x00,0x02,0x1F,0x01,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x02,0x02,0x01,0x00,0x04,0x00,0x20,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x06,0x06,
0x01,0x00,0x24,0x00,0x21,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,
0x2C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x2C,0x01,0x00,0x00,0x04,0x04,0x01,0x00,
0x20,0x02,0x22,0x01,0x32,0x00,0xD6,0x01,0x10,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x02,0x02,0x01,0x00,0x04,0x04,
0x23,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x02,0x02,0x01,0x00,0x04,0x00,0x24,0x01,
0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x02,0x02,0x01,0x00,0x04,0x00,0x25,0x01,0x32,0x00,
0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
0x58,0x02,0x00,0x00,0x02,0x02,0x01,0x00,0x04,0x00,0x26,0x01,0x32,0x00,0x40,0x01,
0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x02,0x02,0x01,0x00,0x24,0x06,0x27,0x01,0x32,0x00,0x40,0x01,0x50,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x05,0x05,0x01,0x00,0x24,0x06,0x28,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x05,0x05,
0x01,0x00,0x24,0x06,0x29,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,
0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x05,0x05,0x01,0x00,
0x04,0x04,0x2A,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x78,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x04,0x04,0x01,0x00,0x04,0x04,
0x2B,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x05,0x05,0x01,0x00,0x04,0x00,0x2C,0x01,
0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x04,0x04,0x01,0x00,0x04,0x00,0x2D,0x01,0x32,0x00,
0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
0x58,0x02,0x00,0x00,0x04,0x04,0x01,0x00,0x24,0x06,0x2E,0x01,0x32,0x00,0xD6,0x00,
0x10,0x00,0x00,0x00,0x00,0x00,0x90,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0x01,
0x00,0x00,0x05,0x05,0x02,0x00,0x00,0x04,0x32,0x01,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,
0x05,0x05,0x02,0x00,0x00,0x04,0x33,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,
0x02,0x00,0x00,0x00,0x34,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,0x02,0x00,
0x00,0x04,0x35,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x04,0x04,0x02,0x00,0x00,0x00,
0x36,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0x00,0x00,
0x00,0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x04,0x04,0x02,0x00,0x00,0x00,0x37,0x01,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,0x02,0x00,0x00,0x00,0x38,0x01,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xA0,0x00,0x00,0x00,0x05,0x05,0x02,0x00,0x00,0x00,0x39,0x01,0x32,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,
0x00,0x00,0x05,0x05,0x02,0x00,0x00,0x00,0x3A,0x01,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,
0x05,0x05,0x02,0x00,0x00,0x00,0x3B,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x40,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x03,0x03,
0x02,0x00,0x00,0x00,0x3C,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,0x03,0x00,
0x20,0x02,0x3D,0x01,0x32,0x00,0xD6,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x20,0x03,
0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x03,0x00,0x20,0x02,
0x3E,0x01,0x32,0x00,0xD6,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,
0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x03,0x00,0x20,0x02,0x3F,0x01,
0x32,0x00,0x82,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,
0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x03,0x00,0x20,0x02,0x40,0x01,0x32,0x00,
0x40,0x01,0x20,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x20,0x03,0x00,0x00,0x02,0x02,0x03,0x00,0x20,0x02,0x41,0x01,0x32,0x00,0x04,0x01,
0x10,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,
0x00,0x00,0x02,0x02,0x03,0x00,0x20,0x02,0x42,0x01,0x32,0x00,0x40,0x01,0x10,0x00,
0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,
0x02,0x02,0x03,0x00,0x20,0x06,0x43,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,
0x04,0x00,0x20,0x02,0x44,0x01,0x32,0x00,0xD6,0x01,0x10,0x00,0x00,0x00,0x00,0x00,
0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x03,0x04,0x00,
0x20,0x02,0x45,0x01,0x32,0x00,0xD6,0x01,0x20,0x00,0x00,0x00,0x00,0x00,0x20,0x03,
0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x03,0x05,0x00,0x20,0x06,
0x46,0x01,0x32,0x00,0x1C,0x02,0x20,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,
0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x05,0x00,0x20,0x06,0x47,0x01,
0x32,0x00,0x58,0x02,0x20,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,
0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x05,0x00,0x20,0x06,0x48,0x01,0x32,0x00,
0x1C,0x02,0x28,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x20,0x03,0x00,0x00,0x02,0x02,0x05,0x00,0x20,0x06,0x49,0x01,0x32,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,
0x00,0x00,0x02,0x02,0x05,0x00,0x20,0x02,0x4A,0x01,0x32,0x00,0x30,0x02,0x10,0x00,
0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,
0x02,0x02,0x06,0x00,0x00,0x00,0xA0,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0xA1,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,
0x00,0x00,0xA2,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0xA3,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA4,0x00,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA5,0x00,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA6,0x00,0x32,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA7,0x00,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x06,0x00,0x00,0x00,0xA8,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0xA9,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,
0x00,0x00,0xAA,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0xAB,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xAC,0x00,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xAD,0x00,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xAE,0x00,0x32,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xAF,0x00,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x06,0x00,0x00,0x00,0xB0,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0xB1,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,
0x00,0x00,0xB2,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0xB3,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB4,0x00,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB5,0x00,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB6,0x00,0x32,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB7,0x00,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x06,0x00,0x00,0x00,0xB8,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0xB9,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,
0x00,0x00,0x4B,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0x4C,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x4D,0x01,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x04,0x00,0x4E,0x01,0x32,0x00,
0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
0x58,0x02,0x00,0x00,0x03,0x06,0x07,0x00,0x04,0x00,0x4F,0x01,0x32,0x00,0x40,0x01,
0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x03,0x06,0x07,0x00,0x04,0x00,0x50,0x01,0x32,0x00,0x40,0x01,0x50,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x03,0x06,0x07,0x00,0x04,0x00,0x51,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x06,
0x07,0x00,0x04,0x00,0x52,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,
0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x06,0x07,0x00,
0x04,0x00,0x53,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x06,0x07,0x00,0x04,0x00,
0x54,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x06,0x07,0x00,0x04,0x00,0x55,0x01,
0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x06,0x07,0x00,0x04,0x00,0x56,0x01,0x32,0x00,
0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x8C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x8C,0x00,0x00,0x00,0x04,0x06,0x08,0x00,0x80,0x02,0x57,0x01,0x32,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,
0x00,0x00,0x05,0x05,0x08,0x00,0x00,0x04,0x58,0x01,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,
0x05,0x05,0x08,0x00,0x80,0x02,0x59,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x05,0x05,
0x09,0x00,0x04,0x00,0x1E,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,
0x00,0x00,0xBA,0x00,0x46,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,
0xA8,0x01,0x00,0x00,0x68,0x01,0x72,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0xA7,0x01,
0x00,0x00,0x68,0x01,0x92,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0xAB,0x01,0x00,0x00,
0x36,0x01,0xB0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0xAA,0x01,0x00,0x00,0x68,0x01,
0xB0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0xAC,0x01,0x00,0x00,0x68,0x01,0xD2,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x01,0x00,0x04,0x00,0x7C,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,
0x00,0x00,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x04,0x04,
0x01,0x00,0x04,0x01,0x00,0x00,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,
0x90,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0x01,0x00,0x00,0x03,0x03,0x01,0x00,
0x04,0x00,0x2F,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x04,0x00,
0x30,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x0C,0x00,0x00,0x00,0x60,0x01,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x0C,0x00,0x00,0x01,0x61,0x01,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0x01,0x0D,0x00,0x00,0x00,0x5A,0x01,0x32,0x00,0x3C,0x00



}; // weak
//int16_t x_WORD_E25DE[] = { 2 }; // weak
Bit8u x_BYTE_E25ED_0x[0xa3] = {
0x06,0xA0, 0x01,0x13, 0x00,0x74, 0x00,0xAC, 0x00,0x7C, 0x00,0x01, 0x00,0x19, 0x01,0x7C, 0x00,0x02,//0x12
0x0A,0x96, 0x01,0x11, 0x00,0xF6, 0x00,0x5F, 0x00,0xF6, 0x00,0x3E, 0x00,0xC0, 0x00,0xAA, 0x00,0x00,//0x24
0x09,0x9B, 0x01,0x11, 0x00,0x68, 0x01,0x5F, 0x00,0x68, 0x01,0x3E, 0x00,0xC1, 0x00,0x1C, 0x01,0x00,//0x36
0x0D,0xA3, 0x01,0xDC, 0x00,0x55, 0x01,0x3E, 0x01,0x55, 0x01,0x41, 0x00,0x3C, 0x01,0xD0, 0x00,0x00,//0x48
0x0C,0xCF, 0x01,0x9A, 0x01,0x48,0x01,0x03,0x02,0x61,0x01,0x3F,0x00,0xB5,0x01,0x22,0x01,0x08,//5a
0x0F,0xA2,0x01,0x84,0x01,0xED,0x00,0xE5,0x01,0xEC,0x00,0x3F,0x00,0xB0,0x01,0xC4,0x00,0x08,//6c
0x08,0xA1,0x01,0x96,0x01,0x9D,0x00,0xFC,0x01,0xA6,0x00,0x3D,0x00,0xA8,0x01,0x62,0x00,0x08,//7e
0x07,0x97,0x01,0x9B,0x01,0x1F,0x00,0xE8,0x01,0x29,0x00,0x40,0x00,0x5A,0x01,0x28,0x00,0x08,//90
0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//a2
0x00 };
Bit8u x_BYTE_E25ED_a3[0x38] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB5,0x01,0x00,0x00,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB6,0x01,0x00,0x00,0x02,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x68,0x01 };

type_x_BYTE_E25ED_db_str x_BYTE_E25ED_db_str[16] = {
{0x00000000,0x00000000,0x01BF,0x0274,0x0073,0x008A,0x0073,0x0004,0x00,0x01,0x0007,0x0026,0x0002,0x0000},
{0x00000000,0x00000000,0x036C,0x0216,0x0073,0x008A,0x0075,0x0008,0x00,0x01,0x0008,0x0026,0x0002,0x0000},
{0x00000000,0x00000000,0x0221,0x0036,0x0055,0x0055,0x0055,0x0000,0x01,0x00,0xFFFF,0x0000,0x0000,0x0000},
{0x00000000,0x00000000,0x028F,0x003A,0x0055,0x0055,0x0057,0x0000,0x01,0x00,0xFFFF,0x0000,0x0000,0x0000},
{0x00000000,0x00000000,0x0234,0x0058,0x0055,0x0055,0x0058,0x0000,0x01,0x00,0xFFFF,0x0000,0x0000,0x0000},
{0x00000000,0x00000000,0x0266,0x007B,0x0055,0x0055,0x0059,0x0000,0x01,0x00,0xFFFF,0x0000,0x0000,0x0000},
{0x00000000,0x00000000,0x0221,0x0036,0x0056,0x005C,0x0056,0x0008,0x00,0x01,0x0009,0x0017,0x0003,0x0000},
{0x00000000,0x00000000,0x028F,0x003A,0x0056,0x005C,0x0058,0x0004,0x00,0x01,0xFFFF,0x0017,0x0002,0x0000},
{0x00000000,0x00000000,0x0234,0x0058,0x0056,0x005C,0x0059,0x0016,0x00,0x01,0xFFFF,0x0017,0x0003,0x0000},
{0x00000000,0x00000000,0x0266,0x007B,0x0056,0x005C,0x005A,0x0015,0x00,0x01,0xFFFF,0x0017,0x0003,0x0000},
{0x00000000,0x00000000,0x033F,0x00F5,0x002E,0x003A,0x0031,0x0000,0x01,0x00,0x000A,0x0005,0x0002,0x0000},
{0x00000000,0x00000000,0x033F,0x00F5,0x002E,0x003A,0x0031,0x0000,0x01,0x01,0x000A,0x0005,0x0002,0xFFFF},
{0x00000000,0x00000000,0x035F,0x0149,0x002E,0x003A,0x002E,0x0000,0x01,0x00,0xFFFF,0x0005,0x0002,0x0000},
{0x00000000,0x00000000,0x0276,0x025F,0x002E,0x003A,0x0034,0x0000,0x01,0x00,0xFFFF,0x0005,0x0002,0x0000},
{0x00000000,0x00000000,0x00F4,0x0278,0x002E,0x003A,0x0038,0x0000,0x01,0x00,0xFFFF,0x0005,0x0002,0x0000},
{0x00000000,0x00000000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00,0x00,0x0000,0x0000,0x0000,0x0000}
};
//unk_E28A8
Bit8u x_BYTE_E25ED_2BB[0xd45] = {
0xD4,0x00, 0x32,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0xBC,0x01, 0x01,0x00, 0x00,0x00,
0xD4,0x00, 0x53,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0xBD,0x01, 0x00,0x00, 0x00,0x00,
0xD4,0x00, 0x74,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0xBE,0x01, 0x00,0x00, 0x00,0x00,
0xD4,0x00, 0x95,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0xBF,0x01, 0x00,0x00, 0x00,0x00,
0xD4,0x00, 0xB6,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0xC0,0x01, 0x00,0x00, 0x00,0x00,
0xD4,0x00, 0xD7,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0xC1,0x01, 0x00,0x00, 0x00,0x00,
0xD4,0x00, 0xF8,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0xC2,0x01, 0x00,0x00, 0x00,0x00,
0xD4,0x00, 0x19,0x01, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0xC3,0x01, 0x00,0x00, 0x00,0x00,
0xD4,0x00, 0x3A,0x01, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0xC4,0x01, 0x00,0x00, 0x00,0x00,
0xD4,0x00, 0x5B,0x01, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0xC5,0x01, 0x00,0x00, 0x00,0x00,

0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x1E,0x00,0x1F,0x01,0x90,0x02,0x03,
0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x1F,0x00,0x6F,0x03,0x66,0x02,
0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x20,0x00,0x56,0x03,0x90,
0x01,0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x21,0x00,0x8B,0x01,
0x72,0x00,0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x22,0x00,0x6D,
0x01,0xF8,0x01,0x03,0x00,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x47,0x65,0x6E,0x75,0x69,
0x6E,0x65,0x49,0x6E,0x74,0x65,0x6C,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x64,
0x2C,0x2A,0x00,0x7C,0x2C,0x2A,0x00,0x8C,0x2C,0x2A,0x00,0x9C,0x2C,0x2A,0x00,0xAC,
0x2C,0x2A,0x00,0xB8,0x2C,0x2A,0x00,0xDC,0x2C,0x2A,0x00,0xE8,0x2C,0x2A,0x00,0xF8,
0x2C,0x2A,0x00,0x0C,0x2D,0x2A,0x00,0x24,0x2D,0x2A,0x00,0x30,0x2D,0x2A,0x00,0x3C,
0x2D,0x2A,0x00,0x4C,0x2D,0x2A,0x00,0x4C,0x2D,0x2A,0x00,0x58,0x2D,0x2A,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x1E,0x01,0x32,0x00,0x40,0x01,0x50,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,
0x00,0x02,0x00,0x01,0x00,0x00,0x02,0x1F,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x02,
0x00,0x01,0x00,0x04,0x00,0x20,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x06,0x00,0x01,
0x00,0x24,0x00,0x21,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2C,0x01,0x00,0x00,0x04,0x00,0x01,0x00,0x20,
0x02,0x22,0x01,0x32,0x00,0xD6,0x01,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x02,0x00,0x01,0x00,0x04,0x04,0x23,
0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x02,0x00,0x01,0x00,0x04,0x00,0x24,0x01,0x32,
0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x58,0x02,0x00,0x00,0x02,0x00,0x01,0x00,0x04,0x00,0x25,0x01,0x32,0x00,0x40,
0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,
0x02,0x00,0x00,0x02,0x00,0x01,0x00,0x04,0x00,0x26,0x01,0x32,0x00,0x40,0x01,0x50,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,
0x00,0x02,0x00,0x01,0x00,0x24,0x06,0x27,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x05,
0x00,0x01,0x00,0x24,0x06,0x28,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x05,0x00,0x01,
0x00,0x24,0x06,0x29,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x05,0x00,0x01,0x00,0x04,
0x04,0x2A,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x04,0x00,0x01,0x00,0x04,0x04,0x2B,
0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x05,0x00,0x01,0x00,0x04,0x00,0x2C,0x01,0x32,
0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x58,0x02,0x00,0x00,0x04,0x00,0x01,0x00,0x04,0x00,0x2D,0x01,0x32,0x00,0x40,
0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,
0x02,0x00,0x00,0x04,0x00,0x01,0x00,0x24,0x06,0x2E,0x01,0x32,0x00,0xD6,0x00,0x10,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0x01,0x00,
0x00,0x05,0x00,0x02,0x00,0x00,0x04,0x32,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,
0x00,0x02,0x00,0x00,0x04,0x33,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x00,0x02,
0x00,0x00,0x00,0x34,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x00,0x02,0x00,0x00,
0x04,0x35,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x04,0x00,0x02,0x00,0x00,0x00,0x36,
0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x04,0x00,0x02,0x00,0x00,0x00,0x37,0x01,0x32,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0xA0,0x00,0x00,0x00,0x05,0x00,0x02,0x00,0x00,0x00,0x38,0x01,0x32,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,
0x00,0x00,0x00,0x05,0x00,0x02,0x00,0x00,0x00,0x39,0x01,0x32,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,
0x00,0x05,0x00,0x02,0x00,0x00,0x00,0x3A,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,
0x00,0x02,0x00,0x00,0x00,0x3B,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x03,0x00,0x02,
0x00,0x00,0x00,0x3C,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x00,0x03,0x00,0x20,
0x02,0x3D,0x01,0x32,0x00,0xD6,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x00,0x03,0x00,0x20,0x02,0x3E,
0x01,0x32,0x00,0xD6,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x00,0x03,0x00,0x20,0x02,0x3F,0x01,0x32,
0x00,0x82,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x20,0x03,0x00,0x00,0x02,0x00,0x03,0x00,0x20,0x02,0x40,0x01,0x32,0x00,0x40,
0x01,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,
0x03,0x00,0x00,0x02,0x00,0x03,0x00,0x20,0x02,0x41,0x01,0x32,0x00,0x04,0x01,0x10,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,
0x00,0x02,0x00,0x03,0x00,0x20,0x02,0x42,0x01,0x32,0x00,0x40,0x01,0x10,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,
0x00,0x03,0x00,0x20,0x06,0x43,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x00,0x04,
0x00,0x20,0x02,0x44,0x01,0x32,0x00,0xD6,0x01,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x03,0x04,0x00,0x20,
0x02,0x45,0x01,0x32,0x00,0xD6,0x01,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x03,0x05,0x00,0x20,0x06,0x46,
0x01,0x32,0x00,0x1C,0x02,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x00,0x05,0x00,0x20,0x06,0x47,0x01,0x32,
0x00,0x58,0x02,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x20,0x03,0x00,0x00,0x02,0x00,0x05,0x00,0x20,0x06,0x48,0x01,0x32,0x00,0x1C,
0x02,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,
0x03,0x00,0x00,0x02,0x00,0x05,0x00,0x20,0x06,0x49,0x01,0x32,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,
0x00,0x02,0x00,0x05,0x00,0x20,0x02,0x4A,0x01,0x32,0x00,0x30,0x02,0x10,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,
0x00,0x06,0x00,0x00,0x00,0xA0,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,
0x00,0x00,0x00,0xA1,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,
0x00,0xA2,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA3,
0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA4,0x00,0x32,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA5,0x00,0x32,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,
0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA6,0x00,0x32,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,
0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA7,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,
0x00,0x06,0x00,0x00,0x00,0xA8,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,
0x00,0x00,0x00,0xA9,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,
0x00,0xAA,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xAB,
0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xAC,0x00,0x32,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xAD,0x00,0x32,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,
0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xAE,0x00,0x32,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,
0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xAF,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,
0x00,0x06,0x00,0x00,0x00,0xB0,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,
0x00,0x00,0x00,0xB1,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,
0x00,0xB2,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB3,
0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB4,0x00,0x32,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB5,0x00,0x32,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,
0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB6,0x00,0x32,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,
0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB7,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,
0x00,0x06,0x00,0x00,0x00,0xB8,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,
0x00,0x00,0x00,0xB9,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,
0x00,0x4B,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x4C,
0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x4D,0x01,0x32,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x04,0x00,0x4E,0x01,0x32,0x00,0x40,
0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,
0x02,0x00,0x00,0x03,0x00,0x07,0x00,0x04,0x00,0x4F,0x01,0x32,0x00,0x40,0x01,0x50,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,
0x00,0x03,0x00,0x07,0x00,0x04,0x00,0x50,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,
0x00,0x07,0x00,0x04,0x00,0x51,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x00,0x07,
0x00,0x04,0x00,0x52,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x00,0x07,0x00,0x04,
0x00,0x53,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x00,0x07,0x00,0x04,0x00,0x54,
0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x00,0x07,0x00,0x04,0x00,0x55,0x01,0x32,
0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x58,0x02,0x00,0x00,0x03,0x00,0x07,0x00,0x04,0x00,0x56,0x01,0x32,0x00,0x40,
0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8C,
0x00,0x00,0x00,0x04,0x00,0x08,0x00,0x80,0x02,0x57,0x01,0x32,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,
0x00,0x05,0x00,0x08,0x00,0x00,0x04,0x58,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,
0x00,0x08,0x00,0x80,0x02,0x59,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x05,0x00,0x09,
0x00,0x04,0x00,0x1E,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x00,
0x00,0xBA,0x00,0x46,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0xA8,
0x01,0x00,0x00,0x68,0x01,0x72,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0xA7,0x01,0x00,
0x00,0x68,0x01,0x92,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0xAB,0x01,0x00,0x00,0x36,
0x01,0xB0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0xAA,0x01,0x00,0x00,0x68,0x01,0xB0,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0xAC,0x01,0x00,0x00,0x68,0x01,0xD2,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x00,0x04,0x00,0x7C,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x04,0x00,0x01,
0x00,0x04,0x01,0x00,0x00,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0x01,0x00,0x00,0x03,0x00,0x01,0x00,0x04,
0x00,0x2F,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x04,0x00,0x30,
0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x0C,0x00,0x00,0x00,0x60,0x01,0x32,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x0C,0x00,0x00,0x01,0x61,0x01,0x32,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x00,0x0D,0x00,0x00,0x00,0x5A,0x01,0x32,0x00,0x3C,0x00,0x68,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
//_UNKNOWN unk_E2690; // weak //x_BYTE_E25ED[0xa3]
//_UNKNOWN unk_E26C8; // weak //x_BYTE_E25ED[0xdb]
//_UNKNOWN unk_E28A8; // weak x_BYTE_E25ED[0x2BB]
//int16_t x_WORD_E28B6 = 1; // weak
/*x_WORD x_WORD_E2970y[51] =
{
0x0000,0x0000,0x0004,0x001E,0x011F,0x0290,0x0003,0x010E,0x0000,0x0000,0x0700,0x1F00,0x6F00,0x6603,0x0302,0x0E00,0x0001,//e2970
0x0000,0x0000,0x000B,0x0020,0x0356,0x0190,0x0003,0x010E,0x0000,0x0000,0x1100,0x2100,0x8B00,0x7201,0x0300,0x0E00,0x0001,//e2992
0x0000,0x0000,0x0013,0x0022,0x016D,0x01F8,0x0003,0x010E,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000//e29b4
};
*/


type_x_WORD_E2970 x_WORD_E2970x[6]={
{0,4,30,287,656,3,270,0},
{0,7,31,879,614,3,270,0},
{0,11,32,854,400,3,270,0},
{0,17,33,395,114,3,270,0},
{0,19,34,365,504,3,270,0},
{0,0,0,0,0,0,0,0} };
//end adress &x_WORD_E2970[52]
/*
void convert_x_WORD_E2970y_to_x_WORD_E2970() {
	for (int i = 0; i < 6; i++) {
		x_WORD_E2970x[i].dword_0 = *(Bit32u*)((Bit8u*)&x_WORD_E2970y + 17*i+0);
		x_WORD_E2970x[i].word_4 = *(Bit16u*)((Bit8u*)&x_WORD_E2970y + 17 * i + 4);
		x_WORD_E2970x[i].word_6 = *(Bit16u*)((Bit8u*)&x_WORD_E2970y + 17 * i + 6);
		x_WORD_E2970x[i].word_8 = *(Bit16u*)((Bit8u*)&x_WORD_E2970y + 17 * i + 8);
		x_WORD_E2970x[i].word_10 = *(Bit16u*)((Bit8u*)&x_WORD_E2970y + 17 * i + 10);
		x_WORD_E2970x[i].word_12 = *(Bit16u*)((Bit8u*)&x_WORD_E2970y + 17 * i + 12);
		x_WORD_E2970x[i].word_14 = *(Bit16u*)((Bit8u*)&x_WORD_E2970y + 17 * i + 14);
		x_WORD_E2970x[i].byte_16 = *((Bit8u*)&x_WORD_E2970y + 17 * i + 16);
	}
	FILE* file;
	fopen_s(&file, "savestruct_WORD_E2970.txt", "wt");
	for (int i = 0; i < 6; i++) {
		fprintf(file,"{%d,%d,%d,%d,%d,%d,%d,%d},", x_WORD_E2970x[i].dword_0, x_WORD_E2970x[i].word_4,
		x_WORD_E2970x[i].word_6,x_WORD_E2970x[i].word_8,x_WORD_E2970x[i].word_10,
		x_WORD_E2970x[i].word_12,x_WORD_E2970x[i].word_14,x_WORD_E2970x[i].byte_16);
	}
	fclose(file);

}
*/
void begin_plugin() {
	//convert_x_WORD_E2970y_to_x_WORD_E2970();
	//x_D41A0_BYTEARRAY_4_struct.dwordindex_2388 = 10022;//fix sound param
}

int16_t x_WORD_E29D6_not_movex = 0; // weak
char x_BYTE_E29E8 = 1; // weak
char x_BYTE_E29EC = 0; // weak
char x_BYTE_E29ED = 0; // weak
char x_BYTE_E29EE = 0; // weak
char x_BYTE_E29EF = 0; // weak
char x_BYTE_E29F0 = 0; // weak
char x_BYTE_E29F1 = 0; // weak
//int16_t x_WORD_E29F4 = 0; // weak
//int x_DWORD_E29F6 = 0; // weak
//int x_DWORD_E29FA = 0; // weak
//int x_DWORD_E29FE = 0; // weak
//int x_DWORD_E2A02 = 0; // weak
//char x_BYTE_E2A06 = '\0'; // weak
//_UNKNOWN unk_E2A08; // weak
Bit8s x_WORD_E2A14_sound_activel = 1; // weak
Bit8s x_WORD_E2A14_sound_activeh = 0; // weak
int x_DWORD_E2A18 = 0; // weak
int x_DWORD_E2A1C = 0; // weak
char x_BYTE_E2A20 = 0; // weak
Bit8u* x_WORD_E2A24 = 0; // weak
char x_BYTE_E2A28_speek = 0; // weak
int x_DWORD_E2A6C = 0; // weak
int x_DWORD_E2A70 = 0; // weak
char x_BYTE_E29E0 = 1; // weak




int x_DWORD_E36C4 = 0; // weak//50
int x_DWORD_E36C8 = 1; // weak
int16_t x_WORD_E36CC = 0; // weak
int16_t x_WORD_E36CE = 0; // weak
char x_BYTE_E36D0 = 0; // weak
char x_BYTE_E36D1 = 0; // weak
int16_t x_WORD_E36D4 = 0; // weak
char x_BYTE_E36DC[0x7c] = { 0x00,0x27,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x2D,0x3D,0x08,0x09,
0x51,0x57,0x45,0x52,0x54,0x59,0x55,0x49,0x4F,0x50,0x5B,0x5D,0x0D,0x00,0x41,0x53,
0x44,0x46,0x47,0x48,0x4A,0x4B,0x4C,0x3B,0x27,0x23,0x00,0x5C,0x5A,0x58,0x43,0x56,
0x42,0x4E,0x4D,0x2C,0x2E,0x2F,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2D,0x00,0x00,0x00,0x2B,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x2F,0x00,0x00,0x28,0x29,0x2F,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x2E,0x0D,0x00,0x40,0x01,0xC8,0x00,0x00,0x00,0x00,0x00 }; // weak//2b46dc
int x_DWORD_E3758 = 0; // weak
Bit16s x_WORD_E375C_mouse_position_x = 320; // weak
Bit16s x_WORD_E375E_mouse_position_y = 200; // weak
//int x_DWORD_E3760 = 13107520; // weak
char x_BYTE_E3766 = 0; // weak
int x_DWORD_E3768 = 0; // weak




int x_DWORD_E3794_sound_buffer3_lenght = 10; // weak
char x_BYTE_E3798_sound_active2 = 1; // weak
char x_BYTE_E3799_sound_card = 1; // weak
char x_BYTE_E379A = 0; // weak
char x_BYTE_E379B = 1; // weak
char x_BYTE_E379C = 1; // weak
Bit8u* x_DWORD_E37A0_sound_buffer2 = 0; // weak
Bit8u* x_DWORD_E37A4_sound_buffer3 = 0; // weak
Bit8u* x_DWORD_E37A8_sound_buffer1 = 0; // weak
char x_BYTE_E37AC = 0; // weak
Bit8s x_BYTE_E37AD_actual_sound = -1; // weak
char x_BYTE_E37AE = 0; // weak
int x_DWORD_E37B0 = 127; // weak
int16_t x_WORD_E37B4 = 1644; // weak
int16_t x_WORD_E37B6_sound_number = 0; // weak
char x_BYTE_E37B8 = 0; // weak
int x_DWORD_E37BC_sound_frequence = 0; // weak
int x_DWORD_E37F8_midi_volume = 127; // weak
char x_BYTE_E37FC_music = 1; // weak//2b47fc
char x_BYTE_E37FD = 1; // weak
char x_BYTE_E37FE = 0; // weak
int16_t x_WORD_E3800 = 0; // weak
int16_t x_WORD_E3802 = 0; // weak //2b4802
int16_t x_WORD_E3804 = 0; // weak
Bit8u* x_DWORD_E3808_music_header = 0; // weak
Bit8u* x_DWORD_E380C = 0; // weak
Bit8u* x_DWORD_E3810_music_data = 0; // weak
Bit8u x_BYTE_E3814 = 0; // weak
char x_BYTE_E3815 = 0; // weak
char x_BYTE_E3816 = 0; // weak
char x_BYTE_E3817 = 1; // weak
char x_BYTE_E3818 = 0; // weak
char x_BYTE_E3819 = 0; // weak
char x_BYTE_E381A = -1; // weak
int16_t x_WORD_E381C = 0; // weak
int16_t x_WORD_E381E = 0; // weak
int16_t x_WORD_E3820 = 0; // weak
int16_t x_WORD_E3822 = 0; // weak
int x_DWORD_E3824 = 0; // weak
int16_t x_WORD_E3828 = 0; // weak
int16_t x_WORD_E3834 = 0; // weak
int x_DWORD_E383C = 0; // weak
int x_DWORD_E3840 = 0; // weak
int x_DWORD_E3844 = 5; // weak
//_UNKNOWN unk_E3848; // weak
int16_t x_WORD_E387A = 0; // weak
int x_DWORD_E387C = 0; // weak
int x_DWORD_E3880 = 0; // weak
int x_DWORD_E3884 = 0; // weak
int x_DWORD_E3888 = 0; // weak
char x_BYTE_E388D = 0; // weak
int x_DWORD_E3890 = 0; // weak
//_UNKNOWN unk_E3894; // weak
//int16_t x_WORD_E3908 = 0; // weak
char x_BYTE_E390C_VGA_pal_not_begin = 0; // weak
char aSound_2[4096] = "SOUND\0"; // weak
char x_BYTE_E39A0 = 0; // weak
int16_t x_WORD_E39A4 = 0; // weak
int16_t x_WORD_E39A6 = 0; // weak
int16_t x_WORD_E39A8 = 0; // weak
int16_t x_WORD_E39AA = 0; // weak
int16_t x_WORD_E39AC = 0; // weak
int16_t x_WORD_E39AE = 0; // weak
int16_t x_WORD_E39B0 = 0; // weak
int16_t x_WORD_E39B2 = 0; // weak
int16_t x_WORD_E39B4 = 0; // weak
int16_t x_WORD_E39B6 = 0; // weak
char x_BYTE_E39B8 = 0; // weak
int x_DWORD_E39BC = 0; // weak
//_UNKNOWN unk_E39C0; // weak
//_UNKNOWN unk_E3A40; // weak
//_UNKNOWN unk_E3AC0; // weak
int x_DWORD_E3B40 = 0; // weak
int x_DWORD_E3B44 = 0; // weak
int16_t x_WORD_E3B4A = 0; // weak
int16_t x_WORD_E3B4C = 0; // weak
int16_t x_WORD_E3B4E = 0; // weak
char x_BYTE_E3B50 = 0; // weak
char x_BYTE_E3B51 = 0; // weak
int(*off_E3B90)() = &_null_int23_exit; // weak
int x_DWORD_E3B94 = 0; // weak
int16_t x_WORD_E3B98 = 32; // weak
int16_t x_WORD_E3B9A = 0; // weak
int16_t x_WORD_E3BA4 = 0; // weak
int16_t x_WORD_E3BA6 = 0; // weak
int16_t x_WORD_E3BA8 = 0; // weak
int16_t x_WORD_E3BAA = 0; // weak
int x_DWORD_E3BAC = 0; // weak
int x_DWORD_E3BB0 = 0; // weak
int x_DWORD_E3BB8 = 1; // weak
FILE* file_E3BE0; // weak
int x_DWORD_E3DE8 = 0; // weak
int x_DWORD_E3DF8 = 1024; // weak
int x_DWORD_E3DFC[6] = { 0x00000000,0x00000000,0x00000000,0x00000000,
0x6E676973,0x0027CA00 }; // weak//2B4DFC
//void(/*__noreturn*/ *off_E3E10)() = &sub_9BA00; // weak
int16_t seg_E3E14[5] = { 0xCA2C0160,0x01600027,
0x0027CA58,0xCA840160,0x01600027
}; // weak
char x_BYTE_E3E28 = 0; // weak
int x_DWORD_E3E2C = 0; // weak
//void* (*off_E3E30_mallocx)(size_t size) = &malloc; // weak
//int (*off_E3E34_freex)(void*) = &x_free; // weak
int x_DWORD_E3E3C = 0; // weak
int x_DWORD_E3E40 = 0; // weak
char x_BYTE_E3E44 = 0; // weak
char x_BYTE_E3E45 = 1; // weak
//char aBullfrog[9] = "Bullfrog"; // weak
char x_BYTE_E3E54[6] = { 0, 0, 0, 0, 0, 0 }; // weak
//AILTIMERCB x_DWORD_E3E5C_timer[] = { 0 }; // weak

int x_DWORD_E3E9C[0x10]; // weak//sound anything
//int x_DWORD_E3ED8 = 0; // weak//x_DWORD_E3E9C[0xf]
int x_DWORD_E3EDC[0x10]; // weak
int x_DWORD_E3F1C[0x10]; // weak
int x_DWORD_E3F5C[0x10]; // weak
//int x_DWORD_E3F98 = 0; // weak//x_DWORD_E3F5C[0xf]

//int x_DWORD_E3F9C[] = { 0 }; // weak
int x_DWORD_E3FDC = 0; // weak
//int16_t x_WORD_E3FE0 = 0; // weak
int x_DWORD_E3FE2 = 0; // weak
int x_DWORD_E3FE6 = 0; // weak
int x_DWORD_E3FEA = 0; // weak
int x_DWORD_E3FEE = 0; // weak
int x_DWORD_E3FF2 = 0; // weak
//int16_t x_WORD_E3FF6 = 0; // weak
int x_DWORD_E3FF8 = 0; // weak
int x_DWORD_E3FFC = 0; // weak
//int x_DWORD_E4000 = 0; // weak
Bit32u unk_E4004; // weak
int16_t x_WORD_E4A04 = 0; // weak
int x_DWORD_E4A08 = 0; // weak
Bit8u x_BYTE_E4A0C[128] =//table of sound
{
  0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,
  0x10,0x12,0x14,0x16,0x18,0x1A,0x1C,0x1E,
  0x20,0x22,0x24,0x26,0x28,0x2A,0x2C,0x2E,
  0x30,0x32,0x34,0x36,0x38,0x3A,0x3C,0x3E,
  0x40,0x42,0x44,0x46,0x48,0x4A,0x4C,0x4E,
  0x50,0x52,0x54,0x56,0x58,0x5A,0x5C,0x5E,
  0x60,0x62,0x64,0x66,0x68,0x6A,0x6C,0x6E,
  0x70,0x72,0x74,0x76,0x78,0x7A,0x7C,0x80,
  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
}; // idb
int x_DWORD_E4A8C = 0; // weak
int x_DWORD_E4A90 = 0; // weak
int x_DWORD_E4A94 = 0; // weak
char aSample[7] = "SAMPLE"; // weak
int x_DWORD_E4B18 = 0; // weak
int x_DWORD_E4B1C = 0; // weak
char aTimb_0[5] = "TIMB"; // weak
char x_BYTE_E4B2A = -1; // weak
char x_BYTE_E4B2B = -1; // weak
int x_DWORD_E4B2C = 0; // weak
int x_DWORD_E4C90 = 0; // weak
int x_DWORD_E4C94 = 0; // weak
int x_DWORD_E4CA4 = 0; // weak

char x_BYTE_E4CB4 = 0; // weak
int(/*__fastcall*/ *off_E4CBD)(x_DWORD) = &nullsub_3; // weak
int x_DWORD_E4CCC = 0; // weak
int x_DWORD_E4CD0 = 0; // weak
int x_DWORD_E4D10 = 0; // weak
int16_t x_WORD_E4D14 = 0; // weak
int16_t x_WORD_E4D16 = 0; // weak
char x_BYTE_E4D18 = 0; // weak
int(*off_E4D20)(x_DWORD, x_DWORD) = &_no_support_loaded; // weak
int x_DWORD_E4E1C = 0; // weak
int x_DWORD_E4E20 = 0; // weak
int x_DWORD_E4E24 = 0; // weak
int x_DWORD_E4E28 = 0; // weak
int x_DWORD_E4E2C = 0; // weak
int64_t qx_WORD_E4E30 = 0; // weak
int x_DWORD_E4E38 = 0; // weak
int16_t x_WORD_E4E3C = 0; // weak
Bit32s unk_E52EE; // weak
int x_DWORD_E731C = 16; // weak
int x_DWORD_E7320[257] = { 0,
//int x_DWORD_E7324[255] =//sound?//x_DWORD_E7320[1+
//{
  1647088,
  3294115,
  4941018,
  6587735,
  8234204,
  9880363,
  11526150,
  13171503,
  14816360,
  16460659,
  18104339,
  19747337,
  21389591,
  23031040,
  24671622,
  26311275,
  27949938,
  29587548,
  31224044,
  32859365,
  34493448,
  36126233,
  37757658,
  39387661,
  41016182,
  42643158,
  44268528,
  45892232,
  47514208,
  49134395,
  50752733,
  52369159,
  53983614,
  55596036,
  57206365,
  58814541,
  60420502,
  62024188,
  63625539,
  65224495,
  66820995,
  68414979,
  70006387,
  71595160,
  73181237,
  74764559,
  76345066,
  77922699,
  79497398,
  81069104,
  82637758,
  84203301,
  85765673,
  87324816,
  88880672,
  90433181,
  91982285,
  93527927,
  95070047,
  96608588,
  98143491,
  99674700,
  101202156,
  102725801,
  104245579,
  105761432,
  107273304,
  108781136,
  110284873,
  111784458,
  113279835,
  114770946,
  116257736,
  117740150,
  119218130,
  120691622,
  122160570,
  123624918,
  125084613,
  126539598,
  127989818,
  129435220,
  130875749,
  132311350,
  133741970,
  135167555,
  136588051,
  138003404,
  139413562,
  140818470,
  142218077,
  143612330,
  145001175,
  146384561,
  147762436,
  149134748,
  150501445,
  151862476,
  153217789,
  154567334,
  155911059,
  157248914,
  158580849,
  159906814,
  161226758,
  162540632,
  163848386,
  165149972,
  166445340,
  167734441,
  169017227,
  170293650,
  171563661,
  172827213,
  174084258,
  175334749,
  176578639,
  177815881,
  179046428,
  180270234,
  181487253,
  182697439,
  183900746,
  185097130,
  186286545,
  187468946,
  188644290,
  189812531,
  190973625,
  192127530,
  193274201,
  194413595,
  195545670,
  196670383,
  197787691,
  198897553,
  199999926,
  201094769,
  202182041,
  203261701,
  204333709,
  205398023,
  206454605,
  207503413,
  208544409,
  209577553,
  210602807,
  211620132,
  212629490,
  213630842,
  214624151,
  215609379,
  216586490,
  217555447,
  218516213,
  219468752,
  220413028,
  221349005,
  222276649,
  223195924,
  224106796,
  225009231,
  225903194,
  226788652,
  227665571,
  228533919,
  229393663,
  230244770,
  231087209,
  231920947,
  232745954,
  233562198,
  234369648,
  235168275,
  235958047,
  236738936,
  237510912,
  238273946,
  239028009,
  239773072,
  240509108,
  241236089,
  241953988,
  242662778,
  243362431,
  244052922,
  244734224,
  245406312,
  246069161,
  246722745,
  247367041,
  248002023,
  248627668,
  249243953,
  249850853,
  250448347,
  251036411,
  251615025,
  252184165,
  252743810,
  253293940,
  253834533,
  254365570,
  254887030,
  255398893,
  255901141,
  256393755,
  256876715,
  257350004,
  257813604,
  258267497,
  258711667,
  259146097,
  259570769,
  259985670,
  260390781,
  260786089,
  261171579,
  261547236,
  261913046,
  262268994,
  262615069,
  262951256,
  263277543,
  263593918,
  263900369,
  264196884,
  264483453,
  264760063,
  265026706,
  265283370,
  265530047,
  265766727,
  265993400,
  266210059,
  266416696,
  266613302,
  266799870,
  266976394,
  267142865,
  267299279,
  267445630,
  267581911,
  267708118,
  267824246,
  267930290,
  268026247,
  268112113,
  268187885,
  268253559,
  268309134,
  268354608,
  268389978,
  268415243,
  268430402,
  268435456
}; // idb
//int x_DWORD_E7720 = 268435456; // weak//x_DWORD_E7320[0x100+
int x_DWORD_E7724[257] = {// 0 }; // weak
//void *off_E7728[255] =//x_DWORD_E7724[+1
//{
  0x0FFFFA,
  0x1FFFD5,
  0x2FFF70,
  0x3FFEAA,
  0x4FFD65,
  0x5FFB80,
  0x6FF8DB,
  0x7FF556,
  0x8FF0D2,
  0x9FEB2F,
  0xAFE44D,
  0xBFDC0C,
  0xCFD24C,
  0xDFC6EF,
  0xEFB9D4,
  0xFFAADD,
  0x10F99EA,
  0x11F86DB,
  0x12F7193,
  0x13F59F0,
  0x14F3FD6,
  0x15F2324,
  0x16F03BD,
  0x17EE182,
  0x18EBC54,
  0x19E9415,
  0x1AE68A7,
  0x1BE39EB,
  0x1CE07C5,
  0x1DDD217,
  0x1ED98C2,
  0x1FD5BA9,
  0x20D1AB0,
  0x21CD5B9,
  0x22C8CA8,
  0x23C3F5F,
  0x24BEDC2,
  0x25B97B6,
  0x26B3D1D,
  0x27ADDDD,
  0x28A79D8,
  0x29A10F5,
  0x2A9A317,
  0x2B93023,
  0x2C8B7FF,
  0x2D83A91,
  0x2E7B7BD,
  0x2F72F69,
  0x306A17C,
  0x3160DDC,
  0x325746F,
  0x334D51D,
  0x3442FCC,
  0x3538463,
  0x362D2CA,
  0x3721AEA,
  0x3815CA9,
  0x39097F1,
  0x39FCCA9,
  0x3AEFABB,
  0x3BE2210,
  0x3CD4291,
  0x3DC5C28,
  0x3EB6EBF,
  0x3FA7A3F,
  0x4097E94,
  0x4187BA8,
  0x4277165,
  0x4365FB9,
  0x445468D,
  0x45425CE,
  0x462FD68,
  0x471CD48,
  0x4809559,
  0x48F558A,
  0x49E0DC8,
  0x4ACBDFF,
  0x4BB661E,
  0x4CA0613,
  0x4D89DCD,
  0x4E72D3A,
  0x4F5B44A,
  0x50432EB,
  0x512A90D,
  0x52116A1,
  0x52F7B96,
  0x53DD7DC,
  0x54C2B66,
  0x55A7623,
  0x568B805,
  0x576F0FE,
  0x5852100,
  0x59347FD,
  0x5A165E7,
  0x5AF7AB2,
  0x5BD8650,
  0x5CB88B5,
  0x5D981D4,
  0x5E771A2,
  0x5F55812,
  0x603351A,
  0x61108AE,
  0x61ED2C3,
  0x62C934E,
  0x63A4A45,
  0x647F79F,
  0x6559B50,
  0x6633551,
  0x670C597,
  0x67E4C19,
  0x68BC8CF,
  0x6993BB0,
  0x6A6A4B5,
  0x6B403D5,
  0x6C15908,
  0x6CEA447,
  0x6DBE58B,
  0x6E91CCD,
  0x6F64A07,
  0x7036D32,
  0x7108647,
  0x71D9542,
  0x72A9A1C,
  0x73794D0,
  0x7448559,
  0x7516BB2,
  0x75E47D6,
  0x76B19C1,
  0x777E16E,
  0x7849EDA,
  0x7915201,
  0x79DFADF,
  0x7AA9971,
  0x7B72DB5,
  0x7C3B7A6,
  0x7D03742,
  0x7DCAC88,
  0x7E91774,
  0x7F57805,
  0x801CE39,
  0x80E1A0F,
  0x81A5B84,
  0x8269298,
  0x832BF4A,
  0x83EE199,
  0x84AF984,
  0x857070B,
  0x8630A2D,
  0x86F02EB,
  0x87AF145,
  0x886D53B,
  0x892AECD,
  0x89E7DFD,
  0x8AA42CB,
  0x8B5FD37,
  0x8C1AD44,
  0x8CD52F2,
  0x8D8EE43,
  0x8E47F39,
  0x8F005D5,
  0x8FB821A,
  0x906F409,
  0x9125BA6,
  0x91DB8F1,
  0x9290BEE,
  0x93454A0,
  0x93F9309,
  0x94AC72C,
  0x955F10D,
  0x96110AF,
  0x96C2614,
  0x9773142,
  0x982323A,
  0x98D2902,
  0x998159C,
  0x9A2F80E,
  0x9ADD05B,
  0x9B89E86,
  0x9C36296,
  0x9CE1C8E,
  0x9D8CC72,
  0x9E37248,
  0x9EE0E15,
  0x9F89FDC,
  0xA0327A3,
  0xA0DA570,
  0xA181947,
  0xA22832D,
  0xA2CE329,
  0xA37393F,
  0xA418575,
  0xA4BC7D1,
  0xA560058,
  0xA602F11,
  0xA6A5401,
  0xA746F2D,
  0xA7E809D,
  0xA888856,
  0xA92865F,
  0xA9C7ABD,
  0xAA66578,
  0xAB04694,
  0xABA1E1A,
  0xAC3EC0F,
  0xACDB07A,
  0xAD76B62,
  0xAE11CCE,
  0xAEAC4C3,
  0xAF4634A,
  0xAFDF868,
  0xB078425,
  0xB110688,
  0xB1A7F98,
  0xB23EF5C,
  0xB2D55DB,
  0xB36B31C,
  0xB400727,
  0xB495202,
  0xB5293B6,
  0xB5BCC49,
  0xB64FBC2,
  0xB6E222A,
  0xB773F88,
  0xB8053E2,
  0xB895F42,
  0xB9261AD,
  0xB9B5B2D,
  0xBA44BC7,
  0xBAD3385,
  0xBB6126E,
  0xBBEE889,
  0xBC7B5DE,
  0xBD07A75,
  0xBD93656,
  0xBE1E988,
  0xBEA9414,
  0xBF33600,
  0xBFBCF56,
  0xC04601C,
  0xC0CE85B,
  0xC15681B,
  0xC1DDF62,
  0xC264E3B,
  0xC2EB4AB,
  0xC3712BC,
  0xC3F6875,
  0xC47B5DE,
  0xC4FFAFF,
  0xC5837E0,
  0xC606C8A,
  0xC689903,
  0xC70BD54,
  0xC78D986,
  0xC80ED9F,
  0xC88F9A8,
  0xC90FDAA
}; // idb
int16_t x_WORD_E7C58 = 0; // weak
Bit32u unk_E7C64x=0; // weak
double dbl_E7C6E = 1.7976931348623157e+308; // weak
float flt_E7C76 = 3.4028235e38; // weak
type_str_0x6E8E* x_DWORD_E8840; // weak
Bit8u x_BYTE_E88E0x[0x20]; // fix it - weak//2b98e0

// FIXED_FROM: Bit8u x_BYTE_E7EE0x[700*4*2]; // weak//2b8ee0
typedef struct {
	Bit32s dword0;
	Bit32s dword4;
	Bit32s dword8_E9980x_index;
	Bit32s dword12;
	Bit8u* ptr16;
	Bit32s dword20;
} type_E7EE0x;
std::array<type_E7EE0x, 100> x_BYTE_E7EE0x;

// FIXED_FROM: Bit8u x_BYTE_E9980x[0x1a0/*2*4*32*/]; // weak//2ba980 max 0x1a0
typedef struct {
	Bit8u* pos;
	int    counter;
} type_E9980x;
std::array<type_E9980x, 0x1a0> x_BYTE_E9980x;

std::array<filearray_struct, 4> x_DWORD_E9B20 = { 
	filearray_2aa18c[filearrayindex_FONTS0DATTAB],
	filearray_2aa18c[filearrayindex_MSPRDDATTAB],
	filearray_2aa18c[filearrayindex_HFONT3DATTAB],
	filearray_2aa18c[filearrayindex_MSPRDDATTAB] 
};

int x_DWORD_E9B90; // weak
int x_DWORD_E9BA8; // weak
type_E9C08* x_DWORD_E9C08x; // weak
int x_DWORD_E9C14; // weak
int x_DWORD_E9C18; // weak
int x_DWORD_E9C1C; // weak
int x_DWORD_E9C20; // weak
int x_DWORD_E9C24_fps; // weak

// FIXME: trying to remove x_DWORD_E9C28_str
type_x_DWORD_E9C28_str* x_DWORD_E9C28_str;

Bit8u* x_DWORD_E9C28x; // weak

Bit8u* pre_x_DWORD_E9C3C;
Bit8u* x_DWORD_E9C3C; // weak
char* x_DWORD_E9C4C_langindexbuffer[1000]; // idb
int x_DWORD_EA3B4; // weak?x_DWORD_E9C4C_langindexbuffer[474]
Bit8u x_DWORD_EA3B8[0x300]; // weak?x_DWORD_E9C4C_langindexbuffer[475]
/*int x_DWORD_EA3BC; // weak*/
int x_DWORD_EA3C0; // weak?x_DWORD_E9C4C_langindexbuffer[477]
int x_DWORD_EA3C4; // weak?x_DWORD_E9C4C_langindexbuffer[478]
int x_DWORD_EA3C8; // weak?x_DWORD_E9C4C_langindexbuffer[479]
int x_DWORD_EA3CC; // weak?x_DWORD_E9C4C_langindexbuffer[480]
int x_DWORD_EA3D0; // weak?x_DWORD_E9C4C_langindexbuffer[481]

type_str_0x6E8E* x_DWORD_EA3E4[0x3E9];//2bb3e4

axis_3d x_WORD_EB398ar; // weak
Bit8u x_BYTE_EB39E_keys[10]; // weak 0 - setting keys
Bit8u x_BYTE_EB3A8;
char x_BYTE_EB3B6; // weak 
Bit8u* x_DWORD_F01E4; // weak
void(*x_DWORD_F01E8)(Bit16s, Bit16s, posistruct); // eax
void(*x_DWORD_F01EC)(Bit16s, Bit16s, posistruct); // eax
Bit16u x_WORD_F01F4; // weak
char x_BYTE_F01FEx[34]; // fix it -  weak
char x_BYTE_F0220[256]; // idb
char x_BYTE_F0320[256]; // idb
char x_BYTE_F0420[256]; // idb
char x_BYTE_F0520[256]; // idb
char x_BYTE_F0620[256]; // idb
char x_BYTE_F0720[256]; // idb
char x_BYTE_F0820[256]; // idb
char x_BYTE_F0920[256]; // idb
Bit8u unk_F0A20x[0x400]; // weak//2c1a20
Bit8u unk_F0E20x[0x1e00]; // weak//2c1e20

typedef struct {
	Bit32s dword0x00;
	Bit32s dword0x01_rotIdx;
	Bit32s dword0x02_data;
	Bit32s dword0x03_screenX;
	Bit32s dword0x04_screenY;
	Bit32s dword0x05;
	Bit32s dword0x06_height;
	Bit32s dword0x07;
	Bit32s dword0x08_width;
	Bit32s dword0x09_realWidth;
	Bit32s dword0x0a_actIdx;
	Bit32s dword0x0b;
	Bit32s dword0x0c_realHeight;
	Bit32s dword0x0d;
	Bit32s dword0x0e;
	Bit32s dword0x0f;
	Bit32s dword0x10;
	Bit32s dword0x11;
	Bit32s dword0x12;
	Bit32s dword0x13;
	type_str_0x6E8E* dword0x14x;
	Bit32s dword0x15;
	Bit32s dword0x16;
	Bit32s dword0x17;
	Bit32s dword0x18;
	Bit32s dword0x19;
	Bit32s* dword0x1a;
	Bit32s dword0x1b;
	Bit32s dword0x1c;
	Bit32s dword0x1d;
	Bit32s dword0x1e;
	Bit32s dword0x1f;
	Bit32s dword0x20;
	Bit32s dword0x21;
	Bit32s dword0x22;
	Bit32s dword0x23;
	Bit32s dword0x24;
	Bit32s dword0x25;
	Bit32s dword0x26;
	Bit32s dword0x27;
}type_F2C20ar;
type_F2C20ar str_F2C20ar;

int16_t x_WORD_F2CC0; // weak
int16_t x_WORD_F2CC2; // weak
int16_t x_WORD_F2CC4; // weak
char x_BYTE_F2CC6; // weak
char x_BYTE_F2CC7; // weak

char x_BYTE_F2CD0x[7*7*7*7][2]; // 233cd0//4802 //4816
Bit8u x_BYTE_F3FA0ar[0x300]; // fix it -  weak

int x_DWORD_F42A0; // weak
int16_t x_WORD_F42A8; // weak
int16_t x_WORD_F42AE; // weak
type_str_164 unk_F42B0x[0x470]; // weak//2c52b0


POSITION x_DWORD_F4720; // weak
int16_t x_WORD_F4960[0x340]; // fix it -  weak
int16_t x_WORD_F4FE0[0x1a8]; // fix it -  weak

std::array<char, 504> x_BYTE_F5340;
std::array<Bit8u, 504> x_BYTE_F5538;

std::array<int, 504> x_DWORD_F5730; // related to tmaps00tab
std::array<Bit8u*, 504> x_DWORD_F5F10;
std::array<Bit32u*, 504> x_DWORD_F66F0x;

Bit8u x_BYTE_F6EE0_tablesx[0x14600];// (Bit8u*)&x_BYTE_F6EE0_tablesbuff;//animated sprites
Bit8u* x_BYTE_F6EE0_tablesx_pre = (Bit8u*)x_BYTE_F6EE0_tablesx;
Bit8u* x_BYTE_FAEE0_tablesx_pre = (Bit8u*)&x_BYTE_F6EE0_tablesx[0x4000];

Bit16u x_WORD_17B4E0; // 34c4e0
char x_BYTE_17D440[255]; // fix it -  weak
Bit8u unk_17D540[0x100]; // weak
int x_DWORD_17D640; // weak
int x_DWORD_17D644; // weak
int x_DWORD_17D648; // weak
char x_BYTE_17D650[6]; // weak
char x_BYTE_17D674[6]; // weak
int x_DWORD_17D698; // weak
int x_DWORD_17D6A0; // weak
int x_DWORD_17D6A4; // weak
int x_DWORD_17D6A8; // weak
int x_DWORD_17D6AC; // weak
int x_DWORD_17D6B0; // weak
int x_DWORD_17D6C4; // weak
int x_DWORD_17D6C8; // weak
int16_t x_WORD_17D6CCar[3]; // weak
Bit8u unk_17D6D4ar[0x32]; // weak

Bit8u x_WORD_17D70Aar[7]; // weak//

Bit32u x_DWORD_17D720[4]; // weak 0
Bit16u x_WORD_17D724; // weak 4
Bit16u x_WORD_17D726; // weak 6
int x_DWORD_17D730; // weak 
char x_BYTE_17D738[0x100]; // idb
Bit8u unk_17D838[0x300]; // weak
FILE* x_DWORD_17DB38_intro_file_handle; // weak
int(/*__fastcall*/ *x_DWORD_17DB3C)(); // weak
Bit16s x_WORD_17DB48; // weak
Bit16s x_WORD_17DB4A; // weak
Bit8u* x_DWORD_17DB50; // weak
int x_DWORD_17DB54_game_turn2; // weak
int16_t x_WORD_17DB5A; // weak
int16_t x_WORD_17DB5C; // weak
Bit16u x_WORD_17DB60; // weak

#pragma pack (1)
struct //lenght 50
{
	Bit32u x_DWORD_17DB70; // weak
	Bit16s x_WORD_17DB74; // weak 4
	Bit16s unk_17DB76_posx; // weak 6
	Bit16s unk_17DB78_posy; // weak 8
	Bit16s fill1; // test 10
	Bit16s fill2; // test 12
	Bit16s unk_17DB7E; // weak 14
	Bit16s unk_17DB80; // weak 16
	Bit16s x_WORD_17DB82_shift_step; // weak 18
	Bit16s x_WORD_17DB84; // weak 20
	Bit16s x_WORD_17DB86; // weak 22
	Bit16s x_WORD_17DB88; // weak 24
	Bit16s x_WORD_17DB8A; // weak 26
	Bit16s x_WORD_17DB8C; // weak 28
	Bit8s x_BYTE_17DB8E; // weak 30
	Bit8s x_BYTE_17DB8F; // weak 31
	Bit16s unk_17DB90; // weak 32
	Bit8u unk_17DB92[6]; // weak 32	
	Bit8u fill3[16]; // fill
} x_DWORD_17DB70str;

struct
{
	Bit32u unk_17DBA8; // weak 40
	Bit32u unk_17DBAC; //1(+4)
	Bit32u unk_17DBB0; //2(+8)
	Bit16u unk_17DBB4; //3(+12)
	Bit8u x_BYTE_17DBB5; //(+14)
	Bit8u x_BYTE_17DBB6; //(+15)
} unk_17DBA8str;//16
#pragma pack (16)

Bit32s x_DWORD_17DBB8[4]; // weak//x_DWORD_17DBB8[0]
int16_t x_WORD_17DBC4 = 0; // weak//x_DWORD_17DBB8[3] 34ebc4
char x_BYTE_17DBC6; // weak
Bit32u x_DWORD_17DBC8x[125];
Bit32u x_DWORD_17DDBCx[26];

#pragma pack (1)
struct//lenght 13
{
	Bit32s x_DWORD_17DE28; // weak x_DWORD_17DE28str
	Bit32s x_DWORD_17DE2C; // weak x_DWORD_17DE28str+4
	Bit16s x_WORD_17DE30_posx; // weak x_DWORD_17DE28str+8
	Bit16s x_WORD_17DE32_posy; // weak x_DWORD_17DE28str+10
	Bit8s x_BYTE_17DE34; // weak x_DWORD_17DE28str+12
} x_DWORD_17DE28str;
#pragma pack (16)

char x_BYTE_17E09D; // weak
char* x_DWORD_17E0A0[0x300]; // fix it -  weak
int x_DWORD_17E0A4[0x300]; // fix it -  weak
int x_DWORD_17E0A8[0x300]; // idb

Bit8u x_DWORD_17ECA0[4608]; // weak
int x_DWORD_17ECA4; // weak
int x_DWORD_17ECA8; // weak
int x_DWORD_17ECAC; // weak
char x_BYTE_17ECB0[1]; // fix it -  weak
char x_BYTE_17ECB1[4590]; // idb
int x_DWORD_17FEA0; // weak
int x_DWORD_17FEA4_mem_free; // weak
int x_DWORD_17FEA8_mem_used; // weak
int x_DWORD_17FEB0; // weak
int x_DWORD_17FEC0; // weak
int x_DWORD_17FEC4; // weak
int x_DWORD_17FEC8; // weak
int x_DWORD_17FECC; // weak
int x_DWORD_17FF0C; // weak
int x_DWORD_17FF10; // weak
int x_DWORD_17FF14; // weak
int16_t x_WORD_17FF18; // weak
int x_DWORD_17FF20; // weak
int x_DWORD_17FF24; // weak
int x_DWORD_17FF28=0; // weak
int x_DWORD_17FF38; // weak
int x_DWORD_17FF40; // weak
int x_DWORD_17FF44; // weak
int16_t x_WORD_17FF4A; // weak
int16_t x_WORD_17FF56; // weak
int16_t x_WORD_17FF58; // weak
int16_t x_WORD_17FF5A; // weak
int x_DWORD_180084[0x64]; // fix it -  weak
int x_DWORD_180214[101]; // idb
Bit8u unk_1803A8x[16]; // weak
int16_t x_WORD_1803AB; // weak
Bit8u unk_1803C0x[0x1a]; // weak
int16_t x_WORD_1803C3; // weak
int16_t x_WORD_1803E8; // weak
int16_t x_WORD_1803EA; // weak
char x_BYTE_1803EE[100]; // idb
Bit8u unk_180452ar[16]; // weak
int16_t x_WORD_180455; // weak
Bit8u unk_180460ar[16]; // weak
int16_t x_WORD_180463; // weak
Bit8u unk_180470ar[16]; // weak
char x_BYTE_180471; // weak
char x_BYTE_180472; // weak
int x_DWORD_180473; // weak
Bit8u unk_180484ar[16]; // weak
int x_DWORD_180486; // weak
char x_BYTE_18048A; // weak
Bit8u unk_18048Bar[16]; // weak
Bit32s unk_180498; // weak
char x_BYTE_18049E; // weak
char x_BYTE_1804A1; // weak

Bit8u unk_180560x[0x2c]; // weak
type_unk_18058Cstr unk_18058Cstr;

Bit32u x_DWORD_180624_resolution_y; // weak
Bit32u x_DWORD_18062C_resolution_x; // weak
int x_DWORD_180630_screen_height; // weak
int x_DWORD_180634_screen_width; // weak
int x_DWORD_180638; // weak
int x_DWORD_18063C_sprite_sizex; // weak
int x_DWORD_180640_help_screen_height; // weak
int x_DWORD_180644_map_resolution2_y; // weak
int x_DWORD_180648_map_resolution2_x; // weak
int x_DWORD_18064C_help_screen_width; // weak
int x_DWORD_180650_positiony; // weak
int x_DWORD_180654; // weak
int x_DWORD_180658; // weak
int x_DWORD_18065C; // weak
int16_t x_WORD_180660_VGA_type_resolution; // weak
int16_t x_WORD_180662_graphics_handle; // weak

char x_BYTE_1806E5; // weak
Bit8s x_DWORD_1806E8_mousex;
Bit8s x_DWORD_1806E8_mousey;
Bit16s unk_1806EC; // weak
Bit16s x_WORD_1806EE; // weak
Bit8u* x_DWORD_1806F0; // weak
int x_DWORD_1806F4_mouse_byte_index2; // weak
Bit16s x_DWORD_1806F8_mousex; // weak
Bit16s x_DWORD_1806F8_mousey; // weak
Bit16s x_DWORD_1806FC_mouse_invx; // weak
Bit16s x_DWORD_1806FC_mouse_invy; // weak
Bit8u* x_DWORD_180700; // weak
int x_DWORD_180704_mouse_byte_index1; // weak
Bit8u* x_DWORD_180708; // weak
Bit8u* x_DWORD_18070C; // weak
Bit8u* x_DWORD_180714; // weak
Bit8u* x_DWORD_180718; // weak
int x_DWORD_180720; // weak
Bit16u x_WORD_18072C_cursor_sizex; // weak
Bit16u x_WORD_18072E_cursor_sizey; // weak
Bit8u* x_DWORD_180730_cursor_data; // weak//351730
int x_DWORD_180734; // weak
int16_t x_WORD_180738; // weak
int x_DWORD_18073A; // weak
int16_t x_WORD_180744_mouse_right_button; // weak//351744
int16_t x_WORD_180746_mouse_left_button; // weak//351746
int16_t x_WORD_18074A_mouse_right2_button; // weak//35174a
int16_t x_WORD_18074C_mouse_left2_button; // weak//35174c
HSAMPLE unk_180750_sound_buffer3[50]; // weak -351750 23 // delka 3fc, tj 2c struktur o delce 17 end x_DWORD_180B4C_end_sound_buffer3
AIL_INI unk_180A30; // weak
int16_t x_WORD_180B30; // weak
HDIGDRIVER x_DWORD_180B48; // weak
Bit32u x_DWORD_180B4C_end_sound_buffer3_endindex;
int16_t x_WORD_180B50; // weak
AIL_INI unk_180B60; // weak
char unk_180BE0[512]; // weak
HSEQUENCE x_DWORD_180C78; // weak
HMDIDRIVER x_DWORD_180C7C; // weak
char x_BYTE_180C84_drivertype; // weak
char x_BYTE_1810A3[320]; // fix it -  weak
int16_t x_WORD_1811E4[400]; // fix it -  weak
char x_BYTE_181504[64]; // idb
Bit8u x_BYTE_181544_oldpalbuffer[768]; // idb
Bit32u unk_181B42 = 0; // weak
Bit16s x_WORD_181B44=0; // weak
char unk_181B50[512]; // weak
int x_DWORD_181BE0; // weak
int x_DWORD_181BE4_number_of_disc; // weak
FILE* x_DWORD_181BF0_AIL_debugfile; // weak
int x_DWORD_181BF4 = 0; // weak//352bf4
int x_DWORD_181BF8; // weak
int x_DWORD_181BFC; // weak
int x_DWORD_181C04 = 0; // weak 352c04
int x_DWORD_181C08; // weak
int x_DWORD_181C0C; // weak
int x_DWORD_181C10; // weak
char x_DWORD_181C14[256]; // weak
Bit8u x_BYTE_181C2C; // weak
Bit8u* x_DWORD_181C40_vga_init_buffer; // weak
int16_t x_WORD_181C44; // weak
AIL_DRIVER* x_DWORD_181C50[16]; // idb
char x_BYTE_181C90[513]; // weak
IO_PARMS unk_181D90; // weak
 
type_x_DWORD_17DE38str x_DWORD_17DE38str;
int16_t x_WORD_1803EC; // weak
int x_DWORD_181DAC[19]; // fix it -  weak
IO_PARMS unk_181DF8; // weak
HSAMPLE x_DWORD_181E10; // weak
int x_DWORD_181E26; // weak
int16_t x_WORD_181E2A; // weak
int x_DWORD_181E2C; // weak
int16_t x_WORD_181E30; // weak
int unk_181E80x[3]; // weak
int x_DWORD_181E8C; // weak
int x_DWORD_181E90; // weak
int x_DWORD_181E94; // weak
int x_DWORD_181E98; // weak
int x_DWORD_181E9C; // weak
int x_DWORD_181EA0; // weak
int x_DWORD_181EB0; // weak
int x_DWORD_181EB4; // weak
HSEQUENCE x_DWORD_181EB8; // weak
int x_DWORD_181EBC; // weak
int x_DWORD_181EC0; // weak
int x_DWORD_181EC4; // weak
int x_DWORD_181EC8; // weak
int x_DWORD_181ECC; // weak
int x_DWORD_181ED0; // weak
int x_DWORD_181ED4; // weak
int x_DWORD_181ED8; // weak
int x_DWORD_181EDC; // weak
Bit8u unk_181EE0x[512]; // weak
signed int x_DWORD_182188[6]; // idb
signed int x_DWORD_1821A0[6]; // idb
signed int x_DWORD_1821B8[6]; // idb
signed int x_DWORD_1821D0[6]; // idb
signed int x_DWORD_1821E8[6]; // idb

char sub_7C200(Bit8u a1);

void AIL_fix() {
	myprintf("Unsupported sound call");
	exit(0);
};

void dbgfprintf(FILE* file, const char *format, ...) {
	fprintf(file, format);
	fprintf(file, "\n");
}

signed int sub_916F0_sound_proc24()
{
	int i; // [esp+4h] [ebp-14h]
	int j; // [esp+4h] [ebp-14h]
	int v3; // [esp+8h] [ebp-10h]
	struct tm *timeptr; // [esp+Ch] [ebp-Ch]
	time_t timer; // [esp+10h] [ebp-8h]
	int v6; // [esp+14h] [ebp-4h]

	sub_A0EEC_s_plus2();
	v6 = x_DWORD_181BFC;
	timer = x_DWORD_181C0C;
	timeptr = (struct tm *)x_DWORD_181C08;
	v3 = x_DWORD_181C10;
	sub_A0EF9_s_minus2();
	if (x_DWORD_181C04 == 1)
	{
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "[%.02u:%.02u:%.02u.%.02u] ", v6, timer, timeptr, v3);
	}
	else
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
	}
	for (j = 1; j < x_DWORD_181C04; j++)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
	return 1;
}

char* mygetenv(const char *a1);
//void sub_91660(HMDIDRIVER user);
void sub_917D0()
{
	struct tm *timeptr; // eax
	char* v2; // eax
	time_t timer; // [esp+10h] [ebp-8h]
	char* v6; // [esp+14h] [ebp-4h]

	sub_915A0_sound_proc23();
	x_DWORD_181BF4 = 0;
	x_DWORD_181BF8 = 0;
	v6 = mygetenv("AIL_DEBUG");
	if (!v6)
	{
		sub_9EC30();
		return;
	}
	if (mygetenv("AIL_SYS_DEBUG"))
		x_DWORD_181BF8 = 1;
	x_DWORD_181BF0_AIL_debugfile = myopent(v6, (char*)"w+t"/*(char*)"haw+t"*/);
	if (!x_DWORD_181BF0_AIL_debugfile)
	{
		sub_9EC30();
		return;
	}
	/*if (isatty(*(_DWORD *)(x_DWORD_181BF0_AIL_debugfile + 16)))
		setbuf(x_DWORD_181BF0_AIL_debugfile, 0);*/ // fix
	time(&timer);
	timeptr = (struct tm *)localtime(&timer);
	v2 = asctime(timeptr);
	strcpy(x_DWORD_181C14, v2);
	x_BYTE_181C2C = 0;
	dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "-----------------------------------------------------------------");
	dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Audio Interface Library application usage script generated by AIL", "3.03");
	dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Start time: %s", x_DWORD_181C14);
	/*v3 = */dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "-----------------------------------------------------------------");
	sub_9EC30(/*v3*/);
	x_DWORD_181BFC = 0;
	x_DWORD_181C0C = 0;
	x_DWORD_181C08 = 0;
	x_DWORD_181C10 = 0;
	//x_DWORD_181C00 = sub_A16AE_register_timer(sub_91660);
	//sub_A1840_AIL_API_set_timer_frequency(x_DWORD_181C00, 100);
	///*v4 = */sub_A1768_start_timer(x_DWORD_181C00);
	x_DWORD_181BF4 = 1;
	x_DWORD_181C04 = 1;
	sub_916F0_sound_proc24(/*v4*/);
	x_DWORD_181C04 = 0;
	dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_startup()");
}

char* mygetenv(const char *a1)//27ae33
{
	//_dupenv_s(&v7, &sz, "MDMUSIC");
	char** v1; // ebx
	unsigned int v2; // kr04_4
	int v3; // edi
	char* v5; // esi

	v1 = (char**)dword_E4CC4;//2b5cc4
	if (dword_E4CC4 && a1)
	{
		v2 = strlen(a1) + 1;
		v3 = v2 - 1;
		while (1)
		{
			v5 = v1[0];
			if (!v1[0])
				break;
			if (!strnicmp(v5, a1, v3) && v5[v3] == 61)
				return &v5[v2];
			v1++;
		}
	}
	return 0;
}


//----- (00010010) --------------------------------------------------------
int16_t sub_10010()
{
	if (x_BYTE_D3F48)
		return 1;
  x_BYTE_D3F48 = 1;
	return 0;
}

//----- (00010080) --------------------------------------------------------
unsigned int sub_10080(int a1, int a2)//1f1080
{
	int i;
	int v4;

	// FIXED_FROM:
	//for (i = 1; i < 0x64 && *(Bit32s*)&x_BYTE_E7EE0x[8+4*6*i] != -1; ++i)
	//	;
	//*(Bit32s*)&x_BYTE_E7EE0x[4*6*i] = (Bit32u)a1;
	//*(Bit32s*)&x_BYTE_E7EE0x[8+ 4 * 6 * i] = (Bit32u)a1;
	//*(Bit32s*)&x_BYTE_E7EE0x[0xc + 4 * 6 * i] = 0;
	//v4 = (int)*(Bit32s*)&x_BYTE_E7EE0x[8 + 4 * 6 * i];
	//*(Bit32s*)&x_BYTE_E7EE0x[4 + 4 * 6 * i] = a2;
	for (i = 1; i < 100 && x_BYTE_E7EE0x.at(i).dword8_E9980x_index != -1; ++i)
		;
	x_BYTE_E7EE0x.at(i).dword0 = a1;
	x_BYTE_E7EE0x.at(i).dword8_E9980x_index = a1;
	x_BYTE_E7EE0x.at(i).dword12 = 0;
	v4 = x_BYTE_E7EE0x.at(i).dword8_E9980x_index;
	x_BYTE_E7EE0x.at(i).dword4 = a2;

	Bit8u* v5 = x_BYTE_E9980x.at(v4).pos; // FIXED_FROM: v5 = (Bit8u*)&(*(Bit32s*)&x_BYTE_E9980x[6*v4]);

	// FIXED_FROM:
	// *(Bit32s*)&x_BYTE_E7EE0x[0x10+4*6*i] = (Bit32s)v5;
	// *(Bit32s*)&x_BYTE_E7EE0x[0x14+4*6*i] = *(Bit32s*)v5;
	x_BYTE_E7EE0x.at(i).ptr16 = v5;
	x_BYTE_E7EE0x.at(i).dword20 = *reinterpret_cast<Bit32s*>(v5);

	return i;
}

//----- (00010100) --------------------------------------------------------
void sub_10100(int a1)//1f1100
{
	x_BYTE_E7EE0x.at(a1).dword8_E9980x_index = -1;
	//return 1;
}

int debugcounter_1f1130;

//----- (00010130) --------------------------------------------------------
signed int sub_10130(int a1, x_DWORD *a2, x_DWORD *a3)//1f1130
{
	//int *v3; // eax
	Bit32u v4; // edx
	Bit8u* v5; // ecx
	Bit32u v6; // ebx
	Bit8u* v7; // esi
	Bit32s v8; // edi
	Bit32s v9; // ebx
	signed int result; // eax

	v4 = x_BYTE_E7EE0x.at(a1).dword20;
	v5 = x_BYTE_E7EE0x.at(a1).ptr16;
	*a2 = BYTEn(v4, 0);
	*a3 = BYTEn(v4, 1);
	v6 = x_BYTE_E7EE0x.at(a1).dword12;
	x_BYTE_E7EE0x.at(a1).dword20 += 4;
	x_BYTE_E7EE0x.at(a1).dword12 = v6;
	if (*(Bit16u*)(v5 + 4) > (Bit32u)v6)
	{
		result = 1;
	}
	else
	{
		//test and fix it
		//v7 = v3[4];
		v7 = x_BYTE_E7EE0x.at(a1).ptr16;
		//v3[3] = 0;
		x_BYTE_E7EE0x.at(a1).dword12 = 0;
		//v8 = v3[2];
		v8 = x_BYTE_E7EE0x.at(a1).dword8_E9980x_index;
		//v3[4] = v7 + 6;
		x_BYTE_E7EE0x.at(a1).ptr16 = v7 + 6;
		v8++;
		//v9 = v3[1];
		v9 = x_BYTE_E7EE0x.at(a1).dword4;
		//v3[2] = v8;
		x_BYTE_E7EE0x.at(a1).dword8_E9980x_index = v8;
		if (v8 <= v9)
		{
			result = 1;
		}
		else
		{
			result = 2;
		}
	}
	return result;
}



//----- (000101C0) --------------------------------------------------------
void sub_101C0()//1f11c0
{
	Bit8u* v0; // esi
	Pathstruct v3; // edx
	char v7; // ah
	char v8; // [esp+4h] [ebp-Ch]
	char v9; // [esp+8h] [ebp-8h]

	//fix
	v0 = 0;
	//fix

	// TODO: what is SEARCH.DAT?
	sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_search_dat).c_str(), xawscreen_351628.var28_begin_buffer);//2A1004,351628->3AA0A4
	//v1 = 1;
	for (int k = 1; k < 100; k++)
	{
		x_BYTE_E7EE0x.at(k).dword8_E9980x_index = -1;
	}
	//v3/*edx*/ = dword_E9C30[0];//002bac30 //je to v 23c8d0,23cf50,265250,27B32d, nekde u 27b453
	//result = 0;
	v3 = xasearchd_2bac30;//
	Bit32u l = 0;
	for (Bit16u k = 0;k < 32;k++)
	{
		//v5 = 3 * result;
		x_BYTE_E9980x.at(k).pos = *v3.var28_begin_buffer + l; // FIXED_FROM: *(Bit32s*)&x_BYTE_E9980x[6 * k] = (Bit32s)(*v3.var28_begin_buffer + l);
		x_BYTE_E9980x.at(k).counter = 0; // FIXED_FROM: *(Bit16s*)&x_BYTE_E9980x[4 + 6 * k] = 0;
		for (Bit16u j = 0;j < 32;j++)
		{
			for (Bit16u i = 0; i < 32; i++)//1F1212
			{
				v7 = (*xawscreen_351628.var28_begin_buffer)[i + 32 * j];
				if (k == v7)
				{
					if (!v7 && (*v3.var28_begin_buffer+l) == *xasearchd_2bac30.var28_begin_buffer)
					{
						v8 = i;
						v9 = j;
					}
					//adress 1f1267
					*(*v3.var28_begin_buffer+l) = (i - v8);
					*(*v3.var28_begin_buffer+1 +l) = (j - v9);
					*(*v3.var28_begin_buffer + 2 + l) = k;
					l += 4;
					x_BYTE_E9980x.at(k).counter++; // FIXED_FROM: (*(Bit16s*)&x_BYTE_E9980x[4+6*k])++;
				}
			}
		}
	}
	/*
	38001a00 0400 48001a00 0c00 78001a00 1000 b8001a00 1400 08011a00 1c00
	*/
}

//----- (000102D0) --------------------------------------------------------
int sub_102D0(type_str_0x6E8E* a1x, axis_3d* a2, char a3)//1f12d0
{
	int v3; // esi
	int result; // eax
	int v5; // esi
	int16_t v6; // ax
	int v7; // edi
	int v8; // esi
	Bit32u v9; // eax
	uint16_t v10; // ax
	int16_t v11; // ax
	int16_t v12; // si
	int16_t v13; // ax
	signed int v14; // ebx
	signed int v15; // ebx
	axis_3d v16x; // [esp+0h] [ebp-Ch]
	//int16_t v17; // [esp+4h] [ebp-8h]
	int v18; // [esp+8h] [ebp-4h]

	if (a3 & 2)
	{
		v3 = a1x->dword_0xA0_160x->word_160_0xc_12;
		if (a2->z < v3 + (int16_t)sub_10C40_getTerrainAlt(a2))
			return 1;
		v5 = a1x->dword_0xA0_160x->word_160_0xa_10;
		if (a2->z > (int16_t)sub_10C40_getTerrainAlt(a2) + v5)
			return 1;
	}
	if (a3 & 1)
	{
		v16x=*a2;
		v6 = a1x->array_0x52_82.xshift;
		if (v6 <= a1x->array_0x52_82.yshift)
			v6 = a1x->array_0x52_82.yshift;
		v7 = v6;
		v8 = 0;
		while (v8 <= v7)
		{
			v18 = ~a1x->dword_0xA0_160x->dword_160_0x14_20;
			v9 = sub_104D0_terrain_tile_is_water(&v16x);
			result = v18 & v9;
			if (result)
				return result;
			if (x_BYTE_D41B6)
			{
				LOBYTE(v10) = v16x.x >> 8;
				HIBYTE(v10) = v16x.y >> 8;
				if (x_BYTE_13B4E0_angle[v10] & 8)
					return 1;
				if (sub_11E70(a1x, &v16x))
					return 1;
			}
			v8 += 256;
			sub_57FA0(&v16x, a1x->word_0x1C_28, 0, 256);
		}
	}
	if (a3 & 4)
	{
		v11 = sub_58210_radix_tan(&a1x->array_0x4C_76, a2);
		v12 = v11;
		v13 = sub_582F0(0, v11);
		if (v13 < 0)
		{
			if (v13 == -1)
			{
				v15 = a1x->dword_0xA0_160x->word_160_0x10_16;
				if ((uint16_t)sub_582B0(0, v12) > v15)
					return 1;
			}
		}
		else if (v13 > 0 && v13 == 1)
		{
			v14 = a1x->dword_0xA0_160x->word_160_0x12_18;
			if ((uint16_t)sub_582B0(0, v12) > v14)
				return 1;
		}
	}
	return 0;
}

//----- (000104A0) --------------------------------------------------------
signed int sub_104A0(axis_3d* a1x)//1f14a0
{
	Bit16u v1; // ax

	v1 = (a1x->x>>8)+((a1x->y>>8)<<8);
	return 1 << (x_BYTE_13B4E0_angle[v1] & 0xF);
}

//----- (000104D0) --------------------------------------------------------
Bit32u sub_104D0_terrain_tile_is_water(axis_3d* a1)//1f14d0
{
	uaxis_2d v1x; // eax

	v1x._axis_2d.x = a1->x >> 8;
	v1x._axis_2d.y = a1->y >> 8;
	return sub_10590_terrain_tile_type(x_BYTE_10B4E0_terraintype[v1x.word]);
}

//----- (00010590) --------------------------------------------------------
Bit32u sub_10590_terrain_tile_type(char a1)//1f1590
{
	Bit32u result; // eax

	result = 0;
	switch (a1)
	{
	case 0:
		result = 1;
		break;
	case 1:
		result = 2;
		break;
	case 2:
		result = 4;
		break;
	case 3:
		result = 8;
		break;
	case 4:
		result = 0x10;
		break;
	case 5:
		result = 0x20;
		break;
	case 8:
		result = 0x100;
		break;
	case 9:
		result = 0x200;
		break;
	case 10:
		result = 0x100000;
		break;
	case 11:
		result = 0x200000;
		break;
	case 12:
		result = 0x400000;
		break;
	case 13:
	case 14:
		return result;
	case 15:
	case 16:
	case 17:
	case 18:
	case 19:
	case 20:
	case 28:
	case 29:
	case 30:
	case 31:
	case 32:
	case 33:
	case 34:
		result = 0x400;
		break;
	case 21:
	case 22:
	case 24:
		result = 0x20000;
		break;
	case 23:
		result = 0x40000;
		break;
	case 25:
	case 27:
		result = 0x80000;
		break;
	case 26:
		result = 0x10000;
		break;
	default:
		result = 0x800000;
		break;
	}
	return result;
}

//----- (00010630) --------------------------------------------------------
bool sub_10630(axis_3d* a1, axis_4d* a2, axis_3d* a3, axis_4d* a4)//1f1630
{
	return (abs((Bit16s)((Bit16s)a3->x - (Bit16s)a1->x)) < (Bit16s)a2->xshift + (Bit16s)a4->xshift)
		&& (abs((Bit16s)((Bit16s)a3->y - (Bit16s)a1->y)) < (Bit16s)a2->yshift + (Bit16s)a4->yshift)
		&& (abs(((Bit16s)a1->z + (Bit16s)a2->aa - (Bit16s)a3->z - (Bit16s)a4->aa)) < (Bit16s)a2->dd + (Bit16s)a4->dd);
}

//----- (000106C0) --------------------------------------------------------
bool sub_106C0(type_str_0x6E8E* a1, type_str_0x6E8E* a2)//1f16c0
{
	return sub_10630(&a1->array_0x4C_76, &a1->array_0x52_82, &a2->array_0x4C_76, &a2->array_0x52_82);
}

//----- (000106F0) --------------------------------------------------------
bool sub_106F0(axis_3d* a1, axis_4d* a2, axis_3d* a3, axis_4d* a4)//1f16f0
{
	return (abs((Bit16s)((Bit16s)a3->x - (Bit16s)a1->x)) < (Bit16s)a2->xshift + (Bit16s)a4->xshift)
		&& (abs((Bit16s)((Bit16s)a3->y - (Bit16s)a1->y)) < (Bit16s)a2->yshift + (Bit16s)a4->yshift);
}

//----- (00010750) --------------------------------------------------------
bool sub_10750(type_str_0x6E8E* a1, type_str_0x6E8E* a2)//1f1750
{
	return sub_106F0(&a1->array_0x4C_76, &a1->array_0x52_82, &a2->array_0x4C_76, &a2->array_0x52_82);
}

//----- (00010780) --------------------------------------------------------
type_str_0x6E8E* sub_10780(type_str_0x6E8E* a1x)//1f1780
{
	int v1; // edx
	int v2; // edi
	int i; // eax
	type_str_0x6E8E* v5x; // ebx
	int v6; // [esp+0h] [ebp-10h]
	int v7; // [esp+4h] [ebp-Ch]
	int v8; // [esp+8h] [ebp-8h]
	int v9; // [esp+Ch] [ebp-4h]

	v8 = (a1x->array_0x4C_76.x + 128) >> 8;
	v1 = a1x->array_0x52_82.xshift + 255;
	v9 = (a1x->array_0x4C_76.y + 128) >> 8;
	//v2 = sub_10080(0, (v1 - (__CFSHL__(v1 >> 31, 8) + (v1 >> 31 << 8))) >> 8);
	v2 = sub_10080(0, (v1 - (my_sign32(v1) * 255) >> 8));
	if (v2)
	{
		while (sub_10130(v2, &v7, &v6) == 1)
		{
			for (i = x_WORD_15B4E0_source[((uint8_t)(v9 + v6) << 8) + (uint8_t)(v7 + v8)];
				;
				i = v5x->word_0x16_22)
			{
				//myprintf("%d\n",i);
				v5x = x_DWORD_EA3E4[i];
				if (v5x == x_DWORD_EA3E4[0])
					break;
				if (v5x->struct_byte_0xc_12_15.byte[0] & 8
					&& (a1x->byte_0x41_65 == -1
						|| a1x->byte_0x41_65 == v5x->byte_0x3F_63 && a1x->byte_0x42_66 == -1
						|| a1x->byte_0x41_65 == v5x->byte_0x3F_63 && a1x->byte_0x42_66 == v5x->byte_0x40_64)
					&& a1x->word_0x1A_26 != v5x->word_0x1A_26
					&& sub_106C0(a1x, v5x))
				{
					sub_10100(v2);
					return v5x;
				}
			}
		}
		sub_10100(v2);
	}
	return 0;
}

//----- (000108B0) --------------------------------------------------------
type_str_0x6E8E* sub_108B0(type_str_0x6E8E* a1x)//1f18b0
{
	int v1; // edx
	int v2; // edi
	int i; // eax
	uint8_t v4; // al
	uint8_t v5; // al
	int16_t v6; // ax
	type_str_0x6E8E* v8x; // ebx
	int v9; // [esp+0h] [ebp-14h]
	int v10; // [esp+4h] [ebp-10h]//4
	int v11; // [esp+8h] [ebp-Ch]//8
	int v12; // [esp+Ch] [ebp-8h]//12
	char v13; // [esp+10h] [ebp-4h]//16//17

	v11 = (a1x->array_0x4C_76.x + 128) >> 8;
	v1 = a1x->array_0x52_82.xshift + 255;
	v12 = (a1x->array_0x4C_76.y + 128) >> 8;
	//v2 = sub_10080(0, (v1 - (__CFSHL__(v1 >> 31, 8) + (v1 >> 31 << 8))) >> 8);
	v2 = sub_10080(0, (v1 - (my_sign32(v1) * 255) >> 8));
	if (v2)
	{
	LABEL_29:
		if (sub_10130(v2, &v10, &v9) != 1)
		{
			sub_10100(v2);
			return 0;
		}
		for (i = x_WORD_15B4E0_source[((uint8_t)(v12 + v9) << 8) + (uint8_t)(v10 + v11)];
			;
			i = v8x->word_0x16_22)
		{
			v8x = x_DWORD_EA3E4[i];
			if (v8x == x_DWORD_EA3E4[0])
				goto LABEL_29;
			if (v8x->struct_byte_0xc_12_15.byte[0] & 8)
				break;
		LABEL_27:
			;
		}
		v4 = v8x->byte_0x3F_63;
		v13 = 0;
		if (v4 >= 5u)
		{
			if (v4 <= 5u)
			{
				if (v8x->byte_0x3F_63 != 22)
					goto LABEL_22;
			}
			else
			{
				if (v4 != 10)
					goto LABEL_22;
				v5 = v8x->byte_0x40_64;
				if (v5 < 0x2Du)
				{
					if (v5 < 0x27u || v5 > 0x28u)
						goto LABEL_22;
				}
				else
				{
					if (v5 > 0x2Du)
					{
						if (v5 == 57 && v8x->word_0x28_40 != a1x->word_0x1A_26 && sub_106C0(a1x, v8x))
						{
							sub_10100(v2);
							return v8x;
						}
						goto LABEL_22;
					}
					if (x_WORD_D93C0_bldgprmbuffer[2+4 * v8x->byte_0x46_70] & 8)
						goto LABEL_22;
				}
			}
			v13 = 1;
		}
	LABEL_22:
		if (v13)
		{
			v6 = a1x->word_0x1A_26;
			if (v6 != v8x->word_0x1A_26 && v6 != v8x->word_0x94_148 && sub_106C0(a1x, v8x))
			{
				sub_10100(v2);
				return v8x;
			}
		}
		goto LABEL_27;
	}
	return 0;
}

//----- (00010A50) --------------------------------------------------------
type_str_0x6E8E* sub_10A50(type_str_0x6E8E* a1x)//1f1a50
{
	int v1; // edx
	int v2; // edi
	int i; // eax
	type_str_0x6E8E* v5x; // ebx
	int v6; // [esp+0h] [ebp-10h]
	int v7; // [esp+4h] [ebp-Ch]
	int v8; // [esp+8h] [ebp-8h]
	int v9; // [esp+Ch] [ebp-4h]

	v8 = (a1x->array_0x4C_76.x + 128) >> 8;
	v1 = a1x->array_0x52_82.xshift + 255;
	v9 = (a1x->array_0x4C_76.y + 128) >> 8;
	//v2 = sub_10080(0, (v1 - (__CFSHL__(v1 >> 31, 8) + (v1 >> 31 << 8))) >> 8);
	v2 = sub_10080(0, (v1 - (my_sign32(v1) * 255) >> 8));
	if (v2)
	{
		while (sub_10130(v2, &v7, &v6) == 1)
		{
			for (i = x_WORD_15B4E0_source[((uint8_t)(v9 + v6) << 8) + (uint8_t)(v7 + v8)];
				;
				i = v5x->word_0x16_22)
			{
				v5x = x_DWORD_EA3E4[i];
				if (v5x == x_DWORD_EA3E4[0])
					break;
				if ((a1x->byte_0x41_65 == -1
					|| a1x->byte_0x41_65 == v5x->byte_0x3F_63 && a1x->byte_0x42_66 == -1
					|| a1x->byte_0x41_65 == v5x->byte_0x3F_63 && a1x->byte_0x42_66 == v5x->byte_0x40_64)
					&& a1x->word_0x1A_26 != v5x->word_0x1A_26
					&& sub_106C0(a1x, v5x))
				{
					sub_10100(v2);
					return v5x;
				}
			}
		}
		sub_10100(v2);
	}
	return 0;
}

//----- (00010B70) --------------------------------------------------------
signed int sub_10B70(axis_3d* a1x, char a2, char a3)//1f1b70
{
	int16_t v3; // si
	int16_t i; // di
	type_str_0x6E8E* jx; // ebx
	int v8; // [esp+0h] [ebp-8h]
	int v9; // [esp+4h] [ebp-4h]

	v9 = (a1x->x - 128) >> 8;
	v3 = 0;
	v8 = (a1x->y - 128) >> 8;
	while (v3 < 2)
	{
		for (i = 0; i < 2; i++)
		{
			for (jx = x_DWORD_EA3E4[x_WORD_15B4E0_source[((uint8_t)(v8 + v3) << 8) + (uint8_t)(v9 + i)]];
				jx > x_DWORD_EA3E4[0];
				jx = x_DWORD_EA3E4[jx->word_0x16_22])
			{
				if (jx->byte_0x3F_63 == a2 && a3 == jx->byte_0x40_64 && sub_583F0_distance_3d(a1x, &jx->array_0x4C_76) <= 0x80)
					return 1;
			}
		}
		v3++;
	}
	return 0;
}

//----- (00010C40) --------------------------------------------------------
int sub_10C40_getTerrainAlt(axis_3d* a1x)//1f1c40
{
	return sub_B5C60_getTerrainAlt2(a1x->x, a1x->y);
}

//----- (00010C60) --------------------------------------------------------
int sub_10C60(axis_3d* a1)//1f1c60
{
	return sub_B5D68(a1->x, a1->y);
}

int debugcounter_10c80 = 0;
int debugcounter_10c80_2 = 0;
//----- (00010C80) --------------------------------------------------------
int sub_10C80(type_str_0x6E8E* a1x, uint8_t a2, uint16_t a3)//1f1c80
{
	int v3; // edi
	type_str_0x6E8E* iix; // esi
	type_str_0x6E8E* jjx; // esi
	int v6; // ecx
	int ll; // eax
	type_str_0x6E8E* v8x; // esi
	int result; // eax
	type_str_0x6E8E* nx; // esi
	type_str_0x6E8E* v11x; // eax
	type_str_0x6E8E* kx; // esi
	type_str_0x6E8E* v13x; // eax
	int v14; // [esp+0h] [ebp-5Ch]
	int v15; // [esp+4h] [ebp-58h]
	int v16; // [esp+8h] [ebp-54h]
	int v17; // [esp+Ch] [ebp-50h]
	int v18; // [esp+10h] [ebp-4Ch]
	int v19; // [esp+1Ch] [ebp-40h]
	int v20; // [esp+20h] [ebp-3Ch]
	int v21; // [esp+24h] [ebp-38h]
	int v22; // [esp+28h] [ebp-34h]
	int m; // [esp+2Ch] [ebp-30h]
	int v24; // [esp+30h] [ebp-2Ch]
	int j; // [esp+34h] [ebp-28h]
	int l; // [esp+38h] [ebp-24h]
	int v27; // [esp+3Ch] [ebp-20h]
	int v28; // [esp+40h] [ebp-1Ch]
	int i; // [esp+44h] [ebp-18h]
	int kk; // [esp+48h] [ebp-14h]
	int v31; // [esp+4Ch] [ebp-10h]
	signed int v32; // [esp+54h] [ebp-8h]
	
	//adress 1f1c84

	v3 = 0;
	v32 = 1 << a2;
	if (a2)
	{
		if (a2 < 3u || a2 > 4u)
		{
			v17 = (a1x->array_0x4C_76.x + 128) >> 8;
			v14 = (a1x->array_0x4C_76.y + 128) >> 8;
			//v27 = (a1x->array_0x52_82.xshift + 255 - (__CFSHL__((a1x->array_0x52_82.xshift + 255) >> 31, 8) + ((a1x->array_0x52_82.xshift + 255) >> 31 << 8))) >> 8;
			v27 = (a1x->array_0x52_82.xshift + 255 - (my_sign32(a1x->array_0x52_82.xshift + 255) * 255)) >> 8;
			for (i = -v27; i <= v27; i++)
			{
				for (j = -v27; j <= v27; j++)
				{
					for (kx = x_DWORD_EA3E4[x_WORD_15B4E0_source[(uint8_t)(j + v17) + ((uint8_t)(i + v14) << 8)]];
						kx != x_DWORD_EA3E4[0];
						kx = x_DWORD_EA3E4[kx->word_0x16_22])
					{
						if (a1x->word_0x1A_26 != kx->word_0x1A_26
							&& kx->byte_0x3F_63
							&& kx->struct_byte_0xc_12_15.byte[0] & 8
							&& (uint8_t)v32 & kx->byte_0x38_56
							&& (a1x->byte_0x41_65 == -1
								|| a1x->byte_0x41_65 == kx->byte_0x3F_63 && a1x->byte_0x42_66 == -1
								|| a1x->byte_0x41_65 == kx->byte_0x3F_63 && a1x->byte_0x42_66 == kx->byte_0x40_64)
							&& sub_106C0(a1x, kx))
						{
							allert_error();
							//v13x = kx + sizeof(type_str_0x6E8E*) * a2;
							v13x = kx + a2;
							if (v13x->str_0x5E_94.word_0x62_98)
								v13x->str_0x5E_94.dword_0x5E_94 += a3;
							else
								v13x->str_0x5E_94.dword_0x5E_94 = a3;
							v3++;
							v13x->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
						}
					}
				}
			}
			return v3;
		}
		v18 = (a1x->array_0x4C_76.x + 128) >> 8;
		v15 = (a1x->array_0x4C_76.y + 128) >> 8;
		//v28 = (a1x->array_0x52_82.xshift+ 255- (__CFSHL__((a1x->array_0x52_82.xshift + 255) >> 31, 8)+ ((a1x->array_0x52_82.xshift + 255) >> 31 << 8))) >> 8;
		v28 = (a1x->array_0x52_82.xshift + 255 - (my_sign32(a1x->array_0x52_82.xshift + 255) * 255)) >> 8;
		for (l = -v28; l <= v28; l++)
		{
			for (m = -v28; m <= v28; m++)
			{
				for (nx = x_DWORD_EA3E4[x_WORD_15B4E0_source[((uint8_t)(l + v15) << 8) + (uint8_t)(m + v18)]];
					nx != x_DWORD_EA3E4[0];
					nx = x_DWORD_EA3E4[nx->word_0x16_22])
				{
					if (a1x->word_0x1A_26 != nx->word_0x1A_26 && nx->byte_0x3F_63 == 3 && sub_106C0(a1x, nx))
					{
						//v11x = nx + sizeof(type_str_0x6E8E) * a2;
						v11x = nx + a2;
						if (!v11x->str_0x5E_94.word_0x62_98)
						{
							v11x->str_0x5E_94.dword_0x5E_94 = a3;
							v3++;
							v11x->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
						}
					}
				}
			}
		}
		result = v3;
	}
	else
	{
		for (iix = x_D41A0_BYTEARRAY_4_struct.dword_38519; iix > x_DWORD_EA3E4[0]; iix = iix->next_0)
		{
			if (iix->byte_0x40_64 == 2 && iix->word_0x1A_26 != a1x->word_0x1A_26 && sub_106C0(a1x, iix))
			{
				if (iix->str_0x5E_94.word_0x62_98)
					iix->str_0x5E_94.dword_0x5E_94 += a3;
				else
					iix->str_0x5E_94.dword_0x5E_94 = a3;
				v3++;
				iix->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
			}
		}
		for (jjx = x_D41A0_BYTEARRAY_4_struct.dword_38527; jjx > x_DWORD_EA3E4[0]; jjx = jjx->next_0)
		{
			
			/*if (debugcounter_10c80_2 >= 0x144a)
				comp20 = compare_with_sequence_D41A0((char*)"001F1D54-00356038", (Bit8u*)& D41A0_BYTESTR_0, 0x356038, debugcounter_10c80_2, 0x36e16, &origbyte20, &remakebyte20);
			debugcounter_10c80_2++;*/

			if (sub_10750(a1x, jjx))
			{
				//v6 = 0;v21 = 0; //fix it
			  //v6 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(jj + 70) + 4);
				v6 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[jjx->byte_0x46_70].width;//fix it;
			  //v21 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(jj + 70) + 5);
				v21 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[jjx->byte_0x46_70].height;//fix it;
				if (x_WORD_180660_VGA_type_resolution == 1)
				{
					v6 >>= 1;
					v21 >>= 1;
				}
				v22 = (a1x->array_0x4C_76.x >> 8) - (v6 >> 1);
				v20 = (a1x->array_0x4C_76.y >> 8) - (v21 >> 1);
				if ((v20 + v22) % 2)
					v22++;
				if (*((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[jjx->byte_0x46_70].data
							  + 2
							  * ((a1x->array_0x4C_76.x >> 8) - v22 + ((a1x->array_0x4C_76.y >> 8) - v20) * v6)) != -1 )
				{
					if (jjx->str_0x5E_94.word_0x62_98)
						jjx->str_0x5E_94.dword_0x5E_94 += a3;
					else
						jjx->str_0x5E_94.dword_0x5E_94 = a3;
					v3++;
					jjx->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
				}
			}
		}
		//v19 = (a1x->array_0x4C_76.x+ 128- (__CFSHL__((a1x->array_0x4C_76.x + 128) >> 31, 8)+ ((a1x->array_0x4C_76.x + 128) >> 31 << 8))) >> 8;
		v19 = (a1x->array_0x4C_76.x + 128 - (my_sign32(a1x->array_0x4C_76.x + 128) * 255)) >> 8;//yes it is 32
		//v16 = (a1x->array_0x4C_76.y+ 128- (__CFSHL__((a1x->array_0x4C_76.y + 128) >> 31, 8)+ ((a1x->array_0x4C_76.y + 128) >> 31 << 8))) >> 8;
		v16 = (a1x->array_0x4C_76.y + 128 - (my_sign32(a1x->array_0x4C_76.y + 128) * 255)) >> 8;
		//v24 = (a1x->array_0x52_82.xshift+ 255- (__CFSHL__((a1x->array_0x52_82.xshift + 255) >> 31, 8)+ ((a1x->array_0x52_82.xshift + 255) >> 31 << 8))) >> 8;
		v24 = (a1x->array_0x52_82.xshift + 255 - (my_sign32(a1x->array_0x52_82.xshift + 255) * 255)) >> 8;
		v31 = -v24;
		if (-v24 > v24)
			return v3;
		do
		{
			for (kk = -v24; kk <= v24; kk++)
			{
				for (ll = x_WORD_15B4E0_source[((uint8_t)(v16 + v31) << 8) + (uint8_t)(kk + v19)];
					;
					ll = v8x->word_0x16_22)
				{
					v8x = x_DWORD_EA3E4[ll];
					if (v8x == x_DWORD_EA3E4[0])
						break;
					if (a1x->word_0x1A_26 != v8x->word_0x1A_26
						&& (v8x->byte_0x3F_63 != 3 || v8x->byte_0x40_64 != 2)
						&& (uint8_t)v32 & v8x->byte_0x38_56
						&& v8x->struct_byte_0xc_12_15.byte[0] & 8
						&& (v8x->byte_0x3F_63 != 10 || v8x->byte_0x40_64 != 45)
						&& sub_106C0(a1x, v8x)
						&& ((Bit8u)a1x->byte_0x41_65 == 0xffu
							|| a1x->byte_0x41_65 == v8x->byte_0x3F_63 && (Bit8u)a1x->byte_0x42_66 == 0xffu
							|| a1x->byte_0x41_65 == v8x->byte_0x3F_63 && a1x->byte_0x42_66 == v8x->byte_0x40_64))
					{
						if (v8x->str_0x5E_94.word_0x62_98)
							v8x->str_0x5E_94.dword_0x5E_94 += a3;
						else
							v8x->str_0x5E_94.dword_0x5E_94 = a3;
						v3++;
						v8x->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
					}
				}
			}
			v31++;
		} while (v31 <= v24);
		result = v3;
	}
	return result;
}

void sub_46B40_alt()//227b40
{
	char v1; // al
	uint8_t v2; // al
	uint8_t v3; // al

	Bit16s v0_tempmousex = x_WORD_E3760_mouse.x;
	Bit16s v0_tempmousey = x_WORD_E3760_mouse.y;

  sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);
  sub_417A0_install_pal_and_mouse_minmax();
  memset((void*)* xadatapald0dat2.var28_begin_buffer, 0, 768);
  sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);
  if (pre_x_DWORD_E9C3C)
  {
    sub_83E80_freemem4(pre_x_DWORD_E9C3C);
    pre_x_DWORD_E9C3C = 0;
    x_DWORD_E9C3C = 0;
  }
  sub_54600_mouse_reset();

  //here must have alternative arrays
  sub_6EBF0(&filearray_2aa18c[filearrayindex_POINTERSDATTAB]);
  sub_6EBF0(&filearray_2aa18c[filearrayindex_MSPRD00DATTAB]);
  sub_6EBF0(&filearray_2aa18c[filearrayindex_BUILD00DATTAB]);
  //

  sub_47130();
  if (x_WORD_180660_VGA_type_resolution == 1)
  {
    sub_6EBF0(&filearray_2aa18c[filearrayindex_FONTS0DATTAB]);
    sub_90D3F_unload_file_array(psxadatamsprd00dat);
    x_WORD_180660_VGA_type_resolution = 8;

  }
  else
  {
    sub_6EBF0(&filearray_2aa18c[filearrayindex_HFONT3DATTAB]);
    sub_90D3F_unload_file_array(psxadatahsprd00dat);
    x_WORD_180660_VGA_type_resolution = 1;

  }
  sub_47160();//reload graphics
  //here must have alternative arrays
  sub_6EB90(&filearray_2aa18c[filearrayindex_POINTERSDATTAB]);
  sub_6EB90(&filearray_2aa18c[filearrayindex_BUILD00DATTAB]);
  //

  memset((void*)* xadatapald0dat2.var28_begin_buffer, 0, 768);
  if (x_WORD_180660_VGA_type_resolution & 1)
  {
    v1 = sub_5BE80_test_pallette(*xadatapald0dat2.var28_begin_buffer, 0, 0, 0);
    sub_72883_clear_graphics_320((void*)x_DWORD_180628b_screen_buffer, 0xC8u, v1);
  }
  else
  {
    v2 = sub_5BE80_test_pallette(*xadatapald0dat2.var28_begin_buffer, 0, 0, 0);
    sub_728A9_clear_graphics_640((void*)x_DWORD_180628b_screen_buffer, 0x1E0u, v2);
  }
  memset((void*)* xadatapald0dat2.var28_begin_buffer, 0, 768);
  sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);
  if (x_WORD_180660_VGA_type_resolution & 1)
    sub_90D6E_VGA_set_video_mode_320x200_and_pallette(*xadatapald0dat2.var28_begin_buffer);
  else
    //sub_90E07_VGA_set_video_mode_640x480_and_pallette(*xadatapald0dat2.var28_begin_buffer);
    sub_90E07_VGA_set_video_mode_alt_and_pallette(*xadatapald0dat2.var28_begin_buffer);
  sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);
  v3 = sub_5BE80_test_pallette(*xadatapald0dat2.var28_begin_buffer, 0, 0, 0);
  x_BYTE_EB3A8 = v3;
  if (x_WORD_180660_VGA_type_resolution & 1)
    sub_72883_clear_graphics_320((void*)x_DWORD_180628b_screen_buffer, 0xC8u, v3);
  else
    sub_728A9_clear_graphics_alt((void*)x_DWORD_180628b_screen_buffer, alt_resolution_height, v3);
  sub_8CEDF_install_mouse();
  sub_8CD27_set_cursor(*(*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct));
  x_D41A0_BYTEARRAY_4_struct.byteindex_51 = 2;
  if (x_WORD_180660_VGA_type_resolution == 1)
    x_BYTE_D419D_fonttype = 1;
  else
    x_BYTE_D419D_fonttype = 3;
  sub_5BDC0_set_mouse_position(v0_tempmousex, v0_tempmousey);
}


//----- (000112D0) --------------------------------------------------------
void sub_112D0(type_str_0x6E8E* a1x, uint16_t a2)//1f22d0
{
	int v2; // eax
	int v3; // edi
	int result; // eax
	type_str_0x6E8E* v5x; // ebx
	int v6; // [esp+0h] [ebp-10h]
	int v7; // [esp+4h] [ebp-Ch]
	int i; // [esp+8h] [ebp-8h]
	int j; // [esp+Ch] [ebp-4h]

	v6 = (a1x->array_0x4C_76.x + 128) >> 8;
	v7 = (a1x->array_0x4C_76.y + 128) >> 8;
	//v2 = (a1x->array_0x52_82.xshift	+ 255 - (__CFSHL__((a1x->array_0x52_82.xshift + 255) >> 31, 8) + ((a1x->array_0x52_82.xshift + 255) >> 31 << 8))) >> 8;
	v2 = (a1x->array_0x52_82.xshift + 255 - (my_sign32(a1x->array_0x52_82.xshift + 255) * 255)) >> 8;
	v3 = v2;
	result = -v2;
	for (i = result; v3 >= i; i++)
	{
		result = -v3;
		for (j = -v3; v3 >= j; j++)
		{
			for (result = x_WORD_15B4E0_source[((uint8_t)(v7 + i) << 8) + (uint8_t)(j + v6)];
				;
				result = v5x->word_0x16_22)
			{
				v5x = x_DWORD_EA3E4[result];
				if (v5x == x_DWORD_EA3E4[0])
					break;
				if (a1x->word_0x1A_26 != v5x->word_0x1A_26
					&& v5x->byte_0x3F_63
					&& v5x->struct_byte_0xc_12_15.byte[0] & 8
					&& v5x->byte_0x38_56 & 2
					&& (a1x->byte_0x41_65 == -1
						|| a1x->byte_0x41_65 == v5x->byte_0x3F_63 && a1x->byte_0x42_66 == -1
						|| a1x->byte_0x41_65 == v5x->byte_0x3F_63 && a1x->byte_0x42_66 == v5x->byte_0x40_64)
					&& sub_106C0(a1x, v5x))
				{
					v5x->str_0x5E_94.word_0x68_104 = a1x->word_0x1A_26;
					v5x->str_0x5E_94.dword_0x64_100 = a2;
				}
			}
		}
	}
	//return result;
}

//----- (00011400) --------------------------------------------------------
void sub_11400(type_str_0x6E8E* a1x, char a2, uint16_t a3)//1f2400
{
	//signed int v3; // eax
	int v3x;
	bool v4; // zf
	type_str_0x6E8E* ix; // ebx
	int v6; // eax
	int v7; // edi
	int l; // ebx
	type_str_0x6E8E* v9x; // ebx
	int v11; // [esp+0h] [ebp-18h]
	int v12; // [esp+4h] [ebp-14h]
	signed int j; // [esp+8h] [ebp-10h]
	int k; // [esp+Ch] [ebp-Ch]

	//v3 = 1 << a2;
	if (!a2)
	{
		v4 = (a1x->struct_byte_0xc_12_15.byte[2] & 1) == 0;
		for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (ix->byte_0x40_64 == 2 && ix->word_0x1A_26 != a1x->word_0x1A_26 && sub_106C0(a1x, ix))
			{
				if (ix->str_0x5E_94.word_0x62_98)
					ix->str_0x5E_94.dword_0x5E_94 += a3;
				else
					ix->str_0x5E_94.dword_0x5E_94 = a3;
				ix->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
			}
		}
		//v11 = (a1x->array_0x4C_76.x	+ 128 - (__CFSHL__((a1x->array_0x4C_76.x + 128) >> 31, 8) + ((a1x->array_0x4C_76.x + 128) >> 31 << 8))) >> 8;
		v11 = (a1x->array_0x4C_76.x + 128 - (my_sign32(a1x->array_0x4C_76.x + 128) * 255)) >> 8;
		//v12 = (a1x->array_0x4C_76.y	+ 128 - (__CFSHL__((a1x->array_0x4C_76.y + 128) >> 31, 8) + ((a1x->array_0x4C_76.y + 128) >> 31 << 8))) >> 8;
		v12 = (a1x->array_0x4C_76.y + 128 - (my_sign32(a1x->array_0x4C_76.y + 128) * 255)) >> 8;
		//v6 = (a1x->array_0x52_82.xshift	+ 255 - (__CFSHL__((a1x->array_0x52_82.xshift + 255) >> 31, 8) + ((a1x->array_0x52_82.xshift + 255) >> 31 << 8))) >> 8;
		v6 = (a1x->array_0x52_82.xshift + 255 - (my_sign32(a1x->array_0x52_82.xshift + 255) * 255)) >> 8;
		v7 = v6;
		//v3 = -v6;
		for (j = -v6; v7 >= j; j++)
		{
			//v3 = -v7;
			for (k = -v7; v7 >= k; k++)
			{
				v3x = ((uint8_t)(v12 + j) << 8) + (uint8_t)(k + v11);
				for (l = x_WORD_15B4E0_source[v3x]; ; l = v9x->word_0x16_22)
				{
					v9x = x_DWORD_EA3E4[l];
					if (v9x == x_DWORD_EA3E4[0])
						break;
					//LOWORD(v3) = a1x->word_0x1A_26;
					if (a1x->word_0x1A_26 != v9x->word_0x1A_26)
					{
						//v3 = sub_106C0(a1x, v9x);
						if (sub_106C0(a1x, v9x))
						{
							//LOBYTE(v3) = 1 << a2;
							if ((uint16_t)(1 << a2) & v9x->byte_0x38_56)
							{
								if (v9x->struct_byte_0xc_12_15.byte[0] & 8 && (v9x->byte_0x3F_63 != 3 || v9x->byte_0x40_64 != 2))
								{
									if (a1x->byte_0x41_65 == -1
										|| a1x->byte_0x41_65 == v9x->byte_0x3F_63 && a1x->byte_0x42_66 == -1
										|| a1x->byte_0x41_65 == v9x->byte_0x3F_63
										&& a1x->byte_0x42_66 == v9x->byte_0x40_64)
									{
										if (v9x->byte_0x3F_63 != 2 || v9x->byte_0x40_64)
										{
											if (v9x->str_0x5E_94.word_0x62_98)
												v9x->str_0x5E_94.dword_0x5E_94 += a3;
											else
												v9x->str_0x5E_94.dword_0x5E_94 = a3;
										}
										else if (v9x->str_0x5E_94.word_0x62_98)
										{
											v9x->str_0x5E_94.dword_0x5E_94 += a3 / 10;
										}
										else
										{
											v9x->str_0x5E_94.dword_0x5E_94 = a3 / 10;
										}
										//LOBYTE(v3) = 0;
										v9x->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	//return v3;
}

//----- (000116A0) --------------------------------------------------------
int sub_116A0(type_str_0x6E8E* a1x, char a2, uint16_t a3)//1f26a0
{
	int v3; // edi
	type_str_0x6E8E* ix; // ebx
	type_str_0x6E8E* lx; // ebx
	int v7; // [esp+0h] [ebp-1Ch]
	int v8; // [esp+4h] [ebp-18h]
	int k; // [esp+8h] [ebp-14h]
	int v10; // [esp+Ch] [ebp-10h]
	int j; // [esp+10h] [ebp-Ch]

	v3 = 0;
	if (!a2)
	{
		for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (ix->byte_0x40_64 == 2 && sub_106C0(a1x, ix))
			{
				ix->word_0x30_48 = 30;
				if (ix->word_0x1A_26 != a1x->word_0x1A_26)
				{
					if (ix->str_0x5E_94.word_0x62_98)
						ix->str_0x5E_94.dword_0x5E_94 += a3;
					else
						ix->str_0x5E_94.dword_0x5E_94 = a3;
					v3++;
					ix->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
				}
			}
		}
		//v7 = (a1x->array_0x4C_76.x+ 128	- (__CFSHL__((a1x->array_0x4C_76.x + 128) >> 31, 8)	+ ((a1x->array_0x4C_76.x + 128) >> 31 << 8))) >> 8;
		v7 = (a1x->array_0x4C_76.x + 128 - (my_sign32(a1x->array_0x4C_76.x + 128) * 255)) >> 8;
		//v8 = (a1x->array_0x4C_76.y+ 128	- (__CFSHL__((a1x->array_0x4C_76.y + 128) >> 31, 8)	+ ((a1x->array_0x4C_76.y + 128) >> 31 << 8))) >> 8;
		v8 = (a1x->array_0x4C_76.y + 128 - (my_sign32(a1x->array_0x4C_76.y + 128) * 255)) >> 8;
		//v10 = (a1x->array_0x52_82.xshift+ 255- (__CFSHL__((a1x->array_0x52_82.xshift + 255) >> 31, 8)+ ((a1x->array_0x52_82.xshift + 255) >> 31 << 8))) >> 8;
		v10 = (a1x->array_0x52_82.xshift + 255 - (my_sign32(a1x->array_0x52_82.xshift + 255) * 255)) >> 8;
		for (j = -v10; j <= v10; j++)
		{
			for (k = -v10; k <= v10; k++)
			{
				for (lx = x_DWORD_EA3E4[x_WORD_15B4E0_source[((uint8_t)(v8 + j) << 8) + (uint8_t)(k + v7)]];
					lx != x_DWORD_EA3E4[0];
					lx = x_DWORD_EA3E4[lx->word_0x16_22])
				{
					if (a1x->word_0x1A_26 != lx->word_0x1A_26
						&& sub_106C0(a1x, lx)
						&& (uint16_t)(1 << a2) & lx->byte_0x38_56
						&& lx->struct_byte_0xc_12_15.byte[0] & 8
						&& (lx->byte_0x3F_63 != 3 || lx->byte_0x40_64 != 2)
						&& (a1x->byte_0x41_65 == -1
							|| a1x->byte_0x41_65 == lx->byte_0x3F_63 && a1x->byte_0x42_66 == -1
							|| a1x->byte_0x41_65 == lx->byte_0x3F_63 && a1x->byte_0x42_66 == lx->byte_0x40_64))
					{
						if (lx->str_0x5E_94.word_0x62_98)
							lx->str_0x5E_94.dword_0x5E_94 += a3;
						else
							lx->str_0x5E_94.dword_0x5E_94 = a3;
						v3++;
						lx->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
					}
				}
			}
		}
	}
	return v3;
}

//----- (00011900) --------------------------------------------------------
int sub_11900(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, uint8_t a3, uint16_t a4)//1f2900
{
	type_str_0x6E8E* v4x; // eax
	int result; // eax

	v4x = a2x + sizeof(type_str_0x6E8E*) * a3;
	if (v4x->str_0x5E_94.word_0x62_98)
		v4x->str_0x5E_94.dword_0x5E_94 = a4;
	else
		v4x->str_0x5E_94.dword_0x5E_94 += a4;
	result = 3 * a3;
	v4x->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
	return result;
}

//----- (00011960) --------------------------------------------------------
void sub_11960(type_str_0x6E8E* a1)//1f2960
{
	int16_t v1; // di
	type_str_0x6E8E* v2x; // ebx
	int16_t v4; // [esp+0h] [ebp-Ch]
	int v5; // [esp+4h] [ebp-8h]
	int v6; // [esp+8h] [ebp-4h]

	sub_49EC0(a1, a1->dword_0x10_16 + 1);
	v6 = a1->array_0x52_82.xshift;
	v1 = a1->array_0x4C_76.x;
	v5 = a1->array_0x52_82.yshift;
	v2x = x_D41A0_BYTEARRAY_4_struct.dword_38527;
	v4 = a1->array_0x4C_76.y;
	while (v2x > x_DWORD_EA3E4[0])
	{
		if (abs((int16_t)(v2x->array_0x4C_76.x - v1)) <= v2x->array_0x52_82.xshift + v6
			&& abs((int16_t)(v2x->array_0x4C_76.y - v4)) <= v2x->array_0x52_82.yshift + v5)
		{
			v2x->dword_0x8 = -1;
			v2x->byte_0x3D_61 = 0;
		}
		v2x = v2x->next_0;
	}
	sub_49EC0(a1, a1->dword_0x10_16);
}

//----- (00011A10) --------------------------------------------------------
char sub_11A10(type_str_0x6E8E* a1)//1f2a10
{
	type_str_0x6E8E* ix; // ebx
	//uint16_t v3; // bx
	uaxis_2d v3;
	int16_t v4; // di
	int16_t v5; // di
	uaxis_2d v6; // bx
	int16_t v7; // di
	uaxis_2d v8; // bx
	int v9; // eax
	int16_t v10; // di
	uaxis_2d v11; // bx
	int16_t v12; // [esp+0h] [ebp-24h]
	int v13; // [esp+4h] [ebp-20h]
	int16_t l; // [esp+8h] [ebp-1Ch]
	int16_t j; // [esp+Ch] [ebp-18h]
	int16_t k; // [esp+10h] [ebp-14h]
	int v17; // [esp+14h] [ebp-10h]
	int16_t v18; // [esp+14h] [ebp-10h]
	int16_t v19; // [esp+18h] [ebp-Ch]
	uint16_t v20; // [esp+1Ch] [ebp-8h]
	int16_t v21; // [esp+20h] [ebp-4h]
	int16_t v22; // [esp+20h] [ebp-4h]

	v18 = a1->array_0x52_82.xshift >> 8;
	v21 = a1->array_0x52_82.yshift >> 8;
	sub_49EC0(a1, a1->dword_0x10_16 + 1);
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (ix->byte_0x40_64 == 2 && ix != a1 && sub_106C0(ix, a1))
		{
			sub_49EC0(a1, a1->dword_0x10_16);
			return 0;
		}
	}
	v19 = a1->array_0x52_82.xshift >> 8;
	v12 = a1->array_0x52_82.yshift >> 8;
	LOBYTE(v20) = ((uint16_t)(a1->array_0x4C_76.x + 128) >> 8) - v19;
	HIBYTE(v20) = ((uint16_t)(a1->array_0x4C_76.y + 128) >> 8) - v12;
	LOWORD(v17) = v19 - v18;
	v3.word = v20;
	v22 = v12 - v21;
	v4 = v22;
	while (v4)
	{
		for (j = 2 * v19; j; j--)
		{
			if (!sub_11C80(v3))
			{
				sub_49EC0(a1, a1->dword_0x10_16);
				return 0;
			}
			//LOBYTE(v3) = v3 + 1;
			v3._axis_2d.x++;
		}
		v4--;
		v3.word = __PAIR__(v3._axis_2d.y, (uint8_t)v20) + 256;
	}
	LOBYTE(v6) = v20;
	v5 = v22;
	HIBYTE(v6) = 2 * v12 + HIBYTE(v20) - v22;
	while (v5)
	{
		for (k = 2 * v19; k; k--)
		{
			if (!sub_11C80(v6))
			{
				sub_49EC0(a1, a1->dword_0x10_16);
				return 0;
			}
			v6._axis_2d.x++;
		}
		v5--;
		v6.word = __PAIR__(v6._axis_2d.y, (uint8_t)v20) + 256;
	}
	LOBYTE(v8) = v20;
	v7 = v22;
	HIBYTE(v8) = v22 + HIBYTE(v20);
	while (v7)
	{
		v9 = v17;
		while (1)
		{
			v13 = v9;
			if (!(x_WORD)v9)
				break;
			if (!sub_11C80(v8))
			{
				sub_49EC0(a1, a1->dword_0x10_16);
				return 0;
			}
			v9 = v13 - 1;
			v8._axis_2d.x++;
		}
		v7--;
		v8.word = __PAIR__(v8._axis_2d.y, (uint8_t)v20) + 256;
	}
	LOBYTE(v11) = v19 + v20 - v17;
	v10 = v22;
	HIBYTE(v11) = v22 + HIBYTE(v20);
	while (v10)
	{
		for (l = v17; l; l--)
		{
			if (!sub_11C80(v11))
			{
				sub_49EC0(a1, a1->dword_0x10_16);
				return 0;
			}
			v11._axis_2d.x++;
		}
		v10--;
		v11.word = __PAIR__(v11._axis_2d.y, (uint8_t)v20) + 256;
	}
	sub_49EC0(a1, a1->dword_0x10_16);
	return 1;
}

//----- (00011C80) --------------------------------------------------------
char sub_11C80(uaxis_2d a1)//1f2c80
{
	char result; // al
	char v2; // ah

	result = 1;
	v2 = x_BYTE_13B4E0_angle[a1.word];
	if (v2 < 0 || x_BYTE_D41B6 && v2 & 8)
		result = 0;
	return result;
}

//----- (00011CB0) --------------------------------------------------------
bool sub_11CB0(axis_3d* a1x)//1f2cb0
{
	int16_t v1; // cx
	type_str_0x6E8E* v2x; // ebx
	type_str_0x6E8E* ix; // ebx
	int16_t v4; // di
	uaxis_2d v5; // bx
	int16_t j; // si
	int16_t v8; // [esp+8h] [ebp-10h]
	uaxis_2d v9; // [esp+Ch] [ebp-Ch]
	char v10; // [esp+14h] [ebp-4h]

	v1 = a1x->y;
	v10 = 0;
	v2x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
	v8 = a1x->x;
	while (!v10 && v2x > x_DWORD_EA3E4[0])
	{
		if (v2x->byte_0x40_64 == 2
			&& abs((int16_t)(v2x->array_0x4C_76.x - v8)) <= v2x->array_0x52_82.xshift + 2560
			&& abs((int16_t)(v2x->array_0x4C_76.y - v1)) <= v2x->array_0x52_82.yshift + 2560)
		{
			v10 = 1;
		}
		v2x = v2x->next_0;
	}
	if (!v10)
	{
		for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38527; !v10 && ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (abs((int16_t)(ix->array_0x4C_76.x - v8)) <= ix->array_0x52_82.xshift + 2560
				&& abs((int16_t)(ix->array_0x4C_76.y - v1)) <= ix->array_0x52_82.yshift + 2560)
			{
				v10 = 1;
			}
		}
	}
	if (!v10)
	{
		LOBYTE(v9) = (a1x->x >> 8) - 8;
		HIBYTE(v9) = (a1x->y >> 8) - 8;
		v4 = 8;
		v5 = v9;
		while (v4 && !v10)
		{
			for (j = 8; j && !v10; j--)
			{
				if (!sub_11C80(v5))
					v10 = 1;
				v5._axis_2d.x++;
			}
			v4--;
			v5.word = __PAIR__(v5._axis_2d.y, v9._axis_2d.x) + 256;
			//v5._axis_2d.x=v9._axis_2d.x;
			//v5._axis_2d.y++;
		}
	}
	return v10 == 0;
}

//----- (00011E20) --------------------------------------------------------
bool sub_11E20(type_str_0x6E8E* a1x, axis_3d* a2x)//1f2e20
{
	int v2; // ebx
	int v3; // ebx

	v2 = a1x->dword_0xA0_160x->word_160_0xc_12;
	v3 = (int16_t)sub_10C40_getTerrainAlt(a2x) + v2 + a1x->array_0x52_82.dd;
	return v3 > (int16_t)sub_10C60(a2x) - 384;
}

//----- (00011E70) --------------------------------------------------------
bool sub_11E70(type_str_0x6E8E* a1x, axis_3d* a2)//1f2e70
{
	int v2; // ebx
	int v3; // ebx

	v2 = a1x->dword_0xA0_160x->word_160_0xc_12;
	v3 = a1x->array_0x52_82.dd + (int16_t)sub_10C40_getTerrainAlt(a2) + v2;
	return v3 > (int16_t)sub_10C60(a2);
}

//----- (00011EE0) --------------------------------------------------------
void sub_11EE0(/*Bit8u* a1*/)//1f2ee0
{
	type_str_0x3647Ac* v1x; // ST00_4
	int16_t v2; // ax
	//Bit8u* v3; // esi
	signed int result; // eax
	//int v5; // edx
	//int v6; // edi
	//char v7; // ST14_1
	//Bit8u* v8; // edx
	//int v9; // edx
	//int v10; // edx
	//int v11; // edx
	//int v12; // edx
	//int v13; // ecx
	//int16_t v14; // di
	//Bit8u* v15; // edx
	//int v16; // edx
	//Bit8u* v17; // ecx

	//type_str_2FECE* a1x = &D41A0_BYTESTR_0.str_2FECE;//fix

	v1x = D41A0_BYTESTR_0.array_0x365F4;//;&x_D41A0_BYTEARRAY_0[0x365F4];
	D41A0_BYTESTR_0.byte_0x36E00 = 0;
	memset(v1x, 0, 88);
	v2 = 10;
	//v3 = x_D41A0_BYTEARRAY_0;
	//while (v2 > 0 && !(*(Bit8u*)(a1 + 8 * v2 + 0x65ac) & 0xF))
	
	while (v2 > 0 && !(D41A0_BYTESTR_0.str_2FECE.array_0x3647A[v2].str_0x3647A_byte_0 & 0xF))
		v2--;
	D41A0_BYTESTR_0.byte_0x36E00 = v2;
	for (result = 1; (int16_t)result <= D41A0_BYTESTR_0.byte_0x36E00; ++result)
	{
		//v5 = 8 * (int16_t)result;
		//v6 = (int)a1 + (8 * (int16_t)result);
		//v7 = D41A0_BYTESTR_0.str_2FECE.array_0x3647A[result].str_0x3647A_byte_0 & 0xF;
		//v8 = x_D41A0_BYTEARRAY_0 + (8 * (int16_t)result);
		//*(0x365F2 + x_D41A0_BYTEARRAY_0 + (8 * (int16_t)result) + 2) = v7;
		D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647A_byte_0 = D41A0_BYTESTR_0.str_2FECE.array_0x3647A[result].str_0x3647A_byte_0 & 0xF;
		if (D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647A_byte_0)
		{
			if (D41A0_BYTESTR_0.str_2FECE.array_0x3647A[result].str_0x3647A_byte_0 < 0)
				//*(x_BYTE *)(x_D41A0_BYTEARRAY_0 + (8 * (int16_t)result) + 0x365F5) |= 1u;
				D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647A_byte_1 |= 1u;
			//v9 = 8 * (int16_t)result;
			if (D41A0_BYTESTR_0.str_2FECE.array_0x3647A[result].str_0x3647A_byte_0 & 0x40)
				//*(x_BYTE *)(x_D41A0_BYTEARRAY_0 + v9 + 0x365F5) |= 2u;
				D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647A_byte_1 |= 2u;
			//v10 = 8 * (int16_t)result;
			if (D41A0_BYTESTR_0.str_2FECE.array_0x3647A[result].str_0x3647A_byte_0 & 0x10)
				D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647A_byte_1 |= 0x20u;
			//v11 = 8 * (int16_t)result;
			if (D41A0_BYTESTR_0.str_2FECE.array_0x3647A[result].str_0x3647A_byte_0 & 0x20)
				D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647A_byte_1 |= 0x40u;
			switch (D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647A_byte_0)
			{
			case 1:
			case 2:
				//v12 = 8 * (int16_t)result;
				//v13 = (int)a1 + (8 * (int16_t)result);
				//v14 = *(x_WORD *)(a1 + (8 * (int16_t)resul) + 0x65B0);
				//v15 = x_D41A0_BYTEARRAY_0 + (8 * (int16_t)resul);
				//*(x_WORD *)(222712 + v15) = v14 << 8;//365F8
				D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647C_4.axis.x = D41A0_BYTESTR_0.str_2FECE.array_0x3647A[result].str_0x3647C_4.axis.x <<8;
				//*(x_WORD *)(222712 + v15 + 2) = *(x_WORD *)(v13 + 0x65B2) << 8;
				D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647C_4.axis.y = D41A0_BYTESTR_0.str_2FECE.array_0x3647A[result].str_0x3647C_4.axis.y <<8;
				break;
			case 3:
			case 4:
			case 5:
			case 8:
			case 9:
				//v16 = 8 * (int16_t)result;
				//v17 = x_D41A0_BYTEARRAY_0 + (8 * (int16_t)result);
				//LOBYTE(v16) = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + (8 * (int16_t)result) + 0x365F5);
				D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647C_4.axis.x = 0;
				if (D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647A_byte_1 & 2)
					D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647C_4.axis.x =
					D41A0_BYTESTR_0.str_2FECE.array_0x30311[D41A0_BYTESTR_0.str_2FECE.array_0x3647A[result].str_0x3647C_4.axis.x].str_0x30311_subtype;
				break;
			case 6:
			case 7:
				D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647C_4.axis.x = D41A0_BYTESTR_0.str_2FECE.array_0x3647A[result].str_0x3647C_4.axis.x;
				break;
			default:
				break;
			}
			D41A0_BYTESTR_0.array_0x365F4[result].str_0x3647A_2._axis_2d.x = D41A0_BYTESTR_0.str_2FECE.array_0x3647A[result].str_0x3647A_byte_1;
		}
	}
	//x_D41A0_BYTEARRAY_0 = (Bit8u*)v3;
	//return result;
}

//----- (00012100) --------------------------------------------------------
void sub_12100(type_str_0x30311* a1x, type_str_0x6E8E* a2x, char a3)//1f3100
{
	int16_t v3; // bx
	uint8_t v4; // cl
	//Bit8u* v5; // esi
	int v5;
	int16_t v6; // bx
	int v7; // edx
	int16_t v8; // bx
	int ix; // ecx
	int16_t result; // ax

	v3 = 1;
	v4 = 0;
	v5 = 0;
	//v5 = &x_D41A0_BYTEARRAY_0[0x365FC];
	while (v3 <= D41A0_BYTESTR_0.byte_0x36E00 && !v4)
	{
		if (D41A0_BYTESTR_0.array_0x365F4[v5+1].str_0x3647A_byte_0
			&& !(D41A0_BYTESTR_0.array_0x365F4[v5 + 1].str_0x3647A_byte_1 & 1)
			//&& (a1 - (&x_D41A0_BYTEARRAY_0[0x30331])) / 20 ==
			//&& (a1x - ((Bit8u*)&D41A0_BYTESTR_0.str_2FECE.array_0x30311[0].str_0x30311_type)) / 20 ==
			&& a1x - D41A0_BYTESTR_0.str_2FECE.array_0x30311 ==
			//*(Bit16u*)(8 * v3 + &x_D41A0_BYTEARRAY_0[0x3647C]))
			D41A0_BYTESTR_0.str_2FECE.array_0x3647A[v3].str_0x3647A_2.word)

		{
			v4 = v3;
		}
		v3++;
		v5++;
	}
	if (!v4)
	{
		v6 = 1;
		//v7 = &x_D41A0_BYTEARRAY_0[0x365FC];
		v7 = 0;
		while (v6 <= D41A0_BYTESTR_0.byte_0x36E00 && !v4)
		{
			if (D41A0_BYTESTR_0.array_0x365F4[v7+1].str_0x3647A_byte_0//*v7
				&& (D41A0_BYTESTR_0.array_0x365F4[v7 + 1].str_0x3647A_byte_1 & 1)
				/*&& *(_WORD *)(&x_D41A0_BYTEARRAY_0[0x30313
					+ 20 * *(_WORD *)(&x_D41A0_BYTEARRAY_0[0x3647c + 8 * v6])]) ==
				*(_WORD *)(a1 + 2))*/
				&& D41A0_BYTESTR_0.str_2FECE.array_0x30311[D41A0_BYTESTR_0.str_2FECE.array_0x3647A[v6].str_0x3647A_2.word].str_0x30311_subtype ==
				a1x->str_0x30311_subtype)
			{
				v4 = v6;
			}
			v6++;
			v7++;
		}
	}
	if (v4)
	{
		if (a3)
			a2x->word_0x4A_74 = v4;
		else
			sub_12330(a2x, v4);
	}
	v8 = 1;
	for (ix = 0/*&x_D41A0_BYTEARRAY_0[0x365FC]*/; ; ix++/* += 8*/)
	{
		result = D41A0_BYTESTR_0.byte_0x36E00;
		if (v8 > (uint8_t)result)
			break;
		if (D41A0_BYTESTR_0.array_0x365F4[ix+1].str_0x3647A_byte_0)
		{
			switch (D41A0_BYTESTR_0.array_0x365F4[ix + 1].str_0x3647A_byte_0)
			{
			case 3:
			case 4:
			case 5:
			case 8:
			case 9:
				if (!(D41A0_BYTESTR_0.array_0x365F4[ix + 1].str_0x3647A_byte_1 & 2)
					//&& *(Bit16u*)(8 * v8 + &x_D41A0_BYTEARRAY_0[0x3647E]) ==
					&& D41A0_BYTESTR_0.str_2FECE.array_0x3647A[v8].str_0x3647C_4.axis.x ==
					//(a1 - (&x_D41A0_BYTEARRAY_0[0x30311])) / 20)
					a1x-D41A0_BYTESTR_0.str_2FECE.array_0x30311)
				{
					//36479+5
					//fix it
					D41A0_BYTESTR_0.array_0x365F4[ix + 1].str_0x3647C_4.pointer_0x6E8E = a2x;
					//fix it
					//allert_error();
					D41A0_BYTESTR_0.array_0x365F4[ix + 1].str_0x3647A_byte_1 &= 0xFBu;
					
				}
				break;
			default:
				break;
			}
		}
		v8++;
	}
	//return result;
}

//----- (000122A0) --------------------------------------------------------
void sub_122A0(type_str_0x6E8E* a1x)//1f32e0
{
	int16_t v1; // bx
	//Bit8u* result; // eax

	v1 = a1x->word_0x4A_74;
	if (v1)
		/*result = */sub_12330(a1x, v1);
	//return result;
}

//----- (000122C0) --------------------------------------------------------
void sub_122C0(int16_t a1)//1f32c0
{
	int16_t v1; // dx
	int indexx; // eax

	v1 = 1;
	indexx = 0;// = &x_D41A0_BYTEARRAY_0[0x365FC];
	while (v1 <= D41A0_BYTESTR_0.byte_0x36E00)
	{
		if (D41A0_BYTESTR_0.array_0x365F4[indexx+1].str_0x3647A_byte_0 == 7 && a1 == D41A0_BYTESTR_0.array_0x365F4[indexx + 1].str_0x3647C_4.axis.x)
			D41A0_BYTESTR_0.array_0x365F4[indexx + 1].str_0x3647A_byte_1 |= 0x18u;
		v1++;
		indexx++;// += 8;
	}
	//return result;
}

//----- (00012330) --------------------------------------------------------
void sub_12330(type_str_0x6E8E* a1x, int16_t a2)//1f3330
{
	//type_str_0x6E8E* resultx; // eax
	char v3; // dl
	//int v4; // ecx
	//Bit8u* v5; // ebx
	//char v6; // dh
	uint8_t v7; // dh
	char v8; // cl
	bool v9; // zf
	//Bit8u* v10; // edx
	char v11; // bl

	//resultx = a1x;
	v3 = 1;
	if (!a2)
	{
	LABEL_12:
		v3 = 0;
		goto LABEL_13;
	}
	//v4 = 8 * a2;
	//v5 = &x_D41A0_BYTEARRAY_0[8 * a2];
	//v6 = x_D41A0_BYTEARRAY_0[8 * a2 + 0x365F7];
	//LOBYTE(v4) = v6;
	//*(x_BYTE *)(&x_D41A0_BYTEARRAY_0[8 * a2] + 0x365F7) = v6 + 1;
	v8 = D41A0_BYTESTR_0.array_0x365F4[a2].str_0x3647A_2._axis_2d.y & 3;
	D41A0_BYTESTR_0.array_0x365F4[a2].str_0x3647A_2._axis_2d.y++;
	v7 = D41A0_BYTESTR_0.array_0x365F4[a2].str_0x3647A_byte_1 & 0x60;
	
	if (v7 < 0x40u)
	{
		if (v7 != 32 || v8 != 3)
			goto LABEL_13;
		goto LABEL_12;
	}
	if (v7 <= 0x40u)
	{
		v9 = (v8 & 1) == 0;
		goto LABEL_11;
	}
	if (v7 == 96)
	{
		v9 = (v8 & 3) == 0;
	LABEL_11:
		if (v9)
			goto LABEL_13;
		goto LABEL_12;
	}
LABEL_13:
	if (!v3)
	{
		sub_12470(a1x, 8 * a1x->byte_0x40_64 + 1);
		return;
	}
	a1x->byte_0x45_69 = 8 * a1x->byte_0x40_64 + 7;
	a1x->byte_0x48_72 = a2;
	//v10 = &x_D41A0_BYTEARRAY_0[8 * a2];
	a1x->word_0x4A_74 = 0;
	v11 = D41A0_BYTESTR_0.array_0x365F4[a2].str_0x3647A_byte_0;
	a1x->byte_0x49_73 = v11;
	if (v11 == 6)
		a1x->word_0x4A_74 = D41A0_BYTESTR_0.array_0x365F4[a2].str_0x3647C_4.axis.x;
	//return result;
}

//----- (00012410) --------------------------------------------------------
void sub_12410(type_str_0x6E8E* a1x, char a2)//1f3410
{
	//int v2; // edx
	char v3; // bh

	//v2 = 8 * *(uint8_t *)(a1 + 72);
	v3 = 0;
	if (D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647A_2._axis_2d.x)
		sub_12330(a1x, D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647A_2._axis_2d.x);
	else
		v3 = 1;
	if (v3)
		sub_12470(a1x, a2);
}

//----- (00012470) --------------------------------------------------------
void sub_12470(type_str_0x6E8E* a1x, char a2)//1f3470
{
	//type_str_0x6E8E* result; // eax

	//result = a1;
	a1x->byte_0x49_73 = 0;
	a1x->byte_0x48_72 = 0;
	a1x->word_0x4A_74 = 0;
	a1x->byte_0x45_69 = a2;
	//return result;
}

//----- (00012500) --------------------------------------------------------
void sub_12500(type_str_0x6E8E* a1x)//1f3500
{
	//Bit8u* v1; // eax
	int v1x;
	type_str_0x6E8E* v1y;
	int16_t v2; // di
	int16_t v3; // si
	//Bit8u* v4; // ecx
	//int16_t v5; // si
	char v6; // dl
	int16_t v7; // dx
	//int v8; // esi
	int16_t v9; // cx
	int16_t v11; // [esp+0h] [ebp-4h]

	//LOBYTE(v1) = a1x->byte_0x45_69 & 7;
	v2 = 0;
	v3 = a1x->byte_0x45_69 & 7;
	v11 = 1;
	if ((a1x->byte_0x45_69 & 7) < 4u || (a1x->byte_0x45_69 & 7) > 5u)
	{
		//LOBYTE(v1) = a1x->byte_0x49_73 - 1;
		switch (a1x->byte_0x49_73)
		{
		case 0xA:
			v11 = 0;
			if (v3 != 2 && v3 != 6)
				/*LOBYTE(v1) = (Bit8u)*/sub_12330(a1x, a1x->byte_0x48_72);
			break;
		case 0xD:
		case 0xE:
		case 0x10:
		case 0x11:
			v11 = 0;
			if (v3 != 2 && v3 != 6)
			{
				//LOBYTE(v1) = 8 * *(x_BYTE *)(a1 + 64) + 7;
				a1x->byte_0x45_69 = 8 * a1x->byte_0x40_64 + 7;
			}
			break;
		case 0xF:
			//LOBYTE(v1) = 0;
			v11 = 0;
			if (v3)
				/*LOBYTE(v1) = */sub_12330(a1x, a1x->byte_0x48_72);
			break;
		default:
			break;
		}
		if (v11)
		{
			//v4 = (char*)(0x365F2 + 8 * x_D41A0_BYTEARRAY_0[a1[72] + 2]);
			//v4 =  &x_D41A0_BYTEARRAY_0[0x365F2 + 8 * a1x->byte_0x48_72 + 2];
			//LOBYTE(v1) = *v4 - 1;
			switch (D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647A_byte_0)
			{
			case 1:
				v1x = abs(D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647C_4.axis.x - a1x->array_0x4C_76.x);
				if (v1x <= 2048)
				{
					v1x = abs(D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647C_4.axis.y - a1x->array_0x4C_76.y);
					if (v1x <= 2048)
						goto LABEL_44;
				}
				goto LABEL_45;
			case 3:
				v1x = D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647A_byte_1;
				if (v1x & 4)
				{
					a1x->word_0x4A_74 = 0;
					if (v3 != 2 && v3 != 6)
						goto LABEL_44;
				}
				else if (v1x & 2)
				{
					v9 = a1x->word_0x4A_74;
					if (v9)
					{
						v1y = x_DWORD_EA3E4[v9];
						if (v1y->dword_0x8 < 0 || v1y->struct_byte_0xc_12_15.byte[1] & 4)
							a1x->word_0x4A_74 = 0;
					}
				}
				goto LABEL_45;
			case 4:
			case 5:
			case 8:
			case 9:
				v6 = D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647A_byte_1;
				if (v6 & 4)
				{
					v2 = 1;
				}
				else
				{
					if (!(v6 & 2))
					{
						//LOBYTE(v1) = *v4;
						if (D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647A_byte_0 == 9)
						{
							//v8 = *((x_DWORD *)v4 + 1);
							if (D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647C_4.axis.x|| D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647C_4.axis.y)
							{
								v1x = abs(D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647C_4.axis.x - a1x->array_0x4C_76.x);
								if (v1x <= 3072)
								{
									v1x = abs(D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647C_4.axis.y - a1x->array_0x4C_76.y);
									if (v1x <= 3072)
										goto LABEL_44;
								}
							}
						}
						goto LABEL_45;
					}
					//LOBYTE(v1) = *v4;
					if (D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647A_byte_0 < 4u
						|| D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647A_byte_0 > 5u
						|| (v7 = a1x->word_0x4A_74) == 0
						|| (v1y = x_DWORD_EA3E4[v7], v1y->dword_0x8 >= 0) && !(v1y->struct_byte_0xc_12_15.byte[1] & 4))
					{
					LABEL_45:
						if (v2)
							sub_12410(a1x, 8 * a1x->byte_0x40_64 + 1);
						return;
					}
				}
				a1x->word_0x4A_74 = 0;
				goto LABEL_45;
			case 6:
				//v5 = a1x->word_0x4A_74 - 1;
				a1x->word_0x4A_74--;// = v5;
				if (!a1x->word_0x4A_74)
					goto LABEL_44;
				goto LABEL_45;
			case 7:
				if (D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647A_byte_1 & 0x18)
				{
					/*LOBYTE(v1) = (unsigned int)*/sub_12870();
				LABEL_44:
					v2 = 1;
				}
				goto LABEL_45;
			default:
				goto LABEL_45;
			}
		}
	}
}


//----- (00012780) --------------------------------------------------------
void sub_12780()//1f3780
{
	int16_t v0; // bx
	//Bit8u* result; // eax
	int resultx;
	int16_t v2; // dx
	char v3; // cl
	type_str_0x6E8E* v4x; // ecx
	char v5; // dh

	//adress 1f3783
	v0 = 1;
	//result = &x_D41A0_BYTEARRAY_0[0x365FC];
	resultx = 0;
	while (v0 <= D41A0_BYTESTR_0.byte_0x36E00)
	{
		//if (!*result)
		if(!D41A0_BYTESTR_0.array_0x365F4[resultx+1].str_0x3647A_byte_0)
			goto LABEL_18;
		v2 = 0;
		switch (D41A0_BYTESTR_0.array_0x365F4[resultx + 1].str_0x3647A_byte_0)
		{
		case 3:
		case 4:
		case 5:
		case 8:
		case 9:
			v3 = D41A0_BYTESTR_0.array_0x365F4[resultx + 1].str_0x3647A_byte_1;
			if (v3 & 4)
				goto LABEL_11;
			if (v3 & 2)
			{
				//if (x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[D41A0_BYTESTR_0.array_0x365F4[resultx + 1].str_0x3647A_2.word])//fix it
				if (x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[D41A0_BYTESTR_0.array_0x365F4[resultx + 1].str_0x3647C_4.axis.x])//fix it
					goto LABEL_12;
			LABEL_11:
				v2 = 1;
				goto LABEL_12;
			}
			//v4 = *((x_DWORD *)result + 1);
			
			v4x = D41A0_BYTESTR_0.array_0x365F4[resultx+1].str_0x3647C_4.pointer_0x6E8E;
			// FIXME: types
			// // if (v4x && ((int)v4x>0xffff) && (v4x->dword_0x8 < 0 || v4x->struct_byte_0xc_12_15.byte[1] & 4))
			// 	goto LABEL_11;
				
			//allert_error();
		LABEL_12:
			if (v2)
				D41A0_BYTESTR_0.array_0x365F4[resultx + 1].str_0x3647A_byte_1 |= 4u;
		LABEL_18:
			v0++;
			resultx++;// += 8;
			break;
		case 7:
			v5 = D41A0_BYTESTR_0.array_0x365F4[resultx + 1].str_0x3647A_byte_1;
			if (v5 & 0x18)
			{
				if (v5 & 0x10)
					D41A0_BYTESTR_0.array_0x365F4[resultx + 1].str_0x3647A_byte_1 = v5 & 0xEF;
				else
					D41A0_BYTESTR_0.array_0x365F4[resultx + 1].str_0x3647A_byte_1 = v5 & 0xF7;
			}
			goto LABEL_18;
		default:
			goto LABEL_18;
		}
	}
	//return result;
}

//----- (00012870) --------------------------------------------------------
void sub_12870()//1f3870
{
	int16_t v0; // dx
	//Bit8u* index; // eax
	int indexx;
	char v2; // bh

	v0 = 1;
	//index = &x_D41A0_BYTEARRAY_0[0x365FC];
	indexx = 0;
	while (v0 <= D41A0_BYTESTR_0.byte_0x36E00)
	{
		if (D41A0_BYTESTR_0.array_0x365F4[indexx + 1].str_0x3647A_byte_0)
		{
			switch (D41A0_BYTESTR_0.array_0x365F4[indexx + 1].str_0x3647A_byte_0)
			{
			case 3:
			case 4:
			case 5:
			case 8:
			case 9:
				v2 = D41A0_BYTESTR_0.array_0x365F4[indexx + 1].str_0x3647A_byte_1;
				if (v2 & 4)
				{
					if (v2 & 2)
						D41A0_BYTESTR_0.array_0x365F4[indexx + 1].str_0x3647A_byte_1 = v2 & 0xFB;
				}
				break;
			default:
				break;
			}
		}
		v0++;
		indexx++;// += 8;
	}
//	return result;
}

//----- (00012910) --------------------------------------------------------
signed int sub_12910(type_str_0x6E8E* a1x)//1f3910
{
	signed int result; // eax

	sub_12A70(a1x);
	switch (a1x->dword_0xA4_164x->byte_0x1C1_449)
	{
	case 0:
		sub_12E70(a1x);
		result = sub_12E70(a1x);
		break;
	case 1:
		sub_12FF0(a1x);
		result = sub_12E70(a1x);
		break;
	case 2:
		_nmemneed((Bit8u*)a1x);
		result = sub_12E70(a1x);
		break;
	case 3:
		sub_13100(a1x);
		result = sub_12E70(a1x);
		break;
	case 4:
		sub_131F0(a1x);
		result = sub_12E70(a1x);
		break;
	case 5:
		_nmemneed_0((Bit8u*)a1x);
		result = sub_12E70(a1x);
		break;
	case 6:
		sub_135C0(a1x);
		result = sub_12E70(a1x);
		break;
	case 7:
		sub_13710(a1x);
		result = sub_12E70(a1x);
		break;
	case 8:
		sub_13830(a1x);
		result = sub_12E70(a1x);
		break;
	case 9:
		sub_13870(a1x);
		result = sub_12E70(a1x);
		break;
	case 0xB:
		sub_133B0(a1x);
		result = sub_12E70(a1x);
		break;
	case 0xC:
		sub_13270(a1x);
		result = sub_12E70(a1x);
		break;
	case 0xD:
		sub_13850(a1x);
		result = sub_12E70(a1x);
		break;
	case 0xE:
		sub_161A0(a1x);
		goto LABEL_16;
	default:
	LABEL_16:
		result = sub_12E70(a1x);
		break;
	}
	return result;
}

//----- (00012A70) --------------------------------------------------------
signed int sub_12A70(type_str_0x6E8E* a1x)//1f3a70
{
	type_str_164* v1x; // edx
	signed int v2; // edi
	//type_str_0x6E8E* v2x; // edi
	//int16_t v3; // cx
	int16_t v4; // dx
	//int v5; // esi
	//int16_t v6; // ax
	int16_t i; // dx
	//int v8; // ecx
	type_str_164* v9x; // eax
	//int v10; // esi
	//uint16_t v11; // cx
	//int v12; // eax
	//int v13; // eax
	//int v14; // esi
	//int v15; // eax
	uint16_t v16; // dx
	//int v18; // edx
	//uint8_t v19; // ah
	int v20; // ecx
	int v21; // edx
	//int v22; // edx
	//int v23; // ecx
	int v24; // ecx
	int v25; // edx
	type_str_0x6E8E* v26x; // esi
	int16_t j; // si
	int v28; // edx
	//int v29; // eax
	//int v30; // eax
	//int v32; // [esp+0h] [ebp-4h]

	sub_15EE0();
	v1x = a1x->dword_0xA4_164x;
	v2 = 0;
	//v3 = v1x->word_0x1A2_418;
	if (v1x->word_0x1A2_418 < 0)
		v1x->word_0x1A2_418++;
	v4 = 0;
	do
	{
		//v5 = 2 * v4 + a1x->dword_0xA4_164;
		//v6 = *(x_WORD *)(v5 + 871);
		if (a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[v4] > 0)
			a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[v4]--;
		v4++;
	} while (v4 < 26);
	for (i = 0; i < 8; i++)
	{
		//v8 = 8 * i;
		v9x = a1x->dword_0xA4_164x;
		//v32 = v8;
		//v10 = v8 + v9;
		//v9x->word_0x204_516[4*i];
		//v11 = *(x_WORD *)(v8 + v9 + 516);
		if (v9x->array_0x1FC_508[4 * i+4] < 0x601Fu)
		{
			v9x->array_0x1FC_508[4 * i+4] = v9x->word_0x242_578 + 1 + v9x->array_0x1FC_508[4 * i];
			//v12 = v32 + a1x->dword_0xA4_164;
			if (v9x->array_0x1FC_508[4 * i+4] > 0x601F)
				v9x->array_0x1FC_508[4 * i+4] = 0x601F;
		}
		//v13 = a1x->dword_0xA4_164;
		//v14 = v13 + 8 * i;
		if (v9x->array_0x1FC_508[4 * i+4] > 0x601Fu)
		{
			if (!v9x->array_0x1FC_508[4 * i+4+1])
				v9x->array_0x1FC_508[4 * i+4] -= 256 - v9x->word_0x242_578;
			//v15 = a1x->dword_0xA4_164 + 8 * i;
			if (v9x->array_0x1FC_508[4 * i+4] < 0x601F)
				v9x->array_0x1FC_508[4 * i+4] = 0x601F;
		}
	}
	_wcpp_1_unwind_leave__99((Bit8u*)a1x);
	v16 = a1x->dword_0xA4_164x->word_0x3A_58;
	if (v16 && sub_106C0(a1x, x_DWORD_EA3E4[v16]))
		v2 = 1;
	if (v2)
		a1x->dword_0xA4_164x->word_0x159_345 = 2;
	if (a1x->dword_0xA4_164x->word_0x159_345)
	{
		memset((void*)&a1x->str_0x5E_94, 0, 36);
		//memset((void*)(a1 + 94), 0, 36);
		//fix
		/*a1x->str_0x5E_94.dword_0x5E_94 = 0;
		a1x->str_0x5E_94.dword_0x5E_94 = 0;//94
		a1x->str_0x5E_94.word_0x62_98 = 0;//98 //4
		a1x->str_0x5E_94.dword_0x64_100 = 0;//100 //6
		a1x->str_0x5E_94.word_0x68_104 = 0;//104 //10
		a1x->stub5b[24];
		memset(a1x->str_0x5E_94.stub5b, 0, 24);*/
		//fix

		a1x->dword_0xA4_164x->word_0x159_345--;
	}
	else if (sub_5EFA0(a1x) == 2)
	{
		a1x->byte_0x45_69 = 2;
		return 0;
	}
	sub_146F0(a1x);
	//v18 = a1x->dword_0xA4_164;
	//v19 = a1x->dword_0xA4_164->byte_0x154_340;
	if (a1x->dword_0xA4_164x->byte_0x154_340 < 0xC8u)
		a1x->dword_0xA4_164x->byte_0x154_340++;
	a1x->dword_0x90_144 += a1x->dword_0x88_136;
	v20 = a1x->dword_0xA4_164x->word_0x163_355 + a1x->dword_0x8;
	a1x->dword_0x8 = v20;
	if (v20 < -1)
		a1x->dword_0x8 = -1;
	v21 = a1x->dword_0x4;
	if (a1x->dword_0x8 > v21)
		a1x->dword_0x8 = v21;
	//v22 = a1x->dword_0xA4_164;
	//v23 = *(x_DWORD *)(v22 + 365);
	if (a1x->dword_0xA4_164x->dword_0x16D_365)
		a1x->dword_0xA4_164x->dword_0x16D_365--;
	if (v2 || a1x->struct_byte_0xc_12_15.byte[1] & 0x10)
	{
		a1x->dword_0x88_136 = a1x->dword_0x8C_140 / 200;
		a1x->dword_0xA4_164x->word_0x163_355 = a1x->dword_0x4 / 200;
		if (a1x->dword_0x88_136 < 1000)
			a1x->dword_0x88_136 = 1000;
		a1x->struct_byte_0xc_12_15.byte[1] &= 0xEFu;
	}
	else
	{
		a1x->dword_0x88_136 = a1x->dword_0x8C_140 / 2000;
		a1x->dword_0xA4_164x->word_0x163_355 = a1x->dword_0x4 / 500;
		if (a1x->dword_0x88_136 < 100)
			a1x->dword_0x88_136 = 100;
	}
	if (a1x->dword_0x90_144 < 0)
		a1x->dword_0x90_144 = 0;
	v24 = a1x->dword_0x8C_140;
	if (a1x->dword_0x90_144 > v24)
		a1x->dword_0x90_144 = v24;
	v25 = a1x->dword_0xA4_164x->word_0x246_582;
	//if (!(a1x->byte_0x3E_62 % (64 - ((v25 - (__CFSHL__(v25 >> 31, 2) + 4 * (v25 >> 31))) >> 2))))
	if (!(a1x->byte_0x3E_62 % (64 - (((v25 - (my_sign32(v25) << 2) + my_sign32(v25)) >> 2)))))
	{
		v26x = sub_15CB0(/*v2, */a1x);
		if (v26x)
		{
			sub_15D20(a1x);
			sub_15D40(v2, a1x, v26x);
		}
		if (a1x->dword_0x8 < a1x->dword_0x4)
		{
			for (j = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[5]; j >= 0; j--)
			{
				if (sub_15F20(a1x, j, 5) == 5)
				{
					sub_14E10(a1x, 5u);
					break;
				}
			}
		}
	}
	v28 = (int16_t)sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	//v29 = a1x->dword_0xA0_160;
	if (a1x->array_0x4C_76.z > v28 + a1x->dword_0xA0_160x->word_160_0xa_10)
		a1x->array_0x4C_76.z = a1x->dword_0xA0_160x->word_160_0xa_10 + v28;
	//v30 = a1x->dword_0xA0_160;
	if (a1x->array_0x4C_76.z < v28 + a1x->dword_0xA0_160x->word_160_0xc_12)
		a1x->array_0x4C_76.z = a1x->dword_0xA0_160x->word_160_0xc_12 + v28;
	return 1;
}

int debug_counter_1f3e70 = 0;
//----- (00012E70) --------------------------------------------------------
signed int sub_12E70(type_str_0x6E8E* a1x)//1f3e70
{
	int v2; // edx

	if (sub_13B00(a1x))
	{
		a1x->dword_0xA4_164x->byte_0x1C1_449 = 3;
	}
	else
	{
		if (sub_13DC0(a1x))
		{
			a1x->dword_0xA4_164x->byte_0x1C1_449 = 11;
			return 1;
		}
		v2 = a1x->dword_0xA4_164x->word_0x246_582;

		int cftemp = 0;
		if ((v2 >> 30) & 1)
			cftemp = 1;
		//Bit8u vara=a1x->byte_0x3E_62;
		//int varb=(64 - (((v2 - ((v2 >> 31) << 2)) - cftemp) >> 2));
		if (!(a1x->byte_0x3E_62 % (64 - (((v2 - ((v2 >> 31) << 2)) - cftemp) >> 2))))
		//if (!(a1x->byte_0x3E_62 % (64 - ((v2 - (__CFSHL__(v2 >> 31, 2) + 4 * (v2 >> 31))) >> 2))))
		{
			if (sub_13C50(a1x))
			{
				a1x->dword_0xA4_164x->byte_0x1C1_449 = 1;
				return 1;
			}
			if (sub_13E40(a1x))
			{
				a1x->dword_0xA4_164x->byte_0x1C1_449 = 7;
				return 1;
			}
			if (sub_14030(a1x))
			{
				a1x->dword_0xA4_164x->byte_0x1C1_449 = 8;
				return 1;
			}
			if (sub_14250(a1x))
			{
				a1x->dword_0xA4_164x->byte_0x1C1_449 = 9;
				return 1;
			}
			if ((uint16_t)sub_15FC0(a1x))
			{
				a1x->dword_0xA4_164x->byte_0x1C1_449 = 14;
				return 1;
			}
			if (sub_13CE0(a1x))
			{
				a1x->dword_0xA4_164x->byte_0x1C1_449 = 6;
				return 1;
			}
			if (sub_14530(a1x))
			{
				a1x->dword_0xA4_164x->byte_0x1C1_449 = 13;
				return 1;
			}
			sub_14630(a1x);
		}
	}
	return 1;
}

//----- (00012FF0) --------------------------------------------------------
signed int sub_12FF0(type_str_0x6E8E* a1x)//1f3ff0
{
	type_str_0x6E8E* v1x; // esi
	int16_t i; // di
	int v3; // eax

	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	if (!sub_14C60(a1x, x_DWORD_EA3E4[a1x->word_0x96_150]))
		goto LABEL_14;
	a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
	if (sub_14C90(a1x, v1x, 512, 2048))
	{
		for (i = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[2]; i >= 0 && sub_15F20(a1x, i, 2) != 2; i--)
			;
		if (!sub_14E10(a1x, 2u))
		{
			a1x->dword_0xA4_164x->word_0xc_12 = 0;
			v3 = a1x->array_0x4C_76.z - (v1x->array_0x4C_76.z + 512);
			if (a1x->array_0x4C_76.z != v1x->array_0x4C_76.z + 512)
			{
				if (v3 <= 0)
					v3 = -1;
				//LOWORD(v3) = -1;
				else
					v3 = 1;
					//LOWORD(v3) = 1;
			}
			a1x->array_0x4C_76.z += a1x->dword_0xA0_160x->word_160_0xe_14 * v3;
			goto LABEL_13;
		}
	LABEL_14:
		sub_16580(a1x);
		return 0;
	}
LABEL_13:
	sub_16580(a1x);
	return 1;
}

//----- (00013100) --------------------------------------------------------
signed int sub_13100(type_str_0x6E8E* a1x)//1f4100
{
	int16_t i; // si
	int v2; // eax
	signed int v3; // ebx

	a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a1x->word_0x9A_154x);
	if (!sub_14C90(a1x, 0, 2048, 4096))
		goto LABEL_16;
	for (i = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[2]; i >= 0 && (uint16_t)sub_15F20(a1x, i, 2) != 2; i--)
		;
	if (sub_14E10(a1x, 2u))
	{
	LABEL_16:
		sub_16580(a1x);
		v3 = 0;
	}
	else
	{
		a1x->dword_0xA4_164x->word_0xc_12 = 0;
		v2 = a1x->array_0x4C_76.z - (a1x->word_0x9A_154x.z + 512);
		if (a1x->array_0x4C_76.z != a1x->word_0x9A_154x.z + 512)
		{
			if (a1x->array_0x4C_76.z - (a1x->word_0x9A_154x.z + 512) <= 0)
				v2 = -1;
			//LOWORD(v2) = -1;
			else
				v2 = 1;
				//LOWORD(v2) = 1;
		}
		v3 = 1;
		a1x->array_0x4C_76.z += v2 * a1x->dword_0xA0_160x->word_160_0xe_14;
		sub_16580(a1x);
	}
	return v3;
}

//----- (000131F0) --------------------------------------------------------
signed int sub_131F0(type_str_0x6E8E* a1x)//1f41f0
{
	type_str_0x6E8E* v1x; // esi
	signed int result; // ebx

	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	if (!sub_14C60(a1x, x_DWORD_EA3E4[a1x->word_0x96_150])
		|| (a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a1x->array_0x4C_76), sub_14C90(a1x, v1x, 256, 2048)))
	{
		sub_16580(a1x);
		result = 0;
	}
	else
	{
		sub_16580(a1x);
		result = 1;
	}
	return result;
}

//----- (00013270) --------------------------------------------------------
signed int sub_13270(type_str_0x6E8E* a1x)//1f4270
{
	int v1; // edi
	int16_t v2; // si
	//int v3; // edx
	uint16_t v4; // cx
	int16_t v5; // di
	int16_t i; // si
	signed int v7; // ebx
	signed int result; // eax
	type_str_0x6E8E* v9x; // eax

	v1 = a1x->dword_0xA4_164x->word_0x244_580;
	v2 = 0;
	if (watcomrand() % 255 < v1)
	{
		//v3 = a1x->dword_0xA4_164;
		v4 = a1x->dword_0xA4_164x->word_0x3A_58;
		v5 = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[2];
		if (v4 && sub_106C0(a1x, x_DWORD_EA3E4[v4]))
			v2 = 1;
		if (!v2)
		{
			for (i = v5; i >= 0; i--)
			{
				if ((uint16_t)sub_15F20(a1x, v5, 22) == 22)
				{
					sub_14E10(a1x, 0x16u);
					sub_16580(a1x);
					v7 = 1;
					goto LABEL_19;
				}
			}
		}
	}
	if (sub_15170(a1x, 3u))
	{
		if (!sub_156F0(a1x, 3u))
			sub_14E10(a1x, 3u);
		sub_16580(a1x);
		result = 1;
	}
	else
	{
		sub_16580(a1x);
		v9x = sub_146C0(a1x, 3u);
		if (v9x && v9x->word_0x2E_46 > 0)
		{
			result = 1;
		}
		else
		{
			a1x->dword_0xA4_164x->word_0xc_12 = a1x->word_0x84_132;
			a1x->dword_0xA4_164x->word_0xe_14 = 1;
			v7 = 0;
		LABEL_19:
			result = v7;
		}
	}
	return result;
}

//----- (000133B0) --------------------------------------------------------
signed int sub_133B0(type_str_0x6E8E* a1x)//1f43b0
{
	//int v1; // eax
	type_str_0x6E8E* v2x; // esi
	int16_t k; // di
	int16_t l; // di
	int16_t i; // si
	int16_t j; // si
	type_str_0x6E8E* v9x; // eax

	//v1 = a1x->dword_0xA4_164;
	v2x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58];
	if (v2x <= x_DWORD_EA3E4[0])
	{
		for (i = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[11]; i >= 0; i--)
		{
			if ((uint16_t)sub_15F20(a1x, i, 11) == 11)
			{
				sub_14E10(a1x, 0xBu);
				break;
			}
		}
		for (j = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[3]; j >= 0; j--)
		{
			if ((uint16_t)sub_15F20(a1x, j, 3) == 3)
			{
				sub_14E10(a1x, 3u);
				sub_16580(a1x);
				return 1;
			}
		}
		v9x = sub_146C0(a1x, 3u);
		if (v9x && v9x->word_0x2E_46 > 0)
		{
			sub_16580(a1x);
			return 1;
		}
		a1x->dword_0xA4_164x->word_0xc_12 = a1x->word_0x84_132;
		a1x->dword_0xA4_164x->word_0xe_14 = 1;
	}
	else
	{
		if ((unsigned int)sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &v2x->array_0x4C_76) > 0x6400000)
		{
			for (k = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[1]; k >= 0; k--)
			{
				if ((uint16_t)sub_15F20(a1x, k, 1) == 1 && sub_14E10(a1x, 1u))
					goto LABEL_6;
			}
		}
		for (l = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[11]; l >= 0; l--)
		{
			if ((uint16_t)sub_15F20(a1x, l, 11) == 11)
			{
				sub_14E10(a1x, 0xBu);
				break;
			}
		}
		if (sub_14C60(a1x, v2x))
		{
			a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v2x->array_0x4C_76);
			if (sub_14C90(a1x, v2x, 256, 2048))
			{
				sub_16580(a1x);
				return 0;
			}
		LABEL_6:
			sub_16580(a1x);
			return 1;
		}
	}
	sub_16580(a1x);
	return 0;
}

//----- (000135C0) --------------------------------------------------------
signed int sub_135C0(type_str_0x6E8E* a1x)//1f45c0
{
	type_str_0x6E8E* v1x; // esi
	int16_t i; // di
	int16_t v3; // ax
	int v4; // esi
	int16_t v7; // [esp+0h] [ebp-4h]

	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	if (!sub_14C60(a1x, x_DWORD_EA3E4[a1x->word_0x96_150]))
	{
	LABEL_17:
		sub_16580(a1x);
		return 0;
	}
	a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
	if (sub_14C90(a1x, v1x, 1024, 3072))
	{
		for (i = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[1]; i >= 0; i--)
		{
			v7 = sub_15F20(a1x, i, 1);
			if (v7 == 1)
				break;
		}
		if (v7 == 1 && sub_14E10(a1x, 1u))
		{
			v3 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
			if ((uint16_t)sub_582B0(a1x->word_0x1C_28, v3) < 0x1Cu)
				v1x->word_0x94_148 = a1x->word_0x1A_26;
			goto LABEL_17;
		}
		a1x->dword_0xA4_164x->word_0xc_12 = 0;
		v4 = a1x->array_0x4C_76.z - (v1x->array_0x4C_76.z + 512);
		if (v4)
		{
			if (v4 <= 0)
				v4 = -1;
			//LOWORD(v4) = -1;
			else
				v4 = 1;
				//LOWORD(v4) = 1;
		}
		a1x->array_0x4C_76.z += v4 * a1x->dword_0xA0_160x->word_160_0xe_14;
	}
	sub_16580(a1x);
	return 1;
}

//----- (00013710) --------------------------------------------------------
signed int sub_13710(type_str_0x6E8E* a1x)//1f4710
{
	type_str_0x6E8E* v1x; // esi
	int v2; // edx
	int8_t v3; // al
	int v4; // edx

	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	if (!sub_14C60(a1x, v1x))
		goto LABEL_12;
	a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
	if (sub_14C90(a1x, v1x, 2048, 3584))
	{
		v2 = a1x->dword_0xA4_164x->word_0x246_582;
		if (!(a1x->byte_0x3E_62 % (64 - ((v2 - (__CFSHL__(v2 >> 31, 2) + 4 * (v2 >> 31))) >> 2))))
		{
			v3 = sub_15910(a1x);
			if (v3 == -1 || !sub_14E10(a1x, v3))
			{
				a1x->dword_0xA4_164x->word_0xc_12 = 0;
				v4 = a1x->array_0x4C_76.z - (v1x->array_0x4C_76.z + 512);
				if (a1x->array_0x4C_76.z != v1x->array_0x4C_76.z + 512)
				{
					if (v4 <= 0)
						v4 = -1;
					//LOWORD(v4) = -1;
					else
						v4 = 1;
						//LOWORD(v4) = 1;
				}
				a1x->array_0x4C_76.z += v4 * a1x->dword_0xA0_160x->word_160_0xe_14;
				goto LABEL_11;
			}
		LABEL_12:
			sub_16580(a1x);
			return 0;
		}
	}
LABEL_11:
	sub_16580(a1x);
	return 1;
}

//----- (00013830) --------------------------------------------------------
signed int sub_13830(type_str_0x6E8E* a1x)//1f4830
{
	return sub_13890(a1x);
}

//----- (00013850) --------------------------------------------------------
signed int sub_13850(type_str_0x6E8E* a1x)//1f4850
{
	return sub_13890(a1x);
}

//----- (00013870) --------------------------------------------------------
int sub_13870(type_str_0x6E8E* a1x)//1f4870
{
	signed int v1; // eax

	v1 = sub_13890(a1x);
	return v1;// nullsub_1(v1);
}

//----- (00013890) --------------------------------------------------------
signed int sub_13890(type_str_0x6E8E* a1x)//1f4890
{
	type_str_0x6E8E* v1x; // esi
	int8_t v2; // al
	uint8_t v3; // di
	//char v4; // ah
	//char v5; // dh
	//int v6; // eax
	//char v7; // ch
	//int v8; // eax
	//char v9; // cl
	//int v10; // eax
	//char v11; // dh
	int v12; // eax

	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	if (sub_14C60(a1x, v1x))
	{
		a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
		if (sub_14C90(a1x, v1x, 3328, 4608) && a1x->dword_0xA4_164x->word_0x1A2_418 >= 0)
		{
			v2 = sub_15790(a1x);
			if (v2 != -1)
			{
				v3 = v2;
				if (sub_15170(a1x, v2))
				{
					if (sub_14E10(a1x, v3))
					{
						//v4 = v1x->byte_0x40_64;
						if (!v1x->byte_0x40_64 || v1x->byte_0x40_64 == 1)
							a1x->dword_0xA4_164x->array_0x1FC_508[4 * v1x->dword_0xA4_164x->word_0x38_56+5] = 0;
						sub_16580(a1x);
						return 0;
					}
				}
			}
			a1x->dword_0xA4_164x->word_0xc_12 = 0;
			//v5 = v1x->byte_0x40_64;
			if (!v1x->byte_0x40_64 || v1x->byte_0x40_64 == 1)
			{
				//v6 = a1x->dword_0xA4_164;
				//v7 = *(x_BYTE *)(v6 + 1117);
				if (a1x->dword_0xA4_164x->str_611_byte_0x45D_1117 < 3 || a1x->dword_0xA4_164x->str_611_byte_0x45D_1117 >= 5)
				{
					//v8 = a1x->dword_0xA4_164;
					//v9 = *(x_BYTE *)(v8 + 1117);
					if (a1x->dword_0xA4_164x->str_611_byte_0x45D_1117 < 5 || a1x->dword_0xA4_164x->str_611_byte_0x45D_1117 >= 20)
					{
						//v10 = a1x->dword_0xA4_164;
						//v11 = *(x_BYTE *)(v10 + 1117);
						if (a1x->dword_0xA4_164x->str_611_byte_0x45D_1117 < 20)
						{
							if (a1x->dword_0xA4_164x->str_611_byte_0x45D_1117)
							{
								if (a1x->dword_0xA4_164x->str_611_byte_0x45C_1116 == 1)
									a1x->word_0x20_32 -= 512;
								else
									a1x->word_0x20_32 += 512;
								a1x->word_0x20_32 &= 0x7ff;
								a1x->word_0x82_130 = 3
									* a1x->word_0x84_132
									* a1x->dword_0xA4_164x->word_0x246_582
									/ 255;
								a1x->dword_0xA4_164x->word_0xe_14 = 1;
							}
							else
							{
								a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
								if ((signed int)(a1x->word_0x14_20 % 0xFFu) >= 127)
								{
									a1x->dword_0xA4_164x->str_611_byte_0x45C_1116 = 2;
									a1x->word_0x1C_28 += 512;
								}
								else
								{
									a1x->dword_0xA4_164x->str_611_byte_0x45C_1116 = 1;
									a1x->word_0x1C_28 -= 512;
								}
								a1x->word_0x1C_28 &= 0x7FF;
							}
							a1x->dword_0xA4_164x->str_611_byte_0x45D_1117++;
						}
						else
						{
							a1x->dword_0xA4_164x->str_611_byte_0x45D_1117 = 0;
						}
					}
					else
					{
						a1x->dword_0xA4_164x->str_611_byte_0x45D_1117++;
					}
				}
				else
				{
					a1x->dword_0xA4_164x->str_611_byte_0x45D_1117++;
				}
			}
			v12 = a1x->array_0x4C_76.z - (v1x->array_0x4C_76.z + 512);
			if (a1x->array_0x4C_76.z != v1x->array_0x4C_76.z + 512)
			{
				if (a1x->array_0x4C_76.z - (v1x->array_0x4C_76.z + 512) <= 0)
					v12 = -1;
				//LOWORD(v12) = -1;
				else
					v12 = 1;
					//LOWORD(v12) = 1;
			}
			a1x->array_0x4C_76.z += v12 * a1x->dword_0xA0_160x->word_160_0xe_14;
		}
		sub_16580(a1x);
		return 1;
	}
	sub_16580(a1x);
	return 0;
}

//----- (00013B00) --------------------------------------------------------
signed int sub_13B00(type_str_0x6E8E* a1x)//1f4b00
{
	type_str_0x6E8E* v1x; // esi
	int16_t v2; // bx
	type_str_0x6E8E* v3x; // eax
	//Bit8u* v4; // edi
	//int v5; // esi
	type_str_0x6E8E* v7x; // eax
	//Bit8u* v8; // edi
	//int v9; // esi
	int v11; // [esp+4h] [ebp-Ch]
	int16_t i; // [esp+8h] [ebp-8h]
	int v13; // [esp+Ch] [ebp-4h]

	v1x = x_DWORD_EA3E4[0];
	if (!a1x->dword_0xA4_164x->word_0x3A_58 && sub_146C0(a1x, 2u) && sub_15730(a1x, 2u))
	{
		v1x->word_0x1A_26 = a1x->word_0x1A_26;
		//v13 = (a1x->array_0x4C_76.x	- (__CFSHL__(a1x->array_0x4C_76.x >> 31, 14) + (a1x->array_0x4C_76.x >> 31 << 14))) >> 14;
		//v13 = (a1x->array_0x4C_76.x-(my_sign16(a1x->array_0x4C_76.x) * -16383)) >> 14;
		v13= (Bit16s)(((Bit16s)a1x->array_0x4C_76.x) - (my_sign16(a1x->array_0x4C_76.x) << 14) - my_sign16(a1x->array_0x4C_76.x)) >> 14;
		v2 = 0;
		//v11 = (a1x->array_0x4C_76.y - (__CFSHL__(a1x->array_0x4C_76.y >> 31, 14) + (a1x->array_0x4C_76.y >> 31 << 14))) >> 14;
		v11 = (Bit16s)(((Bit16s)a1x->array_0x4C_76.y) - (my_sign16(a1x->array_0x4C_76.y) << 14) - my_sign16(a1x->array_0x4C_76.y)) >> 14;
		while (v2 < 4)
		{
			for (i = 0; i < 4; i++)
			{
				v1x->array_0x4C_76.x = (((x_BYTE)v13 + (x_BYTE)i) & 3) << 14;
				v1x->array_0x4C_76.y = (((x_BYTE)v2 + (x_BYTE)v11) & 3) << 14;
				v3x = sub_14B10(v1x, 2u);
				if (!v3x || (unsigned int)sub_583B0(&v3x->array_0x4C_76, &v1x->array_0x4C_76) > 0x3000)
				{
					a1x->word_0x9A_154x=v1x->array_0x4C_76;
					return 1;
				}
				v7x = sub_14B10(v1x, 2u);
				if (!v7x || (unsigned int)sub_583B0(&v7x->array_0x4C_76, &v1x->array_0x4C_76) > 0x3000)
				{
					a1x->word_0x9A_154x = v1x->array_0x4C_76;
					return 1;
				}
			}
			v2++;
		}
	}
	return 0;
}

//----- (00013C50) --------------------------------------------------------
signed int sub_13C50(type_str_0x6E8E* a1x)//1f4c50
{
	type_str_0x6E8E* v1x; // ebx

	v1x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58];
	if (v1x <= x_DWORD_EA3E4[0] || v1x->byte_0x45_69 != 4 || v1x->word_0x30_48 || !sub_155E0(a1x))
		return 0;
	a1x->word_0x96_150 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
	a1x->word_0x98_152 = sub_14C40(v1x);
	return 1;
}

//----- (00013CE0) --------------------------------------------------------
type_str_0x6E8E* sub_13CE0(type_str_0x6E8E* a1x)//1f4ce0
{
	type_str_0x6E8E* resultx; // eax
	type_str_0x6E8E* v2x; // eax
	type_str_0x6E8E* v3x; // eax
	type_str_0x6E8E* v4x; // eax

	resultx = sub_146C0(a1x, 1u);
	if (resultx)
	{
		v2x = sub_146C0(a1x, 2u);
		if (v2x)
		{
			if (a1x->dword_0x8C_140 <= v2x->dword_0x8C_140)
			{
				v3x = sub_148E0(a1x);
				if (v3x)
				{
					a1x->word_0x96_150 = v3x-D41A0_BYTESTR_0.struct_0x6E8E;
					a1x->word_0x98_152 = sub_14C40(v3x);
					return (type_str_0x6E8E*)1;
				}
			}
		}
		else
		{
			v4x = sub_148E0(a1x);
			if (v4x)
			{
				a1x->word_0x96_150 = v4x-D41A0_BYTESTR_0.struct_0x6E8E;
				a1x->word_0x98_152 = sub_14C40(v4x);
				return (type_str_0x6E8E*)1;
			}
		}
		resultx = 0;
	}
	return resultx;
}

//----- (00013DC0) --------------------------------------------------------
signed int sub_13DC0(type_str_0x6E8E* a1x)//1f4dc0
{
	type_str_0x6E8E* v1x; // ecx
	type_str_0x6E8E* v2x; // ST00_4

	if (a1x->dword_0x4 / 2 <= a1x->dword_0x8)
		return 0;
	v1x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58];
	if (v1x <= x_DWORD_EA3E4[0])
		return 0;
	v2x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58];
	a1x->word_0x96_150 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
	a1x->word_0x98_152 = sub_14C40(v2x);
	return 1;
}

//----- (00013E40) --------------------------------------------------------
signed int sub_13E40(type_str_0x6E8E* a1x)//1f4e40
{
	type_str_0x6E8E* v1x; // edi
	type_str_0x6E8E* ix; // ebx
	type_str_0x6E8E* v3x; // ecx
	unsigned int v4; // eax
	int v5; // ebx
	signed int result; // ebx
	unsigned int v8; // [esp+8h] [ebp-8h]

	v8 = -1;
	if (!sub_164B0(a1x) || !a1x->dword_0xA4_164x->word_0x3A_58 && sub_146C0(a1x, 2u))
		return 0;
	v1x = 0;
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (ix->word_0x1A_26 != a1x->word_0x1A_26 && ix->byte_0x40_64 == 2)
		{
			if ((v3x = x_DWORD_EA3E4[ix->word_0x1A_26],
				50000 - a1x->dword_0xA4_164x->word_0x242_578 * (v3x->dword_0x8C_140 / 10) / 255 < a1x->dword_0xA4_164x->array_0x1FC_508[4 * v3x->dword_0xA4_164x->word_0x38_56+4])
				&& (unsigned int)sub_584D0_SQdistX_SQdistY(&v3x->array_0x4C_76, &ix->array_0x4C_76) > 0x3840000
				&& !sub_106C0(x_DWORD_EA3E4[ix->word_0x1A_26], ix)
				|| x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58]->dword_0x90_144 > 640
				* (255
					- a1x->dword_0xA4_164x->word_0x242_578)
				+ ix->dword_0x90_144)
			{
				v4 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &ix->array_0x4C_76);
				if (v4 < v8)
				{
					v1x = ix;
					v8 = v4;
				}
			}
		}
	}
	if (!v1x)
		return 0;
	v5 = a1x->dword_0xA0_160x->word_160_0x1c_28;
	if (sub_584D0_SQdistX_SQdistY(&v1x->array_0x4C_76, &a1x->array_0x4C_76) >= (unsigned int)(v5 * v5))
		return 0;
	result = 1;
	a1x->word_0x96_150 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
	a1x->word_0x98_152 = sub_14C40(v1x);
	return result;
}

//----- (00014030) --------------------------------------------------------
signed int sub_14030(type_str_0x6E8E* a1x)//1f5030
{
	type_str_0x6E8E* v1x; // edi
	type_str_0x6E8E* ix; // ebx
	char v3; // ah
	//int v4; // ecx
	//int v5; // eax
	unsigned int v7; // eax
	int v8; // ebx
	unsigned int v9; // [esp+0h] [ebp-14h]

	v9 = -1;
	if (!sub_15E60(a1x) || !a1x->dword_0xA4_164x->word_0x3A_58 && sub_146C0(a1x, 2u))
		return 0;
	v1x = 0;
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (ix->word_0x1A_26 != a1x->word_0x1A_26)
		{
			v3 = ix->byte_0x40_64;
			if ((!v3 || v3 == 1) && !sub_15760(ix, 0xBu))
			{
				//v4 = ix->dword_0xA4_164;
				//v5 = a1x->dword_0xA4_164 + 8 * ix->dword_0xA4_164x->word_0x38_56;
				if (a1x->dword_0xA4_164x->array_0x1FC_508[1+4+ 4 * ix->dword_0xA4_164x->word_0x38_56] == 1)
				{
					a1x->word_0x96_150 = ix-D41A0_BYTESTR_0.struct_0x6E8E;
					a1x->word_0x98_152 = sub_14C40(ix);
					return 1;
				}
				if (50000 - ix->dword_0x8C_140 / 10 * a1x->dword_0xA4_164x->word_0x242_578 / 255 <= a1x->dword_0xA4_164x->array_0x1FC_508[4 * ix->dword_0xA4_164x->word_0x38_56+4]
					|| !ix->dword_0xA4_164x->word_0x3A_58
					&& sub_146C0(ix, 2u)
					&& ix->dword_0x90_144 + 32 * (255 - a1x->dword_0xA4_164x->word_0x242_578) < a1x->dword_0x90_144)
				{
					v7 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &ix->array_0x4C_76);
					if (v7 < v9)
					{
						v1x = ix;
						v9 = v7;
					}
				}
			}
		}
	}
	if (!v1x)
		return 0;
	v8 = a1x->dword_0xA0_160x->word_160_0x1c_28 + 10;
	if (sub_584D0_SQdistX_SQdistY(&v1x->array_0x4C_76, &a1x->array_0x4C_76) >= (unsigned int)(v8 * v8))
		return 0;
	a1x->word_0x96_150 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
	a1x->word_0x98_152 = sub_14C40(v1x);
	return 1;
}

//----- (00014250) --------------------------------------------------------
signed int sub_14250(type_str_0x6E8E* a1x)//1f5250
{
	type_str_0x6E8E* v1x; // esi
	type_str_0x6E8E* ix; // ebx
	type_str_0x6E8E* v3x; // edx
	unsigned int v4; // eax
	int v5; // ebx
	int v7; // [esp+Ch] [ebp-Ch]
	//int v8; // [esp+10h] [ebp-8h]
	unsigned int v9; // [esp+14h] [ebp-4h]

	v9 = -1;
	if (!sub_15E60(a1x))
		return 0;
	v1x = 0;
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (ix->word_0x1A_26 != a1x->word_0x1A_26 && ix->byte_0x40_64 == 3)
		{
			v3x = x_DWORD_EA3E4[ix->word_0x1A_26];
			//v8 = v3x->dword_0xA4_164;
			v7 = a1x->dword_0xA4_164x->word_0x242_578;
			if (50000 - v3x->dword_0x8C_140 / 10 * v7 / 255 < a1x->dword_0xA4_164x->array_0x1FC_508[4 * v3x->dword_0xA4_164x->word_0x38_56+4]
				&& 10 * (275 - v7) < ix->dword_0x90_144
				&& !sub_106C0(ix, x_DWORD_EA3E4[v3x->dword_0xA4_164x->word_0x3A_58]))
			{
				v4 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &ix->array_0x4C_76);
				if (v4 < v9)
				{
					v1x = ix;
					v9 = v4;
				}
			}
		}
	}
	if (!v1x)
		return 0;
	v5 = a1x->dword_0xA0_160x->word_160_0x1c_28;
	if (sub_584D0_SQdistX_SQdistY(&v1x->array_0x4C_76, &a1x->array_0x4C_76) >= (unsigned int)(v5 * v5))
		return 0;
	a1x->word_0x96_150 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
	a1x->word_0x98_152 = sub_14C40(v1x);
	return 1;
}

//----- (00014530) --------------------------------------------------------
signed int sub_14530(type_str_0x6E8E* a1x)//1f5530
{
	type_str_0x6E8E* v1x; // esi
	signed int i; // edi
	type_str_0x6E8E* jx; // ebx
	unsigned int v4; // eax
	unsigned int v6; // [esp+0h] [ebp-8h]
	type_str_0x6E8E* v7x; // [esp+4h] [ebp-4h]

	v1x = 0;
	v6 = -1;
	if (!sub_15E60(a1x))
		return 0;
	v7x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58];
	if (v7x == x_DWORD_EA3E4[0])
		v7x = a1x;
	for (i = 0; i < 29; i++)
	{
		for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[i]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
		{
			if (jx->word_0x1A_26 != a1x->word_0x1A_26 && jx->dword_0x90_144 > 0)
			{
				v4 = sub_584D0_SQdistX_SQdistY(&v7x->array_0x4C_76, &jx->array_0x4C_76);
				if (v4 < v6)
				{
					v1x = jx;
					v6 = v4;
				}
			}
		}
	}
	if (!v1x)
		return 0;
	a1x->word_0x96_150 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
	a1x->word_0x98_152 = sub_14C40(v1x);
	return 1;
}

//----- (00014630) --------------------------------------------------------
signed int sub_14630(type_str_0x6E8E* a1x)//1f5630
{
	type_str_0x6E8E* v1x; // ecx

	if (a1x->dword_0x8 >= a1x->dword_0x4
		|| (v1x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58], v1x <= x_DWORD_EA3E4[0]))
	{
		a1x->dword_0xA4_164x->byte_0x1C1_449 = 12;
	}
	else
	{
		a1x->word_0x96_150 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
		a1x->word_0x98_152 = sub_14C40(v1x);
		a1x->dword_0xA4_164x->byte_0x1C1_449 = 11;
	}
	return 1;
}

//----- (000146C0) --------------------------------------------------------
type_str_0x6E8E* sub_146C0(type_str_0x6E8E* a1x, uint8_t a2)//1f56c0
{
	type_str_0x6E8E* resultx; // eax

	resultx = x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[a2]];
	if (resultx <= x_DWORD_EA3E4[0])
		resultx = 0;
	return resultx;
}

//----- (000146F0) --------------------------------------------------------
void sub_146F0(type_str_0x6E8E* a1x)//1f56f0
{
	//char v1; // ah
	//int16_t *v2; // edx
	int16_t v3; // ST10_2
	int v4; // ST0C_4
	int v5; // ST08_4
	int16_t v6; // ax
	uint16_t v7; // ax
	//int v8; // edx
	//int16_t v9; // cx
	//x_WORD *v10; // eax
	int16_t v11; // dx
	int16_t v12; // ax
	//int16_t v13; // ax
	uint16_t v14; // si
	Bit32s v15; // rax
	int v16; // eax
	//int v17; // edx
	int16_t v18; // si
	int16_t v19; // si
	unsigned int v20; // eax
	uint16_t v21; // si
	uint16_t v22; // dx


	//v1 = a1x->struct_byte_0xc_12_15.byte[1];
	if (a1x->struct_byte_0xc_12_15.byte[1] & 8)
	{
		a1x->struct_byte_0xc_12_15.byte[1] &= 0xF7;
	}
	else
	{
		x_WORD_EB398ar= a1x->array_0x4C_76;
		//v2 = *(int16_t **)a1x->dword_0xA0_160;
		v3 = a1x->dword_0xA0_160x->word_160_0xe_14;
		v4 = a1x->dword_0xA0_160x->word_160_0xa_10;
		v5 = a1x->dword_0xA0_160x->word_160_0xc_12;
		v6 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
		sub_580E0(&x_WORD_EB398ar, v6, v5, v4, v3);
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
		v7 = a1x->word_0x1C_28;
		//HIBYTE(v7) += 2;
		v7 += 512;
		sub_57FA0(&x_WORD_EB398ar, v7, 0, a1x->dword_0xA4_164x->word_0x10_16);
		//v8 = a1x->dword_0xA4_164;
		//v9 = *(x_WORD *)(v8 + 16);
		//v10 = (x_WORD *)(v8 + 16);
		if (a1x->dword_0xA4_164x->word_0x10_16)
		{
			if (a1x->dword_0xA4_164x->word_0x10_16 <= 0)
				v11 = -1;
			else
				v11 = 1;
		}
		else
		{
			v11 = 0;
		}
		a1x->dword_0xA4_164x->word_0x10_16 -= 4 * v11;
		sub_57CF0(a1x, &x_WORD_EB398ar);
		v12 = a1x->dword_0xA4_164x->word_0xc_12 - a1x->word_0x82_130;
		if (a1x->dword_0xA4_164x->word_0xc_12 != a1x->word_0x82_130)
		{
			if (a1x->dword_0xA4_164x->word_0xc_12 - a1x->word_0x82_130 <= 0)
				v12 = -1;
			else
				v12 = 1;
		}
		a1x->word_0x82_130 += 16 * v12;
		//v13 = a1x->word_0x20_32;
		//HIBYTE(v13) &= 7ffu;
		v14 = sub_582B0(a1x->word_0x1C_28, a1x->word_0x20_32 & 0x7ffu);
		v15 = 255 - a1x->dword_0xA4_164x->word_0x246_582;
		//v16 = v14	/ (signed int)(uint16_t)(((signed int)(v15 - (__CFSHL__(HIDWORD(v15), 4) + 16 * HIDWORD(v15))) >> 4) + 8);
		v16 = v14 / (((v15 - (my_sign32(v15) << 4) + my_sign32(v15)) >> 4) + 8);
		//v17 = a1x->dword_0xA0_160;
		v18 = v16;
		if ((int16_t)v16 <= a1x->dword_0xA0_160x->word_160_0x2_2)
		{
			if ((int16_t)v16 < a1x->dword_0xA0_160x->word_160_0x4_4)
				v18 = a1x->dword_0xA0_160x->word_160_0x4_4;
		}
		else
		{
			v18 = a1x->dword_0xA0_160x->word_160_0x2_2;
		}
		v19 = sub_582F0(a1x->word_0x1C_28, a1x->word_0x20_32) * v18;
		v20 = a1x->word_0x1C_28;
		v21 = (v20 + v19) & 0x7FF;
		v22 = a1x->word_0x20_32;
		a1x->word_0x1C_28 = v21;
		if ((uint16_t)v20 < (unsigned int)v22 && v21 > v22
			|| (v22 = a1x->word_0x20_32, v20 > v22) && v22 > a1x->word_0x1C_28)
		{
			a1x->word_0x1C_28 = v22;
		}
	}
	//return 1;
}

//----- (000148E0) --------------------------------------------------------
type_str_0x6E8E* sub_148E0(type_str_0x6E8E* a1x)//1f58e0
{
	unsigned int v1; // edi
	type_str_0x6E8E* v2x; // ebx
	int v3; // ST08_4
	int v4; // eax
	type_str_0x6E8E* v5x; // edx
	char v6; // cl
	unsigned int v7; // eax
	type_str_0x6E8E* v8x; // eax
	type_str_0x6E8E* ix; // ebx
	unsigned int v10; // eax
	type_str_0x6E8E* v12x; // [esp+8h] [ebp-14h]
	axis_3d* v13; // [esp+Ch] [ebp-10h]
	type_str_0x6E8E* v14x; // [esp+10h] [ebp-Ch]
	type_str_0x6E8E* v15x; // [esp+14h] [ebp-8h]
	type_str_0x6E8E* resultx; // [esp+18h] [ebp-4h]

	v1 = -1;
	resultx = 0;
	v2x = x_D41A0_BYTEARRAY_4_struct.dword_38523;
	v15x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58];
	while (v2x > x_DWORD_EA3E4[0])
	{
		if (a1x ==x_DWORD_EA3E4[v2x->word_0x94_148])
			goto LABEL_22;
		if (v2x->byte_0x40_64 == 57)
		{
			v3 = a1x->dword_0xA4_164x->word_0x244_580;
			if (watcomrand() % 255 < v3)
				break;
		}
		v4 = v2x->word_0x94_148;
		v5x = x_DWORD_EA3E4[(uint16_t)v4];
		v13 = &v2x->array_0x4C_76;
		v6 = v5x->byte_0x3F_63;
		if (v6 == 3)
		{
			if (v4 == a1x->word_0x1A_26)
				goto LABEL_22;
			if (50000 - v5x->dword_0x8C_140 / 10 * a1x->dword_0xA4_164x->word_0x242_578 / 255 >= a1x->dword_0xA4_164x->array_0x1FC_508[4 * v5x->dword_0xA4_164x->word_0x38_56+4])
			{
				v12x = sub_16FC0(v2x, a1x);
				if (!v12x)
					goto LABEL_22;
				v8x = (v15x <= x_DWORD_EA3E4[0] ? sub_14B10(v2x, 2u) : sub_14BD0(v2x, v15x));//fix Bit8u*
				v14x = v8x;
				if (a1x->word_0x1A_26 != v12x->word_0x1A_26
					&& (unsigned int)sub_584D0_SQdistX_SQdistY(&v2x->array_0x4C_76, &v12x->array_0x4C_76) <= 0x1900000)
				{
					goto LABEL_22;
				}
				if (v14x && sub_106C0(v2x, v14x))
					goto LABEL_22;
				v7 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &v2x->array_0x4C_76);
			}
			else
			{
				v7 = sub_584D0_SQdistX_SQdistY(&v15x->array_0x4C_76, v13);
			}
		}
		else
		{
			if (v6 == 3)
				goto LABEL_22;
			v7 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, v13);
		}
		if (v7 < v1)
		{
			resultx = v2x;
			v1 = v7;
		}
	LABEL_22:
		v2x = v2x->next_0;
	}
	if (!resultx)
	{
		for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[88/4]; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (ix->byte_0x40_64 != 57 && ix->word_0x94_148 != a1x->word_0x1A_26)
			{
				v10 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &ix->array_0x4C_76);
				if (v10 < v1)
				{
					resultx = ix;
					v1 = v10;
				}
			}
		}
	}
	return resultx;
}

//----- (00014B10) --------------------------------------------------------
type_str_0x6E8E* sub_14B10(type_str_0x6E8E* a1x, uint8_t a2)//1f5b10
{
	unsigned int v2; // edi
	type_str_0x6E8E* resultx; // esi
	type_str_0x6E8E* ix; // ebx
	unsigned int v5; // eax
	type_str_0x6E8E* jx; // ebx
	unsigned int v7; // eax

	v2 = -1;
	resultx = 0;
	if (a2 < 2u)
	{
		if (a2)
			return resultx;
	}
	else if (a2 > 3u)
	{
		if (a2 == 0xff)
		{
			for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
			{
				if (ix->word_0x1A_26 != a1x->word_0x1A_26)
				{
					v5 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &ix->array_0x4C_76);
					if (v5 < v2)
					{
						resultx = ix;
						v2 = v5;
					}
				}
			}
		}
		return resultx;
	}
	for (jx = x_D41A0_BYTEARRAY_4_struct.dword_38519; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
	{
		if (jx->word_0x1A_26 != a1x->word_0x1A_26 && jx->byte_0x40_64 == a2)
		{
			v7 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &jx->array_0x4C_76);
			if (v7 < v2)
			{
				resultx = jx;
				v2 = v7;
			}
		}
	}
	return resultx;
}

//----- (00014BD0) --------------------------------------------------------
type_str_0x6E8E* sub_14BD0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1f5bd0
{
	unsigned int v2; // edi
	type_str_0x6E8E* resultx; // esi
	type_str_0x6E8E* v4x; // ebx
	int16_t v6; // ax
	unsigned int v7; // eax

	v2 = -1;
	resultx = 0;
	v4x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
	if (v4x <= x_DWORD_EA3E4[0])
		return 0;
	do
	{
		v6 = v4x->word_0x1A_26;
		if (v6 != a1x->word_0x1A_26 && v6 != a2x->word_0x1A_26 && v4x->byte_0x40_64 == 2)
		{
			v7 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &v4x->array_0x4C_76);
			if (v7 < v2)
			{
				resultx = v4x;
				v2 = v7;
			}
		}
		v4x = v4x->next_0;
	} while (v4x > x_DWORD_EA3E4[0]);
	return resultx;
}

//----- (00014C40) --------------------------------------------------------
int16_t sub_14C40(type_str_0x6E8E* a1)//1f5c40
{
	return a1->word_0x1A_26 + a1->byte_0x40_64 + (a1->byte_0x3F_63 << 7);
}

//----- (00014C60) --------------------------------------------------------
bool sub_14C60(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1f5c60
{
	return sub_14C40(a2x) == a1x->word_0x98_152;
}

//----- (00014C90) --------------------------------------------------------
signed int sub_14C90(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, signed int a3, signed int a4)//1f5c90
{
	signed int v4; // eax
	signed int v6; // eax

	a1x->dword_0xA4_164x->word_0xe_14 = 0;
	if (!a2x)
	{
		v4 = sub_58490_radix_3d_2(&a1x->array_0x4C_76, &a1x->word_0x9A_154x);
		if (v4 > a3)
		{
			if (v4 > a4 && sub_15170(a1x, 3u))
			{
				if (!sub_156F0(a1x, 3u))
					sub_14E10(a1x, 3u);
			}
			else
			{
				a1x->dword_0xA4_164x->word_0xc_12 = a1x->word_0x84_132;
				a1x->dword_0xA4_164x->word_0xe_14 = 1;
			}
			return 0;
		}
	LABEL_16:
		a1x->dword_0xA4_164x->word_0xc_12 = 0;
		a1x->dword_0xA4_164x->word_0xe_14 = 1;
		return 1;
	}
	v6 = sub_58490_radix_3d_2(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
	if (v6 <= a3)
		goto LABEL_16;
	if (v6 > a4 && sub_15170(a1x, 3u))
	{
		if (!sub_156F0(a1x, 3u))
			sub_14E10(a1x, 3u);
	}
	else
	{
		a1x->dword_0xA4_164x->word_0xc_12 = a1x->word_0x84_132;
		a1x->dword_0xA4_164x->word_0xe_14 = 1;
	}
	return 0;
}

//int debugcounter_1f5e10 = 0;
//----- (00014E10) --------------------------------------------------------
signed int sub_14E10(type_str_0x6E8E* a1x, uint8_t a2)//1f5e10
{
	type_str_0x6E8E* v2x; // eax
	signed int result; // eax
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // eax
	type_str_0x6E8E* v6x; // edi
	//int v7; // esi
	type_str_0x6E8E* v8x; // esi
	type_str_0x6E8E* v9x; // eax

	if (!sub_15170(a1x, a2))
		return 0;
	a1x->struct_byte_0xc_12_15.byte[1] &= 0xFEu;
	if (a2 > 0x16u)
		return 0;
	switch (a2)
	{
	case 0u:
	case 1u:
	case 7u:
	case 0x16u:
		v6x = sub_146C0(a1x, a2);
		if (!v6x
			|| a1x->dword_0xA4_164x->word_0x1A2_418 < 0
			|| (uint16_t)sub_582B0(a1x->word_0x1C_28, a1x->word_0x20_32) >= 0xAAu)
		{
			return 0;
		}
		a1x->word_0x1E_30 = sub_58210_radix_tan(&a1x->array_0x4C_76, &x_DWORD_EA3E4[a1x->word_0x96_150]->array_0x4C_76);
		a1x->dword_0xA4_164x->word_0x1A2_418++;
		//v7 = a1x->dword_0xA4_164;
		if (a1x->dword_0xA4_164x->word_0x1A2_418 >= 8)
			//a1x->dword_0xA4_164x->word_0x1A2_418 = ((a1x->dword_0xA4_164x->word_0x246_582- 255- (__CFSHL__((a1x->dword_0xA4_164x->word_0x246_582 - 255) >> 31, 3)+ 8 * ((a1x->dword_0xA4_164x->word_0x246_582 - 255) >> 31))) >> 3)- 1;
			a1x->dword_0xA4_164x->word_0x1A2_418 = ((a1x->dword_0xA4_164x->word_0x246_582 - 255 - (my_sign32(a1x->dword_0xA4_164x->word_0x246_582 - 255)*8) + (my_sign32(a1x->dword_0xA4_164x->word_0x246_582 - 255)))>>3) - 1;
		if (sub_5F660(a1x, v6x, 0) != 1)
			return 0;
		a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[a2] = x_WORD_D3F4C[a2];
		return 1;
	case 2u:
		v2x = sub_146C0(a1x, a2);
		if (!v2x)
			return 0;
		if (a1x->dword_0xA4_164x->word_0x3A_58)
		{
			if (sub_5F660(a1x, v2x, 0) != 1)
				return 0;
			a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[a2] = x_WORD_D3F4C[a2];
			result = 1;
		}
		else
		{
			v4x = sub_4A190(&a1x->word_0x9A_154x, 3, 2);
			if (v4x)
			{
				v4x->word_0x1A_26 = a1x->word_0x1A_26;
				a1x->dword_0xA4_164x->word_0x3A_58 = v4x-D41A0_BYTESTR_0.struct_0x6E8E;
			}
			result = 1;
		}
		break;
	case 3u:
		v5x = sub_146C0(a1x, a2);
		if (!v5x || sub_5F660(a1x, v5x, 0) != 1)
			return 0;
		a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[a2] = x_WORD_D3F4C[a2];
		return 1;
	case 4u:
	case 9u:
	case 0xDu:
	case 0xEu:
	case 0x12u:
	case 0x13u:
	case 0x15u:
		v8x = sub_146C0(a1x, a2);
		if (!v8x)
			return 0;
		if ((uint16_t)sub_582B0(a1x->word_0x1C_28, a1x->word_0x20_32) >= 0xE3u)
			return 0;
		a1x->word_0x1E_30 = sub_58210_radix_tan(&a1x->array_0x4C_76, &x_DWORD_EA3E4[a1x->word_0x96_150]->array_0x4C_76);
		if (sub_5F660(a1x, v8x, 0) != 1)
			return 0;
		a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[a2] = x_WORD_D3F4C[a2];
		return 1;
	case 5u:
	case 6u:
	case 8u:
	case 0xAu:
	case 0xBu:
	case 0xCu:
	case 0x10u:
	case 0x11u:
	case 0x14u:
		v9x = sub_146C0(a1x, a2);
		if (!v9x || sub_5F660(a1x, v9x, 0) != 1)
			return 0;
		a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[a2] = x_WORD_D3F4C[a2];
		return 1;
	case 0xFu:
		return 0;
	}
	return result;
}

//----- (00015170) --------------------------------------------------------
type_str_0x6E8E* sub_15170(type_str_0x6E8E* a1x, uint8_t a2)//1f6170
{
	type_str_0x6E8E* v2x; // eax
	type_str_0x6E8E* v3x; // esi
	//int v4; // eax
	//int v5; // edx
	type_str_0x6E8E* v7x; // eax
	type_str_0x6E8E* v8x; // esi
	//int v9; // eax
	type_str_0x6E8E* v10x; // eax
	type_str_0x6E8E* v11x; // esi
	//int v12; // eax
	//int v13; // eax
	int v14; // edi
	type_str_0x6E8E* v15x; // eax
	type_str_0x6E8E* v16x; // esi
	//int v17; // eax
	//int v18; // eax
	//int v19; // edx
	int64_t v20; // rax
	type_str_0x6E8E* v21x; // eax
	type_str_0x6E8E* v22x; // esi
	//int v23; // eax
	//int v24; // eax
	int v25; // edi
	type_str_0x6E8E* v26x; // eax
	type_str_0x6E8E* v27x; // esi
	//int v28; // eax
	//int v29; // edx

	if (a2 > 0x16u)
	{
	LABEL_43:
		if (a2 < 0x1Au)
		{
			v26x = sub_146C0(a1x, a2);
			v27x = v26x;
			if (v26x)
			{
				//v28 = 80 * a2 + 26 * v26x->byte_0x46_70;
				//if (a1x->dword_0x8C_140 >= *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0xa] + v28))
				if (a1x->dword_0x8C_140 >= SPELLS_BEGIN_BUFFER_str[a2].subspell[v26x->byte_0x46_70].dword_A)
				{
					//v29 = a1x->dword_0x90_144;
					//if (v29 >= *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0x6] + v28)
					if (a1x->dword_0x90_144 >= SPELLS_BEGIN_BUFFER_str[a2].subspell[v26x->byte_0x46_70].dword_6
						&& !a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[a2]
						&& a1x->dword_0x90_144 >= v27x->dword_0x8C_140)
					{
						return v27x;
					}
				}
			}
		}
	}
	else
	{
		switch (a2)
		{
		case 0u:
		case 7u:
		case 0xDu:
		case 0xEu:
		case 0x16u:
			v21x = sub_146C0(a1x, a2);
			v22x = v21x;
			if (!v21x)
				return 0;
			//v23 = 80 * a2 + 26 * v21x->byte_0x46_70;
			//if (a1x->dword_0x8C_140 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0xa] + v23))
			if (a1x->dword_0x8C_140 < SPELLS_BEGIN_BUFFER_str[a2].subspell[v21x->byte_0x46_70].dword_A)
				return 0;
			//if (a1x->dword_0x90_144 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0x6] + v23))
			if (a1x->dword_0x90_144 < SPELLS_BEGIN_BUFFER_str[a2].subspell[v21x->byte_0x46_70].dword_6)
				return 0;
			//v24 = a1x->dword_0xA4_164;
			if (a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[a2])
				return 0;
			if (a1x->dword_0x90_144 < v22x->dword_0x8C_140)
				return 0;
			/*v25 = ((((255
				- a1x->dword_0xA4_164x->word_0x244_580
				- (__CFSHL__((255 - a1x->dword_0xA4_164x->word_0x244_580) >> 31, 2)
					+ 4 * ((255 - a1x->dword_0xA4_164x->word_0x244_580) >> 31))) >> 2)
				+ 20) << 11)
				/ 360;*/
			v25=(((((255 - a1x->dword_0xA4_164x->word_0x244_580) - (my_sign32(255 - a1x->dword_0xA4_164x->word_0x244_580) << 2) + my_sign32(255 - a1x->dword_0xA4_164x->word_0x244_580)) >> 2) + 20) << 11) / 360;

			if ((uint16_t)sub_582B0(a1x->word_0x1C_28, a1x->word_0x20_32) >= v25)
				return 0;
			return v22x;
		case 1u:
		case 9u:
		case 0x10u:
		case 0x12u:
		case 0x13u:
		case 0x15u:
			v10x = sub_146C0(a1x, a2);
			v11x = v10x;
			if (!v10x)
				return 0;
			//v12 = 26 * v10x->byte_0x46_70 + 80 * a2;
			//if (a1x->dword_0x8C_140 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0xa] + v12))
			if (a1x->dword_0x8C_140 < SPELLS_BEGIN_BUFFER_str[a2].subspell[v10x->byte_0x46_70].dword_A)
				return 0;
			//if (a1x->dword_0x90_144 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0x6] + v12))
			if (a1x->dword_0x90_144 < SPELLS_BEGIN_BUFFER_str[a2].subspell[v10x->byte_0x46_70].dword_6)
				return 0;
			if (v11x->word_0x2E_46)
				return 0;
			//v13 = a1x->dword_0xA4_164;
			if (a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[a2])
				return 0;
			if (a1x->dword_0x90_144 < v11x->dword_0x8C_140)
				return 0;
			/*v14 = ((((255
				- a1x->dword_0xA4_164x->word_0x244_580
				- (__CFSHL__((255 - a1x->dword_0xA4_164x->word_0x244_580) >> 31, 2)
					+ 4 * ((255 - a1x->dword_0xA4_164x->word_0x244_580) >> 31))) >> 2)
				+ 20) << 11)
				/ 360;*/
			v14 = (((((255 - a1x->dword_0xA4_164x->word_0x244_580) - (my_sign32(255 - a1x->dword_0xA4_164x->word_0x244_580) << 2) + my_sign32(255 - a1x->dword_0xA4_164x->word_0x244_580)) >> 2) + 20) << 11) / 360;

			if ((uint16_t)sub_582B0(a1x->word_0x1C_28, a1x->word_0x20_32) >= v14)
				return 0;
			return v11x;
		case 2u:
			v15x = sub_146C0(a1x, a2);
			v16x = v15x;
			if (!v15x)
				return 0;
			//v17 = 80 * a2 + 26 * v15x->byte_0x46_70;
			//if (a1x->dword_0x8C_140 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0xa] + v17)
			//	|| a1x->dword_0x90_144 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0x6] + v17))
			if (a1x->dword_0x8C_140 < SPELLS_BEGIN_BUFFER_str[a2].subspell[v15x->byte_0x46_70].dword_A
				|| a1x->dword_0x90_144 < SPELLS_BEGIN_BUFFER_str[a2].subspell[v15x->byte_0x46_70].dword_6)
			{
				return 0;
			}
			//v18 = a1x->dword_0xA4_164;
			//v19 = v18 + 2 * a2;
			if (a1x->dword_0xA4_164x->word_0x3A_58)
			{
				if (!v16x->word_0x2E_46 && !a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[a2])
				{
					if (sub_11A10(x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58]))
					{
						if (a1x->dword_0x90_144 >= v16x->dword_0x8C_140)
						{
							v20 = 255 - a1x->dword_0xA4_164x->word_0x244_580;
							if ((uint16_t)sub_582B0(a1x->word_0x1C_28, a1x->word_0x20_32) < ((((signed int)(v20 - (__CFSHL__(HIDWORD(v20), 2) + 4 * HIDWORD(v20))) >> 2)
								+ 20) << 11)
								/ 360)
								return v16x;
						}
					}
				}
			}
			else if (!a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[a2] && a1x->dword_0x90_144 >= v16x->dword_0x8C_140)
			{
				return v16x;
			}
			break;
		case 3u:
			v2x = sub_146C0(a1x, a2);
			v3x = v2x;
			if (!v2x)
				return 0;
			//v4 = 80 * a2 + 26 * v2x->byte_0x46_70;
			//if (a1x->dword_0x8C_140 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0xa] + v4))
			if (a1x->dword_0x8C_140 < SPELLS_BEGIN_BUFFER_str[a2].subspell[v2x->byte_0x46_70].dword_A)
				return 0;
			//v5 = a1x->dword_0x90_144;
			//if (v5 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0x6] + v4) || v5 < v3x->dword_0x8C_140)
			if (a1x->dword_0x90_144 < SPELLS_BEGIN_BUFFER_str[a2].subspell[v2x->byte_0x46_70].dword_6 || a1x->dword_0x90_144 < v3x->dword_0x8C_140)
				return 0;
			return v3x;
		case 4u:
		case 6u:
		case 8u:
		case 0xBu:
			v7x = sub_146C0(a1x, a2);
			v8x = v7x;
			if (!v7x)
				return 0;
	//		v9 = 26 * v7x->byte_0x46_70 + 80 * a2;
			//if (a1x->dword_0x8C_140 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0xa] + v9)
//				|| a1x->dword_0x90_144 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0x6] + v9)
			if (a1x->dword_0x8C_140 < SPELLS_BEGIN_BUFFER_str[a2].subspell[v7x->byte_0x46_70].dword_A
				|| a1x->dword_0x90_144 < SPELLS_BEGIN_BUFFER_str[a2].subspell[v7x->byte_0x46_70].dword_6
				|| v8x->word_0x2E_46
				|| a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[a2]
				|| a1x->dword_0x90_144 < v8x->dword_0x8C_140)
			{
				return 0;
			}
			return v8x;
		case 5u:
		case 0xAu:
		case 0xCu:
		case 0xFu:
		case 0x11u:
		case 0x14u:
			goto LABEL_43;
		}
	}
	return 0;
}

//----- (000155E0) --------------------------------------------------------
signed int sub_155E0(type_str_0x6E8E* a1x)//1f65e0
{
	type_str_0x6E8E* v1x; // ebx
	//Bit8u* v2; // eax
	int64_t v4; // rax

	v1x = sub_146C0(a1x, 2u);
	if (v1x)
	{
		//v2 = (Bit8u*)a1x->dword_0xA4_164;
		if (a1x->dword_0xA4_164x->word_0x3A_58)
		{
			if (!a1x->word_0x2E_46 && !a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[2])
			{
				if (sub_11A10(x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58]))
				{
					if (a1x->dword_0x8C_140 >= v1x->dword_0x8C_140)
					{
						v4 = 255 - a1x->dword_0xA4_164x->word_0x244_580;
						if ((uint16_t)sub_582B0(a1x->word_0x1C_28, a1x->word_0x20_32) < ((((signed int)(v4 - (__CFSHL__(HIDWORD(v4), 2) + 4 * HIDWORD(v4))) >> 2)
							+ 20) << 11)
							/ 360)
							return 1;
					}
				}
			}
		}
		else if (!a1x->dword_0xA4_164x->str_611.array_0x367_871x.word[2] && a1x->dword_0x8C_140 >= v1x->dword_0x8C_140)
		{
			return 1;
		}
	}
	return 0;
}

//----- (000156F0) --------------------------------------------------------
bool sub_156F0(type_str_0x6E8E* a1x, uint8_t a2)//1f66f0
{
	type_str_0x6E8E* v2x; // eax
	bool result; // eax

	result = 0;
	if (a2 < 0x1Au)
	{
		v2x = sub_146C0(a1x, a2);
		if (v2x)
		{
			if (v2x->word_0x2E_46 > 0)
				result = 1;
		}
	}
	return result;
}

//----- (00015730) --------------------------------------------------------
bool sub_15730(type_str_0x6E8E* a1x, uint8_t a2)//1f6730
{
	return a1x->dword_0x8C_140 >= sub_146C0(a1x, a2)->dword_0x8C_140;
}

//----- (00015760) --------------------------------------------------------
type_str_0x6E8E* sub_15760(type_str_0x6E8E* a1x, uint8_t a2)//1f6760
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_146C0(a1x, a2);
	if (!resultx || resultx->word_0x2E_46 <= 0)
		resultx = 0;
	return resultx;
}

//int debugcounter_1f6790 = 0;
//----- (00015790) --------------------------------------------------------
char sub_15790(type_str_0x6E8E* a1x)//1f6790
{
	int v1; // eax
	//int v2; // esi
	int v3; // eax
	int v4; // ecx
	int v5; // edi
	int i; // edi
	char *j; // esi
	int k; // edi
	char v10; // dl
	int v11; // edi
	type_str_0x6E8E* v12x; // [esp+0h] [ebp-4h]

	v12x = x_DWORD_EA3E4[a1x->word_0x96_150];
	//v1 = (a1x->dword_0x8C_140 - (__CFSHL__(a1x->dword_0x8C_140 >> 31, 2) + 4 * (a1x->dword_0x8C_140 >> 31))) >> 2;
	v1 = (a1x->dword_0x8C_140 - (my_sign32(a1x->dword_0x8C_140) << 2) + my_sign32(a1x->dword_0x8C_140)) >> 2;
	if (v1 <= a1x->dword_0x90_144)
	{
		//v2 = a1x->dword_0xA4_164;
		if (a1x->dword_0xA4_164x->word_0x1A4_420)
		{
			v3 = v1 + 6000;
			v4 = a1x->dword_0x8C_140;
			if (v3 >= v4)
				v3 = v4 / 2;
			if (v3 <= a1x->dword_0x90_144)
				a1x->dword_0xA4_164x->word_0x1A4_420 = 0;
		}
	}
	else
	{
		a1x->dword_0xA4_164x->word_0x1A4_420 = 1;
	}
	if (!a1x->dword_0xA4_164x->word_0x1A4_420)
	{
		if (sub_15760(x_DWORD_EA3E4[a1x->word_0x96_150], 8u))
		{
			v5 = a1x->dword_0xA4_164x->word_0x244_580;
			if (watcomrand() % 255 < v5)
			{
				for (i = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[7]; i >= 0; i--)
				{
					if ((int16_t)sub_15F20(a1x, i, 7) == 7)
						return 7;
				}
			}
		}
		for (j = (char *)unk_D3F80x; ; j++)//xxx89b
		{
			v11 = *j;
			if (v11 == -1)
				break;
			for (k = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[v11]; k >= 0; k--)
			{
				if ((int16_t)sub_15F20(a1x, k, *j) == *j)
				{
					if (*j == 19)
					{
						v10 = v12x->byte_0x40_64;
						if (!v10 || v10 == 1)
							return *j;
					}
					if (*j != 19)
						return *j;
				}
			}
		}
	}
	return -1;
}

//----- (00015910) --------------------------------------------------------
char sub_15910(type_str_0x6E8E* a1x)//1f6910
{
	int v1; // eax
	//int v2; // esi
	int v3; // eax
	int v4; // ecx
	uint8_t *i; // esi
	int16_t j; // di
	int16_t v7; // ax
	int v8; // eax

	v1 = (a1x->dword_0x8C_140 - (__CFSHL__(a1x->dword_0x8C_140 >> 31, 2) + 4 * (a1x->dword_0x8C_140 >> 31))) >> 2;
	if (v1 <= a1x->dword_0x90_144)
	{
		//v2 = a1x->dword_0xA4_164;
		if (a1x->dword_0xA4_164x->word_0x1A4_420)
		{
			v3 = v1 + 6000;
			v4 = a1x->dword_0x8C_140;
			if (v3 >= v4)
				v3 = v4 / 2;
			if (v3 <= a1x->dword_0x90_144)
				a1x->dword_0xA4_164x->word_0x1A4_420 = 0;
		}
	}
	else
	{
		a1x->dword_0xA4_164x->word_0x1A4_420 = 1;
	}
	if (!a1x->dword_0xA4_164x->word_0x1A4_420)
	{
		for (i = (uint8_t *)unk_D3F89x; ; i++)
		{
			v8 = *i;
			if (v8 == -1)
				break;
			for (j = a1x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[v8]; j >= 0; j--)
			{
				v7 = sub_15F20(a1x, j, *i);
				if (v7 == *i)
					return v7;
			}
		}
	}
	LOBYTE(v7) = -1;
	return v7;
}

int debugcounter_1f69e0 = 0;

//----- (000159E0) --------------------------------------------------------
void sub_159E0()//1f69e0
{
	type_str_0x6E8E* v0x; // edi
	type_str_0x6E8E* v1x; // esi
	type_str_0x6E8E* v2x; // ecx
	uint8_t v3; // al
	Bit32u v4; // ebx
	//uint8_t v5; // al
	Bit32u v6; // ebx
	uint8_t v7; // al
	//int v8; // edx
	//int v9; // eax
	type_str_0x6E8E* v10x; // eax
	Bit16u* v89;
	//type_str_0x6E8E* v11x; // [esp+4h] [ebp-8h]

	//fix
	v10x = 0;
	//fix

	v0x = x_D41A0_BYTEARRAY_4_struct.dword_38531;
	if (v0x > x_DWORD_EA3E4[0])
	{
		while (1)
		{
			if (v0x->struct_byte_0xc_12_15.byte[1] & 0x20)
				goto LABEL_48;
			v1x = x_DWORD_EA3E4[v0x->word_0x1A_26];
			if (v1x <= x_DWORD_EA3E4[0])
				goto LABEL_48;
			if (v1x->byte_0x3F_63 != 3)
				goto LABEL_48;
			v2x = x_DWORD_EA3E4[v0x->word_0x96_150];
			if (v2x <= x_DWORD_EA3E4[0])
				goto LABEL_48;
			v0x->struct_byte_0xc_12_15.byte[1] |= 0x20u;
			v3 = v2x->byte_0x3F_63;
			if (v3 < 3u)
				goto LABEL_48;
			if (v3 <= 3u)
				break;
			if (v3 != 10)
				goto LABEL_48;
			if (v0x->byte_0x40_64 != 1)
				goto LABEL_48;
			if (v2x->byte_0x40_64 != 39)
				goto LABEL_48;
			v10x = x_DWORD_EA3E4[v2x->word_0x94_148];
			//v11x = v10x;
			if (v10x <= x_DWORD_EA3E4[0] || v10x->byte_0x3F_63 != 3)
				goto LABEL_48;
			v6 = ((v2x->dword_0x90_144 - (__CFSHL__(v2x->dword_0x90_144 >> 31, 2) + 4 * (v2x->dword_0x90_144 >> 31))) >> 2)
				+ v10x->dword_0xA4_164x->array_0x1FC_508[4 * v1x->dword_0xA4_164x->word_0x38_56+4];
			if (v6 < 0)
				v6 = 0;
			//if (v6 > 0xFFFF)
//				LOWORD(v6) = -1;
			if (v6 > 0xffff)
				v6 = 0xffff;
			//v9 = v1x->dword_0xA4_164x->word_0x38_56;
			//v8 = v11x->dword_0xA4_164;
			v89 = &v10x->dword_0xA4_164x->array_0x1FC_508[4 * v1x->dword_0xA4_164x->word_0x38_56 + 4];
		LABEL_47:
			//v10x->dword_0xA4_164x->array_0x1FC_508[4 * v1x->dword_0xA4_164x->word_0x38_56+4] = v6;
			*v89= v6;
		LABEL_48:
			v0x = v0x->next_0;
			if (v0x <= x_DWORD_EA3E4[0])
				return;
		}
		if (v2x->byte_0x40_64 == 2)
		{
			v4 = x_DWORD_EA3E4[v2x->word_0x1A_26]->dword_0xA4_164x->array_0x1FC_508[4 * v1x->dword_0xA4_164x->word_0x38_56+4];
			//v5 = v0x->byte_0x40_64;
			if (v0x->byte_0x40_64 < 0xAu)
			{
				if (v0x->byte_0x40_64 >= 3u && v0x->byte_0x40_64 <= 4u)
					goto LABEL_17;
			LABEL_18:
				v4 += 1000;
			}
			else if (v0x->byte_0x40_64 > 0xAu)
			{
				if (v0x->byte_0x40_64 != 11)
					goto LABEL_18;
			LABEL_17:
				v4 += 5000;
			}
			if (v4 < 0)
				v4 = 0;
			if (v4 > 0xFFFF)
				v4 = 0xFFFF;
			x_DWORD_EA3E4[v2x->word_0x1A_26]->dword_0xA4_164x->array_0x1FC_508[4 * v1x->dword_0xA4_164x->word_0x38_56+4] = v4;

			if (v4 > 50000 - v1x->dword_0x8C_140 / 10 * v2x->dword_0xA4_164x->word_0x242_578 / 255)
				x_DWORD_EA3E4[v2x->word_0x1A_26]->dword_0xA4_164x->array_0x1FC_508[4 * v1x->dword_0xA4_164x->word_0x38_56+5] = 1;
			goto LABEL_48;
		}
		v6 = x_DWORD_EA3E4[v2x->word_0x1A_26]->dword_0xA4_164x->array_0x1FC_508[4 * v1x->dword_0xA4_164x->word_0x38_56+4];
		v7 = v0x->byte_0x40_64;
		if (v7 < 0xAu)
		{
			if (v7 < 3u || v7 > 4u)
				goto LABEL_32;
		}
		else
		{
			if (v7 <= 0xAu)
			{
			LABEL_33:
				if (v6 < 0)
					v6 = 0;
				//if (v6 > 0xFFFF)
				//	LOWORD(v6) = -1;
				if (v6 > 0xFFFF)
					v6 = 0xFFFF;
				//v9 = v1x->dword_0xA4_164x->word_0x38_56;
				//v8 = x_DWORD_EA3E4[v2x->word_0x1A_26]->dword_0xA4_164
				v89 = &x_DWORD_EA3E4[v2x->word_0x1A_26]->dword_0xA4_164x->array_0x1FC_508[4 * v1x->dword_0xA4_164x->word_0x38_56 + 4];
				goto LABEL_47;
			}
			if (v7 != 11)
			{
			LABEL_32:
				v6 += 500;
				goto LABEL_33;
			}
		}
		v6 += 3000;
		goto LABEL_33;
	}
}

//----- (00015CB0) --------------------------------------------------------
type_str_0x6E8E* sub_15CB0(/*type_str_0x6E8E* a1,*/ type_str_0x6E8E* a2x)//1f6cb0
{
	unsigned int v2; // esi
	type_str_0x6E8E* ix; // ebx
	unsigned int v4; // eax
	type_str_0x6E8E* result; // eax

	type_str_0x6E8E* a1;
	//fix
	a1 = 0;
	//fix
	v2 = -1;
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38531; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (ix->word_0x96_150 == a2x->word_0x1A_26)
		{
			v4 = sub_584D0_SQdistX_SQdistY(&a2x->array_0x4C_76, &ix->array_0x4C_76);
			if (v4 < v2)
			{
				v2 = v4;
				a1 = ix;
			}
		}
	}
	if (v2 >= 0x1900000)
		result = 0;
	else
		result = a1;
	return result;
}

//----- (00015D20) --------------------------------------------------------
void sub_15D20(type_str_0x6E8E* a1x)//1f6d20
{
	//int index; // eax

	//index = a1x->dword_0xA4_164;
	if (!a1x->dword_0xA4_164x->str_611_byte_0x45E_1118)
		a1x->dword_0xA4_164x->word_0x10_16 = 80;
//	return result;
}

//----- (00015D40) --------------------------------------------------------
char sub_15D40(int16_t a1, type_str_0x6E8E* a2x, type_str_0x6E8E* a3)//1f6d40
{
	unsigned int result; // eax
	int16_t i; // si
	int16_t v5; // si
	int16_t v6; // si

	result = sub_584D0_SQdistX_SQdistY(&a2x->array_0x4C_76, &a3->array_0x4C_76);
	if (result >= 0x100000)
		return result;
	result = a3->byte_0x40_64;
	if (result < 3u)
	{
		if (result)
			return result;
	}
	else if (result > 3u)
	{
		if (result == 4)
		{
			//result = a2x->dword_0xA4_164;
			v6 = a2x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[6];
			if (v6 >= 0)
			{
				while (1)
				{
					result = sub_15F20(a2x, v6, 6);
					if (result == 6)
						break;
					if (--v6 < 0)
						return result;
				}
				result = sub_14E10(a2x, 6u);
			}
		}
		return result;
	}
	//result = a2x->dword_0xA4_164;
	for (i = a2x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[8]; i >= 0; i--)
	{
		result = sub_15F20(a2x, i, 8);
		a1 = result;
		if (result == 8)
		{
			result = sub_14E10(a2x, 8u);
			break;
		}
	}
	if (a1 != 8)
	{
		//result = a2x->dword_0xA4_164;
		v5 = a2x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[6];
		if (v5 >= 0)
		{
			while (1)
			{
				result = sub_15F20(a2x, v5, 6);
				if (result == 6)
					break;
				if (--v5 < 0)
					return result;
			}
			result = sub_14E10(a2x, 6u);
		}
	}
	return result;
}

//----- (00015E60) --------------------------------------------------------
bool sub_15E60(type_str_0x6E8E* a1x)//1f6e60
{
	return sub_146C0(a1x, 0)
		|| sub_146C0(a1x, 7u)
		|| sub_146C0(a1x, 0x12u)
		|| sub_146C0(a1x, 0x10u)
		|| sub_146C0(a1x, 0x14u)
		|| sub_146C0(a1x, 0x15u)
		|| sub_146C0(a1x, 9u);
}

//----- (00015EE0) --------------------------------------------------------
char sub_15EE0()//1f6ee0
{
	type_str_0x6E8E* v0x; // eax

	v0x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
	if (v0x <= x_DWORD_EA3E4[0])
		return 1;
	do
	{
		if (!v0x->byte_0x40_64)
			x_DWORD_E8840 = v0x;
		v0x = v0x->next_0;
	} while (v0x > x_DWORD_EA3E4[0]);
	return 1;
}

//----- (00015F20) --------------------------------------------------------
signed int sub_15F20(type_str_0x6E8E* a1x, int16_t a2, signed int a3)//1f6f20
{
	//int v3; // ebx
	type_str_0x6E8E* v4x; // eax
	//int v5; // ebx
	signed int result; // eax

	//v3 = 80 * (int16_t)a3;
	//if ((uint8_t)(*xadataspellsdat.var28_begin_buffer)[v3] <= a2)
	if (SPELLS_BEGIN_BUFFER_str[a3].byte_0 <= a2)
		return 0;
	v4x = sub_146C0(a1x, a3);
	if (!v4x)
		return 0;
	sub_6D5E0(v4x, a2);
	if (!sub_15170(a1x, a3))
		return 0;
	//v5 = 26 * a2 + v3;
	//if (a1x->dword_0x8C_140 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0xa] + v5)
//		|| a1x->dword_0x90_144 < *(int *)((char *)&*(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0x6] + v5))
	if (a1x->dword_0x8C_140 < SPELLS_BEGIN_BUFFER_str[a3].subspell[a2].dword_A
		|| a1x->dword_0x90_144 < SPELLS_BEGIN_BUFFER_str[a3].subspell[a2].dword_6)
	{
		result = -1;
	}
	else
	{
		result = a3;
	}
	return result;
}

//----- (00015FC0) --------------------------------------------------------
signed int sub_15FC0(type_str_0x6E8E* a1x)//1f6fc0
{
	uint8_t v1; // bl
	type_str_0x6E8E* v2x; // esi
	type_str_0x6E8E* ix; // esi
	char v5; // ah
	unsigned int v6; // eax
	type_str_0x6E8E* kx; // esi
	unsigned int v8; // eax
	int v9; // eax
	type_str_0x6E8E* v11x; // [esp+0h] [ebp-18h]
	type_str_0x6E8E* v12x; // [esp+4h] [ebp-14h]
	unsigned int v13; // [esp+8h] [ebp-10h]
	unsigned int v14; // [esp+Ch] [ebp-Ch]
	char *j; // [esp+10h] [ebp-8h]
	type_str_0x6E8E* v16x; // [esp+14h] [ebp-4h]

	v11x = 0;
	v16x = 0;
	v13 = -1;
	v14 = -1;
	v1 = 0;
	v2x = x_DWORD_EA3E4[a1x->word_0x96_150];
	if (!sub_156F0(a1x, 4u) || !sub_14C60(a1x, v2x))
	{
		v12x = sub_146C0(a1x, 4u);
		if (!v12x)
			return 0;
		for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (ix->word_0x1A_26 != a1x->word_0x1A_26)
			{
				v5 = ix->byte_0x40_64;
				if (!v5 || v5 == 1)
				{
					v6 = sub_583F0_distance_3d(&a1x->array_0x4C_76, &ix->array_0x4C_76);
					if (v6 < v14)
					{
						v11x = ix;
						v14 = v6;
					}
				}
			}
		}
		if (v14 > 0x1400)
			v11x = 0;
		if (!v11x)
			return 0;
		for (j = (char *)unk_D3F91x; ; j++)
		{
			v9 = *j;
			if (v9 == -1)
				break;
			for (kx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[v9]; kx > x_DWORD_EA3E4[0]; kx = kx->next_0)
			{
				if (kx->word_0x1A_26 != a1x->word_0x1A_26)
				{
					v8 = sub_583F0_distance_3d(&v11x->array_0x4C_76, &kx->array_0x4C_76);
					if (v8 < v13)
					{
						v16x = kx;
						v13 = v8;
						v1 = *j;
					}
				}
			}
		}
		if (!v16x || v13 >= 0x1400 || !v1)
			return 0;
		if (v1 < 0x10u)
		{
			if (v1 == 2)
			{
			LABEL_35:
				sub_6D5E0(v12x, 0);
				goto LABEL_38;
			}
		}
		else
		{
			if (v1 <= 0x10u)
			{
				sub_6D5E0(v12x, 2);
				goto LABEL_38;
			}
			if (v1 >= 0x13u)
			{
				if (v1 > 0x13u)
				{
					if (v1 == 25)
						sub_6D5E0(v12x, 1);
					goto LABEL_38;
				}
				goto LABEL_35;
			}
		}
	LABEL_38:
		a1x->word_0x96_150 = v16x-D41A0_BYTESTR_0.struct_0x6E8E;
		a1x->word_0x98_152 = sub_14C40(v16x);
		return 1;
	}
	return 1;
}

//----- (000161A0) --------------------------------------------------------
signed int sub_161A0(type_str_0x6E8E* a1x)//1f71a0
{
	type_str_0x6E8E* v1x; // esi
	int v2; // eax
	int v3; // eax
	type_str_0x6E8E* v4x; // eax
	int v5; // edi
	type_str_0x6E8E* v6x; // edi
	type_str_0x6E8E* ix; // esi
	char v8; // cl
	unsigned int v9; // eax
	int8_t v10; // al
	signed int result; // eax
	int v12; // eax
	int16_t v13; // ax
	type_str_0x6E8E* v14x; // [esp+4h] [ebp-8h]
	unsigned int v15; // [esp+8h] [ebp-4h]

	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v15 = -1;
	if (sub_14C60(a1x, x_DWORD_EA3E4[a1x->word_0x96_150]))
	{
		sub_14E10(a1x, 4u);
		sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
		a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
		v2 = a1x->array_0x4C_76.z - (Bit16s)(v1x->array_0x4C_76.z + 512);
		if (a1x->array_0x4C_76.z != v1x->array_0x4C_76.z + 512)
		{
			if (v2 <= 0)
				v2 = -1;
			//LOWORD(v2) = -1;
			else
				//LOWORD(v2) = 1;
				v2 = 1;
		}
		a1x->array_0x4C_76.z += v2 * a1x->dword_0xA0_160x->word_160_0xe_14;
		a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
		v3 = a1x->array_0x4C_76.z - (Bit16s)(v1x->array_0x4C_76.z + 512);
		if (a1x->array_0x4C_76.z != v1x->array_0x4C_76.z + 512)
		{
			if (a1x->array_0x4C_76.z - (v1x->array_0x4C_76.z + 512) <= 0)
				v3 = -1;
			//LOWORD(v3) = -1;
			else
				v3 = 1;
				//LOWORD(v3) = 1;
		}
		a1x->array_0x4C_76.z += v3 * a1x->dword_0xA0_160x->word_160_0xe_14;
		v4x = sub_146C0(a1x, 4u);
		v14x = v4x;
		if (v4x && !v4x->byte_0x46_70)
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v5 = 2 * ((signed int)(a1x->word_0x14_20 % 0x9Du) / 79);
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			a1x->word_0x20_32 += (v5 - 1) * (a1x->word_0x14_20 % 0x55u);
			a1x->word_0x20_32 &= 0x7ff;
		}
		v6x = 0;
		for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (ix->word_0x1A_26 != a1x->word_0x1A_26)
			{
				v8 = ix->byte_0x40_64;
				if (!v8 || v8 == 1)
				{
					v9 = sub_583F0_distance_3d(&a1x->array_0x4C_76, &ix->array_0x4C_76);
					if (v9 < v15)
					{
						v6x = ix;
						v15 = v9;
					}
				}
			}
		}
		if (v6x!=0 && v15 < 0x1400 && v15 > 0xA00)//1f735d
		{
			a1x->word_0x96_150 = v6x-D41A0_BYTESTR_0.struct_0x6E8E;
			a1x->word_0x98_152 = sub_14C40(v6x);
			v10 = sub_15790(a1x);
			a1x->dword_0xA4_164x->word_0xc_12 = 0;
			a1x->dword_0xA4_164x->word_0xe_14 = 1;
			if (v10 != -1 && sub_14E10(a1x, v10))
			{
				sub_16580(a1x);
				return 1;
			}
		}
		else
		{
			//fix			
			type_str_0x6E8E v6y;
			if (v6x==0)
			{
				v6y.array_0x4C_76.x = 0;
				v6y.array_0x4C_76.y = 0;
				v6y.array_0x4C_76.z = 0;
			}
			else
			{
				v6y.array_0x4C_76.x = v6x->array_0x4C_76.x;
				v6y.array_0x4C_76.y = v6x->array_0x4C_76.y;
				v6y.array_0x4C_76.z = v6x->array_0x4C_76.z;
			}
			//fix
			a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v6y.array_0x4C_76);
			v12 = a1x->array_0x4C_76.z - (v6y.array_0x4C_76.z + 512);
			if (a1x->array_0x4C_76.z != v6y.array_0x4C_76.z + 512)
			{
				if (a1x->array_0x4C_76.z - (v6y.array_0x4C_76.z + 512) <= 0)
					v12 = -1;
				//LOWORD(v12) = -1;
				else
					v12 = 1;
					//LOWORD(v12) = 1;
			}
			a1x->array_0x4C_76.z += v12 * a1x->dword_0xA0_160x->word_160_0xe_14;
		}
		if (v14x)
		{
			if (v14x->byte_0x46_70)
				v13 = a1x->word_0x84_132;
			else
				v13 = 3 * a1x->word_0x84_132;
			a1x->word_0x82_130 = v13;
		}
		sub_16580(a1x);
		result = 1;
	}
	else
	{
		sub_16580(a1x);
		result = 0;
	}
	return result;
}

//----- (000164B0) --------------------------------------------------------
bool sub_164B0(type_str_0x6E8E* a1x)//1f74b0
{
	return sub_146C0(a1x, 0x11u)
		|| sub_146C0(a1x, 0x10u)
		|| sub_146C0(a1x, 0x12u)
		|| sub_146C0(a1x, 7u)
		|| sub_146C0(a1x, 9u)
		|| sub_146C0(a1x, 0x14u)
		|| sub_146C0(a1x, 0x13u)
		|| sub_146C0(a1x, 0x15u)
		|| sub_146C0(a1x, 0);
}

//----- (00016580) --------------------------------------------------------
signed int sub_16580(type_str_0x6E8E* a1x)//1f7580
{
	int16_t v1; // di
	//int16_t v2; // dx
	signed int v3; // esi
	int16_t v4; // ax
	signed int result; // eax
	//int v6; // eax
	//int v7; // eax
	uint8_t v8; // [esp+0h] [ebp-4h]
	//uaxis_2d v8x;

	//LOBYTE(v2) = 0;
	v8 = 0;
	v1 = a1x->word_0x1C_28;
	//HIBYTE(v2) = a1x->dword_0xA4_164x->str_611_byte_0x45E_1118;
	v3 = 0;
	if (a1x->dword_0xA4_164x->str_611_byte_0x45E_1118 <= 2 || a1x->dword_0xA4_164x->str_611_byte_0x45E_1118 >= 8)
	{
		if (a1x->dword_0xA4_164x->str_611_byte_0x45E_1118 <= 7)
			v4 = (uint8_t)sub_169C0(a1x);
		else
			v4 = 0;
	}
	else
	{
		v4 = 3;
	}
	switch (v4)
	{
	case 0:
		a1x->dword_0xA4_164x->str_611_byte_0x45E_1118 = 0;
		return 0;
	case 1:
		v8 = sub_16730(/*v2,*/ a1x, 0);
		if (v8)
			a1x->word_0x1C_28 = x_WORD_D3FCE[v8];
		goto LABEL_11;
	case 2:
		v8 = sub_16730(/*v2,*/ a1x, 1);
		if (v8)
			a1x->word_0x1C_28 = x_WORD_D3FE8[v8];
		goto LABEL_11;
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
	case 8:
		result = 0;
		a1x->dword_0xA4_164x->str_611_byte_0x45E_1118++;
		break;
	default:
	LABEL_11:
		if (v8)
		{
			//v6 = a1x->dword_0xA4_164;
			v3 = 1;
			if (a1x->dword_0xA4_164x->str_611_byte_0x45E_1119 != v8)
				a1x->dword_0xA4_164x->str_611_byte_0x45E_1119 = v8;
			if (v1 != a1x->word_0x1C_28)
			{
				//v7 = a1x->dword_0xA4_164;
				a1x->word_0x82_130 = 0;
				a1x->dword_0xA4_164x->word_0xc_12 = 0;
				a1x->dword_0xA4_164x->word_0xe_14 = 1;
			}
			a1x->word_0x20_32 = a1x->word_0x1C_28;
		}
		result = v3;
		break;
	}
	return result;
}

//----- (00016730) --------------------------------------------------------
Bit16s sub_16730(/*int a1, */type_str_0x6E8E* a2x, char a3)//1f7730
{
	uaxis_2d v3x; // eax
	uaxis_2d v4x; // eax
	//int result; // eax
	uaxis_2d v6x; // eax
	uaxis_2d v7x; // eax
	uaxis_2d v8x; // eax
	uaxis_2d v9x; // eax
	uaxis_2d v10x; // eax
	uaxis_2d v11x; // eax
	uaxis_2d v12x; // eax
	int v13; // [esp+0h] [ebp-8h]
	int v14; // [esp+4h] [ebp-4h]

	uaxis_2d a1y;

	v14 = a2x->array_0x4C_76.y >> 8;
	v3x._axis_2d.x = a2x->array_0x4C_76.x >> 8;
	v3x._axis_2d.y = v14 - 1;
	a1y.word = 0;
	if (x_BYTE_10B4E0_terraintype[v3x.word] == 8)
	{
		a1y._axis_2d.x = 1;
	}
	else
	{
		v3x._axis_2d.y = v14 + 1;
		if (x_BYTE_10B4E0_terraintype[v3x.word] == 8)
			a1y._axis_2d.x = 4;
	}
	v3x._axis_2d.y = a2x->array_0x4C_76.y >> 8;
	if (a3)
		v3x._axis_2d.x++;
	else
		v3x._axis_2d.x--;
	if (x_BYTE_10B4E0_terraintype[v3x.word] == 8)
	{
		if (a3)
		{
			a1y._axis_2d.x |= 2;
			goto LABEL_18;
		}
	LABEL_17:
		a1y._axis_2d.x |= 8;
		goto LABEL_18;
	}
	v13 = a2x->array_0x4C_76.x >> 8;
	if (a3)
		v3x._axis_2d.x= v13-1;
	else
		v3x._axis_2d.x= v13+1;
	if (x_BYTE_10B4E0_terraintype[v3x.word] == 8)
	{
		if (!a3)
		{
			a1y._axis_2d.x |= 2;
			goto LABEL_18;
		}
		goto LABEL_17;
	}
LABEL_18:
	if (a1y._axis_2d.x)
		return a1y.word;
	if (a3)
	{
		switch (a2x->dword_0xA4_164x->str_611_byte_0x45E_1119)
		{
		case 1:
		case 9:
			v9x._axis_2d.x = a2x->array_0x4C_76.x >> 8;
			v9x._axis_2d.y = (a2x->array_0x4C_76.y >> 8) - 1;
			v9x._axis_2d.x--;
			if (x_BYTE_10B4E0_terraintype[v9x.word] != 8)
				return a1y.word;
			a1y.word = 1544;
			return a1y.word;
		case 2:
		case 3:
			v10x._axis_2d.x = a2x->array_0x4C_76.x >> 8;
			v10x._axis_2d.y = (a2x->array_0x4C_76.y >> 8) - 1;
			v10x._axis_2d.x++;
			if (x_BYTE_10B4E0_terraintype[v10x.word] != 8)
				return a1y.word;
			a1y.word = 3073;
			return a1y.word;
		case 4:
		case 6:
			v11x._axis_2d.x = a2x->array_0x4C_76.x >> 8;
			v11x._axis_2d.y = (a2x->array_0x4C_76.y >> 8) + 1;
			v11x._axis_2d.x++;
			if (x_BYTE_10B4E0_terraintype[v11x.word] != 8)
				return a1y.word;
			a1y.word = 2306;
			return a1y.word;
		case 8:
		case 0xC:
			v12x._axis_2d.x = a2x->array_0x4C_76.x >> 8;
			v12x._axis_2d.y = (a2x->array_0x4C_76.y >> 8) + 1;
			v12x._axis_2d.x--;
			if (x_BYTE_10B4E0_terraintype[v12x.word] == 8)
				a1y.word = 772;
			return a1y.word;
		default:
			return a1y.word;
		}
		return a1y.word;
	}
	switch (a2x->dword_0xA4_164x->str_611_byte_0x45E_1119)
	{
	case 1:
	case 3:
		v4x._axis_2d.x = a2x->array_0x4C_76.x >> 8;
		v4x._axis_2d.y = (a2x->array_0x4C_76.y >> 8) - 1;
		v4x._axis_2d.x++;
		if (x_BYTE_10B4E0_terraintype[v4x.word] != 8)
			return a1y.word;
		a1y.word = 770;
		//result = a1x;
		break;
	case 2:
	case 6:
		v6x._axis_2d.x = a2x->array_0x4C_76.x >> 8;
		v6x._axis_2d.y = (a2x->array_0x4C_76.y >> 8) + 1;
		v6x._axis_2d.x++;
		if (x_BYTE_10B4E0_terraintype[v6x.word] != 8)
			return a1y.word;
		a1y.word = 1540;
		//result = a1x;
		break;
	case 4:
		v7x._axis_2d.x = a2x->array_0x4C_76.x >> 8;
		v7x._axis_2d.y = (a2x->array_0x4C_76.y >> 8) + 1;
		v7x._axis_2d.x--;
		if (x_BYTE_10B4E0_terraintype[v7x.word] != 8)
			return a1y.word;
		a1y.word = 3080;
		//result = a1x;
		break;
	case 8:
	case 9:
		v8x._axis_2d.x = a2x->array_0x4C_76.x >> 8;
		v8x._axis_2d.y = (a2x->array_0x4C_76.y >> 8) - 1;
		v8x._axis_2d.x--;
		if (x_BYTE_10B4E0_terraintype[v8x.word] != 8)
			return a1y.word;
		a1y.word = 2305;
		//result = a1x;
		break;
	default:
		return a1y.word;
	}
	return a1y.word;
}



//----- (000169C0) --------------------------------------------------------
char sub_169C0(type_str_0x6E8E* a1x)//1f79c0
{
	type_str_0x6E8E* v1x; // eax
	int16_t v2; // dx
	int16_t v3; // dx
	char result; // al
	uint16_t v5; // si
	uint16_t v6; // si
	//int v7; // eax
	char v8; // dl
	baxis_2d v9;
	//uint8_t v9x[18]; // [esp+0h] [ebp-1Ch]
	//uint8_t v10; // [esp+1h] [ebp-1Bh]//1//v9x[1]
	baxis_2d v11; // [esp+4h] [ebp-18h]//2//*(Bit32s*)&v9x[2]
	baxis_2d v12; // [esp+8h] [ebp-14h]//6//*(Bit32s*)&v9x[6]
	baxis_2d v13; // [esp+Ch] [ebp-10h]//10//*(Bit16s*)&v9x[10]
	uaxis_2d v14b; // [esp+10h] [ebp-Ch]//12//*(Bit16s*)&v9x[12]
	uaxis_2d v15b; // [esp+14h] [ebp-8h]//14//*(Bit16s*)&v9x[14]
	baxis_2d v16; // [esp+18h] [ebp-4h]//16//*(Bit16s*)&v9x[16] //18

	Bit8u v14a;
	Bit8u v15a;

	// fix if begin
	v3 = 0;
	// end

	//LOBYTE(*(Bit32s*)&v9x[6]) = a1x->array_0x4C_76.x >> 8;
	//BYTE1(*(Bit32s*)&v9x[6]) = a1x->array_0x4C_76.y >> 8;
	v12.x = a1x->array_0x4C_76.x >> 8;
	v12.y = a1x->array_0x4C_76.y >> 8;
	v11 = v12;
	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v13.x = 0;
	v13.y = 0;
	v16.x = 0;
	v16.y = 0;
	v9.x = v1x->array_0x4C_76.x >> 8;
	v9.y = v1x->array_0x4C_76.y >> 8;
	LOBYTE(v2) = 0;
	HIBYTE(v2) = a1x->dword_0xA4_164x->str_611_byte_0x45E_1118;
	switch (HIBYTE(v2))
	{
	case 0:
		v15a = sub_16730(/*v2,*/ a1x, 0);
		v14a = sub_16730(/*v3,*/ a1x, 1);
		if (!v14a && !v15a)
			return 0;
		if (v15a)
		{
			v5 = 0;
			while (v5 < 0x28u)
			{
				v12.x += x_BYTE_D3F96[v15a];
				v12.y += x_BYTE_D3FA4[v15a];
				v16 = v12;
				v5++;
				v15a = sub_16CA0(&v12, v15a, 0);
			}
		}
		if (v14a)
		{
			v6 = 0;
			while (v6 < 0x28u)
			{
				v11.x += x_BYTE_D3FB2[v14a];
				v11.y += x_BYTE_D3FC0[v14a];
				v13 = v11;
				v6++;
				v14a = sub_16CA0(&v11, v14a, 1);
			}
		}
		if (v15a && v14a)
		{
			if (abs(v9.y - v16.y) * abs(v9.x - v16.x) > 
				abs(v9.x - v13.x) * abs(v9.y - v13.y))
			{
				//v7 = a1x->dword_0xA4_164;
				v8 = 2;
			}
			else
			{
				//v7 = a1x->dword_0xA4_164;
				v8 = 1;
			}
			goto LABEL_21;
		}
		if (!v15a)
		{
			//v7 = a1x->dword_0xA4_164;
			v8 = 2;
		LABEL_21:
			a1x->dword_0xA4_164x->str_611_byte_0x45E_1118 = v8;
			return v8;
		}
		LOBYTE(v2) = 1;
		a1x->dword_0xA4_164x->str_611_byte_0x45E_1118 = 1;
		return v2;
	case 1:
		v15b.word = sub_16730(/*v2,*/ a1x, 0);
		if (!v15b._axis_2d.y || (uint16_t)sub_16E70(&v12, &v9))
		{
			result = 1;
		}
		else
		{
			a1x->dword_0xA4_164x->str_611_byte_0x45E_1118 = 3;
			result = 3;
		}
		break;
	case 2:
		v14b.word = sub_16730(/*v2,*/ a1x, 1);
		if (!v14b._axis_2d.y || (uint16_t)sub_16E70(&v12, &v9))
		{
			result = 2;
		}
		else
		{
			a1x->dword_0xA4_164x->str_611_byte_0x45E_1118 = 3;
			result = 3;
		}
		break;
	default:
		return v2;
	}
	return result;
}

//----- (00016CA0) --------------------------------------------------------
Bit16s sub_16CA0(baxis_2d* a2x, int16_t a3, char a4)//1f7ca0
{
	uaxis_2d v4x; // ax
	char v5; // al
	uaxis_2d v6x; // eax
	char v7; // al
	uaxis_2d v8x; // eax
	char v9; // al
	char v10; // ah
	uaxis_2d v11x; // ax
	int result; // eax
	uaxis_2d v13x; // ax
	uaxis_2d v14x; // ax
	uaxis_2d v15x; // ax
	char v16; // al
	char v17; // ah
	uaxis_2d v18x; // ax
	uaxis_2d v19x; // ax
	uaxis_2d v20x; // ax
	uaxis_2d v21x; // ax

	Bit16s a1x;

	v4x._axis_2d.x = a2x->x;
	v4x._axis_2d.y = a2x->y - 1;
	a1x = 0;
	if (x_BYTE_10B4E0_terraintype[v4x.word] == 8)
	{
		a1x = 1;
	}
	else
	{
		v4x._axis_2d.y = a2x->y + 1;
		if (x_BYTE_10B4E0_terraintype[v4x.word] == 8)
			a1x = 4;
	}
	v5 = a2x->x;
	if (a4)
		v6x._axis_2d.x = v5 + 1;
	else
		v6x._axis_2d.x = v5 - 1;
	v6x._axis_2d.y = a2x->y;
	if (x_BYTE_10B4E0_terraintype[v6x.word] == 8)
	{
		if (!a4)
		{
			a1x |= 8;
			goto LABEL_18;
		}
		goto LABEL_16;
	}
	v7 = a2x->x;
	if (a4)
		v8x._axis_2d.x = v7 - 1;
	else
		v8x._axis_2d.x = v7 + 1;
	v8x._axis_2d.y = a2x->y;
	if (x_BYTE_10B4E0_terraintype[v8x.word] == 8)
	{
		if (!a4)
		{
		LABEL_16:
			a1x |= 2;
			goto LABEL_18;
		}
		a1x |= 8;
	}
LABEL_18:
	if (a1x)
		return a1x;
	if (a4)
	{
		v16 = a2x->x;
		v17 = a2x->y;
		switch (a3)
		{
		case 1:
		case 9:
			v18x._axis_2d.y = v17 - 1;
			v18x._axis_2d.x = v16 - 1;
			if (x_BYTE_10B4E0_terraintype[v18x.word] != 8)
				return a1x;
			a1x = 1544;
			return a1x;
		case 2:
		case 3:
			v19x._axis_2d.y = v17 - 1;
			v19x._axis_2d.x = v16 + 1;
			if (x_BYTE_10B4E0_terraintype[v19x.word] != 8)
				return a1x;
			a1x = 3073;
			return a1x;
		case 4:
		case 6:
			v20x._axis_2d.y = v17 + 1;
			v20x._axis_2d.x = v16 + 1;
			if (x_BYTE_10B4E0_terraintype[v20x.word] != 8)
				return a1x;
			a1x = 2306;
			return a1x;
		case 8:
		case 12:
			v21x._axis_2d.y = v17 + 1;
			v21x._axis_2d.x = v16 - 1;
			if (x_BYTE_10B4E0_terraintype[v21x.word] == 8)
				a1x = 772;
			return a1x;
		default:
			return a1x;
		}
		return a1x;
	}
	v9 = a2x->x;
	v10 = a2x->y;
	switch (a3)
	{
	case 1:
	case 3:
		v11x._axis_2d.y = v10 - 1;
		v11x._axis_2d.x = v9 + 1;
		if (x_BYTE_10B4E0_terraintype[v11x.word] != 8)
			return a1x;
		a1x = 770;
		result = a1x;
		break;
	case 2:
	case 6:
		v13x._axis_2d.y = v10 + 1;
		v13x._axis_2d.x = v9 + 1;
		if (x_BYTE_10B4E0_terraintype[v13x.word] != 8)
			return a1x;
		a1x = 1540;
		result = a1x;
		break;
	case 4:
		v14x._axis_2d.y = v10 + 1;
		v14x._axis_2d.x = v9 - 1;
		if (x_BYTE_10B4E0_terraintype[v14x.word] != 8)
			return a1x;
		a1x = 3080;
		result = a1x;
		break;
	case 8:
	case 9:
		v15x._axis_2d.y = v10 - 1;
		v15x._axis_2d.x = v9 - 1;
		if (x_BYTE_10B4E0_terraintype[v15x.word] != 8)
			return a1x;
		a1x = 2305;
		result = a1x;
		break;
	default:
		return a1x;
	}
	return result;
}

//----- (00016E70) --------------------------------------------------------
int sub_16E70(baxis_2d* a1x, baxis_2d* a2x)//1f7e70
{
	int16_t v2; // cx
	int16_t v3; // si
	int v4; // ebx
	int16_t v5; // ax
	int16_t v6; // ax
	int16_t v7; // ax
	int16_t v8; // dx
	int j; // ecx
	uaxis_2d v10x; // ST00_2
	int i; // ecx
	//uint16_t v12; // ST00_2
	uaxis_2d v12x;
	int result; // eax
	int v14; // ecx
	int16_t v15; // [esp+4h] [ebp-10h]
	int v16; // [esp+8h] [ebp-Ch]
	int v17; // [esp+Ch] [ebp-8h]
	int16_t v18; // [esp+10h] [ebp-4h]

	v2 = a2x->x - a1x->x;
	v3 = a2x->y - a1x->y;
	v17 = 2 * abs(v2);
	v4 = 0;
	v16 = 2 * abs(v3);
	if (v2 >= 0)
	{
		LOBYTE(v5) = a2x->x != a1x->x;
		HIBYTE(v5) = 0;
		v15 = v5;
	}
	else
	{
		v15 = -1;
	}
	if (v3 >= 0)
	{
		LOBYTE(v6) = a2x->y != a1x->y;
		HIBYTE(v6) = 0;
		v18 = v6;
	}
	else
	{
		v18 = -1;
	}
	v7 = a1x->x;
	v8 = a1x->y;
	if ((int16_t)v17 <= (int16_t)v16)
	{
		for (i = (int16_t)v17 - ((int16_t)v16 >> 1); ; i += v17)
		{
			v12x._axis_2d.x = v7;
			v12x._axis_2d.y = v8;
			if (x_BYTE_10B4E0_terraintype[v12x.word] == 8)
				return v4 + 1;
			if (v8 == a2x->y)
				break;
			if ((i & 0x8000u) == 0)
			{
				LOBYTE(v7) = v15 + v7;
				i -= v16;
			}
			v4++;
			v8 += v18;
		}
		result = 0;
	}
	else
	{
		for (j = (int16_t)v16 - ((int16_t)v17 >> 1); ; j += v16)
		{
			v10x._axis_2d.x = v7;
			v10x._axis_2d.y = v8;
			if (x_BYTE_10B4E0_terraintype[v10x.word] == 8)
			{
				v14 = v4 + 1;
				goto LABEL_24;
			}
			if (v7 == a2x->x)
				break;
			if ((j & 0x8000u) == 0)
			{
				LOBYTE(v8) = v18 + v8;
				j -= v17;
			}
			v4++;
			v7 += v15;
		}
		v14 = 0;
	LABEL_24:
		result = v14;
	}
	return result;
}

//----- (00016FC0) --------------------------------------------------------
type_str_0x6E8E* sub_16FC0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1f7fc0
{
	unsigned int v2; // edi
	type_str_0x6E8E* v3x; // esi
	type_str_0x6E8E* v4x; // ebx
	int16_t v6; // ax
	char v7; // ah
	unsigned int v8; // eax

	v2 = -1;
	v3x = 0;
	v4x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
	if (v4x <= x_DWORD_EA3E4[0])
		return 0;
	do
	{
		v6 = v4x->word_0x1A_26;
		if (v6 != a1x->word_0x1A_26 && v6 != a2x->word_0x1A_26)
		{
			v7 = v4x->byte_0x40_64;
			if (!v7 || v7 == 1)
			{
				v8 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &v4x->array_0x4C_76);
				if (v8 < v2)
				{
					v3x = v4x;
					v2 = v8;
				}
			}
		}
		v4x = v4x->next_0;
	} while (v4x > x_DWORD_EA3E4[0]);
	return v3x;
}

//----- (00017060) --------------------------------------------------------
void sub_17060_compute_mouse_relative_pos(int16_t a1, int16_t a2)//1f8060
{
	//int16_t result; // ax
	int v3; // ebx
	int v4; // ecx
	//Bit8u* v5; // eax
	//int v6; // edx

#ifdef MOUSE_OFF2
	a1 = 0x140;
	a2 = 0xc8;
#endif

	//result = x_D41A0_BYTEARRAY_4[0];
	if (!x_D41A0_BYTEARRAY_4_struct.byteindex_178)
	{
		if (x_WORD_180660_VGA_type_resolution == 1)
		{
			v3 = ((a1 << 7) - 40960) / 320;
			v4 = ((a2 << 7) - 25600) / -200;
		}
		else
		{
			v3 = ((a1 << 7) - 40960) / 320;
			v4 = ((a2 << 7) - 30720) / -240;
		}
		if (v3 < -127)
			v3 = -127;
		if (v3 > 127)
			LOBYTE(v3) = 127;
		if (v4 < -127)
			v4 = -127;
		if (v4 > 127)
			LOBYTE(v4) = 127;
		//v5 = x_D41A0_BYTEARRAY_0;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte3 = v3;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte4 = v4;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_word6 = unk_18058Cstr.x_DWORD_180590;
		//v6 = x_D41A0_BYTEARRAY_0 + 10 * D41A0_BYTESTR_0.word_0xc;
		//result = x_DWORD_180594;
		//*(x_WORD *)(v6 + 28230) = x_DWORD_180594;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_word8 = unk_18058Cstr.x_DWORD_180594;
	}
	//return result;
}

int debugcounter_47560 = 0;

//----- (00017190) --------------------------------------------------------
void sub_17190()//1f8190
{
	//int v0; // eaxx_D41A0_BYTEARRAY_4
	//int v1; // ecx
	//Bit8u* v2; // edx
	type_str_0x6E8E* v3x; // edx
	//char v4; // dl
	//char v5; // cl
	//int v6; // edx
	//bool v7; // dl
	//int v8; // eax

	#ifdef OFF_PAUSE_5
	if (debugcounter_47560 == 5)
	{
		x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 &= 0xfe;
		//sub_41B60();
		/*x_D41A0_BYTEARRAY_4_struct.byteindex_205 = 0;
		x_D41A0_BYTEARRAY_4_struct.byteindex_206 = 0;
		sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]);
		sub_52E90(
			&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc],
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221,
			1);
		if (x_BYTE_E37FD)
			sub_8E160_sound_proc15_startsequence(D41A0_BYTESTR_0.dword_0x235, 0x7Fu);
		sub_86930(x_WORD_1803EC);
		if (x_D41A0_BYTEARRAY_4_struct.byteindex_225)
			x_D41A0_BYTEARRAY_4_struct.byteindex_225 = 1;
		x_D41A0_BYTEARRAY_4_struct.byteindex_208 = sub_55C00(x_D41A0_BYTEARRAY_4_struct.levelnumber_43w);*/
	}
	#endif

	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 4) || sub_473E0() == 0)
	{
		//v1 = D41A0_BYTESTR_0.word_0xc;
		//LOBYTE(v0) = 5 * D41A0_BYTESTR_0.word_0xc;
		if (!D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0)
		{
			//v2 = &x_D41A0_BYTEARRAY_0[2124 * D41A0_BYTESTR_0.word_0xc];
			
			if (!(D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 0x20))
			{
				v3x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
				if (x_BYTE_180664[0x38])
				{
					switch (x_BYTE_1806E4)
					{
					case 0x3c: {//f2
						sub_191B0(30, 2);
						x_BYTE_1806E4 = 0;
						break;					
					}
					case 0x3d: {//f3
						sub_191B0(30, 3);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x3e: {//f4
						sub_191B0(30, 4);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x3f: {//f5
						sub_191B0(30, 5);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x40: {//f6
						sub_191B0(30, 6);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x41: {//f7
						sub_191B0(30, 7);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x42: {//f8
						sub_191B0(30, 8);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x43: {//f9
						sub_191B0(30, 9);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x44: {//f10
						sub_191B0(30, 10);
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x2c: {//z
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 < 0)
						{
							if (x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 & 0x20)
								x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 &= 0xDF;
							else
								x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 |= 0x20;
						}
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x2f: {//v
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 < 0)
							sub_191B0(4, 8);
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x3b: {//f1
						sub_191B0(30, 1);
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x14: {//t
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 < 0)
						{
							if (x_BYTE_180664[0x36])
								sub_70940();
							else
								sub_191B0(4, 64);
						}
						x_BYTE_1806E4 = 0;
						break;
					}
					
					case 0x20: {//d							   
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 < 0)
						{
							sub_5BF10();
							x_BYTE_180664[0x38] = 0;
							if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x10)
								x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 &= 0xEF;
							else
								x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 |= 0x10;
						}
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x23: {//h							 
						D41A0_BYTESTR_0.str_0x218A_settings.str_0x2192.xxxx_0x2193 ^= 1u;
						x_BYTE_1806E4 = 0;
						break;
					}

					}
					if (x_BYTE_180664[0x18])
					{
						D41A0_BYTESTR_0.byte_0x36E03 = 2;
					}
					return;
				}
				if (x_BYTE_180664[0x2a] || x_BYTE_180664[0x36])
				{
					switch (x_BYTE_1806E4)
					{
					case 0x10: {//q
						sub_191B0(2, 0);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x12: {//e
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 < 0)
							sub_191B0(26, 0);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x13: {//r
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 < 0 && !(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
						{
							
							D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] |= 0xCu;
							D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.word_0x3A_58 = 0;
						}
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x20: {//d
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 < 0)
						{
							//v0 = 5 * x_D41A0_BYTEARRAY_0[0x3659D + 11 * D41A0_BYTESTR_0.word_0xc];
							D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[1]].str_3654C_byte0 |= 2u;
						}
						x_BYTE_1806E4 = 0;
						break;					
					}

					case 0x21: {//f
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 < 0)
						{
							//v0 = 2124 * D41A0_BYTESTR_0.word_0xc;
							D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] |= 4u;
						}
						x_BYTE_1806E4 = 0;
						break;					
					}

					case 0x25: {//k
						if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x8010))
							v3x->dword_0x8 = -1;
						x_BYTE_1806E4 = 0;
						break;					
					}

					case 0x26: {//l remove castle stage
						//v0 = *(x_DWORD *)(v3 + 164);
						if (v3x->dword_0xA4_164x->word_0x3A_58)
							/*LOBYTE(v0) = */sub_191B0(42, 0);
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x2e: {//c
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 < 0)
						{
							
							D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[0] = 1;
							sub_191B0(27, 0);
						}
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x3e: {//f4
						sub_1A970_change_game_settings(12, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x3f: {//f5
						sub_1A970_change_game_settings(13, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x40: {//f6
						sub_1A970_change_game_settings(14, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x41: {//f7
						sub_1A970_change_game_settings(15, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x44: {//f10
						//v7 = x_D41A0_BYTEARRAY_4_struct.byteindex_205 == 0;
						x_D41A0_BYTEARRAY_4_struct.byteindex_205 = (x_D41A0_BYTEARRAY_4_struct.byteindex_205==0);
						x_D41A0_BYTEARRAY_4_struct.byteindex_206 = x_D41A0_BYTEARRAY_4_struct.byteindex_205;
						if (x_D41A0_BYTEARRAY_4_struct.byteindex_205 && x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
							sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]); //fix it sub_8CD27(dword_EB394);
						if (!x_D41A0_BYTEARRAY_4_struct.byteindex_206 && x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
							sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[x_BYTE_D419E]); //fix it LOBYTE(v0) = sub_8CD27(dword_EB394 + 6 * (uint8_t)byte_D419E);
						x_BYTE_1806E4 = 0; 
						break;
					}

					case 0x3c: {//f2
						sub_1A970_change_game_settings(10, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x3d: {//f3
						sub_1A970_change_game_settings(11, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x3b: {//f1
						sub_1A970_change_game_settings(9, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}


					}
				}
				else
				{
					switch (x_BYTE_1806E4)
					{
					case 0x19: {//p
						if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
							sub_18BB0();
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x13: {//r
						sub_1A970_change_game_settings(16, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x39: {//space
						sub_191B0(15, 0);
						x_BYTE_1806E4 = 0;
						break;
					}

					case 0x3e: {//f4
						sub_1A970_change_game_settings(4, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x3f: {//f5
						sub_1A970_change_game_settings(2, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x40: {//f6
						sub_1A970_change_game_settings(3, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x41: {//f7
						sub_1A970_change_game_settings(6, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x42: {//f8
						sub_1A970_change_game_settings(17, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x1f: {//s
						if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
							&& x_WORD_180660_VGA_type_resolution & 1
							&& (unk_18058Cstr.x_WORD_1805C2_joystick == 0x01 || unk_18058Cstr.x_WORD_1805C2_joystick == 0x08 || unk_18058Cstr.x_WORD_1805C2_joystick == 0x0c))
						{
							sub_1A970_change_game_settings(18, 0, 0);
						}
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x3b: {//f1
						sub_1A970_change_game_settings(1, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x3c: {//f2
						sub_1A970_change_game_settings(5, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}
					case 0x3d: {//f3
						sub_1A970_change_game_settings(7, 0, 0);
						x_BYTE_1806E4 = 0;
						break;
					}
					}
				}				
				if (x_BYTE_180664[0x18])
				{
					D41A0_BYTESTR_0.byte_0x36E04 = 2;
				}
				return;
			}
		}
	}
	return;
}



//----- (00017A00) --------------------------------------------------------
void sub_17A00_mouse_and_keys_events(/*Bit8u* a1,*/ signed int a2, int16_t a3)//1f8a00
{
	//int result; // eax
	//int v4; // ecx
	//Bit8u* v5; // eax
	//int v6; // edx
	//int v7; // ecx
	type_str_0x6E8E* v8x; // ebx
	//char v9; // ch
	//char v10; // dl
	char v11; // dh
	type_str_0x6E8E* v12x; // edi
	//int v13; // eax
	int v14; // edx
	//Bit8u* v15; // ebx
	uint8_t v16; // al
	char v17; // al
	int v18; // esi
	char v19; // al
	//int v20; // eax
	char v21; // dl
	//Bit8u* v22; // ecx
	char v23; // al
	type_str_0x6E8E* v24x; // ebx
	//uint8_t v25; // al
	//char v26; // cl
	char v27; // al
	signed int v28; // eax
	int v29; // eax
	int v30; // ecx
	char v32; // [esp-4h] [ebp-Ch]
	char v33; // [esp+0h] [ebp-8h]
	char v34; // [esp+4h] [ebp-4h]

	// fix if begin
	v14 = 0;
	// end

	if ((uint8_t)x_BYTE_1806E4 >= 0x80u)
		x_BYTE_1806E4 = 0;
	//result = 2124 * D41A0_BYTESTR_0.word_0xc;
	//v4 = x_D41A0_BYTEARRAY_0[result];
	if (!(D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 0x20))
	{
		
		switch (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221)
		{
		case 0:
		case 4:
			//keys and buttons
			if (D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0)
				goto LABEL_292;
			if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
				sub_197F0();
			sub_17190();//test FnX
			//v5 = x_D41A0_BYTEARRAY_0;
			//v6 = D41A0_BYTESTR_0.word_0xc;
			//v7 = 5 * D41A0_BYTESTR_0.word_0xc;
			
			v8x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
			//LOBYTE(v6) = unk_18058Cstr.x_DWORD_18059C;
			
			D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte5 = 0;
			if (unk_18058Cstr.x_DWORD_18059C & 0x10)
			{
				if (v8x->dword_0x8 >= 0)
					sub_191B0(20, 5);
			}
			else if (x_BYTE_180664[0x38] || x_BYTE_180664[x_BYTE_EB39E_keys[9]])
			{
				switch (x_BYTE_1806E4) {
				case 0x13://r
				case 0x19://p
				case 0x1f: {//s
					x_BYTE_1806E4 = 0;
					break;
				}
				case 0x21: {//f
					sub_191B0(4, 32);
					x_BYTE_1806E4 = 0;
					break;
				}
				}

				if (unk_18058Cstr.x_DWORD_18059C & 1)
				{
					sub_18DA0(v8x, 1, 1);
					unk_18058Cstr.x_DWORD_18059C &= 0xFE;
				}
				else if (unk_18058Cstr.x_DWORD_18059C & 2)
				{
					sub_18DA0(v8x, 2, 1);
					unk_18058Cstr.x_DWORD_18059C &= 0xFD;
				}
			}
			else if (x_BYTE_180664[0x2a] || x_BYTE_180664[x_BYTE_EB39E_keys[8]])
			{
				if (unk_18058Cstr.x_DWORD_18059C & 1)
				{
					sub_18DA0(v8x, 1, 0);
					unk_18058Cstr.x_DWORD_18059C &= 0xFE;
				}
				else if (unk_18058Cstr.x_DWORD_18059C & 2)
				{
					sub_18DA0(v8x, 2, 0);
					unk_18058Cstr.x_DWORD_18059C &= 0xFD;
				}
			}
			else
			{
				switch (x_BYTE_1806E4)
				{
				case 0x1a: {//[
					
					if (!D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190)
					{
						
						//v9 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 8589);
						if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D < 40)
						{
							D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D++;
							sub_2CA90(D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D);
						}
					}
					x_BYTE_1806E4 = 0;
					break;
				}
				case 0x1b: {//]
					
					if (!D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190)
					{						
						//v10 = x_D41A0_BYTEARRAY_0[8589];
						if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D > 17)
						{
							D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D--;// = v10 - 1;
							sub_2CA90(D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D);
						}
					}
					x_BYTE_1806E4 = 0;
					break;
				}
				case 0x17://i
					if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 & 2))
					{
						v11 = v8x->byte_0x45_69;
						if (v11 != 2 && v11 != 3)
							sub_191B0(16, 0);
					}
					x_BYTE_1806E4 = 0;
					goto LABEL_296;
				case 0x01://esc
					sub_18B30();
					x_BYTE_1806E4 = 0;
					sub_1A7A0_fly_asistant();
					goto LABEL_306;
				case 0x39://space
					sub_191B0(15, 0);
					x_BYTE_1806E4 = 0;
					break;
				}
				if (unk_18058Cstr.x_DWORD_18059C & 1 && unk_18058Cstr.x_DWORD_18059C & 2)
				{
					if (v8x->dword_0x8 >= 0)
						sub_191B0(20, 6);
					unk_18058Cstr.x_DWORD_18059C &= 0xFC;
				}
				if (x_BYTE_1806E4 == x_BYTE_EB39E_keys[4])
				{
					if (v8x->dword_0x8 >= 0)
						sub_191B0(20, 6);
					x_BYTE_1806E4 = 0;
				}
				if ((uint8_t)x_BYTE_1806E4 >= 2u)//2-9
				{
					if ((uint8_t)x_BYTE_1806E4 <= 9u)
					{
						sub_191B0(43, x_BYTE_1806E4 - 2);
						x_BYTE_1806E4 = 0;
					}
					else if (x_BYTE_1806E4 == 0x20)//d
					{
						sub_19A70();
						x_BYTE_1806E4 = 0;
					}
				}
				if (!x_BYTE_180664[0x2f] || x_D41A0_BYTEARRAY_4_struct.byte_38591)//volume
				{
					if (x_BYTE_180664[0x32] && !x_D41A0_BYTEARRAY_4_struct.byte_38591)
						sub_19CA0_sound_proc5(2u);
				}
				else
				{
					sub_19CA0_sound_proc5(1u);
				}
				sub_18F80(v8x);
			}
			if (x_BYTE_1806E4 && x_BYTE_E36DC[(uint8_t)x_BYTE_1806E4] == 8)
			{
				sub_191B0(39, 1);
				x_BYTE_1806E4 = 0;
			}
			sub_1A8A0();
			sub_17060_compute_mouse_relative_pos(unk_18058Cstr.x_DWORD_1805B0_mouse.x, unk_18058Cstr.x_DWORD_1805B0_mouse.y);
			/*LOBYTE(result) = (Bit8u)*/sub_1A7A0_fly_asistant();
			goto LABEL_306;
		case 1:
			sub_17190();
			if ((!(unk_18058Cstr.x_DWORD_18059C & 1) || !(unk_18058Cstr.x_DWORD_18059C & 2)) && x_BYTE_1806E4 != 0x1c)
				goto LABEL_296;
			x_BYTE_1806E4 = 0;
			unk_18058Cstr.x_DWORD_18059C &= 0xFC;
			sub_191B0(20, 0);
			/*LOBYTE(result) = (Bit8u)*/sub_1A7A0_fly_asistant();
			goto LABEL_306;
		case 3:
			if (!x_BYTE_1806E4 || (uint8_t)x_BYTE_1806E4 >= 0x80u)
				goto LABEL_216;
			if ((uint8_t)x_BYTE_1806E4 < 0x1Cu)
			{
				if (x_BYTE_1806E4 == 1)
				{
					sub_191B0(18, 0);
					goto LABEL_215;
				}
				goto LABEL_206;
			}
			if ((uint8_t)x_BYTE_1806E4 <= 0x1Cu)
			{
				sub_191B0(19, 0);
				goto LABEL_215;
			}
			if ((uint8_t)x_BYTE_1806E4 < 0x3Bu)
				goto LABEL_206;
			if ((uint8_t)x_BYTE_1806E4 <= 0x42u)
			{
				if (x_BYTE_180664[0x2a] || x_BYTE_180664[0x36])
				{
					sub_191B0(35, x_BYTE_1806E4 - 59);
				}
				else if (x_BYTE_1806E4 == 0x3b)
				{
					sub_18AA0();
				}
				x_BYTE_1806E4 = 0;
			}
			else
			{
				if (x_BYTE_1806E4 != 0x43)
				{
				LABEL_206:
					v27 = x_BYTE_E36DC[(uint8_t)x_BYTE_1806E4];
					if ((uint8_t)v27 >= 0x41u && (uint8_t)v27 <= 0x5Au
						|| (uint8_t)v27 >= 0x61u && (uint8_t)v27 <= 0x7Au
						|| (uint8_t)v27 >= 0x30u && (uint8_t)v27 <= 0x39u
						|| v27 == 8
						|| v27 == 32)
					{
						sub_191B0(17, x_BYTE_E36DC[(uint8_t)x_BYTE_1806E4]);
					}
					goto LABEL_215;
				}
				//v25 = x_D41A0_BYTEARRAY_0[result + 12223] + 1;
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E1_2BE4_12223++;// = v25;
				//v26 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E1_2BE4_12223;
				if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E1_2BE4_12223 >= 4)
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E1_2BE4_12223 = 0;
				sub_191B0(36, D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E1_2BE4_12223);
			}
		LABEL_215:
			x_BYTE_1806E4 = 0;
		LABEL_216:
			if (x_WORD_180660_VGA_type_resolution & 1)
				v28 = 400;
			else
				v28 = 480;
			v29 = v28 - 72;
			if (unk_18058Cstr.x_DWORD_1805B0_mouse.x < 4 || unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 66 || v29 + 28 > unk_18058Cstr.x_DWORD_1805B0_mouse.y || v29 + 66 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y)
			{
				if (unk_18058Cstr.x_DWORD_1805B0_mouse.x < 384 || unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 654 || v29 + 26 > unk_18058Cstr.x_DWORD_1805B0_mouse.y || v29 + 48 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y)
				{
					if (unk_18058Cstr.x_DWORD_1805B0_mouse.x < 82 || unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 378 || v29 + 32 > unk_18058Cstr.x_DWORD_1805B0_mouse.y || v29 + 60 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y)
					{
						if (unk_18058Cstr.x_DWORD_1805B0_mouse.x < 384 || unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 440 || v29 + 4 > unk_18058Cstr.x_DWORD_1805B0_mouse.y || v29 + 22 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y)
						{
							if (unk_18058Cstr.x_DWORD_1805B0_mouse.x < 474 || unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 530 || v29 + 4 > unk_18058Cstr.x_DWORD_1805B0_mouse.y || v29 + 22 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y)
							{
								if (unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 564
									&& unk_18058Cstr.x_DWORD_1805B0_mouse.x < 620
									&& v29 + 4 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y
									&& v29 + 22 > unk_18058Cstr.x_DWORD_1805B0_mouse.y
									&& unk_18058Cstr.x_DWORD_18059C & 1)
								{
									sub_191B0(18, 0);
								}
							}
							else if (unk_18058Cstr.x_DWORD_18059C & 1)
							{
								sub_191B0(44, 0);
							}
						}
						else if (unk_18058Cstr.x_DWORD_18059C & 1)
						{
							sub_191B0(19, 0);
						}
						goto LABEL_292;
					}
					if (unk_18058Cstr.x_DWORD_1805B0_mouse.x < 82 || unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 150 || v29 + 32 > unk_18058Cstr.x_DWORD_1805B0_mouse.y || v29 + 60 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y)
					{
						if (unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 152 && unk_18058Cstr.x_DWORD_1805B0_mouse.x < 220 && v29 + 32 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y && v29 + 60 > unk_18058Cstr.x_DWORD_1805B0_mouse.y)
						{
							if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
								str_unk_1804B0ar.byte_0xa9 = 99;
							if (unk_18058Cstr.x_DWORD_18059C & 1)
								sub_191B0(36, 1);
							goto LABEL_292;
						}
						if (unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 222 && unk_18058Cstr.x_DWORD_1805B0_mouse.x < 290 && v29 + 32 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y && v29 + 60 > unk_18058Cstr.x_DWORD_1805B0_mouse.y)
						{
							if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
								str_unk_1804B0ar.byte_0xa9 = 100;
							if (unk_18058Cstr.x_DWORD_18059C & 1)
								sub_191B0(36, 2);
							goto LABEL_292;
						}
						if (unk_18058Cstr.x_DWORD_1805B0_mouse.x < 310 || unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 378 || v29 + 32 > unk_18058Cstr.x_DWORD_1805B0_mouse.y || v29 + 60 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y)
							goto LABEL_292;
						if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
							str_unk_1804B0ar.byte_0xa9 = 101;
						if (!(unk_18058Cstr.x_DWORD_18059C & 1))
							goto LABEL_292;
						v32 = 3;
					}
					else
					{
						if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
							str_unk_1804B0ar.byte_0xa9 = 98;
						if (!(unk_18058Cstr.x_DWORD_18059C & 1))
							goto LABEL_292;
						v32 = 0;
					}
					sub_191B0(36, v32);
					goto LABEL_292;
				}
				if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
					str_unk_1804B0ar.byte_0xa9 = 102;
				if (unk_18058Cstr.x_DWORD_18059C & 1)
				{
					v30 = (unk_18058Cstr.x_DWORD_1805B0_mouse.x - 384) / 34;
					if (v30 >= D41A0_BYTESTR_0.word_0xc)
						v30++;
					sub_191B0(37, v30);
				}
			}
			else
			{
				if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
					str_unk_1804B0ar.byte_0xa9 = 97;
				if (unk_18058Cstr.x_DWORD_18059C & 1)
					sub_191B0(
						35,
						4 * ((unk_18058Cstr.x_DWORD_1805B0_mouse.y - (v29 + 28)) / 20)
						+ ((unk_18058Cstr.x_DWORD_1805B0_mouse.x - 4 - (__CFSHL__((unk_18058Cstr.x_DWORD_1805B0_mouse.x - 4) >> 31, 4) + 16 * ((unk_18058Cstr.x_DWORD_1805B0_mouse.x - 4) >> 31))) >> 4));
			}
		LABEL_292:
			unk_18058Cstr.x_DWORD_18059C &= 0xFC;
			/*LOBYTE(result) = (Bit8u)*/sub_1A7A0_fly_asistant();
			goto LABEL_306;
		case 5:
		case 8:
			v33 = 0;
			v34 = 0;
			v12x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
			/*LOBYTE(v13) = */sub_17190();
			if (v12x->dword_0x8 < 0)
			{
				v33 = 1;
			}
			else
			{
				//v15 = (Bit8u*)v12x->dword_0xA4_164;
				// FIXME: types
				// _wcpp_1_unwind_leave__120(/*v13, */v14, (Bit32u)v12x->dword_0xA4_164x);
				v16 = v12x->dword_0xA4_164x->str_611.byte_0x457_1111;
				//a1 = &v15[611];
				if (v16)
				{
					if (v16 <= 2u)
					{
						if ((v16 != 1 || unk_18058Cstr.x_DWORD_18059C & 4) && (v12x->dword_0xA4_164x->str_611.byte_0x457_1111 != 2 || unk_18058Cstr.x_DWORD_18059C & 8))
						{
							v23 = sub_6D4F0(&v12x->dword_0xA4_164x->str_611, unk_18058Cstr.x_DWORD_1805B0_mouse.x);
							v12x->dword_0xA4_164x->str_611.byte_0x459_1113 = v23;
							sub_191B0(41, v23);
						}
						else
						{
							if (v12x->dword_0xA4_164x->str_611.byte_0x457_1111 == 1)
								//D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0
								D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 = 31;
							else
								D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 = 32;
							//v22 = x_D41A0_BYTEARRAY_0;
							D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte1 = v12x->dword_0xA4_164x->str_611.byte_0x458_1112;
							D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte2 = v12x->dword_0xA4_164x->str_611.byte_0x459_1113;
							v12x->dword_0xA4_164x->str_611.byte_0x457_1111 = 0;
							sub_6D200(&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc]);
						}
					}
				}
				else
				{
					v34 = 1;
					v17 = sub_6D420_mouse_to_spell(unk_18058Cstr.x_DWORD_1805B0_mouse.x, unk_18058Cstr.x_DWORD_1805B0_mouse.y);
					v12x->dword_0xA4_164x->str_611.byte_0x458_1112 = v17;
					v18 = x_BYTE_D94FF_spell_index[v17];
					v19 = 1;					
					if (!v12x->dword_0xA4_164x->str_611.array_0x333_819x.word[v18] || !x_BYTE_D41B6 && v18 == 25)
						v19 = 0;
					if (!v19)
						goto LABEL_122;
					sub_6D4C0(&v12x->dword_0xA4_164x->str_611);
					if (!(unk_18058Cstr.x_DWORD_18059C & 1) && !(unk_18058Cstr.x_DWORD_18059C & 2))
						goto LABEL_122;
					if (x_BYTE_180664[0x2a] || x_BYTE_180664[x_BYTE_EB39E_keys[7]])
					{
						sub_191B0(38, v18);
						//v20 = (int)x_D41A0_BYTEARRAY_0;
						D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte2 = 0;
						v21 = v12x->dword_0xA4_164x->str_611.array_0x3B5_949x.byte[v18];
						if (v21)
						{
							if (unk_18058Cstr.x_DWORD_18059C & 1)
							{
								if (v21 != 1)
									D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte2 = 1;
								goto LABEL_122;
							}
							if (v21 == 2)
								goto LABEL_122;
						}
						else if (unk_18058Cstr.x_DWORD_18059C & 1)
						{
							D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte2 = 1;
							goto LABEL_122;
						}
						D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte2 = 2;
						goto LABEL_122;
					}
					if (unk_18058Cstr.x_DWORD_18059C & 1 && unk_18058Cstr.x_DWORD_18059C & 2)
					{
						sub_191B0(6, 64);
						D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte1 = v12x->dword_0xA4_164x->str_611.byte_0x458_1112;
					}
					else
					{
						v12x->dword_0xA4_164x->str_611.byte_0x457_1111 = ((unk_18058Cstr.x_DWORD_18059C & 1) == 0) + 1;
						sub_6D200(&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc]);
						sub_191B0(40, v12x->dword_0xA4_164x->str_611.byte_0x458_1112);
						D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte2 = v12x->dword_0xA4_164x->str_611.byte_0x457_1111;
					}
				}
			}
		LABEL_122:
			if (!(unk_18058Cstr.x_DWORD_18059C & 0x10) && !(unk_18058Cstr.x_DWORD_18059C & 4) && !(unk_18058Cstr.x_DWORD_18059C & 8))
				v33 = 1;
			if (v33)
			{				
				if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221 == 5)
					sub_191B0(20, 0);
				else
					sub_191B0(20, 6);
			}
			else
			{
				if (v12x->dword_0x8 >= 0)
				{
					if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 1)
						sub_191B0(6, 1);
					if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 2)
						sub_191B0(6, 2);
					if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 4)
						sub_191B0(6, 4);
					if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 8)
						sub_191B0(6, 8);
				}
				if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 2
					&& v34
					&& !D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0)
				{
					sub_191B0(40, v12x->dword_0xA4_164x->str_611.byte_0x458_1112);
					D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte2 = 0;
				}
			}
			sub_17060_compute_mouse_relative_pos(v12x->dword_0xA4_164x->position_backup_20.x, v12x->dword_0xA4_164x->position_backup_20.y);
			x_BYTE_1806E4 = 0;
			unk_18058Cstr.x_DWORD_18059C &= 0xFC;
			/*LOBYTE(result) = (Bit8u)*/sub_1A7A0_fly_asistant();
			goto LABEL_306;
		case 6:
		case 7:
			v24x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
			if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
				sub_197F0();
			sub_17190();
			if (unk_18058Cstr.x_DWORD_18059C & 1 && unk_18058Cstr.x_DWORD_18059C & 2 || x_BYTE_1806E4 == x_BYTE_EB39E_keys[4] || v24x->dword_0x8 < 0)
			{
				sub_191B0(20, 0);
			}
			else if (x_BYTE_1806E4 == 1)
			{
				sub_18B30();
				x_BYTE_1806E4 = 0;
			}
			else
			{
				if (unk_18058Cstr.x_DWORD_18059C & 0x10)
				{
					sub_191B0(20, 8);
				}
				else if (x_BYTE_180664[0x38] || x_BYTE_180664[x_BYTE_EB39E_keys[9]] || x_BYTE_180664[x_BYTE_EB39E_keys[6]])
				{
					if (unk_18058Cstr.x_DWORD_18059C & 1)
					{
						sub_18DA0(v24x, 1, 1);
						unk_18058Cstr.x_DWORD_18059C &= 0xFE;
					}
					else if (unk_18058Cstr.x_DWORD_18059C & 2)
					{
						sub_18DA0(v24x, 2, 1);
						unk_18058Cstr.x_DWORD_18059C &= 0xFD;
					}
					else if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221 != 7)
					{
						sub_191B0(20, 7);
					}
				}
				else if (x_BYTE_180664[0x2a] || x_BYTE_180664[x_BYTE_EB39E_keys[8]])
				{
					if (unk_18058Cstr.x_DWORD_18059C & 1)
					{
						sub_18DA0(v24x, 1, 0);
						unk_18058Cstr.x_DWORD_18059C &= 0xFE;
					}
					else if (unk_18058Cstr.x_DWORD_18059C & 2)
					{
						sub_18DA0(v24x, 2, 0);
						unk_18058Cstr.x_DWORD_18059C &= 0xFD;
					}
				}
				else if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221 != 6)
				{
					sub_191B0(20, 6);
				}
				sub_18F80(v24x);
			}
			if (x_BYTE_1806E4 == 0x20)
			{
				sub_19A70();
				x_BYTE_1806E4 = 0;
			}
			if (!x_BYTE_180664[0x2f] || x_D41A0_BYTEARRAY_4_struct.byte_38591)
			{
				if (x_BYTE_180664[0x32] && !x_D41A0_BYTEARRAY_4_struct.byte_38591)
					sub_19CA0_sound_proc5(2u);
			}
			else
			{
				sub_19CA0_sound_proc5(1u);
			}
			if (x_BYTE_1806E4 && x_BYTE_E36DC[(uint8_t)x_BYTE_1806E4] == 8)
			{
				sub_191B0(39, 1);
				x_BYTE_1806E4 = 0;
			}
			sub_1A8A0();
			sub_17060_compute_mouse_relative_pos(unk_18058Cstr.x_DWORD_1805B0_mouse.x, unk_18058Cstr.x_DWORD_1805B0_mouse.y);
			x_BYTE_1806E4 = 0;
			unk_18058Cstr.x_DWORD_18059C &= 0xFC;
			/*LOBYTE(result) = (Bit8u)*/sub_1A7A0_fly_asistant();
			goto LABEL_306;
		case 9:
		case 0xB:
			sub_19AB0();
			/*LOBYTE(result) = (Bit8u)*/sub_1A7A0_fly_asistant();
			goto LABEL_306;
		case 0xA:
		case 0xC:
			sub_1A070(a2, a3);
			/*LOBYTE(result) = (Bit8u)*/sub_1A7A0_fly_asistant();
			goto LABEL_306;
		case 0xD:
		case 0xE:
			sub_19E00();
			goto LABEL_296;
		default:
		LABEL_296:
			/*LOBYTE(result) = (Bit8u)*/sub_1A7A0_fly_asistant();
			goto LABEL_306;
		}
	}
	if (x_BYTE_1806E4)
	{
		//LOBYTE(result) = x_BYTE_1806E4;
		if ((uint8_t)x_BYTE_1806E4 >= 1u)
		{
			if ((uint8_t)x_BYTE_1806E4 <= 1u)
			{
				/*LOBYTE(result) = */sub_18B30();
			}
			else if (x_BYTE_1806E4 == 0x19)
			{
				//LOBYTE(result) = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
				if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
					/*LOBYTE(result) = */sub_18BB0();
			}
		}
		x_BYTE_1806E4 = 0;
	}
LABEL_306:
	if (!(unk_18058Cstr.x_DWORD_18059C & 1))
		x_WORD_180746_mouse_left_button = 0;
	if (!(unk_18058Cstr.x_DWORD_18059C & 2))
		x_WORD_180744_mouse_right_button = 0;
	//return result;
}

//----- (00018AA0) --------------------------------------------------------
void sub_18AA0()//1f9aa0
{
	//int result; // eax
	char v1; // bl
	char v2; // bh

	//result = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
	v1 = 1;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
	{
		x_D41A0_BYTEARRAY_4_struct.byteindex_10 = 0;
	}
	else
	{
		sub_87090();
		if (str_unk_1804B0ar.byte_0xa2)
		{
			//result = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
			x_D41A0_BYTEARRAY_4_struct.byteindex_10 = 1;
		}
		else
		{
			v1 = 0;
			/*result = */sub_19760_set_message("No Help Data", 3u, 50);
		}
	}
	if (v1)
	{
		str_unk_1804B0ar.byte_0xaa = -1;
		v2 = x_D41A0_BYTEARRAY_4_struct.byteindex_10;
		x_D41A0_BYTEARRAY_4_struct.setting_38402 = 1;
		/*result = */sub_19760_set_message((char *)x_DWORD_E9C4C_langindexbuffer[(v2 == 0) + 400], 3u, 50);
		//Help Mode On / Help Mode Off

	}
	//return result;
}

//----- (00018B30) --------------------------------------------------------
void sub_18B30()//1f9b30
{
	//Bit8u* v0; // eax
	uint8_t v1; // dh
	//v0 = &x_D41A0_BYTEARRAY_0[2124 * D41A0_BYTESTR_0.word_0xc];
	if (!(D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 0x20))
	{
		v1 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221;
		if (v1 != 13 && v1 != 14)
		{
			if (v1 < 6u || v1 > 8u && (v1 < 0xBu || v1 > 0xCu))
				sub_191B0(20, 13);
			else
				sub_191B0(20, 14);
			//LOBYTE(v0) = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
			x_D41A0_BYTEARRAY_4_struct.byte_38546 = 1;
		}
		else
		{
			sub_191B0(29, 0);
			/*LOBYTE(v0) = */sub_191B0(27, 0);
		}
	}
	//return v0;
}

//----- (00018BB0) --------------------------------------------------------
void sub_18BB0()//1f9bb0
{
	//int v0; // eax
	//char v1; // dl
	char v2; // cl
	//int v3; // eax
	//int v4; // edx
	//int result; // eax

	//v0 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
	//v1 = x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 ^ 1;
	x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 ^= 1;
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
	{		
		if (D41A0_BYTESTR_0.byte_0x36E0B & 2)//if ( *(0x36E09 + x_D41A0_BYTEARRAY_0 + 2) & 2 )
		{
			x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 &= 0xFEu;
		}
		else
		{
			D41A0_BYTESTR_0.byte_0x36E04 = 0;
			v2 = x_D41A0_BYTEARRAY_4_struct.byteindex_206;
			str_unk_1804B0ar.byte_0xaa = -1;
			if (!v2 && (unk_18058Cstr.x_WORD_1805C2_joystick == 7 || unk_18058Cstr.x_WORD_1805C2_joystick == 1 || unk_18058Cstr.x_WORD_1805C2_joystick == 2))
				sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[x_BYTE_D419E]);
				//sub_8CD27_set_cursor(xy_DWORD_17DED4_spritestr[39]);
			
			sub_41AF0();
			if (!x_D41A0_BYTEARRAY_4_struct.byteindex_206)
				sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[x_BYTE_D419E]);
			sub_52E90(
				&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc],
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221,
				1);
			if (x_BYTE_E3799_sound_card)
				sub_8D8F0_sound_proc3_endsample();
			if (x_BYTE_E37FD)
				sub_8E020_sound_proc14_stopsequence();
			if (x_D41A0_BYTEARRAY_4_struct.byteindex_225)
				x_D41A0_BYTEARRAY_4_struct.byteindex_225 = 2;
		}
	}
	else
	{
		sub_41B60();
		//v3 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
		//v4 = **filearray_2aa18c[0]; //fix it
		x_D41A0_BYTEARRAY_4_struct.byteindex_205 = 0;
		x_D41A0_BYTEARRAY_4_struct.byteindex_206 = 0;
		sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]);
		sub_52E90(
			&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc],
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221,
			1);
		if (x_BYTE_E37FD)
			sub_8E160_sound_proc15_startsequence(D41A0_BYTESTR_0.dword_0x235, 0x7Fu);
		sub_86930(x_WORD_1803EC);
		if (x_D41A0_BYTEARRAY_4_struct.byteindex_225)
			x_D41A0_BYTEARRAY_4_struct.byteindex_225 = 1;
	}
	//LOBYTE(result) = sub_55C00(x_D41A0_BYTEARRAY_4_struct.levelnumber_43);
	x_D41A0_BYTEARRAY_4_struct.byteindex_208 = sub_55C00(x_D41A0_BYTEARRAY_4_struct.levelnumber_43w);
	//return result;
}

//----- (00018DA0) --------------------------------------------------------
char sub_18DA0(type_str_0x6E8E* a1x, char a2, char a3)//1f9da0
{
	type_str_611* v3x; // edx
	signed int v4; // esi
	signed int v5; // eax
	int v6; // eax
	int v7; // ebx
	//int v8; // edi
	//int v9; // edx
	signed int v10; // ebx
	signed int v11; // esi
	signed int v12; // eax
	int v13; // ebx
	//int v14; // edi
	//int v15; // edx
	signed int v16; // ebx

	v3x = &a1x->dword_0xA4_164x->str_611;
	if (a2 == 2)
	{
		v4 = 0;
		if (a3)
			v5 = -1;
		else
			v5 = 1;
		v6 = a1x->dword_0xA4_164x->str_611.word_0x453_1107 + v5;
		while (1)
		{
			if (a3 || v6 < 26)
			{
				if (a3 == 1 && v6 < 0)
					v6 = 25;
			}
			else
			{
				v6 = 0;
			}
			v7 = x_BYTE_D94FF_spell_index[v6];			
			if (v3x->array_0x333_819x.word[v7])
			{
				//v8 = v3 + v7;
				if (v3x->array_0x3B5_949x.byte[v7] == 2)
					break;
			}
			if (a3)
				v10 = -1;
			else
				v10 = 1;
			v4++;
			v6 += v10;
			if (v4 >= 26)
				return v6;
		}
		a1x->dword_0xA4_164x->str_611.byte_0x45B_1115 = v6;
		//v9 = (int)x_D41A0_BYTEARRAY_0;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 = 32;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte1 = v7;
		//LOBYTE(v6) = v3x->array_0x437_1079[v7]; //*(x_BYTE *)(v8 + 468);
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte2 = v3x->array_0x437_1079x.byte[v7]; //*(x_BYTE *)(v8 + 468);
	}
	else
	{
		v11 = 0;
		if (a3)
			v12 = -1;
		else
			v12 = 1;
		v6 = a1x->dword_0xA4_164x->str_611.word_0x451_1105 + v12;
		while (1)
		{
			if (a3 || v6 < 26)
			{
				if (a3 == 1 && v6 < 0)
					v6 = 25;
			}
			else
			{
				v6 = 0;
			}
			v13 = x_BYTE_D94FF_spell_index[v6];
			if (v3x->array_0x333_819x.word[v13])
			{
				//v14 = v3 + v13;
				if (v3x->array_0x3B5_949x.byte[v13] == 1)
					break;
			}
			if (a3)
				v16 = -1;
			else
				v16 = 1;
			v11++;
			v6 += v16;
			if (v11 >= 26)
				return v6;
		}
		a1x->dword_0xA4_164x->str_611.byte_0x45A_1114 = v6;
		//v15 = (int)x_D41A0_BYTEARRAY_0;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 = 31;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte1 = v13;
		//LOBYTE(v6) = *(x_BYTE *)(v14 + 468);//v3x->str_611.array_0x437_1079[v13]
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte2 = v3x->array_0x437_1079x.byte[v13];
	}
	return v6;
}

//----- (00018F80) --------------------------------------------------------
void sub_18F80(type_str_0x6E8E* a1x)//1f9f80
{
	//int v1; // eax
	int v2; // edx
	type_str_0x6E8E* v3x; // eax
	//Bit8u* v4; // eax
	type_str_0x6E8E* v4x; // eax
	int v5; // edx

	if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 1)
		sub_191B0(6, 1);
	if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 2)
		sub_191B0(6, 2);
	if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 4)
		sub_191B0(6, 4);
	if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 8)
		sub_191B0(6, 8);
	//v1 = a1x->dword_0xA4_164;
	v2 = a1x->dword_0xA4_164x->str_611.word_0x451_1105;
	if (v2 == -1)
	{
		unk_18058Cstr.x_DWORD_18059C &= 0xFE;
	}
	else
	{
		v3x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[v2]];
		if (v3x->byte_0x3B_59 == 1)
		{
			if (unk_18058Cstr.x_DWORD_18059C & 1)
			{
				sub_191B0(6, 16);
				unk_18058Cstr.x_DWORD_18059C &= 0xFE;
			}
		}
		else if (unk_18058Cstr.x_DWORD_18059C & 1 || unk_18058Cstr.x_DWORD_18059C & 4 && v3x->word_0x2E_46 > 0)
		{
			sub_191B0(6, 16);
			unk_18058Cstr.x_DWORD_18059C &= 0xFE;
		}
	}
	//v4 = (Bit8u*)a1x->dword_0xA4_164;
	v5 = a1x->dword_0xA4_164x->str_611.word_0x453_1107;
	if (v5 == -1)
	{
		unk_18058Cstr.x_DWORD_18059C &= 0xFD;
	}
	else
	{
		v4x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[v5]];
		if (v4x->byte_0x3B_59 == 1)
		{
			if (unk_18058Cstr.x_DWORD_18059C & 2)
			{
				/*LOBYTE(v4) = */sub_191B0(6, 32);
				unk_18058Cstr.x_DWORD_18059C &= 0xFD;
			}
		}
		else if (unk_18058Cstr.x_DWORD_18059C & 2 || unk_18058Cstr.x_DWORD_18059C & 8 && a1x->dword_0xA4_164x->word_0x26_38[4] > 0)
		{
			/*LOBYTE(v4) = */sub_191B0(6, 32);
			unk_18058Cstr.x_DWORD_18059C &= 0xFD;
		}
	}
	//return v4;
}

//----- (000191B0) --------------------------------------------------------
void sub_191B0(int16_t a1, char a2)//1fa1b0 //set spell, destroy castle sub_191B0(0x2a, 0x00)
{
	//Bit8u* v2; // edx
	//char result; // al
	//Bit8u* v4; // esi
	//int v5; // ecx
	//Bit8u* v6; // ebx
	//int v7; // ecx
	//Bit8u* v8; // ebx
	//int v9; // esi
	type_str_0x6E8E* v10x; // ebx
	//Bit8u* v11; // ebx
	//int v12; // esi
	//Bit8u* v13; // ecx
	//int v14; // esi
	//Bit8u* v15; // esi
	//x_BYTE *v16; // ebx
	//Bit8u* v17; // ebx
	//Bit8u* v18; // ebx

	//v2 = x_D41A0_BYTEARRAY_0;
	//result = a1;
	switch (a1)
	{
	case 0:
	case 1:
	case 2:
	case 26:
		goto LABEL_23;
	case 3:
	case 7:
	case 8:
	case 9:
	case 10:
	case 11:
		return;
	case 4:
		//v4 = &x_D41A0_BYTEARRAY_0[10 * D41A0_BYTESTR_0.word_0xc];
		if (D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 != a1 && D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0)
			return;
		//v5 = (int)x_D41A0_BYTEARRAY_0;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 = a1;
		//result = a2;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte1 |= a2;
		//x_D41A0_BYTEARRAY_0 = x_D41A0_BYTEARRAY_0;
		return;
	case 5:
	case 6:
		//v6 = &x_D41A0_BYTEARRAY_0[10 * D41A0_BYTESTR_0.word_0xc];
		if (D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 != a1 && D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0)
			return;
		//v7 = (int)x_D41A0_BYTEARRAY_0;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 = a1;
		//result = a2;		
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte5 |= a2;
		//x_D41A0_BYTEARRAY_0 = v2;
		return;
	case 12:
	case 13:
	case 14:
	case 16:
	case 18:
	case 19:
	case 29:
	case 42:
	case 44:
		//v15 = &x_D41A0_BYTEARRAY_0[10 * D41A0_BYTESTR_0.word_0xc];
		if (D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 != a1 && D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0)
			return;
	LABEL_23:
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 = a1;
		//x_D41A0_BYTEARRAY_0 = v2;
		return;
	case 15:
		//v8 = &x_D41A0_BYTEARRAY_0[10 * D41A0_BYTESTR_0.word_0xc];
		if (D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 != a1 && D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0)
			return;
		//v9 = D41A0_BYTESTR_0.word_0xc;
		v10x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
		if (v10x->dword_0x8 >= 0 || v10x->byte_0x45_69 != 3)
			return;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 = a1;
		//x_D41A0_BYTEARRAY_0 = v2;
		return;
	case 27:
		//v11 = &x_D41A0_BYTEARRAY_0[10 * D41A0_BYTESTR_0.word_0xc];
		if (D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 != a1 && D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0)
			return;
		//v12 = D41A0_BYTESTR_0.word_0xc;
		if (!(D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 2))
			return;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 = a1;
		//x_D41A0_BYTEARRAY_0 = v2;
		return;
	case 28:
		//v13 = &x_D41A0_BYTEARRAY_0[10 * D41A0_BYTESTR_0.word_0xc];
		if (D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 != a1 && D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0)
			return;
		//v14 = D41A0_BYTESTR_0.word_0xc;
		if (!(D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 4))
			return;
		D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 = a1;
		//x_D41A0_BYTEARRAY_0 = v2;
		return;
	case 30:
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 < 0			
			|| (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157[0] == 99)
			&& D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157[1] == 104
			&& D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157[2] == 114
			&& D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157[3] == 111
			&& D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157[4] == 110
			&& D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157[5] == 105
			&& D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157[6] == 99
			&& D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157[7] == 108
			&& D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157[8] == 101)
		{
			//v17 = &x_D41A0_BYTEARRAY_0[10 * D41A0_BYTESTR_0.word_0xc];
			if (D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 == a1 || !D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0)
				goto LABEL_39;
		}
		return;
	case 39:
		goto LABEL_39;
	default:
		//v18 = &x_D41A0_BYTEARRAY_0[10 * D41A0_BYTESTR_0.word_0xc];
		if (D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 == a1 || !D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0)
		{
		LABEL_39:
			D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0 = a1;
			//result = a2;
			D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte1 = a2;
		}
	//LABEL_40:
		//x_D41A0_BYTEARRAY_0 = v2;
		return;
	}
}

//----- (00019760) --------------------------------------------------------
void sub_19760_set_message(const char *a1, uint8_t a2, int16_t a3)//1fa760
{
	//char *v3; // esi
	//char *v4; // edi
	//char v5; // al
	//char v6; // al
	//int result; // eax

	//v3 = (char*)a1;
	//D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x01c_2BFA_11258
	//v4 = (char*)&x_D41A0_BYTEARRAY_0[2124 * D41A0_BYTESTR_0.word_0xc + 11230 + 28];
	strcpy(D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x01c_2BFA_11258, a1);
	/*do
	{
		v5 = *v3;
		*v4 = *v3;
		if (!v5)
			break;
		v6 = v3[1];
		v3 += 2;
		v4[1] = v6;
		v4 += 2;
	} while (v6);*/
	//result = (int)x_D41A0_BYTEARRAY_0;
	D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x04d_2C2B_11307 = a3;
	D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x04f_2C2D_11309 = a2;
//	return result;
}

//----- (000197F0) --------------------------------------------------------
void sub_197F0()//1fa7f0
{
	int result; // eax
	char v1; // bl
	signed int v2; // ebx
	signed int v3; // edx
	uint8_t v4; // al
	uint8_t v5; // al
	int v6; // [esp+0h] [ebp-10h]
	int v7; // [esp+4h] [ebp-Ch]
	int v8; // [esp+8h] [ebp-8h]
	int v9; // [esp+Ch] [ebp-4h]

	//result = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
	{
		v1 = x_D41A0_BYTEARRAY_4_struct.byteindex_225;
		str_unk_1804B0ar.byte_0xaa = -1;
		if (!v1 && !x_D41A0_BYTEARRAY_4_struct.byte_38591)
		{
			if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221 == 7)
			{
				sub_8CD27_set_cursor(*(*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct));
			}
			else if (unk_18058Cstr.x_WORD_1805C2_joystick == 7 || unk_18058Cstr.x_WORD_1805C2_joystick == 1 || unk_18058Cstr.x_WORD_1805C2_joystick == 2)
			{
				sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[x_BYTE_D419E]);
			}
			if (!x_D41A0_BYTEARRAY_4_struct.byteindex_206)
			{
				sub_2FFE0(&v8, &v9, &v6, &v7);
				if (unk_18058Cstr.x_DWORD_1805B0_mouse.x >= v8 && v8 + v6 > unk_18058Cstr.x_DWORD_1805B0_mouse.x)
				{
					v2 = -1;
					v3 = 0;
					while (v3 < 4 && v2 < 0)
					{
						if (v9 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y && v9 + v7 > unk_18058Cstr.x_DWORD_1805B0_mouse.y)
							v2 = v3;
						v3++;
						v9 += v7;
					}
					if (v2 >= 0)
					{
						if (v2 != 2 || v8 + v6 / 2 > unk_18058Cstr.x_DWORD_1805B0_mouse.x)
						{
							if (v2 > 2)
								v2++;
						}
						else
						{
							v2 = 3;
						}
						str_unk_1804B0ar.byte_0xaa = v2;
						if (unk_18058Cstr.x_DWORD_18059C & 1 || unk_18058Cstr.x_DWORD_18059C & 2)
						{
							switch (v2)
							{
							case 0:
								v4 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221;
								if (v4 < 6u || v4 > 8u)
									sub_191B0(20, 13);
								else
									sub_191B0(20, 14);
								x_D41A0_BYTEARRAY_4_struct.byte_38546 = 3;
								/*return */sub_19A50();
								return;
							case 1:
								if (!x_D41A0_BYTEARRAY_4_struct.byteindex_208)
									break;
								v5 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221;
								if (v5 < 6u || v5 > 8u)
									sub_191B0(20, 13);
								else
									sub_191B0(20, 14);
								x_D41A0_BYTEARRAY_4_struct.byte_38546 = 2;
								/*return */sub_19A50();
								return;
							case 2:
								sub_19CA0_sound_proc5(1u);
								/*return */sub_19A50();
								return;
							case 3:
								sub_19CA0_sound_proc5(2u);
								/*return */sub_19A50();
								return;
							case 4:
								sub_19A70();
								break;
							default:
								break;
							}
						}
					}
				}
			}
			//result = sub_19A50();
			/*return */sub_19A50();			
		}
	}
	//return result;
}

//----- (00019A50) --------------------------------------------------------
void sub_19A50()//1faa50
{
	//int result=0; // rax

	//BYTE1(result) = unk_18058Cstr.x_DWORD_18059C;
	if (unk_18058Cstr.x_DWORD_18059C & 1 || unk_18058Cstr.x_DWORD_18059C & 2)
		unk_18058Cstr.x_DWORD_18059C &= 0xFC;
	//return result;
}

//----- (00019A70) --------------------------------------------------------
void sub_19A70()//1faa70
{
	uint8_t v0; // al
	//char result; // al

	v0 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221;
	if (v0 < 6u || v0 > 8u)
		/*result = */sub_191B0(20, 9);
	else
		/*result = */sub_191B0(20, 11);
	//return result;
}

//----- (00019AB0) --------------------------------------------------------
void sub_19AB0()//1faab0
{
	int v0; // eax
	signed int v1; // ebx
	int v2; // edx
	signed int v3; // eax

	if (unk_18058Cstr.x_WORD_1805C2_joystick == 7 || unk_18058Cstr.x_WORD_1805C2_joystick == 1 || unk_18058Cstr.x_WORD_1805C2_joystick == 2)
		sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[x_BYTE_D419E]); //fix it
	if (x_BYTE_1806E4 == 1)
	{
		sub_18B30();
		x_BYTE_1806E4 = 0;
		/*return */sub_19A50();
		return;
	}
	if (!(unk_18058Cstr.x_DWORD_18059C & 1) && !(unk_18058Cstr.x_DWORD_18059C & 2) && x_BYTE_1806E4 != 0x1c && x_BYTE_1806E4 != 0x20)
	{
		/*return */sub_19A50();
		return;
	}
	v0 = (640 - x_D41A0_BYTEARRAY_4_struct.byteindex_186) / 2 + (x_D41A0_BYTEARRAY_4_struct.byteindex_186 - 82) / 2;
	if (v0 <= unk_18058Cstr.x_DWORD_1805B0_mouse.x && v0 + 82 > unk_18058Cstr.x_DWORD_1805B0_mouse.x && unk_18058Cstr.x_DWORD_1805B0_mouse.y >= 377 && unk_18058Cstr.x_DWORD_1805B0_mouse.y < 395
		|| x_BYTE_1806E4 == 0x1c
		|| x_BYTE_1806E4 == 0x20)
	{
		x_D41A0_BYTEARRAY_4_struct.byteindex_225 = 0;
		if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221 == 9)
			sub_191B0(20, 0);
		else
			sub_191B0(20, 6);
		sub_8CD27_set_cursor(*(*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct));
		x_BYTE_1806E4 = 0;
		/*return */sub_19A50();
		return;
	}
	v1 = 0;
	v2 = (640 - x_D41A0_BYTEARRAY_4_struct.byteindex_186) / 2;
	v3 = 67;
	do
	{
		if (v2 <= unk_18058Cstr.x_DWORD_1805B0_mouse.x
			&& v2 + x_D41A0_BYTEARRAY_4_struct.byteindex_186 > unk_18058Cstr.x_DWORD_1805B0_mouse.x
			&& v3 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y
			&& v3 + 18 > unk_18058Cstr.x_DWORD_1805B0_mouse.y)
		{
			sub_1A970_change_game_settings(v1 + 1, (unk_18058Cstr.x_DWORD_18059C & 1) == 0, 1);
			sub_1A280();
			/*return */sub_19A50();
			return;
		}
		v1++;
		v3 += 18;
	} while (v1 < 17);
	/*return */sub_19A50();
	return;
}

//----- (00019CA0) --------------------------------------------------------
void sub_19CA0_sound_proc5(uint8_t a1)//1faca0
{
	int16_t v1; // ST00_2
	//int v2; // edx
	//int v3; // eax
	uint8_t v4; // al

	if (a1== 1u)
	{		
		if (x_BYTE_E3798_sound_active2)
		{
			x_D41A0_BYTEARRAY_4_struct.byte_38591 = a1;
			x_BYTE_E3799_sound_card = 1;
		}
	}
	else if (a1 == 2 && x_BYTE_E37FC_music)
	{
		x_D41A0_BYTEARRAY_4_struct.byte_38591 = 2;
		v1 = D41A0_BYTESTR_0.dword_0x235;
		x_BYTE_E37FD = 1;
		sub_8E160_sound_proc15_startsequence(v1, 0x7Fu);
	}
	//v2 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
	if (x_D41A0_BYTEARRAY_4_struct.byte_38591)
	{
		//v3 = (int)x_D41A0_BYTEARRAY_0;
		D41A0_BYTESTR_0.byte_0x36E04 = 0;
		x_D41A0_BYTEARRAY_4_struct.setting_38402 = 1;
		v4 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221;
		if (v4 < 6u || v4 > 8u)
			sub_191B0(20, 10);
		else
			sub_191B0(20, 12);
	}
}

//----- (00019D60) --------------------------------------------------------
void sub_19D60(signed int a1/*, type_str_0x2BDE* a2x*/)//1fad60
{
	uint8_t v2; // dl
	int v4; // [esp+0h] [ebp-10h]
	int v5; // [esp+4h] [ebp-Ch]
	int v6; // [esp+8h] [ebp-8h]
	int v7; // [esp+Ch] [ebp-4h]

	int a2;

	v2 = x_D41A0_BYTEARRAY_4_struct.byte_38591;
	if (v2 == 1u)
	{
		a1 = 127;
		a2 = x_D41A0_BYTEARRAY_4_struct.wordindex_6;
	}
	else if (v2 == 2u)
	{
		a1 = 127;
		a2 = x_D41A0_BYTEARRAY_4_struct.wordindex_8;
	}
	sub_2FFE0(&v7, &v6, &v5, &v4);
	/*return */sub_5BDC0_set_mouse_position((unsigned int)(a2 * (v5 - 12) / a1) + 5 + v7, 9 * v4 / 2 + v6);
}

//----- (00019E00) --------------------------------------------------------
void sub_19E00()//1fae00
{
	char v0; // bl
	char v1; // bh
	//int v2; // eax
	uint8_t v3; // dl
	//char v5; // [esp+0h] [ebp-Ah]
	int v6; // [esp+80h] [ebp+76h]
	int v7; // [esp+84h] [ebp+7Ah]
	char v8; // [esp+88h] [ebp+7Eh]

	v0 = 0;
	v8 = 0;
	v1 = 0;
	/*LOBYTE(v2) = (unsigned int)*/sub_30BE0(&v7, &v6);
	if (x_BYTE_1806E4)
	{
		//LOBYTE(v2) = x_BYTE_1806E4;
		if ((uint8_t)x_BYTE_1806E4 >= 1u)
		{
			if ((uint8_t)x_BYTE_1806E4 <= 1u)
			{
				v8 = 1;
			}
			else if (x_BYTE_1806E4 == 0x1c)
			{
				v0 = 1;
			}
		}
		x_BYTE_1806E4 = 0;
	}
	else if (unk_18058Cstr.x_DWORD_18059C & 1 || unk_18058Cstr.x_DWORD_18059C & 2)
	{
		if (v7 > unk_18058Cstr.x_DWORD_1805B0_mouse.x || v7 + 50 <= unk_18058Cstr.x_DWORD_1805B0_mouse.x || v6 > unk_18058Cstr.x_DWORD_1805B0_mouse.y || v6 + 32 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y)
		{
			if (v7 + 50 <= unk_18058Cstr.x_DWORD_1805B0_mouse.x && v7 + 100 > unk_18058Cstr.x_DWORD_1805B0_mouse.x && v6 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y && v6 + 32 > unk_18058Cstr.x_DWORD_1805B0_mouse.y)
				v8 = 1;
		}
		else
		{
			v0 = 1;
		}
		/*LOBYTE(v2) = */sub_19A50();
	}
	if (!v0)
		goto LABEL_37;
	//LOBYTE(v2) = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
	v3 = x_D41A0_BYTEARRAY_4_struct.byte_38546;
	if (v3 >= 2u)
	{
		if (v3 > 2u)
		{
			if (v3 == 3)
			{
				if (sub_55080(0, x_D41A0_BYTEARRAY_4_struct.levelnumber_43w,(char*)""))
					sprintf(printbuffer, "%s:%s.", x_DWORD_E9C4C_langindexbuffer[424], "OK");//Save Level
				else
					sprintf(printbuffer, "%s:%s.", x_DWORD_E9C4C_langindexbuffer[424], x_DWORD_E9C4C_langindexbuffer[429]);//429 - Failed
				sub_52D70(0, printbuffer);
				///*LOBYTE(v2) = */sub_55C00(x_D41A0_BYTEARRAY_4_struct.levelnumber_43);
				v1 = 1;
				x_D41A0_BYTEARRAY_4_struct.byteindex_208 = sub_55C00(x_D41A0_BYTEARRAY_4_struct.levelnumber_43w);
			}
			goto LABEL_38;
		}
		if (x_D41A0_BYTEARRAY_4_struct.byteindex_208)
		{
			if (sub_555D0(0, x_D41A0_BYTEARRAY_4_struct.levelnumber_43w))
				sprintf(printbuffer, "%s:%s.", x_DWORD_E9C4C_langindexbuffer[423], "OK");//Load Level
			else
				sprintf(printbuffer, "%s:%s.", x_DWORD_E9C4C_langindexbuffer[423], x_DWORD_E9C4C_langindexbuffer[429]);//429 - Failed
			/*LOBYTE(v2) = */sub_52D70(0, printbuffer);
		}
	LABEL_37:
		v1 = 1;
		goto LABEL_38;
	}
	if (v3 == 1)
		/*LOBYTE(v2) = */sub_18B30();
LABEL_38:
	if (v0 || v8)
	{
		//v2 = x_D41A0_BYTEARRAY_4[0];
		x_D41A0_BYTEARRAY_4_struct.byte_38546 = 0;
		if (v1)
			/*LOBYTE(v2) = */sub_191B0(20, x_D41A0_BYTEARRAY_4_struct.byte_38544);
	}
	//return v2;
}

//----- (0001A030) --------------------------------------------------------
void sub_1A030()//1fb030
{
	int v1; // [esp+0h] [ebp-8h]
	int v2; // [esp+4h] [ebp-4h]

	sub_30BE0(&v2, &v1);
	/*return */sub_5BDC0_set_mouse_position(v2 + 87, v1 + 24);
}

//----- (0001A070) --------------------------------------------------------
void sub_1A070(signed int a1, int16_t a2)//1fb070
{
	uint8_t v2; // al
	int v3; // eax
	int v4; // edx
	int v5; // esi
	int v6; // ebx
	int v7; // eax
	int v8; // ett
	int v9; // ebx
	uint8_t v10; // dl
	//int v11; // eax
	int v12; // [esp+0h] [ebp-10h]
	int v13; // [esp+4h] [ebp-Ch]
	int v14; // [esp+8h] [ebp-8h]
	int v15; // [esp+Ch] [ebp-4h]

	if (unk_18058Cstr.x_WORD_1805C2_joystick == 7 || unk_18058Cstr.x_WORD_1805C2_joystick == 1 || unk_18058Cstr.x_WORD_1805C2_joystick == 2)
		sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[x_BYTE_D419E]); //fixit
	sub_2FFE0(&v15, &v14, &v13, &v12);
	v2 = x_D41A0_BYTEARRAY_4_struct.byte_38591;
	if (v2 >= 1u)
	{
		if (v2 <= 1u)
		{
			v3 = v13;
			v4 = v13;
		}
		else
		{
			if (v2 != 2)
				goto LABEL_12;
			v4 = 3 * v13;
			v3 = 3 * v13;
		}
		a1 = 127;
		a2 = (v3 - (__CFSHL__(v4 >> 31, 2) + 4 * (v4 >> 31))) >> 2;
	}
LABEL_12:
	if (unk_18058Cstr.x_DWORD_18059C & 1 || unk_18058Cstr.x_DWORD_18059C & 2 || unk_18058Cstr.x_DWORD_18059C & 4 || unk_18058Cstr.x_DWORD_18059C & 8 || x_BYTE_180664[0x2f] || x_BYTE_180664[0x32])
	{
		v5 = v13 - 12;
		v6 = unk_18058Cstr.x_DWORD_1805B0_mouse.x - (v15 + 4);
		if (v6 < 0)
			v6 = 0;
		if (v6 > v5)
			v6 = v13 - 12;
		v8 = a1 * v6;
		v7 = a1 * v6 / v5;
		v9 = a1 * v6 / v5;
		if (v8 / v5 < 0)
			v9 ^= v7;
		if (v9 > 127)
			v9 = 127;
		v10 = x_D41A0_BYTEARRAY_4_struct.byte_38591;
		if (v10 >= 1u)
		{
			if (v10 <= 1u)
			{
				sub_6E450_distance_sound(
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240,
					D41A0_BYTESTR_0.word_0xc,
					8);
				sub_6E150();
				if (x_D41A0_BYTEARRAY_4_struct.wordindex_6 != v9)
				{
					x_D41A0_BYTEARRAY_4_struct.wordindex_6 = v9;
					sub_8E470_sound_proc17_volume((int16_t)v9);
				}
			}
			else if (v10 == 2 && x_D41A0_BYTEARRAY_4_struct.wordindex_8 != v9)
			{
				x_D41A0_BYTEARRAY_4_struct.wordindex_8 = v9;
				sub_8E410_sound_proc16_xmidivolume(v9);
			}
		}
		sub_19A50();
	}
	else
	{
		//v11 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
		x_D41A0_BYTEARRAY_4_struct.byte_38591 = x_BYTE_180664[0x2f];
		sub_191B0(20, x_D41A0_BYTEARRAY_4_struct.byte_38544);
		sub_8CD27_set_cursor(*(*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct));//fix it
		sub_5BDC0_set_mouse_position(v15 + a2, v14 + 5 * v12 / 2);
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
		{
			sub_8D8F0_sound_proc3_endsample();
			sub_8E020_sound_proc14_stopsequence();
		}
	}
}

//----- (0001A280) --------------------------------------------------------
void sub_1A280()//1fb280
{
	//int v0; // edx
	//Bit8u* v1; // ebx
	//char v2; // cl
	//char v3; // ch
	//char v4; // cl
	//char v5; // ch
	//int result; // eax

	//v0 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
	//v1 = x_D41A0_BYTEARRAY_0;
	x_D41A0_BYTEARRAY_4_struct.dwordindex_192 = 0;
	//v2 = x_D41A0_BYTEARRAY_4_struct.byteindex_192 | 1;
	x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x01;//help
	if (x_BYTE_E3798_sound_active2)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= /*v2 |*/ 0x02;//sound
	if (x_BYTE_E37FC_music)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x04;//music
	if (x_BYTE_E2A28_speek)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x08;//speek
	x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0xF0u;//fly,bright,speed,screen size
	if (D41A0_BYTESTR_0.str_0x21AA.creflections_0x21AA)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x100;//reflections
	if (D41A0_BYTESTR_0.str_0x21AA.cshadows_0x21AB)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x400;//shadows
	if (D41A0_BYTESTR_0.str_0x21AA.csky_0x21AC)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x200;//sky
	if (D41A0_BYTESTR_0.str_0x21B6.clights_0x21B6)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x800;//lights
	//v3 = x_D41A0_BYTEARRAY_4_struct.byteindex_193 | 0x10;
	x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x1000;//icons
	if (D41A0_BYTESTR_0.str_0x21B6.ctransparency_0x21B8)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x2000;//transparency
	if (D41A0_BYTESTR_0.str_0x21B6.cflat_0x21B9)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x4000;//flat
	if (D41A0_BYTESTR_0.str_0x21B2.cresolution_0x21B4)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x8000;//resolution
	x_D41A0_BYTEARRAY_4_struct.dwordindex_192 |= 0x10000;//names
	//v4 = x_D41A0_BYTEARRAY_4_struct.byteindex_10;
	x_D41A0_BYTEARRAY_4_struct.dwordindex_188 = 0;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x01;//help
	if (x_BYTE_E3799_sound_card)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x02;//sound
	if (x_BYTE_E37FD)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x04;//music
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x40)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x08;//speek
	if (D41A0_BYTESTR_0.byte_0x36DEA_fly_asistant)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x10u;//fly
	//v5 = x_D41A0_BYTEARRAY_4_struct.dwordindex_188 | 0x20;
	x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x20;//bright
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_178)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= /*v5 |*/ 0x40;//speed
	x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x80u;//screen size
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.reflections_0x218A)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x100;//reflections
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.shadows_0x218B)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x400;//shadows
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.sky_0x218C)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x200;//sky
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.lights_0x2196)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x800;//lights
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.minimap_0x218E)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x1000;//icons
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.transparency_0x2198)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x2000;//transparency
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.flat_0x2199)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x4000;//flat
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2192.resolution_0x2194)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x8000;//resolution
	//result = v0;
	if (!x_D41A0_BYTEARRAY_4_struct.byteindex_207)
		x_D41A0_BYTEARRAY_4_struct.dwordindex_188 |= 0x10000;//names
	//x_D41A0_BYTEARRAY_0 = v1;
	//x_D41A0_BYTEARRAY_4_struct.dwordindex_0 = v0;
	//return result;
}

//----- (0001A4A0) --------------------------------------------------------
int sub_1A4A0()//1fb4a0
{
	int v0; // ebx
	signed int i; // esi
	unsigned int v2; // kr04_4
	unsigned int v3; // kr08_4
	int v5; // [esp+0h] [ebp-8h]
	int v6; // [esp+4h] [ebp-4h]

	v0 = 0;
	for (i = 0; i < 17; i++)
	{
		sub_1A5B0_getLangStrings(i + 1, &v6, &v5);
		v2 = strlen((const char *)x_DWORD_E9C4C_langindexbuffer[v6]) + 1;
		//Help Mode On and etc.
		if ((signed int)(8 * (v2 - 1)) > v0)
			v0 = 8 * (v2 - 1);
		v3 = strlen((const char *)x_DWORD_E9C4C_langindexbuffer[v5]) + 1;
		//Help Mode Off and etc.
		if ((signed int)(8 * (v3 - 1)) > v0)
			v0 = 8 * (v3 - 1);
	}
	return 6 * ((v0 - 11) / 6 + 1) + 16;
}

//----- (0001A5B0) --------------------------------------------------------
int sub_1A5B0_getLangStrings(int a1, int *a2, int *a3)//1fb5b0
{
	int result; // eax

	// FIXME: types
	// result = (int)a2;
	switch (a1)
	{
	case 1:
		*a2 = 400;//Help Mode On
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 2:
		*a2 = 390;//Sound On
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 3:
		*a2 = 392;//Music On
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 4:
		*a2 = 469;//Speech On
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 5:
		*a2 = 398;//Flight Assistance On
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 6:
		*a2 = 7;//Brightness correction
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 7:
		*a2 = 382;//speed fast
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 8:
		*a2 = 13;//Alter screen size
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 9:
		*a2 = 359;//Reflections On
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 10:
		*a2 = 363;//Sky On
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 11:
		*a2 = 357;//Stereo Mode On
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 12:
		*a2 = 395;//Light Sources On
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 13:
		*a2 = 365;//Icons and Map On
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 14:
		*a2 = 441;//Panel Transparency Off
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 15:
		*a2 = 442;//Flat Shading On
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			goto LABEL_23;
		}
		goto LABEL_23;
	case 16:
		*a2 = 468;//Change screen resolution
		switch (a1)
		{
		case 6:
		case 16:
			goto LABEL_20;
		case 7:
			goto LABEL_21;
		case 14:
			goto LABEL_22;
		default:
			break;
		}
	LABEL_23:
		result = *a2 + 1;
		*a3 = result;
		return result;
	case 17:
		*a2 = 402;//Player Names On
		break;
	default:
		break;
	}
	switch (a1)
	{
	case 6:
	case 16:
	LABEL_20:
		result = *a2;
		*a3 = *a2;
		break;
	case 7:
	LABEL_21:
		*a3 = 381;//speed normal
		break;
	case 14:
	LABEL_22:
		result = *a2 - 1;
		*a3 = result;
		break;
	default:
		goto LABEL_23;
	}
	return result;
}


int debugcounter_1fb7a0 = 0;
//----- (0001A7A0) --------------------------------------------------------
void sub_1A7A0_fly_asistant()//1fb7a0 // fly asistant
{
	//Bit8u* result; // eax
	//int v1; // ebx
	char v2; // cl
	//Bit8u* v3; // edx
	//int16_t v4; // dx
	//int v5; // eax

#ifdef FIX_MOUSE
	if (debugafterload)
	{
		unk_18058Cstr.x_DWORD_18059C = 0;
		x_WORD_18074C_mouse_left2_button = 0;
		if (debugcounter_1fb7a0<1000) {
			unk_18058Cstr.x_DWORD_1805B8_mouse_position_x = 0x128;
			unk_18058Cstr.x_DWORD_1805BC_mouse_position_y = 0x7e;
		}
		debugcounter_1fb7a0++;
	}
#endif FIX_MOUSE

#ifdef FIX_FLYASISTANT
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
		return;
#endif FIX_FLYASISTANT

	//result = x_D41A0_BYTEARRAY_0;
	if (D41A0_BYTESTR_0.byte_0x36DEA_fly_asistant)
	{
		//v1 = D41A0_BYTESTR_0.word_0xc;
		v2 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221;
		if (v2 != 5 && v2 != 8 && v2 != 3 && !x_D41A0_BYTEARRAY_4_struct.byteindex_225)
		{
			if (D41A0_BYTESTR_0.word_0x36DEC_mousex != unk_18058Cstr.x_DWORD_1805B8_mouse_position_x
				|| D41A0_BYTESTR_0.word_0x36DEE_mousey != unk_18058Cstr.x_DWORD_1805BC_mouse_position_y
				|| D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte0
				|| D41A0_BYTESTR_0.array_0x6E3E[D41A0_BYTESTR_0.word_0xc].str_0x6E3E_byte5)
			{
				;// v5 = (int)x_D41A0_BYTEARRAY_0;
			}
			else
			{
				//v4 = *(x_WORD *)(0x36DEC + x_D41A0_BYTEARRAY_0 + 4) + 1;
				D41A0_BYTESTR_0.word_0x36DF0_mousexx++;// = v4;
				if (D41A0_BYTESTR_0.word_0x36DF0_mousexx <= 0x30)
				{
					D41A0_BYTESTR_0.word_0x36DEC_mousex = unk_18058Cstr.x_DWORD_1805B8_mouse_position_x;
					D41A0_BYTESTR_0.word_0x36DEE_mousey = unk_18058Cstr.x_DWORD_1805BC_mouse_position_y;
					return;// result;
				}
				sub_191B0(39, 0);
				//v5 = (int)x_D41A0_BYTEARRAY_0;
			}
			D41A0_BYTESTR_0.word_0x36DF0_mousexx = 0;
			D41A0_BYTESTR_0.word_0x36DEC_mousex = unk_18058Cstr.x_DWORD_1805B8_mouse_position_x;
			D41A0_BYTESTR_0.word_0x36DEE_mousey = unk_18058Cstr.x_DWORD_1805BC_mouse_position_y;
		}
	}
	//return result;
}

//----- (0001A8A0) --------------------------------------------------------
void sub_1A8A0()//1fb8a0
{
	//char v0; // dh
	//int result; // eax
	//char v2; // bh
	//char v3; // cl

	if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 4)
	{
		if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 8)
		{
			//v0 = x_D41A0_BYTEARRAY_4_struct.byteindex_183;
			if (!(x_D41A0_BYTEARRAY_4_struct.byteindex_183 & 1) && !(x_D41A0_BYTEARRAY_4_struct.byteindex_183 & 2))
				sub_191B0(6, 128);
		}
	}
	//result = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
	//v2 = x_D41A0_BYTEARRAY_4_struct.byteindex_183 & 0xFC;
	//v3 = unk_18058Cstr.x_WORD_1805C0_arrow_keys;
	x_D41A0_BYTEARRAY_4_struct.byteindex_183 &= 0xFC;
	if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 4)
		x_D41A0_BYTEARRAY_4_struct.byteindex_183 |= 1;
	if (unk_18058Cstr.x_WORD_1805C0_arrow_keys & 8)
	{
		//result = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
		x_D41A0_BYTEARRAY_4_struct.byteindex_183 |= 2;
	}
	//return result;
}

//----- (0001A970) --------------------------------------------------------
void sub_1A970_change_game_settings(char a1, int a2, int a3)//1fb970
{
	//int v3; // edx
	//char v4; // cl
	//char result; // al
	//char v6; // cl
	//bool v7; // zf
	//int v8; // eax
	//char v9; // cl
	//char v10; // bl
	//char v11; // ch
	//bool v12; // al
	type_str_0x6E8E* v13x; // ebx
	uint8_t v14; // al
	int16_t v15; // ST04_2
	//char v16; // dl
	uint8_t v17; // bl
	//char v18; // bl
	//char v19; // cl
	//char v20; // bl
	//int v21; // ebx
	//char v22; // cl
	//int v23; // ebx
	//char v24; // cl
	//bool v25; // dl
	//int v26; // ebx
	//char v27; // ch
	//char v28; // cl

	//v3 = a2;
	switch (a1)
	{
	case 1:
		sub_18AA0();
		return;
	case 2:
		if (!x_BYTE_E3798_sound_active2)
			return;
		sub_19760_set_message((char *)x_DWORD_E9C4C_langindexbuffer[(x_BYTE_E3799_sound_card != 0) + 390], 3u, 50);
		//Sound On / Sound Off

		sub_8D8F0_sound_proc3_endsample();
		sub_86860_speak_Sound(x_WORD_1803EC);
		x_BYTE_E3799_sound_card ^= 1u;
		return;
	case 3:
		if (!x_BYTE_E37FC_music)
			return;
		if (x_BYTE_E37FD)
		{
			sub_8E020_sound_proc14_stopsequence();
			sub_19760_set_message((char *)x_DWORD_E9C4C_langindexbuffer[393], 3u, 50);//Music Off
			x_BYTE_E37FD = 0;
		}
		else
		{
			v15 = D41A0_BYTESTR_0.dword_0x235;
			x_BYTE_E37FD = 1;
			sub_8E160_sound_proc15_startsequence(v15, 0x7Fu);
			sub_19760_set_message(x_DWORD_E9C4C_langindexbuffer[392], 3u, 50);//Music On
		}
		return;
	case 4:
		if (!x_BYTE_E2A28_speek)
			return;
		//v16 = x_D41A0_BYTEARRAY_4_struct.setting_byte3_24;
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x40)
			x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 &= 0xBF;
		else
			x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 |= 0x40;
		sub_19760_set_message(x_DWORD_E9C4C_langindexbuffer[((x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x40) == 0) + 469], 3u, 50);
		//	Speech On /	Speech Off
		return;
	case 5:
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
		{
			D41A0_BYTESTR_0.byte_0x36DEA_fly_asistant = 0;
		}
		else
		{
			//v12 = D41A0_BYTESTR_0.byte_0x36DEA_fly_asistant == 0;
			D41A0_BYTESTR_0.byte_0x36DEA_fly_asistant = !D41A0_BYTESTR_0.byte_0x36DEA_fly_asistant;
			sub_19760_set_message(x_DWORD_E9C4C_langindexbuffer[!D41A0_BYTESTR_0.byte_0x36DEA_fly_asistant + 398], 3u, 50);
			// Flight Assistance On / Flight Assistance Off

		}
		return;
	case 6:
		if (x_D41A0_BYTEARRAY_4_struct.byteindex_51 < 3u || x_D41A0_BYTEARRAY_4_struct.byteindex_180)
			return;
		x_D41A0_BYTEARRAY_4_struct.setting_38402 = 1;
		v17 = D41A0_BYTESTR_0.str_2FECE.byte_level_type;
		if (v17 < 1u)
		{
			if (!v17)//v17==0
			{
				if (a2)
				{
					//v3 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
					//v19 = x_D41A0_BYTEARRAY_4[0xB] - 1;
					x_D41A0_BYTEARRAY_4_struct.byte_brightness_11--;// = v19;
					if (x_D41A0_BYTEARRAY_4_struct.byte_brightness_11 >= 0)
						goto LABEL_86;
					if (!a3)
					{
						x_D41A0_BYTEARRAY_4_struct.byte_brightness_11 = 4;
						goto LABEL_86;
					}
				}
				else
				{
					//v3 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
					//v18 = x_D41A0_BYTEARRAY_4[0xB] + 1;
					x_D41A0_BYTEARRAY_4_struct.byte_brightness_11++;// = v18;
					if (x_D41A0_BYTEARRAY_4_struct.byte_brightness_11 <= 4)
						goto LABEL_86;
					if (a3)
					{
						x_D41A0_BYTEARRAY_4_struct.byte_brightness_11 = 4;
						goto LABEL_86;
					}
				}
				x_D41A0_BYTEARRAY_4_struct.byte_brightness_11 = 0;
			}
		LABEL_86:
			sub_47650(a3/*, a2*/);
			return;
		}
		if (v17 > 1u)
		{
			if (v17 != 2)
				goto LABEL_86;
			if (a2)//v17==1
			{
				//v23 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
				//v24 = x_D41A0_BYTEARRAY_4[0xD] - 1;
				x_D41A0_BYTEARRAY_4_struct.byte_brightness_13--;// = v24;
				if (x_D41A0_BYTEARRAY_4_struct.byte_brightness_13 < 0)
				{
					if (!a3)
					{
						x_D41A0_BYTEARRAY_4_struct.byte_brightness_13 = 4;
						sub_47650(0/*, a2*/);
						return;
					}
					goto LABEL_85;
				}
			}
			else
			{
				//v23 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
				//v3 = (uint8_t)(x_D41A0_BYTEARRAY_4[0xD] + 1);
				x_D41A0_BYTEARRAY_4_struct.byte_brightness_13++;// = v3;
				if (x_D41A0_BYTEARRAY_4_struct.byte_brightness_13 > 4)
				{
					if (a3)
					{
						x_D41A0_BYTEARRAY_4_struct.byte_brightness_13 = 4;
						sub_47650(a3/*, x_D41A0_BYTEARRAY_4_struct.byte_brightness_13*/);
						return;
					}
				LABEL_85:
					x_D41A0_BYTEARRAY_4_struct.byte_brightness_13 = 0;
					goto LABEL_86;
				}
			}
			goto LABEL_86;
		}
		if (a2)//v17==2
		{
			//v21 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
			//v22 = D41A0_BYTESTR_0.word_0xc - 1;
			(x_D41A0_BYTEARRAY_4_struct.byte_brightness_12) --;
			if (x_D41A0_BYTEARRAY_4_struct.byte_brightness_12 >= 0)
				goto LABEL_86;
			if (a3)
			{
				x_D41A0_BYTEARRAY_4_struct.byte_brightness_12 = 0;
				sub_47650(a3/*, a2*/);
			}
			else
			{
				x_D41A0_BYTEARRAY_4_struct.byte_brightness_12 = 4;
				sub_47650(0/*, a2*/);
			}
			//result = 0;
		}
		else
		{
			//v3 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
			//v20 = D41A0_BYTESTR_0.word_0xc + 1;
			(x_D41A0_BYTEARRAY_4_struct.byte_brightness_12)++;// = v20;
			if (x_D41A0_BYTEARRAY_4_struct.byte_brightness_12 <= 4)
				goto LABEL_86;
			if (a3)
			{
				x_D41A0_BYTEARRAY_4_struct.byte_brightness_12 = 4;
				sub_47650(a3/*, D41A0_BYTESTR_0.word_0xc*/);
			}
			else
			{
				x_D41A0_BYTEARRAY_4_struct.byte_brightness_12 = 0;
				sub_47650(0/*, D41A0_BYTESTR_0.word_0xc*/);
			}
			//result = 0;
		}
		return;// result;
	case 7:
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
			return;
		v13x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
		if (v13x <= x_DWORD_EA3E4[0] || v13x->dword_0x8 < 0)
			return;
		if (x_D41A0_BYTEARRAY_4_struct.byteindex_178)
			x_D41A0_BYTEARRAY_4_struct.byteindex_178 = 0;
		else
			x_D41A0_BYTEARRAY_4_struct.byteindex_178 = (a2 != 0) + 1;
		v14 = x_D41A0_BYTEARRAY_4_struct.byteindex_178;
		if (v14 < 1u)
		{
			if (v14)
				return;
			sub_19760_set_message((char *)x_DWORD_E9C4C_langindexbuffer[381], 3u, 50);//speed normal
			//result = 0;
		}
		else
		{
			if (v14 <= 1u)
			{
				sub_19760_set_message((char *)x_DWORD_E9C4C_langindexbuffer[382], 3u, 50);//speed fast
			}
			else
			{
				if (v14 != 2)
					return;
				sub_19760_set_message((char *)x_DWORD_E9C4C_langindexbuffer[383], 3u, 50);//speed super fast
			}
			v13x->dword_0xA4_164x->word_0x155_341 = 0;
			v13x->dword_0xA4_164x->word_0x157_343 = 0;
			//result = 0;
		}
		return;// result;
	case 8:
		//v26 = (int)x_D41A0_BYTEARRAY_0;
		if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190)
			return;
		if (a2)
		{
			//v27 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 8589) + 1;
			D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D++;
			if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D <= 40)
				goto LABEL_97;
			if (!a3)
			{
				D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D = 16;
				goto LABEL_97;
			}
		}
		else
		{
			//v28 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 8589) - 1;
			D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D--;
			if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D >= 16)
				goto LABEL_97;
			if (a3)
			{
				D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D = 16;
				goto LABEL_97;
			}
		}
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D = 40;
	LABEL_97:
		sub_2CA90(D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D);
		return;
	case 9:
		if (!D41A0_BYTESTR_0.str_0x21AA.creflections_0x21AA)
			return;
		//v4 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 8586) ^ 1;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.reflections_0x218A ^= 1;
		sub_19760_set_message(x_DWORD_E9C4C_langindexbuffer[D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.reflections_0x218A + 359], 3u, 50);
		//	Reflections On / Reflections Off
		return;
	case 10:
		if (!D41A0_BYTESTR_0.str_0x21AA.csky_0x21AC || !off_D41A8_sky)
			return;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.sky_0x218C ^= 1u;
		sub_19760_set_message(x_DWORD_E9C4C_langindexbuffer[D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.sky_0x218C + 363], 3u, 50);
		// Sky On / Sky Off
		return;
	case 11:
		if (!D41A0_BYTESTR_0.str_0x21AA.cshadows_0x21AB)
			return;
		//v6 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 8587) ^ 1;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.shadows_0x218B ^= 1;
		sub_19760_set_message(x_DWORD_E9C4C_langindexbuffer[D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.shadows_0x218B + 357], 3u, 50);
		// Shadows On / Shadows Off
		return;
	case 12:		
		if (!D41A0_BYTESTR_0.str_0x21B6.clights_0x21B6)
			return;
		//v7 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 8598) == 1;
			D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.lights_0x2196 ^= 1;
		sub_19760_set_message(x_DWORD_E9C4C_langindexbuffer[D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.lights_0x2196 + 395], 3u, 50);
		//Light Sources On / Light Sources Off
		return;
	case 13:
		//v8 = (int)x_D41A0_BYTEARRAY_0;
		//v9 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 8591) ^ 1;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.minimap_0x218E ^= 1;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.topbar_0x218F ^= 1;
		sub_19760_set_message(x_DWORD_E9C4C_langindexbuffer[D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.minimap_0x218E + 365], 3u, 50);
		// Icons and Map On / Icons and Map Off
		if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.minimap_0x218E)
			return;
		sub_87C10();
		return;
	case 14:		
		if (!D41A0_BYTESTR_0.str_0x21B6.ctransparency_0x21B8)
			return;
		//v10 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 8600) ^ 1;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.transparency_0x2198 ^= 1;
		sub_19760_set_message(x_DWORD_E9C4C_langindexbuffer[D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.transparency_0x2198 + 440], 3u, 50);
		// Panel Transparency On / Panel Transparency Off
		return;
	case 15:
		if (!D41A0_BYTESTR_0.str_0x21B6.cflat_0x21B9)
			return;
		//v11 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 8601) ^ 1;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.flat_0x2199 ^= 1;
		sub_19760_set_message(x_DWORD_E9C4C_langindexbuffer[D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.flat_0x2199 + 442], 3u, 50);
		// Flat Shading On / Flat Shading Off
		return;
	#ifdef ALT_RESOLUTION
		case 16://change resolution
			if (!D41A0_BYTESTR_0.str_0x21B2.cresolution_0x21B4 || D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190)
				return;
			sub_41BC0();
			sub_46B40_alt();
			return;
	#else
		case 16://change resolution
			if (!D41A0_BYTESTR_0.str_0x21B2.cresolution_0x21B4 || D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190)
				return;
			sub_41BC0();
			sub_46B40();
			return;
	#endif
	case 17:
		//v25 = x_D41A0_BYTEARRAY_4_struct.byteindex_207 == 0;
		x_D41A0_BYTEARRAY_4_struct.byteindex_207 ^= 1;
		sub_19760_set_message(x_DWORD_E9C4C_langindexbuffer[x_D41A0_BYTEARRAY_4_struct.byteindex_207 + 402], 3u, 50);
		// Player Names On / Player Names Off
		return;
	case 18:
		//v7 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 8592) == 1;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 ^= 1;
		if (!D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190)
		{
			sub_417A0_install_pal_and_mouse_minmax();
			return;
		}
		sub_417D0_install_pal_and_mouse_minmax2();
		return;
	default:
		return;
	}
}


void sub_loc_1B2E6();
void sub_loc_1B2F7(Bit8u* a2);
void sub_loc_1B316(Bit8u a1);
void sub_loc_1B334(Bit8u* a2);
void sub_loc_1B352(Bit8u* a2);
void sub_loc_1B36C();
void sub_loc_1B37D(Bit8u* a2);
void sub_loc_1B398(Bit8u* a2);
void sub_loc_1B3C9(Bit8u* a1);
void sub_loc_1B413();
void sub_loc_1B424(Bit16u a1, Bit8u* a2);
void sub_loc_1B450();
void sub_loc_1B461(Bit16u a1, Bit8u* a2);
void sub_loc_1B4A0(Bit16u a1, Bit8u* a2);
void sub_loc_1B4DF(Bit16u a1, Bit8u* a2);
void sub_loc_1B51E(Bit8u* a2);
void sub_loc_1B54A(Bit16u a1, Bit8u* a2);
void sub_loc_1B589();
void sub_loc_1B5A7();
void sub_loc_1B5BC(Bit16u a1);
void sub_loc_1B5CB();
//void sub_loc_1B5D7();

//----- (0001B280) --------------------------------------------------------
void sub_1B280_run_intro_events(Bit8u* a1)//1fc280
{
	int v1; // eax
	Bit8u* v2; // edx
	Bit8u v3; // dl

	while (1)
	{
		v1 = 7 * x_WORD_D4004;//2a5004
		v2 = a1 + v1;
		if (x_WORD_17DB60 != *(Bit16u*)v2)
			break;
		v1 = *(Bit16u*)&v2[3];
		if (v1 == -1)
			break;
		v3 = v2[2] - 0x41;
		if (v3 <= 0x39u)
		{
			/*v3 &= 0xff; //v3
			ecx+=v1
			v3 += v1*/
			switch (v3 * 4) {
			case 0x00:
				sub_loc_1B2E6();
				break;
			case 0x04:
				sub_loc_1B2F7(a1);
				break;
			case 0x08:
				sub_loc_1B5CB();
				break;
			case 0x0c:
				sub_loc_1B51E(a1);
				break;
			case 0x10:
				sub_loc_1B316(v1);
				break;
			case 0x14:
				sub_loc_1B461(v1, a1);
				break;
			case 0x18:
				sub_loc_1B5CB();
				break;
			case 0x1c:
				sub_loc_1B5CB();
				break;
			case 0x20:
				sub_loc_1B5CB();
				break;
			case 0x24:
				sub_loc_1B5CB();
				break;
			case 0x28:
				sub_loc_1B36C();
				break;
			case 0x2c:
				sub_loc_1B334(a1);
				break;
			case 0x30:
				sub_loc_1B352(a1);
				break;
			case 0x34:
				sub_loc_1B5CB();
				break;
			case 0x38:
				sub_loc_1B4DF(v1, a1);
				break;
			case 0x3c:
				sub_loc_1B4A0(v1, a1);
				break;
			case 0x40:
				sub_loc_1B37D(a1);
				break;
			case 0x44:
				sub_loc_1B398(a1);
				break;
			case 0x48:
				sub_loc_1B3C9(a1);
				break;
			case 0x4c:
				sub_loc_1B424(v1, a1);
				break;
			case 0x50:
				sub_loc_1B5BC(v1);
				break;
			case 0x54:
				sub_loc_1B589();
				break;
			case 0x58:
				sub_loc_1B36C();
				break;
			case 0x5c:
				sub_loc_1B450();
				break;
			case 0x60:
				sub_loc_1B5A7();
				break;
			case 0x64:
				sub_loc_1B352(a1);
				break;
			case 0x68:
				sub_loc_1B5CB();
				break;
			case 0x6c:
				sub_loc_1B5CB();
				break;
			case 0x70:
				sub_loc_1B5CB();
				break;
			case 0x74:
				sub_loc_1B5CB();
				break;
			case 0x78:
				sub_loc_1B5CB();
				break;
			case 0x7c:
				sub_loc_1B5CB();
				break;
			case 0x80:
				sub_loc_1B2E6();
				break;
			case 0x84:
				sub_loc_1B2F7(a1);
				break;
			case 0x88:
				sub_loc_1B5CB();
				break;
			case 0x8c:
				sub_loc_1B51E(a1);
				break;
			case 0x90:
				sub_loc_1B316(v1);
				break;
			case 0x94:
				sub_loc_1B461(v1, a1);
				break;
			case 0x98:
				sub_loc_1B5CB();
				break;
			case 0x9c:
				sub_loc_1B54A(v1, a1);
				break;
			case 0xa0:
				sub_loc_1B5CB();
				break;
			case 0xa4:
				sub_loc_1B5CB();
				break;
			case 0xa8:
				sub_loc_1B5CB();
				break;
			case 0xac:
				sub_loc_1B334(a1);
				break;
			case 0xb0:
				sub_loc_1B352(a1);
				break;
			case 0xb4:
				sub_loc_1B5CB();
				break;
			case 0xb8:
				sub_loc_1B4DF(v1, a1);
				break;
			case 0xbc:
				sub_loc_1B4A0(v1, a1);
				break;
			case 0xc0:
				sub_loc_1B5CB();
				break;
			case 0xc4:
				sub_loc_1B398(a1);
				break;
			case 0xc8:
				sub_loc_1B3C9(a1);
				break;
			case 0xcc:
				sub_loc_1B424(v1, a1);
				break;
			case 0xd0:
				sub_loc_1B5CB();
				break;
			case 0xd4:
				sub_loc_1B5CB();
				break;
			case 0xd8:
				sub_loc_1B5CB();
				break;
			case 0xdc:
				sub_loc_1B450();
				break;
			case 0xe0:
				sub_loc_1B5CB();
				break;
			case 0xe4:
				sub_loc_1B352(a1);
				break;
			default:
				exit(0);
			}
			//JUMPOUT(__CS__, (int*) *(&off_1B190 + v3));
		}
		x_WORD_D4004++;
		//if(v3==0)break;
	}
	//return result;
}

//int tempedx, tempeax,tempebx;
//eax=d4004*7
//edx=esi+d4004*7
//dl=[edx+2] - +2
//eax=tempebx +3
//void sub_loc_1B289() {}
void sub_loc_1B2E6() {//1fc2e6
	//x_DWORD_E3844, eax
	x_DWORD_E3844 = 0;
	//x_WORD_D4004++;
}
void sub_loc_1B2F7(Bit8u* a2) {//1fc2f7
	sub_8E020_sound_proc14_stopsequence();
	sub_8EAD0_load_music(*(Bit32u*)(a2 + x_WORD_D4004 * 7 + 3));
	//x_WORD_D4004++;
}
void sub_loc_1B316(Bit8u a1) {//1fc316
	sub_8D8F0_sound_proc3_endsample();
	sub_84300_load_sound(a1);
	//x_WORD_D4004++;
}
void sub_loc_1B334(Bit8u* a2) {//1fc334
	if (x_DWORD_E387C)sub_loc_1B352(a2);
	else
	{
		sub_8F0AB((FILE*)x_DWORD_E3840, *(Bit32u*)(a2 + x_WORD_D4004 * 7 + 2), *(Bit32u*)(a2 + x_WORD_D4004 * 7 + 3));
	}
}
void sub_loc_1B352(Bit8u* a2) {//1fc352
	sub_8E160_sound_proc15_startsequence(*(Bit32u*)(a2 + x_WORD_D4004 * 7 + 3), 0x7f);
	//x_WORD_D4004++;
}
void sub_loc_1B36C() {//1fc36c
	sub_2EC30_clear_img_mem();
	//x_WORD_D4004++;
}
void sub_loc_1B37D(Bit8u* a2) {//1fc37d // intro text
	sub_2EBB0_draw_text_with_border_630x340(x_DWORD_E9C4C_langindexbuffer[*(Bit32u*)(a2 + x_WORD_D4004 * 7 + 2)]);
	//x_WORD_D4004++;
}
void sub_loc_1B398(Bit8u* a2) {//1fc398
	if (x_BYTE_E3798_sound_active2)sub_loc_1B5CB();
	sub_8F100_sound_proc19(0, *(Bit32u*)(a2 + x_WORD_D4004 * 7 + 3), 0x7f, 0x40, 0x64, 0xFFFFFFFF, 2);
	//x_WORD_D4004++;
}
void sub_loc_1B3C9(Bit8u* a1) {//1fc3c9
	if (x_BYTE_E3798_sound_active2)sub_loc_1B5CB();
	Bit8u* v1 = a1 + x_WORD_D4004 * 7 + 3;
	if (*(Bit32u*)v1 == 0)sub_loc_1B413();//tempesi = 2b27cc
	sub_8F100_sound_proc19(0, *(Bit32u*)v1, 0x7f, 0x40, 0x64, 0, 2);
	//x_WORD_D4004++;
}
void sub_loc_1B413() {//1fc413
	sub_8D8F0_sound_proc3_endsample();
	//x_WORD_D4004++;
}
void sub_loc_1B424(Bit16u a1, Bit8u* a2) {//1fc424
	if (x_BYTE_E3798_sound_active2 == 0)sub_loc_1B5BC(a1);
	if (*(Bit32u*)(a2 + x_WORD_D4004 * 7 + 3))sub_loc_1B413();
	sub_8F420_sound_proc20(0, *(Bit32u*)(a2 + x_WORD_D4004 * 7 + 3));
	//x_WORD_D4004++;
}
void sub_loc_1B450() {//1fc450
	sub_8E020_sound_proc14_stopsequence();
	//x_WORD_D4004++;
}
void sub_loc_1B461(Bit16u a1, Bit8u* a2) {//1fc461
	if (x_BYTE_E3798_sound_active2 == 0)sub_loc_1B5BC(a1);
	sub_8F710_sound_proc21(0, *(Bit32u*)(a2 + x_WORD_D4004 * 7 + 3), 0, 4, 0x64/*, 1, 2*/);
}
void sub_loc_1B4A0(Bit16u a1, Bit8u* a2) {//1fc4a0
	if (x_BYTE_E3798_sound_active2 == 0)sub_loc_1B5BC(a1);
	sub_8F710_sound_proc21(0, *(Bit32u*)(a2 + x_WORD_D4004 * 7 + 3), 50, 2, 0);
}
void sub_loc_1B4DF(Bit16u a1, Bit8u* a2) {//1fc4df
	if (x_BYTE_E3798_sound_active2 == 0)sub_loc_1B5BC(a1);
	sub_8F710_sound_proc21(0, *(Bit32u*)(a2 + x_WORD_D4004 * 7 + 3), 0x7f, 2, 0);
}
void sub_loc_1B51E(Bit8u* a1) {//1fc51e
	sub_8E160_sound_proc15_startsequence(*(Bit32u*)(a1 + x_WORD_D4004 * 7 + 3), 0x64/*, tempedx * 7*/);
}
void sub_loc_1B54A(Bit16u a1, Bit8u* a2) {//1fc54a
	if (x_BYTE_E3798_sound_active2 == 0)sub_loc_1B5BC(a1);
	sub_8F100_sound_proc19(0, *(Bit32u*)(a2 + x_WORD_D4004 * 7 + 3), 0, 0x40, 0x64, 0xFFFFFFFF, 2);
}
void sub_loc_1B589() {//1fc589
	if (x_BYTE_D41C0 == 0)sub_loc_1B5CB();
	else
	{
		sub_2EB60();//maybe must fix
		//x_WORD_D4004++;
	}
}
void sub_loc_1B5A7() {//1fc5a7
	sub_2EC60();
	//x_WORD_D4004++;
}
void sub_loc_1B5BC(Bit16u a1) {//1fc5bc
	//memset(x_DWORD_180628b_screen_buffer, 200, 320*200);//debug
	//Set_basic_pallette();
	if ((a1 != 1) && (a1 != 0xe))//fixed write pause text
		sub_2EBB0_draw_text_with_border_630x340(x_DWORD_E9C4C_langindexbuffer[a1]);//fix it - edx
}
void sub_loc_1B5CB() {//1fc5cb
	//x_WORD_D4004++;
}
//void sub_loc_1B5D7() {}


//----- (0001B5F0) --------------------------------------------------------
int sub_1B5F0()//1fc5f0
{
	uint16_t v0; // ax
	type_str_0x6E8E* jx; // edx
	//int16_t v2; // bx
	type_str_0x6E8E* ix; // edx
	//int16_t v4; // bx

	v0 = 0;
	do
	{
		if (v0 < 0xAu)
			goto LABEL_16;
		if (v0 <= 0xAu)
			goto LABEL_12;
		if (v0 != 27)
		{
		LABEL_16:
			for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[(int16_t)v0]; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
			{
				//v4 = *(x_WORD *)(2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0 + 11240);
				ix->dword_0x8 = -1;
				ix->word_0x24_36 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240;
			}
		}
		else
		{
			for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[108/4]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
			{
				//v2 = *(x_WORD *)(2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0 + 11240);
				jx->byte_0x45_69 = 221;
				jx->word_0x24_36 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240;
			}
		}
	LABEL_12:
		v0++;
	} while ((int16_t)v0 < 29);
	return 0;
}

//----- (0001B6B0) --------------------------------------------------------
void sub_1B6B0(type_str_0x6E8E* a1x)//1fc6b0
{
	type_str_0x6E8E* v1x; // esi
	axis_3d* v2x; // esi
	int v3; // esi
	int v4; // edi
	int16_t v5; // ax

	v1x = x_DWORD_EA3E4[a1x->word_0x32_50];
	if (v1x->byte_0x3F_63 != 5)
		sub_57F10(a1x);
	if (a1x->byte_0x39_57)
	{
		a1x->word_0x1C_28 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
		a1x->word_0x1E_30 = sub_58210_radix_tan(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
		v2x = &v1x->array_0x4C_76;
		x_WORD_EB398ar = *v2x;
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, -a1x->word_0x36_54);
		sub_57CF0(a1x, &x_WORD_EB398ar);
		if (a1x->str_0x5E_94.word_0x62_98)
		{
			v3 = a1x->str_0x5E_94.dword_0x5E_94;
			v4 = a1x->dword_0x8;
			v5 = a1x->str_0x5E_94.word_0x62_98;
			a1x->str_0x5E_94.word_0x62_98 = 0;
			a1x->word_0x26_38 = v5;
			a1x->dword_0x8 = v4 - v3;
		}
		else
		{
			a1x->word_0x26_38 = 0;
		}
	}
	else if (!(a1x->byte_0x3E_62 & 3))
	{
		sub_57CF0(a1x, &v1x->array_0x4C_76);
		a1x->word_0x1C_28 = v1x->word_0x1C_28;
	}
}

//----- (0001B7A0) --------------------------------------------------------
int sub_1B7A0_tile_compare(axis_3d* a1)//1fc7a0
{
	Bit8u v1x[2]; // eax
	//Bit8u v2x[2]; // dx
	//Bit8u v3x[2]; // bx
	uint8_t v4_00; // cl
	uint8_t v4_01; // cl
	uint8_t v4_10; // cl
	uint8_t v4_11; // cl

	//Bit8u v5x[2]; // bx
	//int v6; // esi
	//int v7; // ebx
	int v8; // ecx
	int v9; // ebx

	v1x[0] = a1->x >> 8;
	v1x[1] = a1->y >> 8;

	v4_00 = x_BYTE_11B4E0_height[*(Bit16u*)v1x];//0000
	v1x[0]++;
	v4_10 = x_BYTE_11B4E0_height[*(Bit16u*)v1x];//+100
	v1x[1]++;
	v4_11 = x_BYTE_11B4E0_height[*(Bit16u*)v1x];//+1+1
	v1x[0]--;
	v4_01 = x_BYTE_11B4E0_height[*(Bit16u*)v1x];//00+1

	//v7 = v4_00 + v4_10 - v4_01;
	v8 = abs(v4_00 + v4_01 - v4_10 - v4_11);
	v9 = abs(v4_00 + v4_10 - v4_01 - v4_11);
	if (v8 > v9)
		v9 = v8;
	return v9;
}

//----- (0001B830) --------------------------------------------------------
int sub_1B830(axis_3d* a1)//1fc830
{
	uint16_t v1; // ax
	uint16_t v2; // dx
	uint16_t v3; // bx
	uint8_t v4; // cl
	uint16_t v5; // bx
	int v6; // esi
	int v7; // ebx
	int v8; // ecx
	int v9; // ebx

	LOBYTE(v1) = (a1->x >> 8) - 1;
	HIBYTE(v1) = (a1->y >> 8) - 1;
	v2 = v1;
	LOBYTE(v1) = v1 + 2;
	v3 = v1;
	HIBYTE(v1) += 2;
	v4 = x_BYTE_11B4E0_height[v3];
	v5 = v1;
	LOBYTE(v2) = x_BYTE_11B4E0_height[v2];
	LOBYTE(v1) = v1 - 2;
	HIBYTE(v2) = x_BYTE_11B4E0_height[v5];
	v6 = x_BYTE_11B4E0_height[v1];
	v7 = (uint8_t)v2 + v4 - v6;
	v8 = abs((uint8_t)v2 + v6 - v4 - HIBYTE(v2));
	v9 = abs(v7 - HIBYTE(v2));
	if (v8 > v9)
		v9 = v8;
	return v9;
}

int debugcount_1fc8c0 = 0;

//----- (0001B8C0) --------------------------------------------------------
signed int sub_1B8C0(type_str_0x6E8E* a1x)//1fc8c0
{
	//char v1; // ah
	//char v2; // dl
	signed int result; // eax
	//int16_t *v4; // eax
	int16_t v5; // ST10_2
	int v6; // ST0C_4
	int v7; // ST08_4
	int16_t v8; // ax
	int16_t v9; // ax
	//int v10; // esi
	int16_t v11; // ax
	char v12; // ch
	int16_t v13; // ax
	//int16_t *v14; // eax
	int16_t v15; // ST10_2
	int v16; // ST0C_4
	int v17; // ST08_4
	int16_t v18; // ax
	//int v19; // esi
	int16_t v20; // ax
	int16_t v21; // ax
	//int16_t *v22; // eax
	int16_t v23; // ST10_2
	int v24; // ST0C_4
	int v25; // ST08_4
	int16_t v26; // ax
	//int v27; // esi
	int16_t v28; // ax
	//int16_t *v29; // eax
	int16_t v30; // ST10_2
	int v31; // ST0C_4
	int v32; // ST08_4
	int16_t v33; // ax
	//int v34; // esi
	int16_t v35; // ax
	//int v36; // ebx
	int16_t v37; // [esp+0h] [ebp-4h]

	//v1 = a1x->struct_byte_0xc_12_15.byte[1];
	if (a1x->struct_byte_0xc_12_15.byte[1] & 8)
	{
		//v2 = a1x->struct_byte_0xc_12_15.byte[1] & 0xF7;
		result = 4;
		a1x->struct_byte_0xc_12_15.byte[1] &= 0xF7;
	}
	else if (a1x->byte_0x40_64 == 27)
	{
		result = (uint8_t)sub_2AF10(a1x, 1);
	}
	else
	{
		x_WORD_EB398ar = a1x->array_0x4C_76;
		//v4 = *(int16_t **)(a1x->dword_0xA0_160);
		v5 = a1x->dword_0xA0_160x->word_160_0xe_14;
		v6 = a1x->dword_0xA0_160x->word_160_0xa_10;
		v7 = a1x->dword_0xA0_160x->word_160_0xc_12;
		v8 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
		sub_580E0(&x_WORD_EB398ar, v8, v7, v6, v5);
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
		if (a1x->array_0x4C_76.x >> 8 != x_WORD_EB398ar.x >> 8 || a1x->array_0x4C_76.y >> 8 != x_WORD_EB398ar.y >> 8)
		{
			//adress 1fc9e4
			if (sub_102D0(a1x, &x_WORD_EB398ar, 1)
				|| sub_1B7A0_tile_compare(&x_WORD_EB398ar) >= a1x->dword_0xA0_160x->word_160_0x10_16)
			{
				a1x->struct_byte_0xc_12_15.byte[2] |= 4u;
				v13 = a1x->word_0x1C_28;
				v37 = v13;
				v13 += 341;
				v13 &= 0x7ffu;
				a1x->word_0x1C_28 = v13;//je z a1+28
				x_WORD_EB398ar = a1x->array_0x4C_76;
				//v14 = *(int16_t **)(a1x->dword_0xA0_160);
				v15 = a1x->dword_0xA0_160x->word_160_0xe_14;
				v16 = a1x->dword_0xA0_160x->word_160_0xa_10;
				v17 = a1x->dword_0xA0_160x->word_160_0xc_12;
				v18 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
				sub_580E0(&x_WORD_EB398ar, v18, v17, v16, v15);
				sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
				if (sub_102D0(a1x, &x_WORD_EB398ar, 1)
					|| sub_1B7A0_tile_compare(&x_WORD_EB398ar) >= a1x->dword_0xA0_160x->word_160_0x10_16)
				{
					LOBYTE(v21) = v37 - 85;
					HIBYTE(v21) = ((uint16_t)(v37 - 341) >> 8) & 7;
					a1x->word_0x1C_28 = v21;
					x_WORD_EB398ar = a1x->array_0x4C_76;
					//v22 = *(int16_t **)(a1x->dword_0xA0_160);
					v23 = a1x->dword_0xA0_160x->word_160_0xe_14;
					v24 = a1x->dword_0xA0_160x->word_160_0xa_10;
					v25 = a1x->dword_0xA0_160x->word_160_0xc_12;
					v26 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
					sub_580E0(&x_WORD_EB398ar, v26, v25, v24, v23);
					sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
					if (sub_102D0(a1x, &x_WORD_EB398ar, 1)
						|| sub_1B7A0_tile_compare(&x_WORD_EB398ar) >= a1x->dword_0xA0_160x->word_160_0x10_16)
					{
						a1x->word_0x1C_28 = (v37 + 0x400)&0x700+ (Bit8u)v37;
						x_WORD_EB398ar = a1x->array_0x4C_76;
						//v29 = (short*)a1x->dword_0xA0_160;
						v30 = a1x->dword_0xA0_160x->word_160_0xe_14;
						v31 = a1x->dword_0xA0_160x->word_160_0xa_10;
						v32 = a1x->dword_0xA0_160x->word_160_0xc_12;
						v33 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
						sub_580E0(&x_WORD_EB398ar, v33, v32, v31, v30);
						sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
						if (sub_102D0(a1x, &x_WORD_EB398ar, 1)
							|| sub_1B7A0_tile_compare(&x_WORD_EB398ar) >= a1x->dword_0xA0_160x->word_160_0x10_16)
						{
							if (a1x->dword_0xA0_160x->byte_160_0x20_32 & 1 || sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 1)
								a1x->dword_0x8 = -1;
							if (a1x->dword_0x8 == -1)
							{								
								//v36 = *(x_DWORD *)(0x364D1 + x_D41A0_BYTEARRAY_0 + 1);
								if (D41A0_BYTESTR_0.str_0x364D2.dword_0x364D2)
									D41A0_BYTESTR_0.str_0x364D2.dword_0x364D2--;
							}
							result = 4;
						}
						else
						{
							sub_57CF0(a1x, &x_WORD_EB398ar);
							v35 = a1x->word_0x1C_28
								+ sub_58350(
									a1x->word_0x1C_28,
									a1x->word_0x20_32,
									a1x->dword_0xA0_160x->word_160_0x4_4,
									a1x->dword_0xA0_160x->word_160_0x2_2);
							v35 &= 0x7ffu;
							a1x->word_0x1C_28 = v35;
							result = 3;
						}
					}
					else
					{
						sub_57CF0(a1x, &x_WORD_EB398ar);
						v28 = a1x->word_0x1C_28
							+ sub_58350(
								a1x->word_0x1C_28,
								a1x->word_0x20_32,
								a1x->dword_0xA0_160x->word_160_0x4_4,
								a1x->dword_0xA0_160x->word_160_0x2_2);
						v28 &= 0x7ffu;
						a1x->word_0x1C_28 = v28;
						result = 3;
					}
				}
				else
				{
					sub_57CF0(a1x, &x_WORD_EB398ar);
					v20 = a1x->word_0x1C_28
						+ sub_58350(
							a1x->word_0x1C_28,
							a1x->word_0x20_32,
							a1x->dword_0xA0_160x->word_160_0x4_4,
							a1x->dword_0xA0_160x->word_160_0x2_2);
					v20 &= 0x7ffu;
					a1x->word_0x1C_28 = v20;
					result = 3;
				}
			}
			else
			{
				sub_57CF0(a1x, &x_WORD_EB398ar);
				v11 = a1x->word_0x1C_28
					+ sub_58350(
						a1x->word_0x1C_28,
						a1x->word_0x20_32,
						a1x->dword_0xA0_160x->word_160_0x4_4,
						a1x->dword_0xA0_160x->word_160_0x2_2);
				v11 &= 0x7ffu;
				v12 = a1x->struct_byte_0xc_12_15.byte[2] & 0xFB;
				a1x->word_0x1C_28 = v11;
				result = 2;
				a1x->struct_byte_0xc_12_15.byte[2] = v12;
			}
		}
		else
		{
			sub_57CF0(a1x, &x_WORD_EB398ar);
			v9 = a1x->word_0x1C_28
				+ sub_58350(
					a1x->word_0x1C_28,
					a1x->word_0x20_32,
					a1x->dword_0xA0_160x->word_160_0x4_4,
					a1x->dword_0xA0_160x->word_160_0x2_2);
			v9 &= 0x7ffu;
			a1x->struct_byte_0xc_12_15.byte[2] &= 0xFBu;
			a1x->word_0x1C_28 = v9;
			result = 1;
		}
	}
	return result;
}

//----- (0001BD90) --------------------------------------------------------
int sub_1BD90(type_str_0x6E8E* a1x, char a2)//1fcd90
{
	unsigned int v2; // esi
	int16_t v3; // ax
	int i; // eax
	int v5; // edx
	type_str_0x6E8E* v6x; // eax
	char v7; // al
	//int v8; // esi
	type_str_0x6E8E* jx; // esi
	int v10; // eax
	unsigned int v11; // edi
	signed int v12; // ST08_4
	int16_t v13; // ax
	unsigned int v15; // [esp+4h] [ebp-Ch]
	unsigned int v16; // [esp+8h] [ebp-8h]
	type_str_0x6E8E* v17x; // [esp+Ch] [ebp-4h]

	v2 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v3 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v2 = 1;
		a1x->word_0x26_38 = v3;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v6x->word_0x34_52)
		{
			v6x = x_DWORD_EA3E4[i];
			if (v6x == x_DWORD_EA3E4[0])
				break;
			v5 = v6x->dword_0x8;
			if (v5 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v5;
				v2 = 1;
				a1x->word_0x26_38 = v6x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v2 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if (v2 >= 1)
	{
		if (v2 <= 1)
		{
			a1x->word_0x96_150 = a1x->word_0x26_38;
			if (a1x->dword_0xA0_160x->byte_160_0x20_32 & 8)
				v7 = a2 + 6;
			else
				v7 = a2 + 2;
		}
		else
		{
			if (v2 != 2)
				return sub_1EEE0(a1x);
			v7 = a2 + 4;
		}
		goto LABEL_35;
	}
	if (!v2)
	{
		//v8 = a1x->dword_0xA0_160;
		if (!(a1x->dword_0xA0_160x->byte_160_0x20_32 & 4) && !(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
		{
			v16 = -1;
			v15 = a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28;
			v17x = 0;
			for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
			{
				if (!jx->word_0x32_50 && jx != a1x)
				{
					v10 = (int16_t)(jx->array_0x4C_76.x - a1x->array_0x4C_76.x);
					v11 = (int16_t)(jx->array_0x4C_76.y - a1x->array_0x4C_76.y)
						* (int16_t)(jx->array_0x4C_76.y - a1x->array_0x4C_76.y)
						+ v10 * v10;
					if (v11 <= v15)
					{
						v12 = a1x->dword_0xA0_160x->word_160_0x1e_30;
						v13 = sub_581E0_maybe_tan2(&jx->array_0x4C_76, &a1x->array_0x4C_76);
						if ((uint16_t)sub_582B0(a1x->word_0x1C_28, v13) < v12 && v11 < v16)
						{
							v17x = jx;
							v16 = v11;
						}
					}
				}
			}
			if (v17x)
			{
				a1x->word_0x32_50 = v17x-D41A0_BYTESTR_0.struct_0x6E8E;
				v7 = a2 + 3;
			LABEL_35:
				a1x->byte_0x45_69 = v7;
				return sub_1EEE0(a1x);
			}
		}
	}
	return sub_1EEE0(a1x);
}

//----- (0001BF90) --------------------------------------------------------
void sub_1BF90(type_str_0x6E8E* a1x, char a2)//1fcf90
{
	unsigned int v2; // esi
	int16_t v3; // ax
	int i; // eax
	int v5; // edx
	type_str_0x6E8E* v6x; // eax
	char v7; // al
	char v8; // al
	uint16_t v9; // ax
	char v10; // cl
	int v11; // eax
	type_str_0x6E8E* v12x; // esi
	int v13; // eax
	unsigned int v14; // edi
	signed int v15; // ST0C_4
	int16_t v16; // ax
	//int v17; // eax
	type_str_0x6E8E* jx; // esi
	int v19; // eax
	unsigned int v20; // edi
	signed int v21; // ST0C_4
	int16_t v22; // ax
	unsigned int v23; // [esp+0h] [ebp-1Ch]
	type_str_0x6E8E* v24x; // [esp+8h] [ebp-14h]
	type_str_0x6E8E* v25x; // [esp+Ch] [ebp-10h]
	unsigned int v26; // [esp+10h] [ebp-Ch]
	unsigned int v27; // [esp+14h] [ebp-8h]
	unsigned int v28; // [esp+18h] [ebp-4h]

	v2 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v3 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v2 = 1;
		a1x->word_0x26_38 = v3;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v6x->word_0x34_52)
		{
			v6x = x_DWORD_EA3E4[i];
			if (v6x == x_DWORD_EA3E4[0])
				break;
			v5 = v6x->dword_0x8;
			if (v5 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v5;
				v2 = 1;
				a1x->word_0x26_38 = v6x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v2 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if (v2 < 1)
	{
		if (!v2)
		{
			sub_1B8C0(a1x);
			if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
			{
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v9 = a1x->word_0x14_20;
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				a1x->word_0x20_32 += ((a1x->word_0x14_20 & 0xFF) + 85) * (2 * ((signed int)(v9 % 0x9Du) / 79) - 1);
				v10 = a1x->byte_0x39_57;
				a1x->word_0x20_32 &= 0x7ff;
				if (v10)
				{
					v11 = a1x->dword_0xA0_160x->word_160_0x1c_28;
					v23 = -1;
					v24x = 0;
					v12x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
					v27 = v11 * v11;
					while (v12x > x_DWORD_EA3E4[0])
					{
						v13 = (int16_t)(v12x->array_0x4C_76.x - a1x->array_0x4C_76.x);
						v14 = (int16_t)(v12x->array_0x4C_76.y - a1x->array_0x4C_76.y)
							* (int16_t)(v12x->array_0x4C_76.y - a1x->array_0x4C_76.y)
							+ v13 * v13;
						if (v14 <= v27 && !(v12x->struct_byte_0xc_12_15.byte[0] & 0x20))
						{
							v15 = a1x->dword_0xA0_160x->word_160_0x1e_30;
							v16 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v12x->array_0x4C_76);
							if ((uint16_t)sub_582B0(a1x->word_0x1C_28, v16) < v15 && v14 < v23)
							{
								v24x = v12x;
								v23 = v14;
							}
						}
						v12x = v12x->next_0;
					}
					if (v24x)
					{
						a1x->word_0x96_150 = v24x - D41A0_BYTESTR_0.struct_0x6E8E;
						if (a1x->dword_0xA0_160x->byte_160_0x20_32 & 8)
							a1x->byte_0x45_69 = a2 + 6;
						else
							a1x->byte_0x45_69 = a2 + 2;
					}
					else
					{
						//v17 = a1x->dword_0xA0_160;
						if (!(a1x->dword_0xA0_160x->byte_160_0x20_32 & 4))
						{
							v28 = -1;
							v26 = a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28;
							v25x = 0;
							for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
							{
								if (!jx->word_0x32_50 && jx != a1x)
								{
									v19 = (int16_t)(jx->array_0x4C_76.x - a1x->array_0x4C_76.x);
									v20 = (int16_t)(jx->array_0x4C_76.y - a1x->array_0x4C_76.y)
										* (int16_t)(jx->array_0x4C_76.y - a1x->array_0x4C_76.y)
										+ v19 * v19;
									if (v20 <= v26)
									{
										v21 = a1x->dword_0xA0_160x->word_160_0x1e_30;
										v22 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &jx->array_0x4C_76);
										if ((uint16_t)sub_582B0(a1x->word_0x1C_28, v22) < v21 && v20 < v28)
										{
											v25x = jx;
											v28 = v20;
										}
									}
								}
							}
							if (v25x)
							{
								a1x->word_0x32_50 = v25x - D41A0_BYTESTR_0.struct_0x6E8E;
								v7 = a2 + 3;
								goto LABEL_49;
							}
						}
					}
				}
			}
		}
	}
	else
	{
		if (v2 > 1)
		{
			if (v2 != 2)
				return;
			v7 = a2 + 4;
		LABEL_49:
			a1x->byte_0x45_69 = v7;
			return;
		}
		a1x->word_0x96_150 = a1x->word_0x26_38;
		if (a1x->dword_0xA0_160x->byte_160_0x20_32 & 8)
			v8 = a2 + 6;
		else
			v8 = a2 + 2;
		a1x->byte_0x45_69 = v8;
		sub_1EEE0(a1x);
	}
}

//----- (0001C310) --------------------------------------------------------
signed int sub_1C310(type_str_0x6E8E* a1x, char a2, uint16_t(*a3)(type_str_0x6E8E*, type_str_0x6E8E*))//1fd310
{
	signed int v3; // edi
	unsigned int v4; // eax
	int16_t v5; // ax
	int i; // edx
	int v7; // edx
	type_str_0x6E8E* v8x; // ecx
	type_str_0x6E8E* v10x; // eax
	type_str_0x6E8E* v11x; // esi
	int16_t v12; // ax
	//int v13; // edx
	type_str_0x6E8E* jx; // ecx
	//int v15; // ecx
	unsigned int v16; // ST0C_4

	v3 = 0;
	v4 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		v5 = a1x->str_0x5E_94.word_0x62_98;
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		a1x->word_0x26_38 = v5;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v4 = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v8x->word_0x34_52)
		{
			v8x = x_DWORD_EA3E4[i];
			if (v8x == x_DWORD_EA3E4[0])
				break;
			v7 = v8x->dword_0x8;
			if (v7 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v7;
				a1x->word_0x26_38 = v8x->word_0x26_38;
				v4 = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		v4 = 2;
	}
	if (v4 < 1)
	{
		if (!v4)
		{
			sub_1B8C0(a1x);
			v10x = sub_1ED30(a1x, x_DWORD_EA3E4[a1x->word_0x96_150]);
			v11x = v10x;
			if (v10x == x_DWORD_EA3E4[0] || v10x->dword_0x8 < 0 || v10x->struct_byte_0xc_12_15.byte[1] & 4)
			{
				a1x->byte_0x45_69 = a2 + 1;
				return 0;
			}
			if (!(a1x->byte_0x3E_62 & 3))
			{
				v12 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v10x->array_0x4C_76);
				//v13 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
				a1x->word_0x20_32 = v12;
				for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
				{
					if (jx->word_0x1A_26 != a1x->word_0x1A_26
						&& abs(a1x->array_0x4C_76.x - jx->array_0x4C_76.x) < a1x->array_0x52_82.xshift
						&& abs(a1x->array_0x4C_76.y - jx->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
					{
						a1x->word_0x20_32 = sub_581E0_maybe_tan2(&jx->array_0x4C_76, &a1x->array_0x4C_76);
						break;
					}
				}
			}
			//v15 = a1x->dword_0xA0_160;
			if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
			{
				v16 = a1x->dword_0xA0_160x->word_160_0x1c_28;
				if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v11x->array_0x4C_76) >= v16)
				{
					a1x->byte_0x45_69 = a2 + 1;
					return 0;
				}
				if (a3(a1x, v11x))
					v3 = 1;
			}
		}
	}
	else
	{
		if (v4 <= 1)
		{
			a1x->word_0x96_150 = a1x->word_0x26_38;
			sub_1EEE0(a1x);
			return 0;
		}
		if (v4 == 2)
			a1x->byte_0x45_69 = a2 + 4;
	}
	return v3;
}

//----- (0001C560) --------------------------------------------------------
void sub_1C560(type_str_0x6E8E* a1x, uint16_t a2)//1fd560
{
	char v2; // al
	//Bit8u* v3; // eax
	Bit8s v3y;
	type_str_0x6E8E* v3x; // eax
	type_str_0x6E8E* v4x; // esi
	int16_t v5; // cx
	int i; // eax
	int v7; // edx
	//int v8; // eax
	char v9; // al
	//int v10; // eax
	char v11; // al
	//int v12; // eax
	char v13; // al
	type_str_0x6E8E* v14x; // ecx
	bool v16; // [esp+4h] [ebp-4h]

	//fix
	v3x = 0;
	//fix

	if (!a1x->word_0x32_50)
	{
		v2 = a2;
	LABEL_57:
		v3y = v2 + 1;
	LABEL_58:
		a1x->byte_0x45_69 = v3y;
		return;// v3y;
	}
	//LOWORD(v3) = a1x->word_0x32_50;
	v4x = x_DWORD_EA3E4[a1x->word_0x32_50];
	v16 = v4x->dword_0x8 >= 0
		&& !(v4x->struct_byte_0xc_12_15.byte[1] & 4)
		&& v4x->byte_0x3F_63 == a1x->byte_0x3F_63//(LOBYTE(v3) = v4x->byte_0x3F_63, (x_BYTE)v3 == a1x->byte_0x3F_63)
		&& v4x->byte_0x40_64 == a1x->byte_0x40_64;//(LOBYTE(v3) = v4x->byte_0x40_64, (x_BYTE)v3 == a1x->byte_0x40_64);
	v5 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		//LOWORD(v3) = a1x->word_0x62_98;
		a1x->word_0x26_38 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v5 = 1;
		//a1x->word_0x62_98 = (Bit16s)v3;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v3x->word_0x34_52)
		{
			v3x = x_DWORD_EA3E4[i];
			if (v3x == x_DWORD_EA3E4[0])
				break;
			v7 = v3x->dword_0x8;
			if (v7 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v7;
				//LOWORD(v3) = v3x->word_0x26_38;
				v5 = 1;
				a1x->word_0x26_38 = v3x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		//LOWORD(v3) = a1x->word_0x26_38;
		v5 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if ((uint16_t)v5 < 1u)
	{
		if (v5)
			return;// (Bit8s)v3;
		sub_1B8C0(a1x);
		if (!v16)
		{
			v2 = a2;
			a1x->word_0x32_50 = 0;
			goto LABEL_57;
		}
		//LOWORD(v3) = (int16_t)a1x->byte_0x3E_62 / a1x->dword_0xA0_160x->word_160_0x1a_26;
		if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
		{
			switch (v4x->byte_0x45_69 - a2)
			{
			case 0:
			case 1:
				goto LABEL_45;
			case 2:
				a1x->word_0x96_150 = v4x->word_0x96_150;
				a1x->word_0x32_50 = 0;
				//LOBYTE(v3) = a2 + 2;
				a1x->byte_0x45_69 = a2 + 2;
				return;// (Bit8s)v3;
			case 3:
				a1x->word_0x32_50 = v4x->word_0x32_50;
			LABEL_45:
				a1x->word_0x20_32 = sub_581E0_maybe_tan2(
					&a1x->array_0x4C_76,
					&x_DWORD_EA3E4[a1x->word_0x32_50]->array_0x4C_76);
				v14x = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64];
				break;
			case 6:
				a1x->word_0x96_150 = v4x->word_0x96_150;
				a1x->word_0x32_50 = 0;
				//LOBYTE(v3) = a2 + 6;
				a1x->byte_0x45_69 = a2 + 6;
				return;// (Bit8s)v3;
			default:
				a1x->word_0x32_50 = 0;
				//LOBYTE(v3) = a2 + 1;
				a1x->byte_0x45_69 = a2 + 1;
				return;// (Bit8s)v3;
			}
			while (v14x > x_DWORD_EA3E4[0])
			{
				if (v14x->word_0x1A_26 != a1x->word_0x1A_26
					&& abs((Bit16s)a1x->array_0x4C_76.x - (Bit16s)v14x->array_0x4C_76.x) < 256
					&& abs((Bit16s)a1x->array_0x4C_76.y - (Bit16s)v14x->array_0x4C_76.y) < 256)
				{
					a1x->word_0x20_32 = sub_581E0_maybe_tan2(&v14x->array_0x4C_76, &a1x->array_0x4C_76);
					break;
				}
				v14x = v14x->next_0;
			}
			//LOWORD(v3) = v4x->word_0x86_134 + v4x->word_0x82_130;
			a1x->word_0x82_130 = v4x->word_0x86_134 + v4x->word_0x82_130;
		}
	}
	else
	{
		if ((uint16_t)v5 > 1u)
		{
			if (v5 != 2)
				return;// (Bit8s)v3;
			if (v16)
			{
				v4x->word_0x96_150 = a1x->word_0x26_38;
				//v8 = v4x->dword_0xA0_160;
				v4x->word_0x32_50 = 0;
				if (v4x->dword_0xA0_160x->byte_160_0x20_32 & 8)
					v9 = a2 + 6;
				else
					v9 = a2 + 2;
				v4x->byte_0x45_69 = v9;
			}
			a1x->word_0x32_50 = 0;
			v3y = a2 + 4;
			goto LABEL_58;
		}
		if (v16)
		{
			v4x->word_0x96_150 = a1x->word_0x26_38;
			//v10 = v4x->dword_0xA0_160;
			v4x->word_0x32_50 = 0;
			if (v4x->dword_0xA0_160x->byte_160_0x20_32 & 8)
				v11 = a2 + 6;
			else
				v11 = a2 + 2;
			v4x->byte_0x45_69 = v11;
		}
		a1x->word_0x96_150 = a1x->word_0x26_38;
		//v12 = a1x->dword_0xA0_160;
		a1x->word_0x32_50 = 0;
		if (a1x->dword_0xA0_160x->byte_160_0x20_32 & 8)
			v13 = a2 + 6;
		else
			v13 = a2 + 2;
		a1x->byte_0x45_69 = v13;
		/*LOBYTE(v3) = */sub_1EEE0(a1x);
	}
	//return (Bit8s)v3;
}

//----- (0001C890) --------------------------------------------------------
void sub_1C890(type_str_0x6E8E* a1x, char a2)//1fd890
{
	//int result; // eax
	int i; // edx
	int16_t v4; // bx
	type_str_0x6E8E* v5x; // edx
	int v6; // edx
	type_str_0x6E8E* v7x; // edx
	char v8; // bl

	//result = a1;
	for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
	{
		v5x = x_DWORD_EA3E4[i];
		if (v5x == x_DWORD_EA3E4[0])
			break;
		v5x->byte_0x45_69 = a2 + 5;
		v4 = v5x->word_0x24_36;
		if (v4)
			a1x->word_0x24_36 = v4;
	}
	HIWORD(v6) = HIWORD(x_DWORD_EA3E4[0]) ^ HIWORD(v5x);
	LOWORD(v6) = a1x->word_0x24_36;
	v7x = x_DWORD_EA3E4[v6];
	if (v7x > x_DWORD_EA3E4[0]
		&& v7x->byte_0x3F_63 == 3
		&& !v7x->byte_0x40_64
		&& a1x->word_0x1A_26 != v7x->word_0x1A_26)
	{
		v8 = a1x->byte_0x40_64;
		if (v8 != 12 && v8 != 13 && v8 != 14 && v8 != 15 && v8 != 9)
			v7x->dword_0xA4_164x->dword_0x175_373++;
	}
	a1x->byte_0x45_69 = a2 + 5;
	//return a1x;
}

//----- (0001C930) --------------------------------------------------------
void sub_1C930(type_str_0x6E8E* a1x)//1fd930
{
	type_str_0x6E8E* v1x; // eax

	if (!(a1x->byte_0x3E_62 & 7))
	{
		sub_36BA0(a1x, 0);
		if (!(a1x->struct_byte_0xc_12_15.byte[2] & 0x10))
		{
			v1x = sub_4A190(&a1x->array_0x4C_76, 10, 1);
			if (v1x)
				v1x->word_0x1A_26 = a1x->word_0x1A_26;
		}
		sub_57F10(a1x);
	}
}

//----- (0001C980) --------------------------------------------------------
void sub_1C980(type_str_0x6E8E* a1x, char a2)//1fd980
{
	unsigned int v2; // ecx
	int16_t v3; // ax
	int i; // eax
	int v5; // edx
	type_str_0x6E8E* v6x; // eax
	char v7; // al
	type_str_0x6E8E* v9x; // eax
	type_str_0x6E8E* v10x; // esi
	int16_t v11; // ax
	//int v12; // edx
	//int v13; // eax
	type_str_0x6E8E* jx; // ecx
	//int v15; // ecx
	unsigned int v16; // ST08_4

	v2 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		v3 = a1x->str_0x5E_94.word_0x62_98;
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		a1x->word_0x26_38 = v3;
		v2 = 1;
		a1x->str_0x5E_94.word_0x62_98 = 0;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v6x->word_0x34_52)
		{
			v6x = x_DWORD_EA3E4[i];
			if (v6x == x_DWORD_EA3E4[0])
				break;
			v5 = v6x->dword_0x8;
			if (v5 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v5;
				v2 = 1;
				a1x->word_0x26_38 = v6x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v2 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if (v2 < 1)
	{
		if (v2)
			return;// 0;
		sub_1B8C0(a1x);
		v9x = sub_1ED30(a1x, x_DWORD_EA3E4[a1x->word_0x96_150]);
		v10x = v9x;
		if (v9x > x_DWORD_EA3E4[0] && v9x->dword_0x8 >= 0 && !(v9x->struct_byte_0xc_12_15.byte[1] & 4))
		{
			if (!(a1x->byte_0x3E_62 & 3))
			{
				v11 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v9x->array_0x4C_76);
				HIBYTE(v11) += 4;
				a1x->word_0x20_32 = v11;
				//v12 = 4 * *(char *)(a1 + 64);
				//v13 = x_D41A0_BYTEARRAY_4_struct.dwordindex_0;
				a1x->word_0x20_32 &= 0x7ff;
				for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
				{
					if (jx->word_0x1A_26 != a1x->word_0x1A_26
						&& abs(a1x->array_0x4C_76.x - jx->array_0x4C_76.x) < a1x->array_0x52_82.xshift
						&& abs(a1x->array_0x4C_76.y - jx->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
					{
						a1x->word_0x20_32 = sub_581E0_maybe_tan2(&jx->array_0x4C_76, &a1x->array_0x4C_76);
						break;
					}
				}
			}
			//v15 = a1x->dword_0xA0_160;
			if (a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26)
				return;// 0;
			v16 = a1x->dword_0xA0_160x->word_160_0x1c_28;
			if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v10x->array_0x4C_76) < v16)
				return;// 0;
		}
		v7 = a2 + 1;
		goto LABEL_34;
	}
	if (v2 <= 1)
	{
		a1x->word_0x96_150 = a1x->word_0x26_38;
		sub_1EEE0(a1x);
		return;// 0;
	}
	if (v2 == 2)
	{
		v7 = a2 + 4;
	LABEL_34:
		a1x->byte_0x45_69 = v7;
	}
	//return 0;
}

//----- (0001CC20) --------------------------------------------------------
signed int sub_1CC20(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1fdc20
{
	axis_3d* v2; // esi
	signed int v3; // edi
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // ebx
	char v6; // al

	v2 = &a1x->array_0x4C_76;
	v3 = 0;
	v4x = sub_4A190(&a1x->array_0x4C_76, 9, 0);
	v5x = v4x;
	if (v4x)
	{
		v4x->byte_0x43_67 = 10;
		v4x->byte_0x44_68 = 0;
		v4x->word_0x1A_26 = a1x->word_0x1A_26;
		v4x->word_0x1C_28 = sub_581E0_maybe_tan2(v2, &a2x->array_0x4C_76);
		v5x->word_0x1E_30 = sub_58210_radix_tan(v2, &a2x->array_0x4C_76);
		v5x->array_0x4C_76.z += a1x->array_0x52_82.dd;
		v5x->word_0x96_150 = a1x->word_0x96_150;
		v5x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x8a2];
		v5x->byte_0x42_66 = a2x->byte_0x40_64;
		v6 = a2x->byte_0x3F_63;
		v5x->word_0x2A_42 = 500;
		v3 = 1;
		v5x->byte_0x41_65 = v6;
		sub_5EF70(a2x);
	}
	return v3;
}

//----- (0001CCE0) --------------------------------------------------------
signed int sub_1CCE0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1fdce0
{
	axis_3d* v2; // edi
	signed int v3; // esi
	type_str_0x6E8E* v4x; // ebx
	char v5; // al

	v2 = &a1x->array_0x4C_76;
	v3 = 0;
	v4x = sub_4A190(&a1x->array_0x4C_76, 9, 13);
	if (v4x)
	{
		v4x->word_0x1A_26 = a1x->word_0x1A_26;
		v4x->word_0x1C_28 = sub_581E0_maybe_tan2(v2, &a2x->array_0x4C_76);
		v4x->word_0x1E_30 = sub_58210_radix_tan(v2, &a2x->array_0x4C_76);
		v4x->array_0x4C_76.z += a1x->array_0x52_82.dd / 2;
		v4x->word_0x96_150 = a1x->word_0x96_150;
		v4x->byte_0x42_66 = a2x->byte_0x40_64;
		v5 = a2x->byte_0x3F_63;
		v4x->word_0x2A_42 = 250;
		v4x->byte_0x41_65 = v5;
		sub_49E10(v4x, 195);
		v3 = 1;
		sub_5EF70(a2x);
	}
	return v3;
}

//----- (0001CDA0) --------------------------------------------------------
signed int sub_1CDA0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1fdda0
{
	signed int v2; // edi
	type_str_0x6E8E* v3x; // ebx
	axis_3d* v5; // [esp+4h] [ebp-4h]

	v2 = 0;
	v5 = &a1x->array_0x4C_76;
	v3x = sub_4A190(&a1x->array_0x4C_76, 9, 13);
	if (v3x)
	{
		v3x->word_0x1A_26 = a1x->word_0x1A_26;
		v3x->word_0x1C_28 = sub_581E0_maybe_tan2(v5, &a2x->array_0x4C_76);
		v3x->word_0x1E_30 = sub_58210_radix_tan(v5, &a2x->array_0x4C_76);
		v3x->array_0x4C_76.z += a1x->array_0x52_82.yshift;
		v3x->word_0x96_150 = a1x->word_0x96_150;
		v3x->byte_0x42_66 = a2x->byte_0x40_64;
		v3x->byte_0x41_65 = a2x->byte_0x3F_63;
		if (a1x->word_0x94_148)
			v3x->word_0x2A_42 = 600;
		else
			v3x->word_0x2A_42 = 400;
		sub_49E10(v3x, 203);
		v2 = 1;
		sub_5EF70(a2x);
	}
	return v2;
}

//----- (0001CE80) --------------------------------------------------------
signed int sub_1CE80(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1fde80
{
	signed int v2; // ebx

	v2 = 0;
	if ((signed int)sub_583F0_distance_3d(&a1x->array_0x4C_76, &a2x->array_0x4C_76) < 1024)
	{
		v2 = 1;
		sub_11900(a1x, a2x, 0, a1x->word_0x2A_42);
	}
	return v2;
}

//----- (0001CED0) --------------------------------------------------------
signed int sub_1CED0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1fded0
{
	signed int v2; // ebx

	v2 = 0;
	if ((signed int)sub_583F0_distance_3d(&a1x->array_0x4C_76, &a2x->array_0x4C_76) < 768)
	{
		v2 = 1;
		sub_11900(a1x, a2x, 0, a1x->word_0x2A_42);
	}
	return v2;
}

//----- (0001CF20) --------------------------------------------------------
signed int sub_1CF20(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1fdf20
{
	signed int v2; // ebx

	v2 = 0;
	if ((signed int)sub_583F0_distance_3d(&a1x->array_0x4C_76, &a2x->array_0x4C_76) < 1536)
	{
		v2 = 1;
		sub_11900(a1x, a2x, 0, a1x->word_0x2A_42);
	}
	return v2;
}

//----- (0001D0E0) --------------------------------------------------------
signed int sub_1D0E0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1fe0e0
{
	axis_3d* v2; // esi
	signed int v3; // edi
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // ebx
	char v6; // al

	v2 = &a1x->array_0x4C_76;
	v3 = 0;
	v4x = sub_4A190(&a1x->array_0x4C_76, 9, 20);
	v5x = v4x;
	if (v4x)
	{
		v4x->byte_0x43_67 = 10;
		v4x->byte_0x44_68 = 65;
		v4x->word_0x1A_26 = a1x->word_0x1A_26;
		v4x->word_0x1C_28 = sub_581E0_maybe_tan2(v2, &a2x->array_0x4C_76);
		v5x->word_0x1E_30 = sub_58210_radix_tan(v2, &a2x->array_0x4C_76);
		v5x->array_0x4C_76.z += a1x->array_0x52_82.dd;
		v5x->word_0x96_150 = a1x->word_0x96_150;
		v5x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x8a2];
		v5x->byte_0x42_66 = a2x->byte_0x40_64;
		v6 = a2x->byte_0x3F_63;
		v5x->word_0x2A_42 = 780;
		v3 = 1;
		v5x->byte_0x41_65 = v6;
		sub_5EF70(a2x);
	}
	return v3;
}

//----- (0001D1A0) --------------------------------------------------------
signed int sub_1D1A0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1fe1a0
{
	axis_3d* v2; // esi
	signed int v3; // edi
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // ebx
	int16_t v6; // ax
	int16_t v7; // dx

	v2 = &a1x->array_0x4C_76;
	v3 = 0;
	v4x = sub_4A190(&a1x->array_0x4C_76, 9, 21);
	v5x = v4x;
	if (v4x)
	{
		v4x->byte_0x43_67 = 10;
		v4x->byte_0x44_68 = 66;
		v4x->word_0x1A_26 = a1x->word_0x1A_26;
		v4x->word_0x1C_28 = sub_581E0_maybe_tan2(v2, &a2x->array_0x4C_76);
		v6 = sub_58210_radix_tan(v2, &a2x->array_0x4C_76);
		v7 = v5x->array_0x4C_76.z;
		v5x->word_0x1E_30 = v6;
		v5x->array_0x4C_76.z = v7 + 128;
		v5x->word_0x96_150 = a1x->word_0x96_150;
		v5x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x8a2];
		v5x->byte_0x42_66 = a2x->byte_0x40_64;
		LOBYTE(v6) = a2x->byte_0x3F_63;
		v5x->word_0x2A_42 = 780;
		v3 = 1;
		v5x->byte_0x41_65 = v6;
		sub_5EF70(a2x);
	}
	return v3;
}

//----- (0001D260) --------------------------------------------------------
signed int sub_1D260(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1fe260
{
	type_str_0x6E8E* v2x; // eax
	type_str_0x6E8E* v3x; // ebx
	char v4; // al
	signed int v6; // [esp+0h] [ebp-4h]

	x_WORD_EB398ar = a1x->array_0x4C_76;
	v6 = 0;
	x_WORD_EB398ar.z += a1x->array_0x52_82.dd;
	v2x = sub_4A190(&x_WORD_EB398ar, 9, 9);
	v3x = v2x;
	if (v2x)
	{
		v2x->byte_0x43_67 = 10;
		v2x->byte_0x44_68 = 23;
		v2x->word_0x1A_26 = a1x->word_0x1A_26;
		v2x->word_0x1C_28 = sub_581E0_maybe_tan2(&x_WORD_EB398ar, &a2x->array_0x4C_76);
		v3x->word_0x1E_30 = sub_58210_radix_tan(&x_WORD_EB398ar, &a2x->array_0x4C_76);
		v3x->word_0x96_150 = a1x->word_0x96_150;
		v3x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x880];
		v3x->byte_0x42_66 = a2x->byte_0x40_64;
		v4 = a2x->byte_0x3F_63;
		v3x->word_0x2A_42 = 4000;
		v3x->byte_0x41_65 = v4;
		sub_5EF70(a2x);
		v6 = 1;
	}
	return v6;
}

//----- (0001D460) --------------------------------------------------------
signed int sub_1D460(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1fe460
{
	uint16_t v2; // si
	int16_t v3; // di
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // ebx
	int16_t v6; // ax
	int16_t v7; // cx
	axis_3d* v9; // [esp+4h] [ebp-8h]
	signed int v10; // [esp+8h] [ebp-4h]

	v2 = 0;
	v10 = 0;
	do
	{
		switch (v2)
		{
		case 0u:
			v3 = -226;
			break;
		case 1u:
			v3 = -113;
			break;
		case 2u:
			v3 = 0;
			break;
		case 3u:
			v3 = 113;
			break;
		default:
			v3 = 226;
			break;
		}
		v9 = &a1x->array_0x4C_76;
		v4x = sub_4A190(&a1x->array_0x4C_76, 9, 0);
		v5x = v4x;
		if (v4x)
		{
			v4x->byte_0x43_67 = 10;
			v4x->byte_0x44_68 = 0;
			v4x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x81a];
			v4x->byte_0x42_66 = a2x->byte_0x40_64;
			v4x->byte_0x41_65 = a2x->byte_0x3F_63;
			v4x->word_0x2A_42 = 800;
			v4x->word_0x1A_26 = a1x->word_0x1A_26;
			v4x->word_0x1C_28 = v3 + sub_581E0_maybe_tan2(v9, &a2x->array_0x4C_76);
			v6 = sub_58210_radix_tan(v9, &a2x->array_0x4C_76);
			v7 = v5x->array_0x4C_76.z;
			v5x->word_0x1E_30 = v6;
			v5x->array_0x4C_76.z = v7 + 200;
			v10 = 1;
			v5x->word_0x96_150 = a1x->word_0x96_150;
		}
		v2++;
	} while (v2 < 5u);
	return v10;
}

//----- (0001D5D0) --------------------------------------------------------
void sub_1D5D0(type_str_0x6E8E* a1x, int16_t a2)//1fe5d0
{
	switch (a1x->byte_0x49_73)
	{
	case 1:
		sub_1DDA0(a1x, a2);
		break;
	case 2:
		sub_1DBF0(a1x, a2);
		break;
	case 3:
		sub_1D7C0(a1x, a2);
		break;
	case 4:
		sub_1D700(a1x, a2);
		break;
	case 5:
		sub_1D8C0(a1x, a2);
		break;
	case 6:
		sub_1E000(a1x, a2);
		break;
	case 7:
		sub_1E020(a1x, a2);
		break;
	case 8:
		sub_1D880(a1x, a2);
		break;
	case 9:
		sub_1D8A0(a1x, a2);
		break;
	case 0xA:
		sub_1E040(a1x, a2);
		break;
	case 0xC:
		sub_1E4D0(a1x);
		break;
	case 0xD:
	case 0x10:
		sub_1E580(a1x, a2);
		break;
	case 0xE:
		sub_1E9C0(a1x, a2);
		break;
	case 0x11:
		sub_1E320(a1x);
		break;
	default:
		return;
	}
}

//----- (0001D700) --------------------------------------------------------
void sub_1D700(type_str_0x6E8E* a1x, int16_t a2)//1fe700
{
	type_str_0x3647Ac* v2x; // esi
	type_str_0x6E8E* v3x; // esi
	uint16_t v4; // dx
	unsigned int v5; // edi

	sub_1D8C0(a1x, a2);
	if (!(a1x->byte_0x3E_62 & 7))
	{		
		v2x = &D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72];
		if (v2x->str_0x3647A_byte_1 & 2)
			v3x = x_DWORD_EA3E4[a1x->word_0x4A_74];
		else
			v3x = v2x->str_0x3647C_4.pointer_0x6E8E;
		if (v3x)
		{
			if (v3x > x_DWORD_EA3E4[0])
			{
				v4 = v3x->word_0x96_150;
				if (v4 == 0xae02)return;//fix
				if (v4)
				{
					v5 = a1x->dword_0xA0_160x->word_160_0x1c_28;
					if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &x_DWORD_EA3E4[v4]->array_0x4C_76) <= v5)
					{
						a1x->word_0x96_150 = v3x->word_0x96_150;
						a1x->byte_0x49_73 = 10;
						sub_1E040(a1x, a2);
					}
				}
			}
		}
	}
}

//----- (0001D7C0) --------------------------------------------------------
void sub_1D7C0(type_str_0x6E8E* a1x, int16_t a2)//1fe7c0
{
	type_str_0x3647Ac* v2x; // esi
	type_str_0x6E8E* v3x; // esi
	unsigned int v4; // edi

	sub_1D8C0(a1x, a2);
	if (!(a1x->byte_0x3E_62 & 7))
	{		
		v2x = &D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72];
		if (v2x->str_0x3647A_byte_1 & 2)
			v3x = x_DWORD_EA3E4[a1x->word_0x4A_74];
		else
			v3x = v2x->str_0x3647C_4.pointer_0x6E8E;
		if (v3x && v3x > x_DWORD_EA3E4[0])
		{
			v4 = a1x->dword_0xA0_160x->word_160_0x1c_28;
			if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v3x->array_0x4C_76) <= v4)
			{
				a1x->word_0x96_150 = v3x-D41A0_BYTESTR_0.struct_0x6E8E;
				a1x->byte_0x49_73 = 10;
				sub_1E040(a1x, a2);
			}
		}
	}
}

//----- (0001D880) --------------------------------------------------------
void sub_1D880(type_str_0x6E8E* a1x, int16_t a2)//1fe880
{
	/*return */sub_1E1C0(a1x, a2);
}

//----- (0001D8A0) --------------------------------------------------------
void sub_1D8A0(type_str_0x6E8E* a1x, int16_t a2)//1fe8a0
{
	/*return */sub_1E1C0(a1x, a2);
}

//----- (0001D8C0) --------------------------------------------------------
void sub_1D8C0(type_str_0x6E8E* a1x, int16_t a2)//1fe8c0
{
	unsigned int v2; // ecx
	int16_t v3; // ax
	int i; // eax
	int v5; // eax
	type_str_0x6E8E* v6x; // esi
	type_str_0x6E8E* v7x; // eax
	char v8; // al
	char v9; // cl
	char v10; // al
	//Bit8u* v11; // esi
	type_str_0x6E8E* v12x; // esi
	int16_t v13; // ax
	char v14; // dl
	uint16_t v15; // ax
	type_str_0x6E8E* jx; // ecx

	// fix it
	v12x = 0;
	// fix it

	v2 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v3 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v2 = 1;
		a1x->word_0x26_38 = v3;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52 && a1x->byte_0x40_64 != 27)
	{
		for (i = a1x->word_0x34_52; ; i = v6x->word_0x34_52)
		{
			v6x = x_DWORD_EA3E4[i];
			if (v6x == x_DWORD_EA3E4[0])
				break;
			v5 = v6x->dword_0x8;
			if (v5 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v5;
				v2 = 1;
				a1x->word_0x26_38 = v6x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v2 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if (v2 < 1)
	{
		if (!v2)
		{
			sub_1B8C0(a1x);
			if (!(a1x->byte_0x3E_62 & 7))
			{				
				//v11 = x_D41A0_BYTEARRAY_0 + 8 * a1x->byte_0x48_72;
				if (D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647A_byte_1 & 2)
				{
					if (!a1x->word_0x4A_74)
						a1x->word_0x4A_74 = sub_1E3E0(a1x);
					v12x = x_DWORD_EA3E4[a1x->word_0x4A_74];
				}
				else
				{

					//v12 = *(x_WORD **)((char *)sub_365F8 + v11);//fix it
					v12x = D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647C_4.pointer_0x6E8E;
					//stub_fix_it();
				}
				if (v12x && v12x > x_DWORD_EA3E4[0])
				{
					if (!(a1x->struct_byte_0xc_12_15.byte[2] & 4))
					{
						v13 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v12x->array_0x4C_76);
						v14 = a1x->byte_0x3E_62;
						a1x->word_0x20_32 = v13;
						if (!(v14 & 0x3F))
						{
							a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
							v15 = a1x->word_0x14_20;
							a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
							a1x->word_0x20_32 += (2 * ((signed int)(v15 % 0x9Du) / 79) - 1) * ((a1x->word_0x14_20 & 0xFF) + 85);
							a1x->word_0x20_32 &= 0x7ff;
						}
					}
					for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
					{
						if (jx->word_0x1A_26 != a1x->word_0x1A_26
							&& abs(a1x->array_0x4C_76.x - jx->array_0x4C_76.x) < a1x->array_0x52_82.xshift
							&& abs(a1x->array_0x4C_76.y - jx->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
						{
							a1x->word_0x20_32 = sub_581E0_maybe_tan2(&jx->array_0x4C_76, &a1x->array_0x4C_76);
							break;
						}
					}
					if (abs(a1x->array_0x4C_76.x - v12x->array_0x4C_76.x) < a1x->array_0x52_82.xshift
						+ v12x->array_0x52_82.xshift
						&& abs(a1x->array_0x4C_76.y - v12x->array_0x4C_76.y) < a1x->array_0x52_82.xshift
						+ v12x->array_0x52_82.xshift)
					{
						a1x->word_0x20_32 = sub_581E0_maybe_tan2(&v12x->array_0x4C_76, &a1x->array_0x4C_76);
					}
				}
				else if (!(a1x->byte_0x3E_62 & 0xF) && !(a1x->struct_byte_0xc_12_15.byte[2] & 4))
				{
					a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
					a1x->word_0x20_32 += a1x->word_0x14_20 % 0x71u + 142;
					a1x->word_0x20_32 &= 0x7ff;
				}
			}
		}
	}
	else if (v2 <= 1)
	{
		v7x = x_DWORD_EA3E4[a1x->word_0x26_38];
		if (v7x->byte_0x3F_63 != a1x->byte_0x3F_63 || (v8 = v7x->byte_0x40_64, v9 = a1x->byte_0x40_64, v8 != v9))
			v10 = 1;
		else
			v10 = v9 ^ v8;
		if (v10)
		{
			a1x->word_0x96_150 = a1x->word_0x26_38;
			a1x->byte_0x49_73 = 10;
			sub_1E040(a1x, a2);
		}
		sub_1EEE0(a1x);
	}
	else if (v2 == 2)
	{
		a1x->byte_0x45_69 = a2 + 4;
	}
}

//----- (0001DBF0) --------------------------------------------------------
void sub_1DBF0(type_str_0x6E8E* a1x, uint16_t a2)//1febf0
{
	type_str_0x3647Ac* v2x; // esi
	//int result; // eax
	//int v4; // esi
	type_str_0x6E8E* v5x; // edi
	type_str_0x6E8E* v6x; // esi
	int v7; // ecx
	int16_t v8; // dx
	int v9; // ST08_4
	int16_t v10; // ax
	unsigned int v11; // [esp+4h] [ebp-Ch]
	unsigned int v12; // [esp+8h] [ebp-8h]
	unsigned int v13; // [esp+Ch] [ebp-4h]

	v2x = &D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72];
	if (abs((Bit16s)v2x->str_0x3647C_4.axis.x - (Bit16s)a1x->array_0x4C_76.x) > 3072
		|| abs((Bit16s)v2x->str_0x3647C_4.axis.y - (Bit16s)a1x->array_0x4C_76.y) > 3072)
	{
		sub_1DDA0(a1x, a2);
	}
	else
	{
		sub_1E1C0(a1x, a2);
	}
	//result = a2 + 7;
	if (a1x->byte_0x45_69 == a2 + 7 && a1x->byte_0x49_73 == 2)
	{
		if (a1x->byte_0x39_57)
		{
			//v4 = a1x->dword_0xA0_160;
			//result = a1x->byte_0x3E_62 / a1x->dword_0xA0_160x->word_160_0x1a_26;
			if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
			{
				//result = a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28;
				v5x = 0;
				v12 = -1;
				v6x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
				v11 = a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28;
				while (v6x > x_DWORD_EA3E4[0])
				{
					v7 = v6x->array_0x4C_76.x - a1x->array_0x4C_76.x;
					v8 = v6x->array_0x4C_76.y - a1x->array_0x4C_76.y;
					v13 = v8 * v8 + v7 * v7;
					//result = v13;
					if (v13 <= v11 && !(v6x->struct_byte_0xc_12_15.byte[0] & 0x20))
					{
						v9 = a1x->dword_0xA0_160x->word_160_0x1e_30;
						v10 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v6x->array_0x4C_76);
						//result = (uint16_t)sub_582B0(a1x->word_0x1C_28, v10);
						if (sub_582B0(a1x->word_0x1C_28, v10) < v9)
						{
							//result = v13;
							if (v13 < v12)
							{
								v5x = v6x;
								v12 = v13;
							}
						}
					}
					v6x = v6x->next_0;
				}
				if (v5x)
				{
					a1x->word_0x96_150 = v5x-D41A0_BYTESTR_0.struct_0x6E8E;
					a1x->byte_0x49_73 = 10;
					/*result = */sub_1E040(a1x, a2);
				}
			}
		}
	}
	//return result;
}

int debugcounter_1DEDA0 = 0;
//----- (0001DDA0) --------------------------------------------------------
void sub_1DDA0(type_str_0x6E8E* a1x, int16_t a2)//1feda0
{
	signed int v2x; // eax
	int16_t v3; // ax
	int i; // edx
	int v5; // edx
	type_str_0x6E8E* v6x; // ecx
	type_str_0x6E8E* v7x; // eax
	char v8; // al
	char v9; // cl
	char v10; // al
	uint16_t v11; // ax
	type_str_0x6E8E* jx; // ecx
	axis_3d v14x; // [esp+0h] [ebp-Ch]
	//int16_t v15; // [esp+2h] [ebp-Ah]
	char v16; // [esp+8h] [ebp-4h]
	
	Bit8u origbyte20 = 0;
	Bit8u remakebyte20 = 0;
	int comp20;
	v2x = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v3 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v3;
		v2x = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52 && a1x->byte_0x40_64 != 27)
	{
		for (i = a1x->word_0x34_52; ; i = v6x->word_0x34_52)
		{
			v6x = x_DWORD_EA3E4[i];
			if (v6x == x_DWORD_EA3E4[0])
				break;
			v5 = v6x->dword_0x8;
			if (v5 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v5;
				a1x->word_0x26_38 = v6x->word_0x26_38;
				v2x = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		v2x = 2;
	}
	switch (v2x)
	{
		case 0:
		{
			/*LOBYTE(v2) = */sub_1B8C0(a1x);
			if (!(a1x->byte_0x3E_62 & 7))
			{
				v14x.x = D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647C_4.axis.x;
				v14x.y = D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647C_4.axis.y;
				if (!(a1x->struct_byte_0xc_12_15.byte[2] & 4))
				{
					a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v14x);
					if (!(a1x->byte_0x3E_62 & 0x3F))
					{
						a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
						v11 = a1x->word_0x14_20;
						a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
						a1x->word_0x20_32 += ((a1x->word_0x14_20 & 0xFF) + 85) * (2 * ((signed int)(v11 % 0x9Du) / 79) - 1);
						a1x->word_0x20_32 &= 0x7ff;
					}
				}
				//v2 = a1x->byte_0x40_64;
				v16 = 0;
				for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
				{
					//LOWORD(v2) = jx->word_0x1A_26;
					if (jx->word_0x1A_26 != a1x->word_0x1A_26)
					{
						//v2 = abs(a1x->array_0x4C_76.x - jx->array_0x4C_76.x);
						if (abs((Bit16s)a1x->array_0x4C_76.x - (Bit16s)jx->array_0x4C_76.x) < a1x->array_0x52_82.xshift)
						{
							//v2 = abs(a1x->array_0x4C_76.y - jx->array_0x4C_76.y);
							if (abs((Bit16s)a1x->array_0x4C_76.y - (Bit16s)jx->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
							{
								a1x->word_0x20_32 = sub_581E0_maybe_tan2(&jx->array_0x4C_76, &a1x->array_0x4C_76);
								//a1x->word_0x20_32 = v2;
								v16 = 1;
								return;// a1x->word_0x20_32;
							}
						}
					}
				}
			}
			break;
		}
		case 1:
		{
			v7x = x_DWORD_EA3E4[a1x->word_0x26_38];
			if (v7x->byte_0x3F_63 != a1x->byte_0x3F_63 || (v8 = v7x->byte_0x40_64, v9 = a1x->byte_0x40_64, v8 != v9))
				v10 = 1;
			else
				v10 = v9 ^ v8;
			if (v10)
			{
				a1x->word_0x96_150 = a1x->word_0x26_38;
				a1x->byte_0x49_73 = 10;
				sub_1E040(a1x, a2);
			}
			/*LOBYTE(v2) = */sub_1EEE0(a1x);
			break;
		}
		case 2:
		{
			//LOBYTE(v2) = a2 + 4;
			a1x->byte_0x45_69 = a2 + 4;
		break;
		}
	}
	return;// v2;
}

//----- (0001E000) --------------------------------------------------------
void sub_1E000(type_str_0x6E8E* a1x, int16_t a2)//1ff000
{
	/*return */sub_1E1C0(a1x, a2);
}

//----- (0001E020) --------------------------------------------------------
void sub_1E020(type_str_0x6E8E* a1x, int16_t a2)//1ff020
{
	/*return */sub_1E1C0(a1x, a2);
}

//----- (0001E040) --------------------------------------------------------
void sub_1E040(type_str_0x6E8E* a1x, char a2)//1ff040
{
	//int result; // eax
	char v3; // bl

	//result = a1x->dword_0xA0_160;
	if (a1x->dword_0xA0_160x->byte_160_0x20_32 & 8)
		v3 = a2 + 6;
	else
		v3 = a2 + 2;
	a1x->byte_0x45_69 = v3;
	//return result;
}

//----- (0001E1C0) --------------------------------------------------------
void sub_1E1C0(type_str_0x6E8E* a1x, int16_t a2)//1ff1c0
{
	//unsigned int v2; // eax
	int v2x;
	int16_t v3; // ax
	int i; // edx
	int v5; // ecx
	type_str_0x6E8E* v6x; // edx
	type_str_0x6E8E* v7x; // eax
	char v8; // al
	char v9; // cl
	char v10; // al

	v2x = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v3 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v3;
		v2x = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52 && a1x->byte_0x40_64 != 27)
	{
		for (i = a1x->word_0x34_52; ; i = v6x->word_0x34_52)
		{
			v6x = x_DWORD_EA3E4[i];
			if (v6x == x_DWORD_EA3E4[0])
				break;
			v5 = v6x->dword_0x8;
			if (v5 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v5;
				a1x->word_0x26_38 = v6x->word_0x26_38;
				v2x = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		v2x = 2;
	}
	if (v2x < 1)
	{
		if (!v2x)
		{
			//v2 = a1x->dword_0xA0_160;
			if (!(a1x->dword_0xA0_160x->byte_160_0x20_32 & 2))
			{
				sub_1B8C0(a1x);
				//LOBYTE(v2) = a1x->byte_0x3E_62;
				if (!(a1x->byte_0x3E_62 & 0xF) && !(a1x->struct_byte_0xc_12_15.byte[2] & 4))
				{
					a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
					//v2 = a1x->word_0x14_20 % 0x71u + 142 + a1x->word_0x20_32;
					a1x->word_0x20_32 = a1x->word_0x14_20 % 0x71u + 142 + a1x->word_0x20_32;
					a1x->word_0x20_32 &= 0x7ff;
				}
			}
		}
	}
	else if (v2x <= 1)
	{
		v7x = x_DWORD_EA3E4[a1x->word_0x26_38];
		if (v7x->byte_0x3F_63 != a1x->byte_0x3F_63 || (v8 = v7x->byte_0x40_64, v9 = a1x->byte_0x40_64, v8 != v9))
			v10 = 1;
		else
			v10 = v9 ^ v8;
		if (v10)
		{
			a1x->word_0x96_150 = a1x->word_0x26_38;
			a1x->byte_0x49_73 = 10;
			sub_1E040(a1x, a2);
		}
		/*LOBYTE(v2) = */sub_1EEE0(a1x);
	}
	else if (v2x == 2)
	{
		//LOBYTE(v2) = a2 + 4;
		a1x->byte_0x45_69 = a2 + 4;
	}
	//return v2;
}

//----- (0001E320) --------------------------------------------------------
void sub_1E320(type_str_0x6E8E* a1x)//1ff320
{
	unsigned int v1; // eax
	type_str_0x6E8E* v1x; // eax
	int16_t v2; // dx

	sub_1B8C0(a1x);
	if (a1x->dword_0x8 < 0)
	{
		sub_57F10(a1x);
		return;
	}
	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	if (v1x <= x_DWORD_EA3E4[0] || v1x->dword_0x8 < 0 || v1x->struct_byte_0xc_12_15.byte[1] & 4)
		goto LABEL_14;
	//LOWORD(v1) = sub_581E0_maybe_tan2((Bit16u*)(a1 + 76), (Bit16u*)(v1 + 76));
	v2 = a1x->word_0x82_130;
	a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
	v2 -= 8;
	a1x->word_0x82_130 = v2;
	if (v2 <= 16)
	{
		LOBYTE(v1) = a1x->byte_0x40_64;
		if ((uint8_t)v1 < 0x13u)
		{
			if (!(x_BYTE)v1)
				a1x->word_0x82_130 = 30;
		}
		else if ((uint8_t)v1 <= 0x13u)
		{
			a1x->word_0x82_130 = 76;
		}
		else if ((x_BYTE)v1 == 21)
		{
			a1x->word_0x82_130 = 96;
		}
	LABEL_14:
		a1x->byte_0x49_73 = 16;
	}
}

//----- (0001E3E0) --------------------------------------------------------
int sub_1E3E0(type_str_0x6E8E* a1x)//1ff3e0
{
	type_str_0x6E8E* v1x; // edi
	Bit16s v2x; // ebx
	//int v3; // edx
	type_str_0x6E8E* ix; // eax
	type_str_0x6E8E* jx; // esi
	unsigned int v6; // eax
	unsigned int v8; // [esp+0h] [ebp-4h]

	v8 = -1;
	v1x = 0;
	v2x = 0;
	if (D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647A_byte_1 & 1)
	{
		//HIWORD(v3) = HIWORD(x_D41A0_BYTEARRAY_4_struct.dwordindex_0);
		for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; ix > x_DWORD_EA3E4[0] && !v2x; ix = ix->next_0)
		{
			if (ix->byte_0x48_72 == a1x->byte_0x48_72)
			{
				//LOWORD(v3) = ix->word_0x4A_74;
				if (ix->word_0x4A_74)
					v2x = ix->word_0x4A_74;
			}
		}
	}
	if (!v2x)
	{
		for ( jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[D41A0_BYTESTR_0.array_0x365F4[a1x->byte_0x48_72].str_0x3647C_4.axis.x]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0 )
		{
		  v6 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &jx->array_0x4C_76);
		  if ( v6 < v8 )
		  {
			v8 = v6;
			v1x = jx;
		  }
		}
		if (v1x)
			v2x = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
	}
	return v2x;
}

//----- (0001E4D0) --------------------------------------------------------
void sub_1E4D0(type_str_0x6E8E* a1x)//1ff4d0
{
	type_str_0x6E8E* v1x; // ebx
	uint8_t v2; // al
	int v3; // edx
	//int result; // eax

	v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
	if (v1x <= x_DWORD_EA3E4[0] || v1x->dword_0x8 < 0)
		sub_57F10(a1x);
	x_WORD_EB398ar.x = v1x->array_0x4C_76.x;
	v2 = a1x->byte_0x40_64;
	x_WORD_EB398ar.y = v1x->array_0x4C_76.y;
	v3 = v1x->array_0x4C_76.z;
	if (v2 >= 0x10u)
	{
		if (v2 <= 0x10u)
		{
			v3 -= 896;
		}
		else if (v2 > 0x13u && v2 == 25)
		{
			v3 -= 512;
		}
	}
	if (v3 <= 0)
		LOWORD(v3) = 0;
	x_WORD_EB398ar.z = v3;
	/*result = */sub_57CF0(a1x, &x_WORD_EB398ar);
	a1x->word_0x20_32 = v1x->word_0x20_32;
	a1x->word_0x1C_28 = v1x->word_0x1C_28;
	//return result;
}

//----- (0001E580) --------------------------------------------------------
void sub_1E580(type_str_0x6E8E* a1x, int16_t a2)//1ff580
{
	type_str_0x6E8E* v2x; // eax
	type_str_0x6E8E* v3x; // esi
	unsigned int v4; // edi
	int16_t v5; // si
	char v6; // [esp+0h] [ebp-4h]

	v6 = 0;
	v2x = x_DWORD_EA3E4[a1x->word_0x28_40];
	if (v2x <= x_DWORD_EA3E4[0] || v2x->dword_0x8 < 0 || v2x->struct_byte_0xc_12_15.byte[1] & 4)
	{
		a1x->word_0x2E_46 = 0;
	}
	else if (a1x->byte_0x49_73 == 13)
	{
		--a1x->word_0x2E_46;
	}
	if (a1x->word_0x2E_46 <= 0)
	{
		v6 = 1;
	}
	else
	{
		v3x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v3x > x_DWORD_EA3E4[0] && (v3x->dword_0x8 <= 0 || v3x->struct_byte_0xc_12_15.byte[1] & 4))
		{
			a1x->word_0x96_150 = 0;
			v3x = x_DWORD_EA3E4[0];
		}
		if (v3x <= x_DWORD_EA3E4[0] && !(a1x->byte_0x3E_62 & 7))
		{
			v3x = sub_16FC0(v2x, v2x);
			a1x->word_0x96_150 = v3x-D41A0_BYTESTR_0.struct_0x6E8E;
		}
		if (v3x <= x_DWORD_EA3E4[0])
		{
			a1x->word_0x96_150 = a1x->word_0x28_40;
			sub_1E700(a1x, a2);
			v5 = a1x->word_0x2E_46;
			a1x->word_0x96_150 = 0;
			a1x->word_0x2E_46 = v5 - 4;
		}
		else
		{
			sub_1E700(a1x, a2);
			if (!(a1x->byte_0x3E_62 & 7))
			{
				v4 = a1x->dword_0xA0_160x->word_160_0x1c_28;
				if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v3x->array_0x4C_76) < v4)
					a1x->byte_0x45_69 = a2 + 2;
			}
		}
	}
	if (v6)
	{
		if (a1x->byte_0x49_73 == 13)
			sub_4A190(&a1x->array_0x4C_76, 10, 73);
		sub_4A190(&a1x->array_0x4C_76, 10, 0);
		sub_57F10(a1x);
	}
}

//----- (0001E700) --------------------------------------------------------
void sub_1E700(type_str_0x6E8E* a1x, char a2)//1ff700
{
	unsigned int v2; // eax
	int16_t v3; // ax
	int i; // edx
	int v5; // edx
	type_str_0x6E8E* v6x; // ecx
	type_str_0x6E8E* v7x; // edx
	char v8; // al
	char v9; // al
	type_str_0x6E8E* v10x; // eax
	int16_t v11; // ax
	char v12; // ch
	uint16_t v13; // ax
	type_str_0x6E8E* jx; // ecx

	v2 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v3 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v3;
		v2 = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52 && a1x->byte_0x40_64 != 27)
	{
		for (i = a1x->word_0x34_52; ; i = v6x->word_0x34_52)
		{
			v6x = x_DWORD_EA3E4[i];
			if (v6x == x_DWORD_EA3E4[0])
				break;
			v5 = v6x->dword_0x8;
			if (v5 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v5;
				a1x->word_0x26_38 = v6x->word_0x26_38;
				v2 = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		v2 = 2;
	}
	if (v2 < 1)
	{
		if (!v2)
		{
			sub_1B8C0(a1x);
			if (!(a1x->byte_0x3E_62 & 7))
			{
				v10x = x_DWORD_EA3E4[a1x->word_0x96_150];
				if (v10x > x_DWORD_EA3E4[0])
				{
					if (!(a1x->struct_byte_0xc_12_15.byte[2] & 4))
					{
						v11 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v10x->array_0x4C_76);
						v12 = a1x->byte_0x3E_62;
						a1x->word_0x20_32 = v11;
						if (!(v12 & 0x3F))
						{
							a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
							v13 = a1x->word_0x14_20;
							a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
							a1x->word_0x20_32 += ((a1x->word_0x14_20 & 0xFF) + 85) * (2 * ((signed int)(v13 % 0x9Du) / 79) - 1);
							a1x->word_0x20_32 &= 0x7ff;
						}
					}
					for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
					{
						if (jx->word_0x1A_26 != a1x->word_0x1A_26
							&& abs(a1x->array_0x4C_76.x - jx->array_0x4C_76.x) < a1x->array_0x52_82.xshift
							&& abs(a1x->array_0x4C_76.y - jx->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
						{
							a1x->word_0x20_32 = sub_581E0_maybe_tan2(&jx->array_0x4C_76, &a1x->array_0x4C_76);
							return;
						}
					}
				}
			}
		}
	}
	else if (v2 <= 1)
	{
		sub_1B8C0(a1x);
		v7x = x_DWORD_EA3E4[a1x->word_0x26_38];
		v8 = 1;
		if (v7x->byte_0x3F_63 == a1x->byte_0x3F_63 && v7x->byte_0x40_64 == a1x->byte_0x40_64)
			v8 = 0;
		if (a1x->word_0x28_40 == a1x->word_0x26_38)
			v8 = 0;
		if (v8)
		{
			a1x->word_0x96_150 = a1x->word_0x26_38;
			if (a1x->dword_0xA0_160x->byte_160_0x20_32 & 8)
				v9 = a2 + 6;
			else
				v9 = a2 + 2;
			a1x->byte_0x45_69 = v9;
			sub_6D8B0(a1x->word_0x28_40, 0x13u, 1);
		}
	}
	else if (v2 == 2)
	{
		a1x->word_0x2E_46 = 1;
	}
}

//----- (0001E9C0) --------------------------------------------------------
void sub_1E9C0(type_str_0x6E8E* a1x, int16_t a2)//1ff9c0
{
	int16_t v2; // cx
	type_str_0x6E8E* v3x; // esi
	char v4; // al
	int i; // eax
	char v6; // dl
	type_str_0x6E8E* v7x; // eax
	uint16_t v8; // di
	uint16_t v9; // ax
	type_str_0x6E8E* v10x; // esi
	unsigned int v11; // edi
	int v12; // esi
	int v13; // edx
	int j; // eax
	type_str_0x6E8E* v15x; // eax
	int16_t v16; // [esp+0h] [ebp-4h]

	//fix
	v7x = 0;
	//fix

	v2 = a1x->word_0x2E_46 - 1;
	v16 = 0;
	a1x->word_0x2E_46 = v2;
	if (v2 <= 0)
		goto LABEL_66;
	v3x = x_DWORD_EA3E4[a1x->word_0x28_40];
	v4 = 0;
	if (v2 <= a1x->word_0x30_48 - 16 && a1x->word_0x2E_46 >= 16)
	{
		if ((a1x->byte_0x3E_62 & 0x1C) == 16)
			v4 = a1x->byte_0x3E_62 & 3;
	}
	else
	{
		v4 = a1x->byte_0x3E_62 & 1 ? 0 : 2;
	}
	switch (v4)
	{
	case 0:
		a1x->struct_byte_0xc_12_15.byte[3] &= 0xF9u;
		break;
	case 1:
	case 3:
		a1x->struct_byte_0xc_12_15.byte[3] = (a1x->struct_byte_0xc_12_15.byte[3] | 2) & 0xFB;
		break;
	case 2:
		a1x->struct_byte_0xc_12_15.byte[3] = a1x->struct_byte_0xc_12_15.byte[3] & 0xF9 | 4;
		break;
	default:
		break;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v7x->word_0x34_52)
		{
			v7x = x_DWORD_EA3E4[i];
			if (v7x == x_DWORD_EA3E4[0])
				break;
			v6 = 0;
			if (a1x->word_0x2E_46 <= a1x->word_0x30_48 - 16 && a1x->word_0x2E_46 >= 16)
			{
				if ((a1x->byte_0x3E_62 & 0x1C) == 16)
					v6 = a1x->byte_0x3E_62 & 3;
			}
			else if (a1x->byte_0x3E_62 & 1)
			{
				v6 = 0;
			}
			else
			{
				v6 = 2;
			}
			switch (v6)
			{
			case 0:
				v7x->struct_byte_0xc_12_15.byte[3] &= 0xF9u;
				break;
			case 1:
			case 3:
				v7x->struct_byte_0xc_12_15.byte[3] = (v7x->struct_byte_0xc_12_15.byte[3] | 2) & 0xFB;
				break;
			case 2:
				v7x->struct_byte_0xc_12_15.byte[3] = v7x->struct_byte_0xc_12_15.byte[3] & 0xF9 | 4;
				break;
			default:
				continue;
			}
		}
	}
	if (v3x <= x_DWORD_EA3E4[0] || v3x->dword_0x8 <= 0)
	{
	LABEL_66:
		v16 = 1;
	}
	else
	{
		v8 = a1x->word_0x96_150;
		a1x->word_0x96_150 = a1x->word_0x28_40;
		sub_1E700(a1x, a2);
		v9 = v3x->word_0x96_150;
		if (!v9 && v3x->word_0x26_38)
			v9 = v3x->word_0x26_38;
		if (v9 && v8 != v9)
			v8 = v9;
		a1x->word_0x96_150 = v8;
		if (v8)
		{
			v10x = x_DWORD_EA3E4[v8];
			if (v10x > x_DWORD_EA3E4[0]
				&& (v10x->word_0x28_40 == a1x->word_0x28_40 && v10x->byte_0x49_73 == 14
					|| v10x->dword_0x8 <= 0
					|| v10x->struct_byte_0xc_12_15.byte[1] & 4))
			{
				a1x->word_0x96_150 = 0;
				v10x = x_DWORD_EA3E4[0];
			}
			if (v10x > x_DWORD_EA3E4[0])
			{
				v11 = a1x->dword_0xA0_160x->word_160_0x1c_28;
				if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v10x->array_0x4C_76) < v11)
				{
					a1x->word_0x96_150 = v10x - D41A0_BYTESTR_0.struct_0x6E8E;
					a1x->byte_0x45_69 = a2 + 2;
					sub_6D8B0(a1x->word_0x28_40, 0x18u, 1);
				}
			}
		}
	}
	if (v16)
	{
		a1x->byte_0x49_73 = 10;
		a1x->word_0x96_150 = 0;
		a1x->word_0x28_40 = 0;
		v12 = a1x->word_0x2E_46;
		v13 = a1x->word_0x30_48 - 16;
		a1x->byte_0x48_72 = a1x->word_0x4A_74;
		if (v12 <= v13)
			a1x->word_0x2E_46;
		switch (0)
		{
		case 0:
			a1x->struct_byte_0xc_12_15.byte[3] &= 0xF9u;
			break;
		case 1:
		case 3:
			a1x->struct_byte_0xc_12_15.byte[3] = (a1x->struct_byte_0xc_12_15.byte[3] | 2) & 0xFB;
			break;
		case 2:
			a1x->struct_byte_0xc_12_15.byte[3] = a1x->struct_byte_0xc_12_15.byte[3] & 0xF9 | 4;
			break;
		default:
			break;
		}
		if (a1x->word_0x34_52)
		{
			for (j = a1x->word_0x34_52; ; j = v15x->word_0x34_52)
			{
				v15x = x_DWORD_EA3E4[j];
				if (v15x == x_DWORD_EA3E4[0])
					break;
				if (a1x->word_0x2E_46 <= a1x->word_0x30_48 - 16)
					a1x->word_0x2E_46;
				switch (0)
				{
				case 0:
					v15x->struct_byte_0xc_12_15.byte[3] &= 0xF9u;
					break;
				case 1:
				case 3:
					v15x->struct_byte_0xc_12_15.byte[3] = (v15x->struct_byte_0xc_12_15.byte[3] | 2) & 0xFB;
					break;
				case 2:
					v15x->struct_byte_0xc_12_15.byte[3] = v15x->struct_byte_0xc_12_15.byte[3] & 0xF9 | 4;
					break;
				default:
					continue;
				}
			}
		}
	}
}

//----- (0001ED30) --------------------------------------------------------
type_str_0x6E8E* sub_1ED30(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//1ffd30
{
	type_str_0x6E8E* v2x; // ebx
	char v3; // dl
	int i; // edx
	char v5; // cl
	char v6; // cl
	type_str_0x6E8E* v7x; // edx
	int16_t v8; // dx
	type_str_0x6E8E* v9x; // eax
	uint16_t v10; // ax

	v2x = a2x;
	if (a1x->byte_0x49_73 == 14)
	{
		v3 = 0;
		if (a1x->word_0x30_48 - 16 >= a1x->word_0x2E_46 && a1x->word_0x2E_46 >= 16)
		{
			if ((a1x->byte_0x3E_62 & 0x1C) == 16)
				v3 = a1x->byte_0x3E_62 & 3;
		}
		else if (a1x->byte_0x3E_62 & 1)
		{
			v3 = 0;
		}
		else
		{
			v3 = 2;
		}
		switch (v3)
		{
		case 0:
			a1x->struct_byte_0xc_12_15.byte[3] &= 0xF9u;
			break;
		case 1:
		case 3:
			a1x->struct_byte_0xc_12_15.byte[3] = (a1x->struct_byte_0xc_12_15.byte[3] | 2) & 0xFB;
			break;
		case 2:
			a1x->struct_byte_0xc_12_15.byte[3] = a1x->struct_byte_0xc_12_15.byte[3] & 0xF9 | 4;
			break;
		default:
			break;
		}
		if (a1x->word_0x34_52)
		{
			for (i = a1x->word_0x34_52; ; i = v7x->word_0x34_52)
			{
				v7x = x_DWORD_EA3E4[i];
				if (v7x == x_DWORD_EA3E4[0])
					break;
				v5 = 0;
				if (a1x->word_0x2E_46 <= a1x->word_0x30_48 - 16 && a1x->word_0x2E_46 >= 16)
				{
					if ((a1x->byte_0x3E_62 & 0x1C) == 16)
						v5 = a1x->byte_0x3E_62 & 3;
				}
				else if (a1x->byte_0x3E_62 & 1)
				{
					v5 = 0;
				}
				else
				{
					v5 = 2;
				}
				switch (v5)
				{
				case 0:
					v7x->struct_byte_0xc_12_15.byte[3] &= 0xF9u;
					break;
				case 1:
				case 3:
					v6 = (v7x->struct_byte_0xc_12_15.byte[3] | 2) & 0xFB;
					goto LABEL_26;
				case 2:
					v6 = v7x->struct_byte_0xc_12_15.byte[3] & 0xF9 | 4;
				LABEL_26:
					v7x->struct_byte_0xc_12_15.byte[3] = v6;
					break;
				default:
					continue;
				}
			}
		}
		v8 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v8;
		if (v8 <= 0)
			return x_DWORD_EA3E4[0];
		v9x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v9x > x_DWORD_EA3E4[0])
		{
			if (a2x == v9x)
				return x_DWORD_EA3E4[0];
			if (v9x->word_0x96_150)
			{
				v10 = v9x->word_0x96_150;
			}
			else
			{
				if (!v9x->word_0x26_38)
					return v2x;
				v10 = v9x->word_0x26_38;
			}
			if (x_DWORD_EA3E4[v10] != a2x)
				return x_DWORD_EA3E4[0];
		}
	}
	return v2x;
}

//----- (0001EEE0) --------------------------------------------------------
int sub_1EEE0(type_str_0x6E8E* a1x)//1ffee0
{
	//int16_t *v1; // eax
	int16_t v2; // ST10_2
	int v3; // ST0C_4
	int v4; // ST08_4
	int16_t v5; // ax

	//v1 = *(int16_t **)(a1x->dword_0xA0_160);
	v2 = a1x->dword_0xA0_160x->word_160_0xe_14;
	v3 = a1x->dword_0xA0_160x->word_160_0xa_10;
	v4 = a1x->dword_0xA0_160x->word_160_0xc_12;
	v5 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	return sub_580E0(&a1x->array_0x4C_76, v5, v4, v3, v2);
}

//----- (0001EF20) --------------------------------------------------------
void sub_1EF20(type_str_0x6E8E* a1x)//1fff20
{
	sub_1BD90(a1x, 0);
}

//----- (0001EF40) --------------------------------------------------------
void sub_1EF40(/*type_str_0x6E8E* a1x,*/ type_str_0x6E8E* a2x)//1fff40
{
	sub_1BF90(a2x, 0);
	sub_1F0C0(/*a1x,*/ a2x);
	sub_1F040(a2x);
}

//----- (0001EF70) --------------------------------------------------------
void sub_1EF70(/*type_str_0x6E8E* a1x,*/ type_str_0x6E8E* a2x)//1fff70
{
	if ((uint16_t)sub_1C310(a2x, 0, (uint16_t(*)(type_str_0x6E8E*, type_str_0x6E8E*))sub_1CC20))
		sub_6E450_distance_sound(a2x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 8);
	sub_1F0C0(/*a1x,*/ a2x);
	sub_1F040(a2x);
}

//----- (0001EFD0) --------------------------------------------------------
void sub_1EFD0(/*type_str_0x6E8E* a1x,*/ type_str_0x6E8E* a2x)//1fffd0
{
	sub_1C560(a2x, 0);
	sub_1F0C0(/*a1x,*/ a2x);
	sub_1F040(a2x);
}

//----- (0001F000) --------------------------------------------------------
void sub_1F000(type_str_0x6E8E* a1x)//200000
{
	sub_1C890(a1x, 0);
}

//----- (0001F020) --------------------------------------------------------
void sub_1F020(type_str_0x6E8E* a1x)//200020
{
	sub_1C930(a1x);
}

//----- (0001F040) --------------------------------------------------------
void sub_1F040(type_str_0x6E8E* a1x)//200040
{
	int16_t v1; // ax
	int result; // eax

	a1x->array_0x4C_76.z += a1x->dword_0x10_16;
	v1 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	a1x->dword_0x10_16 -= 5;
	result = v1 + 256;
	if (a1x->array_0x4C_76.z >= result)
	{
		if (x_BYTE_D41B6)
		{
			result = sub_10C60(&a1x->array_0x4C_76);
			if (a1x->array_0x4C_76.z > (int16_t)result - 256)
				a1x->dword_0x10_16 = -150;
		}
	}
	else
	{
		a1x->dword_0x10_16 = 150;
	}
	//return result;
}

//----- (0001F0C0) --------------------------------------------------------
void sub_1F0C0(/*type_str_0x6E8E* a1x,*/ type_str_0x6E8E* a2x)//2000c0
{
	char v2; // ah
	int v3; // edi
	int i; // eax
	int v5; // eax
	//char v6; // cl
	type_str_0x6E8E* v7x; // esi
	int16_t v8; // ax
	int v9; // [esp+0h] [ebp-14h]
	int v10; // [esp+4h] [ebp-10h]
	int v11; // [esp+8h] [ebp-Ch]
	int v12; // [esp+Ch] [ebp-8h]
	char v13; // [esp+10h] [ebp-4h]

	type_str_0x6E8E* a1x = 0;

	v2 = a2x->byte_0x3D_61;
	if (v2)
	{
		a2x->byte_0x3D_61 = v2 - 1;
		if (a2x->byte_0x46_70)
		{
			if (a2x->word_0x2C_44)
			{
				v7x = x_DWORD_EA3E4[a2x->word_0x24_36];
				if (v7x <= x_DWORD_EA3E4[0] || v7x->dword_0x8 < 0 || v7x->struct_byte_0xc_12_15.byte[1] & 4)
				{
					a2x->byte_0x46_70 = 0;
					a2x->word_0x24_36 = 0;
				}
				else
				{
					if (a2x->word_0x24_36 & 1)
						v8 = v7x->word_0x1C_28 + 512;
					else
						v8 = v7x->word_0x1C_28 - 512;
					x_WORD_EB398ar = a2x->array_0x4C_76;
					sub_57FA0(&x_WORD_EB398ar, v8 & 0x7FF, 0, 48 * a2x->word_0x2C_44);
					sub_57CF0(a2x, &x_WORD_EB398ar);
					a2x->word_0x2C_44--;
				}
			}
			else
			{
				a2x->byte_0x46_70 = 0;
				a2x->word_0x24_36 = 0;
			}
		}
		else
		{
			v11 = (a2x->array_0x4C_76.x + 128) >> 8;
			v12 = (a2x->array_0x4C_76.y + 128) >> 8;
			v3 = sub_10080(0, 4);
			if (v3)
			{
				v13 = 0;
			LABEL_11:
				while (!v13 && sub_10130(v3, &v10, &v9) == 1)
				{
					for (i = x_WORD_15B4E0_source[((uint8_t)(v9 + v12) << 8) + (uint8_t)(v10 + v11)];
						;
						i = a1x->word_0x16_22)
					{
						a1x = x_DWORD_EA3E4[i];
						if (a1x == x_DWORD_EA3E4[0])
							break;
						if (a1x->byte_0x3F_63 == 9 && a1x->word_0x96_150 == a2x->word_0x1A_26)
						{
							v13 = 1;
							goto LABEL_11;
						}
					}
				}
				sub_10100(v3);
				if (v13)
				{
					v5 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
					//v6 = a2x->byte_0x46_70;
					a2x->word_0x2C_44 = 5;
					a2x->byte_0x46_70++;// = v6 + 1;
					a2x->word_0x24_36 = v5;
				}
			}
		}
	}
}

//----- (0001F300) --------------------------------------------------------
void sub_1F300(/*type_str_0x6E8E* a1x,*/ type_str_0x6E8E* a2x)//200300
{
	//int result; // eax

	sub_1D5D0(a2x, 0);
	//result = (uint8_t)(a2x->byte_0x49_73 - 1);
	switch (a2x->byte_0x49_73)
	{
	case 1:
	case 2:
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
	case 0xA:
	case 0xD:
	case 0xE:
	case 0x10:
		sub_1F0C0(/*a1x,*/ a2x);
		goto LABEL_3;
	case 0x11:
	LABEL_3:
		/*result = */sub_1F040(a2x);
		break;
	default:
		return;// result;
	}
	//return result;
}

//----- (0001F340) --------------------------------------------------------
void sub_1F340(type_str_0x6E8E* a1x)//200340
{
	sub_1BD90(a1x, 8);
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	if (!(a1x->word_0x14_20 % 0x4Du))
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 46);
	if (a1x->byte_0x45_69 == 14)
		a1x->word_0x82_130 = a1x->word_0x84_132;
}

//----- (0001F3C0) --------------------------------------------------------
void sub_1F3C0(type_str_0x6E8E* a1x)//2003c0
{
	sub_1BF90(a1x, 8);
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	if (!(a1x->word_0x14_20 % 0x4Du))
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 46);
	if (a1x->byte_0x45_69 == 14)
		a1x->word_0x82_130 = a1x->word_0x84_132;
}

//----- (0001F440) --------------------------------------------------------
void sub_1F440(type_str_0x6E8E* a1x)//200440
{
	a1x->byte_0x45_69 = 14;
	a1x->word_0x82_130 = a1x->word_0x84_132;
	sub_1F530(a1x);
}

//----- (0001F470) --------------------------------------------------------
void sub_1F470(type_str_0x6E8E* a1x)//200470
{
	sub_1C560(a1x, 8u);
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	if (!(a1x->word_0x14_20 % 0x4Du))
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 46);
	if (a1x->byte_0x45_69 == 14)
		a1x->word_0x82_130 = a1x->word_0x84_132;
}

//----- (0001F4F0) --------------------------------------------------------
void sub_1F4F0(type_str_0x6E8E* a1x)//2004f0
{
	sub_1C890(a1x, 8);
}

//----- (0001F510) --------------------------------------------------------
void sub_1F510(type_str_0x6E8E* a1x)//200510
{
	sub_1C930(a1x);
}

//----- (0001F530) --------------------------------------------------------
void sub_1F530(type_str_0x6E8E* a1x)//200530
{
	sub_1C980(a1x, 8);
	if (a1x->byte_0x45_69 != 14)
		a1x->word_0x82_130 = a1x->word_0x86_134;
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	if (!(a1x->word_0x14_20 % 0x2Bu))
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 46);
}

//----- (0001F5B0) --------------------------------------------------------
void sub_1F5B0(type_str_0x6E8E* a1x)//2005b0
{
	//int16_t result; // ax

	sub_1D5D0(a1x, 8);
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	if (!(a1x->word_0x14_20 % 0x4Du))
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 46);
	if (a1x->byte_0x45_69 == 14)
		a1x->word_0x82_130 = a1x->word_0x84_132;
	else
		a1x->word_0x82_130 = a1x->word_0x86_134;
	//a1x->word_0x82_130 = result;
	//return result;
}

//----- (0001F630) --------------------------------------------------------
int sub_1F630(type_str_0x6E8E* a1x)//200630
{
	signed int result; // eax

	result = sub_1BD90(a1x, 16);
	//BYTE1(result) = *(x_BYTE *)(a1 + 69);
	if (a1x->byte_0x45_69 == 18)
		a1x->dword_0x10_16 = 1;
	return result;
}

//----- (0001F660) --------------------------------------------------------
void sub_1F660(type_str_0x6E8E* a1x)//200660
{
	sub_1BF90(a1x, 16);
	if (a1x->byte_0x45_69 == 18)
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, (a1x->word_0x14_20 & 1) + 12);
		a1x->dword_0x10_16 = 1;
	}
}

//----- (0001F6D0) --------------------------------------------------------
void sub_1F6D0(type_str_0x6E8E* a1x)//2006d0
{
	//int v1; // edx
	int v2; // eax
	uint16_t v3; // dx
	//int v4; // eax
	Bit16s v4x;

	//v1 = a1x->dword_0x10_16;
	if (a1x->dword_0x10_16)
	{
		v2 = a1x->dword_0x10_16;
		a1x->dword_0x10_16--;
		if (v2 == 1)
			a1x->word_0x82_130 = 5 * a1x->word_0x84_132 >> 1;
	}
	v3 = a1x->word_0x96_150;
	if (v3)
	{
		v4x = a1x->array_0x4C_76.z
			- (x_DWORD_EA3E4[v3]->array_0x52_82.aa
				+ x_DWORD_EA3E4[v3]->array_0x4C_76.z);
		if (a1x->array_0x4C_76.z != x_DWORD_EA3E4[v3]->array_0x52_82.aa
			+ x_DWORD_EA3E4[v3]->array_0x4C_76.z)
		{
			if (v4x <= 0)
				v4x = -1;
			else
				v4x = 1;
		}
		a1x->array_0x4C_76.z += v4x * a1x->dword_0xA0_160x->word_160_0xe_14;
		if ((uint16_t)sub_1C310(a1x, 16, (uint16_t(*)(type_str_0x6E8E*, type_str_0x6E8E*))sub_1CE80))
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, (a1x->word_0x14_20 & 1) + 12);
			a1x->word_0x82_130 = -a1x->word_0x86_134;
			a1x->dword_0x10_16 = 3 * a1x->dword_0xA0_160x->word_160_0x1a_26;
		}
	}
	else
	{
		a1x->byte_0x45_69 = 17;
	}
	if (a1x->byte_0x45_69 != 18)
		a1x->word_0x82_130 = a1x->word_0x84_132;
}

//----- (0001F800) --------------------------------------------------------
void sub_1F800(type_str_0x6E8E* a1x)//200800
{
	//char result; // al

	/*result = */sub_1C560(a1x, 0x10u);
	if (a1x->byte_0x45_69 == 18)
		a1x->dword_0x10_16 = 1;
	//return result;
}

//----- (0001F830) --------------------------------------------------------
void sub_1F830(type_str_0x6E8E* a1x)//200830
{
	sub_1C890(a1x, 16);
}

//----- (0001F850) --------------------------------------------------------
void sub_1F850(type_str_0x6E8E* a1x)//200850
{
	sub_1C930(a1x);
}

//----- (0001F8A0) --------------------------------------------------------
void sub_1F8A0(type_str_0x6E8E* a1x)//2008a0
{
	int v1; // esi

	sub_1D5D0(a1x, 16);
	if (!(a1x->byte_0x3E_62 & 7) && (uint8_t)(a1x->byte_0x49_73 - 1) <= 8u)
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v1 = 2 * ((a1x->word_0x14_20 % 0x9Du) / 79);
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		a1x->word_0x20_32 += a1x->word_0x14_20 % 0x55u * (v1 - 1);
		a1x->word_0x20_32 &= 0x7ff;
	}
	if (a1x->byte_0x45_69 == 18)
		a1x->dword_0x10_16 = 1;
}

//----- (0001F950) --------------------------------------------------------
void sub_1F950(type_str_0x6E8E* a1x)//200950
{
	sub_1BD90(a1x, 24);
}

//----- (0001F970) --------------------------------------------------------
void sub_1F970(type_str_0x6E8E* a1x)//200970
{
	sub_1BF90(a1x, 24);
}

//----- (0001F990) --------------------------------------------------------
void sub_1F990(type_str_0x6E8E* a1x)//200990
{
	if ((uint16_t)sub_1C310(a1x, 24, (uint16_t(*)(type_str_0x6E8E*, type_str_0x6E8E*))sub_1CC20))
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 8);
}

//----- (0001F9E0) --------------------------------------------------------
void sub_1F9E0(type_str_0x6E8E* a1x)//2009e0
{
	/*return */sub_1C560(a1x, 0x18u);
}

//----- (0001FA00) --------------------------------------------------------
void sub_1FA00(type_str_0x6E8E* a1x)//200a00
{
	sub_1C890(a1x, 24);
}

//----- (0001FA20) --------------------------------------------------------
void sub_1FA20(type_str_0x6E8E* a1x)//200a20
{
	sub_1C930(a1x);
}

//----- (0001FA50) --------------------------------------------------------
void sub_1FA50(type_str_0x6E8E* a1x)//200a50
{
	sub_1D5D0(a1x, 24);
}

//----- (0001FA70) --------------------------------------------------------
void sub_1FA70(type_str_0x6E8E* a1x)//200a70
{
	//char result; // al

	/*result = */sub_1BD90(a1x, 32);
	if (a1x->byte_0x45_69 == 34)
		/*result = */sub_20060(a1x);
	//return result;
}

//----- (0001FAA0) --------------------------------------------------------
void sub_1FAA0(type_str_0x6E8E* a1x)//200aa0
{
	int16_t v1; // cx
	int jy; // eax
	int jk; // eax
	type_str_0x6E8E* jz; // eax
	int16_t v3; // ax
	int i; // edx
	int v5; // edi
	type_str_0x6E8E* v6x; // edx
	uint16_t v7; // ax
	//int v8; // edi
	int v9; // ecx
	type_str_0x6E8E* v10x; // esi
	type_str_0x6E8E* v11x; // edi
	int v12; // eax
	signed int v13; // ST14_4
	int16_t v14; // ax
	type_str_0x6E8E* v15x; // esi
	char v16; // dh
	int v17; // eax
	unsigned int v18; // esi
	type_str_0x6E8E* v19x; // edi
	int v20; // edx
	unsigned int v21; // edx
	int v22; // eax
	type_str_0x6E8E* v23x; // edi
	type_str_0x6E8E* kx; // esi
	int v25; // eax
	signed int v26; // ST14_4
	int16_t v27; // ax
	type_str_0x6E8E* v28x; // esi
	unsigned int v30; // [esp+0h] [ebp-28h]
	unsigned int v31; // [esp+4h] [ebp-24h]
	unsigned int v32; // [esp+8h] [ebp-20h]
	unsigned int v33; // [esp+14h] [ebp-14h]
	unsigned int v34; // [esp+18h] [ebp-10h]
	unsigned int v35; // [esp+1Ch] [ebp-Ch]
	unsigned int v36; // [esp+20h] [ebp-8h]

	v1 = a1x->str_0x5E_94.word_0x62_98;
	jy = 0;
	a1x->dword_0x10_16 = 0;
	if (v1)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v3 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v3;
		jy = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v6x->word_0x34_52)
		{
			v6x = x_DWORD_EA3E4[i];
			if (v6x == x_DWORD_EA3E4[0])
				break;
			v5 = v6x->dword_0x8;
			if (v5 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v5;
				a1x->word_0x26_38 = v6x->word_0x26_38;
				jy = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		jy = 2;
	}
	if (jy >= 1)
	{
		if (jy <= 1)
		{
			a1x->word_0x96_150 = a1x->word_0x26_38;
			a1x->byte_0x45_69 = 34;
			/*LOBYTE(j) = */sub_1EEE0(a1x);
		}
		else if (jy == 2)
		{
			//LOBYTE(jx) = 36;
			a1x->byte_0x45_69 = 36;
		}
		goto LABEL_68;
	}
	if (!jy)
	{
		sub_1B8C0(a1x);
		//LOWORD(jx) = (int16_t)a1x->byte_0x3E_62 / *(x_WORD *)(a1x->dword_0xA0_160 + 26);
		if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
		{
			if (a1x->word_0x96_150)
			{
				//LOWORD(jx) = a1x->word_0x96_150;
				v28x = x_DWORD_EA3E4[a1x->word_0x96_150];
				if (v28x->byte_0x3F_63 != 10 || v28x->byte_0x40_64 != 45)
				{
					a1x->word_0x96_150 = 0;
				}
				else if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v28x->array_0x4C_76) > 0x1000)
				{
					//LOWORD(jx) = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v28x->array_0x4C_76);
					a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v28x->array_0x4C_76);
				}
				else
				{
					a1x->dword_0x10_16 = 1;
					//LOBYTE(jx) = 36;
					a1x->byte_0x45_69 = 36;
					v28x->dword_0x10_16++;
				}
				goto LABEL_68;
			}
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v7 = a1x->word_0x14_20;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			a1x->word_0x20_32 += ((a1x->word_0x14_20 & 0xFF) + 85) * (2 * ((signed int)(v7 % 0x9Du) / 79) - 1);
			//v8 = a1x->dword_0xA0_160;
			a1x->word_0x20_32 &= 0x7ff;
			v9 = 4 * a1x->dword_0xA0_160x->word_160_0x1a_26;
			//jx = a1x->byte_0x3E_62 / v9;
			if (!(a1x->byte_0x3E_62 % v9))
			{
				//jx = *(int16_t *)(v8 + 28) * *(int16_t *)(v8 + 28);
				v32 = -1;
				v10x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
				v11x = 0;
				v31 = a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28;
				while (v10x > x_DWORD_EA3E4[0])
				{
					v12 = (int16_t)(v10x->array_0x4C_76.x - a1x->array_0x4C_76.x);
					v35 = (int16_t)(v10x->array_0x4C_76.y - a1x->array_0x4C_76.y)
						* (int16_t)(v10x->array_0x4C_76.y - a1x->array_0x4C_76.y)
						+ v12 * v12;
					//v35 = jx;
					if (v35 <= v31 && !(v10x->struct_byte_0xc_12_15.byte[0] & 0x20))
					{
						v13 = a1x->dword_0xA0_160x->word_160_0x1e_30;
						v14 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v10x->array_0x4C_76);
						//jx = (uint16_t)sub_582B0(a1x->word_0x1C_28, v14);
						if (sub_582B0(a1x->word_0x1C_28, v14) < v13)
						{
							//LOBYTE(jx) = v35;
							if (v35 < v32)
							{
								v11x = v10x;
								v32 = v35;
							}
						}
					}
					v10x = v10x->next_0;
				}
				v15x = v11x;
				if (v11x)
				{
					if (v11x <= x_DWORD_EA3E4[0]
						|| (v16 = v11x->byte_0x40_64) != 0 && v16 != 1
						|| /*(jx = v11x->dword_0xA4_164x, */!v11x->dword_0xA4_164x->word_0x248_584)
					{
						v15x = 0;
					}
				}
				if (!v15x)
				{
					v17 = a1x->dword_0xA0_160x->word_160_0x1c_28;
					v33 = v17 * v17;
					v18 = -1;
					v19x = 0;
					for (jz = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[36/4]; jz > x_DWORD_EA3E4[0]; jz= jz->next_0)
					{
						v20 = (int16_t)(jz->array_0x4C_76.x - a1x->array_0x4C_76.x);
						v21 = v20 * v20
							+ (int16_t)(jz->array_0x4C_76.y - a1x->array_0x4C_76.y)
							* (int16_t)(jz->array_0x4C_76.y - a1x->array_0x4C_76.y);
						if (v21 <= v33 && v21 < v18)
						{
							v19x = jz;
							v18 = v21;
						}
					}
					v15x = v19x;
				}
				if (v15x)
				{
					if (v15x->byte_0x3F_63 == 10 && v15x->byte_0x40_64 == 45)
						goto LABEL_68;
					a1x->word_0x96_150 = v15x - D41A0_BYTESTR_0.struct_0x6E8E;
					jk = 34;
				LABEL_60:
					a1x->byte_0x45_69 = jk;
					goto LABEL_68;
				}
				v22 = a1x->dword_0xA0_160x->word_160_0x1c_28;
				v23x = 0;
				v30 = v22 * v22;
				//jx = a1x->byte_0x40_64;
				v34 = -1;
				for (kx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; kx > x_DWORD_EA3E4[0]; kx = kx->next_0)
				{
					if (!kx->word_0x32_50 && kx != a1x)
					{
						v25 = (int16_t)(kx->array_0x4C_76.x - a1x->array_0x4C_76.x);
						v36 = (int16_t)(kx->array_0x4C_76.y - a1x->array_0x4C_76.y)
							* (int16_t)(kx->array_0x4C_76.y - a1x->array_0x4C_76.y)
							+ v25 * v25;
						//v36 = jx;
						if (v36 <= v30)
						{
							v26 = a1x->dword_0xA0_160x->word_160_0x1e_30;
							v27 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &kx->array_0x4C_76);
							//jx = (uint16_t)sub_582B0(a1x->word_0x1C_28, v27);
							if (sub_582B0(a1x->word_0x1C_28, v27) < v26)
							{
								//LOBYTE(jx) = v36;
								if (v36 < v34)
								{
									v23x = kx;
									v34 = v36;
								}
							}
						}
					}
				}
				if (v23x)
				{
					a1x->word_0x32_50 = v23x - D41A0_BYTESTR_0.struct_0x6E8E;
					jk = 35;
					goto LABEL_60;
				}
			}
		}
	}
LABEL_68:
	if (a1x->byte_0x45_69 == 34)
		/*LOBYTE(jx) = */sub_20060(a1x);
	//return jx;
}

//----- (0001FF40) --------------------------------------------------------
void sub_1FF40(type_str_0x6E8E* a1x)//200f40
{
	type_str_0x6E8E* resultx; // eax
	//Bit8u* resulty; // eax
	char v2; // cl

	sub_1C310(a1x, 32, (uint16_t(*)(type_str_0x6E8E*, type_str_0x6E8E*))sub_1CCE0);
	if (a1x->byte_0x45_69 != 34)
	{
		sub_200F0(a1x);
		return;
	}
	//resultx = (Bit8u*)(a1x->byte_0x3E_62 / a1x->dword_0xA0_160x->word_160_0x1a_26);
	if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
	{
		resultx = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (resultx > x_DWORD_EA3E4[0])
		{
			v2 = resultx->byte_0x40_64;
			if (!v2 || v2 == 1)
			{
				//resulty = x_DWORD_EA3E4[a1x->word_0x96_150]->dword_0xA4_164x;
				x_DWORD_EA3E4[a1x->word_0x96_150]->dword_0xA4_164x->word_0x248_584 = 200;
			}
		}
	}
	//return resultx;
}

//----- (0001FFE0) --------------------------------------------------------
void sub_1FFE0(type_str_0x6E8E* a1x)//200fe0
{
	//char result; // al

	sub_1C560(a1x, 0x20u);
	if (a1x->byte_0x45_69 == 34)
		sub_20060(a1x);
	//return result;
}

//----- (00020010) --------------------------------------------------------
void sub_20010(type_str_0x6E8E* a1x)//201010
{
	//int result; // eax

	if (a1x->dword_0x10_16)
		sub_57F10(a1x);
	else
		sub_1C890(a1x, 32);
	//return result;
}

//----- (00020040) --------------------------------------------------------
void sub_20040(type_str_0x6E8E* a1x)//201040
{
	sub_1C930(a1x);
}

//----- (00020060) --------------------------------------------------------
void sub_20060(type_str_0x6E8E* a1x)//201060
{
	signed int v1; // edx
	char result; // al

	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	v1 = a1x->word_0x14_20 % 0x14u;
	a1x->word_0x82_130 = 0;
	if (v1 <= 10)
		sub_49CD0(a1x, 206);
	else
		sub_49CD0(a1x, 1);
	sub_49EA0(a1x, 128, 256);
	a1x->byte_0x41_65 = x_DWORD_EA3E4[a1x->word_0x96_150]->byte_0x3F_63;
	result = x_DWORD_EA3E4[a1x->word_0x96_150]->byte_0x40_64;
	a1x->byte_0x42_66 = result;
	//return result;
}

//----- (000200F0) --------------------------------------------------------
void sub_200F0(type_str_0x6E8E* a1x)//2010f0
{
	//type_str_0x6E8E* resultx; // eax

	a1x->word_0x82_130 = a1x->word_0x84_132;
	sub_49CD0(a1x, 0);
	/*resultx = */sub_49EA0(a1x, 128, 256);
	a1x->byte_0x41_65 = 3;
	a1x->byte_0x42_66 = -1;
	//return resultx;
}

//----- (00020140) --------------------------------------------------------
void sub_20140(type_str_0x6E8E* a1x)//201140
{
	a1x->dword_0x10_16 = 0;
	sub_1D5D0(a1x, 32);
	if (a1x->byte_0x45_69 == 34)
		sub_20060(a1x);
}

//----- (00020370) --------------------------------------------------------
void sub_20370(type_str_0x6E8E* a1x)//201370
{
	int result; // eax
	int v2; // edx

	result = a1x->dword_0x10_16;
	v2 = result - 1;
	a1x->dword_0x10_16 = result - 1;
	if (result)
	{
		if (v2 < 16)
		{
			result = v2 / 2;
			if (!(v2 % 2))
				/*result = */sub_585A0(a1x);
		}
	}
	else
	{
		sub_20F20(a1x);
		a1x->byte_0x45_69 = 73;
		a1x->dword_0x10_16 = 400;
		a1x->byte_0x46_70 = 0;
		/*result = */sub_122A0(a1x);
	}
	//return result;
}

//----- (000203D0) --------------------------------------------------------
void sub_203D0(type_str_0x6E8E* a1x)//2013d0
{
	int v1; // edx
	char v2; // al
	unsigned int v3; // esi
	int16_t v4; // ax
	int i; // eax
	int v6; // edx
	type_str_0x6E8E* v7x; // eax
	unsigned int v8; // edx
	type_str_0x6E8E* v9x; // edi
	type_str_0x6E8E* jx; // esi
	int v11; // eax
	unsigned int v12; // eax
	unsigned int v13; // ST18_4
	uint16_t v14; // ax
	int v15; // eax
	type_str_0x6E8E* v16x; // edi
	type_str_0x6E8E* v17x; // esi
	int v18; // eax
	int v19; // edx
	int v20; // eax
	signed int v21; // ST18_4
	int16_t v22; // ax
	Bit8u* v23; // edx
	//type_str_0x6E8E* v23x; // edx
	//int v24; // esi
	unsigned int v25; // edx
	unsigned int v26; // edi
	type_str_0x6E8E* v27x; // esi
	type_str_0x6E8E* kx; // eax
	int v29; // edx
	unsigned int v30; // edx
	unsigned int v31; // edi
	type_str_0x6E8E* lx; // eax
	int v33; // edx
	unsigned int v34; // edx
	unsigned int v35; // edi
	type_str_0x6E8E* mx; // eax
	int v37; // edx
	unsigned int v38; // edx
	type_str_0x6E8E* v39x; // eax
	unsigned int v40; // [esp+0h] [ebp-24h]
	type_str_0x6E8E* v41x; // [esp+4h] [ebp-20h]
	unsigned int v42; // [esp+8h] [ebp-1Ch]
	unsigned int v43; // [esp+10h] [ebp-14h]
	unsigned int v44; // [esp+14h] [ebp-10h]
	unsigned int v45; // [esp+18h] [ebp-Ch]
	unsigned int v46; // [esp+1Ch] [ebp-8h]

	v1 = a1x->dword_0x10_16;
	if (v1 > 0)
	{
		a1x->dword_0x10_16 = v1 - 1;
		if (v1 == 1)
			sub_20F60(a1x);
	}
	v2 = a1x->byte_0x46_70;
	if (v2)
	{
		if (v2 == 1)
			sub_20940(a1x);
		goto LABEL_85;
	}
	if (a1x->byte_0x39_57)
		a1x->dword_0x10_16 = 400;
	v3 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v4 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v3 = 1;
		a1x->word_0x26_38 = v4;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v7x->word_0x34_52)
		{
			v7x = x_DWORD_EA3E4[i];
			if (v7x == x_DWORD_EA3E4[0])
				break;
			v6 = v7x->dword_0x8;
			if (v6 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v6;
				v3 = 1;
				a1x->word_0x26_38 = v7x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v3 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if (v3 >= 1)
	{
		if (v3 <= 1)
		{
			a1x->word_0x96_150 = a1x->word_0x26_38;
			a1x->byte_0x45_69 = 74;
		}
		else if (v3 == 2)
		{
			a1x->byte_0x45_69 = 76;
		}
		goto LABEL_85;
	}
	if (!v3)
	{
		sub_1B8C0(a1x);
		if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
		{
			v8 = -1;
			v9x = 0;
			for (jx = x_D41A0_BYTEARRAY_4_struct.dword_38519; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
			{
				if (jx->byte_0x40_64 == 2 && jx->word_0x1A_26 != a1x->word_0x1A_26)
				{
					v11 = (int16_t)(jx->array_0x4C_76.x - a1x->array_0x4C_76.x);
					v12 = v11 * v11
						+ (int16_t)(jx->array_0x4C_76.y - a1x->array_0x4C_76.y)
						* (int16_t)(jx->array_0x4C_76.y - a1x->array_0x4C_76.y);
					if (v12 < v8)
					{
						v9x = jx;
						v8 = v12;
					}
				}
			}
			v41x = v9x;
			if (v9x)
			{
				a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v9x->array_0x4C_76);
				v13 = v9x->array_0x52_82.xshift + a1x->dword_0xA0_160x->word_160_0x1c_28;
				if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v9x->array_0x4C_76) > v13)
				{
					v41x = 0;
				}
				else
				{
					a1x->word_0x96_150 = v9x-D41A0_BYTESTR_0.struct_0x6E8E;
					a1x->byte_0x45_69 = 74;
				}
			}
			else
			{
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v14 = a1x->word_0x14_20;
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				a1x->word_0x20_32 += ((a1x->word_0x14_20 & 0xFF) + 85) * (2 * ((signed int)(v14 % 0x9Du) / 79) - 1);
				a1x->word_0x20_32 &= 0x7ff;
			}
			if (!v41x)
			{
				if (a1x->byte_0x39_57)
				{
					v15 = a1x->dword_0xA0_160x->word_160_0x1c_28;
					v16x = 0;
					v44 = -1;
					v17x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
					v42 = v15 * v15;
					while (v17x > x_DWORD_EA3E4[0])
					{
						if (v17x->word_0x1A_26 != a1x->word_0x1A_26)
						{
							v18 = (int16_t)(v17x->array_0x4C_76.x - a1x->array_0x4C_76.x);
							v19 = v18 * v18;
							v20 = (int16_t)(v17x->array_0x4C_76.y - a1x->array_0x4C_76.y);
							v43 = v20 * v20 + v19;
							if (v43 <= v42 && !(v17x->struct_byte_0xc_12_15.byte[0] & 0x20))
							{
								v21 = a1x->dword_0xA0_160x->word_160_0x1e_30;
								v22 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v17x->array_0x4C_76);
								if ((uint16_t)sub_582B0(a1x->word_0x1C_28, v22) < v21 && v43 < v44)
								{
									v16x = v17x;
									v44 = v43;
								}
							}
						}
						v17x = v17x->next_0;
					}
					v41x = v16x;
					if (v16x)
					{
						a1x->word_0x96_150 = v16x-D41A0_BYTESTR_0.struct_0x6E8E;
						a1x->byte_0x45_69 = 74;
					}
				}
				//v23x = v41x;
				if (!v41x)
				{
					LOBYTE(v23) = a1x->byte_0x3E_62;
					//v24 = a1x->dword_0xA0_160;
					// FIXME: types
					// v25 = (int)v23 / a1x->dword_0xA0_160x->word_160_0x1a_26 % 3;
					if (v25 < 1)
					{
						if (v25)
						{
						LABEL_79:
							if (v41x)
							{
								if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v41x->array_0x4C_76) <= 0x600)
								{
									x_WORD_EB398ar = v41x->array_0x4C_76;
									sub_57F10(v41x);
									v39x = sub_4A190(&x_WORD_EB398ar, 5, 9);
									if (v39x)
									{
										if (x_DWORD_EA3E4[a1x->word_0x1A_26]->byte_0x3F_63 == 3)
											v39x->word_0x1A_26 = a1x->word_0x1A_26;
									}
								}
							}
							goto LABEL_85;
						}
						v45 = a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28;
						v26 = -1;
						v27x = 0;
						for (kx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[16/4]; kx > x_DWORD_EA3E4[0]; kx = kx->next_0)
						{
							v29 = (int16_t)(kx->array_0x4C_76.x - a1x->array_0x4C_76.x);
							v30 = v29 * v29
								+ (int16_t)(kx->array_0x4C_76.y - a1x->array_0x4C_76.y)
								* (int16_t)(kx->array_0x4C_76.y - a1x->array_0x4C_76.y);
							if (v30 <= v45 && v30 < v26)
							{
								v27x = kx;
								v26 = v30;
							}
						}
					}
					else if (v25 <= 1)
					{
						v46 = a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28;
						v31 = -1;
						v27x = 0;
						for (lx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[48/4]; lx > x_DWORD_EA3E4[0]; lx = lx->next_0)
						{
							v33 = (int16_t)(lx->array_0x4C_76.x - a1x->array_0x4C_76.x);
							v34 = v33 * v33
								+ (int16_t)(lx->array_0x4C_76.y - a1x->array_0x4C_76.y)
								* (int16_t)(lx->array_0x4C_76.y - a1x->array_0x4C_76.y);
							if (v34 <= v46 && v34 < v31)
							{
								v27x = lx;
								v31 = v34;
							}
						}
					}
					else
					{
						if (v25 != 2)
							goto LABEL_79;
						v40 = a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28;
						v35 = -1;
						v27x = 0;
						for (mx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[52/4]; mx > x_DWORD_EA3E4[0]; mx = mx->next_0)
						{
							v37 = (int16_t)(mx->array_0x4C_76.x - a1x->array_0x4C_76.x);
							v38 = v37 * v37
								+ (int16_t)(mx->array_0x4C_76.y - a1x->array_0x4C_76.y)
								* (int16_t)(mx->array_0x4C_76.y - a1x->array_0x4C_76.y);
							if (v38 <= v40 && v38 < v35)
							{
								v27x = mx;
								v35 = v38;
							}
						}
					}
					v41x = v27x;
					goto LABEL_79;
				}
			}
		}
	}
LABEL_85:
	if (a1x->byte_0x45_69 == 74)
		sub_20EC0(a1x);
}

//----- (00020940) --------------------------------------------------------
void sub_20940(type_str_0x6E8E* a1x)//201940
{
	signed int v1; // ecx
	int16_t v2; // ax
	int i; // eax
	int v4; // edx
	type_str_0x6E8E* v5x; // eax
	int16_t v6; // ax
	int v7; // edx
	//int v8; // esi
	int v9; // edx
	type_str_0x6E8E* v9x; // edx
	unsigned int v10; // edi
	type_str_0x6E8E* jx; // ecx
	int v12; // eax
	unsigned int v13; // eax
	unsigned int v14; // edi
	type_str_0x6E8E* kx; // ecx
	int v16; // eax
	unsigned int v17; // eax
	unsigned int v18; // edi
	type_str_0x6E8E* lx; // ecx
	int v20; // eax
	unsigned int v21; // eax
	int v22; // eax
	//Bit8u* v23; // eax
	type_str_0x6E8E* v23x; // eax
	type_str_0x6E8E* v24x; // [esp+10h] [ebp-4h]


	//fix
	v9x = 0;
	//fix

	v1 = 0;
	v24x = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v1 = 1;
		a1x->word_0x26_38 = v2;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				v1 = 1;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v1 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if ((unsigned int)v1 >= 1)
	{
		if ((unsigned int)v1 <= 1)
		{
			v6 = a1x->word_0x26_38;
			a1x->byte_0x45_69 = 74;
			a1x->word_0x96_150 = v6;
		}
		else if (v1 == 2)
		{
			a1x->byte_0x45_69 = 76;
		}
		return;
	}
	if (v1)
		return;
	v7 = a1x->dword_0x10_16;
	if (v7 < 0)
	{
		a1x->dword_0x10_16 = v7 + 1;
		if (v7 == -1)
			sub_20F80(a1x);
		return;
	}
	if (a1x->byte_0x39_57)
	{
		a1x->dword_0x10_16 = -50;
		return;
	}
	LOBYTE(v1) = a1x->byte_0x3E_62;
	//v8 = a1x->dword_0xA0_160;
	if (!(v1 % a1x->dword_0xA0_160x->word_160_0x1a_26))
	{
		v9 = (v1 / a1x->dword_0xA0_160x->word_160_0x1a_26 % 3);
		if (v9 < 1)
		{
			if (v9)
			{
			LABEL_50:
				if (v24x)
				{
					v22 = (v24x->array_0x4C_76.x - a1x->array_0x4C_76.x);
					if (sub_7277A_radix_3d(
						(v24x->array_0x4C_76.y - a1x->array_0x4C_76.y) * (v24x->array_0x4C_76.y - a1x->array_0x4C_76.y)
						+ v22 * v22
						+ (v24x->array_0x4C_76.z - a1x->array_0x4C_76.z) * (v24x->array_0x4C_76.z - a1x->array_0x4C_76.z)) <= 0x600)
					{
						x_WORD_EB398ar = v24x->array_0x4C_76;
						sub_57F10(v24x);
						v23x = sub_4A190(&x_WORD_EB398ar, 5, 9);
						if (v23x)
							v23x->word_0x1A_26 = a1x->word_0x1A_26;
					}
				}
				return;
			}
			v10 = -1;
			for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[16/4]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
			{
				v12 = (jx->array_0x4C_76.x - a1x->array_0x4C_76.x);
				v13 = v12 * v12
					+ (jx->array_0x4C_76.y - a1x->array_0x4C_76.y)
					* (jx->array_0x4C_76.y - a1x->array_0x4C_76.y);
				if (v13 <= a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28 && v13 < v10)
				{
					v9x = jx;
					v10 = v13;
				}
			}
		}
		else if (v9 <= 1)
		{
			v14 = -1;
			v9 = 0;
			for (kx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[48/4]; kx > x_DWORD_EA3E4[0]; kx = kx->next_0)
			{
				v16 = (kx->array_0x4C_76.x - a1x->array_0x4C_76.x);
				v17 = v16 * v16
					+ (kx->array_0x4C_76.y - a1x->array_0x4C_76.y)
					* (kx->array_0x4C_76.y - a1x->array_0x4C_76.y);
				if (v17 <= a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28 && v17 < v14)
				{
					v9x = kx;
					v14 = v17;
				}
			}
		}
		else
		{
			if (v9 != 2)
				goto LABEL_50;
			v18 = -1;
			v9 = 0;
			for (lx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[52/4]; lx > x_DWORD_EA3E4[0]; lx = lx->next_0)
			{
				v20 = (lx->array_0x4C_76.x - a1x->array_0x4C_76.x);
				v21 = v20 * v20
					+ (lx->array_0x4C_76.y - a1x->array_0x4C_76.y)
					* (lx->array_0x4C_76.y - a1x->array_0x4C_76.y);
				if (v21 <= a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28 && v21 < v18)
				{
					v9x = lx;
					v18 = v21;
				}
			}
		}
		v24x = v9x;
		goto LABEL_50;
	}
}

//----- (00020C50) --------------------------------------------------------
void sub_20C50(type_str_0x6E8E* a1x)//201c50
{
	unsigned int v1; // esi
	int16_t v2; // ax
	int i; // eax
	int v4; // eax
	type_str_0x6E8E* v5x; // ecx
	type_str_0x6E8E* v6x; // eax
	type_str_0x6E8E* v7x; // esi
	//int v8; // edi
	unsigned int v9; // edi

	v1 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v1 = 1;
		a1x->word_0x26_38 = v2;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				v1 = 1;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v1 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if (v1 >= 1)
	{
		if (v1 <= 1)
		{
			a1x->word_0x96_150 = a1x->word_0x26_38;
		}
		else if (v1 == 2)
		{
			a1x->byte_0x45_69 = 76;
		}
		goto LABEL_32;
	}
	if (v1)
		goto LABEL_32;
	sub_1B8C0(a1x);
	v6x = sub_1ED30(a1x, x_DWORD_EA3E4[a1x->word_0x96_150]);
	v7x = v6x;
	if (v6x <= x_DWORD_EA3E4[0] || v6x->dword_0x8 < 0 || v6x->struct_byte_0xc_12_15.byte[1] & 4)
	{
	LABEL_31:
		a1x->byte_0x45_69 = 73;
		goto LABEL_32;
	}
	if (!(a1x->byte_0x3E_62 % 10))
		a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v6x->array_0x4C_76);
	//v8 = a1x->dword_0xA0_160;
	if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
	{
		v9 = a1x->dword_0xA0_160x->word_160_0x1c_28;
		if (v7x->byte_0x3F_63 == 3 && v7x->byte_0x40_64 == 2)
			v9 += v7x->array_0x52_82.xshift;
		if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v7x->array_0x4C_76) < v9)
		{
			sub_1CDA0(a1x, v7x);
			goto LABEL_32;
		}
		goto LABEL_31;
	}
LABEL_32:
	if (a1x->byte_0x45_69 != 74)
		sub_20F20(a1x);
}

//----- (00020E50) --------------------------------------------------------
void sub_20E50(type_str_0x6E8E* a1x)//201e50
{
	//char result; // al

	/*result = */sub_1C560(a1x, 0x48u);
	if (a1x->byte_0x45_69 == 74)
		/*result = */sub_20EC0(a1x);
	//return result;
}

//----- (00020E80) --------------------------------------------------------
void sub_20E80(type_str_0x6E8E* a1x)//201e80
{
	sub_1C890(a1x, 72);
}

//----- (00020EA0) --------------------------------------------------------
void sub_20EA0(type_str_0x6E8E* a1x)//201ea0
{
	sub_1C930(a1x);
}

//----- (00020EC0) --------------------------------------------------------
void sub_20EC0(type_str_0x6E8E* a1x)//201ec0
{
	type_str_0x6E8E* v1x; // esi
	//char result; // al

	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	if (a1x->word_0x1A_26 == v1x->word_0x1A_26)
	{
		a1x->byte_0x45_69 = 73;
	}
	else
	{
		a1x->word_0x82_130 = 0;
		sub_49CD0(a1x, 202);
		a1x->byte_0x41_65 = v1x->byte_0x3F_63;
		//result = v1x->byte_0x40_64;
		a1x->byte_0x42_66 = v1x->byte_0x40_64;
	}
	//return result;
}

//----- (00020F20) --------------------------------------------------------
void sub_20F20(type_str_0x6E8E* a1x)//201f20
{
	//int result; // eax

	a1x->word_0x82_130 = a1x->word_0x84_132;
	/*result = */sub_49CD0(a1x, 201);
	a1x->byte_0x41_65 = 3;
	a1x->byte_0x42_66 = -1;
	a1x->dword_0x10_16 = 50;
	a1x->byte_0x46_70 = 0;
	//return result;
}

//----- (00020F60) --------------------------------------------------------
void sub_20F60(type_str_0x6E8E* a1x)//201f60
{
	//int result; // eax

	/*result = */sub_49CD0(a1x, 201);
	a1x->byte_0x46_70 = 1;
	//return result;
}

//----- (00020F80) --------------------------------------------------------
void sub_20F80(type_str_0x6E8E* a1x)//201f80
{
	a1x->byte_0x46_70 = 0;
	a1x->dword_0x10_16 = 400;
	return sub_49CD0(a1x, 201);
}

//----- (00020FC0) --------------------------------------------------------
void sub_20FC0(type_str_0x6E8E* a1x)//201fc0
{
	sub_1D5D0(a1x, 72);
	if (a1x->byte_0x45_69 == 74)
		sub_20EC0(a1x);
}

//----- (00021030) --------------------------------------------------------
void sub_21030(type_str_0x6E8E* a1x)//202030
{
	type_str_0x6E8E* v1x; // esi
	uint8_t v2; // al
	//int v3; // eax
	char v4; // dh
	int v5; // edx
	int v6; // ecx
	int v7; // edi
	int v8; // eax
	//int v9; // edi
	int v10; // edx
	//int v11; // esi
	int v12; // eax
	type_str_0x6E8E* v13x; // eax
	int16_t v14; // dx
	int v15; // ecx
	int v16; // edi
	char v17; // ah
	type_str_0x6E8E* ix; // eax
	char v19; // dl
	int v20; // ecx
	type_str_0x6E8E* v21x; // eax
	int16_t v22; // dx
	char v24; // [esp+0h] [ebp-4h]

	v24 = 0;
	sub_223E0();
	v1x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	if (sub_21F60(a1x))
		a1x->word_0x2A_42 |= 1u;
	v2 = a1x->byte_0x46_70;
	if (v2 > 1u && (v2 < 0xCu || v2 > 0xFu) && a1x->dword_0x8 >= 10)
		sub_22190(a1x);
	switch (a1x->byte_0x46_70)
	{
	case 0:
		//v3 = (int)x_D41A0_BYTEARRAY_0;
		D41A0_BYTESTR_0.word_0x36548 = 1;
		a1x->byte_0x46_70 = 1;
		a1x->word_0x2A_42 = 8;
		a1x->dword_0x10_16 = 15;
		//LOWORD(v3) = *(x_WORD *)(2124 * *(int16_t *)(x_D41A0_BYTEARRAY_0 + 12) + x_D41A0_BYTEARRAY_0 + 11240);
		a1x->word_0x2C_44 = 22;
		a1x->word_0x96_150 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240;
		//*(Bit16s*)& x_DWORD_D9F50ar[0x800+0x7a] = 60;
		*(Bit16s*)& x_BYTE_D9F50[0x87a] = 60;
		sub_22490(a1x);
		goto LABEL_10;
	case 1:
	LABEL_10:
		if (sub_21490(a1x))
		{
			v4 = a1x->word_0x2A_42;
			a1x->byte_0x46_70 = 4;
			a1x->word_0x2A_42 = v4 | 0x80;
		}
		goto LABEL_48;
	case 2:
		v5 = 26 * a1x->dword_0x8;
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v6 = a1x->dword_0x4;
		v7 = a1x->word_0x14_20 & 7;
		a1x->byte_0x46_70 = 3;
		v8 = v5 / v6 - v7;
		a1x->dword_0x10_16 = v8;
		if (v8 < 3)
			a1x->dword_0x10_16 = 3;
		if (a1x->dword_0x10_16 > 26)
			a1x->dword_0x10_16 = 26;
		a1x->byte_0x44_68 = 0;
		a1x->word_0x2C_44 = 22;
		sub_221F0(a1x, 341);
		goto LABEL_17;
	case 3:
	LABEL_17:
		if (a1x->dword_0x8 < 10)
		{
			a1x->byte_0x46_70 = 12;
			goto LABEL_48;
		}
		if (a1x->word_0x2A_42 & 1)
			goto LABEL_26;
		a1x->dword_0x10_16--;
		if ((signed int)sub_58490_radix_3d_2(&v1x->array_0x4C_76, &a1x->array_0x4C_76) < 0x2000 && a1x->dword_0x10_16 <= 0)
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			if ((signed int)(a1x->word_0x14_20 % 0xCu) < 9)
			{
				a1x->byte_0x46_70 = 4;
				goto LABEL_48;
			}
		LABEL_26:
			a1x->byte_0x46_70 = 6;
		}
	LABEL_48:
		if (v24 && !(a1x->byte_0x3E_62 & 3))
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 63);
		sub_22270(a1x);
		return;
	case 4:
		a1x->byte_0x46_70 = 5;
		a1x->dword_0x10_16 = 6;
		a1x->byte_0x44_68 = 2;
		a1x->word_0x2C_44 = 113;
		goto LABEL_25;
	case 5:
	LABEL_25:
		//v9 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16--;// = v9;
		if (a1x->dword_0x10_16 <= 0)
			goto LABEL_26;
		goto LABEL_48;
	case 6:
		a1x->byte_0x46_70 = 7;
		a1x->dword_0x10_16 = 16;
		a1x->byte_0x44_68 = 0;
		a1x->word_0x2C_44 = 113;
		sub_221F0(a1x, 343);
		goto LABEL_28;
	case 7:
	LABEL_28:
		v10 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16 = v10;
		if (v10 <= 0)
			a1x->byte_0x46_70 = 8;
		goto LABEL_48;
	case 8:
		a1x->byte_0x46_70 = 9;
		a1x->dword_0x10_16 = 0;
		a1x->byte_0x44_68 = 3;
		a1x->word_0x2C_44 = 22;
		sub_221F0(a1x, 342);
		sub_21850(a1x);
		goto LABEL_31;
	case 9:
	LABEL_31:
		sub_21AB0(a1x);
		//v11 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16--;// = v11;
		if (a1x->dword_0x10_16 <= 0)
			a1x->byte_0x46_70 = 10;
		goto LABEL_48;
	case 0xA:
		a1x->byte_0x46_70 = 11;
		a1x->dword_0x10_16 = 16;
		a1x->word_0x2C_44 = 22;
		sub_221F0(a1x, 344);
		goto LABEL_34;
	case 0xB:
	LABEL_34:
		v12 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16 = v12;
		if (v12 <= 0)
			a1x->byte_0x46_70 = 2;
		goto LABEL_48;
	case 0xC:
		a1x->byte_0x46_70 = 13;
		a1x->dword_0x10_16 = 32;
		v13x = sub_4A190(&a1x->array_0x4C_76, 10, 17);
		if (v13x)
		{
			v14 = v1x->word_0x1A_26;
			v13x->array_0x4C_76.z = 0;
			v13x->dword_0x4 = 70;
			v13x->word_0x1A_26 = v14;
			v13x->dword_0x8 = v13x->dword_0x4;
		}
		goto LABEL_38;
	case 0xD:
	LABEL_38:
		v24 = 1;
		v15 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16 = v15;
		if (v15 <= 0)
		{
			a1x->byte_0x46_70 = 14;
			a1x->dword_0x10_16 = 32;
			sub_221F0(a1x, 345);
		}
		goto LABEL_48;
	case 0xE:
		v24 = 1;
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 10);
		v16 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16 = v16;
		if (v16 <= 0)
		{
			a1x->byte_0x46_70 = 15;
			a1x->dword_0x10_16 = 60;
			v17 = a1x->struct_byte_0xc_12_15.byte[0];
			a1x->dword_0x8 = -1;
			a1x->struct_byte_0xc_12_15.byte[0] = v17 | 1;
			sub_1B5F0();
			for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38523; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
			{
				v19 = ix->struct_byte_0xc_12_15.byte[1];
				ix->dword_0x4 = 140;
				ix->struct_byte_0xc_12_15.byte[1] = v19 | 0x20;
				ix->dword_0x8 = ix->dword_0x4;
			}
		}
		goto LABEL_48;
	case 0xF:
		sub_1B5F0();
		v20 = a1x->dword_0x10_16 - 1;
		v24 = 1;
		a1x->dword_0x10_16 = v20;
		if (v20 <= 0)
		{
			v21x = sub_4A190(&a1x->array_0x4C_76, 10, 9);
			if (v21x)
			{
				v22 = v1x->word_0x1A_26;
				v21x->dword_0x8 = 32;
				v21x->dword_0x4 = 11;
				v21x->word_0x1A_26 = v22;
				D41A0_BYTESTR_0.byte_0x36E03 = 1;
			}
			D41A0_BYTESTR_0.word_0x36548 = 0;
			sub_57F10(a1x);
		}
		goto LABEL_48;
	default:
		goto LABEL_48;
	}
}

//----- (00021490) --------------------------------------------------------
char sub_21490(type_str_0x6E8E* a1x)//202490
{
	char v1; // cl
	int v2; // edx
	int v3; // esi
	int v4; // esi
	uint16_t v5; // ax
	char v6; // ah
	unsigned int v7; // esi
	char v8; // dh
	char v9; // al
	char v10; // dl
	char v11; // cl
	int v12; // edx
	char v13; // ah
	type_str_0x6E8E* ix; // esi
	int v15; // eax
	type_str_0x6E8E* v16x; // eax
	axis_3d v18x; // [esp+0h] [ebp-30h]
	//int16_t v19; // [esp+4h] [ebp-2Ch]
	int v20; // [esp+8h] [ebp-28h]
	int v21; // [esp+Ch] [ebp-24h]
	int v22; // [esp+10h] [ebp-20h]
	int v23; // [esp+14h] [ebp-1Ch]
	int v24; // [esp+18h] [ebp-18h]
	int v25; // [esp+1Ch] [ebp-14h]
	char v26; // [esp+20h] [ebp-10h]
	char v27; // [esp+24h] [ebp-Ch]
	char v28; // [esp+28h] [ebp-8h]
	uint8_t v29; // [esp+2Ch] [ebp-4h]

	v1 = a1x->word_0x2A_42;
	v27 = 1;
	v29 = 0;
	v26 = 0;
	if (v1 & 8)
	{
		v25 = (a1x->array_0x4C_76.x + 128) >> 8;
		v2 = a1x->dword_0x10_16;
		v22 = (a1x->array_0x4C_76.y + 128) >> 8;
		if (v2 < 0)
		{
			v28 = 1;
			v4 = sub_10080(0, 7);
			if (v4)
			{
				while (sub_10130(v4, &v21, &v20) == 1 && v28)
				{
					LOBYTE(v5) = v21 + v25;
					HIBYTE(v5) = v20 + v22;
					if (x_BYTE_10B4E0_terraintype[v5])
						v28 = 0;
				}
				sub_10100(v4);
			}
			if (v28)
			{
				v6 = a1x->word_0x2A_42 | 4;
				a1x->dword_0x10_16 = 70;
				a1x->word_0x2A_42 = v6 & 0xF7;
			}
			else
			{
				a1x->dword_0x10_16 = 15;
			}
		}
		else
		{
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 10);
			v3 = sub_10080(0, 15 - a1x->dword_0x10_16);
			if (v3)
			{
				while (sub_10130(v3, &v21, &v20) == 1)
					sub_56F10(v21 + v25, v20 + v22, -1, 0);
				sub_10100(v3);
			}
			a1x->dword_0x10_16--;
		}
	}
	else if (v1 & 4)
	{
		sub_1B5F0();
		v7 = a1x->dword_0x10_16;
		a1x->dword_0x10_16 = v7 - 1;
		if (v7 < 0x11)
		{
			if (v7)
			{
				if (v7 == 1)
					v29 = 3;
			}
			else
			{
				a1x->word_0x2A_42 = (a1x->word_0x2A_42 | 0x10) & 0xFB;
				v8 = a1x->struct_byte_0xc_12_15.byte[0];
				a1x->dword_0x10_16 = 1;
				a1x->struct_byte_0xc_12_15.byte[0] = v8 & 0xFE;
			}
		}
		else if (v7 <= 0x11)
		{
			v29 = 2;
		}
		else if (v7 >= 0x23)
		{
			if (v7 <= 0x23)
			{
				v29 = 1;
			}
			else if (v7 == 70)
			{
				D41A0_BYTESTR_0.byte_0x36E00 = 0;

			}
		}
	}
	else if (v1 & 0x10)
	{
		if (a1x->dword_0x10_16 == 1)
		{
			v11 = a1x->word_0x2A_42;
			a1x->dword_0x10_16 = 0;
			a1x->word_0x2A_42 = v11 & 0xBF;
		}
		else if (v1 & 0x40)
		{
			if (sub_58490_radix_3d_2(&x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]->array_0x4C_76,
					&a1x->array_0x4C_76) >= 0xA00)
			{
				a1x->word_0x2A_42 &= 0xBFu;
			}
			else
			{
				v9 = a1x->word_0x2A_42;
				v10 = a1x->struct_byte_0xc_12_15.byte[2];
				a1x->dword_0x10_16 = 30;
				v9 |= 0x20u;
				a1x->word_0x2A_42 = v9;
				a1x->struct_byte_0xc_12_15.byte[2] = v10 & 0x7F;
				a1x->word_0x2A_42 = v9 & 0xEF;
			}
		}
	}
	else if (v1 & 0x20)
	{
		if (a1x->dword_0x10_16 >= 600)
			v27 = 0;
		v12 = a1x->dword_0x10_16 + 30;
		a1x->dword_0x10_16 = v12;
		if (v12 >= 1200)
		{
			v13 = a1x->word_0x2A_42;
			a1x->dword_0x10_16 = 1200;
			a1x->word_0x2A_42 = v13 & 0xDF;
		}
		*(Bit16s*)& x_BYTE_D9F50[0x87a] = a1x->dword_0x10_16;
	}
	else
	{
		v26 = 1;
	}
	if (v29)
	{
		for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38523; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (v29 < 2u)
			{
				if (v29 == 1)
				{
					ix->struct_byte_0xc_12_15.byte[3] |= 1u;
					ix->struct_byte_0xc_12_15.byte[2] &= 0x7Fu;
				}
			}
			else if (v29 <= 2u)
			{
				ix->struct_byte_0xc_12_15.byte[3] |= 0x80u;
				ix->struct_byte_0xc_12_15.byte[2] &= 0xFEu;
			}
			else if (v29 == 3)
			{
				sub_57F10(ix);
			}
		}
	}
	if (v27)
	{
		a1x->word_0x28_40 += 96;
		a1x->word_0x28_40 &= 0x7FF;
		v24 = 0;
		v15 = a1x->word_0x28_40;
		while (1)
		{
			v23 = v15;
			if (v24 >= 4)
				break;
			v18x = a1x->array_0x4C_76;
			sub_57FA0(&v18x, v23, 0, 192);
			v16x = sub_4A190(&v18x, 10, 14);
			if (v16x)
			{
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v16x->dword_0x8 = (a1x->word_0x14_20 & 7) + 8;
			}
			v15 = ((x_WORD)v23 + 512) & 0x7FF;
			v24++;
		}
	}
	return v26;
}

//----- (00021850) --------------------------------------------------------
void sub_21850(type_str_0x6E8E* a1x)//202850
{
	signed int v1; // ecx
	char v2; // ah
	signed int v3; // esi
	signed int v4; // edx
	char v5; // al
	int v6; // eax
	int v7; // eax
	int v8; // eax
	int v9; // eax
	signed int v10; // edx

	//fix
	v6 = 0;
	v7 = 0;
	v8 = 0;
	v9 = 0;
	//fix

	v1 = 0;
	v2 = a1x->word_0x2A_42 & 0xFD;
	v3 = 0;
	a1x->word_0x2A_42 = v2;
	if (v2 & 1)
	{
		a1x->word_0x2A_42 = v2 & 0xFE;
		if (a1x->byte_0x39_57)
		{
			v3 = 1;
			a1x->word_0x2A_42 = v2 & 0xFE | 2;
		}
	}
	else
	{
		a1x->word_0x2A_42 = v2 | 2;
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v4 = a1x->word_0x14_20 % 0x46u;
		v5 = a1x->word_0x2A_42;
		a1x->word_0x14_20 += x_D41A0_BYTEARRAY_4_struct.setting_30;
		if (v5 < 0)
		{
			v4 = 0;
			a1x->word_0x2A_42 = v5 & 0x7F;
		}
		if (v4 < 40)
		{
			if (v4 >= 3 && v4 <= 6)
			{
				v3 = 1;
				goto LABEL_22;
			}
		}
		else if (v4 > 48)
		{
			if (v4 > 58)
			{
				if (v4 > 68)
				{
					a1x->dword_0x10_16 = 8;
					a1x->word_0x24_36 = 3;
					//v9 = (int)x_D41A0_BYTEARRAY_0;
					a1x->word_0x4A_74 = 682;

					//if (*(x_WORD*)(0x3653D + v9 + 3) < 12)
					if (D41A0_BYTESTR_0.word_0x36540 < 12)					
					{
						a1x->byte_0x43_67 = 4;
						goto LABEL_22;
					}
				}
				else
				{
					a1x->dword_0x10_16 = 8;
					a1x->word_0x24_36 = 3;
					//v8 = (int)x_D41A0_BYTEARRAY_0;
					a1x->word_0x4A_74 = 682;
					//if (*(x_WORD *)(0x36541 + v8 + 1) < 6)
					if (D41A0_BYTESTR_0.word_0x36542 < 6)
					{
						a1x->byte_0x43_67 = 5;
						goto LABEL_22;
					}
				}
			}
			else
			{
				a1x->dword_0x10_16 = 8;
				a1x->word_0x24_36 = 3;
				//v7 = (int)x_D41A0_BYTEARRAY_0;
				a1x->word_0x4A_74 = 682;
				//if (*(x_WORD *)(0x3653D + v7 + 1) < 4)
				if (D41A0_BYTESTR_0.word_0x3653E < 4)
				{
					a1x->byte_0x43_67 = 3;
					goto LABEL_22;
				}
			}
		}
		else
		{
			a1x->dword_0x10_16 = 8;
			a1x->word_0x24_36 = 8;
			//v6 = (int)x_D41A0_BYTEARRAY_0;
			a1x->word_0x4A_74 = 256;
			//if (*(x_WORD *)(0x36543 + v6 + 1) < 28)
			if (D41A0_BYTESTR_0.word_0x36544 < 28)
			{
				a1x->byte_0x43_67 = 6;
				goto LABEL_22;
			}
		}
		v1 = 1;
	}
LABEL_22:
	if (v1)
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v10 = a1x->word_0x14_20 % 0x1Du;
		a1x->word_0x14_20 += x_D41A0_BYTEARRAY_4_struct.setting_30;
		if (v10 > 7)
		{
			if (v10 > 17)
			{
				if (v10 > 25)
				{
					if (v10 > 27)
					{
						v3 = 1;
					}
					else
					{
						a1x->byte_0x43_67 = 8;
						a1x->word_0x24_36 = 1;
						a1x->dword_0x10_16 = 5;
					}
				}
				else
				{
					a1x->byte_0x43_67 = 9;
					a1x->word_0x24_36 = 1;
					a1x->dword_0x10_16 = 5;
				}
			}
			else
			{
				a1x->byte_0x43_67 = 2;
				a1x->word_0x24_36 = 8;
				a1x->dword_0x10_16 = 8;
			}
		}
		else
		{
			a1x->byte_0x43_67 = 1;
			a1x->word_0x24_36 = 10;
			a1x->dword_0x10_16 = 10;
		}
	}
	if (v3)
	{
		a1x->byte_0x43_67 = 7;
		a1x->word_0x24_36 = 24;
		a1x->dword_0x10_16 = 32;
	}
}

//----- (00021AB0) --------------------------------------------------------
void sub_21AB0(type_str_0x6E8E* a1x)//202ab0
{
	int v1; // edx
	type_str_0x6E8E* v2x; // eax
	int16_t v3; // dx
	int16_t v4; // ax
	x_WORD *v5; // eax
	x_WORD *v6; // eax
	x_WORD *v7; // eax
	x_WORD *v8; // eax
	int16_t v9; // ax
	type_str_0x6E8E* v10x; // eax
	Bit8u* v11; // eax
	type_str_0x6E8E* v12x; // esi
	type_str_0x6E8E* v13x; // edx
	char v14; // cl
	//int v15; // eax
	//int16_t v16; // si
	axis_3d* v17; // ST0C_4
	uint16_t v18; // ax
	type_str_0x6E8E* v19x; // edi
	int v20; // esi
	int16_t v21; // ax
	axis_3d* v22; // esi
	axis_3d* v23; // ST0C_4
	int16_t v24; // ax
	int16_t v25; // ax
	x_WORD *v26; // edx
	type_str_0x6E8E* v27x; // ST0C_4
	axis_3d v28x; // [esp+0h] [ebp-20h]
	//int16_t v29; // [esp+4h] [ebp-1Ch]
	int v30; // [esp+8h] [ebp-18h]
	type_str_0x6E8E* v31x; // [esp+Ch] [ebp-14h]
	int v32; // [esp+10h] [ebp-10h]
	Bit16s* v33; // [esp+14h] [ebp-Ch]
	int v34; // [esp+18h] [ebp-8h]
	type_str_0x6E8E* v35x; // [esp+1Ch] [ebp-4h]

	v33 = 0;
	v35x = 0;
	v1 = 2124 * D41A0_BYTESTR_0.word_0xc;
	v34 = -1;
	v2x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	v31x = v2x;
	if (v2x > x_DWORD_EA3E4[0] && v2x->dword_0x8 >= 0 && !(v2x->struct_byte_0xc_12_15.byte[1] & 4))
	{
		v3 = a1x->word_0x24_36;
		if (v3)
		{
			a1x->word_0x24_36 = v3 - 1;
			v28x = a1x->array_0x4C_76;
			sub_57FA0(&v28x, a1x->word_0x1C_28, 0, 640);
			v4 = a1x->array_0x4C_76.z;
			HIBYTE(v4) += 3;
			v28x.z = v4;
			switch (a1x->byte_0x43_67)
			{
			case 1:
				v5 = (x_WORD *)sub_4A190(&v28x, 9, 0);
				v33 = v5;
				if (v5)
				{
					*((x_BYTE *)v5 + 67) = 10;
					*((x_BYTE *)v5 + 68) = 0;
					// FIXME: types
					// *((x_DWORD *)v5 + 40) = (x_DWORD)&unk_D7BD6[0x83c];
					v5[21] = 800;
					v34 = 15;
				}
				break;
			case 2:
				v6 = (x_WORD *)sub_4A190(&v28x, 9, 9);
				v33 = v6;
				if (v6)
				{
					*((x_BYTE *)v6 + 67) = 10;
					*((x_BYTE *)v6 + 68) = 23;
					// FIXME: types
					// *((x_DWORD *)v6 + 40) = (x_DWORD)&unk_D7BD6[0x83c];
					v6[21] = 800;
					v34 = 23;
				}
				break;
			case 3:
			case 4:
			case 5:
			case 6:
				v32 = (a1x->word_0x4A_74 * a1x->word_0x24_36 + a1x->word_0x1C_28) & 0x7FF;
				sub_57FA0(&v28x, v32, 0, 1792);
				v9 = a1x->array_0x4C_76.z;
				HIBYTE(v9) += 3;
				v28x.z = v9;
				switch (a1x->byte_0x43_67)
				{
				case 3:
					v10x = sub_4B240(&v28x);
					goto LABEL_19;
				case 4:
					v10x = sub_4C8F0(&v28x);
					goto LABEL_19;
				case 5:
					v10x = sub_4CE00(&v28x);
					goto LABEL_19;
				case 6:
					v10x = sub_4C6B0(&v28x);
				LABEL_19:
					v35x = v10x;
					break;
				default:
					break;
				}
				if (v35x)
				{
					D41A0_BYTESTR_0.str_0x364D2.dword_0x364D2++;
					switch (a1x->byte_0x43_67)
					{
					case 3:
						v30 = 7;
						v34 = 8;
						break;
					case 4:
						v30 = 175;
						v34 = 42;
						break;
					case 5:
						v30 = 207;
						v34 = 37;
						break;
					case 6:
						v30 = 159;
						v34 = 44;
						break;
					default:
						break;
					}
					//v11 = x_D41A0_BYTEARRAY_0;
					v12x = v35x;
					v35x->word_0x96_150 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240;
					v12x->word_0x1A_26 = a1x->word_0x1A_26;
					v13x = v35x;
					v35x->byte_0x49_73 = 17;
					v13x->word_0x2E_46 = 250;
					v13x->word_0x82_130 = 320;
					v13x->word_0x28_40 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
					LOWORD(v11) = v32;
					v13x->word_0x1C_28 = v32;
					// FIXME: types
					// v13x->word_0x20_32 = (Bit16s)v11;
					v13x->byte_0x45_69 = v30;
				}
				break;
			case 7:
				if (a1x->word_0x2A_42 & 2)
				{
					sub_5C800(v31x, 6);
					D41A0_BYTESTR_0.word_0x36546 = 1024;
					v14 = a1x->word_0x2A_42;
					v34 = 19;
					a1x->word_0x2A_42 = v14 & 0xFD;
				}
				//v15 = (int)x_D41A0_BYTEARRAY_0;
				D41A0_BYTESTR_0.word_0x36546 -= 80;
				if (D41A0_BYTESTR_0.word_0x36546 < 10)
					D41A0_BYTESTR_0.word_0x36546 = 10;
				if (D41A0_BYTESTR_0.word_0x36546 > 1024)
					D41A0_BYTESTR_0.word_0x36546 = 1024;
				v17 = &v31x->array_0x4C_76;
				x_WORD_EB398ar = v31x->array_0x4C_76;
				v18 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, v17);
				v32 = v18;
				sub_57FA0(&x_WORD_EB398ar, v18, 0, D41A0_BYTESTR_0.word_0x36546);
				v19x = v31x;
				if (sub_5D0A0(v31x))
				{
					v20 = v19x->dword_0xA0_160x->word_160_0xc_12;
					v21 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
					if (x_WORD_EB398ar.z < v21 + v20)
						x_WORD_EB398ar.z = v19x->dword_0xA0_160x->word_160_0xc_12 + v21;
					sub_57CF0(v31x, &x_WORD_EB398ar);
				}
				break;
			case 8:
				v8 = (x_WORD *)sub_4A190(&v28x, 9, 26);
				v33 = v8;
				if (v8)
				{
					*((x_BYTE *)v8 + 67) = 10;
					*((x_BYTE *)v8 + 68) = 22;
					v8[21] = 20;
					*((x_BYTE *)v8 + 70) = 3;
					v34 = 15;
				}
				break;
			case 9:
				v7 = (x_WORD *)sub_4A190(&v28x, 9, 3);
				v33 = v7;
				if (v7)
				{
					*((x_BYTE *)v7 + 67) = 10;
					*((x_BYTE *)v7 + 68) = 17;
					v7[21] = 6000;
					*((x_BYTE *)v7 + 70) = 10;
					v34 = 15;
				}
				break;
			default:
				break;
			}
			if (v33)
			{
				v22 = &v31x->array_0x4C_76;
				v23 = &v31x->array_0x4C_76;
				v33[13] = a1x->word_0x1A_26;
				v24 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, v23);
				v33[14] = v24;
				v25 = sub_58210_radix_tan(&a1x->array_0x4C_76, v22);
				v26 = v33;
				v33[15] = v25;
				*((x_BYTE *)v26 + 66) = v31x->byte_0x40_64;
				v27x = v31x;
				*((x_BYTE *)v26 + 65) = v31x->byte_0x3F_63;
				sub_5EF70(v27x);
			}
		}
		if (v34 >= 0)
			sub_6E450_distance_sound(a1x->word_0x1A_26, -1, v34);
	}
}

//----- (00021F60) --------------------------------------------------------
char sub_21F60(type_str_0x6E8E* a1x)//202f60
{
	type_str_0x6E8E* ix; // ebx
	uint8_t v2; // al
	bool v3; // eax
	uint16_t v4; // si
	type_str_0x6E8E* v5x; // eax
	type_str_0x6E8E* v6x; // eax
	int16_t v7; // di
	axis_4d v9x; // [esp+0h] [ebp-28h]
	//Bit32u v10; // [esp+4h] [ebp-24h]
	axis_4d v11x; // [esp+8h] [ebp-20h]
	//int16_t v12; // [esp+Ah] [ebp-1Eh]
	//int16_t v13; // [esp+Ch] [ebp-1Ch]
	axis_3d v14x; // [esp+10h] [ebp-18h]
	//int16_t v15; // [esp+14h] [ebp-14h]
	type_str_0x6E8E* v16x; // [esp+18h] [ebp-10h]
	bool v17; // [esp+1Ch] [ebp-Ch]
	char v18; // [esp+20h] [ebp-8h]
	char v19; // [esp+24h] [ebp-4h]

	v19 = 0;
	v16x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	v17 = a1x->byte_0x3F_63 != 5 || a1x->byte_0x40_64 != 10;
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38531; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		v2 = ix->byte_0x40_64;
		v18 = 0;
		if (v2 < 0xAu)
		{
			if (v2 < 2u || v2 > 2u && (v2 < 4u || v2 > 5u))
				goto LABEL_31;
			goto LABEL_19;
		}
		if (v2 > 0xAu)
		{
			if (v2 < 0x19u)
			{
				if (v2 < 0x16u || v2 > 0x17u)
					goto LABEL_31;
			}
			else if (v2 > 0x19u && v2 != 30)
			{
				goto LABEL_31;
			}
		LABEL_19:
			if (!v17)
			{
				if (sub_58490_radix_3d_2(&a1x->array_0x4C_76, &ix->array_0x4C_76) <= 0xC00)
				{
					v19 = 1;
					v18 = 1;
				}
				goto LABEL_31;
			}
			v11x.xshift = 5120;
			v11x.yshift = 5120;
			v3 = sub_106F0(&a1x->array_0x4C_76, &a1x->array_0x52_82, &ix->array_0x4C_76, &v11x);
			goto LABEL_29;
		}
		v11x.xshift = 5120;
		v11x.yshift = 5120;
		v9x.xshift = 5120;
		v9x.yshift = 5120;
		v14x = ix->array_0x4C_76;
		v4 = v16x->dword_0xA4_164x->word_0x3A_58;
		if (v4)
		{
			v5x = x_DWORD_EA3E4[v4];
			v14x = v5x->array_0x4C_76;

			v9x = v5x->array_0x52_82;
		}
		if (v17)
		{
			v3 = sub_106F0(&a1x->array_0x4C_76, &a1x->array_0x52_82, &v14x, &v9x);
		LABEL_29:
			if (v3)
				v18 = 1;
			goto LABEL_31;
		}
		if (sub_106F0(&a1x->array_0x4C_76, &v11x, &v14x, &v9x))
		{
			v19 = 1;
			v18 = 1;
		}
	LABEL_31:
		if (v18)
		{
			if (ix->byte_0x40_64 == 10)
				x_DWORD_EA3E4[v16x->dword_0xA4_164x->str_611.array_0x333_819x.word[2]]->word_0x2E_46 = 0;
			v6x = sub_4A190(&ix->array_0x4C_76, 10, 0);
			if (v6x)
				v6x->word_0x1A_26 = a1x->word_0x1A_26;
			sub_57F10(ix);
		}
	}
	v7 = v16x->dword_0xA4_164x->str_611.array_0x333_819x.word[8];
	if (v7 && x_DWORD_EA3E4[v7]->word_0x2E_46 > 0)
		v19 = 1;
	return v19;
}

//----- (00022190) --------------------------------------------------------
char sub_22190(type_str_0x6E8E* a1x)//203190
{
	char v1; // dl
	signed int v2; // edx
	int16_t v3; // dx

	v1 = 0;
	if (a1x->byte_0x39_57)
	{
		if (a1x->str_0x5E_94.word_0x62_98)
		{
			v2 = a1x->str_0x5E_94.dword_0x5E_94;
			if (v2 < 1)
				v2 = 1;
			if (v2 > 300)
				v2 = 300;
			a1x->dword_0x8 -= v2;
			v3 = a1x->str_0x5E_94.word_0x62_98;
			a1x->str_0x5E_94.word_0x62_98 = 0;
			a1x->word_0x26_38 = v3;
			v1 = 1;
		}
		else
		{
			a1x->word_0x26_38 = 0;
		}
	}
	if (a1x->dword_0x8 < 10)
	{
		v1 = 2;
		a1x->dword_0x8 = 8;
	}
	return v1;
}

//----- (000221F0) --------------------------------------------------------
void sub_221F0(type_str_0x6E8E* a1x, int16_t a2)//2031f0
{
	//int v2; // eax
	uint16_t v3; // bx

	/*LOBYTE(v2) = */sub_49C90(a1x, a2);
	if ((uint16_t)a2 >= 0x157u && (uint16_t)a2 <= 0x159u)
	{
		v3 = x_WORD_D951C[7 * a2];
		/*LOBYTE(v2) = */sub_71AB0(v3, 1);
		if (x_DWORD_F66F0x[v3])
		{
			//v2 = *(uint16_t *)(sub_724F0(x_DWORD_E9C08x, v3) + 16);
			a1x->dword_0x10_16 = *(uint16_t*)(sub_724F0(x_DWORD_E9C08x, v3) + 16);
		}
	}
	//return v2;
}

//----- (00022270) --------------------------------------------------------
void sub_22270(type_str_0x6E8E* a1x)//203270
{
	int16_t result; // ax
	signed int v2; // edx

	result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	v2 = a1x->dword_0x8;
	a1x->array_0x4C_76.z = result;
	if (v2 >= 10)
		/*result = */sub_222B0(a1x);
	//return result;
}

//----- (000222B0) --------------------------------------------------------
void sub_222B0(type_str_0x6E8E* a1x)//2032b0
{
	type_str_0x6E8E* v1x; // eax
	unsigned int v2; // edx
	signed int v3; // esi
	int16_t v4; // dx
	int16_t v5; // ax
	//char v6; // ch

	v1x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	v2 = (((a1x->word_0x1C_28 - v1x->word_0x1C_28) >> 3) & 0xF0) >> 4;
	v3 = 0;
	if (v2 <= 2)
	{
		//LOWORD(v1) = *(x_WORD *)(v1 + 28) + 384;
		a1x->word_0x1C_28 = v1x->word_0x1C_28 + 384;
	}
	else if (v2 >= 0xD && v2 <= 0xF)
	{
		//LOWORD(v1) = *(x_WORD *)(v1 + 28);
		//BYTE1(v1) += 6;
		a1x->word_0x1C_28 = v1x->word_0x1C_28 + 6;
	}
	else
	{
		switch (a1x->byte_0x44_68)
		{
		case 0:
			v3 = 1;
			//LOWORD(v1) = sub_581E0_maybe_tan2((Bit16u*)(a1 + 76), (Bit16u*)(v1 + 76));
			//goto LABEL_15;
			a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
			break;
		case 1:
			//goto LABEL_13;
			v3 = 1;
			break;
		case 2:
			if (x_D41A0_BYTEARRAY_4_struct.byteindex_26 & 1)
				v4 = 512;
			else
				v4 = -512;
			v5 = v1x->word_0x1C_28;
			HIBYTE(v5) += 4;
			//LOWORD(v1) = v4 + v5;
			a1x->word_0x20_32 = v4 + v5;
			//v6 = a1x->byte_0x21_33;
			a1x->byte_0x44_68 = 1;
			a1x->word_0x20_32 &=0x7ff;
		//LABEL_13:
			v3 = 1;
			break;
		case 3:
			//LOWORD(v1) = *(x_WORD *)(a1 + 28);
		//LABEL_15:
			a1x->word_0x20_32 = a1x->word_0x1C_28;
			break;
		default:
			break;
		}
		if (v3)
		{
			/*LOWORD(v1) = sub_58350(
				*(x_WORD *)(a1 + 28),
				*(x_WORD *)(a1 + 32),
				*(uint16_t *)(*(x_DWORD *)(a1 + 160) + 4),
				*(x_WORD *)(a1 + 44));*/
			a1x->word_0x1C_28 += sub_58350(
				a1x->word_0x1C_28,
				a1x->word_0x20_32,
				a1x->dword_0xA0_160x->word_160_0x4_4,
				a1x->word_0x2C_44);
		}
	}
	a1x->word_0x1C_28 &= 0x7FF;
	return;
}

//----- (000223E0) --------------------------------------------------------
void sub_223E0()//2033e0
{
	//Bit8u* v0; // edx
	//Bit8u* v1; // ecx
	type_str_0x6E8E* ix; // eax
	type_str_0x6E8E* jx; // eax
	type_str_0x6E8E* kx; // eax
	type_str_0x6E8E* indexx; // eax

	//v0 = x_D41A0_BYTEARRAY_0;
	//v1 = x_D41A0_BYTEARRAY_4;
	D41A0_BYTESTR_0.word_0x3653E = 0;
	for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[0]; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		D41A0_BYTESTR_0.word_0x3653E++;
	D41A0_BYTESTR_0.word_0x36540 = 0;
	for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[0]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
		D41A0_BYTESTR_0.word_0x36540++;
	D41A0_BYTESTR_0.word_0x36544 = 0;
	for (kx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[0]; kx > x_DWORD_EA3E4[0]; kx = kx->next_0)
		D41A0_BYTESTR_0.word_0x36544++;
	D41A0_BYTESTR_0.word_0x36542 = 0;
	for (indexx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[100/4]; indexx > x_DWORD_EA3E4[0]; indexx = indexx->next_0)
	{
		if (indexx->byte_0x45_69 != 200)
			D41A0_BYTESTR_0.word_0x36542++;
	}
	//x_D41A0_BYTEARRAY_4 = (Bit8u*)v1;
	//x_D41A0_BYTEARRAY_0 = v0;
	//return result;
}

//----- (00022490) --------------------------------------------------------
void sub_22490(type_str_0x6E8E* a1x)//203490
{
	uaxis_2d v1x; // ax
	signed int v2; // esi
	uaxis_2d v3x; // bx
	signed int v4; // edi
	uaxis_2d v6x; // [esp+8h] [ebp-4h]

	v1x._axis_2d.x = ((uint16_t)(a1x->array_0x4C_76.x + 128) >> 8) - 19;
	v1x._axis_2d.y = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - 19;
	v2 = 0;
	v6x.word = v1x.word;
	do
	{
		v3x.word = v6x.word;
		v4 = 0;
		while (v4 < 38)
		{
			v4++;
			/*LOBYTE(v1) = */sub_57390(v3x, a1x->word_0x1A_26);
			v3x._axis_2d.x++;
		}
		v2++;
		v6x._axis_2d.y++;
	} while (v2 < 38);
	//return v1;
}

//----- (00022530) --------------------------------------------------------
type_str_0x6E8E* sub_22530(type_str_0x6E8E* a1x)//203530
{
	type_str_0x6E8E* resultx; // eax

	resultx = a1x;
	a1x->byte_0x45_69 = 80;
	return resultx;
}

//----- (00022540) --------------------------------------------------------
type_str_0x6E8E* sub_22540(type_str_0x6E8E* a1x)//203540
{
	type_str_0x6E8E* resultx; // eax

	resultx = a1x;
	a1x->byte_0x45_69 = 80;
	return resultx;
}

//----- (00022550) --------------------------------------------------------
type_str_0x6E8E* sub_22550(type_str_0x6E8E* a1x)//203550
{
	type_str_0x6E8E* resultx; // eax

	resultx = a1x;
	a1x->byte_0x45_69 = 80;
	return resultx;
}

//----- (00022560) --------------------------------------------------------
void sub_22560(type_str_0x6E8E* a1x)//203560
{
	sub_1C890(a1x, 80);
}

//----- (00022580) --------------------------------------------------------
void sub_22580(type_str_0x6E8E* a1x)//203580
{
	sub_1C930(a1x);
}

//----- (000225A0) --------------------------------------------------------
type_str_0x6E8E* sub_225A0(type_str_0x6E8E* a1x)//2035a0
{
	type_str_0x6E8E* resultx; // eax

	resultx = a1x;
	a1x->byte_0x45_69 = 80;
	return resultx;
}

//----- (000225B0) --------------------------------------------------------
type_str_0x6E8E* sub_225B0(type_str_0x6E8E* a1x)//2035b0
{
	type_str_0x6E8E* resultx; // eax

	resultx= a1x;
	a1x->byte_0x45_69 = 80;
	return resultx;
}

//----- (00022640) --------------------------------------------------------
bool sub_22640(axis_3d* a1, uint16_t a2, uint16_t a3, uint16_t a4)//203640
{
	uint8_t v4; // bl
	uint8_t v5; // bh

	v4 = (a1->x >> 8) - ((signed int)a2 >> 1);
	v5 = (a1->y >> 8) - ((signed int)a3 >> 1);
	if ((v4 + v5) % 2)
		v4++;
	return (int16_t)sub_48990(v4, v5, a3, a2) < (signed int)a4;
}

//----- (000226D0) --------------------------------------------------------
void sub_226D0(uint16_t a1, Bit16s* exwidth, Bit16s* expheight)//2036d0
{
	uint16_t v3; // cx
	uint16_t v4; // bx
	//x_WORD *result; // eax
	/*v3 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * a1 + 5);
	v4 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * a1 + 4);*/
	v3 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[a1].height;
	v4 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[a1].width;
	if (x_WORD_180660_VGA_type_resolution == 1)
	{
		v3 >>= 1;
		v4 >>= 1;
	}
	*expheight = (v3 << 8) / 2 + 768;
	//result = a2;
	*exwidth = (v4 << 8) / 2 + 768;
	//return result;
}

//----- (00022760) --------------------------------------------------------
void sub_22760(type_str_0x6E8E* a1x)//203760
{
	type_str_0x6E8E* v1x; // eax
	signed int v2; // eax
	int v3; // eax
	int16_t v4; // ax
	int16_t v5; // dx
	int16_t v6; // ax
	int16_t v7; // di
	int v8z; // eax
	type_str_0x6E8E* v8y; // eax
	char v9; // cl
	type_str_0x6E8E* ix; // esi
	type_str_0x6E8E* jx; // esi
	type_str_0x6E8E* kx; // esi
	type_str_0x6E8E* lx; // esi
	type_str_0x6E8E* v14x; // esi
	//char v15; // al
	type_str_0x6E8E* v17x; // [esp+0h] [ebp-1Ch]
	Bit16s exheight; // [esp+8h] [ebp-14h]
	Bit16s exwidth; // [esp+Ch] [ebp-10h]
	Bit16s v20; // [esp+10h] [ebp-Ch]
	int v21; // [esp+14h] [ebp-8h]
	uint8_t v22; // [esp+18h] [ebp-4h]

	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v20 = 96;
	v17x = v1x;
	if (!v1x->byte_0x3F_63 || v1x->byte_0x40_64 != 45)
	{
		a1x->dword_0x10_16 = 5;
	LABEL_51:
		//v15 = v20;
		a1x->word_0x96_150 = 0;
		//LOBYTE(v8z) = v15 + 1;
		a1x->byte_0x45_69 = v20 + 1;
		return;
	}
	x_WORD_EB398ar = v1x->array_0x4C_76;
	v2 = a1x->dword_0x10_16;
	a1x->dword_0x10_16 = v2 + 1;
	if (v2 >= 4)
	{
		a1x->dword_0x10_16 = 1;
		goto LABEL_51;
	}
	v22 = sub_232C0();
	sub_226D0(v22, &exwidth, &exheight);
	v3 = a1x->dword_0x10_16 - 1;
	switch (a1x->dword_0x10_16)
	{
	case 1:
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v4 = 9377 * a1x->word_0x14_20;
		x_WORD_EB398ar.x += (a1x->word_0x14_20 % 3u << 8) + v17x->array_0x52_82.xshift + exwidth + 256;
		a1x->word_0x14_20 = v4 + 9439;
		v3 = (a1x->word_0x14_20 % 3u << 8) - 1280;
		v5 = v3 + x_WORD_EB398ar.y;
		goto LABEL_10;
	case 2:
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		x_WORD_EB398ar.x -= (a1x->word_0x14_20 % 3u << 8) + v17x->array_0x52_82.xshift + exwidth + 256;
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v3 = (a1x->word_0x14_20 % 3u << 8) - 1280;
		v5 = v3 + x_WORD_EB398ar.y;
		goto LABEL_10;
	case 3:
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v6 = 9377 * a1x->word_0x14_20;
		x_WORD_EB398ar.x += (a1x->word_0x14_20 % 3u << 8) - 1280;
		a1x->word_0x14_20 = v6 + 9439;
		v3 = (a1x->word_0x14_20 % 3u << 8) + v17x->array_0x52_82.yshift + exheight + 256;
		v5 = v3 + x_WORD_EB398ar.y;
		goto LABEL_10;
	case 4:
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		x_WORD_EB398ar.x += (a1x->word_0x14_20 % 3u << 8) - 1280;
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v3 = v17x->array_0x52_82.yshift + exheight;
		v5 = x_WORD_EB398ar.y - (v3 + (a1x->word_0x14_20 % 3u << 8) + 256);
	LABEL_10:
		x_WORD_EB398ar.y = v5;
		break;
	default:
		break;
	}
	LOWORD(v3) = x_WORD_EB398ar.x;
	v7 = x_WORD_EB398ar.y;
	v21 = v3;
	if (sub_104D0_terrain_tile_is_water(&x_WORD_EB398ar) == 1)
	{
		a1x->dword_0x10_16 = 2;
		goto LABEL_51;
	}
	LOBYTE(v8z) = sub_22640(
		&x_WORD_EB398ar,
		(signed int)exwidth >> 8,
		(signed int)exheight >> 8,
		(((signed int)exwidth >> 7) + ((signed int)exheight >> 7) > 4) + 15);
	if ((x_BYTE)v8z)
	{
		v9 = 0;
		for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38527; !v9 && ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			v8z = abs((int16_t)(ix->array_0x4C_76.x - v21));
			if (v8z <= ix->array_0x52_82.xshift + exwidth)
			{
				v8z = abs((int16_t)(ix->array_0x4C_76.y - v7));
				if (v8z <= exheight + ix->array_0x52_82.yshift)
					v9 = 1;
			}
		}
		if (!v9)
		{
			for (jx = x_D41A0_BYTEARRAY_4_struct.dword_38519; !v9 && jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
			{
				if (jx->byte_0x40_64 == 2)
				{
					v8z = abs((int16_t)(jx->array_0x4C_76.x - v21));
					if (v8z <= jx->array_0x52_82.xshift + exwidth)
					{
						v8z = abs((int16_t)(jx->array_0x4C_76.y - v7));
						if (v8z <= exheight + jx->array_0x52_82.yshift)
							v9 = 1;
					}
				}
			}
		}
		if (!v9)
		{
			for (kx = x_D41A0_BYTEARRAY_4_struct.dword_38519; !v9 && kx > x_DWORD_EA3E4[0]; kx = kx->next_0)
			{
				if (kx->byte_0x40_64 == 67)
				{
					v8z = abs((int16_t)(kx->array_0x4C_76.x - v21));
					if (v8z <= kx->array_0x52_82.xshift + exwidth)
					{
						v8z = abs((int16_t)(kx->array_0x4C_76.y - v7));
						if (v8z <= exheight + kx->array_0x52_82.yshift)
							v9 = 1;
					}
				}
			}
		}
		if (!v9)
		{
			for (lx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[48/4]; !v9 && lx > x_DWORD_EA3E4[0]; lx = lx->next_0)
			{
				if (lx->byte_0x3D_61)
					v9 = 1;
			}
		}
		if (!v9)
		{
			v8y = sub_4A190(&x_WORD_EB398ar, 10, 45);
			v14x = v8y;
			if (v8y)
			{
				sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 10);
				/*LOBYTE(v8) =*/ sub_49A30(v14x, v22);
				v14x->byte_0x45_69 = 51;
			}
			a1x->word_0x96_150 = 0;
			a1x->byte_0x3D_61 = 1;
			a1x->byte_0x45_69 = 105;
		}
	}
	//return v8z;
}

//----- (00022C80) --------------------------------------------------------
void sub_22C80(type_str_0x6E8E* a1x)//203c80
{
	unsigned int v1; // eax
	int16_t v2; // ax
	int i; // edx
	int v4; // ecx
	type_str_0x6E8E* v5x; // edx
	type_str_0x6E8E* v6x; // edx
	uint16_t v7; // ax

	a1x->byte_0x3D_61 = 0;
	v1 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v2;
		v1 = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				v1 = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		v1 = 2;
	}
	if (v1 >= 1)
	{
		if (v1 <= 1)
		{
			v6x = x_DWORD_EA3E4[a1x->word_0x26_38];
			if (v6x > x_DWORD_EA3E4[0] && (!v6x->byte_0x40_64 || v6x->byte_0x40_64 == 1))
				x_DWORD_EA3E4[a1x->word_0x26_38]->dword_0xA4_164x->word_0x248_584 = 200;
			a1x->word_0x96_150 = a1x->word_0x26_38;
			LOBYTE(v1) = 102;
		}
		else
		{
			if (v1 != 2)
				goto LABEL_28;
			LOBYTE(v1) = 100;
		}
	LABEL_27:
		a1x->byte_0x45_69 = v1;
		goto LABEL_28;
	}
	if (!v1)
	{
		sub_1B8C0(a1x);
		LOWORD(v1) = (int16_t)a1x->byte_0x3E_62 / a1x->dword_0xA0_160x->word_160_0x1a_26;
		if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v7 = a1x->word_0x14_20;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			a1x->word_0x20_32 += ((a1x->word_0x14_20 & 0xFF) + 85) * (2 * ((signed int)(v7 % 0x9Du) / 79) - 1);
			v1 = a1x->dword_0x10_16;
			a1x->word_0x20_32 &= 0x7ff;
			a1x->dword_0x10_16 = v1 - 1;
			if (!v1)
			{
				LOBYTE(v1) = 99;
				a1x->dword_0x10_16 = 1;
				goto LABEL_27;
			}
		}
	}
LABEL_28:
	if (a1x->byte_0x45_69 == 102)
	{
		//LOWORD(v1) = a1x->word_0x84_132;
		a1x->word_0x82_130 = a1x->word_0x84_132;
	}
	//return v1;
}

//----- (00022E60) --------------------------------------------------------
void sub_22E60(type_str_0x6E8E* a1x)//203e60
{
	unsigned int v1; // eax
	int16_t v2; // ax
	int i; // edx
	int v4; // esi
	type_str_0x6E8E* v5x; // edx
	type_str_0x6E8E* v6x; // edx
	int v7; // edx
	type_str_0x6E8E* v8x; // eax
	axis_3d* v9; // esi

	v1 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v2;
		v1 = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				v1 = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		v1 = 2;
	}
	if (v1 >= 1)
	{
		if (v1 <= 1)
		{
			v6x = x_DWORD_EA3E4[a1x->word_0x26_38];
			if (v6x > x_DWORD_EA3E4[0] && (!v6x->byte_0x40_64 || v6x->byte_0x40_64 == 1))
				x_DWORD_EA3E4[a1x->word_0x26_38]->dword_0xA4_164x->word_0x248_584 = 200;
			a1x->word_0x96_150 = a1x->word_0x26_38;
			LOBYTE(v1) = 102;
		}
		else
		{
			if (v1 != 2)
				goto LABEL_31;
			LOBYTE(v1) = 100;
		}
	LABEL_30:
		a1x->byte_0x45_69 = v1;
		goto LABEL_31;
	}
	if (!v1)
	{
		sub_1B8C0(a1x);
		v1 = a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26 / 2;
		if (!v1)
		{
			v7 = a1x->dword_0x10_16;
			v8x = x_DWORD_EA3E4[a1x->word_0x96_150];
			a1x->dword_0x10_16 = v7 - 1;
			if (!v7 || !v8x->byte_0x3F_63)
			{
				a1x->dword_0x10_16 = 5;
				a1x->byte_0x45_69 = 97;
			}
			v9 = &v8x->array_0x4C_76;
			a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v8x->array_0x4C_76);
			v1 = sub_583F0_distance_3d(&a1x->array_0x4C_76, v9);
			if (v1 < 0xA00)
			{
				LOBYTE(v1) = 96;
				a1x->dword_0x10_16 = 0;
				goto LABEL_30;
			}
		}
	}
LABEL_31:
	if (a1x->byte_0x45_69 == 102)
	{
		//LOWORD(v1) = a1x->word_0x84_132;
		a1x->word_0x82_130 = a1x->word_0x84_132;
	}
	//return v1;
}

//----- (00023020) --------------------------------------------------------
void sub_23020(type_str_0x6E8E* a1x)//204020
{
	unsigned int v1; // eax
	int16_t v2; // ax
	int i; // edx
	int v4; // esi
	type_str_0x6E8E* v5x; // edx
	type_str_0x6E8E* v6x; // edx
	type_str_0x6E8E* v7x; // edi
	type_str_0x6E8E* jx; // esi
	unsigned int v9; // eax
	unsigned int v11; // [esp+0h] [ebp-8h]

	v1 = 0;
	v11 = -1;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v2;
		v1 = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				v1 = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		v1 = 2;
	}
	if (v1 >= 1)
	{
		if (v1 <= 1)
		{
			v6x = x_DWORD_EA3E4[a1x->word_0x26_38];
			if (v6x > x_DWORD_EA3E4[0] && (!v6x->byte_0x40_64 || v6x->byte_0x40_64 == 1))
				x_DWORD_EA3E4[a1x->word_0x26_38]->dword_0xA4_164x->word_0x248_584 = 200;
			a1x->word_0x96_150 = a1x->word_0x26_38;
			LOBYTE(v1) = 102;
		}
		else
		{
			if (v1 != 2)
				goto LABEL_34;
			LOBYTE(v1) = 100;
		}
	LABEL_33:
		a1x->byte_0x45_69 = v1;
		goto LABEL_34;
	}
	if (!v1)
	{
		v7x = 0;
		for (jx = x_D41A0_BYTEARRAY_4_struct.dword_38527; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
		{
			v9 = sub_583F0_distance_3d(&a1x->array_0x4C_76, &jx->array_0x4C_76);
			if (v9 && v9 < v11)
			{
				v7x = jx;
				v11 = v9;
			}
		}
		if (v7x)
		{
			a1x->word_0x96_150 = v7x-D41A0_BYTESTR_0.struct_0x6E8E;
			a1x->dword_0x10_16 = 10;
			LOBYTE(v1) = 98;
		}
		else
		{
			a1x->dword_0x10_16 = 5;
			LOBYTE(v1) = 97;
		}
		goto LABEL_33;
	}
LABEL_34:
	if (a1x->byte_0x45_69 == 102)
	{
		//LOWORD(v1) = a1x->word_0x84_132;
		a1x->word_0x82_130 = a1x->word_0x84_132;
	}
	//return v1;
}

//----- (000231E0) --------------------------------------------------------
void sub_231E0(type_str_0x6E8E* a1x)//2041e0
{
	sub_1C890(a1x, 96);
}

//----- (00023200) --------------------------------------------------------
void sub_23200(type_str_0x6E8E* a1x)//204200
{
	type_str_0x6E8E* v1x; // edx

	v1x = x_DWORD_EA3E4[a1x->word_0x24_36];
	if (v1x > x_DWORD_EA3E4[0] && (!v1x->byte_0x40_64 || v1x->byte_0x40_64 == 1))
		x_DWORD_EA3E4[a1x->word_0x24_36]->dword_0xA4_164x->word_0x248_584 = 200;
	sub_1C930(a1x);
}

//----- (00023260) --------------------------------------------------------
void sub_23260(type_str_0x6E8E* a1x)//204260
{
	//int16_t result; // ax

	/*LOBYTE(result) = */sub_1C980(a1x, 96);
	//HIBYTE(result) = a1x->byte_0x45_69;
	if (a1x->byte_0x45_69 != 102)
	{
		a1x->dword_0x10_16 = 5;
		a1x->word_0x96_150 = 0;
		//result = a1x->word_0x86_134;
		a1x->byte_0x45_69 = 97;
		a1x->word_0x82_130 = a1x->word_0x86_134;
	}
	//return result;
}

//----- (000232A0) --------------------------------------------------------
void sub_232A0(type_str_0x6E8E* a1x)//2042a0
{
	a1x->dword_0x10_16 = 5;
	a1x->byte_0x45_69 = 97;
	/*return */sub_22C80(a1x);
}

//----- (000232C0) --------------------------------------------------------
char sub_232C0()//2042c0
{
	//int v0; // eax
	uint8_t v1; // bl
	unsigned int v2; // eax

	//v0 = (int)x_D41A0_BYTEARRAY_0;
	//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) = 9377 * *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
	D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;
	v1 = 0;
	v2 = D41A0_BYTESTR_0.dword_0x8 % 0x3Cu + 17;
	while (!(x_WORD_D93C0_bldgprmbuffer[2+4 * (uint8_t)v2] & 2) && v1 < 0x4Du)
	{
		LOBYTE(v2) = v2 + 1;
		v1++;
		if ((uint8_t)v2 >= 0x4Cu)
			LOBYTE(v2) = 17;
	}
	if (v1 >= 0x4Du)
		LOBYTE(v2) = 17;
	return v2;
}

//----- (00023320) --------------------------------------------------------
void sub_23320(type_str_0x6E8E* a1x)//204320
{
	a1x->byte_0x45_69 = 105;
	return sub_23340(a1x);
}

//----- (00023340) --------------------------------------------------------
void sub_23340(type_str_0x6E8E* a1x)//204340
{
	int jy;
	type_str_0x6E8E* jx; // eax
	int16_t v2; // ax
	int i; // edx
	int v4; // edx
	type_str_0x6E8E* v5x; // esi
	type_str_0x6E8E* v6x; // edx
	uint16_t v7; // ax
	unsigned int v8; // edi
	type_str_0x6E8E* v9x; // esi
	int v10; // edx
	unsigned int v11; // edx
	type_str_0x6E8E* v12x; // esi

	jy = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v2;
		jy = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				jy = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		jy = 2;
	}
	if (jy >= 1)
	{
		if (jy <= 1)
		{
			v6x = x_DWORD_EA3E4[a1x->word_0x26_38];
			if (v6x > x_DWORD_EA3E4[0] && (!v6x->byte_0x40_64 || v6x->byte_0x40_64 == 1))
				x_DWORD_EA3E4[a1x->word_0x26_38]->dword_0xA4_164x->word_0x248_584 = 200;
			a1x->word_0x96_150 = a1x->word_0x26_38;
			//jy = 110;
			a1x->byte_0x45_69 = 110;
		}
		else if (jy == 2)
		{
			//jy = 108;
			a1x->byte_0x45_69 = 108;
		}
		goto LABEL_43;
	}
	if (jy)
		goto LABEL_43;
	sub_1B8C0(a1x);
	//LOWORD(j) = (int16_t)*(uint8_t *)(a1 + 62) / *(x_WORD *)(*(x_DWORD *)(a1 + 160) + 26);
	if (a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26)
		goto LABEL_43;
	if (a1x->word_0x96_150)
	{
		v12x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v12x->byte_0x3F_63 == 10 && v12x->byte_0x40_64 == 45)
		{
			if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v12x->array_0x4C_76) > 0x800)
			{
				//LOWORD(j) = sub_581E0_maybe_tan2((Bit16u*)(a1 + 76), (Bit16u*)(v12 + 76));
				a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v12x->array_0x4C_76);
				goto LABEL_43;
			}
			if ((signed int)v12x->word_0x84_132 > v12x->dword_0x10_16)
			{
				a1x->dword_0x10_16 = 1;
				//LOBYTE(j) = 108;
				a1x->byte_0x45_69 = 108;
				v12x->dword_0x10_16++;
				goto LABEL_43;
			}
		}
		a1x->word_0x96_150 = 0;
		//LOWORD(j) = *(x_WORD *)(a1 + 134);
		//goto LABEL_42;
		a1x->word_0x82_130 = a1x->word_0x86_134;
		goto LABEL_43;
	}
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	v7 = a1x->word_0x14_20;
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	a1x->word_0x20_32 += (2 * ((signed int)(v7 % 0x9Du) / 79) - 1) * ((a1x->word_0x14_20 & 0xFF) + 85);
	a1x->word_0x20_32 &= 0x7ff;
	//LOWORD(j) = (int16_t)*(uint8_t *)(a1 + 62) / *(x_WORD *)(*(x_DWORD *)(a1 + 160) + 26);
	if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
	{
		v8 = -1;
		v9x = 0;
		for (jx = x_D41A0_BYTEARRAY_4_struct.dword_38527; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
		{
			if (x_WORD_D93C0_bldgprmbuffer[2+4 * jx->byte_0x46_70] & 1)
			{
				v10 = (jx->array_0x4C_76.x - a1x->array_0x4C_76.x);
				v11 = v10 * v10
					+ (jx->array_0x4C_76.y - a1x->array_0x4C_76.y)
					* (jx->array_0x4C_76.y - a1x->array_0x4C_76.y);
				if (v11 < v8)
				{
					v9x = jx;
					v8 = v11;
				}
			}
		}
		if (v9x)
		{
			a1x->word_0x96_150 = v9x-D41A0_BYTESTR_0.struct_0x6E8E;
			//LOWORD(j) = *(x_WORD *)(a1 + 134) + 12;
		//LABEL_42:
			a1x->word_0x82_130 = a1x->word_0x86_134 + 12;
			goto LABEL_43;
		}
	}
LABEL_43:
	if (a1x->byte_0x45_69 == 110)
	{
		//LOWORD(j) = *(x_WORD *)(a1 + 132);
		a1x->word_0x82_130 = a1x->word_0x84_132;
	}
	//return j;
}

//----- (00023640) --------------------------------------------------------
void sub_23640(type_str_0x6E8E* a1x)//204640
{
	a1x->byte_0x45_69 = 105;
	sub_23340(a1x);
}

//----- (00023660) --------------------------------------------------------
void sub_23660(type_str_0x6E8E* a1x)//204660
{
	a1x->byte_0x45_69 = 105;
	sub_23340(a1x);
}

//----- (00023680) --------------------------------------------------------
void sub_23680(type_str_0x6E8E* a1x)//204680
{
	type_str_0x6E8E* v2x; // ebx

	if (a1x->dword_0x10_16)
	{
		sub_57F10(a1x);
		return;
	}
	v2x = x_DWORD_EA3E4[a1x->word_0x24_36];
	if (v2x > x_DWORD_EA3E4[0] && (!v2x->byte_0x40_64 || v2x->byte_0x40_64 == 1))
		x_DWORD_EA3E4[a1x->word_0x24_36]->dword_0xA4_164x->word_0x248_584 = 200;
	sub_1C890(a1x, 104);
}

//----- (000236F0) --------------------------------------------------------
void sub_236F0(type_str_0x6E8E* a1x)//2046f0
{
	sub_1C930(a1x);
}

//----- (00023710) --------------------------------------------------------
void sub_23710(type_str_0x6E8E* a1x)//204710
{
	//int16_t result; // ax

	/*LOBYTE(result) = */sub_1C980(a1x, 104);
	//HIBYTE(result) = a1x->byte_0x45_69;
	if (a1x->byte_0x45_69 != 110)
	{
		//result = a1x->word_0x86_134;
		a1x->word_0x96_150 = 0;
		a1x->word_0x82_130 = a1x->word_0x86_134;
	}
	//return result;
}

//----- (00023750) --------------------------------------------------------
void sub_23750(type_str_0x6E8E* a1x)//204750
{
	//int16_t result; // ax

	sub_1D5D0(a1x, 104);
	if (a1x->byte_0x45_69 == 110)
		a1x->word_0x82_130 = a1x->word_0x84_132;
	else
		a1x->word_0x82_130 = a1x->word_0x86_134;
	//a1x->word_0x82_130 = result;
	//return result;
}

//----- (00023790) --------------------------------------------------------
void sub_23790(type_str_0x6E8E* a1x)//204790
{
	a1x->byte_0x45_69 = 113;
	/*return */sub_237B0(a1x);
}

//----- (000237B0) --------------------------------------------------------
void sub_237B0(type_str_0x6E8E* a1x)//2047b0
{
	int v1y;
	type_str_0x6E8E* v1x; // eax
	int16_t v2; // ax
	int i; // edx
	int v4; // edx
	type_str_0x6E8E* v5x; // esi
	type_str_0x6E8E* v6x; // edx
	uint16_t v7; // di
	uint16_t v8; // ax
	unsigned int v9; // edi
	type_str_0x6E8E* v10x; // esi
	int v11; // edx
	unsigned int v12; // edx
	type_str_0x6E8E* v13x; // esi

	//fix
	v1x = 0;
	//fix

	v1y = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v2;
		v1y = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				v1y = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		v1y = 2;
	}
	if (v1y >= 1)
	{
		if (v1y <= 1)
		{
			v6x = x_DWORD_EA3E4[a1x->word_0x26_38];
			if (v6x > x_DWORD_EA3E4[0] && (!v6x->byte_0x40_64 || v6x->byte_0x40_64 == 1))
				x_DWORD_EA3E4[a1x->word_0x26_38]->dword_0xA4_164x->word_0x248_584 = 200;
			a1x->word_0x96_150 = a1x->word_0x26_38;
			//LOBYTE(v1) = 118;
			a1x->byte_0x45_69 = 118;
		}
		else if (v1y == 2)
		{
			//LOBYTE(v1) = 116;
			a1x->byte_0x45_69 = 116;
		}
		goto LABEL_44;
	}
	if (v1x)
		goto LABEL_44;
	sub_1B8C0(a1x);
	//LOWORD(v1) = (int16_t)*(uint8_t *)(a1 + 62) / *(x_WORD *)(*(x_DWORD *)(a1 + 160) + 26);
	if (a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26)
		goto LABEL_44;
	v7 = a1x->word_0x96_150;
	if (v7)
	{
		v13x = x_DWORD_EA3E4[v7];
		if (v13x->byte_0x3F_63 == 10 && v13x->byte_0x40_64 == 45)
		{
			if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v13x->array_0x4C_76) > 0x800)
			{
				//LOWORD(v1) = sub_581E0_maybe_tan2((Bit16u*)(a1 + 76), (Bit16u*)(v13 + 76));
				a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v13x->array_0x4C_76);
				goto LABEL_44;
			}
			if (v13x->word_0x84_132 > v13x->dword_0x10_16)
			{
				a1x->dword_0x10_16 = 1;
				//LOBYTE(v1) = 116;
				a1x->byte_0x45_69 = 116;
				v13x->dword_0x10_16++;
				goto LABEL_44;
			}
		}
		a1x->word_0x96_150 = 0;
		//LOWORD(v1) = *(x_WORD *)(a1 + 134);
		//goto LABEL_43;
		a1x->word_0x82_130 = a1x->word_0x86_134;
		goto LABEL_44;
	}
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	v8 = a1x->word_0x14_20;
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	a1x->word_0x20_32 += ((a1x->word_0x14_20 & 0xFF) + 85) * (2 * ((signed int)(v8 % 0x9Du) / 79) - 1);
	a1x->word_0x20_32 &= 0x7ff;
	//LOWORD(v1) = (int16_t)*(uint8_t *)(a1 + 62) / *(x_WORD *)(*(x_DWORD *)(a1 + 160) + 26);
	if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
	{
		v9 = -1;
		v1x = x_D41A0_BYTEARRAY_4_struct.dword_38527;
		v10x = 0;
		while (v1x > x_DWORD_EA3E4[0])
		{
			if (x_WORD_D93C0_bldgprmbuffer[2+4 * v1x->byte_0x46_70] & 1)
			{
				v11 = (int16_t)(v1x->array_0x4C_76.x - a1x->array_0x4C_76.x);
				v12 = v11 * v11
					+ (int16_t)(v1x->array_0x4C_76.y - a1x->array_0x4C_76.y)
					* (int16_t)(v1x->array_0x4C_76.y - a1x->array_0x4C_76.y);
				if (v12 < v9 && v12 > 0xE100000)
				{
					v10x = v1x;
					v9 = v12;
				}
			}
			v1x = v1x->next_0;
		}
		if (v10x)
		{
			a1x->word_0x96_150 = v10x-D41A0_BYTESTR_0.struct_0x6E8E;
			//LOWORD(v1) = *(x_WORD *)(a1 + 134) + 12;
		//LABEL_43:
			a1x->word_0x82_130 = a1x->word_0x86_134 + 12;
			goto LABEL_44;
		}
	}
LABEL_44:
	if (a1x->byte_0x45_69 == 118)
	{
		//LOWORD(v1) = *(x_WORD *)(a1 + 132);
		a1x->word_0x82_130 = a1x->word_0x84_132;
	}
	//return v1;
}

//----- (00023AC0) --------------------------------------------------------
void sub_23AC0(type_str_0x6E8E* a1x)//204ac0
{
	a1x->byte_0x45_69 = 113;
	sub_237B0(a1x);
}

//----- (00023AE0) --------------------------------------------------------
void sub_23AE0(type_str_0x6E8E* a1x)//204ae0
{
	a1x->byte_0x45_69 = 113;
	sub_237B0(a1x);
}

//----- (00023B00) --------------------------------------------------------
void sub_23B00(type_str_0x6E8E* a1x)//204b00
{
	//int result; // eax

	if (a1x->dword_0x10_16)
		sub_57F10(a1x);
	else
		sub_1C890(a1x, 112);
	//return result;
}

//----- (00023B30) --------------------------------------------------------
void sub_23B30(type_str_0x6E8E* a1x)//204b30
{
	type_str_0x6E8E* v1x; // edx

	v1x = x_DWORD_EA3E4[a1x->word_0x24_36];
	if (v1x > x_DWORD_EA3E4[0] && (!v1x->byte_0x40_64 || v1x->byte_0x40_64 == 1))
		x_DWORD_EA3E4[a1x->word_0x24_36]->dword_0xA4_164x->word_0x248_584 = 200;
	sub_1C930(a1x);
}

//----- (00023B90) --------------------------------------------------------
void sub_23B90(type_str_0x6E8E* a1x)//204b90
{
	//int16_t result; // ax

	/*LOBYTE(result) = */sub_1C980(a1x, 112);
	//HIBYTE(result) = a1x->byte_0x45_69;
	if (a1x->byte_0x45_69 != 118)
	{
		//result = a1x->word_0x86_134;
		a1x->word_0x96_150 = 0;
		a1x->word_0x82_130 = a1x->word_0x86_134;
	}
	//return result;
}

//----- (00023BD0) --------------------------------------------------------
void sub_23BD0(type_str_0x6E8E* a1x)//204bd0
{
	//int16_t result; // ax

	sub_1D5D0(a1x, 112);
	if (a1x->byte_0x45_69 == 118)
		a1x->word_0x82_130 = a1x->word_0x84_132;
	else
		a1x->word_0x82_130 = a1x->word_0x86_134;
	//a1x->word_0x82_130 = result;
	//return result;
}

//----- (00023C20) --------------------------------------------------------
void sub_23C20(type_str_0x6E8E* a1x)//204c20
{
	sub_1BD90(a1x, 120);
}

//----- (00023C40) --------------------------------------------------------
void sub_23C40(type_str_0x6E8E* a1x)//204c40
{
	unsigned int v1; // esi
	int16_t v2; // ax
	int i; // eax
	int v4; // edx
	type_str_0x6E8E* v5x; // eax
	type_str_0x6E8E* v6x; // eax
	int16_t v7; // ax
	//int v8; // esi
	int v9; // eax
	type_str_0x6E8E* v10x; // esi
	int v11; // eax
	unsigned int v12; // edi
	signed int v13; // ST0C_4
	int16_t v14; // ax
	//int v15; // eax
	unsigned int v16; // [esp+0h] [ebp-10h]
	unsigned int v17; // [esp+8h] [ebp-8h]
	type_str_0x6E8E* v18x; // [esp+Ch] [ebp-4h]

	v1 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v1 = 1;
		a1x->word_0x26_38 = v2;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				v1 = 1;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v1 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if (v1 < 1)
	{
		if (!v1)
		{
			sub_24190(a1x);
			//v8 = a1x->dword_0xA0_160;
			if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
			{
				if (a1x->byte_0x39_57)
				{
					v9 = a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28;
					v16 = -1;
					v18x = 0;
					v10x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
					v17 = v9;
					while (v10x > x_DWORD_EA3E4[0])
					{
						if (v10x->word_0x1A_26 != a1x->word_0x1A_26)
						{
							v11 = (int16_t)(v10x->array_0x4C_76.x - a1x->array_0x4C_76.x);
							v12 = (int16_t)(v10x->array_0x4C_76.y - a1x->array_0x4C_76.y)
								* (int16_t)(v10x->array_0x4C_76.y - a1x->array_0x4C_76.y)
								+ v11 * v11;
							if (v12 <= v17 && !(v10x->struct_byte_0xc_12_15.byte[0] & 0x20))
							{
								v13 = a1x->dword_0xA0_160x->word_160_0x1e_30;
								v14 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v10x->array_0x4C_76);
								if ((uint16_t)sub_582B0(a1x->word_0x1C_28, v14) < v13 && v12 < v16)
								{
									v18x = v10x;
									v16 = v12;
								}
							}
						}
						v10x = v10x->next_0;
					}
					if (v18x)
					{
						//v15 = v18x - D41A0_BYTESTR_0.struct_0x6E8E;
						a1x->byte_0x45_69 = 122;
						a1x->word_0x96_150 = v18x - D41A0_BYTESTR_0.struct_0x6E8E;
					}
				}
			}
		}
	}
	else if (v1 <= 1)
	{
		v6x = x_DWORD_EA3E4[a1x->word_0x26_38];
		if (v6x->byte_0x3F_63 == 3 && v6x->word_0x1A_26 != a1x->word_0x1A_26)
		{
			v7 = a1x->word_0x26_38;
			a1x->byte_0x45_69 = 122;
			a1x->word_0x96_150 = v7;
		}
		sub_1EEE0(a1x);
	}
	else if (v1 == 2)
	{
		a1x->byte_0x45_69 = 124;
	}
	if (a1x->byte_0x45_69 == 122)
		sub_24100(a1x);
}

//----- (00023E60) --------------------------------------------------------
void sub_23E60(type_str_0x6E8E* a1x)//204e60
{
	unsigned int v1; // esi
	//int16_t v2; // ax
	int i; // eax
	int v4; // edx
	type_str_0x6E8E* v5x; // eax
	type_str_0x6E8E* v6x; // edi
	//int v7; // esi
	unsigned int v8; // esi
	type_str_0x6E8E* v9x; // eax
	type_str_0x6E8E* v10x; // esi
	axis_3d* v11; // [esp+4h] [ebp-8h]
	axis_3d* v12; // [esp+8h] [ebp-4h]

	v1 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		a1x->word_0x26_38 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v1 = 1;
		//a1x->word_0x26_38 = v2;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				v1 = 1;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v1 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if (v1 <= 1)
	{
		v6x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (!(a1x->byte_0x3E_62 & 3))
			a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v6x->array_0x4C_76);
		if (v6x->dword_0x8 < 0 || v6x->struct_byte_0xc_12_15.byte[1] & 4)
		{
			a1x->byte_0x45_69 = 121;
			goto LABEL_26;
		}
		//v7 = a1x->dword_0xA0_160;
		if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
		{
			v11 = &v6x->array_0x4C_76;
			v8 = a1x->dword_0xA0_160x->word_160_0x1c_28;
			v12 = &a1x->array_0x4C_76;
			if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v6x->array_0x4C_76) >= v8)
			{
				a1x->byte_0x45_69 = 121;
				goto LABEL_26;
			}
			v9x = sub_4A190(v12, 9, 13);
			v10x = v9x;
			if (v9x)
			{
				v9x->word_0x1A_26 = a1x->word_0x1A_26;
				v9x->word_0x1C_28 = sub_581E0_maybe_tan2(v12, v11);
				v10x->word_0x1E_30 = sub_58210_radix_tan(v12, v11);
				v10x->array_0x4C_76.z += a1x->array_0x52_82.dd / 2;
				v10x->word_0x96_150 = a1x->word_0x96_150;
				v10x->byte_0x42_66 = a1x->byte_0x42_66;
				v10x->byte_0x41_65 = a1x->byte_0x41_65;
				sub_5EF70(v6x);
			}
		}
		sub_1EEE0(a1x);
	}
	else if (v1 == 2)
	{
		a1x->byte_0x45_69 = 124;
	}
LABEL_26:
	if (a1x->byte_0x45_69 != 122)
		sub_24150(a1x);
}

//----- (000240A0) --------------------------------------------------------
void sub_240A0(type_str_0x6E8E* a1x)//2050a0
{
	/*return */sub_1C560(a1x, 0x78u);
}

//----- (000240C0) --------------------------------------------------------
void sub_240C0(type_str_0x6E8E* a1x)//2050c0
{
	sub_1C890(a1x, 120);
}

//----- (000240E0) --------------------------------------------------------
void sub_240E0(type_str_0x6E8E* a1x)//2050e0
{
	sub_1C930(a1x);
}

//----- (00024100) --------------------------------------------------------
void sub_24100(type_str_0x6E8E* a1x)//205100
{
	signed int v1; // edx
	//int result; // eax

	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	v1 = a1x->word_0x14_20 % 0x14u;
	a1x->word_0x82_130 = 0;
	if (v1 <= 10)
		/*result = */sub_49CD0(a1x, 206);
	else
		/*result = */sub_49CD0(a1x, 1);
	//return result;
}

//----- (00024150) --------------------------------------------------------
void sub_24150(type_str_0x6E8E* a1x)//205150
{
	a1x->word_0x82_130 = a1x->word_0x84_132;
	return sub_49CD0(a1x, 0);
}

//----- (00024190) --------------------------------------------------------
void sub_24190(type_str_0x6E8E* a1x)//205190
{
	int v1; // esi
	Bit32u resulta; // eax
	Bit16u resultb;
	uint16_t v3; // ST04_2
	uint16_t v4; // dx
	unsigned int v5; // esi
	int v6; // eax
	type_str_0x6E8E* ix; // ecx
	Bit16u v8y[4]; // [esp+0h] [ebp-18h]
	//int v9; // [esp+4h] [ebp-14h]
	int v10; // [esp+8h] [ebp-10h]
	//int v11; // [esp+Ch] [ebp-Ch]
	int v12; // [esp+10h] [ebp-8h]
	char v13; // [esp+14h] [ebp-4h]

	v10 = 0;
	//v8 = *(x_DWORD *)"X\x1BX\x1B\n";//581b581b a000581b
	//v9 = *(x_DWORD *)"\n";//a0 00
	v8y[0] = 0x1b58;
	v8y[1] = 0x1b58;
	v8y[2] = 0x000a;
	v8y[3] = 0x1b58;

	v12 = 1;
	if (!(a1x->byte_0x3E_62 % 8))
	{
		v1 = ~a1x->dword_0xA0_160x->dword_160_0x14_20;
		resulta = sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76);
		if (resulta & v1)
		{
			a1x->byte_0x45_69 = 124;
			return;// resulta;
		}
		resultb = a1x->word_0x1C_28;
		while (1)
		{
			//v11 = resultb;
			v3= resultb;
			if ((uint16_t)v10 >= 4u)
				break;
			//v3 = v11;
			x_WORD_EB398ar = a1x->array_0x4C_76;
			sub_57FA0(&x_WORD_EB398ar, v3, 0, 256);
			v4 = v10;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v5 = a1x->word_0x14_20 % v8y[v4];
			v6 = (v5 + 2) * (sub_102D0(a1x, &x_WORD_EB398ar, 1) == 0);
			if ((uint16_t)v6 > (uint16_t)v12)
			{
				v12 = v6;
				//a1x->word_0x1C_28 = v11;
				a1x->word_0x1C_28 = v3;
			}
			//result = v11;
			resultb = (resultb+0x200) & 0x7ff;
			//BYTE1(result) = (BYTE1(result) + 2) & 7;
			v10++;
		}
	}
	x_WORD_EB398ar = a1x->array_0x4C_76;
	if (!(a1x->byte_0x3E_62 % 16))
	{
		switch (((a1x->word_0x1C_28 - 256) >> 9) & 3)
		{
		case 0:
		case 2:
			x_WORD_EB398ar.y = (x_WORD_EB398ar.y >> 8 << 8) + 128;
			break;
		case 1:
		case 3:
			x_WORD_EB398ar.x = (x_WORD_EB398ar.x >> 8 << 8) + 128;
			break;
		default:
			break;
		}
	}
	v13 = 0;
	for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (ix->word_0x1A_26 != a1x->word_0x1A_26
			&& abs(a1x->array_0x4C_76.x - ix->array_0x4C_76.x) < 256
			&& abs(a1x->array_0x4C_76.y - ix->array_0x4C_76.y) < 256)
		{
			a1x->word_0x20_32 = sub_581E0_maybe_tan2(&ix->array_0x4C_76, &a1x->array_0x4C_76);
			v13 = 1;
			break;
		}
	}
	if (a1x->word_0x20_32 == a1x->word_0x1C_28
		|| (a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439,
		(signed int)(a1x->word_0x14_20 % 0x14u) <= 10))
	{
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
		sub_57CF0(a1x, &x_WORD_EB398ar);
	}
	/*return */sub_1EEE0(a1x);
	return;
}

//----- (00024400) --------------------------------------------------------
void sub_24400(type_str_0x6E8E* a1x)//205400
{
	sub_1D5D0(a1x, 120);
}

//----- (00024420) --------------------------------------------------------
void sub_24420(type_str_0x6E8E* a1x)//205420
{
	sub_1BD90(a1x, 128);
}

//----- (00024440) --------------------------------------------------------
void sub_24440(type_str_0x6E8E* a1x)//205440
{
	//int v1; // ecx
	type_str_0x6E8E* v2x; // edx
	unsigned int v3; // esi
	type_str_0x6E8E* ix; // eax
	int v5; // ecx
	unsigned int v6; // ecx
	int v7; // eax
	unsigned int v8; // [esp+4h] [ebp-4h]

	//fix
	v2x = 0;
	//fix

	sub_1BF90(a1x, 128);
	if (a1x->byte_0x45_69 == 129)
	{
		//v1 = a1x->dword_0xA0_160;
		//v2 = *(uint8_t *)(a1 + 62) % (*(int16_t *)(v1 + 26) + 1);
		if (!(a1x->byte_0x3E_62 % (a1x->dword_0xA0_160x->word_160_0x1a_26 + 1)))
		{
			v8 = a1x->dword_0xA0_160x->word_160_0x1c_28 * a1x->dword_0xA0_160x->word_160_0x1c_28;
			v3 = -1;
			for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38527; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
			{
				v5 = (int16_t)(ix->array_0x4C_76.x - a1x->array_0x4C_76.x);
				v6 = v5 * v5
					+ (int16_t)(ix->array_0x4C_76.y - a1x->array_0x4C_76.y)
					* (int16_t)(ix->array_0x4C_76.y - a1x->array_0x4C_76.y);
				if (v6 <= v8 && v6 < v3)
				{
					v2x = ix;
					v3 = v6;
				}
			}
			if (v2x)
			{
				v7 = v2x-D41A0_BYTESTR_0.struct_0x6E8E;
				a1x->byte_0x45_69 = 130;
				a1x->word_0x96_150 = v7;
			}
		}
	}
}

//----- (00024510) --------------------------------------------------------
int16_t sub_24510(type_str_0x6E8E* a1x)//205510
{
	int v1; // eax
	type_str_0x6E8E* iz; // eax
	int iy; // eax
	unsigned int v3; // esi
	type_str_0x6E8E* v4x; // edi
	type_str_0x6E8E* v5x; // edi
	int v6; // eax
	type_str_0x6E8E* v7x; // eax
	type_str_0x6E8E* v8x; // esi
	int16_t v9; // ax
	int v10; // eax
	int16_t v11; // ax
	unsigned int v13; // [esp+4h] [ebp-8h]
	axis_3d* v14; // [esp+8h] [ebp-4h]

	v1 = a1x->dword_0xA0_160x->word_160_0x1c_28;
	iy = v1 * v1;
	v3 = 0;
	v13 = iy;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		LOWORD(iy) = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v3 = 1;
		a1x->word_0x26_38 = iy;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (iy = a1x->word_0x34_52; ; iy = v4x->word_0x34_52)
		{
			v4x = x_DWORD_EA3E4[iy];
			if (v4x == x_DWORD_EA3E4[0])
				break;
			iy = v4x->dword_0x8;
			if ((signed int)iy < a1x->dword_0x8)
			{
				a1x->dword_0x8 = (x_DWORD)iy;
				LOWORD(iy) = v4x->word_0x26_38;
				v3 = 1;
				a1x->word_0x26_38 = iy;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		//LOWORD(i) = *(x_WORD *)(a1 + 38);
		v3 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if (v3 < 1)
	{
		if (!v3)
		{
			sub_1B8C0(a1x);
			iz = sub_1ED30(a1x, x_DWORD_EA3E4[a1x->word_0x96_150]);
			v5x = iz;
			if (iz > x_DWORD_EA3E4[0])
			{
				if (!(a1x->byte_0x3E_62 & 7))
				{
					if (a1x->byte_0x3F_63 == 3 || (iy = sub_583F0_distance_3d(&a1x->array_0x4C_76, &iz->array_0x4C_76), iy >= 0x200))
					{
						//LOWORD(i) = sub_581E0_maybe_tan2((Bit16u*)(a1 + 76), (Bit16u*)(v5 + 76));
						a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v5x->array_0x4C_76);
					}
				}
				if (v5x->dword_0x8 < 0 || v5x->struct_byte_0xc_12_15.byte[1] & 4)
				{
					a1x->byte_0x45_69 = 129;
				}
				else
				{
					v6 = a1x->dword_0x10_16;
					if (v6)
					{
						a1x->dword_0x10_16 = v6 - 1;
						v14 = &a1x->array_0x4C_76;
						v7x = sub_4A190(&a1x->array_0x4C_76, 9, 0);
						v8x = v7x;
						if (v7x)
						{
							v7x->byte_0x43_67 = 10;
							v7x->byte_0x44_68 = 0;
							v7x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x81a];
							v7x->byte_0x42_66 = v5x->byte_0x40_64;
							v7x->byte_0x41_65 = v5x->byte_0x3F_63;
							v7x->word_0x1A_26 = a1x->word_0x1A_26;
							v7x->word_0x1C_28 = sub_581E0_maybe_tan2(v14, &v5x->array_0x4C_76);
							v8x->word_0x1E_30 = sub_58210_radix_tan(v14, &v5x->array_0x4C_76);
							v8x->array_0x4C_76.z += 6 * a1x->array_0x52_82.dd;
							v9 = a1x->word_0x96_150;
							v8x->word_0x2A_42 = 1600;
							v8x->dword_0x90_144 = 50000;
							v8x->word_0x96_150 = v9;
						}
					}
					//LOWORD(iy) = (int16_t)a1x->byte_0x3E_62 / *(x_WORD *)(a1x->dword_0xA0_160 + 26);
					if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
					{
						v10 = (int16_t)(v5x->array_0x4C_76.x - a1x->array_0x4C_76.x);
						iy = v10 * v10
							+ (int16_t)(v5x->array_0x4C_76.y - a1x->array_0x4C_76.y)
							* (int16_t)(v5x->array_0x4C_76.y - a1x->array_0x4C_76.y);
						if (iy < v13)
						{
							if (!(a1x->byte_0x3E_62 % (2 * a1x->dword_0xA0_160x->word_160_0x1a_26)))
								sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 39);
							v11 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v5x->array_0x4C_76);
							LOWORD(iy) = sub_582B0(a1x->word_0x1C_28, v11);
							if ((uint16_t)iy < 0xE3u)
							{
								a1x->dword_0x10_16 = 15;
								/*LOWORD(i) = */sub_5EF70(v5x);
							}
						}
						else
						{
							a1x->byte_0x45_69 = 129;
						}
					}
				}
			}
		}
	}
	else if (v3 <= 1)
	{
		LOWORD(iy) = a1x->word_0x26_38;
		a1x->word_0x96_150 = iy;
	}
	else if (v3 == 2)
	{
		a1x->byte_0x45_69 = 132;
	}
	return iy;
}

//----- (000247D0) --------------------------------------------------------
void sub_247D0(type_str_0x6E8E* a1x)//2057d0
{
	/*return */sub_1C560(a1x, 0x80u);
}

//----- (000247F0) --------------------------------------------------------
void sub_247F0(type_str_0x6E8E* a1x)//2057f0
{
	sub_1C890(a1x, 128);
}

//----- (00024810) --------------------------------------------------------
void sub_24810(type_str_0x6E8E* a1x)//205810
{
	sub_1C930(a1x);
}

//----- (00024840) --------------------------------------------------------
void sub_24840(type_str_0x6E8E* a1x)//205840
{
	sub_1D5D0(a1x, 128);
}

//----- (00024860) --------------------------------------------------------
void sub_24860(type_str_0x6E8E* a1x)//205860
{
	type_str_0x6E8E* resultx; // eax
	char v2; // dh

	/*result = */sub_1BD90(a1x, 136);
	//BYTE1(result) = *(x_BYTE *)(a1 + 69);
	if (a1x->byte_0x45_69 == 138)
	{
		resultx = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (resultx <= x_DWORD_EA3E4[0] || resultx ->byte_0x3F_63 != 3 || (v2 = resultx->byte_0x40_64) != 0 && v2 != 1)
			a1x->word_0x96_150 = 0;
		a1x->byte_0x46_70 = 0;
	}
	//return result;
}

//----- (000248C0) --------------------------------------------------------
void sub_248C0(type_str_0x6E8E* a1x)//2058c0
{
	type_str_0x6E8E* v1x; // eax
	char v2; // dh

	sub_1BF90(a1x, 136);
	if (a1x->byte_0x45_69 == 138)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v1x <= x_DWORD_EA3E4[0] || v1x->byte_0x3F_63 != 3 || (v2 = v1x->byte_0x40_64) != 0 && v2 != 1)
			a1x->word_0x96_150 = 0;
		a1x->byte_0x46_70 = 0;
	}
}

//----- (00024930) --------------------------------------------------------
int16_t sub_24930(type_str_0x6E8E* a1x)//205930
{
	unsigned int v1; // eax
	int16_t v2; // ax
	type_str_0x6E8E* ix; // ecx
	int v4; // edx
	type_str_0x6E8E* v5x; // eax
	char v6; // al
	type_str_0x6E8E* jx; // ecx
	signed int v8; // esi
	signed int v9; // eax
	int16_t v10; // ax
	int v11; // esi
	signed int v13; // [esp+0h] [ebp-10h]
	signed int v14; // [esp+4h] [ebp-Ch]
	type_str_0x6E8E* v15x; // [esp+8h] [ebp-8h]

	sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 58);
	v1 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v2;
		v1 = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (ix = x_DWORD_EA3E4[a1x->word_0x34_52];
			ix != x_DWORD_EA3E4[0];
			ix = x_DWORD_EA3E4[ix->word_0x34_52])
		{
			v4 = ix->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				a1x->word_0x26_38 = ix->word_0x26_38;
				v1 = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		v1 = 2;
	}
	if (v1 < 1)
	{
		if (v1)
			return v1;
	}
	else
	{
		if (v1 > 1)
		{
			if (v1 == 2)
				a1x->byte_0x45_69 = 140;
			return v1;
		}
		a1x->word_0x96_150 = a1x->word_0x26_38;
	}
	v13 = sub_1B8C0(a1x);
	v5x = sub_1ED30(a1x, x_DWORD_EA3E4[a1x->word_0x96_150]);
	v15x = v5x;
	if (v5x <= x_DWORD_EA3E4[0] || v5x->dword_0x8 < 0 || v5x->struct_byte_0xc_12_15.byte[1] & 4)
	{
		a1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xb4a];
		a1x->word_0x96_150 = 0;
		LOWORD(v1) = a1x->word_0x84_132;
		a1x->byte_0x45_69 = 137;
		a1x->word_0x82_130 = v1;
	}
	else
	{
		if (!(a1x->byte_0x3E_62 & 3))
		{
			v6 = a1x->byte_0x46_70;
			if (!v6 || v6 == 4)
			{
				a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v15x->array_0x4C_76);
				for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
				{
					if (jx->word_0x1A_26 != a1x->word_0x1A_26
						&& abs(a1x->array_0x4C_76.x - jx->array_0x4C_76.x) < a1x->array_0x52_82.xshift
						&& abs(a1x->array_0x4C_76.y - jx->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
					{
						a1x->word_0x20_32 = sub_581E0_maybe_tan2(&jx->array_0x4C_76, &a1x->array_0x4C_76);
						break;
					}
				}
			}
		}
		LOWORD(v1) = a1x->byte_0x46_70;
		switch ((x_BYTE)v1)
		{
		case 0:
			LOWORD(v1) = a1x->byte_0x3E_62 / a1x->dword_0xA0_160x->word_160_0x1a_26;
			if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
			{
				v1 = sub_583F0_distance_3d(&a1x->array_0x4C_76, &v15x->array_0x4C_76);
				if (v1 >= a1x->dword_0xA0_160x->word_160_0x1c_28)
				{
					a1x->byte_0x45_69 = 137;
				}
				else if (v1 >= 0x700)
				{
					LOWORD(v1) = sub_1D0E0(a1x, v15x);
				}
				else
				{
					a1x->byte_0x46_70 = 1;
				}
			}
			return v1;
		case 1:
			LOWORD(v1) = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v15x->array_0x4C_76);
			a1x->word_0x20_32 = v1;
			a1x->word_0x1C_28 = v1;
			LOWORD(v1) = 3 * a1x->word_0x84_132;
			a1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xb8e];
			a1x->dword_0x10_16 = 0;
			a1x->byte_0x46_70 = 2;
			a1x->word_0x82_130 = v1;
			return v1;
		case 2:
		case 3:
			if (v13 != 3)
				a1x->word_0x1C_28 = a1x->word_0x20_32;
			v8 = a1x->dword_0x10_16;
			if (v8 <= 4)
			{
				v9 = 192 >> a1x->dword_0x10_16;
			}
			else
			{
				if (4 - (v8 - 4) <= 0)
				{
					v14 = -192;
					goto LABEL_49;
				}
				v9 = -(192 >> (4 - (v8 - 4)));
			}
			v14 = v9;
		LABEL_49:
			a1x->dword_0x10_16++;
			v10 = a1x->word_0x82_130;
			if (v10 > a1x->word_0x86_134)
				a1x->word_0x82_130 = v10 - 8;
			x_WORD_EB398ar = a1x->array_0x4C_76;
			v11 = v14 + x_WORD_EB398ar.z;
			LOWORD(v1) = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
			if (v11 <= (int16_t)v1)
			{
				a1x->byte_0x46_70 = 4;
				a1x->dword_0x10_16 = 18;
			}
			else
			{
				LOBYTE(v1) = v14;
				BYTE1(v1) = a1x->byte_0x46_70;
				a1x->array_0x4C_76.z += v14;
				if (BYTE1(v1) != 3)
				{
					LOWORD(v1) = sub_1CED0(a1x, v15x);
					if ((x_WORD)v1)
						a1x->byte_0x46_70 = 3;
				}
			}
			break;
		case 4:
			v1 = a1x->dword_0x10_16;
			a1x->dword_0x10_16 = v1 - 1;
			if (v1)
			{
				if (v1 == 18)
				{
					LOWORD(v1) = a1x->word_0x86_134;
					a1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xb4a];
					a1x->word_0x82_130 = v1;
				}
			}
			else
			{
				a1x->byte_0x46_70 = 0;
				LOWORD(v1) = a1x->word_0x84_132;
				a1x->word_0x82_130 = v1;
			}
			return v1;
		default:
			return v1;
		}
	}
	return v1;
}

//----- (00024D40) --------------------------------------------------------
void sub_24D40(type_str_0x6E8E* a1x)//205d40
{
	//type_str_0x6E8E* v1x; // eax
	//char v2; // dh

	/*LOBYTE(v1x) = */sub_1C560(a1x, 0x88u);
	if (a1x->byte_0x45_69 == 138)
	{
		//v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (x_DWORD_EA3E4[a1x->word_0x96_150] <= x_DWORD_EA3E4[0] || x_DWORD_EA3E4[a1x->word_0x96_150]->byte_0x3F_63 != 3 /*|| (v2 = v1x->byte_0x40_64) != 0*/ && x_DWORD_EA3E4[a1x->word_0x96_150]->byte_0x40_64 != 1)
			a1x->word_0x96_150 = 0;
		a1x->byte_0x46_70 = 0;
	}
	//return v1x;
}

//----- (00024DA0) --------------------------------------------------------
void sub_24DA0(type_str_0x6E8E* a1x)//205da0
{
	sub_1C890(a1x, 136);
}

//----- (00024DC0) --------------------------------------------------------
void sub_24DC0(type_str_0x6E8E* a1x)//205dc0
{
	sub_1C930(a1x);
}

//----- (00024DF0) --------------------------------------------------------
void sub_24DF0(type_str_0x6E8E* a1x)//205df0
{
	sub_1D5D0(a1x, 136);
	if (a1x->byte_0x45_69 == 138)
		a1x->byte_0x46_70 = 0;
}

//----- (00024E20) --------------------------------------------------------
int sub_24E20(type_str_0x6E8E* a1x)//205e20
{
	int result; // eax
	int v2; // edx
	int v3; // eax
	type_str_0x6E8E* v4x; // edi
	type_str_0x6E8E* v5x; // esi
	int v6; // eax
	int v7; // ST10_4
	int16_t v8; // ax
	int v9; // eax
	type_str_0x6E8E* v10x; // esi
	int v11; // eax
	unsigned int v12; // [esp+0h] [ebp-10h]
	unsigned int v13; // [esp+8h] [ebp-8h]
	unsigned int v14; // [esp+Ch] [ebp-4h]

	result = sub_252E0(a1x);
	if (result)
	{
		if (result == 1)
			result = sub_253B0(/*1, */a1x, 2u, 0);
	}
	else
	{
		result = a1x->byte_0x46_70;
		if ((x_BYTE)result)
		{
			if ((x_BYTE)result == 1 && a1x->word_0x96_150)
			{
				v10x = x_DWORD_EA3E4[a1x->word_0x96_150];
				v11 = sub_58490_radix_3d_2(&a1x->array_0x4C_76, &v10x->array_0x4C_76);
				if (v11 < a1x->dword_0xA0_160x->word_160_0x1c_28)
				{
					sub_254E0(a1x, v10x, 4u);
					a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
					result = a1x->word_0x14_20 / 0x31u;
					if (!(a1x->word_0x14_20 % 0x31u))
						result = sub_253B0(/*result, */a1x, 2u, 0);
				}
				else
				{
					a1x->word_0x96_150 = 0;
					result = sub_253B0(/*v11, */a1x, 0, 0);
				}
			}
		}
		else
		{
			v2 = a1x->dword_0x10_16 - 1;
			a1x->dword_0x10_16 = v2;
			if (v2)
			{
				if (a1x->byte_0x39_57)
				{
					a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
					result = a1x->word_0x14_20 & 1;
					if (!result)
					{
						v3 = a1x->dword_0xA0_160x->word_160_0x1c_28;
						result = v3 * v3;
						v13 = -1;
						v4x = 0;
						v5x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
						v12 = result;
						while (v5x > x_DWORD_EA3E4[0])
						{
							v6 = (int16_t)(v5x->array_0x4C_76.x - a1x->array_0x4C_76.x);
							result = (int16_t)(v5x->array_0x4C_76.y - a1x->array_0x4C_76.y)
								* (int16_t)(v5x->array_0x4C_76.y - a1x->array_0x4C_76.y)
								+ v6 * v6;
							v14 = result;
							if (result <= v12 && !(v5x->struct_byte_0xc_12_15.byte[0] & 0x20))
							{
								v7 = a1x->dword_0xA0_160x->word_160_0x1e_30;
								v8 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v5x->array_0x4C_76);
								result = (uint16_t)sub_582B0(a1x->word_0x1C_28, v8);
								if (result < v7)
								{
									result = v14;
									if (v14 < v13)
									{
										v4x = v5x;
										v13 = v14;
									}
								}
							}
							v5x = v5x->next_0;
						}
						if (v4x && v4x->byte_0x3F_63 == 3)
						{
							v9 = v4x-D41A0_BYTESTR_0.struct_0x6E8E;
							a1x->word_0x96_150 = v9;
							result = sub_253B0(/*v9, */a1x, 0, 1u);
						}
					}
				}
			}
			else
			{
				result = sub_253B0(/*result, */a1x, 1u, 0);
			}
		}
	}
	return result;
}

//----- (00025050) --------------------------------------------------------
int sub_25050(type_str_0x6E8E* a1x)//206050
{
	int result; // eax
	int v2; // edx

	result = sub_252E0(a1x);
	if (result)
	{
		if (result == 1)
			result = sub_253B0(/*1, */a1x, 0, 1u);
	}
	else
	{
		a1x->word_0x96_150 = 0;
		result = sub_1B8C0(a1x);
		v2 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16 = v2;
		if (v2 <= 0)
			result = sub_253B0(/*result, */a1x, 0, 0);
	}
	return result;
}

//----- (000250B0) --------------------------------------------------------
int sub_250B0(type_str_0x6E8E* a1x)//2060b0
{
	int v1; // eax
	int v2; // esi
	int v3; // edx	
	//int v4; // esi
	//int v5y; // eax
	type_str_0x6E8E* v5x; // eax
	type_str_0x6E8E* v6x; // esi
	//int v7; // ecx

	v1 = sub_252E0(a1x);
	v2 = v1;
	if ((unsigned int)v1 <= 1)
	{
		v1 = a1x->byte_0x46_70;
		switch ((x_BYTE)v1)
		{
		case 0:
			v1 = sub_254E0(a1x, x_DWORD_EA3E4[a1x->word_0x96_150], 4u);
			if (v2 == 1)
			{
				v3 = a1x->dword_0x10_16 - 47;
				a1x->dword_0x10_16 = v3;
				if (v3 < 0)
					LOWORD(v1) = sub_253B0(/*v1, */a1x, 2u, 1u);
			}
			else
			{
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v1 = a1x->word_0x14_20 / 0x29u;
				if (a1x->word_0x14_20 % 0x29u)
				{
					//v4 = a1x->dword_0x10_16 - 1;
					a1x->dword_0x10_16--;// = v4;
					if (a1x->dword_0x10_16 < 0)
						LOWORD(v1) = sub_253B0(/*v1, */a1x, 2u, 2u);
				}
				else
				{
					LOWORD(v1) = sub_253B0(/*v1, */a1x, 2u, 1u);
				}
			}
			return v1;
		case 1:
			//v5y = (a1x->dword_0x10_16 - 1);
			a1x->dword_0x10_16--;// = (Bit32u)v5y;
			if (a1x->dword_0x10_16 <= 0)
				goto LABEL_17;
			//LOWORD(v1) = a1x->byte_0x3E_62 / *(x_WORD *)(a1x->dword_0xA0_160 + 26);
			if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
			{
				v5x = sub_1ED30(a1x, x_DWORD_EA3E4[a1x->word_0x96_150]);
				v6x = v5x;
				if (v5x <= x_DWORD_EA3E4[0] || v5x->dword_0x8 < 0 || v5x->struct_byte_0xc_12_15.byte[1] & 4)
				{
				LABEL_17:
					LOWORD(v1) = sub_253B0(/*v5x, */a1x, 2u, 2u);
				}
				else
				{
					a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v5x->array_0x4C_76);
					a1x->word_0x1C_28 += sub_58350(a1x->word_0x1C_28, a1x->word_0x20_32, 5, 0x400u);
					a1x->word_0x1C_28 &= 0x7ff;
					LOWORD(v1) = sub_1D460(a1x, v6x);
				}
			}
			break;
		case 2:
			//v1 = a1x->dword_0x10_16 - 1;
			a1x->dword_0x10_16--;// = v1;
			if (a1x->dword_0x10_16 <= 0)
				LOWORD(v1) = sub_253B0(/*a1x->dword_0x10_16, */a1x, 2u, 3u);
			break;
		case 3:
			//v7 = a1x->dword_0x10_16 - 1;
			a1x->dword_0x10_16--;// = v7;
			if (a1x->dword_0x10_16 < 0)
			{
				LOWORD(v1) = sub_253B0(/*v1, */a1x, 1u, 0);
			}
			else if (a1x->dword_0x10_16 >= 8)
			{
				a1x->word_0x1C_28 += 170;
				a1x->word_0x1C_28 &= 0x7ff;
				//LOWORD(v1) = a1x->word_0x1C_28;
				a1x->word_0x20_32 = a1x->word_0x1C_28;
			}
			break;
		default:
			return v1;
		}
	}
	return v1;
}

//----- (00025280) --------------------------------------------------------
int sub_25280(/*int a1, */type_str_0x6E8E* a2x)//206280
{
	return sub_253B0(/*a1, */a2x, 0, 0);
}

//----- (000252A0) --------------------------------------------------------
void sub_252A0(type_str_0x6E8E* a1x)//2062a0
{
	sub_1C890(a1x, 144);
}

//----- (000252C0) --------------------------------------------------------
void sub_252C0(type_str_0x6E8E* a1x)//2062c0
{
	sub_1C930(a1x);
}

//----- (000252E0) --------------------------------------------------------
unsigned int sub_252E0(type_str_0x6E8E* a1x)//2062e0
{
	int16_t v1; // ax
	int16_t v2; // dx
	unsigned int result; // eax
	int16_t v4; // ax
	int i; // edx
	int v6; // ecx
	type_str_0x6E8E* v7x; // edx

	v1 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	v2 = a1x->str_0x5E_94.word_0x62_98;
	a1x->array_0x4C_76.z = v1;
	result = 0;
	if (v2)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v4 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v4;
		result = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v7x->word_0x34_52)
		{
			v7x = x_DWORD_EA3E4[i];
			if (v7x == x_DWORD_EA3E4[0])
				break;
			v6 = v7x->dword_0x8;
			if (v6 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v6;
				a1x->word_0x26_38 = v7x->word_0x26_38;
				result = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		result = 2;
	}
	if (result >= 1)
	{
		if (result <= 1)
		{
			a1x->word_0x96_150 = a1x->word_0x26_38;
		}
		else if (result == 2)
		{
			a1x->byte_0x45_69 = 148;
		}
	}
	return result;
}

//----- (000253B0) --------------------------------------------------------
int sub_253B0(/*int result, */type_str_0x6E8E* a2x, uint8_t a3, uint8_t a4)//2063b0
{
	signed int v4; // esi
	uint64_t v5; // rax
	uint64_t v6; // rt2

	int result = 0;

	if (a3 < 1u)
	{
		if (!a3)
		{
			if (a4)
			{
				if (a4 != 1)
					goto LABEL_19;
				HIDWORD(v5) = 0;
				a2x->word_0x14_20 = 9377 * a2x->word_0x14_20 + 9439;
				WORD1(v5) = 0;
				v4 = 60;
			}
			else
			{
				v4 = 400;
				a2x->word_0x14_20 = 9377 * a2x->word_0x14_20 + 9439;
				v5 = 0;
			}
			LOWORD(v5) = a2x->word_0x14_20;
			v6 = v5 % (unsigned int)v4;
			result = v5 / (unsigned int)v4;
			a2x->dword_0x10_16 = v4 + v6;
		}
	LABEL_19:
		a2x->byte_0x46_70 = a4;
		a2x->byte_0x45_69 = a3 - 112;
		return result;
	}
	if (a3 <= 1u)
	{
		a2x->word_0x14_20 = 9377 * a2x->word_0x14_20 + 9439;
		result = a2x->word_0x14_20 / 0x190u;
		a2x->dword_0x10_16 = a2x->word_0x14_20 % 0x190u + 400;
		a2x->byte_0x46_70 = a4;
		a2x->byte_0x45_69 = a3 - 112;
		return result;
	}
	if (a3 != 2 || a4 > 3u)
		goto LABEL_19;
	result = a4;
	switch (a4)
	{
	case 0u:
		a2x->word_0x14_20 = 9377 * a2x->word_0x14_20 + 9439;
		result = a2x->word_0x14_20 / 0xC8u;
		a2x->dword_0x10_16 = a2x->word_0x14_20 % 0xC8u + 200;
		a2x->byte_0x46_70 = a4;
		a2x->byte_0x45_69 = 146;
		break;
	case 1u:
		a2x->dword_0x10_16 = 10;
		a2x->byte_0x46_70 = a4;
		a2x->byte_0x45_69 = 146;
		break;
	case 2u:
		a2x->dword_0x10_16 = 12;
		a2x->byte_0x46_70 = a4;
		a2x->byte_0x45_69 = 146;
		break;
	case 3u:
		a2x->dword_0x10_16 = 14;
		goto LABEL_19;
	}
	return result;
}

//----- (000254E0) --------------------------------------------------------
int sub_254E0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, uint8_t a3)//2064e0
{
	type_str_0x6E8E* v3x; // ebx
	int result; // eax

	v3x = a1x;
	a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
	result = sub_58350(v3x->word_0x1C_28, v3x->word_0x20_32, 5, (a3 << 11) / 360);
	v3x->word_0x1C_28 += result;
	//BYTE1(result) = *(x_BYTE *)(a1 + 29) & 7;
	a1x->word_0x1C_28 &= 0x7ff;// BYTE1(result);
	return result;
}

//----- (00025550) --------------------------------------------------------
void sub_25550(type_str_0x6E8E* a1x)//206550
{
	//int result; // eax

	sub_1D5D0(a1x, 144);
	//result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	//BYTE1(result) = a1x->byte_0x45_69;
	if (a1x->byte_0x45_69 == 146)
		/*result = */sub_253B0(/*result, */a1x, 2u, 0);
	//return result;
}

//----- (00025590) --------------------------------------------------------
void sub_25590(type_str_0x6E8E* a1x)//206590
{
	//signed int result; // eax

	/*result = */sub_1BD90(a1x, 152);
	//BYTE1(result) = *(x_BYTE *)(a1 + 69);
	if (a1x->byte_0x45_69 == 154)
		a1x->byte_0x46_70 = 0;
	//return result;
}

//----- (000255C0) --------------------------------------------------------
void sub_255C0(type_str_0x6E8E* a1x)//2065c0
{
	sub_1BF90(a1x, 152);
	if (a1x->byte_0x45_69 == 154)
		a1x->byte_0x46_70 = 0;
}

//----- (00025610) --------------------------------------------------------
void sub_25610(type_str_0x6E8E* a1x)//206610
{
	unsigned int v1; // eax
	int16_t v2; // ax
	int i; // edx
	int v4; // edx
	type_str_0x6E8E* v5x; // ecx
	int16_t v6; // ax
	type_str_0x6E8E* v7x; // eax
	int16_t v8; // ax
	int16_t v9; // ax
	char v10; // dh
	type_str_0x6E8E* jx; // ecx
	int16_t v12; // cx
	int v13; // eax
	int v14; // edx
	type_str_0x6E8E* v15x; // ecx
	unsigned int v16; // edx
	int16_t v17; // dx
	int16_t v18; // dx
	int16_t v19; // ST0C_2
	int16_t v20; // ax
	int v21; // edi
	type_str_0x6E8E* v22x; // ecx
	int v23; // ecx
	char v24; // dh
	//int v25; // ecx
	unsigned int v26; // esi
	int16_t v27; // ax
	int16_t v28; // ax
	//int v29; // edx
	type_str_0x6E8E* v30x; // ecx
	//int v31; // ecx
	unsigned int v32; // esi
	int16_t v33; // ax
	type_str_0x6E8E* v34x; // [esp+0h] [ebp-14h]

	v1 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v2;
		v1 = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				v1 = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		v1 = 2;
	}
	if (v1 < 1)
	{
		if (!v1)
		{
			sub_1B8C0(a1x);
			v7x = sub_1ED30(a1x, x_DWORD_EA3E4[a1x->word_0x96_150]);
			v34x =v7x;
			if (v7x <= x_DWORD_EA3E4[0] || v7x->dword_0x8 < 0 || v7x->struct_byte_0xc_12_15.byte[1] & 4)
			{
			LABEL_92:
				v33 = a1x->word_0x84_132;
				a1x->byte_0x45_69 = 153;
				a1x->word_0x82_130 = v33;
			}
			else
			{
				switch (a1x->byte_0x46_70)
				{
				case 0:
					v8 = a1x->word_0x84_132;
					a1x->byte_0x46_70 = 1;
					a1x->word_0x82_130 = v8;
					goto LABEL_25;
				case 1:
				LABEL_25:
					x_WORD_EB398ar = v34x->array_0x4C_76;
					a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
					sub_57FA0(
						&x_WORD_EB398ar,
						(v34x->word_0x1C_28 - 256 + (signed int)(a1x->word_0x14_20 % 0x5Au << 11) / 360) & 0x7FF,
						0,
						2048);
					if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &x_WORD_EB398ar) <= 0x500)
					{
						a1x->byte_0x46_70 = 2;
					}
					else
					{
						v9 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &x_WORD_EB398ar);
						v10 = a1x->byte_0x3E_62;
						a1x->word_0x20_32 = v9;
						if (v10 & 3)
							return;
						for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
						{
							if (jx->word_0x1A_26 != a1x->word_0x1A_26
								&& abs(a1x->array_0x4C_76.x - jx->array_0x4C_76.x) < a1x->array_0x52_82.xshift
								&& abs(a1x->array_0x4C_76.y - jx->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
							{
								a1x->word_0x20_32 = sub_581E0_maybe_tan2(&jx->array_0x4C_76, &a1x->array_0x4C_76);
								return;
							}
						}
					}
					return;
				case 2:
					v12 = a1x->word_0x14_20;
					a1x->word_0x82_130 = a1x->word_0x86_134;
					a1x->word_0x14_20 = 9377 * v12 + 9439;
					v13 = v7x->array_0x4C_76.z;
					v14 = a1x->word_0x14_20 & 0x3FF;
					a1x->byte_0x46_70 = 3;
					a1x->dword_0x10_16 = v14 + v13;
					goto LABEL_37;
				case 3:
				LABEL_37:
					a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v34x->array_0x4C_76);
					if (a1x->byte_0x3E_62 & 3)
						return;
					v15x = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64];
					while (2)
					{
						if (v15x > x_DWORD_EA3E4[0])
						{
							if (v15x->word_0x1A_26 == a1x->word_0x1A_26
								|| abs(a1x->array_0x4C_76.x - v15x->array_0x4C_76.x) >= a1x->array_0x52_82.xshift
								|| abs(a1x->array_0x4C_76.y - v15x->array_0x4C_76.y) >= a1x->array_0x52_82.xshift)
							{
								v15x = v15x->next_0;
								continue;
							}
							a1x->word_0x20_32 = sub_581E0_maybe_tan2(&v15x->array_0x4C_76, &a1x->array_0x4C_76);
						}
						break;
					}
					x_WORD_EB398ar = v34x->array_0x4C_76;
					sub_57FA0(&x_WORD_EB398ar, v34x->word_0x1C_28, 0, 2048);
					if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &x_WORD_EB398ar) > 0x500)
					{
					LABEL_57:
						a1x->byte_0x46_70 = 0;
					}
					else
					{
						a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
						v16 = a1x->word_0x14_20 % 0x11Fu;
						if (!(v16 & 0x3F))
							a1x->byte_0x46_70 = 6;
						if (!(v16 & 0x1F))
							a1x->byte_0x46_70 = 7;
						if (!v16)
							a1x->byte_0x46_70 = 4;
						if (!(v16 & 3))
						{
							if (a1x->array_0x4C_76.z <= a1x->dword_0x10_16)
								v17 = 64;
							else
								v17 = -64;
							a1x->array_0x4C_76.z += v17;
						}
					}
					return;
				case 4:
					v27 = a1x->word_0x84_132;
					a1x->byte_0x46_70 = 5;
					a1x->word_0x82_130 = v27;
					goto LABEL_81;
				case 5:
				LABEL_81:
					if (a1x->byte_0x3E_62 & 3)
						goto LABEL_89;
					v28 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v34x->array_0x4C_76);
					//v29 = (int)x_D41A0_BYTEARRAY_4;
					a1x->word_0x20_32 = v28;
					v30x = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64];
					while (2)
					{
						if (v30x > x_DWORD_EA3E4[0])
						{
							if (v30x->word_0x1A_26 == a1x->word_0x1A_26
								|| abs(a1x->array_0x4C_76.x - v30x->array_0x4C_76.x) >= a1x->array_0x52_82.xshift
								|| abs(a1x->array_0x4C_76.y - v30x->array_0x4C_76.y) >= a1x->array_0x52_82.xshift)
							{
								v30x = v30x->next_0;
								continue;
							}
							a1x->word_0x20_32 = sub_581E0_maybe_tan2(&v30x->array_0x4C_76, &a1x->array_0x4C_76);
						}
						break;
					}
				LABEL_89:
					//v31 = a1x->dword_0xA0_160;
					if (a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26)
						return;
					v32 = a1x->dword_0xA0_160x->word_160_0x1c_28;
					if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v34x->array_0x4C_76) >= v32)
						goto LABEL_79;
					sub_1CC20(a1x, v34x);
					return;
				case 6:
					goto LABEL_92;
				case 7:
					v18 = a1x->word_0x14_20;
					a1x->word_0x82_130 = 3 * a1x->word_0x84_132;
					a1x->word_0x14_20 = 9377 * v18 + 9439;
					v19 = (a1x->word_0x14_20 & 1) + 43;
					v20 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
					a1x->dword_0x10_16 = 24;
					a1x->byte_0x46_70 = 8;
					sub_6E450_distance_sound(v20, -1, v19);
					goto LABEL_59;
				case 8:
				case 9:
				LABEL_59:
					v21 = a1x->dword_0x10_16 - 1;
					a1x->dword_0x10_16 = v21;
					if (!v21)
						goto LABEL_57;
					if (a1x->byte_0x3E_62 & 3)
						goto LABEL_70;
					if (v21 > 16)
						a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v34x->array_0x4C_76);
					v22x = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64];
					break;
				default:
					return;
				}
				while (v22x > x_DWORD_EA3E4[0])
				{
					if (v22x->word_0x1A_26 != a1x->word_0x1A_26
						&& abs(a1x->array_0x4C_76.x - v22x->array_0x4C_76.x) < a1x->array_0x52_82.xshift
						&& abs(a1x->array_0x4C_76.y - v22x->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
					{
						a1x->word_0x20_32 = sub_581E0_maybe_tan2(&v22x->array_0x4C_76, &a1x->array_0x4C_76);
						break;
					}
					v22x = v22x->next_0;
				}
			LABEL_70:
				v23 = v34x->array_0x4C_76.z - a1x->array_0x4C_76.z;
				if (abs(v23) > 64)
				{
					if (v23 <= 0)
						LOWORD(v23) = -64;
					else
						LOWORD(v23) = 64;
				}
				v24 = a1x->byte_0x46_70;
				a1x->array_0x4C_76.z += v23;
				if (v24 == 8 && (uint16_t)sub_1CED0(a1x, v34x))
					a1x->byte_0x46_70 = 9;
				//v25 = a1x->dword_0xA0_160;
				if (!(a1x->byte_0x3E_62 % a1x->dword_0xA0_160x->word_160_0x1a_26))
				{
					v26 = a1x->dword_0xA0_160x->word_160_0x1c_28;
					if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v34x->array_0x4C_76) >= v26)
						LABEL_79:
					a1x->byte_0x46_70 = 6;
				}
			}
		}
	}
	else if (v1 <= 1)
	{
		v6 = a1x->word_0x26_38;
		a1x->byte_0x46_70 = 7;
		a1x->word_0x96_150 = v6;
	}
	else if (v1 == 2)
	{
		a1x->byte_0x45_69 = 156;
	}
}

//----- (00025CD0) --------------------------------------------------------
void sub_25CD0(type_str_0x6E8E* a1x)//206cd0
{
	//char result; // al

	/*result = */sub_1C560(a1x, 0x98u);
	if (a1x->byte_0x45_69 == 154)
		a1x->byte_0x46_70 = 0;
	//return result;
}

//----- (00025D00) --------------------------------------------------------
void sub_25D00(type_str_0x6E8E* a1x)//206d00
{
	sub_1C890(a1x, 152);
}

//----- (00025D20) --------------------------------------------------------
void sub_25D20(type_str_0x6E8E* a1x)//206d20
{
	sub_1C930(a1x);
}

//----- (00025D50) --------------------------------------------------------
void sub_25D50(type_str_0x6E8E* a1x)//206d50
{
	sub_1D5D0(a1x, 152);
	if (a1x->byte_0x45_69 == 154)
		a1x->byte_0x46_70 = 0;
}

//----- (00025D80) --------------------------------------------------------
void sub_25D80(type_str_0x6E8E* a1x)//206d80
{
	type_str_0x6E8E* resultx; // eax
	char v2; // dh

	/*result = */sub_1BD90(a1x, 160);
	//BYTE1(result) = *(x_BYTE *)(a1 + 69);
	if (a1x->byte_0x45_69 == 162)
	{
		resultx = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (resultx <= x_DWORD_EA3E4[0] || resultx ->byte_0x3F_63 != 3 || (v2 = resultx->byte_0x40_64) != 0 && v2 != 1)
			a1x->word_0x96_150 = 0;
		a1x->byte_0x46_70 = 0;
	}
	//return result;
}

//----- (00025DE0) --------------------------------------------------------
void sub_25DE0(type_str_0x6E8E* a1x)//206de0
{
	type_str_0x6E8E* v1x; // eax
	char v2; // dh

	sub_1BF90(a1x, 160);
	if (a1x->byte_0x45_69 == 162)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v1x <= x_DWORD_EA3E4[0] || v1x->byte_0x3F_63 != 3 || (v2 = v1x->byte_0x40_64) != 0 && v2 != 1)
			a1x->word_0x96_150 = 0;
		a1x->byte_0x46_70 = 0;
	}
}

//----- (00025E40) --------------------------------------------------------
void sub_25E40(type_str_0x6E8E* a1x)//206e40
{
	type_str_0x6E8E* v1x; // esi
	uint8_t v2; // al
	char v3; // al
	bool v4; // zf
	int16_t v5; // dx
	int v6; // ecx
	int16_t v7; // ax
	char v8; // [esp+0h] [ebp-4h]

	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v8 = 0;
	if (v1x <= x_DWORD_EA3E4[0])
	{
		a1x->byte_0x45_69 = 161;
		goto LABEL_21;
	}
	sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 32);
	v2 = a1x->byte_0x46_70;
	if (v2 < 1u)
	{
		if (!v2)
		{
			v3 = sub_1C310(a1x, 160, (uint16_t(*)(type_str_0x6E8E*, type_str_0x6E8E*))sub_1D1A0);
			if (v1x->byte_0x3F_63 != 3 || v1x->byte_0x3F_63)
				v4 = v3 == 0;
			else
				v4 = v1x->dword_0xA4_164x->byte_0x14E_334 == 0;
			if (!v4)
				a1x->byte_0x46_70 = 1;
		}
	}
	else
	{
		if (v2 <= 1u)
		{
			a1x->byte_0x46_70 = 2;
			v5 = a1x->word_0x84_132;
			a1x->dword_0x10_16 = 32;
			a1x->word_0x82_130 = 2 * v5;
		}
		else if (v2 != 2)
		{
			goto LABEL_21;
		}
		if ((uint16_t)sub_1C310(a1x, 160, (uint16_t(*)(type_str_0x6E8E*, type_str_0x6E8E*))sub_1CE80))
			v8 = 1;
		v6 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16 = v6;
		if (!v6)
			v8 = 1;
		if (v8)
		{
			v7 = a1x->word_0x84_132;
			a1x->byte_0x46_70 = 0;
			a1x->word_0x82_130 = v7;
		}
	}
LABEL_21:
	if (a1x->byte_0x45_69 != 162)
		a1x->word_0x82_130 = a1x->word_0x84_132;
}

//----- (00025F70) --------------------------------------------------------
void sub_25F70(type_str_0x6E8E* a1x)//206f70
{
	type_str_0x6E8E* v1x; // eax
	char v2; // dh

	/*LOBYTE(v1) = */sub_1C560(a1x, 0xA0u);
	if (a1x->byte_0x45_69 == 162)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v1x <= x_DWORD_EA3E4[0] || v1x->byte_0x3F_63 != 3 || (v2 = v1x->byte_0x40_64) != 0 && v2 != 1)
			a1x->word_0x96_150 = 0;
		a1x->byte_0x46_70 = 0;
	}
	//return v1;
}

//----- (00025FD0) --------------------------------------------------------
void sub_25FD0(type_str_0x6E8E* a1x)//206fd0
{
	sub_1C890(a1x, 160);
}

//----- (00025FF0) --------------------------------------------------------
void sub_25FF0(type_str_0x6E8E* a1x)//206ff0
{
	sub_1C930(a1x);
}

//----- (00026020) --------------------------------------------------------
void sub_26020(type_str_0x6E8E* a1x)//207020
{
	sub_1D5D0(a1x, 160);
	if (a1x->byte_0x45_69 == 162)
		a1x->byte_0x46_70 = 0;
}

//----- (00026050) --------------------------------------------------------
type_str_0x6E8E* sub_26050(type_str_0x6E8E* a1x)//207050
{
	return sub_268F0(a1x, 1u);
}

//----- (00026070) --------------------------------------------------------
char sub_26070(type_str_0x6E8E* a1x)//207070
{
	signed int v1; // eax
	uint16_t v2; // ax
	int v3; // eax
	type_str_0x6E8E* v4x; // edi
	type_str_0x6E8E* v5x; // esi
	int v6; // eax
	int v7; // edx
	int v8; // eax
	signed int v9; // ST08_4
	int16_t v10; // ax
	unsigned int v12; // [esp+4h] [ebp-Ch]
	unsigned int v13; // [esp+8h] [ebp-8h]
	unsigned int v14; // [esp+Ch] [ebp-4h]

	v1 = sub_26830(a1x);
	if ((unsigned int)v1 <= 1)
	{
		sub_1B8C0(a1x);
		sub_265A0(a1x);
		LOBYTE(v1) = sub_26930(a1x);
		if ((x_BYTE)v1)
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v2 = a1x->word_0x14_20;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			a1x->word_0x1C_28 += ((a1x->word_0x14_20 & 0xFF) + 85) * (2 * ((signed int)(v2 % 0x9Du) / 79) - 1);
			a1x->word_0x1C_28 &= 0x7ff;
			LOWORD(v1) = a1x->word_0x1C_28;
			a1x->word_0x20_32 = v1;
		}
		if (!(a1x->byte_0x3E_62 & 0x3F) && a1x->byte_0x39_57)
		{
			v3 = a1x->dword_0xA0_160x->word_160_0x1c_28;
			v1 = v3 * v3;
			v4x = 0;
			v13 = -1;
			v5x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
			v12 = v1;
			while (v5x > x_DWORD_EA3E4[0])
			{
				v6 = (int16_t)(v5x->array_0x4C_76.x - a1x->array_0x4C_76.x);
				v7 = v6 * v6;
				v8 = (int16_t)(v5x->array_0x4C_76.y - a1x->array_0x4C_76.y);
				v1 = v8 * v8;
				v14 = v1 + v7;
				if (v1 + v7 <= v12 && !(v5x->struct_byte_0xc_12_15.byte[0] & 0x20))
				{
					v9 = a1x->dword_0xA0_160x->word_160_0x1e_30;
					v10 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v5x->array_0x4C_76);
					v1 = (uint16_t)sub_582B0(a1x->word_0x1C_28, v10);
					if (v1 < v9)
					{
						LOBYTE(v1) = v14;
						if (v14 < v13)
						{
							v4x = v5x;
							v13 = v14;
						}
					}
				}
				v5x = v5x->next_0;
			}
			if (v4x)
			{
				a1x->word_0x96_150 = v4x-D41A0_BYTESTR_0.struct_0x6E8E;
				/*LOBYTE(v1) = */sub_268F0(a1x, 2u);
			}
		}
	}
	return v1;
}

//----- (00026220) --------------------------------------------------------
void sub_26220(/*type_str_0x6E8E* a1x, */type_str_0x6E8E* a2x)//207220
{
	unsigned int result; // eax
	uint16_t v3; // dx
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* ix; // ecx
	unsigned int v6; // edi
	char v7; // [esp+8h] [ebp-8h]
	char v8; // [esp+Ch] [ebp-4h]

	v4x = NULL;//fix

	v7 = 1;
	v8 = 0;
	result = sub_26830(a2x);
	if (result <= 1)
	{
		v3 = a2x->word_0x96_150;
		if (v3)
		{
			v4x = sub_1ED30(a2x, x_DWORD_EA3E4[v3]);
			//a1x = v4x;
			if (v4x <= x_DWORD_EA3E4[0] || v4x->dword_0x8 < 0 || v4x->struct_byte_0xc_12_15.byte[1] & 4)
				v7 = 0;
		}
		else
		{
			v7 = 0;
		}
		if (!v7)
			goto LABEL_26;
		if (sub_26930(a2x))
		{
			a2x->word_0x20_32 = sub_581E0_maybe_tan2(&a2x->array_0x4C_76, &v4x->array_0x4C_76);
			if (!(a2x->byte_0x3E_62 & 3))
			{
				for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a2x->byte_0x40_64]; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
				{
					if (ix->word_0x1A_26 != a2x->word_0x1A_26
						&& abs(a2x->array_0x4C_76.x - ix->array_0x4C_76.x) < a2x->array_0x52_82.xshift
						&& abs(a2x->array_0x4C_76.y - ix->array_0x4C_76.y) < a2x->array_0x52_82.xshift)
					{
						a2x->word_0x20_32 = sub_581E0_maybe_tan2(&ix->array_0x4C_76, &a2x->array_0x4C_76);
						break;
					}
				}
			}
		}
		if (a2x->byte_0x3E_62 & 0x1F)
			goto LABEL_22;
		v6 = a2x->dword_0xA0_160x->word_160_0x1c_28;
		if (sub_583F0_distance_3d(&a2x->array_0x4C_76, &v4x->array_0x4C_76) < v6)
			sub_1CC20(a2x, v4x);
		else
			LABEL_26:
		v8 = 1;
	LABEL_22:
		sub_1B8C0(a2x);
		/*result = */sub_265A0(a2x);
		if (v8)
			/*result = */sub_268F0(a2x, 1u);
	}
	//return result;
}

//----- (000263C0) --------------------------------------------------------
type_str_0x6E8E* sub_263C0(type_str_0x6E8E* a1x)//2073c0
{
	return sub_268F0(a1x, 1u);
}

//----- (000263E0) --------------------------------------------------------
void sub_263E0(type_str_0x6E8E* a1x)//2073e0
{
	sub_1C890(a1x, 168);
}

//----- (00026400) --------------------------------------------------------
void sub_26400(type_str_0x6E8E* a1x)//207400
{
	sub_1C930(a1x);
}

//----- (00026470) --------------------------------------------------------
void sub_26470(type_str_0x6E8E* a1x)//207470
{
	int result; // eax

	sub_1D5D0(a1x, 168);
	result = (uint8_t)(a1x->byte_0x49_73 - 1);
	switch (a1x->byte_0x49_73)
	{
	case 1:
	case 2:
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
	case 0xA:
		/*result = */sub_265A0(a1x);
		break;
	case 0xD:
	case 0xE:
	case 0x10:
		a1x->byte_0x43_67 = 0;
		/*result = */sub_265A0(a1x);
		break;
	default:
		break;
	}
	//HIBYTE(result) = a1x->byte_0x45_69;
	if (a1x->byte_0x45_69 != 175)
		/*result = */sub_268F0(a1x, a1x->byte_0x45_69 + 88);
	//return result;
}

//----- (00026500) --------------------------------------------------------
void sub_26500(/*int result, */type_str_0x6E8E* a2x)//207500
{
	int result;
	switch (a2x->byte_0x46_70)
	{
	case 0:
		result = 311;
		break;
	case 1:
	case 2:
	case 3:
	case 9:
		result = 308;
		break;
	case 4:
		result = 309;
		break;
	case 5:
		result = 310;
		break;
	case 6:
		result = 305;
		break;
	case 7:
		result = 306;
		break;
	case 8:
		result = 307;
		break;
	case 0xA:
		result = 312;
		break;
	default:
		break;
	}
	if (a2x->word_0x5A_90 != result)
		/*result = */sub_49CD0(a2x, result);
	//return result;
}

int debugcounter_2075a0 = 0;
//----- (000265A0) --------------------------------------------------------
void sub_265A0(type_str_0x6E8E* a1x)//2075a0
{
	char v1; // dh
	int16_t v2; // dx
	int v3; // esi
	unsigned int v4; // esi
	unsigned int v5; // edx
	signed int v6; // esi
	int16_t v7; // cx
	int v8; // edi
	int v9; // eax
	int v10; // eax
	//int result; // eax
	char v12; // [esp+0h] [ebp-8h]
	char v13; // [esp+4h] [ebp-4h]

	v12 = 0;
	v13 = 1;
	switch (a1x->byte_0x46_70)
	{
	case 0:
	case 1:
		v1 = a1x->byte_0x44_68;
		if (v1)
			a1x->byte_0x44_68 = v1 - 1;
		else
			a1x->byte_0x46_70 = 2;
		v12 = 1;
		v13 = 0;
		break;
	case 2:
		v12 = 1;
		a1x->byte_0x46_70 = 3;
		v13 = 0;
		break;
	case 3:
		a1x->byte_0x46_70 = 4;
		break;
	case 4:
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v2 = a1x->word_0x14_20 % 0x64u;
		a1x->byte_0x46_70 = 5;
		a1x->word_0x2C_44 = v2 + 140;
		break;
	case 5:
		if (a1x->word_0x2C_44 < 0)
			a1x->byte_0x46_70 = 6;
		break;
	case 6:
		v3 = a1x->array_0x4C_76.z;
		if (v3 - (int16_t)sub_10C40_getTerrainAlt(&a1x->array_0x4C_76) < 230)
			a1x->byte_0x46_70 = 7;
		break;
	case 7:
		a1x->byte_0x46_70 = 8;
		v13 = 0;
		break;
	case 8:
		v12 = 1;
		a1x->byte_0x46_70 = 9;
		v13 = 0;
		break;
	case 9:
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		if (!(a1x->word_0x14_20 % 0xBu))
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 42);
		if (a1x->byte_0x43_67)
		{
			v4 = a1x->byte_0x43_67;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v5 = a1x->word_0x14_20 % v4;
			a1x->byte_0x44_68 = v5;
			a1x->byte_0x46_70 = (v5 & 1) == 0;
		}
		else
		{
			a1x->byte_0x44_68 = 1;
			a1x->byte_0x46_70 = 0;
		}
		v12 = 1;
		v13 = 0;
		break;
	case 0xA:
		v12 = 1;
		break;
	default:
		break;
	}
	v6 = (int16_t)sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	if (v12)
	{
		a1x->array_0x4C_76.z -= (Bit16s)42;
	}
	else
	{
		v7 = a1x->word_0x2C_44 - (Bit16s)42;
		a1x->array_0x4C_76.z += a1x->word_0x2C_44;
		a1x->word_0x2C_44 = v7;
	}
	if ((Bit16s)a1x->array_0x4C_76.z < v6)
		a1x->array_0x4C_76.z = v6;
	if (x_BYTE_D41B6)
	{
		v8 = a1x->array_0x52_82.dd;
		v9 = (int16_t)sub_10C60(&a1x->array_0x4C_76) - v8;
		if ((Bit16s)a1x->array_0x4C_76.z > v9)
		{
			a1x->word_0x2C_44 = 0;
			a1x->array_0x4C_76.z = v9;
		}
	}
	if (sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 1)
	{
		if (a1x->byte_0x46_70 == 10)
		{
			if ((Bit16s)a1x->array_0x4C_76.z > v6)
				a1x->byte_0x46_70 = 0;
		}
		else if (a1x->array_0x4C_76.z == v6)
		{
			a1x->byte_0x46_70 = 10;
			sub_4A190(&x_WORD_EB398ar, 10, 5);//this set 02 2077b2
		}
		if (a1x->byte_0x45_69 == 170)
			v10 = 66;
		else
			v10 = 40;
	}
	else
	{
		if (a1x->byte_0x46_70 == 10)
			a1x->byte_0x46_70 = 0;
		if (a1x->byte_0x45_69 == 170)
			v10 = 96;
		else
			v10 = 60;
	}
	a1x->word_0x82_130 = v10;
	/*result = */sub_26500(/*v10,*/ a1x);
	if (!v13)
		a1x->struct_byte_0xc_12_15.byte[1] |= 8u;
	//return result;
}

//----- (00026830) --------------------------------------------------------
signed int sub_26830(type_str_0x6E8E* a1x)//207830
{
	int16_t v1; // dx
	unsigned int v2; // ebx
	int i; // edx
	int v4; // ecx
	type_str_0x6E8E* v5x; // edx

	v1 = a1x->str_0x5E_94.word_0x62_98;
	v2 = 0;
	if (v1)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v1 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v2 = 1;
	}
	a1x->word_0x26_38 = v1;
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				v2 = 1;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v2 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if (v2 >= 1)
	{
		if (v2 <= 1)
		{
			a1x->word_0x96_150 = a1x->word_0x26_38;
			sub_268F0(a1x, 2u);
		}
		else if (v2 == 2)
		{
			a1x->byte_0x45_69 = 172;
			return 2;
		}
	}
	return v2;
}

//----- (000268F0) --------------------------------------------------------
type_str_0x6E8E* sub_268F0(type_str_0x6E8E* a1x, uint8_t a2)//2078f0
{
	type_str_0x6E8E* resultx; // eax

	resultx = a1x;
	if (a2 >= 1u)
	{
		if (a2 <= 1u)
		{
			a1x->byte_0x43_67 = 64;
			a1x->word_0x96_150 = 0;
		}
		else if (a2 == 2)
		{
			a1x->byte_0x43_67 = 0;
		}
	}
	a1x->byte_0x45_69 = a2 - 88;
	return resultx;
}

//----- (00026930) --------------------------------------------------------
char sub_26930(type_str_0x6E8E* a1x)//207930
{
	char result; // al
	uint8_t v2; // ah

	result = 0;
	v2 = a1x->byte_0x46_70;
	if (v2 >= 9u && (v2 <= 9u || v2 == 10 && !(a1x->byte_0x3E_62 & 7)))
		result = 1;
	return result;
}

//----- (00026960) --------------------------------------------------------
void sub_26960(type_str_0x6E8E* a1x)//207960
{
	sub_26FF0(a1x);
	sub_272C0(a1x);
	sub_26F10(a1x);
	sub_27880(a1x);
}

void sub_26990(type_str_0x6E8E* a1x)//207990
{
	int16_t v1; // si
	int16_t v2; // di
	type_str_0x6E8E* resultx; // eax
	int v4; // edx
	int16_t v5; // ax
	type_str_0x6E8E* v6x; // [esp+0h] [ebp-1Ch]
	int16_t v7; // [esp+4h] [ebp-18h]
	int v8; // [esp+8h] [ebp-14h]
	int16_t v9; // [esp+10h] [ebp-Ch]
	char v10; // [esp+18h] [ebp-4h]

	v10 = 1;
	sub_26FF0(a1x);
	sub_272C0(a1x);
	v8 = a1x->dword_0x10_16 >> 8;
	v1 = a1x->dword_0x10_16 & 0xFF;
	v2 = 0;
	//result = (Bit8u*)sub_369F0((int)a1, *(x_WORD *)(a1 + 148));
	v9 = sub_369F0(/*a1x, */a1x->word_0x94_148);
	while (v2 < (int16_t)((v1 != 0) + 1))
	{
		if (v2)
			v4 = -v1;
		else
			LOWORD(v4) = v1;
		v7 = v4 + v8;
		//result = abs((int16_t)(v4 + v8));
		if (abs((int16_t)(v4 + v8)) <= a1x->byte_0x46_70 / 2)
		{
			resultx = sub_27470(a1x, v7);
			v6x = resultx;
			if (resultx)
			{
				v5 = sub_278F0(v9, a1x->byte_0x46_70, v7);
				/*result = */sub_49D50(v6x, v5);
				v10 = 0;
			}
		}
		v2++;
	}
	if (v10)
	{
		if (a1x->word_0x94_148)
			a1x->byte_0x45_69 = 178;
		else
			a1x->byte_0x45_69 = 176;
	}
	else
	{
		//result = (int16_t)(v1 + 1);
		a1x->dword_0x10_16 = (int16_t)(v1 + 1) | ((int16_t)v8 << 8);
	}
	//return result;
}

//----- (00026AA0) --------------------------------------------------------
void sub_26AA0(type_str_0x6E8E* a1x)//207aa0
{
	uint16_t v1; // dx
	type_str_0x6E8E* v2x; // eax
	uint16_t v3; // si
	type_str_0x6E8E* v4x; // esi
	int16_t v5; // ax
	char v6; // ch
	char v7; // [esp+4h] [ebp-4h]

	v7 = 0;
	sub_26FF0(a1x);
	sub_272C0(a1x);
	sub_26F10(a1x);
	sub_27880(a1x);
	if (!(a1x->byte_0x3E_62 & 0x1F))
	{
		v1 = a1x->word_0x94_148;
		if (!v1)
			goto LABEL_17;
		if (a1x->word_0x82_130 > a1x->word_0x86_134)
			goto LABEL_13;
		v2x = x_DWORD_EA3E4[v1];
		if (v2x->byte_0x3F_63 != 3)
			goto LABEL_17;
		if (v2x->dword_0x8 < 0)
			goto LABEL_17;
		if (v2x->struct_byte_0xc_12_15.byte[1] & 4)
			goto LABEL_17;
		v3 = v2x->dword_0xA4_164x->word_0x3A_58;
		if (!v3)
			goto LABEL_17;
		v4x = x_DWORD_EA3E4[v3];
		v5 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v4x->array_0x4C_76);
		v6 = a1x->byte_0x3E_62;
		a1x->word_0x20_32 = v5;
		if (v6 & 3 || sub_58490_radix_3d_2(&a1x->array_0x4C_76, &v4x->array_0x4C_76) > 0x100)
			goto LABEL_13;
		if (a1x->dword_0x90_144 + v4x->dword_0x90_144 < v4x->dword_0x8C_140)
		{
			a1x->dword_0x10_16 = 128;
			a1x->byte_0x45_69 = 179;
		}
		else
		{
		LABEL_17:
			v7 = 1;
		}
	LABEL_13:
		if (v7)
		{
			a1x->dword_0x10_16 = 0;
			a1x->word_0x94_148 = 0;
			a1x->byte_0x45_69 = 177;
		}
	}
}

//----- (00026BD0) --------------------------------------------------------
void sub_26BD0(type_str_0x6E8E* a1x)//207bd0
{
	int v1; // edx
	char v2; // dl
	type_str_0x6E8E* v3x; // eax
	uint16_t v4; // dx
	type_str_0x6E8E* v5x; // eax
	int v6; // edi
	int v7; // edx

	sub_272C0(a1x);
	v1 = a1x->dword_0x10_16;
	if (v1)
	{
		a1x->dword_0x10_16 = v1 - 1;
	}
	else if (!(a1x->byte_0x3E_62 & 1))
	{
		v2 = a1x->byte_0x46_70;
		if (v2 > 1)
		{
			sub_27720(a1x, v2 - 2);
		}
		else
		{
			v3x = x_DWORD_EA3E4[a1x->word_0x94_148];
			if (v3x->byte_0x3F_63 == 3 && v3x->dword_0x8 >= 0 && !(v3x->struct_byte_0xc_12_15.byte[1] & 4))
			{
				v4 = v3x->dword_0xA4_164x->word_0x3A_58;
				if (v4)
				{
					v5x = x_DWORD_EA3E4[v4];
					v6 = v5x->dword_0x8C_140;
					v7 = a1x->dword_0x90_144 + v5x->dword_0x90_144;
					if (v7 >= v6)
						v5x->dword_0x90_144 = v6;
					else
						v5x->dword_0x90_144 = v7;
				}
			}
			sub_57F10(a1x);
		}
	}
}

//----- (00026CA0) --------------------------------------------------------
void sub_26CA0(type_str_0x6E8E* a1x)//207ca0
{
	sub_271D0(a1x);
	sub_26D20(a1x);
}

//----- (00026CC0) --------------------------------------------------------
int sub_26CC0(type_str_0x6E8E* a1x)//207cc0
{
	int i; // ebx
	type_str_0x6E8E* v2x; // ebx

	for (i = a1x->word_0x34_52; ; i = v2x->word_0x34_52)
	{
		v2x = x_DWORD_EA3E4[i];
		if (v2x == x_DWORD_EA3E4[0])
			break;
		sub_36BA0(v2x, 0);
		sub_57F10(v2x);
	}
	sub_36BA0(a1x, 0);
	sub_57F10(a1x);
	return 1;
}

//----- (00026D20) --------------------------------------------------------
void sub_26D20(type_str_0x6E8E* a1x)//207d20
{
	type_str_0x6E8E* v1x; // ebx
	uint8_t v2; // al
	int16_t v3; // ax
	int v4; // eax
	int v5; // ecx
	int v6; // eax
	type_str_0x6E8E* v7x; // eax
	int16_t v8; // cx
	int16_t v9; // ax
	int16_t v10; // ax
	int i; // eax
	type_str_0x6E8E* v12x; // eax

	if (a1x->byte_0x39_57)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
		v2 = v1x->byte_0x45_69;
		if (v2 >= 0xB0u && (v2 <= 0xB0u || v2 == 178))
		{
			if (a1x->str_0x5E_94.word_0x62_98)
			{
				v1x->word_0x82_130 = ((v1x->word_0x84_132 - v1x->word_0x86_134) >> 2)
					+ v1x->word_0x86_134;
				v3 = sub_581E0_maybe_tan2(&x_DWORD_EA3E4[a1x->str_0x5E_94.word_0x62_98]->array_0x4C_76, &a1x->array_0x4C_76);
				v1x->word_0x1C_28 = v3;
				v1x->word_0x20_32 = v3;
				v4 = 56 * abs(a1x->byte_0x46_70) / (v1x->byte_0x46_70 >> 1);
				if (((v1x->word_0x1C_28 - a1x->word_0x2C_44) & 0x7FF) >= 1024)
					v4 = -v4;
				v5 = v4 + v1x->word_0x2C_44;
				if (abs(v5) < 11)
				{
					if (v5 <= 0)
						v5 = -11;
					else
						v5 = 11;
				}
				if (abs(v5) > 227)
				{
					if (v5 <= 0)
						LOWORD(v5) = -227;
					else
						LOWORD(v5) = 227;
				}
				v6 = v1x->word_0x34_52;
				v1x->word_0x2C_44 = v5;
				while (1)
				{
					v7x = x_DWORD_EA3E4[v6];
					if (v7x == x_DWORD_EA3E4[0])
						break;
					v7x->str_0x5E_94.word_0x62_98 = 0;
					v6 = v7x->word_0x34_52;
				}
			}
			v8 = a1x->str_0x5E_94.word_0x68_104;
			if (v8)
			{
				if (v8 != v1x->word_0x94_148)
				{
					if (a1x->str_0x5E_94.dword_0x64_100)
					{
						v1x->byte_0x45_69 = 177;
						v1x->dword_0x10_16 = a1x->byte_0x46_70 << 8;
						v10 = a1x->str_0x5E_94.word_0x68_104;
						v1x->word_0x94_148 = v10;
						sub_6E450_distance_sound(v10, -1, 4);
						a1x->struct_byte_0xc_12_15.byte[2] |= 0x20u;
					}
					else if (!(a1x->struct_byte_0xc_12_15.byte[2] & 0x20))
					{
						v1x->byte_0x45_69 = 177;
						v1x->dword_0x10_16 = a1x->byte_0x46_70 << 8;
						v9 = a1x->str_0x5E_94.word_0x68_104;
						v1x->word_0x94_148 = v9;
						sub_6E450_distance_sound(v9, -1, 4);
					}
				}
				for (i = v1x->word_0x34_52; ; i = v12x->word_0x34_52)
				{
					v12x = x_DWORD_EA3E4[i];
					if (v12x == x_DWORD_EA3E4[0])
						break;
					v12x->str_0x5E_94.word_0x68_104 = 0;
				}
			}
		}
	}
	//return 0;
}

//----- (00026F10) --------------------------------------------------------
int sub_26F10(type_str_0x6E8E* a1x)//207f10
{
	int v1; // eax
	int16_t v2; // cx
	int16_t v3; // si
	int16_t v4; // ax
	int16_t v5; // di
	int16_t v6; // ax

	if (a1x->byte_0x39_57)
	{
		if (a1x->str_0x5E_94.word_0x62_98)
		{
			v1 = (a1x->str_0x5E_94.dword_0x5E_94 >> 2) + a1x->word_0x82_130;
			v2 = a1x->word_0x86_134;
			a1x->word_0x82_130 = v1;
			if ((int16_t)v1 < v2)
				a1x->word_0x82_130 = v2;
			v3 = a1x->word_0x84_132;
			if (a1x->word_0x82_130 > v3)
				a1x->word_0x82_130 = v3;
			v4 = sub_581E0_maybe_tan2(&x_DWORD_EA3E4[a1x->str_0x5E_94.word_0x62_98]->array_0x4C_76, &a1x->array_0x4C_76);
			a1x->str_0x5E_94.word_0x62_98 = 0;
			a1x->word_0x1C_28 = v4;
			a1x->word_0x20_32 = v4;
		}
		v5 = a1x->str_0x5E_94.word_0x68_104;
		if (v5)
		{
			if (v5 != a1x->word_0x94_148)
			{
				v6 = a1x->str_0x5E_94.word_0x68_104;
				a1x->word_0x94_148 = v6;
				a1x->byte_0x45_69 = 177;
				a1x->dword_0x10_16 = 0;
				sub_6E450_distance_sound(v6, -1, 4);
			}
			a1x->str_0x5E_94.word_0x68_104 = 0;
		}
	}
	if (a1x->dword_0x8 < 0)
		a1x->byte_0x45_69 = 181;
	return 0;
}

//----- (00026FF0) --------------------------------------------------------
void sub_26FF0(type_str_0x6E8E* a1x)//207ff0
{
	Bit16s v1; // ax
	Bit16s v2; // si
	Bit16s v3; // di
	int v4; // eax
	Bit16s v5x; // eax
	int v6; // esi
	Bit16s v7; // si
	axis_3d v9x; // [esp+0h] [ebp-10h]
	//int16_t v10; // [esp+4h] [ebp-Ch]
	type_str_0x6E8E* v11x; // [esp+8h] [ebp-8h]
	int v12; // [esp+Ch] [ebp-4h]

	v1 = a1x->word_0x82_130;
	if (v1 > a1x->word_0x86_134)
		a1x->word_0x82_130 = v1 - 2;
	v2 = a1x->array_0x52_82.dd;
	v3 = a1x->array_0x52_82.xshift;
	sub_49EA0(a1x, a1x->byte_0x46_70 << 8, a1x->array_0x52_82.dd);
	sub_1B8C0(a1x);
	if (!(a1x->byte_0x3E_62 & 0xF))
		sub_27120(a1x);
	v11x = a1x;
	v12 = 0;
	sub_49EA0(a1x, v3, v2);
	while (v11x != x_DWORD_EA3E4[0])
	{
		v4 = sub_10C40_getTerrainAlt(&v11x->array_0x4C_76);
		if ((int16_t)v4 > (int16_t)v12)
		{
			v12 = v4;
			v9x = v11x->array_0x4C_76;
		}
		v11x = x_DWORD_EA3E4[v11x->word_0x34_52];
	}
	v12 += 384;
	v5x = a1x->array_0x4C_76.z;
	if ((Bit16s)v5x >= (Bit16s)v12)
	{
		v7 = a1x->word_0x24_36;
		if (v7)
		{
			v5x = v7 - 1;
			a1x->word_0x24_36 = v7 - 1;
		}
		else
		{
			a1x->array_0x4C_76.z = v5x - 2;
		}
	}
	else
	{
		v6 = a1x->dword_0xA0_160x->word_160_0x10_16;
		v5x = sub_1B7A0_tile_compare(&v9x);
		if (v5x > v6)
			a1x->array_0x4C_76.z += 0x100;
		else
			a1x->array_0x4C_76.z += 0x40;
		a1x->word_0x24_36 = 0x40;
	}
	//return v5;
}

//----- (00027120) --------------------------------------------------------
void sub_27120(type_str_0x6E8E* a1x)//208120
{
	int v1; // edi
	int v2; // esi
	type_str_0x6E8E* v3x; // ecx
	int16_t v5; // ax

	v1 = 2 * a1x->array_0x52_82.dd + 32;
	v2 = 2 * a1x->array_0x52_82.xshift;
	v3x = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64];
	if (v3x <= x_DWORD_EA3E4[0])
		return;
	do
	{
		if (v3x->word_0x1A_26 != a1x->word_0x1A_26
			&& abs((Bit16s)a1x->array_0x4C_76.x - (Bit16s)v3x->array_0x4C_76.x) < v2
			&& abs((Bit16s)a1x->array_0x4C_76.y - (Bit16s)v3x->array_0x4C_76.y) < v2
			&& abs((Bit16s)a1x->array_0x4C_76.z - (Bit16s)v3x->array_0x4C_76.z) < v1)
		{
			v5 = a1x->array_0x4C_76.z;
			if (v5 >= v3x->array_0x4C_76.z)
				a1x->array_0x4C_76.z = v5 + 64;
		}
		v3x = v3x->next_0;
	} while (v3x > x_DWORD_EA3E4[0]);
}

//----- (000271D0) --------------------------------------------------------
void sub_271D0(type_str_0x6E8E* a1x)//2081d0
{
	//Bit8u* result; // eax
	type_str_0x6E8E* v2x; // eax
	int16_t v3; // si
	uint16_t v4; // ax
	type_str_0x6E8E* v5x; // ebx
	uint16_t v6; // cx

	//result = a1;
	if (a1x->word_0x96_150)
	{
		v2x = x_DWORD_EA3E4[a1x->word_0x96_150];
		v3 = v2x->word_0x2A_42;
		v4 = (v3 + sub_273C0(v2x->byte_0x5C_92, v2x->word_0x36_54, a1x->byte_0x46_70, v2x->byte_0x46_70)) & 0x7FF;
		a1x->word_0x2C_44 = v4;
		v5x = x_DWORD_EA3E4[a1x->word_0x32_50];
		if (v5x)
		{
			v6 = v5x->word_0x32_50;
			if (v6)
				v5x = x_DWORD_EA3E4[v6];
		}
		x_WORD_EB398ar = v5x->array_0x4C_76;
		sub_57FA0(&x_WORD_EB398ar, v4, 0, a1x->array_0x52_82.xshift + v5x->array_0x52_82.xshift);
		x_WORD_EB398ar.z = v5x->array_0x52_82.xshift - a1x->array_0x52_82.xshift + v5x->array_0x4C_76.z;
		/*result = */sub_57CF0(a1x, &x_WORD_EB398ar);
	}
	//return result;
}

//----- (000272C0) --------------------------------------------------------
void sub_272C0(type_str_0x6E8E* a1x)//2082c0
{
	int16_t v1; // ax
	uint8_t v2; // dl
	uint8_t v3; // ch
	char v4; // ah
	char v5; // dl
	int v6; // eax
	int v7; // edx
	int16_t v9; // [esp+0h] [ebp-4h]

	if (a1x->byte_0x46_70 >= 11)
	{
		v1 = sub_27430(a1x->byte_0x5C_92);
		v2 = a1x->byte_0x5C_92;
		v9 = v1;
		if (v2 && v2 < 0x10u)
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 48);
		if (a1x->word_0x36_54 & 1)
		{
			v3 = v9 + a1x->byte_0x5C_92;
			a1x->byte_0x5C_92 = v3;
			if (v3 > 0x64u)
			{
				v4 = a1x->word_0x36_54;
				a1x->byte_0x5C_92 = 100;
				a1x->word_0x36_54 = v4 & 0xFE;
			}
		}
		else if (a1x->byte_0x5C_92 > v9)
		{
			a1x->byte_0x5C_92 -= v9;
		}
		else
		{
			v5 = a1x->word_0x36_54 | 1;
			a1x->word_0x36_54 = v5;
			a1x->byte_0x5C_92 = 0;
			a1x->word_0x36_54 = v5 ^ 2;
		}
	}
	a1x->word_0x2A_42 += a1x->word_0x2C_44;
	LOBYTE(v6) = a1x->byte_0x3E_62;
	a1x->word_0x2A_42 &= 0x7ff;
	if (!(v6 & 3))
	{
		v6 = abs(a1x->word_0x2C_44) - 5;
		if ((int16_t)v6 < 11)
			LOWORD(v6) = 11;
		if (a1x->word_0x2C_44 <= 0)
			v7 = -(int16_t)v6;
		else
			LOWORD(v7) = v6;
		a1x->word_0x2C_44 = v7;
	}
	//return v6;
}

//----- (000273C0) --------------------------------------------------------
int sub_273C0(int16_t a1, char a2, int16_t a3, int16_t a4)//2083c0
{
	int16_t v4; // ax
	int result; // eax
	int16_t v6; // ax

	v4 = abs(a3);
	result = ((15 - a4) * v4 + v4 * a1) & 0x7FF;
	if (a3 >= 0)
	{
		if (a2 & 2)
			return result;
		v6 = 2048 - result;
	}
	else if (a2 & 2)
	{
		v6 = 1024 - result;
	}
	else
	{
		v6 = result + 1024;
	}
	return v6 & 0x7FF;
}

//----- (00027430) --------------------------------------------------------
int sub_27430(int a1)//208430
{
	int v1; // eax

	HIWORD(v1) = HIWORD(a1);
	if ((int16_t)a1 >= 96)
		return 2;
	if ((int16_t)a1 >= 87)
		return 3;
	if ((int16_t)a1 >= 60)
		return 4;
	LOBYTE(v1) = (int16_t)a1 < 30;
	BYTE1(v1) = 0;
	return v1 + 5;
}

//----- (00027470) --------------------------------------------------------
type_str_0x6E8E* sub_27470(type_str_0x6E8E* a1x, int16_t a2)//208470
{
	type_str_0x6E8E* resultx; // eax

	resultx = a1x;
	if (a2)
	{
		while (1)
		{
			resultx = x_DWORD_EA3E4[resultx->word_0x34_52];
			if (resultx == x_DWORD_EA3E4[0])
				break;
			if (resultx->byte_0x46_70 == a2)
				return resultx;
		}
		resultx = 0;
	}
	return resultx;
}

//----- (000274C0) --------------------------------------------------------
void sub_274C0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, type_str_0x6E8E* a3x, int16_t a4)//2084c0
{
	//int v4; // edx
	//int v5; // eax

	//qmemcpy((void *)a2, a3, 0xA8u);
	*a2x = *a3x;
	a2x->word_0x32_50 = a3x - D41A0_BYTESTR_0.struct_0x6E8E;
	a3x->word_0x34_52 = a2x - D41A0_BYTESTR_0.struct_0x6E8E;
	a2x->word_0x34_52 = 0;
	a2x->byte_0x3E_62 = abs((x_BYTE)a4) & 1;
	a2x->struct_byte_0xc_12_15.byte[0] &= 0xFBu;
	a2x->byte_0x46_70 = a4;
	//v5 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
	a2x->byte_0x45_69 = 180;
	a2x->word_0x2C_44 = 0;
	a2x->word_0x94_148 = 0;
	a2x->dword_0x90_144 = 0;
	a2x->word_0x96_150 = a1x - D41A0_BYTESTR_0.struct_0x6E8E;
	x_WORD_EB398ar = a1x->array_0x4C_76;
	sub_57D70_actualize_event(a2x, &x_WORD_EB398ar);
	sub_49A20_remove_event(a2x);
}

//----- (00027590) --------------------------------------------------------
void sub_27590(/*signed int a1, */type_str_0x6E8E* a2x)//208590
{
	int16_t v2; // ax
	int16_t v3; // di
	int16_t v4; // ax
	int result; // eax
	int16_t v6; // ax
	type_str_0x6E8E* v7x; // ebx

	v2 = sub_369F0(/*a1, */a2x->word_0x94_148);
	v3 = v2;
	v4 = sub_278F0(v2, a2x->byte_0x46_70, 0);
	sub_49D50(a2x, v4);
	for (result = a2x->word_0x34_52; ; result = v7x->word_0x34_52)
	{
		v7x = x_DWORD_EA3E4[result];
		if (v7x == x_DWORD_EA3E4[0])
			break;
		v6 = sub_278F0(v3, a2x->byte_0x46_70, v7x->byte_0x46_70);
		sub_49D50(v7x, v6);
	}
	//return result;
}

//----- (00027610) --------------------------------------------------------
void sub_27610(/*signed int a1, */type_str_0x6E8E* a2x)//208610
{
	int16_t v2; // di
	int32_t v3; // rtt
	int result; // eax
	int32_t v5; // rtt
	type_str_0x6E8E* v6x; // ebx

	v2 = sub_369F0(/*a1, */a2x->word_0x94_148);
	v3 = 550 * (uint16_t)x_WORD_D951C[4+7 * (int16_t)sub_278F0(v2, a2x->byte_0x46_70, 0)];
	sub_49EA0(a2x, v3 / 1000, v3 / 1000);
	for (result = a2x->word_0x34_52; ; result = v6x->word_0x34_52)
	{
		v6x = x_DWORD_EA3E4[result];
		if (v6x == x_DWORD_EA3E4[0])
			break;
		v5 = 550 * (uint16_t)x_WORD_D951C[4+7 * (int16_t)sub_278F0(v2, a2x->byte_0x46_70, v6x->byte_0x46_70)];
		sub_49EA0(v6x, v5 / 1000, v5 / 1000);
	}
	//return result;
}

//----- (000276E0) --------------------------------------------------------
void sub_276E0(type_str_0x6E8E* a1x)//2086e0
{
	//signed int result; // eax
	int i; // ebx
	type_str_0x6E8E* v3x; // ebx

	//result = a1;
	for (i = a1x->word_0x34_52; ; i = v3x->word_0x34_52)
	{
		v3x = x_DWORD_EA3E4[i];
		if (v3x == x_DWORD_EA3E4[0])
			break;
		/*result = */sub_271D0(v3x);
	}
	//return result;
}

//----- (00027720) --------------------------------------------------------
void sub_27720(type_str_0x6E8E* a1x, int16_t a2)//208720
{
	type_str_0x6E8E* ix; // ebx
	int16_t v3; // di
	type_str_0x6E8E* v4x; // edi
	int16_t v5; // ST0C_2
	type_str_0x6E8E* v6x; // ebx
	type_str_0x6E8E* v7x; // eax
	type_str_0x6E8E* v8x; // ST10_4
	type_str_0x6E8E* v9x; // [esp+4h] [ebp-Ch]
	int v10; // [esp+8h] [ebp-8h]
	char v11; // [esp+Ch] [ebp-4h]

	LOBYTE(a2) = a2 | 1;
	v11 = 0;
	if (a2 >= 1 && a2 <= 15 && a1x->byte_0x46_70 != a2)
	{
		for (ix = a1x; ; ix = x_DWORD_EA3E4[ix->word_0x34_52])
		{
			v3 = ix->word_0x34_52;
			if (!v3)
				break;
		}
		if (a1x->byte_0x46_70 >= a2)
		{
			v10 = (a1x->byte_0x46_70 - a2) / 2;
			while (v3 < (int16_t)v10)
			{
				v6x = x_DWORD_EA3E4[ix->word_0x32_50];
				v7x = v6x;
				ix = x_DWORD_EA3E4[v6x->word_0x32_50];
				ix->word_0x34_52 = 0;
				v8x = x_DWORD_EA3E4[v7x->word_0x34_52];
				sub_57F10(v7x);
				v3++;
				sub_57F10(v8x);
			}
		}
		else
		{
			v4x = sub_4A050_new_event();
			if (v4x)
			{
				v9x = sub_4A050_new_event();
				if (v9x)
				{
					sub_274C0(a1x, v4x, ix, abs(ix->byte_0x46_70) + 1);
					v5 = -(abs(ix->byte_0x46_70) + 1);
					ix = v9x;
					sub_274C0(a1x, v9x, v4x, v5);
				}
				else
				{
					sub_57F10(v4x);
					v11 = 1;
				}
			}
			else
			{
				v11 = 1;
			}
		}
		if (!v11)
		{
			a1x->byte_0x46_70 = a2;
			sub_27590(/*ix, */a1x);
			sub_27610(/*ix, */a1x);
		}
	}
}

//----- (00027880) --------------------------------------------------------
void sub_27880(type_str_0x6E8E* a1x)//208880
{
	int16_t v1; // dx
	char v2; // ah
	signed int v3; // edx

	v1 = a1x->word_0x96_150;
	if (v1)
	{
		a1x->word_0x96_150 = v1 - 1;
	}
	else
	{
		v2 = a1x->byte_0x46_70;
		a1x->word_0x96_150 = 1024;
		if (v2 <= 13)
			sub_27720(a1x, v2 + 2);
		v3 = a1x->dword_0x90_144;
		if (v3 < 50000)
			a1x->dword_0x90_144 = v3 + 1000;
	}
}

//----- (000278F0) --------------------------------------------------------
int sub_278F0(int a1, int16_t a2, int16_t a3)//2088f0
{
	int v3; // eax

	v3 = (int16_t)abs(a3);
	LOWORD(v3) = (uint8_t)x_BYTE_D400C[8 * (int16_t)(a2 >> 1) + (int16_t)v3];
	return a1 + v3;
}

//----- (00027930) --------------------------------------------------------
void sub_27930(type_str_0x6E8E* a1x)//208930
{
	sub_1D5D0(a1x, 176);
}

//----- (00027950) --------------------------------------------------------
void sub_27950(type_str_0x6E8E* a1x)//208950
{
	type_str_0x6E8E* ix; // ecx
	int v2; // ecx
	int16_t v3; // cx
	uint8_t v4; // cl
	int v5y;
	type_str_0x6E8E* v5x; // eax
	type_str_0x6E8E* v6x; // eax
	//int v7; // eax
	int16_t v8; // ax
	axis_3d* v9x; // edi
	char v11; // [esp-Ch] [ebp-10h]
	char v12; // [esp-8h] [ebp-Ch]
	int v13; // [esp-4h] [ebp-8h]

	//fix
	v5y = 0;
	//fix

	sub_1B8C0(a1x);
	for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (ix->word_0x1A_26 != a1x->word_0x1A_26
			&& abs(a1x->array_0x4C_76.x - ix->array_0x4C_76.x) < a1x->array_0x52_82.xshift
			&& abs(a1x->array_0x4C_76.y - ix->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
		{
			a1x->word_0x20_32 = sub_581E0_maybe_tan2(&ix->array_0x4C_76, &a1x->array_0x4C_76);
			break;
		}
	}
	v2 = a1x->array_0x4C_76.z - a1x->word_0x2C_44;
	if (abs(v2) >= 256)
	{
		if (v2 <= 0)
			v3 = 32;
		else
			v3 = -32;
		a1x->array_0x4C_76.z += v3;
	}
	v4 = a1x->byte_0x46_70;
	if (v4 < 1u)
	{
		if (v4) {
			sub_28110(a1x);
			return;
		}
		a1x->word_0x82_130 = a1x->word_0x86_134;
		v5y = a1x->dword_0x10_16;
		a1x->dword_0x10_16 = v5y - 1;
		if (v5y)
		{
			sub_28110(a1x);
			return;
		}
	LABEL_27:
		v13 = v5y;
		v12 = 1;
		v11 = -72;
		goto LABEL_28;
	}
	if (v4 <= 1u)
	{
		v6x = sub_28000(a1x);
		if (v6x)
		{
			a1x->word_0x2C_44 = 0x2000;
			a1x->word_0x96_150 = v6x-D41A0_BYTESTR_0.struct_0x6E8E;
			sub_27FE0(a1x, 184, 2, 0);
		}
		else
		{
			v8 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
			HIBYTE(v8) += 7;
			a1x->word_0x2C_44 = v8;
			sub_27FE0(a1x, 184, 0, 80);
		}
		sub_28110(a1x);
		return;
	}
	if (v4 != 2)
	{
		sub_28110(a1x);
		return;
	}
	v5x = sub_28420(a1x);
	if (!v5x)
		goto LABEL_27;
	if (!(a1x->byte_0x3E_62 & 3))
	{
		v9x = &v5x->array_0x4C_76;
		a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v5x->array_0x4C_76);
		if ((signed int)sub_58490_radix_3d_2(&a1x->array_0x4C_76, v9x) < 768)
		{
			v13 = 500;
			v12 = 0;
			v11 = -71;
		LABEL_28:
			sub_27FE0(a1x, v11, v12, v13);
			sub_28110(a1x);
			return;
		}
	}
	sub_28110(a1x);
}

//----- (00027B20) --------------------------------------------------------
void sub_27B20(type_str_0x6E8E* a1x)//208b20
{
	char v1; // al
	int v2; // edx
	type_str_0x6E8E* v3x; // esi
	int16_t v5; // dx
	char v6; // [esp+0h] [ebp-4h]

	v6 = 0;
	v1 = a1x->byte_0x46_70;
	if (v1)
	{
		if (v1 == 1)
		{
			v5 = a1x->array_0x4C_76.z;
			if (v5 >= 0x2000)
			{
				sub_27FE0(a1x, 184, 0, 80);
				sub_28110(a1x);
				return;
			}
			a1x->array_0x4C_76.z = v5 + 32;
		}
	}
	else
	{
		v2 = a1x->dword_0x10_16;
		a1x->word_0x82_130 = a1x->word_0x84_132;
		a1x->dword_0x10_16 = --v2;
		if (v2 && (v3x = sub_28420(a1x)) != 0 && !sub_28060(a1x))
		{
			if (sub_28390(a1x, v3x))
				sub_27FE0(a1x, 187, 0, 0);
		}
		else
		{
			v6 = 1;
		}
		if (v6)
		{
			sub_27FE0(a1x, 185, 1, 0);
			sub_28110(a1x);
			return;
		}
	}
	sub_28110(a1x);
}

//----- (00027C10) --------------------------------------------------------
void sub_27C10(type_str_0x6E8E* a1x)//208c10
{
	uint8_t v1; // al
	type_str_0x6E8E* v2x; // eax
	type_str_0x6E8E* v3x; // eax
	type_str_0x6E8E* v4x; // esi
	type_str_0x6E8E* v5x; // edi
	int v6; // edx
	type_str_0x6E8E* v7x; // eax
	char v9; // [esp+0h] [ebp-8h]
	char v10; // [esp+4h] [ebp-4h]

	v10 = 0;
	v9 = 0;
	sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 59);
	v1 = a1x->byte_0x46_70;
	if (v1 < 1u)
	{
		if (v1)
			goto LABEL_24;
		v2x = sub_28420(a1x);
		if (!v2x || v2x->struct_byte_0xc_12_15.byte[0] & 0x40)
		{
			v9 = 1;
		}
		else
		{
			a1x->word_0x2C_44 = 18;
			sub_27FE0(a1x, 187, 1, 64);
		}
	}
	else if (v1 > 1u)
	{
		if (v1 == 3)
		{
			a1x->word_0x96_150 = 0;
			v7x = sub_28000(a1x);
			if (v7x
				&& (a1x->word_0x96_150 = v7x-D41A0_BYTESTR_0.struct_0x6E8E,
				(signed int)sub_58490_radix_3d_2(&a1x->array_0x4C_76, &v7x->array_0x4C_76) <= 3584))
			{
				sub_27FE0(a1x, 185, 0, 500);
			}
			else
			{
				v10 = 1;
			}
		}
		goto LABEL_24;
	}
	if (a1x->word_0x96_150)
	{
		v3x = sub_28420(a1x);
		v4x = v3x;
		v5x = v3x;
		if (v3x && (v6 = a1x->dword_0x10_16 - 1, (a1x->dword_0x10_16 = v6) != 0))
		{
			v3x->struct_byte_0xc_12_15.byte[0] |= 0x40u;
			v3x->word_0x96_150 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
			a1x->word_0x2C_44 += 10;
			if (sub_106C0(a1x, v3x) || v4x->array_0x4C_76.z > a1x->array_0x4C_76.z)
			{
				a1x->dword_0x90_144 += v5x->dword_0x90_144;
				sub_57F10(v5x);
				v9 = 1;
			}
		}
		else
		{
			v9 = 1;
		}
	}
	else
	{
		v10 = 1;
	}
	if (v9)
		sub_27FE0(a1x, 187, 3, 0);
LABEL_24:
	if (v10)
		sub_27FE0(a1x, 185, 1, 0);
	sub_28110(a1x);
}

//----- (00027E00) --------------------------------------------------------
void sub_27E00(type_str_0x6E8E* a1x)//208e00
{
	type_str_0x6E8E* v1x; // ebx
	type_str_0x6E8E* v2x; // eax
	type_str_0x6E8E* v3x; // esi
	type_str_0x6E8E* ix; // ecx
	//int v5; // eax
	unsigned int v6; // edi
	char result; // al
	char v8; // [esp+4h] [ebp-8h]

	v1x = a1x;
	v8 = 0;
	sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 59);
	v1x->word_0x82_130 = v1x->word_0x84_132;
	sub_1B8C0(a1x);
	v2x = sub_1ED30(v1x, x_DWORD_EA3E4[v1x->word_0x96_150]);
	v3x = v2x;
	if (v2x <= x_DWORD_EA3E4[0] || v2x->dword_0x8 < 0 || v2x->struct_byte_0xc_12_15.byte[1] & 4)
	{
	LABEL_15:
		v8 = 1;
		goto LABEL_16;
	}
	if (!(a1x->byte_0x3E_62 & 3))
	{
		a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v2x->array_0x4C_76);
		for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (ix->word_0x1A_26 != a1x->word_0x1A_26
				&& abs(a1x->array_0x4C_76.x - ix->array_0x4C_76.x) < a1x->array_0x52_82.xshift
				&& abs(a1x->array_0x4C_76.y - ix->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
			{
				a1x->word_0x20_32 = sub_581E0_maybe_tan2(&ix->array_0x4C_76, &a1x->array_0x4C_76);
				break;
			}
		}
	}
	//v5 = a1x->dword_0xA0_160;
	if (!(a1x->dword_0xA0_160x->word_160_0x1a_26 & a1x->byte_0x3E_62))
	{
		v6 = a1x->dword_0xA0_160x->word_160_0x1c_28;
		if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v3x->array_0x4C_76) < v6)
		{
			sub_1D260(a1x, v3x);
			goto LABEL_16;
		}
		goto LABEL_15;
	}
LABEL_16:
	/*result = */sub_28110(a1x);
	if (v8)
	{
		a1x->word_0x96_150 = 0;
		/*result = */sub_27FE0(a1x, 187, 3, 0);
	}
	//return result;
}

//----- (00027FA0) --------------------------------------------------------
void sub_27FA0(type_str_0x6E8E* a1x)//208fa0
{
	sub_1C890(a1x, 184);
}

//----- (00027FC0) --------------------------------------------------------
void sub_27FC0(type_str_0x6E8E* a1x)//208fc0
{
	sub_1C930(a1x);
}

//----- (00027FE0) --------------------------------------------------------
void sub_27FE0(type_str_0x6E8E* a1x, char a2, char a3, int a4)//208fe0
{
	//int result; // eax

	//result = a1;
	a1x->byte_0x45_69 = a2;
	a1x->byte_0x46_70 = a3;
	a1x->dword_0x10_16 = a4;
	//return result;
}

//----- (00028000) --------------------------------------------------------
type_str_0x6E8E* sub_28000(type_str_0x6E8E* a1x)//209000
{
	unsigned int v1; // edi
	type_str_0x6E8E* v2x; // esi
	type_str_0x6E8E* v3x; // ebx
	unsigned int v5; // eax

	v1 = -1;
	v2x = 0;
	v3x = x_D41A0_BYTEARRAY_4_struct.dword_38523;
	if (v3x <= x_DWORD_EA3E4[0])
		return 0;
	do
	{
		if (v3x->byte_0x40_64 == 39)
		{
			v5 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &v3x->array_0x4C_76);
			if (v5 < v1)
			{
				v2x = v3x;
				v1 = v5;
			}
		}
		v3x = v3x->next_0;
	} while (v3x > x_DWORD_EA3E4[0]);
	return v2x;
}

//----- (00028060) --------------------------------------------------------
char sub_28060(type_str_0x6E8E* a1x)//209060
{
	int v1; // esi
	type_str_0x6E8E* ix; // ecx
	int16_t v3; // ax
	char v5; // [esp+4h] [ebp-4h]

	v5 = 0;
	v1 = 2 * a1x->array_0x52_82.xshift;
	for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (ix->word_0x1A_26 != a1x->word_0x1A_26
			&& abs(a1x->array_0x4C_76.x - ix->array_0x4C_76.x) < v1
			&& abs(a1x->array_0x4C_76.y - ix->array_0x4C_76.y) < v1
			&& abs(a1x->array_0x4C_76.z - ix->array_0x4C_76.z) < 2 * a1x->array_0x52_82.dd)
		{
			v3 = a1x->array_0x4C_76.z;
			if (v3 >= ix->array_0x4C_76.z)
			{
				v5 = 1;
				a1x->array_0x4C_76.z = v3 + 16;
				return v5;
			}
		}
	}
	return v5;
}

//----- (00028110) --------------------------------------------------------
void sub_28110(type_str_0x6E8E* a1x)//209110
{
	signed int v1; // esi
	int16_t v2; // ax
	uint16_t v3; // ax
	type_str_0x6E8E* v4x; // eax
	//type_str_0x6E8E* v5x; // ecx
	char v6; // al
	type_str_0x6E8E* v7x; // eax
	//type_str_0x6E8E* v8x; // edi
	unsigned int v9; // esi
	type_str_0x6E8E* v10x; // eax
	char v11; // dh

	//fix
	v3 = 0;
	//fix

	v1 = 0;
	if (a1x->byte_0x39_57)
	{
		if (a1x->str_0x5E_94.word_0x62_98)
		{
			v2 = a1x->str_0x5E_94.word_0x62_98;
			a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
			a1x->word_0x26_38 = v2;
			a1x->word_0x26_38;
			a1x->str_0x5E_94.word_0x62_98 = 0;
			if (x_DWORD_EA3E4[v3]->byte_0x3F_63 == 3)
			{
				v1 = 1;
				v4x = sub_28420(a1x);
				//v5x = v4x;
				if (v4x && v4x->struct_byte_0xc_12_15.byte[0] & 0x40 && v4x->word_0x96_150 == a1x-D41A0_BYTESTR_0.struct_0x6E8E)
				{
					v6 = v4x->struct_byte_0xc_12_15.byte[0];
					v4x->word_0x96_150 = 0;
					v4x->struct_byte_0xc_12_15.byte[0] = v6 & 0xBF;
				}
				a1x->word_0x96_150 = a1x->word_0x26_38;
				sub_27FE0(a1x, 186, 0, 0);
			}
		}
		else
		{
			a1x->word_0x26_38 = 0;
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v1 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
		sub_27FE0(a1x, 188, 0, 0);
	}
	if (!v1 && !(a1x->byte_0x3E_62 & 0x1F))
	{
		v7x = sub_282D0(a1x);
		//v8 = v7;
		if (v7x)
		{
			v9 = a1x->dword_0xA0_160x->word_160_0x1c_28;
			if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v7x->array_0x4C_76) < v9)
			{
				v10x = sub_28420(a1x);
				if (v10x
					&& v10x->struct_byte_0xc_12_15.byte[0] & 0x40
					&& v10x->word_0x96_150 == a1x-D41A0_BYTESTR_0.struct_0x6E8E)
				{
					v11 = v10x->struct_byte_0xc_12_15.byte[0];
					v10x->word_0x96_150 = 0;
					v10x->struct_byte_0xc_12_15.byte[0] = v11 & 0xBF;
				}
				a1x->word_0x96_150 = v7x-D41A0_BYTESTR_0.struct_0x6E8E;
				sub_27FE0(a1x, 186, 0, 0);
			}
		}
	}
	//return 0;
}

//----- (000282D0) --------------------------------------------------------
type_str_0x6E8E* sub_282D0(type_str_0x6E8E* a1x)//2092d0
{
	unsigned int v1; // esi
	type_str_0x6E8E* v2x; // edi
	type_str_0x6E8E* ix; // ebx
	uint8_t v4; // al
	type_str_164* v5x; // eax
	type_str_0x6E8E* v6x; // eax
	type_str_0x6E8E* v7x; // eax
	unsigned int v8; // eax

	v1 = -1;
	v2x = 0;
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		v4 = ix->byte_0x40_64;
		if (v4 <= 1u)
		{
			v5x = ix->dword_0xA4_164x;
		}
		else
		{
			if (v4 != 3)
				continue;
			if (ix->dword_0x90_144 <= 0)
				continue;
			v6x = x_DWORD_EA3E4[ix->word_0x1A_26];
			if (!v6x)
				continue;
			v5x = v6x->dword_0xA4_164x;
		}
		v7x = x_DWORD_EA3E4[v5x->word_0x3A_58];
		if (v7x)
		{
			if (!sub_10750(ix, v7x))
			{
				v8 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &ix->array_0x4C_76);
				if (v8 < v1)
				{
					v1 = v8;
					v2x = ix;
				}
			}
		}
	}
	return v2x;
}

//----- (00028390) --------------------------------------------------------
char sub_28390(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//209390
{
	char v3; // [esp+0h] [ebp-4h]

	v3 = 1;
	if ((signed int)sub_58490_radix_3d_2(&a1x->array_0x4C_76, &a2x->array_0x4C_76) > 128)
	{
		v3 = 0;
		a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
		sub_1B8C0(a1x);
	}
	if (abs(a1x->array_0x4C_76.z - (a2x->array_0x4C_76.z + 640)) > 64)
	{
		v3 = 0;
		if (a1x->array_0x4C_76.z - (a2x->array_0x4C_76.z + 640) <= 0)
			a1x->array_0x4C_76.z += 32;
		else
			a1x->array_0x4C_76.z -= 32;
	}
	return v3;
}

//----- (00028420) --------------------------------------------------------
type_str_0x6E8E* sub_28420(type_str_0x6E8E* a1x)//209420
{
	type_str_0x6E8E* resulty=0; // eax

	int resultx = 0;

	resultx = 0;
	if (a1x->word_0x96_150)
	{
		LOWORD(resultx) = a1x->word_0x96_150;
		resulty = x_DWORD_EA3E4[resultx];
		if (resulty)
		{
			if (resulty->dword_0x8 < 0
				|| resulty->struct_byte_0xc_12_15.byte[1] & 4
				|| resulty->byte_0x3F_63 != 10
				|| resulty->byte_0x40_64 != 39)
			{
				resulty = 0;
			}
		}
	}
	return resulty;
}

//----- (00028470) --------------------------------------------------------
void sub_28470(type_str_0x6E8E* a1x)//209470
{
	sub_1D5D0(a1x, 184);
}

//----- (00028490) --------------------------------------------------------
void sub_28490(type_str_0x6E8E* a1x)//209490
{
	sub_1BD90(a1x, 192);
	if (a1x->byte_0x45_69 == 192)
	{
		if (!(a1x->byte_0x3E_62 & 7))
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			if (!(a1x->word_0x14_20 % 3u))
				a1x->byte_0x45_69 = 193;
		}
		if (a1x->byte_0x45_69 == 192)
			sub_28690(a1x);
	}
	else
	{
		a1x->byte_0x45_69 = 198;
	}
	sub_287B0(a1x);
}

//----- (00028500) --------------------------------------------------------
void sub_28500(type_str_0x6E8E* a1x)//209500
{
	sub_1BF90(a1x, 192);
	if (a1x->byte_0x45_69 == 193)
	{
		if (!(a1x->byte_0x3E_62 & 7))
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			if (!(a1x->word_0x14_20 % 3u))
				a1x->byte_0x45_69 = 192;
		}
		if (a1x->byte_0x45_69 == 193)
			sub_28690(a1x);
	}
	else
	{
		a1x->byte_0x45_69 = 198;
	}
	sub_287B0(a1x);
}

//----- (00028570) --------------------------------------------------------
void sub_28570(type_str_0x6E8E* a1x)//209570
{
	sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 7);
	if ((uint16_t)sub_1C310(a1x, 192, (uint16_t(*)(type_str_0x6E8E*, type_str_0x6E8E*))sub_1CF20))
		a1x->byte_0x45_69 = 198;
	sub_287B0(a1x);
}

//----- (000285D0) --------------------------------------------------------
void sub_285D0(type_str_0x6E8E* a1x)//2095d0
{
	a1x->byte_0x45_69 = 193;
	sub_1BD90(a1x, 192);
}

//----- (000285F0) --------------------------------------------------------
void sub_285F0(type_str_0x6E8E* a1x)//2095f0
{
	sub_1C890(a1x, 192);
}

//----- (00028610) --------------------------------------------------------
void sub_28610(type_str_0x6E8E* a1x)//209610
{
	sub_1C930(a1x);
}

//----- (00028630) --------------------------------------------------------
void sub_28630(type_str_0x6E8E* a1x)//209630
{
	sub_1C980(a1x, 192);
	sub_28690(a1x);
	sub_287B0(a1x);
}

//----- (00028660) --------------------------------------------------------
void sub_28660(type_str_0x6E8E* a1x)//209660
{
	sub_1D5D0(a1x, 192);
	sub_287B0(a1x);
}

//----- (00028690) --------------------------------------------------------
void sub_28690(type_str_0x6E8E* a1x)//209690
{
	int v1; // eax
	type_str_0x6E8E* v2x; // esi
	int v3; // eax
	unsigned int v4; // edi
	signed int v5; // ST0C_4
	int16_t v6; // ax
	type_str_0x6E8E* v7x; // eax
	//int v8; // eax
	unsigned int v9; // [esp+0h] [ebp-10h]
	type_str_0x6E8E* v10x; // [esp+8h] [ebp-8h]
	unsigned int v11; // [esp+Ch] [ebp-4h]

	if (a1x->byte_0x39_57 && !(a1x->byte_0x3E_62 & 0xF))
	{
		v1 = a1x->dword_0xA0_160x->word_160_0x1c_28;
		v11 = -1;
		v10x = 0;
		v2x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
		v9 = v1 * v1;
		while (v2x > x_DWORD_EA3E4[0])
		{
			v3 = (int16_t)(v2x->array_0x4C_76.x - a1x->array_0x4C_76.x);
			v4 = (int16_t)(v2x->array_0x4C_76.y - a1x->array_0x4C_76.y)
				* (int16_t)(v2x->array_0x4C_76.y - a1x->array_0x4C_76.y)
				+ v3 * v3;
			if (v4 <= v9 && !(v2x->struct_byte_0xc_12_15.byte[0] & 0x20))
			{
				v5 = a1x->dword_0xA0_160x->word_160_0x1e_30;
				v6 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v2x->array_0x4C_76);
				if ((uint16_t)sub_582B0(a1x->word_0x1C_28, v6) < v5 && v4 < v11)
				{
					v10x = v2x;
					v11 = v4;
				}
			}
			v2x = v2x->next_0;
		}
		if (v10x)
		{
			v7x = sub_1ED30(a1x, v10x);
			if (v7x > x_DWORD_EA3E4[0] && v7x->dword_0x8 >= 0 && !(v7x->struct_byte_0xc_12_15.byte[1] & 4))
			{
				a1x->byte_0x45_69 = 194;
				a1x->word_0x96_150 = v7x - D41A0_BYTESTR_0.struct_0x6E8E;
			}
		}
	}
}

//----- (000287B0) --------------------------------------------------------
void sub_287B0(type_str_0x6E8E* a1x)//2097b0
{
	//Bit8u* result; // eax
	uint8_t v2; // dl
	signed int v3; // edx
	int16_t v4; // dx

	//result = a1;
	v2 = a1x->byte_0x45_69;
	if (v2 < 0xC2u)
	{
		if (v2 == 0xc0u)
		{
			v3 = 336;
			a1x->word_0x82_130 = 0;
			goto LABEL_11;
		}
		goto LABEL_9;
	}
	if (v2 <= 0xC2u)
	{
		v4 = a1x->word_0x84_132;
	}
	else
	{
		if (v2 != 0xc6u)
		{
		LABEL_9:
			v4 = a1x->word_0x86_134;
			goto LABEL_10;
		}
		v4 = 2 * a1x->word_0x86_134;
	}
LABEL_10:
	a1x->word_0x82_130 = v4;
	v3 = 335;
LABEL_11:
	if (v3 != a1x->word_0x5A_90)
	{
		a1x->word_0x5A_90 = v3;
		a1x->byte_0x5C_92 = 0;
		a1x->byte_0x5D_93 = x_BYTE_D8A2E[(uint8_t)x_WORD_D951C[6+7 * v3]];
	}
	//return result;
}

//----- (00028860) --------------------------------------------------------
int16_t sub_28860(type_str_0x6E8E* a1x)//209860
{
	char v1; // dh
	Bit32u v2; // eax
	int16_t v3; // ax
	int i; // edx
	int v5; // ecx
	type_str_0x6E8E* v6x; // edx
	int16_t v7; // si
	int v8; // eax
	int v9; // ecx
	int v10; // ecx
	int16_t v11; // ax
	char v12; // cl
	type_str_0x6E8E* v13x; // eax
	char v14; // dh
	int16_t v15; // ax
	unsigned int v16; // edx
	int v17; // eax
	uint16_t v18; // di
	type_str_0x6E8E* v19x; // esi
	uint16_t v20; // dx
	type_str_0x6E8E* v21x; // esi
	int v22; // ecx
	int64_t v23; // rtt
	char v24; // ch
	char v26; // [esp+0h] [ebp-4h]

	v26 = 0;
	v1 = a1x->byte_0x46_70;
	v2 = 0;
	if (v1 != 1 && v1 != 2)
	{
		if (a1x->str_0x5E_94.word_0x62_98)
		{
			a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
			v3 = a1x->str_0x5E_94.word_0x62_98;
			a1x->str_0x5E_94.word_0x62_98 = 0;
			a1x->word_0x26_38 = v3;
			v2 = 1;
		}
		else
		{
			a1x->word_0x26_38 = 0;
		}
		if (a1x->word_0x34_52)
		{
			for (i = a1x->word_0x34_52; ; i = v6x->word_0x34_52)
			{
				v6x = x_DWORD_EA3E4[i];
				if (v6x == x_DWORD_EA3E4[0])
					break;
				v5 = v6x->dword_0x8;
				if (v5 < a1x->dword_0x8)
				{
					a1x->dword_0x8 = v5;
					a1x->word_0x26_38 = v6x->word_0x26_38;
					v2 = 1;
					break;
				}
			}
		}
		if (a1x->dword_0x8 < 0)
		{
			a1x->word_0x24_36 = a1x->word_0x26_38;
			v2 = 2;
		}
	}
	v7 = a1x->word_0x2A_42 - 1;
	a1x->word_0x2A_42 = v7;
	if (!v7)
		v2 = 2;
	if (v2 == 2)
	{
		a1x->byte_0x45_69 = 204;
	}
	else
	{
		switch (a1x->byte_0x46_70)
		{
		case 1:
			a1x->dword_0x10_16 = 52;
			a1x->byte_0x46_70 = 2;
			goto LABEL_20;
		case 2:
		LABEL_20:
			v8 = a1x->dword_0x4;
			v9 = a1x->dword_0x10_16;
			a1x->str_0x5E_94.word_0x62_98 = 0;
			v10 = v9 - 1;
			a1x->dword_0x8 = v8;
			a1x->dword_0x10_16 = v10;
			if (v10 < 0)
				goto LABEL_21;
			if (v10 > 13)
			{
				v11 = a1x->word_0x20_32;
				HIBYTE(v11) = (HIBYTE(v11) + 1) & 7;
				a1x->word_0x20_32 = v11;
			}
			break;
		case 3:
			v12 = 0;
			if (!a1x->word_0x24_36
				|| (v13x = x_DWORD_EA3E4[a1x->word_0x24_36], v13x->byte_0x3F_63 != 3)
				|| (v14 = v13x->byte_0x40_64) != 0 && v14 != 1)
			{
				v12 = 1;
			}
			else if (v13x->dword_0xA4_164x->word_0x3A_58)
			{
				v15 = a1x->word_0x24_36;
				a1x->byte_0x46_70 = 5;
				a1x->word_0x96_150 = v15;
			}
			else
			{
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v16 = a1x->word_0x14_20 % 0x64u;
				a1x->byte_0x46_70 = 4;
				a1x->dword_0x10_16 = v16 + 100;
			}
			if (v12)
			{
				a1x->byte_0x46_70 = 8;
				a1x->dword_0x10_16 = 100;
			}
			break;
		case 4:
			v17 = a1x->dword_0x10_16 - 1;
			a1x->dword_0x10_16 = v17;
			if (v17 < 0)
				goto LABEL_35;
			break;
		case 5:
			v18 = x_DWORD_EA3E4[a1x->word_0x96_150]->dword_0xA4_164x->word_0x3A_58;
			if (v18)
			{
				if (!(a1x->byte_0x3E_62 & 7))
				{
					v19x = x_DWORD_EA3E4[v18];
					a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v19x->array_0x4C_76);
					if (sub_10750(a1x, v19x))
						a1x->byte_0x46_70 = 6;
				}
			}
			else
			{
			LABEL_35:
				a1x->byte_0x46_70 = 3;
			}
			break;
		case 6:
			a1x->byte_0x46_70 = 7;
			v26 = 1;
			goto LABEL_41;
		case 7:
		LABEL_41:
			v20 = x_DWORD_EA3E4[a1x->word_0x96_150]->dword_0xA4_164x->word_0x3A_58;
			if (v20)
			{
				v21x = x_DWORD_EA3E4[v20];
				if (sub_10750(a1x, x_DWORD_EA3E4[v20]))
				{
					sub_11900(a1x, v21x, 0, 0x3Cu);
				}
				else
				{
					a1x->byte_0x46_70 = 5;
					v26 = 1;
				}
			}
			else
			{
			LABEL_21:
				a1x->byte_0x46_70 = 3;
				v26 = 1;
			}
			break;
		case 8:
			v22 = a1x->dword_0x10_16 - 1;
			a1x->dword_0x10_16 = v22;
			if (v22 < 0)
				a1x->byte_0x45_69 = 204;
			break;
		default:
			break;
		}
		if (!(a1x->byte_0x3E_62 & 7))
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v23 = a1x->word_0x14_20 % 0x9Du;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			//a1x->word_0x20_32 += (2 * (uint64_t)(v23 / 79) - 1) * (a1x->word_0x14_20 % 0x17Du);
			a1x->word_0x20_32 += (2 * (v23 / 79) - 1) * (a1x->word_0x14_20 % 0x17Du);
			a1x->word_0x20_32 &= 0x7ff;
		}
		sub_1B8C0(a1x);
		v2 = sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76);
		if (v2 == 1)
		{
			if (a1x->word_0x5A_90 == 314)
			{
				LOWORD(v2) = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
				if ((int16_t)v2 < a1x->array_0x4C_76.z)
					/*LOWORD(v2) = */sub_49CD0(a1x, 313);
			}
			else
			{
				/*LOWORD(v2) = */sub_49CD0(a1x, 314);
				a1x->word_0x84_132 = 35;
				v26 = 1;
			}
		}
		else if (a1x->word_0x5A_90 != 313)
		{
			/*LOWORD(v2) = */sub_49CD0(a1x, 313);
			a1x->word_0x84_132 = 60;
			v26 = 1;
		}
		if (v26)
		{
			LOWORD(v2) = a1x->word_0x84_132;
			v24 = a1x->byte_0x46_70;
			a1x->word_0x82_130 = (x_WORD)v2;
			if (v24 == 2)
				a1x->word_0x82_130 = (x_WORD)v2 + 50;
		}
	}
	return (int16_t)v2;
}

//----- (00028C30) --------------------------------------------------------
int sub_28C30(type_str_0x6E8E* a1x)//209c30
{
	int result; // eax
	// fix if begin
	result = 0;
	// end

	sub_1BF90(a1x, 200);
	if (a1x->dword_0x8 < 0)
		a1x->dword_0x8 = 0;
	return result;
}

//----- (00028C60) --------------------------------------------------------
signed int sub_28C60(type_str_0x6E8E* a1x)//209c60
{
	signed int result; // eax

	sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 37);
	result = sub_1C310(a1x, 200, (uint16_t(*)(type_str_0x6E8E*, type_str_0x6E8E*))sub_1CC20);
	if (a1x->dword_0x8 < 0)
		a1x->dword_0x8 = 0;
	return result;
}

//----- (00028CC0) --------------------------------------------------------
type_str_0x6E8E* sub_28CC0(type_str_0x6E8E* a1x)//209cc0
{
	type_str_0x6E8E* resultx; // eax
	int v2; // edx

	resultx = a1x;
	v2 = a1x->dword_0x8;
	a1x->byte_0x45_69 = 201;
	if (v2 < 0)
		a1x->dword_0x8 = 0;
	return resultx;
}

//----- (00028CE0) --------------------------------------------------------
void sub_28CE0(type_str_0x6E8E* a1x)//209ce0
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // ebx
	//int16_t v3; // dx
	//int16_t v4; // ax
	//int16_t v5; // ax
	//Bit8u* v6; // edx
	type_str_0x6E8E* v7x; // eax
	//int result; // eax
	int v9; // [esp+0h] [ebp-10h]
	signed int i; // [esp+4h] [ebp-Ch]
	type_str_0x6E8E* v11x; // [esp+8h] [ebp-8h]
	int v12; // [esp+Ch] [ebp-4h]

	if (a1x->byte_0x46_70)
	{
		sub_1C890(a1x, 200);
		return;
	}
	if (sub_4A810_get_0x35plus() <= 1)
	{
		sub_36BA0(a1x, 0);
	}
	else
	{
		v12 = a1x->dword_0x90_144;
		v9 = v12 / 3;
		for (i = 0; i < 3; i++)
		{
			v1x = sub_4A050_new_event();
			v2x = v1x;
			v11x = v1x;
			if (v1x)
			{
				v1x->byte_0x45_69 = 200;
				v1x->byte_0x3F_63 = 5;
				v1x->byte_0x40_64 = 25;
				v1x->array_0x4C_76.x = a1x->array_0x4C_76.x;
				v1x->array_0x4C_76.y = a1x->array_0x4C_76.y;
				v1x->array_0x4C_76.z = a1x->array_0x4C_76.z;
				v1x->byte_0x46_70 = 3;
				v1x->word_0x84_132 = 35;
				v1x->word_0x86_134 = 60;
				v1x->word_0x82_130 = v1x->word_0x84_132 + 50;
				//v3 = v1x->word_0x14_20;
				v1x->dword_0x90_144 = v9;
				v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
				//v4 = v1x->word_0x14_20;
				v2x->dword_0x4 = 80;
				v2x->word_0x2A_42 = 15000;
				//v5 = (v1x->word_0x14_20 & 0x7FF) - 1;
				v2x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF)-1;
				v2x->word_0x1C_28 = v2x->word_0x20_32;
				v2x->byte_0x38_56 = 1;
				//v6 = a1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
				//LOBYTE(v5) = (*(x_BYTE *)(a1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
				v2x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[a1x->byte_0x40_64]++;
				v2x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xc9e];
				v2x->byte_0x39_57 = 64;
				v12 -= v9;
				v2x->byte_0x41_65 = 3;
				sub_57D70_actualize_event(v2x, &a1x->array_0x4C_76);
				sub_49A20_remove_event(v2x);
				sub_49CD0(v2x, 314);
				sub_49EA0(v2x, 32, 32);
				v2x->byte_0x46_70 = 1;
				v2x->word_0x24_36 = a1x->word_0x26_38;
			}
		}
		if (v11x)
			v11x->dword_0x90_144 += v12;
	}
	v7x = sub_4A190(&a1x->array_0x4C_76, 10, 1);
	if (v7x)
		v7x->word_0x1A_26 = a1x->word_0x1A_26;
	a1x->byte_0x45_69 = 205;
	//result = (int)x_D41A0_BYTEARRAY_0;
	D41A0_BYTESTR_0.str_0x364D2.dword_0x364D2 += 3;
	//return result;
}

//----- (00028EC0) --------------------------------------------------------
void sub_28EC0(type_str_0x6E8E* a1x)//209ec0
{
	//Bit8u* v1; // edx
	//Bit8u* v2; // edx

	if (a1x->byte_0x46_70)
	{
		//v2 = 2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0;
		if (a1x->word_0x24_36 == D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240)
			//++*(x_DWORD *)(2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0 + 12601);
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc + 1].dw_w_b_0_2BDE_11230.dword++;
		sub_1C930(a1x);
	}
	else
	{
		//v1 = 2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0;
		if (a1x->word_0x24_36 == D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240)
			//++*(x_DWORD *)(2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0 + 12601);
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc + 1].dw_w_b_0_2BDE_11230.dword++;
		a1x->dword_0x8 = -1;
		sub_57F10(a1x);
	}
}

//----- (00028F50) --------------------------------------------------------
void sub_28F50(type_str_0x6E8E* a1x)//209f50
{
	if (a1x->byte_0x46_70)
	{
		sub_12470(a1x, 200);
		a1x->byte_0x46_70 = 3;
	}
	else
	{
		sub_1D5D0(a1x, 200);
	}
}

//----- (00028F90) --------------------------------------------------------
void sub_28F90(type_str_0x6E8E* a1x)//209f90
{
	sub_1BD90(a1x, 208);
	sub_293B0(a1x);
}

//----- (00028FC0) --------------------------------------------------------
void sub_28FC0(type_str_0x6E8E* a1x)//209fc0
{
	sub_1BF90(a1x, 208);
	sub_293B0(a1x);
}

//----- (00028FF0) --------------------------------------------------------
void sub_28FF0(type_str_0x6E8E* a1x)//209ff0
{
	unsigned int v1; // esi
	int16_t v2; // ax
	int i; // ecx
	int v4; // eax
	type_str_0x6E8E* v5x; // ecx
	type_str_0x6E8E* v6x; // esi
	char v7; // dh
	type_str_0x6E8E* jx; // ecx
	int v9; // edx
	signed int v10; // eax
	//int v11; // eax
	unsigned int v12; // edx
	//int v14; // edx
	int v15; // eax
	int16_t v16; // dx
	//int v17; // edx
	int v18; // eax
	int16_t v19; // cx

	if (!(a1x->byte_0x3E_62 & 0x1F))
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 62);
	v1 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v1 = 1;
		a1x->word_0x26_38 = v2;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				v1 = 1;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		v1 = 2;
		a1x->word_0x24_36 = a1x->word_0x26_38;
	}
	if (v1 < 1)
	{
		if (v1)
		{
			sub_293D0(a1x);
			return;
		}
	}
	else
	{
		if (v1 > 1)
		{
			if (v1 == 2)
				a1x->byte_0x45_69 = 212;
			sub_293D0(a1x);
			return;
		}
		a1x->word_0x96_150 = a1x->word_0x26_38;
	}
	sub_1B8C0(a1x);
	v6x = x_DWORD_EA3E4[a1x->word_0x96_150];
	if (v6x > x_DWORD_EA3E4[0] && v6x->byte_0x3F_63 == 3)
	{
		v7 = v6x->byte_0x40_64;
		if ((!v7 || v7 == 1) && v6x->dword_0x8 >= 0 && !(v6x->struct_byte_0xc_12_15.byte[1] & 4))
		{
			if (!(a1x->byte_0x3E_62 & 3))
			{
				a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v6x->array_0x4C_76);
				for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
				{
					if (jx->word_0x1A_26 != a1x->word_0x1A_26
						&& abs(a1x->array_0x4C_76.x - jx->array_0x4C_76.x) < a1x->array_0x52_82.xshift
						&& abs(a1x->array_0x4C_76.y - jx->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
					{
						a1x->word_0x20_32 = sub_581E0_maybe_tan2(&jx->array_0x4C_76, &a1x->array_0x4C_76);
						break;
					}
				}
			}
			v9 = v6x->dword_0x90_144 - (v6x->dword_0x88_136 + 14);
			v6x->dword_0x90_144 = v9;
			if (v9 < 0)
				v6x->dword_0x90_144 = 0;
			if (a1x->byte_0x3E_62 & 3)
				return sub_293D0(a1x);
			v10 = sub_583F0_distance_3d(&a1x->array_0x4C_76, &v6x->array_0x4C_76);
			if (v10 <= a1x->dword_0xA0_160x->word_160_0x1c_28)
			{
				if (v10 >= 2048)
					return sub_293D0(a1x);
				if (v6x->byte_0x40_64)
					return sub_293D0(a1x);
				//v11 = (int)x_D41A0_BYTEARRAY_0;
				//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) = 9377 * *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
				D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;
				v12 = D41A0_BYTESTR_0.dword_0x8 % 0x3Fu;
				if (v12 < 4)
					return sub_293D0(a1x);
				if (v12 <= 4)
				{
					//v17 = v6x->dword_0xA4_164;
					v18 = v6x->dword_0xA4_164x->str_611.word_0x453_1107;
					if (v18 == -1)
						return sub_293D0(a1x);					
					v19 = v6x->dword_0xA4_164x->str_611.array_0x333_819x.word[v18];
					if (!v19)
						return sub_293D0(a1x);
					sub_69300(x_DWORD_EA3E4[v19], a1x);
				}
				else
				{
					if (v12 != 5)
						return sub_293D0(a1x);
					//v14 = v6x->dword_0xA4_164;
					v15 = v6x->dword_0xA4_164x->str_611.word_0x451_1105;
					if (v15 == -1)
						return sub_293D0(a1x);
					v16 = v6x->dword_0xA4_164x->str_611.array_0x333_819x.word[v15];
					if (!v16)
						return sub_293D0(a1x);
					sub_69300(x_DWORD_EA3E4[v16], a1x);
				}
				return sub_293D0(a1x);
			}
		}
	}
	a1x->byte_0x45_69 = 209;
	return sub_293D0(a1x);
}

//----- (00029300) --------------------------------------------------------
void sub_29300(type_str_0x6E8E* a1x)//20a300
{
	sub_1C560(a1x, 0xD0u);
	sub_293B0(a1x);
}

//----- (00029330) --------------------------------------------------------
void sub_29330(type_str_0x6E8E* a1x)//20a330
{
	sub_1C890(a1x, 208);
}

//----- (00029350) --------------------------------------------------------
void sub_29350(type_str_0x6E8E* a1x)//20a350
{
	sub_1C930(a1x);
}

//----- (00029380) --------------------------------------------------------
void sub_29380(type_str_0x6E8E* a1x)//20a380
{
	sub_1D5D0(a1x, 208);
	sub_293B0(a1x);
}

//----- (000293B0) --------------------------------------------------------
void sub_293B0(type_str_0x6E8E* a1x)//20a3b0
{
	//int result; // eax

	//result = a1;
	if (a1x->byte_0x45_69 == 210)
	{
		a1x->struct_byte_0xc_12_15.byte[2] &= 0x7Fu;
		a1x->word_0x82_130 = a1x->word_0x84_132;
	}
	//return result;
}

//----- (000293D0) --------------------------------------------------------
void sub_293D0(type_str_0x6E8E* a1x)//20a3d0
{
	//int result; // eax
	char v2; // dh

	//result = a1;
	if (a1x->byte_0x45_69 != 210)
	{
		v2 = a1x->struct_byte_0xc_12_15.byte[2];
		a1x->word_0x96_150 = 0;
		a1x->struct_byte_0xc_12_15.byte[2] = v2 | 0x80;
		a1x->word_0x82_130 = a1x->word_0x86_134;
	}
	//return result;
}

//----- (00029400) --------------------------------------------------------
void sub_29400(type_str_0x6E8E* a1x)//20a400
{
	unsigned int v1; // eax
	type_str_0x6E8E* ix; // eax
	int v3; // ecx
	int16_t v4; // ax
	signed int v5; // esi
	unsigned int v7; // [esp+0h] [ebp-4h]

	v1 = a1x->dword_0x10_16;
	v7 = 0;
	a1x->dword_0x10_16 = v1 + 1;
	if (v1 < 9)
	{
		if (v1 < 3)
		{
			if (!v1)
			{
				sub_2AED0(a1x, 337);
				a1x->dword_0x8 = 1000000;
				a1x->word_0x96_150 = 0;
			}
			goto LABEL_26;
		}
		if (v1 <= 3)
		{
		LABEL_15:
			v7 = 1;
			ix = a1x;
			goto LABEL_35;
		}
		if (v1 != 6)
		{
		LABEL_26:
			if (!v7)
				goto LABEL_36;
			ix = a1x;
			goto LABEL_35;
		}
	}
	else
	{
		if (v1 <= 9)
		{
			x_WORD_EB398ar = a1x->array_0x4C_76;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v3 = (a1x->word_0x14_20 & 7) + 8;
			v4 = 9377 * a1x->word_0x14_20 + 9439;
			a1x->word_0x14_20 = v4;
			v5 = 0;
			x_WORD_EB398ar.x += (x_WORD)v3 << 8;
			x_WORD_EB398ar.y += ((v4 & 7) + 8) << 8;
			while (v5 < 128)
			{
				x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
				if (!sub_102D0(a1x, &x_WORD_EB398ar, 1) && !sub_102D0(a1x, &x_WORD_EB398ar, 4) && sub_1B830(&x_WORD_EB398ar) < 32)
					break;
				v5++;
				sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, 768);
			}
			sub_57CF0(a1x, &x_WORD_EB398ar);
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 22);
			goto LABEL_36;
		}
		if (v1 >= 0xF)
		{
			if (v1 > 0xF)
			{
				if (v1 == 18)
				{
					a1x->byte_0x45_69 = 218;
					v7 = 3;
					sub_2AED0(a1x, 337);
					a1x->word_0x96_150 = 0;
					a1x->byte_0x46_70 = 1;
				}
				goto LABEL_26;
			}
			goto LABEL_15;
		}
		if (v1 != 12)
			goto LABEL_26;
	}
	v7 = 2;
LABEL_35:
	for (ix = a1x; ix > x_DWORD_EA3E4[0]; ix = x_DWORD_EA3E4[ix->word_0x34_52])
	{
		//ix->byte_0xe_14 &= 0x7Fu;
		//ix->byte_0xf_15 &= 0xFEu;
		ix->struct_byte_0xc_12_15.word[1] &= 0xFE7F;
		if (v7 >= 1)
		{
			if (v7 <= 1)
			{
				ix->struct_byte_0xc_12_15.byte[3] |= 1u;
			}
			else if (v7 == 2)
			{
				ix->struct_byte_0xc_12_15.byte[2] |= 0x80u;
			}
		}
	}
LABEL_36:
	a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	sub_29A90(a1x);
}

//----- (00029670) --------------------------------------------------------
void sub_29670(type_str_0x6E8E* a1x)//20a670
{
	signed int v1; // eax
	int16_t v2; // ax
	char v3; // al

	v1 = sub_2A6B0(a1x);
	if (v1)
	{
		if (v1 != 1)
		{
			sub_29A90(a1x);
			return;
		}
		a1x->byte_0x45_69 = 218;
		v2 = a1x->word_0x26_38;
		a1x->dword_0x8 = 1000000;
		a1x->word_0x96_150 = v2;
	}
	v3 = sub_2AF10(a1x, 1);
	if ((uint8_t)v3 >= 3u)
	{
		if ((uint8_t)v3 <= 3u)
		{
			sub_29A90(a1x);
			return;
		}
		if (v3 == 4)
		{
			a1x->byte_0x45_69 = 216;
			a1x->dword_0x10_16 = 0;
			sub_29A90(a1x);
			return;
		}
	}
	if (!(a1x->byte_0x3E_62 & 0x3F))
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		a1x->word_0x20_32 = (a1x->word_0x14_20 % 0x1C7u + a1x->word_0x20_32 - 227) & 0x7FF;
	}
	sub_29A90(a1x);
}

//----- (00029710) --------------------------------------------------------
void sub_29710(type_str_0x6E8E* a1x)//20a710
{
	signed int v1; // eax
	char v2; // al
	type_str_0x6E8E* v3x; // esi
	signed int v4; // edi
	int16_t v5; // ax
	unsigned int v6; // edi
	char v8; // [esp+0h] [ebp-4h]

	v8 = 0;
	v1 = sub_2A6B0(a1x);
	if (v1)
	{
		if (v1 != 1)
			goto LABEL_19;
		a1x->dword_0x8 = 1000000;
		a1x->word_0x96_150 = a1x->word_0x26_38;
	}
	v2 = sub_2AF10(a1x, a1x->byte_0x46_70 == 0);
	if (v2 == 4)
	{
		a1x->byte_0x45_69 = 216;
		a1x->dword_0x10_16 = 0;
	}
	else
	{
		v3x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v3x <= x_DWORD_EA3E4[0] || v3x->dword_0x8 < 0 || v3x->struct_byte_0xc_12_15.byte[1] & 4)
			goto LABEL_24;
		if (!(a1x->byte_0x3E_62 & 3) && v2 != 3 && !a1x->byte_0x46_70)
			a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v3x->array_0x4C_76);
		if (!(a1x->byte_0x3E_62 & 0x1F))
		{
			v4 = a1x->dword_0xA0_160x->word_160_0x1e_30;
			v5 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v3x->array_0x4C_76);
			if ((uint16_t)sub_582B0(a1x->word_0x1C_28, v5) <= v4)
			{
				a1x->byte_0x46_70 = 1;
				sub_2AED0(a1x, 337);
			}
			else
			{
				a1x->byte_0x46_70 = 0;
				sub_2AED0(a1x, 315);
			}
			v6 = a1x->dword_0xA0_160x->word_160_0x1c_28;
			if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v3x->array_0x4C_76) >= v6)
				LABEL_24:
			v8 = 1;
		}
	}
LABEL_19:
	if (v8)
	{
		a1x->byte_0x45_69 = 217;
		sub_2AED0(a1x, 315);
		a1x->word_0x96_150 = 0;
		a1x->byte_0x46_70 = 0;
	}
	sub_29A90(a1x);
}

//----- (00029890) --------------------------------------------------------
void sub_29890(type_str_0x6E8E* a1x)//20a890
{
	a1x->byte_0x45_69 = 217;
	sub_29670(a1x);
}

//----- (000298B0) --------------------------------------------------------
void sub_298B0(type_str_0x6E8E* a1x)//20a8b0
{
	a1x->dword_0x8 = -1;
	sub_1C890(a1x, 216);
}

//----- (000298D0) --------------------------------------------------------
int sub_298D0(type_str_0x6E8E* a1x)//20a8d0
{
	type_str_0x6E8E* v1x; // eax

	a1x->dword_0x8 = -1;
	sub_36BA0(a1x, 1);
	if (!(a1x->struct_byte_0xc_12_15.byte[2] & 0x10))
	{
		v1x = sub_4A190(&a1x->array_0x4C_76, 10, 1);
		if (v1x)
			v1x->word_0x1A_26 = a1x->word_0x1A_26;
	}
	sub_2AE80(a1x);
	return 1;
}

//----- (00029930) --------------------------------------------------------
void sub_29930(type_str_0x6E8E* a1x)//20a930
{
	uint8_t v1; // al
	char v2; // ah
	int v3; // eax
	type_str_0x6E8E* v4x; // eax

	sub_1D5D0(a1x, 216);
	v1 = a1x->byte_0x49_73;
	if (v1 < 2u || v1 > 2u && (v1 < 6u || v1 > 9u))
		sub_2AED0(a1x, 315);
	else
		sub_2AED0(a1x, 337);
	v2 = a1x->byte_0x45_69;
	a1x->dword_0x8 = 1000000;
	if (v2 == -38)
	{
		v3 = a1x->word_0x34_52;
		a1x->byte_0x49_73 = 10;
		while (1)
		{
			v4x = x_DWORD_EA3E4[v3];
			if (v4x <= x_DWORD_EA3E4[0])
				break;
			if (v4x->byte_0x45_69 == 233 && v4x->byte_0x46_70 == 1)
			{
				v4x->byte_0x46_70 = 2;
				v4x->word_0x96_150 = a1x->word_0x96_150;
			}
			v3 = v4x->word_0x34_52;
		}
	}
	else if (v2 == -40)
	{
		a1x->byte_0x49_73 = 15;
	}
	sub_29A90(a1x);
}

//----- (00029A90) --------------------------------------------------------
void sub_29A90(type_str_0x6E8E* a1x)//20aa90
{
	//Bit8u* v1; // edx
	//int v2; // eax
	type_str_0x6E8E* ix; // ebx
	x_WORD* v4y; // esi
	axis_3d* v4z; // esi
	type_str_0x6E8E* v4x; // esi
	Bit16u v4xx;
	uint8_t v5; // al
	int v6; // eax
	int16_t v7; // di
	uint16_t v8; // ax
	int16_t v9; // ax
	type_str_0x6E8E* v10x; // eax
	//int v11; // eax
	//int v12; // ecx
	type_str_0x6E8E* v13x; // eax
	int v14; // eax
	int v15; // ecx
	int v16; // edi
	int v17; // eax
	signed int v18; // ecx
	type_str_0x6E8E* v19x; // edx
	int j; // eax
	int v21; // eax
	char v22; // dh
	signed int v23; // eax
	signed int v24; // eax
	int v25; // eax
	char v26; // cl
	int16_t v27; // ax
	int16_t v28; // ax
	int v29; // ecx
	int k; // eax
	int v31; // ecx
	unsigned int v32; // edx
	Bit32u v34x; // [esp+0h] [ebp-10h]
	type_str_0x6E8E* v35x; // [esp+4h] [ebp-Ch]
	char v36; // [esp+8h] [ebp-8h]
	char v37; // [esp+Ch] [ebp-4h]

	Bit16u v1x;
	type_str_0x6E8E* v1y;

	//fix
	v34x = 0x1000002b;// (Bit32u)a1x;
	v35x = 0;
	v1y = 0;
	//fix

	//HIWORD(v1) = HIWORD(a1);
	//LOWORD(v2) = a1x->word_0x34_52;
	for (ix = x_DWORD_EA3E4[a1x->word_0x34_52]; ix > x_DWORD_EA3E4[0]; ix = x_DWORD_EA3E4[ix->word_0x34_52])
	{

		if (ix->byte_0x45_69 == 233)
		{
			//LOBYTE(v1) = 0;
			v37 = 0;
			//BYTE1(v1) = *(x_BYTE *)(i + 62) + 1;
			v4y = (x_WORD *)((char *)ar_D404C + 22 * ix->byte_0x3B_59);
			v5 = ix->byte_0x46_70;
			ix->byte_0x3E_62++;// = BYTE1(v1);
			if (v5 <= 5u)
			{
				ix->word_0x14_20 = 9377 * ix->word_0x14_20 + 9439;
				ix->byte_0x43_67 = ix->word_0x14_20 % 0x14u;
				sub_2A5B0(a1x, ix, 672);
				sub_2A660(a1x, ix);
				if (ix->byte_0x46_70 == 1)
				{
					ix->word_0x14_20 = 9377 * ix->word_0x14_20 + 9439;
					v6 = ix->word_0x14_20 & 7;
					v7 = ix->word_0x26_38;
					v34x = (ix->word_0x14_20 & 7);
					if (v7)
					{
						if (v6 < 4)
						{
							ix->word_0x26_38 = 0;
							ix->byte_0x46_70 = 2;
							v8 = ix->word_0x36_54;
							ix->word_0x96_150 = v7;
							v8 += 22;
							ix->word_0x36_54 = v8;
							if (v8 > 0x44u)
								ix->word_0x36_54 = 68;
						}
					}
					else if (v6 < 4 && a1x->word_0x96_150 && !(ix->byte_0x3E_62 & 7))
					{
						v9 = a1x->word_0x96_150;
						ix->byte_0x46_70 = 2;
						ix->word_0x96_150 = v9;
					}
				}
			}
			switch (ix->byte_0x46_70)
			{
			case 0:
				ix->word_0x96_150 = 0;
				ix->byte_0x46_70 = 1;
				ix->word_0x2C_44 = 0;
				ix->word_0x36_54 = 0;
				ix->word_0x84_132 = 16;
				goto LABEL_15;
			case 1:
			LABEL_15:
				if (a1x->byte_0x39_57)
				{
					if (!(ix->byte_0x3E_62 & 7))
					{
						//v1 = v34;
						if (v34x)
						{
							if (v34x > 4)
								ix->byte_0x46_70 = 4;
						}
						else
						{
							v10x = sub_2A6F0(ix);
							v35x = v10x;
							if (v10x)
							{
								//v1 = (Bit8u*)(v11 % 168);
								ix->byte_0x46_70 = 2;
								ix->word_0x96_150 = v10x - D41A0_BYTESTR_0.struct_0x6E8E;
							}
						}
					}
					if (!(ix->byte_0x3E_62 & 7) && !(v34x & 1))
					{
						//v12 = ix->dword_0xA0_160;
						ix->word_0x14_20 = 9377 * ix->word_0x14_20 + 9439;
						v4xx = (a1x->word_0x1C_28 + (int16_t)v4y[6] - ix->dword_0xA0_160x->word_160_0x1e_30);
						//v1 = v4 + *(uint16_t *)(i + 20) % (unsigned int)*(int16_t *)(v12 + 30);
						ix->word_0x1C_28 = (v4xx + ix->word_0x14_20 % ix->dword_0xA0_160x->word_160_0x1e_30);
					}
				}
				break;
			case 2:
				ix->byte_0x46_70 = 3;
				ix->byte_0x44_68 = 0;
				ix->word_0x2C_44 = 2;
				ix->word_0x84_132 = 16;
				goto LABEL_26;
			case 3:
			LABEL_26:
				v13x = sub_2A7B0(ix);
				v35x = v13x;
				if (v13x)
				{
					//LOBYTE(v1) = *(x_BYTE *)(i + 68);
					if (ix->byte_0x44_68 < 1u)
					{
						if (!ix->byte_0x44_68 && !ix->word_0x82_130)
						{
							v4z = &v13x->array_0x4C_76;
							ix->byte_0x44_68 = 1;
							ix->word_0x2C_44 = 1;
							ix->word_0x84_132 = 16;
							ix->word_0x1C_28 = sub_581E0_maybe_tan2(&ix->array_0x4C_76, &v13x->array_0x4C_76);
							ix->word_0x1E_30 = sub_58210_radix_tan(&ix->array_0x4C_76, v4z);
							//v1 = a1x;
							ix->word_0x20_32 = ix->word_0x1C_28 - a1x->word_0x1C_28;
							ix->word_0x22_34 = ix->word_0x1E_30 - a1x->word_0x1E_30;
						}
					}
					else if (ix->byte_0x44_68 <= 1u)
					{
						if (ix->word_0x82_130 == 192)
						{
							ix->word_0x2C_44 = 3;
							ix->byte_0x44_68 = 3;
							ix->dword_0x10_16 = 4;
							v37 = 1;
						}
					}
					else if (ix->byte_0x44_68 == 3)
					{
						v37 = 2;
						v14 = ix->dword_0x10_16 - 1;
						ix->dword_0x10_16 = v14;
						if (!v14)
						{
							ix->byte_0x46_70 = 0;
							ix->dword_0x10_16 = 1;
						}
					}
				}
				else
				{
					ix->byte_0x46_70 = 0;
				}
				break;
			case 4:
				ix->byte_0x46_70 = 5;
				ix->byte_0x44_68 = 0;
				ix->word_0x2C_44 = 2;
				ix->word_0x84_132 = 16;
				goto LABEL_40;
			case 5:
			LABEL_40:
				switch (ix->byte_0x44_68)
				{
				case 0:
					if (!ix->word_0x82_130)
					{
						ix->byte_0x44_68 = 1;
						ix->word_0x2C_44 = 1;
						ix->word_0x84_132 = -16;
						ix->word_0x20_32 = v4y[6];
						ix->word_0x22_34 = v4y[7];
						//LOWORD(v1) = *(x_WORD *)(i + 32);
						ix->word_0x1C_28 = ix->word_0x20_32 + a1x->word_0x1C_28;
						ix->word_0x1E_30 = ix->word_0x22_34 + a1x->word_0x1E_30;
					}
					break;
				case 1:
					if (ix->word_0x82_130 == -192)
					{
						ix->byte_0x44_68 = 2;
						ix->dword_0x10_16 = 2;
					}
					break;
				case 2:
					v15 = ix->dword_0x10_16 - 1;
					ix->dword_0x10_16 = v15;
					if (!v15)
					{
						ix->word_0x2C_44 = 4;
						ix->byte_0x44_68 = 6;
						ix->dword_0x10_16 = 1;
					}
					break;
				case 5:
					//v1 = *(x_DWORD *)(i + 16) - 1;
					ix->dword_0x10_16 = ix->dword_0x10_16 - 1;
					if (ix->dword_0x10_16 <= 4)
					{
						ix->byte_0x46_70 = 0;
						ix->dword_0x10_16 = 4;
					}
					break;
				case 6:
					sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 17);
					v16 = ix->dword_0x10_16 + 1;
					ix->dword_0x10_16 = v16;
					if (v16 >= 4)
						ix->byte_0x44_68 = 5;
					break;
				default:
					goto LABEL_94;
				}
				break;
			case 6:
				ix->dword_0x10_16 = 0;
				ix->word_0x2C_44 = 2;
				ix->byte_0x46_70 = 7;
				ix->byte_0x44_68 = 0;
				ix->word_0x84_132 = 80;
				goto LABEL_52;
			case 7:
			LABEL_52:
				v36 = 0;
				sub_2A5B0(a1x, ix, 672);
				v17 = ix->byte_0x44_68;
				switch ((x_BYTE)v17)
				{
				case 0:
					if (!ix->word_0x82_130)
					{
						ix->byte_0x44_68 = 1;
						ix->word_0x2C_44 = 1;
						ix->word_0x20_32 = v4y[6];
						//LOWORD(v17) = v4y[7];
						ix->word_0x22_34 = v4y[7];
					}
					break;
				case 1:
					//LOWORD(v17) = ix->word_0x82_130;
					v36 = 1;
					if (ix->word_0x82_130 == 192)
					{
						ix->byte_0x44_68 = 7;
						ix->word_0x2C_44 = 5;
						ix->dword_0x10_16 = 8;
					}
					break;
				case 7:
					v36 = 1;
					v17 = ix->dword_0x10_16 - 1;
					ix->dword_0x10_16 = v17;
					if (!v17)
					{
						ix->byte_0x44_68 = 8;
						ix->word_0x2C_44 = 6;
						ix->word_0x22_34 = 0;
						ix->byte_0x43_67 = 0;
						ix->word_0x36_54 = 0;
						ix->word_0x84_132 = 12;
						ix->dword_0x10_16 = 0;
					}
					break;
				case 8:
					v18 = ix->dword_0x10_16;
					if (v18 > 10)
					{
						ix->byte_0x46_70 = 8;
					}
					else
					{
						if (v18)
						{
							v19x = x_DWORD_EA3E4[ix->word_0x34_52];
							for (j = 0; ; j++)
							{
								v35x = v19x;
								if (j >= 9 - ix->dword_0x10_16)
									break;
								v19x = x_DWORD_EA3E4[v19x->word_0x34_52];
							}
						}
						else
						{
							v35x = ix;
						}
						if (v35x > x_DWORD_EA3E4[0])
							v35x->struct_byte_0xc_12_15.byte[0] = (v35x->struct_byte_0xc_12_15.byte[0] | 1) & 0xF7;
						//v21 = ix->dword_0x10_16 + 1;
						v22 = ix->byte_0x43_67 + 1;
						ix->dword_0x10_16++;// = v21;
						//LOWORD(v21) = v22;
						v17 = 28 * v22;
						ix->byte_0x43_67 = v22;
						ix->word_0x36_54 += v17;
					}
					break;
				default:
					break;
				}
				if (v36)
				{
					if (ix->byte_0x3E_62 & 1)
						v23 = -204;
					else
						v23 = 204;
					v17 = a1x->word_0x1C_28 + (int16_t)v4y[6] + v23;
					ix->word_0x1C_28 = v17;
				}
				sub_2A340(/*v17, a1x, a1x, (int)v4y,*/ /*a1x,*/ ix);
				sub_2A940(a1x, ix);
				break;
			case 8:
				ix->byte_0x46_70 = 9;
				ix->dword_0x10_16 = 100;
				a1x->byte_0x3B_59--;
				goto LABEL_83;
			case 9:
			LABEL_83:
				v25 = ix->dword_0x10_16 - 1;
				ix->dword_0x10_16 = v25;
				if (!v25)
					ix->byte_0x46_70 = 10;
				break;
			case 0xA:
				a1x->byte_0x3B_59++;
				ix->byte_0x46_70 = 11;
				ix->word_0x2C_44 = 5;
				v26 = ix->struct_byte_0xc_12_15.byte[0];
				ix->dword_0x10_16 = 7;
				v26 &= 0xF6u;
				v27 = ix->word_0x34_52;
				ix->struct_byte_0xc_12_15.byte[0] = v26;
				ix->word_0x96_150 = v27;
				ix->struct_byte_0xc_12_15.byte[0] = v26 | 8;
				ix->word_0x20_32 = v4y[6];
				v28 = v4y[7];
				ix->word_0x82_130 = 156;
				ix->word_0x22_34 = v28;
				goto LABEL_86;
			case 0xB:
			LABEL_86:
				v29 = ix->dword_0x10_16 - 1;
				ix->dword_0x10_16 = v29;
				if (v29 <= 0)
				{
					ix->byte_0x46_70 = 12;
					ix->dword_0x10_16 = 0;
				}
				break;
			case 0xC:
				if (ix->dword_0x10_16 < 9)
				{
					v1x = ix->word_0x34_52;
					for (k = 0; ; k++)
					{
						v4x = x_DWORD_EA3E4[v1x];
						if (k >= ix->dword_0x10_16)
							break;
						v1x = (uint16_t)v4x->word_0x34_52;
					}
					v4x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
					v31 = ix->dword_0x10_16 + 1;
					ix->word_0x96_150 = v4x->word_0x34_52;
					ix->dword_0x10_16 = v31;
					if (v31 >= 9)
					{
						ix->word_0x14_20 = 9377 * ix->word_0x14_20 + 9439;
						v32 = ix->word_0x14_20 % 0x398u;
						ix->str_0x5E_94.word_0x62_98 = 0;
						ix->byte_0x46_70 = 0;
						//v1 = v32 + 920;
						ix->dword_0x8 = v32 + 920;
					}
				}
				break;
			case 0xD:
				ix->byte_0x46_70 = 14;
				ix->byte_0x43_67 = 10;
				ix->dword_0x10_16 = 10;
				goto LABEL_77;
			case 0xE:
			LABEL_77:
				//v4 = (x_WORD *)(ix->dword_0x10_16 - 1);
				ix->dword_0x10_16--;// = (x_DWORD)v4;
				if (!ix->dword_0x10_16)
					ix->byte_0x46_70 = 15;
				break;
			case 0xF:
				v35x = ix;
				ix->byte_0x46_70 = 8;
				v24 = 0;
				do
				{
					v35x->struct_byte_0xc_12_15.byte[0] = (v35x->struct_byte_0xc_12_15.byte[0] | 1) & 0xF7;
					v1y = x_DWORD_EA3E4[v35x->word_0x34_52];
					v24++;
					v35x = x_DWORD_EA3E4[v35x->word_0x34_52];
				} while (v24 < 10);
				break;
			default:
				break;
			}
		LABEL_94:
			//v2 = ix->byte_0x46_70;
			switch (ix->byte_0x46_70)
			{
			case 0:
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
				sub_2A340(/*v2, v1y, a1x, (int)v4y,*/ /*a1x,*/ ix);
				sub_2A940(a1x, ix);
				sub_2AA90(/*ix,*/ a1x, ix);
				if (v37)
				{
					sub_2A7F0(ix, v35x, v37 == 1);
					sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 17);
				}
				goto LABEL_99;
			case 6:
			case 7:
				/*LOWORD(v2) = */sub_2AA90(/*ix, */a1x, ix);
				break;
			case 0xB:
			case 0xC:
				sub_2A5B0(a1x, ix, 672);
				sub_2A940(a1x, ix);
				sub_2AA90(/*ix,*/ a1x, ix);
				v35x = x_DWORD_EA3E4[ix->word_0x96_150];
				x_WORD_EB398ar = v35x->array_0x4C_76;
				sub_57CF0(ix, &x_WORD_EB398ar);
			LABEL_99:
				/*LOWORD(v2) = */sub_2A9F0(a1x, ix);
				break;
			default:
				continue;
			}
		}
	}
//	return v2;
}

//----- (0002A340) --------------------------------------------------------
void sub_2A340(/*int a1, type_str_0x6E8E* a2x, type_str_0x6E8E* a3x, int a4,*/ /*type_str_0x6E8E* a5x,*/ type_str_0x6E8E* a6x)//20b340
{
	Bit16s v6x; // eax
	Bit16s v7x; // eax
	int16_t v8; // cx
	int v9; // edi
	int16_t v10; // dx
	int16_t v11; // di
	int16_t v12; // cx
	int16_t v13; // cx

	Bit16s a1z;
	Bit16s a2z;
	Bit16s a3z;
	Bit16s a4z;

	//LOWORD(v6) = a6x->word_0x2C_44;
	switch (a6x->word_0x2C_44)
	{
	case 0:
		a1z = a6x->word_0x86_134;
		a2z = a6x->word_0x36_54;
		//v7 = (int)(a2z + a1z + 73);
		v8 = (a2z + a1z + 73) + a6x->word_0x20_32;
		v7x = a6x->word_0x86_134;
		a4z = a6x->word_0x36_54;
		a3z = a6x->word_0x22_34;
		a6x->word_0x20_32 = v8;
		v9 = (int)(a4z + v7x + 62 + a3z);
		v7x = a6x->word_0x82_130;
		a6x->word_0x22_34 = v9;
		if (v7x != 192)
		{
			v10 = a6x->word_0x84_132 + a6x->word_0x82_130;
			a6x->word_0x82_130 = v10;
			if (abs(v10) > 192)
			{
				if (a6x->word_0x84_132 <= 0)
					a6x->word_0x82_130 = -192;
				else
					a6x->word_0x82_130 = 192;
				a6x->word_0x84_132 = -a6x->word_0x84_132;
			}
		}
		if (!(a6x->byte_0x3E_62 & 1))
		{
			v11 = a6x->word_0x36_54;
			if (v11)
				a6x->word_0x36_54 = v11 - 1;
		}
		//LOBYTE(v6) = a6x->byte_0x43_67;
		if (a6x->byte_0x43_67)
		{
			if (a6x->byte_0x43_67 == 3 && a6x->word_0x82_130 == 192)
			{
				a6x->word_0x84_132 = -16;
				//LOWORD(v6) = a6x->word_0x84_132;
				a6x->word_0x82_130 += a6x->word_0x84_132;
			}
		}
		else
		{
			a6x->word_0x14_20 = 9377 * a6x->word_0x14_20 + 9439;
			//LOWORD(v6) = a6x->word_0x14_20 / 0x1Cu;
			a6x->word_0x86_134 = a6x->word_0x14_20 % 0x1Cu;
		}
		break;
	case 1:
		//v6 = abs(a6x->word_0x82_130);
		if (abs(a6x->word_0x82_130) < 192)
		{
			//LOWORD(v6) = a6x->word_0x84_132;
			a6x->word_0x82_130 += a6x->word_0x84_132;
		}
		if (a6x->word_0x84_132 <= 0)
		{
			//v6 = a6x->word_0x82_130;
			if (a6x->word_0x82_130 < -192)
				LABEL_23:
			a6x->word_0x82_130 = -192;
		}
		else if (a6x->word_0x82_130 > 192)
		{
		LABEL_21:
			a6x->word_0x82_130 = 192;
		}
		break;
	case 2:
		//v6 = abs(a6x->word_0x82_130);
		if (abs(a6x->word_0x82_130) < a6x->word_0x84_132)
		{
			a6x->word_0x82_130 = 0;
		}
		else
		{
			v12 = a6x->word_0x82_130;
			if (v12 <= 0)
			{
				//LOWORD(v6) = a6x->word_0x84_132;
				a6x->word_0x82_130 = a6x->word_0x84_132 + v12;
			}
			else
			{
				//LOWORD(v6) = a6x->word_0x84_132;
				a6x->word_0x82_130 = v12 - a6x->word_0x84_132;
			}
		}
		break;
	case 3:
	case 4:
		//v6 = a6x->dword_0x10_16 - 1;
		switch (a6x->dword_0x10_16)
		{
		case 1:
			goto LABEL_23;
		case 2:
			a6x->word_0x82_130 = -130;
			return;// v6;
		case 3:
			a6x->word_0x82_130 = -23;
			return;// v6;
		case 4:
			goto LABEL_21;
		default:
			return;// v6;
		}
	case 6:
		v13 = a6x->array_0x4C_76.z - a6x->word_0x36_54;
		a6x->word_0x82_130 -= a6x->word_0x84_132;
		a6x->array_0x4C_76.z = v13;
		v6x = sub_10C40_getTerrainAlt(&a6x->array_0x4C_76);
		if ((Bit16s)a6x->array_0x4C_76.z < v6x)
			a6x->array_0x4C_76.z = v6x;
		break;
	default:
		return;// v6;
	}
	//return v6;
}

//----- (0002A5B0) --------------------------------------------------------
void sub_2A5B0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, int16_t a3)//20b5b0
{
	int16_t *v3; // ebx
	int16_t v4; // si
	int16_t v5; // ax

	v3 = (int16_t *)((char *)ar_D404C + 22 * a2x->byte_0x3B_59);
	x_WORD_EB398ar = a1x->array_0x4C_76;
	sub_57FA0(&x_WORD_EB398ar, v3[1] + a1x->word_0x1C_28, 0, *v3);
	v4 = v3[7];
	v5 = a1x->word_0x1E_30;
	x_WORD_EB398ar.z += v3[2];
	sub_57FA0(&x_WORD_EB398ar, v3[6] + a1x->word_0x1C_28, v4 + v5, a3);
	sub_57CF0(a2x, &x_WORD_EB398ar);
}

//----- (0002A660) --------------------------------------------------------
void sub_2A660(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//20b660
{
	type_str_0x6E8E* resultx; // eax
	int16_t v3; // dx
	signed int v4; // edx
	int16_t v5; // dx
	int v6; // ecx

	resultx = a2x;
	v3 = a2x->str_0x5E_94.word_0x62_98;
	if (v3)
	{
		a1x->str_0x5E_94.word_0x62_98 = v3;
		v4 = a2x->str_0x5E_94.dword_0x5E_94;
		a1x->str_0x5E_94.dword_0x5E_94 = v4;
		if (v4 > 76)
			v4 = 76;
		a2x->dword_0x8 -= v4;
		v5 = a2x->str_0x5E_94.word_0x62_98;
		a2x->str_0x5E_94.word_0x62_98 = 0;
		v6 = a2x->dword_0x8;
		a2x->word_0x26_38 = v5;
		if (v6 < 0)
			a2x->byte_0x46_70 = 6;
	}
	//return result;
}

//----- (0002A6B0) --------------------------------------------------------
signed int sub_2A6B0(type_str_0x6E8E* a1x)//20b6b0
{
	int16_t v1; // bx
	signed int v2; // edx
	char v3; // dl

	v1 = a1x->str_0x5E_94.word_0x62_98;
	v2 = 0;
	if (v1)
	{
		v3 = a1x->byte_0x3B_59;
		a1x->word_0x26_38 = v1;
		if (v3)
		{
			v2 = 1;
		}
		else
		{
			a1x->byte_0x45_69 = 220;
			v2 = 2;
			a1x->word_0x24_36 = v1;
		}
		a1x->str_0x5E_94.word_0x62_98 = 0;
	}
	return v2;
}

//----- (0002A6F0) --------------------------------------------------------
type_str_0x6E8E* sub_2A6F0(type_str_0x6E8E* a1x)//20b6f0
{
	int v1; // esi
	type_str_0x6E8E* v2x; // edi
	type_str_0x6E8E* v3x; // ebx
	int v4; // esi
	signed int v5; // ST08_4
	int16_t v6; // ax
	int v8; // [esp+4h] [ebp-10h]
	signed int v9; // [esp+10h] [ebp-4h]

	v1 = a1x->dword_0xA0_160x->word_160_0x1c_28;
	v2x = 0;
	v9 = 0x10000000;
	v3x = x_D41A0_BYTEARRAY_4_struct.dword_38519;
	v8 = v1 * v1;
	while (v3x > x_DWORD_EA3E4[0])
	{
		v4 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &v3x->array_0x4C_76);
		if (v4 < v8)
		{
			v5 = a1x->dword_0xA0_160x->word_160_0x1e_30;
			v6 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v3x->array_0x4C_76);
			if ((uint16_t)sub_582B0(a1x->word_0x1C_28, v6) < v5 && v4 < v9)
			{
				v2x = v3x;
				v9 = v4;
			}
		}
		v3x = v3x->next_0;
	}
	return v2x;
}

//----- (0002A7B0) --------------------------------------------------------
type_str_0x6E8E* sub_2A7B0(type_str_0x6E8E* a1x)//20b7b0
{
	uint16_t v1; // bx
	type_str_0x6E8E* resultx; // eax
	type_str_0x6E8E* v3x; // edx

	v1 = a1x->word_0x96_150;
	resultx = 0;
	if (v1)
	{
		v3x = x_DWORD_EA3E4[v1];
		if (v3x->dword_0x8 >= 0 && !(v3x->struct_byte_0xc_12_15.byte[1] & 4))
			resultx = x_DWORD_EA3E4[v1];
	}
	return resultx;
}

//----- (0002A7F0) --------------------------------------------------------
void sub_2A7F0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, char a3)//20b7f0
{
	type_str_0x6E8E* v3x; // esi
	signed int v4; // edx
	unsigned int v5; // eax
	type_str_0x6E8E* v6x; // eax
	int16_t v7; // [esp-4h] [ebp-8h]

	v3x = 0;
	if (a3)
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v4 = a1x->word_0x14_20 % 0xCu;
		a1x->word_0x14_20 += x_D41A0_BYTEARRAY_4_struct.setting_30;
		a1x->dword_0x88_136 = (v4 > 7) + 1;
	}
	v5 = a1x->dword_0x88_136;
	if (v5 >= 1)
	{
		if (v5 <= 1)
		{
			if (!a3)
				goto LABEL_13;
			v6x = sub_4A190(&a1x->array_0x4C_76, 9, 0);
			v3x = v6x;
			if (!v6x)
				goto LABEL_13;
			v6x->byte_0x43_67 = 10;
			v6x->byte_0x44_68 = 0;
			v7 = 15;
		}
		else
		{
			if (v5 != 2)
				goto LABEL_13;
			v6x = sub_4A190(&a1x->array_0x4C_76, 9, 9);
			v3x = v6x;
			if (!v6x)
				goto LABEL_13;
			v6x->byte_0x43_67 = 10;
			v6x->byte_0x44_68 = 23;
			v7 = 23;
		}
		v6x->word_0x2A_42 = 850;
		sub_6E450_distance_sound(a1x->word_0x1A_26, -1, v7);
	}
LABEL_13:
	if (v3x)
	{
		v3x->word_0x1A_26 = a1x->word_0x1A_26;
		v3x->word_0x1C_28 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
		v3x->word_0x1E_30 = sub_58210_radix_tan(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
		v3x->array_0x4C_76.z += a1x->array_0x52_82.dd / 2;
		v3x->word_0x96_150 = a1x->word_0x96_150;
		v3x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xe14];
		v3x->byte_0x42_66 = a2x->byte_0x40_64;
		v3x->byte_0x41_65 = a2x->byte_0x3F_63;
	}
}

//----- (0002A940) --------------------------------------------------------
void sub_2A940(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//20b940
{
	//signed int result; // eax
	char *v3; // edx

	//result = a1;
	if (x_DWORD_E9BA8)
	{
		v3 = (char *)ar_D404C + 22 * a2x->byte_0x3B_59;
		a2x->word_0x20_32 = *((x_WORD *)v3 + 6);
		LOWORD(v3) = *((x_WORD *)v3 + 7);
		a2x->word_0x82_130 = 192;
		a2x->byte_0x46_70 = 0;
		// FIXME: types
		// a2x->word_0x22_34 = (x_WORD)v3;
		a1x->struct_byte_0xc_12_15.byte[1] |= 8u;
	}
	else
	{
		a1x->struct_byte_0xc_12_15.byte[1] &= 0xF7u;
	}
	if (a2x->word_0x82_130)
	{
		x_WORD_EB398ar = a2x->array_0x4C_76;
		sub_57FA0(
			&x_WORD_EB398ar,
			a2x->word_0x20_32 + a1x->word_0x1C_28,
			a2x->word_0x22_34 + a1x->word_0x1E_30,
			a2x->word_0x82_130);
		sub_57CF0(a2x, &x_WORD_EB398ar);
	}
	//return result;
}

//----- (0002A9F0) --------------------------------------------------------
void sub_2A9F0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//20b9f0
{
	int v2; // eax
	x_WORD *v3; // eax
	int16_t v4; // di
	int16_t v5; // ST0C_2
	int16_t v6; // dx

	v2 = 22 * a2x->byte_0x3B_59;
	x_WORD_EB398ar = a2x->array_0x4C_76;
	v3 = (x_WORD *)((char *)ar_D404C + v2);
	v4 = v3[7];
	v5 = v3[3];
	v6 = a1x->word_0x1E_30;
	x_WORD_EB398ar.z += v3[5];
	sub_57FA0(&x_WORD_EB398ar, v3[6] + a1x->word_0x1C_28, v4 + v6, v5);
	sub_57CF0(a2x, &x_WORD_EB398ar);
}

//----- (0002AA90) --------------------------------------------------------
void sub_2AA90(/*type_str_0x6E8E* a1x,*/ type_str_0x6E8E* a2x, type_str_0x6E8E* a3x)//20ba90
{
	int16_t *v3; // ecx
	int16_t v4; // ax
	int v5; // eax
	signed int v6; // esi
	type_str_0x6E8E* v7x; // edi
	int v8; // eax
	int v9; // ebx
	int16_t v10; // ax
	uint16_t result; // ax
	axis_3d v12x; // [esp+0h] [ebp-20h]
	//int v13; // [esp+4h] [ebp-1Ch]
	axis_3d v14x; // [esp+8h] [ebp-18h]
	//int16_t v15; // [esp+Ch] [ebp-14h]
	int16_t *v16; // [esp+10h] [ebp-10h]
	int v17; // [esp+14h] [ebp-Ch]
	int v18; // [esp+18h] [ebp-8h]
	int v19; // [esp+1Ch] [ebp-4h]

	Bit32s a1y;

	v3 = (int16_t *)((char *)ar_D404C + 22 * a3x->byte_0x3B_59);
	v12x = a2x->array_0x4C_76;
	v4 = *v3;
	v16 = v3;
	sub_57FA0(&v12x, v3[1] + a2x->word_0x1C_28, 0, v4);
	v12x.z += v16[2];
	v14x = a3x->array_0x4C_76;
	v5 = (signed int)(sub_583F0_distance_3d(&v12x, &v14x) - 468) / 24;
	v18 = 16 - v5;
	if (16 - v5 <= 15)
	{
		if (16 - v5 < 0)
			v18 = 0;
	}
	else
	{
		v18 = 15;
	}
	//LOWORD(v19) = sub_581E0_maybe_tan2(&v12x, &v14x);
	v19 = sub_581E0_maybe_tan2(&v12x, &v14x);
	//LOWORD(v17) = sub_58210_radix_tan(&v12x, &v14x);
	v17 = sub_58210_radix_tan(&v12x, &v14x);
	v6 = 0;
	v7x = x_DWORD_EA3E4[a3x->word_0x34_52];
	do
	{
		v8 = 3 * v18;
		switch (v6)
		{
		case 0:
			a1y = 0;
			break;
		case 1:
		case 8:
			v9 = x_DWORD_D40BC[v8];
			goto LABEL_12;
		case 2:
		case 7:
			v9 = x_DWORD_D40BC[1 + v8];
		LABEL_12:
			a1y = -v9;//fix
			break;
		case 3:
		case 6:
			a1y = x_DWORD_D40BC[1 + v8];
			break;
		case 4:
		case 5:
			a1y = x_DWORD_D40BC[v8];
			break;
		default:
			break;
		}
		// FIXME: types
		// // if (v6)
		// 	sub_57FA0(&v12x, v19, (short)(Bit16s*)(a1y + v17), 96);
		sub_57CF0(v7x, &v12x);
		if (a3x->byte_0x46_70 == 7 && a3x->byte_0x44_68 == 8)
		{
			v10 = sub_10C40_getTerrainAlt(&v7x->array_0x4C_76);
			if (v7x->array_0x4C_76.z <= v10)
				v7x->array_0x4C_76.z = v10;
		}
		result = v7x->word_0x34_52;
		v6++;
		v7x = x_DWORD_EA3E4[result];
	} while (v6 < 9);
	//return result;
}

//----- (0002AC50) --------------------------------------------------------
void sub_2AC50(type_str_0x6E8E* a1x)//20bc50
{
	type_str_0x6E8E* v1x; // ebx
	//Bit8u* v2; // ecx
	//int v3; // edx
	//Bit8u* v4; // ecx
	//char v5; // ah

	v1x = a1x;
	a1x->word_0x20_32 = 0;
	v1x->word_0x1C_28 = a1x->word_0x20_32;
	//v2 = x_D41A0_BYTEARRAY_0;
	v1x->word_0x1E_30 = a1x->word_0x20_32;
	a1x->word_0x84_132 = 64;
	a1x->word_0x86_134 = 0;
	a1x->word_0x82_130 = 30;
	a1x->byte_0x3B_59 = 5;
	a1x->dword_0x8 = 1000000;
	a1x->dword_0x4 = 36000;
	a1x->dword_0x90_144 = 20000;
	v1x->dword_0x10_16 = (v1x - D41A0_BYTESTR_0.struct_0x6E8E) % 100;
	//v3 = a1x->byte_0x40_64;
	a1x->word_0x22_34 = 0;
	//v4 = a1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
	a1x->byte_0x38_56 = 1;
	//LOBYTE(v3) = (*(_BYTE *)(a1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
	a1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xce2];
	a1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[a1x->byte_0x40_64]++;
	//v5 = a1x->struct_byte_0xc_12_15.dbyte3_4.byte2 | 0x80;
	//LOBYTE(v3) = *(x_BYTE *)(a1x->dword_0xA0_160 + 26);
	a1x->byte_0x41_65 = 3;
	a1x->struct_byte_0xc_12_15.byte[3] |= 0x80;
	a1x->byte_0x39_57 = a1x->dword_0xA0_160x->word_160_0x1a_26 +1;
	sub_49CD0(a1x, 315);
	sub_49EA0(a1x, 1024, 1536);
}

//----- (0002AD40) --------------------------------------------------------
void sub_2AD40(type_str_0x6E8E* a1x)//20bd40
{
	uint16_t result; // ax
	signed int v2; // esi
	type_str_0x6E8E* ix; // ebx
	int16_t v4; // cx
	int v5; // eax

	result = a1x->word_0x34_52;
	v2 = 1;
	for (ix = x_DWORD_EA3E4[result]; ix > x_DWORD_EA3E4[0]; ix = x_DWORD_EA3E4[ix->word_0x34_52])
	{
		if (ix->byte_0x45_69 == 233)
		{
			sub_49CD0(ix, 316);
			ix->struct_byte_0xc_12_15.byte[3] |= 0xA0u;
			ix->word_0x14_20 = 9377 * ix->word_0x14_20 + 9439;
			v4 = ix->word_0x14_20;
			ix->word_0x20_32 = ix->word_0x14_20 & 0x7FF;
			ix->word_0x14_20 = 9377 * v4 + 9439;
			ix->word_0x22_34 = ix->word_0x14_20 & 0x7FF;
			ix->word_0x84_132 = 16;
			ix->word_0x82_130 = 16;
			ix->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xdae];
			ix->byte_0x38_56 = 1;
			v5 = 460 * v2 + 920;
			ix->dword_0x8 = v5;
			ix->dword_0x4 = v5;
			/*result = */sub_2A940(a1x, ix);
		}
		v2++;
	}
	//return result;
}

//----- (0002AE30) --------------------------------------------------------
void sub_2AE30(type_str_0x6E8E* a1x)//20be30
{
	//int result; // eax
	int ix; // ebx
	type_str_0x6E8E* v3x; // ebx

	//result = a1;
	for (ix = a1x->word_0x34_52; ; ix = v3x->word_0x34_52)
	{
		v3x = x_DWORD_EA3E4[ix];
		if (v3x <= x_DWORD_EA3E4[0])
			break;
		if (v3x->byte_0x45_69 == 234)
		{
			/*result = */sub_49CD0(v3x, 317);
			v3x->struct_byte_0xc_12_15.byte[3] |= 0xA0u;
		}
	}
	//return result;
}

//----- (0002AE80) --------------------------------------------------------
void sub_2AE80(type_str_0x6E8E* a1x)//20be80
{
	int ix; // ebx
	type_str_0x6E8E* v2x; // ebx
	//int result; // eax

	if (a1x && a1x > x_DWORD_EA3E4[0])
	{
		for (ix = a1x->word_0x34_52; ; ix = v2x->word_0x34_52)
		{
			v2x = x_DWORD_EA3E4[ix];
			if (v2x <= x_DWORD_EA3E4[0])
				break;
			sub_57F10(v2x);
		}
		sub_57F10(a1x);
	}
	//return result;
}

//----- (0002AED0) --------------------------------------------------------
void sub_2AED0(type_str_0x6E8E* a1x, int a2)//20bed0
{
	//int v2; // eax

	//v2 = a1x->word_0x5A_90;
	if (a2 != a1x->word_0x5A_90)
	{
		a1x->word_0x5A_90 = a2;
		a1x->byte_0x5C_92 = 0;
		//LOBYTE(v2) = x_BYTE_D8A2E[(uint8_t)x_WORD_D951C[6+7 * a2]];
		a1x->byte_0x5D_93 = x_BYTE_D8A2E[(uint8_t)x_WORD_D951C[6 + 7 * a2]];
	}
	//return v2;
}

//----- (0002AF10) --------------------------------------------------------
char sub_2AF10(type_str_0x6E8E* a1x, char a2)//20bf10
{
	char v2; // dh
	char v3; // al
	signed int v4; // eax
	int16_t v5; // ax
	signed int v7; // [esp+0h] [ebp-1Ch]
	uint16_t v8; // [esp+4h] [ebp-18h]
	int v9; // [esp+8h] [ebp-14h]
	char v10; // [esp+Ch] [ebp-10h]
	char v11; // [esp+10h] [ebp-Ch]
	char v12; // [esp+14h] [ebp-8h]
	char v13; // [esp+18h] [ebp-4h]

	v2 = a1x->struct_byte_0xc_12_15.byte[2];
	v10 = 0;
	v12 = 0;
	if (v2 & 0x10)
		a1x->struct_byte_0xc_12_15.byte[2] = v2 & 0xEF;
	else
		a1x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
	v3 = a1x->struct_byte_0xc_12_15.byte[1];
	if (v3 & 8)
	{
		a1x->struct_byte_0xc_12_15.byte[1] = v3 & 0xF7;
		v13 = 4;
	}
	else
	{
		x_WORD_EB398ar = a1x->array_0x4C_76;
		if (a2)
			sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
		x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
		if (a2
			&& a1x->array_0x4C_76.x >> 8 == x_WORD_EB398ar.x >> 8
			&& a1x->array_0x4C_76.y >> 8 == x_WORD_EB398ar.y >> 8)
		{
			v10 = 1;
			v12 = 1;
			v13 = 1;
			a1x->struct_byte_0xc_12_15.byte[2] &= 0xFBu;
		}
		else if (sub_102D0(a1x, &x_WORD_EB398ar, 1) || sub_102D0(a1x, &x_WORD_EB398ar, 4) || sub_1B830(&x_WORD_EB398ar) >= 32)
		{
			if (a1x->word_0x1C_28 == a1x->word_0x20_32)
			{
				a1x->struct_byte_0xc_12_15.byte[2] |= 4u;
				v7 = 91;
				v9 = 1;
				v11 = BYTE1(v7);
				while (v7 <= 1024)
				{
					x_WORD_EB398ar = a1x->array_0x4C_76;
					v8 = (a1x->word_0x1C_28 + v9 * v7) & 0x7FF;
					sub_57FA0(&x_WORD_EB398ar, v8, 0, a1x->word_0x82_130);
					x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
					if (!sub_102D0(a1x, &x_WORD_EB398ar, 1) && !sub_102D0(a1x, &x_WORD_EB398ar, 4) && sub_1B830(&x_WORD_EB398ar) < 32)
					{
						v11 = 1;
						break;
					}
					v9 = 0 - v9;
					if (v9 == 1)
						v4 = 91;
					else
						v4 = 0;
					v7 += v4;
				}
				if (v11)
				{
					a1x->word_0x20_32 = v8;
					v12 = 1;
					v13 = 3;
				}
				else
				{
					v13 = 4;
				}
			}
			else
			{
				a1x->struct_byte_0xc_12_15.byte[2] |= 4u;
				v12 = 1;
				v13 = 3;
			}
		}
		else
		{
			v10 = 1;
			v12 = 1;
			v13 = 2;
			a1x->struct_byte_0xc_12_15.byte[2] &= 0xFBu;
		}
		if (a2 && v10)
			sub_57CF0(a1x, &x_WORD_EB398ar);
		if (v12)
		{
			v5 = a1x->word_0x1C_28
				+ sub_58350(
					a1x->word_0x1C_28,
					a1x->word_0x20_32,
					a1x->dword_0xA0_160x->word_160_0x4_4,
					a1x->dword_0xA0_160x->word_160_0x2_2);
			HIBYTE(v5) &= 7u;
			a1x->word_0x1C_28 = v5;
		}
		a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	}
	if (v13 == 4)
	{
		a1x->byte_0x45_69 = 216;
		a1x->dword_0x10_16 = 0;
	}
	return v13;
}

//----- (0002B1D0) --------------------------------------------------------
void sub_2B1D0(type_str_0x6E8E* a1x)//20c1d0
{
	signed int index; // eax

	/*index = */sub_1BD90(a1x, 224);
	//HIBYTE(index) = *(x_BYTE *)(a1 + 69);
	if (a1x->byte_0x45_69 == 226)
		/*result = */sub_2B840(a1x);
	//return result;
}

//----- (0002B200) --------------------------------------------------------
void sub_2B200(type_str_0x6E8E* a1x)//20c200
{
	sub_1BF90(a1x, 224);
	if (a1x->byte_0x45_69 == 226)
		sub_2B840(a1x);
}

//----- (0002B260) --------------------------------------------------------
void sub_2B260(type_str_0x6E8E* a1x)//20c260
{
	signed int v1; // eax
	int16_t v2; // dx
	type_str_0x6E8E* v3x; // edx
	int v4; // edi
	type_str_0x6E8E* v5x; // ecx
	//Bit8u* v6; // edx
	int16_t v7; // ax
	char v8; // dl
	uint16_t v9; // di
	char v10; // al
	type_str_0x6E8E* v11x; // edx
	int v12; // esi
	char v13; // al
	type_str_0x6E8E* v14x; // ecx
	char v15; // cl
	int16_t v16; // ax
	char v17; // al
	uint16_t v18; // cx
	type_str_0x6E8E* v19x; // edx
	unsigned int v20; // esi
	int v21; // esi
	axis_3d v23x; // [esp+0h] [ebp-1Ch]
	//uint16_t v24; // [esp+4h] [ebp-18h]
	type_str_0x6E8E* v25x; // [esp+8h] [ebp-14h]
	char v26; // [esp+Ch] [ebp-10h]
	char v27; // [esp+10h] [ebp-Ch]
	char v28; // [esp+14h] [ebp-8h]
	char v29; // [esp+18h] [ebp-4h]

	// fix if begin
	v25x = 0;
	// end

	v1 = sub_2B9A0(a1x);
	if ((unsigned int)v1 <= 1)
	{
		LOBYTE(v1) = a1x->byte_0x46_70;
		switch ((x_BYTE)v1)
		{
		case 0:
			sub_2B860(a1x, 3u);
			/*LOBYTE(v1) = */sub_2BA50(a1x, 1u);
			return;// v1;
		case 1:
			sub_4A190(&a1x->array_0x4C_76, 10, 5);
			/*LOBYTE(v1) = */sub_2BA50(a1x, 2u);
			return;// v1;
		case 2:
			LOBYTE(v1) = 0;
			v2 = a1x->word_0x96_150;
			v29 = 0;
			if (v2)
			{
				v3x = x_DWORD_EA3E4[a1x->word_0x96_150];
				v25x = v3x;
				if (v3x > x_DWORD_EA3E4[0] && v3x->dword_0x8 >= 0 && !(v3x->struct_byte_0xc_12_15.byte[1] & 4))
					LOBYTE(v1) = 1;
			}
			if (!(x_BYTE)v1 || (v4 = a1x->dword_0x10_16 - 1, a1x->dword_0x10_16 = v4, v4 <= 0))
			{
				v29 = 1;
				goto LABEL_31;
			}
			v23x = v25x->array_0x4C_76;
			sub_57FA0(&v23x, v25x->word_0x1C_28, 0, 768);
			if (!(a1x->byte_0x3E_62 & 3))
				a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v23x);
			if (a1x->byte_0x3E_62 & 3)
				goto LABEL_22;
			v28 = 0;
			v5x = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64];
			while (2)
			{
				if (v5x > x_DWORD_EA3E4[0])
				{
					if (v5x->word_0x1A_26 == a1x->word_0x1A_26
						|| abs(a1x->array_0x4C_76.x - v5x->array_0x4C_76.x) >= a1x->array_0x52_82.xshift
						|| abs(a1x->array_0x4C_76.y - v5x->array_0x4C_76.y) >= a1x->array_0x52_82.xshift)
					{
						v5x = v5x->next_0;
						continue;
					}
					a1x->word_0x20_32 = sub_581E0_maybe_tan2(&v5x->array_0x4C_76, &a1x->array_0x4C_76);
					v28 = 1;
				}
				break;
			}
		LABEL_22:
			v1 = sub_1B8C0(a1x);
			if (v1 == 3)
			{
				/*LOBYTE(v1) = */sub_2BA50(a1x, 7u);
			}
			else if (!(a1x->byte_0x3E_62 & 3) && a1x->dword_0x10_16 < 14)
			{
				v1 = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &v23x);
				if (v1 < 2768896)
				{
					LOBYTE(v1) = sub_2B7E0(a1x);
					if (!(x_BYTE)v1)
						/*LOBYTE(v1) = */sub_2BA50(a1x, 3u);
				}
			}
		LABEL_31:
			if (v29)
			{
				LOBYTE(v1) = sub_2B7E0(a1x);
				if (!(x_BYTE)v1)
					/*LOBYTE(v1) = */sub_2BA50(a1x, 3u);
			}
			return;// v1;
		case 3:
			sub_2BA50(a1x, 4u);
			sub_2B860(a1x, 2u);
			a1x->word_0x30_48 = a1x->word_0x1C_28;
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 38);
			goto LABEL_35;
		case 4:
		case 5:
		LABEL_35:
			if (a1x->dword_0x10_16 <= 0)
			{
				/*LOBYTE(v1) = */sub_2BA50(a1x, 6u);
				return;// v1;
			}
			v7 = a1x->word_0x30_48;
			a1x->word_0x1C_28 = v7;
			v8 = a1x->byte_0x46_70;
			a1x->word_0x20_32 = v7;
			if (v8 == 4)
			{
				v9 = a1x->word_0x96_150;
				v10 = 0;
				if (v9)
				{
					v11x = x_DWORD_EA3E4[v9];
					v25x = v11x;
					if (v11x > x_DWORD_EA3E4[0] && v11x->dword_0x8 >= 0 && !(v11x->struct_byte_0xc_12_15.byte[1] & 4))
						v10 = 1;
				}
				if (v10)
				{
					if (!(a1x->byte_0x3E_62 & 7) && sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &v25x->array_0x4C_76) > 802816)
						a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v25x->array_0x4C_76);
					v12 = a1x->dword_0x10_16;
					if (a1x->word_0x2C_44 - 3 > v12 && v12 > 3 && sub_1CED0(a1x, v25x))
						a1x->byte_0x46_70 = 5;
				}
			}
			v13 = a1x->byte_0x3E_62;
			a1x->dword_0x10_16--;
			if (v13 & 3)
				goto LABEL_58;
			v27 = 0;
			v14x = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a1x->byte_0x40_64];
			break;
		case 6:
			sub_2B860(a1x, 3u);
			sub_4A190(&a1x->array_0x4C_76, 10, 5);
			v17 = 0;
			v18 = a1x->word_0x96_150;
			v26 = 0;
			if (v18)
			{
				v19x = x_DWORD_EA3E4[v18];
				v25x = v19x;
				if (v19x > x_DWORD_EA3E4[0] && v19x->dword_0x8 >= 0 && !(v19x->struct_byte_0xc_12_15.byte[1] & 4))
					v17 = 1;
			}
			if (v17)
			{
				v20 = a1x->dword_0xA0_160x->word_160_0x1c_28;
				if (sub_583F0_distance_3d(&a1x->array_0x4C_76, &v25x->array_0x4C_76) < v20)
					v26 = 1;
			}
			if (v26)
				/*LOBYTE(v1) = */sub_2BA50(a1x, 2u);
			else
				/*LOBYTE(v1) = */sub_2BA50(a1x, 7u);
			return;// v1;
		case 7:
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			a1x->word_0x20_32 = a1x->word_0x14_20 & 0x7FF;
			sub_2BA50(a1x, 8u);
			goto LABEL_76;
		case 8:
		LABEL_76:
			LOBYTE(v1) = sub_1B8C0(a1x);
			v21 = a1x->dword_0x10_16 - 1;
			a1x->dword_0x10_16 = v21;
			if (v21 <= 0)
				/*LOBYTE(v1) = */sub_2BA50(a1x, 9u);
			return;// v1;
		case 9:
			/*LOBYTE(v1) = */sub_2B860(a1x, 1u);
			a1x->byte_0x45_69 = 225;
			a1x->word_0x96_150 = 0;
			return;// v1;
		default:
			return;// v1;
		}
		while (v14x > x_DWORD_EA3E4[0])
		{
			if (v14x->word_0x1A_26 != a1x->word_0x1A_26
				&& abs(a1x->array_0x4C_76.x - v14x->array_0x4C_76.x) < a1x->array_0x52_82.xshift
				&& abs(a1x->array_0x4C_76.y - v14x->array_0x4C_76.y) < a1x->array_0x52_82.xshift)
			{
				a1x->word_0x20_32 = sub_581E0_maybe_tan2(&v14x->array_0x4C_76, &a1x->array_0x4C_76);
				v27 = 1;
				break;
			}
			v14x = v14x->next_0;
		}
	LABEL_58:
		sub_1B8C0(a1x);
		v15 = a1x->dword_0x10_16;
		a1x->word_0x30_48 = a1x->word_0x1C_28;
		if (v15 & 4)
			v16 = 56;
		else
			v16 = -56;
		LOWORD(v1) = a1x->word_0x1C_28 + v16;
		a1x->word_0x1C_28 = v1;
		a1x->word_0x1C_28 &= 0x7ff;
	}
	//return v1;
}

//----- (0002B750) --------------------------------------------------------
void sub_2B750(type_str_0x6E8E* a1x)//20c750
{
	//int result; // eax

	//result = a1;
	a1x->byte_0x45_69 = 225;
	//return result;
}

//----- (0002B760) --------------------------------------------------------
void sub_2B760(type_str_0x6E8E* a1x)//20c760
{
	sub_1C890(a1x, 224);
}

//----- (0002B780) --------------------------------------------------------
void sub_2B780(type_str_0x6E8E* a1x)//20c780
{
	sub_1C930(a1x);
}

//----- (0002B7B0) --------------------------------------------------------
void sub_2B7B0(type_str_0x6E8E* a1x)//20c7b0
{
	sub_1D5D0(a1x, 224);
	if (a1x->byte_0x45_69 == 226)
		sub_2B840(a1x);
}

//----- (0002B7E0) --------------------------------------------------------
char sub_2B7E0(type_str_0x6E8E* a1x)//20c7e0
{
	type_str_0x6E8E* v1x; // eax
	char v3; // bl

	v1x = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[112/4];
	if (v1x <= x_DWORD_EA3E4[0])
		return 0;
	do
	{
		if (v1x != a1x && v1x->byte_0x45_69 == 226)
		{
			v3 = v1x->byte_0x46_70;
			if (v3 == 3 || v3 == 4 || v3 == 5)
				return 1;
		}
		v1x = v1x->next_0;
	} while (v1x > x_DWORD_EA3E4[0]);
	return 0;
}

//----- (0002B840) --------------------------------------------------------
void sub_2B840(type_str_0x6E8E* a1x)//20c840
{
	//int result; // eax

	//result = a1;
	a1x->byte_0x45_69 = 226;
	a1x->byte_0x46_70 = 0;
	//return result;
}

//----- (0002B860) --------------------------------------------------------
void sub_2B860(type_str_0x6E8E* a1x, uint8_t a2)//20c860
{
	//int16_t v2; // ax
	char v3; // ah
	char v4; // dh
	uint16_t v5; // si
	char v6; // ch

	//LOBYTE(v2) = a2;
	if (a2 < 2u)
	{
		if (a2 == 1)
		{
			v3 = a1x->struct_byte_0xc_12_15.byte[0] & 0xF6;
			a1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xc5a];
			a1x->struct_byte_0xc_12_15.byte[0] = v3 | 8;
			sub_49CD0(a1x, 292);
			sub_49EA0(a1x, 85, 42);
			//v2 = a1x->word_0x86_134;
			a1x->word_0x82_130 = a1x->word_0x86_134;
		}
	}
	else if (a2 <= 2u)
	{
		a1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xc5a];
		a1x->word_0x2C_44 = 0;
		v4 = a1x->struct_byte_0xc_12_15.byte[0] & 0xF6;
		a1x->word_0x82_130 = a1x->word_0x84_132;
		a1x->struct_byte_0xc_12_15.byte[0] = v4;
		v5 = *(Bit16s*)&x_BYTE_D9F50[0x5b6];
		a1x->struct_byte_0xc_12_15.byte[0] = v4 | 8;
		sub_49CD0(a1x, 291);
		sub_49EA0(a1x, 384, 768);
		/*LOBYTE(v2) = */sub_71AB0(v5, 0);
		if (x_DWORD_F66F0x[v5])
		{
			a1x->dword_0x10_16 = sub_724F0(x_DWORD_E9C08x, v5)->word_16_maxframes;
			//v2 = a1x->dword_0x10_16;
			a1x->word_0x2C_44 = a1x->dword_0x10_16;
		}
	}
	else if (a2 == 3)
	{
		a1x->byte_0x39_57 = 0;
		a1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xc7c];
		v6 = a1x->struct_byte_0xc_12_15.byte[0] | 1;
		a1x->word_0x82_130 = a1x->word_0x84_132 - 28;
		//LOBYTE(v2) = v6 & 0xF7;
		a1x->struct_byte_0xc_12_15.byte[0] = v6 & 0xF7;
	}
	//return v2;
}

//----- (0002B9A0) --------------------------------------------------------
signed int sub_2B9A0(type_str_0x6E8E* a1x)//20c9a0
{
	unsigned int v1; // edx
	int16_t v2; // dx
	int i; // ebx
	int v4; // ecx
	type_str_0x6E8E* v5x; // ebx

	v1 = 0;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		v2 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->word_0x26_38 = v2;
		v1 = 1;
	}
	else
	{
		a1x->word_0x26_38 = 0;
	}
	if (a1x->word_0x34_52)
	{
		for (i = a1x->word_0x34_52; ; i = v5x->word_0x34_52)
		{
			v5x = x_DWORD_EA3E4[i];
			if (v5x == x_DWORD_EA3E4[0])
				break;
			v4 = v5x->dword_0x8;
			if (v4 < a1x->dword_0x8)
			{
				a1x->dword_0x8 = v4;
				a1x->word_0x26_38 = v5x->word_0x26_38;
				v1 = 1;
				break;
			}
		}
	}
	if (a1x->dword_0x8 < 0)
	{
		a1x->word_0x24_36 = a1x->word_0x26_38;
		v1 = 2;
	}
	if (v1 >= 1)
	{
		if (v1 <= 1)
		{
			a1x->word_0x96_150 = a1x->word_0x26_38;
		}
		else if (v1 == 2)
		{
			a1x->byte_0x45_69 = 228;
			return 2;
		}
	}
	return v1;
}

//----- (0002BA50) --------------------------------------------------------
void sub_2BA50(type_str_0x6E8E* a1x, uint8_t a2)//20ca50
{
	uint8_t result; // al

	result = a2;
	a1x->byte_0x46_70 = a2;
	if (a2 < 2u)
		goto LABEL_10;
	if (a2 <= 2u)
	{
		a1x->dword_0x10_16 = 32;
		return;// result;
	}
	if (a2 == 8)
		a1x->dword_0x10_16 = 16;
	else
		LABEL_10:
	a1x->dword_0x10_16 = 0;
	//return result;
}

//----- (0002BB40) --------------------------------------------------------
void sub_2BB40_draw_bitmap(Bit16s posx, Bit16s posy, posistruct tempposstr)//20cb40
{
	Bit8u* temp_screen_buffer; // edi

	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_8F8B0_draw_bitmap320(posx, posy, tempposstr);
	else
		sub_8F8E8_draw_bitmap640(posx, posy, tempposstr);
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 == 1)
	{
		temp_screen_buffer = x_DWORD_180628b_screen_buffer;
		x_DWORD_180628b_screen_buffer = x_DWORD_E9C3C;
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_8F8B0_draw_bitmap320(posx, posy, tempposstr);
		else
			sub_8F8E8_draw_bitmap640(posx, posy, tempposstr);
		x_DWORD_180628b_screen_buffer = temp_screen_buffer;
	}
}

//----- (0002BBB0) --------------------------------------------------------
void sub_2BBB0(int16_t a1, int16_t a2, posistruct a3)//20cbb0
{
	//int result; // eax
	Bit8u* temp_screen_buffer; // edi

	x_DWORD_F01EC(a1, a2, a3);
	//result = (int)x_D41A0_BYTEARRAY_0;	
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 == 1)
	{
		temp_screen_buffer = x_DWORD_180628b_screen_buffer;
		x_DWORD_180628b_screen_buffer = (Bit8u*)x_DWORD_E9C3C;
		/*result = */x_DWORD_F01EC(a1, a2, a3);
		x_DWORD_180628b_screen_buffer = temp_screen_buffer;
	}
	//return result;
}

//----- (0002BC10) --------------------------------------------------------
void sub_2BC10_draw_text(char* textbuffer, Bit16s posx, Bit16s posy, Bit8u color)//20cc10
{
	//int result; // eax
	Bit8u* temp_screen_buffer; // ST10_4

	sub_6F940_sub_draw_text(textbuffer, posx, posy, color);
	//result = (int)x_D41A0_BYTEARRAY_0;
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 == 1)//shifted graphics
	{
		temp_screen_buffer = x_DWORD_180628b_screen_buffer;
		x_DWORD_180628b_screen_buffer = (Bit8u*)x_DWORD_E9C3C;
		sub_6F940_sub_draw_text(textbuffer, posx, posy, color);
		//result = v5;
		x_DWORD_180628b_screen_buffer = temp_screen_buffer;
	}
	//return result;
}

//----- (0002BC80) --------------------------------------------------------
void sub_2BC80(Bit16s x1, Bit16s y1, Bit16s x2, Bit16s y2, Bit8u a5)//20cc80
{
	Bit8u* temp_screen_buffer; // ST14_4

	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_90164(x1, y1, x2, y2, a5);
	else
		sub_901E4(x1, y1, x2, y2, a5);

	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 == 1)
	{
		temp_screen_buffer = x_DWORD_180628b_screen_buffer;
		x_DWORD_180628b_screen_buffer = x_DWORD_E9C3C;
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_90164(x1, y1, x2, y2, a5);
		else
			sub_901E4(x1, y1, x2, y2, a5);
		x_DWORD_180628b_screen_buffer = (Bit8u*)temp_screen_buffer;
	}
}

//----- (0002BD10) --------------------------------------------------------
void sub_2BD10_draw_line(int16_t a1, int16_t a2, int16_t a3, int16_t a4, uint8_t a5)//20cd10
{
	std::function<void(uint16_t, uint16_t, uint16_t, uint16_t, char)> func_draw_exitmenu;

	Bit8u* temp_screen_buffer; // ST14_4

	if (x_WORD_180660_VGA_type_resolution & 1)
		func_draw_exitmenu = &sub_BD524;
	else
		func_draw_exitmenu = &sub_BD542;
	func_draw_exitmenu(a1, a2, a3, a4, a5);

	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 == 1)
	{
		temp_screen_buffer = x_DWORD_180628b_screen_buffer;
		x_DWORD_180628b_screen_buffer = (Bit8u*)x_DWORD_E9C3C;
		func_draw_exitmenu(a1, a2, a3, a4, a5);
		x_DWORD_180628b_screen_buffer = temp_screen_buffer;
	}
}


void debugtestscreen() {
	//save
	#ifdef OLD_PARTICLES
	bool save = true;
	#else
	bool save = false;
	#endif

	if (save)
	{
		FILE* file = fopen("c:/prenos/remc2/testscreen.dat","wb");
		fwrite(x_DWORD_180628b_screen_buffer, 320*200,1, file);
		fclose(file);
	}
	else
	{
		Bit8u buffer[320*200];
		FILE* file = fopen("c:/prenos/remc2/testscreen.dat","rb");
		fread(buffer, 320*200, 1, file);
		for (int i = 0; i < 320 * 200; i++)
		{
			if (x_DWORD_180628b_screen_buffer[i] != buffer[i])
			{
				myprintf("screen compare error:\n%X\n", i);
				break;
			}
		}
		fclose(file);
	}

	//compare
}

int debugcounter_20ce30 = 0;
//----- (0002BE30) --------------------------------------------------------
int sub_2BE30_draw_game_frame()//20CE30
{
	char v0; // dl
	void (*v1)(Bit16s, Bit16s, posistruct); // eax
	char v2; // bh
	type_str_0x6E8E* v3x; // esi
	//char v4; // dl
	//Bit8u* v5; // ebx
	signed int v6; // edi
	int16_t v7; // bx
	int v8; // ebx
	//Bit8u* v9; // edx
	//Bit8u* v10; // eax
	//Bit8u* v11; // edi
	//Bit8u* v12; // ebx
	uint8_t v13; // al
	type_str_0x6E8E* v14x; // edi
	//Bit8u* v15; // edx
	//Bit8u* v16; // eax
	//Bit8u* v17; // esi
	//Bit8u* v18; // esi
	//Bit8u* v19; // edx
	//Bit8u* v20; // eax
	//Bit8u* v21; // esi
	//uint16_t v22; // dx
	//int v23; // eax
	//int v24; // esi
	//Bit8u* v25; // esi
	//int v26; // ecx
	//int v27; // eax
	signed int v28; // esi
	int v29; // ebx
	int16_t v30; // di
	signed int v31; // esi
	//Bit8u* v33; // eax
	//uint16_t v34; // cx
	int v35; // [esp+8h] [ebp-18h]
	int16_t v36; // [esp+Ch] [ebp-14h]
	int16_t v37; // [esp+10h] [ebp-10h]
	int16_t v38; // [esp+14h] [ebp-Ch]
	int16_t v39; // [esp+18h] [ebp-8h]
	int16_t v40; // [esp+1Ch] [ebp-4h]
	
	v0 = x_D41A0_BYTEARRAY_4_struct.setting_byte1_22;
	x_DWORD_D41C8 = 0;
	//posistruct tempstruct;//this must fix
	//tempstruct.data = new Bit8u;//this must fix
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.transparency_0x2198)
	{
		if (x_WORD_180660_VGA_type_resolution & 1)
			//v1 = sub_8F8B0_draw_bitmap320;
			v1 = sub_8F8B0_draw_bitmap320;//(0, 0, tempstruct);//this must fix
		else
			//v1 = sub_8F8E8_draw_bitmap640;
			v1 = sub_8F8E8_draw_bitmap640;//(0, 0, tempstruct);//this must fix
			x_DWORD_F01E8 = v1;
	}
	else
	{
		x_DWORD_F01E8 = sub_2DE80_draw_bitmapxx;//(0, 0, 0);
	}
	x_DWORD_F01EC = x_DWORD_F01E8;
	v2 = x_D41A0_BYTEARRAY_4_struct.byteindex_10;
	x_DWORD_F01E8 = sub_2BBB0;//(0, 0, 0);
	if (v2)
		sub_88580();
	v6 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00e_2BDE_11244;
	switch (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221)
	{
	case 0:
	case 3:
	case 5:
	case 9:
	case 0xA:
	case 0xD:
		v3x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
		if (x_BYTE_D41C4 || D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D != x_BYTE_D41C6_old_graphics_mode)
		{
			//v4 = x_D41A0_BYTEARRAY_0[8589];
			x_BYTE_D41C4 = 0;
			x_BYTE_D41C6_old_graphics_mode = D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D;
			if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D < 0x28)
			{
				if (x_WORD_180660_VGA_type_resolution & 1)
					sub_72883_clear_graphics_320(/*(uint8_t)x_BYTE_EB3A8, */(void *)x_DWORD_180628b_screen_buffer, 0xC8u, x_BYTE_EB3A8);
				else
					sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, x_BYTE_EB3A8);
			}
		}
		if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D < 0x28)
		{
			if (x_WORD_180660_VGA_type_resolution & 1)
				sub_72883_clear_graphics_320(/*(uint8_t)x_BYTE_EB3A8, */(void *)x_DWORD_180628b_screen_buffer, 0xC8u, x_BYTE_EB3A8);
			else
				sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, x_BYTE_EB3A8);
		}

		sub_40C50(D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D);
		//v5 = x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc;
		//v6 = *(Bit16u*)((x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc) + 11244);		
		sub_411A0_draw_world(//draw terrain and particles
			x_DWORD_180628b_screen_buffer,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6+1].axis_2BDE_11695.x,
			//*(Bit16s*)((x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc) + 14 * (Bit16u)v6 + 11709),//position of player
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.y,
			//*(Bit16s*)((x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc) + 14 * (Bit16u)v6 + 11711),//position of player
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.aa,
			//*(Bit16s*)((x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc) + 14 * (Bit16u)v6 + 11715),//rotation of player z 
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.z + 128,
			//*(Bit16s*)((x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc) + 14 * (Bit16u)v6 + 11713) + 128,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.xshift,
			//*(Bit16s*)((x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc) + 14 * (Bit16u)v6 + 11717),//rotation of player
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.yshift,
			//*(Bit16s*)((x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc) + 14 * (Bit16u)v6 + 11719),//rotation of player
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.dd);
			//*(Bit16s*)((x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc) + 14 * (Bit16u)v6 + 11721));
		

		if (v3x->dword_0x8 < 0)
		{
			v13 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221;
			if (v13 < 0xAu)
			{
				if (v13 == 9)
				{
					sub_30050_draw_in_game_menu_320();
					break;
				}
			}
			else if (v13 <= 0xAu)
			{
				sub_303D0(/*v6*/);
			}
			else if (v13 == 13)
			{
				sub_30A60_in_game_menu(6, 6);
				break;
			}
			sub_2FD90_draw_pause_menu();
		}
		else
		{
			if (x_DWORD_D4188 && v3x->dword_0xA4_164x->byte_0x14E_334)
			{
				if (x_WORD_180660_VGA_type_resolution & 1)
				{
					v39 = 2;
					v37 = 4;
				}
				else
				{
					v39 = 4;
					v37 = 6;
				}
				v6 = 1;
				v38 = 0;
				v40 = 0;
				v7 = x_DWORD_D418C[11];
				while (v38 < v39)
				{
					v36 = 0;
					v35 = 0;
					while (v36 < v37)
					{
						v8 = 6 * v6;
						//sub_2BB40_draw_bitmap(v35, v40, (Bit8u**)(6 * v6 + x_DWORD_D418C));
						sub_2BB40_draw_bitmap(v35, v40, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v6]);
						v36++;
						v6++;
						v35 += x_DWORD_D418C[v8+4];
						v7 = x_DWORD_D418C[11];
					}
					v38++;
					v40 += v7;
				}
			}			
			if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.minimap_0x218E)
			{
				//v9 = x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc;
				//v6 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00e_2BDE_11244;
				//v6 = *(uint16_t*)(x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc + 11244);
				//v10 = x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc + 14 * v6;
				sub_63600_draw_minimap(//draw minimap
					0,
					0,
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00e_2BDE_11244 + 1].axis_2BDE_11695.x,
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00e_2BDE_11244 + 1].axis_2BDE_11695.y,
					128,
					128,
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00e_2BDE_11244 + 1].rotation__2BDE_11701.aa,
					256,
					x_DWORD_180648_map_resolution2_x - 2 * (x_DWORD_180648_map_resolution2_x / 5u),
					0);
				//v11 = 2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0;
				sub_61880_draw_minimap_entites(//draw entites in minimap
					0,
					0,
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00e_2BDE_11244+1].axis_2BDE_11695.x,
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00e_2BDE_11244+1].axis_2BDE_11695.y,
					128,
					128,
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00e_2BDE_11244+1].rotation__2BDE_11701.aa,
					256);
				//v12 = x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc;
				//v6 = 256;
				sub_644F0_draw_minimap_marks(
					0,
					0,
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00e_2BDE_11244+1].axis_2BDE_11695.x,
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00e_2BDE_11244+1].axis_2BDE_11695.y,
					128,
					128,
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00e_2BDE_11244+1].rotation__2BDE_11701.aa,
					256);
			}
			sub_6FC50(x_BYTE_D419D_fonttype);			
			if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.topbar_0x218F)
			{
				sub_2E260_draw_spell(//draw spell1
					510,
					2,
					x_DWORD_EA3E4[v3x->dword_0xA4_164x->str_611.array_0x333_819x.word[v3x->dword_0xA4_164x->str_611.word_0x451_1105]],
					0);
				sub_2E260_draw_spell(//draw spell2
					574,
					2,
					x_DWORD_EA3E4[v3x->dword_0xA4_164x->str_611.array_0x333_819x.word[v3x->dword_0xA4_164x->str_611.word_0x453_1107]],
					0);
				//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
				sub_2D710_draw_top_menu(v3x);
				//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
			}
			switch (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221)
			{
			case 3:
				sub_2F6B0();
				goto LABEL_41;
			case 9:
				sub_30050_draw_in_game_menu_320();
				break;
			case 0xA:
				sub_303D0(/*v6*/);
				goto LABEL_41;
			case 0xD:
				sub_30A60_in_game_menu(132, 50);
				break;
			default:
			LABEL_41:
				//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
				sub_2FD90_draw_pause_menu();
				//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
				break;
			}
			sub_2CE30_pause_end_level(132, 50);
			if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221 == 5)
				sub_2ECC0_draw_bottom_menu();
		}
		break;
	case 6:
	case 7:
	case 8:
	case 0xB:
	case 0xC:
	case 0xE:
		v14x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_72883_clear_graphics_320(/*(uint8_t)x_BYTE_EB3A8, */(void *)x_DWORD_180628b_screen_buffer, 0xC8u, x_BYTE_EB3A8);
		else
			sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, x_BYTE_EB3A8);
		if (x_WORD_180660_VGA_type_resolution == 1)
		{
			//v15 = x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc;
			//v16 = x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc + 14 * v6;
			sub_63600_draw_minimap(
				0,
				0,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.x,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.y,
				382,
				400,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.aa,
				204,
				x_DWORD_180648_map_resolution2_x - 192,
				1);
			//v17 = x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc;
			sub_61880_draw_minimap_entites(
				0,
				0,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.x,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.y,
				382,
				400,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.aa,
				204);
		}
		else
		{
			//v18 = x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc;
			sub_63600_draw_minimap(
				0,
				0,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.x,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.y,
				382,
				400,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.aa,
				204,
				x_DWORD_180648_map_resolution2_x - 192,
				1);
			//v19 = x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc;
			//v20 = v19 + 14 * *(uint16_t *)(v19 + 11244);
			sub_61880_draw_minimap_entites(0, 0,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.x,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.y,
				382, 400,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.aa,
				204);
		}
		sub_40BF0(384, 0, 256, 400);
		//v21 = x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc;
		//v22 = *(x_WORD *)(v21 + 11244);
		sub_411A0_draw_world(
			x_DWORD_180628b_screen_buffer,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.x,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.y,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.aa,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.z + 128,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.xshift,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.yshift,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.dd);
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_9025C(384, 0, 384, 400, (unsigned short)(*xadataclrd0dat.var28_begin_buffer)[0], 0);
		else
			sub_90374(384, 0, 384, 400, (unsigned short)(*xadataclrd0dat.var28_begin_buffer)[0], 0);
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_9025C(382, 0, 382, 400, (unsigned short)(*xadataclrd0dat.var28_begin_buffer)[0], 0);
		else
			sub_90374(382, 0, 382, 400, (unsigned short)(*xadataclrd0dat.var28_begin_buffer)[0], 0);
		sub_40C50(D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D);
		/*if (x_WORD_180660_VGA_type_resolution == 1)
		{
			v23 = (int)x_D41A0_BYTEARRAY_0;
			v24 = 2124 * D41A0_BYTESTR_0.word_0xc;
		}
		else
		{
			v24 = (int)x_D41A0_BYTEARRAY_0;
			v23 = 2124 * D41A0_BYTESTR_0.word_0xc;
		}
		v25 = v23 + v24;*/
		//v25 = &x_D41A0_BYTEARRAY_0[2124 * D41A0_BYTESTR_0.word_0xc];
		sub_644F0_draw_minimap_marks(
			0,
			0,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.x,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].axis_2BDE_11695.y,
			382,
			400,
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[v6 + 1].rotation__2BDE_11701.aa,
			204);
		switch (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221)
		{
		case 7:
			sub_2D1D0();
			break;
		case 8:
			sub_2FD90_draw_pause_menu();
			sub_2ECC0_draw_bottom_menu();
			break;
		case 0xB:
			sub_30050_draw_in_game_menu_320();
			break;
		case 0xC:
			sub_303D0(/*v14x*/);
			goto LABEL_73;
		case 0xE:
			sub_30A60_in_game_menu(6, 6);
			break;
		default:
		LABEL_73:
			sub_2FD90_draw_pause_menu();
			break;
		}
		sub_2CE30_pause_end_level(6, 6);
		if (x_D41A0_BYTEARRAY_4_struct.byteindex_38400)
			sub_2E260_draw_spell(
				510,
				2,
				x_DWORD_EA3E4[v14x->dword_0xA4_164x->str_611.array_0x333_819x.word[v14x->dword_0xA4_164x->str_611.word_0x451_1105]],
				0);
		if (x_D41A0_BYTEARRAY_4_struct.byteindex_38401)
			sub_2E260_draw_spell(
				574,
				2,
				x_DWORD_EA3E4[v14x->dword_0xA4_164x->str_611.array_0x333_819x.word[v14x->dword_0xA4_164x->str_611.word_0x453_1107]],
				0);
		break;
	default:
		break;
	}
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	if (D41A0_BYTESTR_0.byte_0x36E04)
		sub_30630();
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	sub_6FC50(x_BYTE_D419D_fonttype);
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 4))
		return _wcpp_1_unwind_leave__62();
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_204 == 3)
	{
		//v26 = x_D41A0_BYTEARRAY_4_struct.byteindex_210d;
		if (x_D41A0_BYTEARRAY_4_struct.byteindex_210d <= 0)
			x_D41A0_BYTEARRAY_4_struct.byteindex_204 = 2;
		else
			x_D41A0_BYTEARRAY_4_struct.byteindex_210d--;// = v26 - 1;
	}
	//v27 = (int)x_D41A0_BYTEARRAY_4;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_204 == 2)
	{
		x_D41A0_BYTEARRAY_4_struct.byteindex_204 = 1;
		x_D41A0_BYTEARRAY_4_struct.byteindex_214w = 0;
		x_D41A0_BYTEARRAY_4_struct.byteindex_210d = 50;
	}
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_204 != 1)
		return _wcpp_1_unwind_leave__62();
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_210d <= 0)
	{
		while (1)
		{
			//v33 = x_D41A0_BYTEARRAY_4;
			if (*off_DB558[x_D41A0_BYTEARRAY_4_struct.byteindex_214w] == 33)
				break;
			x_D41A0_BYTEARRAY_4_struct.byteindex_214w++;
		}
		//v34 = x_D41A0_BYTEARRAY_4_struct.byteindex_214 + 1;
		x_D41A0_BYTEARRAY_4_struct.byteindex_214w++;
		if (*off_DB558[x_D41A0_BYTEARRAY_4_struct.byteindex_214w] == 35)
		{
			x_D41A0_BYTEARRAY_4_struct.byteindex_204 = 3;
			x_D41A0_BYTEARRAY_4_struct.byteindex_210d = 200;
			return _wcpp_1_unwind_leave__62();
		}
		x_D41A0_BYTEARRAY_4_struct.byteindex_210d = 50;
		return _wcpp_1_unwind_leave__62();
	}
	v28 = 380;
	v29 = 0;
	while (*off_DB558[v29 + x_D41A0_BYTEARRAY_4_struct.byteindex_214w] != 33)
	{
		v29++;
		v28 -= sub_6FC30_get34_height();
	}
	v30 = 0;
	v31 = 8;
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	while (v29 > 0)
	{
		if (v30)
			sub_2BC10_draw_text(off_DB558[v30 + x_D41A0_BYTEARRAY_4_struct.byteindex_214w], 8, v31, (*xadataclrd0dat.var28_begin_buffer)[0]);
		else
			sub_2BC10_draw_text(off_DB558[x_D41A0_BYTEARRAY_4_struct.byteindex_214w], 8, v31, (*xadataclrd0dat.var28_begin_buffer)[0xfff]);
		v29--;
		v30++;
		v31 += sub_6FC30_get34_height();
	}
	x_D41A0_BYTEARRAY_4_struct.byteindex_210d--;
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	return _wcpp_1_unwind_leave__62();
}

//----- (0002CA60) --------------------------------------------------------
void sub_2CA60(int16_t a1, int16_t a2, int16_t a3, int16_t a4)//20da60
{
	//int result; // eax

	x_DWORD_EA3D0 = a1;
	x_DWORD_EA3CC = a2;
	x_DWORD_EA3C4 = a3;
	//result = a4;
	x_DWORD_EA3C0 = a4;
	//return result;
}

//----- (0002CA90) --------------------------------------------------------
int sub_2CA90(int16_t a1)//20da90
{
	int v1; // eax
	int result; // eax
	int v3; // esi
	int v4; // ecx

	v1 = 40 - a1;
	x_DWORD_EA3D0 = 8 * v1;
	x_DWORD_EA3C4 = 16 * a1;
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		result = 5 * v1 / 2;
		v3 = 10 * a1;
		v4 = 2 * result;
	}
	else
	{
		result = 12 * v1 / 2;
		v3 = 12 * a1;
		v4 = result;
	}
	x_DWORD_EA3C0 = v3;
	x_DWORD_EA3CC = v4;
	return result;
}

//----- (0002CB30) --------------------------------------------------------
void sub_2CB30(type_str_0x6E8E* a1x, int16_t a2, int a3, int16_t a4)//20db30
{
	//char *v4; // edi
	char *v5; // esi
	//char v6; // al
	//char v7; // al
	int v8; // esi
	int v9x; // eax
	int v9y; // eax
	int16_t v10; // bx
	int16_t v11; // bx
	int v12; // edi
	int v13; // esi
	/*uint8_t v14; // ST10_1
	uint8_t v15; // ST10_1
	uint8_t v16; // ST10_1
	uint8_t v17; // ST10_1
	uint8_t v18; // ST10_1
	uint8_t v19; // ST10_1*/
	//char *v21; // [esp-4h] [ebp-5Ch]
	//uint8_t v22; // [esp-4h] [ebp-5Ch]
	//uint8_t v23; // [esp-4h] [ebp-5Ch]
	char v24[32]; // [esp+0h] [ebp-58h]
	int v25; // [esp+20h] [ebp-38h]
	int v26; // [esp+24h] [ebp-34h]
	int v27; // [esp+28h] [ebp-30h]
	int v28; // [esp+2Ch] [ebp-2Ch]
	int v29; // [esp+30h] [ebp-28h]
	int v30; // [esp+34h] [ebp-24h]
	int v31; // [esp+38h] [ebp-20h]
	int v32; // [esp+3Ch] [ebp-1Ch]
	uint8_t v33; // [esp+40h] [ebp-18h]
	char v34; // [esp+44h] [ebp-14h]
	char v35; // [esp+48h] [ebp-10h]
	char v36; // [esp+4Ch] [ebp-Ch]
	char v37; // [esp+50h] [ebp-8h]
	uint8_t v38; // [esp+54h] [ebp-4h]
	int v39; // [esp+74h] [ebp+1Ch]

	// fix if begin
	/*v14 = 0;
	v15 = 0;
	v16 = 0;
	v17 = 0;
	v18 = 0;
	v19 = 0;
	v22 = 0;
	v23 = 0;*/
	// end

	v31 = x_DWORD_EA3C4 + x_DWORD_EA3D0 - 4;
	v29 = x_DWORD_EA3C0 + x_DWORD_EA3CC - 22;
	v25 = a1x->dword_0xA4_164x->word_0x38_56;
	//v4 = v24;
	//D41A0_BYTESTR_0.array_0x2BDE[v25].array_0x39f_2BFA_12157
	v5 = D41A0_BYTESTR_0.array_0x2BDE[v25].array_0x39f_2BFA_12157;//wizard name
	//v21 = v24;
	strcpy(v24,v5);
	/*do
	{
		v6 = *v5;
		*v4 = *v5;
		if (!v6)
			break;
		v7 = v5[1];
		v5 += 2;
		v4[1] = v7;
		v4 += 2;
	} while (v7);*/
	v36 = x_BYTE_E88E0x[3 * sub_61790(v25)];//c
	v35 = (*xadataclrd0dat.var28_begin_buffer)[0];//10 //v19
	v34 = x_BYTE_E88E0x[3 * sub_61790(v25)];	//14 //v18		
	v8 = 5 * D41A0_BYTESTR_0.str_2FECE.byte_level_type;
	v33 = x_WORD_D93C0_bldgprmbuffer[2+0x130 + v8];//18 v14
	v38 = x_WORD_D93C0_bldgprmbuffer[2+0x131 + v8];//4 v15
	v37 = x_WORD_D93C0_bldgprmbuffer[2+0x12e + v8];//?v22
	//v9 = a4 >> 1;
	v10 = (a4 >> 1) + a2;
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		v10 *= 2;
		a3 *= 2;
	}
	//LOWORD(v9) = x_DWORD_EA3CC;
	v11 = x_DWORD_EA3D0 + v10;
	v12 = x_DWORD_EA3CC + a3 - 20;
	v39 = x_DWORD_EA3CC + a3 - 20;
	if (v11 >= x_DWORD_EA3D0)
	{
		//LOWORD(v9) = v12;
		if ((int16_t)v12 >= x_DWORD_EA3CC && v11 < v31 && (int16_t)v12 < v29)
		{
			v9x = strlen(v24);
			v13 = 8 * v9x + 4;
			if (v11 + v13 > v31)
			{
				v13 = v31 - v11;
				v9x=((v31 - v11-4) - (my_sign32(v31 - v11 - 4) << 3) + my_sign32(v31 - v11 - 4)) >> 3;
				//v9 = (v31 - v11 - 4 - (__CFSHL__((v31 - v11 - 4) >> 31, 3) + 8 * ((v31 - v11 - 4) >> 31))) >> 3;
			}
			if (v9x > 0)
			{
				v24[v9x] = 0;
				v32 = v13 + 2;
				v26 = (int16_t)(v13 + 2);
				v30 = v11;
				sub_2BC80(v11, v39, v13 + 2, 18, v37/*v22*/);//8
				v27 = v33;//30// v16
				sub_2BC80(v30, v39, v26, 2, v33/*v14*/);//18
				v28 = v38;//2c//v17
				sub_2BC80(v30, v39 + 16, v26, 2, /*v15*/v38);//4
				sub_2BC80(v30, v39, 2, 16, v33/*v16*/);//30,tj.18
				sub_2BC80(v11 + v32 - 2, v39, 2, 18, v38/*v17*/);//2c tj. 4
				sub_2BC10_draw_text(v24, v11 + 4, v39, v34/*v18*/);//14
				sub_2BC80(v11 + 2, v39 + 14, v13 - 2, 2, v35/*v19*/);//10
				//LOWORD(v9) = (x_WORD)a1;
				if (a1x->dword_0x4)
				{
					v9y = a1x->dword_0x8 * (v13 - 2) / a1x->dword_0x4;
					if (v30 + 2 + v9y > v31 - 2)
						v9y = v31 - 2 - (v30 + 2);
					if (v9y > 0)
						sub_2BC80(v11 + 2, v39 + 14, v9y, 2, v36/*v23*/);
				}
			}
		}
	}
	//return v9;
}

//----- (0002CE30) --------------------------------------------------------
void sub_2CE30_pause_end_level(int a1, int a2)//20de30
{
	int v2; // esi
	//int result; // eax
	//unsigned int v4; // edi
	Bit16s v4x;
	uint8_t v5; // bl
	int v6; // eax
	//Bit8u* v7; // ebx
	int v7y;
	uint16_t v8; // ax
	//int16_t v9; // ax
	int v10; // eax
	//int16_t v11; // ax
	int v12; // eax
	//int16_t v13; // ax
	int64_t v14; // rax
	uint8_t v15; // al
	int v16; // eax
	//int16_t v17; // ax
	int64_t v18; // rax
	int v19; // eax
	//char v20; // [esp+0h] [ebp-Eh]
	//Bit8u* v21; // [esp+80h] [ebp+72h]
	int v22; // [esp+84h] [ebp+76h]

	v2 = a2;
	sub_6FC50(x_BYTE_D419D_fonttype);
	//result = (int)x_D41A0_BYTEARRAY_4;
	v4x = a1;
	v5 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
	if (!x_D41A0_BYTEARRAY_4_struct.byteindex_205 && !x_D41A0_BYTEARRAY_4_struct.byte_38546)
	{
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
		{
			sub_2BC10_draw_text(x_DWORD_E9C4C_langindexbuffer[425], a1, a2, (*xadataclrd0dat.var28_begin_buffer)[0xf0]);//Paused!
			v4x = 8 * (strlen((const char *)x_DWORD_E9C4C_langindexbuffer[425]) + 2) + a1;//Paused!
		}
		
		if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x20) && D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[0])
		{
			sprintf(printbuffer, "%s. %s.", x_DWORD_E9C4C_langindexbuffer[378], x_DWORD_E9C4C_langindexbuffer[379]);//Tasks completed,Fly to the exit point.
			sub_2BC10_draw_text(printbuffer, v4x, a2, v5);
			v4x = a1;
			LOWORD(v6) = sub_6FC30_get34_height();
			v2 = v6 + a2;
		}
		v22 = 0;
		//v7 = x_D41A0_BYTEARRAY_0 + 11230;
		v7y = 0;
		while (1)
		{
			//result = (int)x_D41A0_BYTEARRAY_0;
			if (v22 >= D41A0_BYTESTR_0.word_0xe)
				break;
			v8 = D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04f_2C2D_11309 - 1;
			if (v8 <= 4u)
			{
				//v21 = v7x + x_D41A0_BYTEARRAY_0 + 11230 + 28;
				switch (v8)
				{
				case 0u:
					//v9 = *(x_WORD *)(v7x + x_D41A0_BYTEARRAY_0 + 11230 + 77);
					D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04d_2C2B_11307--;// = v9 - 1;
					if (D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04d_2C2B_11307+1 <= 0)
						goto LABEL_24;
					sprintf(printbuffer, "%s %s", D41A0_BYTESTR_0.array_0x2BDE[v7y].array_0x39f_2BFA_12157, D41A0_BYTESTR_0.array_0x2BDE[v7y].array_0x01c_2BFA_11258);//wizard name
					sub_2BC10_draw_text(printbuffer, v4x, v2, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
					v4x = a1;
					LOWORD(v10) = sub_6FC30_get34_height();
					v2 += v10;
					break;
				case 1u:
					//v13 = *(x_WORD *)(v7x + x_D41A0_BYTEARRAY_0 + 11230 + 77);
					D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04d_2C2B_11307--;
					if (D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04d_2C2B_11307+1 <= 0)
						goto LABEL_24;
					sprintf(printbuffer, "[%s] %s", D41A0_BYTESTR_0.array_0x2BDE[v7y].array_0x39f_2BFA_12157, D41A0_BYTESTR_0.array_0x2BDE[v7y].array_0x01c_2BFA_11258);//wizard name
					if (D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04d_2C2B_11307 <= 100)
					{
						v15 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
					}
					else
					{
						v14 = 4080 * x_D41A0_BYTEARRAY_4_struct.byteindex_121[2];
						v15 = (*xadataclrd0dat.var28_begin_buffer)[256 * ((signed int)(v14 - (__CFSHL__(HIDWORD(v14), 8) + (HIDWORD(v14) << 8))) >> 8)];
					}
					sub_2BC10_draw_text(printbuffer, v4x, v2, v15);
					LOWORD(v16) = sub_6FC30_get34_height();
					v4x = a1;
					v2 += v16;
					break;
				case 2u:
				case 4u:
					//v11 = *(x_WORD *)(v7x + x_D41A0_BYTEARRAY_0 + 11230 + 77);
					D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04d_2C2B_11307--;
					if (D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04d_2C2B_11307+1 <= 0)
						goto LABEL_24;
					if (D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04f_2C2D_11309 == 3 || v22 == D41A0_BYTESTR_0.word_0xc)
					{
						sprintf(printbuffer, "%s", D41A0_BYTESTR_0.array_0x2BDE[v7y].array_0x01c_2BFA_11258);
						sub_2BC10_draw_text(printbuffer, v4x, v2, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
						v4x = a1;
						LOWORD(v12) = sub_6FC30_get34_height();
						v2 += v12;
					}
					break;
				case 3u:
					//v17 = *(x_WORD *)(v7x + x_D41A0_BYTEARRAY_0 + 11230 + 77);
					D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04d_2C2B_11307--;
					if (D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04d_2C2B_11307+1 <= 0)
					{
					LABEL_24:
						D41A0_BYTESTR_0.array_0x2BDE[v7y].word_0x04f_2C2D_11309 = 0;
					}
					else
					{
						sprintf(printbuffer, "[%s] %s", D41A0_BYTESTR_0.array_0x2BDE[v7y].array_0x39f_2BFA_12157, D41A0_BYTESTR_0.array_0x2BDE[v7y].array_0x01c_2BFA_11258);//wizard name
						v18 = 4080 * x_D41A0_BYTEARRAY_4_struct.byteindex_121[2];
						sub_2BC10_draw_text(printbuffer, v4x, v2,(*xadataclrd0dat.var28_begin_buffer)[16 * ((signed int)(v18 - (__CFSHL__(HIDWORD(v18), 8) + (HIDWORD(v18) << 8))) >> 8)]);
						v4x = a1;
						LOWORD(v19) = sub_6FC30_get34_height();
						v2 += v19;
					}
					break;
				}
			}
			//v7x += 2124;
			v7y++;
			v22++;
		}
	}
	//return result;
}

//----- (0002D190) --------------------------------------------------------
void sub_2D190(int16_t a1, int16_t a2, int a3, int16_t a4, int a5, uint8_t a6)//20e190
{
	int result; // eax

	result = a5;
	if (a5 >= a3)
		result = a3;
	if (result >= 2)
		sub_2BC80(a1, a2, result, a4, a6);
	//return result;
}

//----- (0002D1D0) --------------------------------------------------------
int sub_2D1D0()//20e1d0
{
	signed int v0; // esi
	int v1; // eax
	//Bit8u* v2; // edx
	int v2x;
	int v3; // ebx
	signed int v4; // edx
	int v5; // ebx
	char v6; // cl
	int v7; // edi
	uint8_t v8; // si
	uint8_t v9; // ST10_1
	int v10; // esi
	int v11; // eax
	int v12; // edi
	int v13; // eax
	int v14; // esi
	signed int v15; // eax
	uint16_t v16; // cx
	signed int j; // esi
	int v18; // eax
	int v19; // eax
	int result; // eax
	//char v21; // [esp+0h] [ebp-124h]
	int v22; // [esp+100h] [ebp-24h]
	type_str_0x6E8E* v23x; // [esp+104h] [ebp-20h]
	//Bit8u* i; // [esp+108h] [ebp-1Ch]
	int ix;
	int v25; // [esp+10Ch] [ebp-18h]
	int v26; // [esp+110h] [ebp-14h]
	int v27; // [esp+114h] [ebp-10h]
	int v28; // [esp+118h] [ebp-Ch]
	uint8_t v29; // [esp+11Ch] [ebp-8h]
	uint8_t v30; // [esp+120h] [ebp-4h]

	v0 = 0;
	sub_6FC50(x_BYTE_D419D_fonttype);
	v1 = 0;
	//v2 = x_D41A0_BYTEARRAY_0 + 11230;	
	v2x = 0;
	while (v0 < D41A0_BYTESTR_0.word_0xe)
	{
		if (D41A0_BYTESTR_0.array_0x2BDE[v2x].byte_0x006_2BE4_11236)
			v1++;
		v0++;
		//v2 += 2124;
		v2x++;
	}
	v3 = v1 * (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[85].height;
	v28 = (640 - (v1 * (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[86].width + (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[85].width)) / 2;
	if (x_WORD_180660_VGA_type_resolution == 1)
		v4 = 400;
	else
		v4 = 480;
	v5 = (v4 - v3) / 2;
	v25 = 0;
	//i=x_D41A0_BYTEARRAY_0 + 11230
	for (ix = 0; ; ix ++)
	{
		result = D41A0_BYTESTR_0.word_0xe;
		if (result <= v25)
			break;
		v6 = D41A0_BYTESTR_0.array_0x2BDE[ix].byte_0x006_2BE4_11236;
		v23x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[ix].word_0x00a_2BE4_11240];
		if (v6 == 1)
		{
			v29 = x_BYTE_E88E0x[1+3 * sub_61790(v25)];
			v30 = x_BYTE_E88E0x[3 * sub_61790(v25)];
			v7 = v28;
			sub_2BB40_draw_bitmap(v28, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[85]);
			sub_2BC80(
			  v7 + 4,
			  v5 + 4,
				(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[85].width - 8,
				(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[85].height - 8,
			  v30);
			v8 = v29;
			v22 = (int16_t)(v7 + 8);
			sub_2BC10_draw_text(D41A0_BYTESTR_0.array_0x2BDE[ix].array_0x39f_2BFA_12157, v7 + 8, v5 + 6, v29);//wizard name
			sprintf(printbuffer, "%d", v23x->dword_0x8C_140);
			v9 = v8;
			v10 = v25;
			sub_2BC10_draw_text(printbuffer, v22, v5 + 20, v9);
			if (!v10 && x_D41A0_BYTEARRAY_4_struct.byteindex_10)
			{
				str_unk_1804B0ar.word_0x96 = v7 + 20;
				str_unk_1804B0ar.word_0x98 = v5 + 30;
			}
			//HIWORD(v11) = HIWORD(**filearray_2aa18c[6]);
			v11 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[85].width;
			v12 = v11 + v7;
			if (x_D41A0_BYTEARRAY_4_struct.byteindex_10 && D41A0_BYTESTR_0.word_0xe > 1u && !str_unk_1804B0ar.byte_0xa8)
			{
				str_unk_1804B0ar.dword_0x82 = 9377 * str_unk_1804B0ar.dword_0x82 + 9439;
				v13 = x_D41A0_BYTEARRAY_4_struct.byteindex_26 & 0xFF;
				str_unk_1804B0ar.byte_0xa8 = str_unk_1804B0ar.dword_0x82 % D41A0_BYTESTR_0.word_0xe + 1;
				v14 = v13 + str_unk_1804B0ar.dword_0x82;
				v15 = 1;
				str_unk_1804B0ar.dword_0x82 = v14;
				while (v15 < 8 && !D41A0_BYTESTR_0.array_0x2BDE[v15].byte_0x006_2BE4_11236)
				{
					v16 = D41A0_BYTESTR_0.word_0xe;
					if ((uint8_t)++str_unk_1804B0ar.byte_0xa8 >= (signed int)v16)
						str_unk_1804B0ar.byte_0xa8 = 1;
					v15++;
				}
				if (!D41A0_BYTESTR_0.array_0x2BDE[str_unk_1804B0ar.byte_0xa8].byte_0x006_2BE4_11236)
					str_unk_1804B0ar.byte_0xa8 = 0;
			}
			for (j = 0; j < 8; j++)
			{
				if (D41A0_BYTESTR_0.array_0x2BDE[j].byte_0x006_2BE4_11236 == 1)
				{
					v27 = v12 + 4;
					v26 = v5 + 4;
					if (j == v25)
					{
						sub_2BB40_draw_bitmap(v12, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[86]);
						sub_2BC80(
						  v27,
						  v26,
							(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[86].width - 8,
							(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[86].height - 8,
						  (*xadataclrd0dat.var28_begin_buffer)[0]);
					}
					else
					{
						v29 = x_BYTE_E88E0x[1 + 3 * sub_61790(j)];
						v30 = x_BYTE_E88E0x[3 * sub_61790(j)];
						sub_2BB40_draw_bitmap(v12, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[86]);
						sub_2BC80(
						  v27,
						  v26,
							(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[86].width - 8,
							(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[86].height - 8,
						  v30);
						sprintf(printbuffer, "%03d", v23x->dword_0xA4_164x->word_0x26_38[j]);
						sub_2BC10_draw_text(printbuffer, v12 + 8, v5 + 10, v29);
						if (x_D41A0_BYTEARRAY_4_struct.byteindex_10 && str_unk_1804B0ar.byte_0xa8 && !v25 && j == (uint8_t)str_unk_1804B0ar.byte_0xa8)
						{
							str_unk_1804B0ar.word_0x9a = v12 + 20;
							str_unk_1804B0ar.word_0x9c = v5 + 20;
						}
					}
					//HIWORD(v18) = HIWORD(**filearray_2aa18c[6]);
					v18 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[86].width;
					v12 += v18;
				}
			}
			//HIWORD(v19) = HIWORD(**filearray_2aa18c[6]);
			v19 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[86].height;
			v5 += v19;
		}
		v25++;
	}
	return result;
}

//----- (0002D710) --------------------------------------------------------
void sub_2D710_draw_top_menu(type_str_0x6E8E* a1x)//20e710
{
	int16_t v1; // bx
	type_str_0x6E8E* v2x; // ecx
	int v3; // ecx
	//int v4; // edx
	int v5; // eax
	//int64_t v6; // rtt
	int16_t v8; // bx
	type_str_0x6E8E* v9x; // eax
	int16_t v12; // bx
	int16_t v14; // bx
	uint8_t v16; // [esp-4h] [ebp-4Ch]
	int v17; // [esp+0h] [ebp-48h]
	int v18; // [esp+8h] [ebp-40h]
	//type_str_0x6E8E* v19x; // [esp+Ch] [ebp-3Ch]
	//int v20; // [esp+10h] [ebp-38h]
	int16_t v21; // [esp+1Ch] [ebp-2Ch]
	int16_t v22; // [esp+24h] [ebp-24h]
	type_str_0x6E8E* v23x; // [esp+28h] [ebp-20h]
	int16_t v24; // [esp+2Ch] [ebp-1Ch]
	int16_t v25; // [esp+30h] [ebp-18h]
	uint8_t v26; // [esp+34h] [ebp-14h]
	uint8_t v27; // [esp+3Ch] [ebp-Ch]
	uint8_t v28; // [esp+40h] [ebp-8h]

	v28 = x_BYTE_E88E0x[3 * sub_61790(a1x->dword_0xA4_164x->word_0x38_56)];
	v27 = x_BYTE_E88E0x[1 + 3 * sub_61790(a1x->dword_0xA4_164x->word_0x38_56)];
	v26 = x_BYTE_E88E0x[3 * sub_61790(a1x->dword_0xA4_164x->word_0x38_56)+x_D41A0_BYTEARRAY_4_struct.byteindex_121[2]];
	//x_DWORD_F01E8(2, 2, **filearray_2aa18c[6] + 240);
	x_DWORD_F01E8(2, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[40]);
	//v1 = *(uint8_t *)(*filearray_2aa18c[6] + 244) + 2;
	v1 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[40].width+2;
	//adress 20e7db
	v18 = *(Bit32u*)&x_D41A0_BYTEARRAY_4_struct.byteindex_242ar[4];
	//v20 = a1x->dword_0xA4_164;
	v2x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58];
	v23x = v2x;
	if (v2x > x_DWORD_EA3E4[0] && v2x->dword_0x10_16)
	{
		if (a1x->dword_0xA4_164x->byte_0x195_405 > 0 && x_D41A0_BYTEARRAY_4_struct.byteindex_121[1])
		{
			//x_DWORD_F01E8(v1, 2, **filearray_2aa18c[6] + 330);
			x_DWORD_F01E8(v1, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[55]);
			a1x->dword_0xA4_164x->byte_0x195_405--;
		}
		else
		{
		  //x_DWORD_F01E8(v1, 2, **filearray_2aa18c[6] + 246);
			x_DWORD_F01E8(v1, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[41]);
		}
		//sub_2BB40_draw_bitmap(v1 + 2, 2, (Bit8u**)(6 * (v23[4] + 43) + **filearray_2aa18c[6]));
		sub_2BB40_draw_bitmap(v1 + 2, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v23x->dword_0x10_16 + 43]);
		sub_2BB40_draw_bitmap(v1 + 38, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[42]);
		v22 = v1 + 58;
		sub_2D190(v1 + 58, 10, 64, 10, (v23x->dword_0x8 << 6) / v23x->dword_0x4, 0x7Bu);
		v17 = (v23x->dword_0x90_144 + a1x->dword_0xA4_164x->dword_0x13C_316) << 6;
		if (v23x->dword_0x90_144 + a1x->dword_0xA4_164x->dword_0x13C_316 == v23x->dword_0x8C_140)
		{
			if (x_D41A0_BYTEARRAY_4_struct.byteindex_121[2] == 1)
			{
				v3 = v18;
				//v4 = v23x->dword_0x8C_140 << 6;
				v16 = v27;
				v5 = v23x->dword_0x8C_140 << 6;
			}
			else
			{
				v16 = v28;
				v5 = (v23x->dword_0x90_144 + a1x->dword_0xA4_164x->dword_0x13C_316) << 6;
				//v4 = (v23x->dword_0x90_144 + a1x->dword_0xA4_164x->dword_0x13C_316) << 6;
				v3 = v18;
			}
		}
		else
		{
			sub_2D190(v22, 28, 64, 10, (v23x->dword_0x8C_140 << 6) / v18, v27);
			v16 = v28;
			v5 = v17;
			//v4 = v17;
			v3 = v18;
		}
		//LODWORD(v6) = v5;
		//HIDWORD(v6) = v4 >> 31;
		sub_2D190(v22, 28, 64, 10, /*v6*/v5 / v3, v16);		
		if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10) && D41A0_BYTESTR_0.str_2FECE.word_0x2FED5)
		{
			sub_2BC80(v22 + (D41A0_BYTESTR_0.str_2FECE.word_0x2FED5 << 6) / 100, 26, 2, 2, v26);
			sub_2BC80(v22 + (D41A0_BYTESTR_0.str_2FECE.word_0x2FED5 << 6) / 100, 38, 2, 2, v26);
		}
	}
	else
	{
	  x_DWORD_F01E8(v1, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[54]);
	}
	//v8 = *(uint8_t *)(**filearray_2aa18c[6] + 250) + v1;
	//adress 20eaa0
	v8 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[41].width + v1;
	if ( x_DWORD_EA3E4[0] >= v23x )
	{
	  //20eca6
	  //VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	  x_DWORD_F01E8(v8, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[54]);
	  //VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	}
	else
	{
		if (a1x->dword_0xA4_164x->byte_0x197_407 > 0 && x_D41A0_BYTEARRAY_4_struct.byteindex_121[1])
		{
			x_DWORD_F01E8(v8, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[55]);
			a1x->dword_0xA4_164x->byte_0x197_407--;
		}
		else
		{
		  x_DWORD_F01E8(v8, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[41]);
		}
		switch (v23x->dword_0x10_16)
		{
		case 1:
		case 2:
		case 3:
			v25 = 1;
			break;
		case 4:
		case 5:
			v25 = 2;
			break;
		case 6:
		case 7:
			v25 = 3;
			break;
		default:
			v25 = 0;
			break;
		}
		sub_2BB40_draw_bitmap(v8 + 2, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v25 + 50]);
		v24 = 0;
		sub_2BB40_draw_bitmap(v8 + 38, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[42]);
		if (v25 > 0)
		{
			do
			{
				v21 = v8 + 58;
				v9x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->array_0x3C_60[v24]];
				//v19x = v9x;
				if (v9x > x_DWORD_EA3E4[0])
				{
					if (v9x->dword_0x8 >= 0)
						sub_2D190(v21, 2 * v24 + 12, 64, 2, (v9x->dword_0x8 << 6) / v9x->dword_0x4, 0x7Bu);
					sub_2D190(v21, 2 * v24 + 30, 64, 2, (v9x->dword_0x90_144 << 6) / v9x->dword_0x8C_140, v28);
				}
				v24++;
			} while (v24 < v25);
		}
	}
	v12 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[41].width + v8;
	if (a1x->dword_0xA4_164x->byte_0x196_406 > 0 && x_D41A0_BYTEARRAY_4_struct.byteindex_121[1])
	{
	  x_DWORD_F01E8(v12, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[55]);
	  a1x->dword_0xA4_164x->byte_0x196_406--;
	}
	else
	{//adress 20ed35
	  x_DWORD_F01E8(v12, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[41]);
	}
	if ( (a1x->struct_byte_0xc_12_15.byte[0] & 0x20 || a1x->dword_0xA4_164x->word_0x159_345) && x_D41A0_BYTEARRAY_4_struct.byteindex_121[2])
	{
	  sub_2DE80_draw_bitmapxx(v12 + 2, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[43]);
	  sub_2DE80_draw_bitmapxx(v12 + 38, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[42]);
	}
	else
	{
	  sub_2BB40_draw_bitmap(v12 + 2, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[43]);
	  sub_2BB40_draw_bitmap(v12 + 38, 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[42]);
	}
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	v14 = v12 + 58;
	sub_2D190(v14, 10, 64, 10, (a1x->dword_0x8 << 6) / a1x->dword_0x4, 0x7Bu);
	//adress 20ee1a
	//1b8 1c 40 0a 03 aa
	//0xfa00/4c79=3
	//v18=0x4c79
	sub_2D190(v14, 28, 64, 10, (a1x->dword_0x8C_140 << 6) / v18, v27);
	sub_2D190(v14, 28, 64, 10, (a1x->dword_0x90_144 << 6) / v18, v28);
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
}

//----- (0002DE80) --------------------------------------------------------
//void(*v1)(Bit16s, Bit16s, posistruct); // eax
int debugcounter_sub_2DE80 = 0;
void sub_2DE80_draw_bitmapxx(int16_t a1, int16_t a2, posistruct a3)//20ee80
{
	int16_t v3; // bx
	int v4; // eax
	Bit8u* v5; // edi
	Bit8u* v6; // edx
	Bit8u* v7; // esi
	int v8; // ecx
	int16_t v9; // bx
	Bit8u* v10; // edi
	Bit8u* v11; // edx
	Bit8u* v12; // esi
	int v13; // ecx
	int v15; // [esp+0h] [ebp-Ch]
	int v16; // [esp+0h] [ebp-Ch]
	Bit8u* v17; // [esp+4h] [ebp-8h]
	Bit8u* i; // [esp+8h] [ebp-4h]

	// FIXME: crashes at accessing posistruct a3: LOBYTE(v4) = *v6++;
	std::cerr << "FIXME: crash at accessing posistruct" << std::endl;
	return;

	if (x_WORD_180660_VGA_type_resolution == 1)
	{
		v3 = a3.height / 2;
		v4 = a2 / 2 * x_DWORD_18062C_resolution_x + a1 / 2;
		v5 = (v4 + x_DWORD_180628b_screen_buffer);
		v6 = a3.data;
		for (i = v4 + x_DWORD_180628b_screen_buffer; v3; v6 += v15)
		{
			while (1)
			{
				while (1)
				{
					LOBYTE(v4) = *v6++;
					if ((x_BYTE)v4)
						break;
					v3--;
					i += x_DWORD_18062C_resolution_x;
					v5 = i;
					if (!v3)
						return;
				}
				if ((v4 & 0x80u) == 0)
					break;
				v5 -= (char)v4;
				if (!v3)
					return;
			}
			v4 = (char)v4;//20ef1f
			v7 = v6;
			v8 = v4;
			v15 = (char)v4;
			HIWORD(v4) = 0;
			do
			{
				debugcounter_sub_2DE80++;
				if (0x30f == debugcounter_sub_2DE80)
				{
					debugcounter_sub_2DE80++;
					debugcounter_sub_2DE80--;
				}

				LOBYTE(v4) = *v7++;
				HIBYTE(v4) = *v5;
				LOBYTE(v4) = x_BYTE_F6EE0_tablesx[0x4000+v4];
				*v5++ = v4;
				v8--;
			} while (v8);
		}
	}
	else
	{
		v4 = a1 + x_DWORD_18062C_resolution_x * a2;
		v9 = a3.height;
		v10 = (v4 + x_DWORD_180628b_screen_buffer);
		v11 = a3.data;
		v17 = v4 + x_DWORD_180628b_screen_buffer;
		if (a3.height)
		{
			do
			{
				while (1)
				{
					while (1)
					{
						LOBYTE(v4) = *v11++;
						if ((x_BYTE)v4)
							break;
						v9--;
						v17 += x_DWORD_18062C_resolution_x;
						v10 = v17;
						if (!v9)
							return;
					}
					if ((v4 & 0x80u) == 0)
						break;
					v10 -= (char)v4;
					if (!v9)
						return;
				}
				v4 = (char)v4;
				v12 = v11;
				v13 = v4;
				v16 = (char)v4;
				HIWORD(v4) = 0;
				do
				{
					LOBYTE(v4) = *v12++;
					HIBYTE(v4) = *v10;
					LOBYTE(v4) = x_BYTE_F6EE0_tablesx[0x4000 + v4];
					*v10++ = v4;
					v13--;
				} while (v13);
				v11 += v16;
			} while (v9);
		}
	}
	//return v4;
}

//----- (0002DFD0) --------------------------------------------------------
char sub_2DFD0(int16_t a1, int16_t a2, posistruct a3, uint8_t a4)//20efd0
{
	int v4; // eax
	x_BYTE *v5; // edi
	Bit8u* v6; // edx
	int v7; // ebx
	int v8; // ecx
	x_BYTE *v9; // edi
	Bit8u* v10; // edx
	int v11; // ebx
	int v12; // ecx
	int v14; // [esp+0h] [ebp-14h]
	int v15; // [esp+0h] [ebp-14h]
	int i; // [esp+4h] [ebp-10h]
	int v17; // [esp+8h] [ebp-Ch]
	int16_t v18; // [esp+Ch] [ebp-8h]
	int16_t v19; // [esp+10h] [ebp-4h]

	if (x_WORD_180660_VGA_type_resolution == 1)
	{
		v19 = a3.height / 2;
		v4 = a2 / 2 * x_DWORD_18062C_resolution_x + a1 / 2;
		// FIXME: types
		// v5 = (x_BYTE *)(v4 + (int)x_DWORD_180628b_screen_buffer);
		v6 = a3.data;
		// FIXME: types
		// // for (i = v4 + (int)x_DWORD_180628b_screen_buffer; v19; v6 += v14)
		// {
		// 	while (1)
		// 	{
		// 		while (1)
		// 		{
		// 			LOBYTE(v4) = *v6++;
		// 			if ((x_BYTE)v4)
		// 				break;
		// 			LOBYTE(v4) = x_DWORD_18062C_resolution_x;
		// 			i += x_DWORD_18062C_resolution_x;
		// 			v5 = (x_BYTE *)i;
		// 			if (!--v19)
		// 				return v4;
		// 		}
		// 		if ((v4 & 0x80u) == 0)
		// 			break;
		// 		v5 -= (char)v4;
		// 		if (!v19)
		// 			return v4;
		// 	}
		// 	v7 = a4;
		// 	v8 = (char)v4;
		// 	v14 = (char)v4;
		// 	do
		// 	{
		// 		BYTE1(v7) = *v5;
		// 		LOBYTE(v4) = x_BYTE_F6EE0_tablesx[0x4000+v7];
		// 		*v5++ = v4;
		// 		--v8;
		// 	} while (v8);
		// }
	}
	else
	{
		v18 = a3.height;
		// FIXME: types
		// LOBYTE(v4) = (int)x_DWORD_180628b_screen_buffer;
		// FIXME: types
		// v9 = (x_BYTE *)((int)x_DWORD_180628b_screen_buffer + a1 + x_DWORD_18062C_resolution_x * a2);
		v10 = a3.data;
		// FIXME: types
		// v17 = (int)x_DWORD_180628b_screen_buffer + a1 + x_DWORD_18062C_resolution_x * a2;
		if (a3.height)
		{
			do
			{
				while (1)
				{
					while (1)
					{
						LOBYTE(v4) = *v10++;
						if ((x_BYTE)v4)
							break;
						LOBYTE(v4) = x_DWORD_18062C_resolution_x;
						v9 = (x_BYTE *)(x_DWORD_18062C_resolution_x + v17);
						v17 += x_DWORD_18062C_resolution_x;
						if (!--v18)
							return v4;
					}
					if ((v4 & 0x80u) == 0)
						break;
					v9 -= (char)v4;
					if (!v18)
						return v4;
				}
				v11 = a4;
				v12 = (char)v4;
				v15 = (char)v4;
				do
				{
					BYTE1(v11) = *v9;
					LOBYTE(v4) = x_BYTE_F6EE0_tablesx[0x4000+v11];
					*v9++ = v4;
					--v12;
				} while (v12);
				v10 += v15;
			} while (v18);
		}
	}
	return v4;
}

//----- (0002E260) --------------------------------------------------------
void sub_2E260_draw_spell(int16_t a1, int16_t a2, type_str_0x6E8E* a3x, char a4)//20f260
{
	type_str_0x6E8E* v4x; // eax
	signed int v5; // eax
	int16_t v6; // t1
	int16_t v7; // cx
	posistruct v8; // eax
	posistruct v9; // eax
	int v10; // edi
	uint16_t v11; // di
	uint8_t v12; // al
	signed int i; // [esp+0h] [ebp-14h]
	signed int j; // [esp+4h] [ebp-10h]
	type_str_0x6E8E* v15x; // [esp+8h] [ebp-Ch]
	uint8_t v16; // [esp+Ch] [ebp-8h]
	uint8_t v17; // [esp+10h] [ebp-4h]

	if (a3x > x_DWORD_EA3E4[0])
	{
		sub_6FC50(x_BYTE_D419D_fonttype);
		v4x = x_DWORD_EA3E4[a3x->word_0x28_40];
		v15x = v4x;
		if (v4x > x_DWORD_EA3E4[0])
		{
			v17 = x_BYTE_E88E0x[3 * sub_61790(v4x->dword_0xA4_164x->word_0x38_56)];
			v5 = sub_61790(v15x->dword_0xA4_164x->word_0x38_56);
			v6 = a3x->word_0x2E_46;
			v16 = x_BYTE_E88E0x[1 + 3 * v5];
			//if (!(SPELLS_BEGIN_BUFFER_DA818[0x1+80 * a3x->byte_0x40_64] & 4)
			if (!(SPELLS_BEGIN_BUFFER_str[a3x->byte_0x40_64].byte_1 & 4)
				|| (v7 = a3x->word_0x2E_46, v7 <= 0)
				|| v7 >= 32
				|| !x_D41A0_BYTEARRAY_4_struct.byteindex_121[1])
			{
				if (a4)//adress 20f334
				{
					if (a3x->word_0x2E_46)
						//v8 = (Bit8u**)(**filearray_2aa18c[6] + 12);
						v8 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[2];
					else
					  //v8 = (Bit8u**)(**filearray_2aa18c[6] + 6);
						v8 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[1];
					sub_2BB40_draw_bitmap(a1, a2, v8);
				}
				else
				{
					if (a3x->word_0x2E_46)
					  //v9 = **filearray_2aa18c[6] + 12;
						v9 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[2];
					else
					  //v9 = **filearray_2aa18c[6] + 6;
						v9 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[1];
					x_DWORD_F01E8(a1, a2, v9);
				}//20f38d
				//a6757c+2e8=a67864->a60a57
				sub_2BB40_draw_bitmap(a1, a2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[(a3x->byte_0x40_64 + 123)]);
				//20f3b8
				//"I" 0x234 a6757c->a5b3b0    0xc
				//adress 20f37a
				sub_2BC10_draw_text((char*)off_DB06C[a3x->byte_0x46_70],
					(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[1].width + a1 - 8 * strlen((const char *)*(&off_DB06C[a3x->byte_0x46_70])) - 2,//test and fix
				  a2,
				  (*xadataclrd0dat.var28_begin_buffer)[0]);//x_BYTE_E8900//20f3bd//2b9900
				if (a3x->dword_0x8C_140)
				{
					sub_2BC80(
						a1 + 4,
						a2 + 36,
						56 * (v15x->dword_0x90_144 % a3x->dword_0x8C_140) / a3x->dword_0x8C_140,
						4,
						v16);
					v10 = v15x->dword_0x90_144 / a3x->dword_0x8C_140;
					for (i = 0; i < 27 && v10; i++)
					{
						for (j = 0; j < 2 && v10; j++)
						{
							sub_2BC80(a1 + 2 * (i + 2), a2 + 2 * (j + 18), 2, 2, v17);
							v10--;
						}
					}
				}
				if (a3x->dword_0x88_136)
				{
					v11 = v15x->dword_0xA4_164x->word_0x3A_58;
					if (!v11 || a3x->dword_0x88_136 > x_DWORD_EA3E4[v11]->dword_0x90_144)
					{						
						if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
							v12 = 16;
						else
							v12 = 48;
						sub_2E850(a1, a2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[1].width, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[1].height, v12);
					}
				}
			}
		}
	}
}

//----- (0002E790) --------------------------------------------------------
int sub_2E790(int16_t a1, int a2, int a3, int a4, uint8_t a5)//20f790
{
	int16_t v5; // bx
	int v6; // ecx
	int v7; // eax
	int result; // eax
	int16_t v9; // si
	int v10; // [esp+Ch] [ebp-4h]

	v5 = a1;
	v6 = a2;
	if (x_WORD_180660_VGA_type_resolution == 1)
	{
		v5 = a1 / 2;
		HIWORD(v7) = HIWORD(a2);
		LOWORD(v7) = (int16_t)a2 / 2;
		v6 = v7;
		HIWORD(v7) = HIWORD(a3);
		LOWORD(v7) = (int16_t)a3 / 2;
		a3 = v7;
		HIWORD(v7) = HIWORD(a4);
		LOWORD(v7) = (int16_t)a4 / 2;
		a4 = v7;
	}
	for (result = v6; (int16_t)result < (int16_t)v6 + (int16_t)a4; ++result)
	{
		v9 = v5;
		while (1)
		{
			v10 = v9;
			if ((int16_t)a3 + v5 <= v9)
				break;
			++v9;
			// FIXME: types
			// // *(x_BYTE *)((int)x_DWORD_180628b_screen_buffer + x_DWORD_18062C_resolution_x * (int16_t)result + v10) = x_BYTE_F6EE0_tablesx[0x4000+256 * a5
			// 	+ *(uint8_t *)((int)x_DWORD_180628b_screen_buffer + x_DWORD_18062C_resolution_x * (int16_t)result + v10)];
		}
	}
	return result;
}

//----- (0002E850) --------------------------------------------------------
int sub_2E850(int16_t a1, int a2, int a3, int a4, uint8_t a5)//20f850
{
	int16_t v5; // bx
	int v6; // ecx
	int v7; // eax
	int result; // eax
	int16_t v9; // si
	int v10; // [esp+Ch] [ebp-4h]

	v5 = a1;
	v6 = a2;
	if (x_WORD_180660_VGA_type_resolution == 1)
	{
		v5 = a1 / 2;
		HIWORD(v7) = HIWORD(a2);
		LOWORD(v7) = (int16_t)a2 / 2;
		v6 = v7;
		HIWORD(v7) = HIWORD(a3);
		LOWORD(v7) = (int16_t)a3 / 2;
		a3 = v7;
		HIWORD(v7) = HIWORD(a4);
		LOWORD(v7) = (int16_t)a4 / 2;
		a4 = v7;
	}
	for (result = v6; (int16_t)result < (int16_t)v6 + (int16_t)a4; ++result)
	{
		v9 = v5;
		while (1)
		{
			v10 = v9;
			if ((int16_t)a3 + v5 <= v9)
				break;
			v9++;
			// FIXME: types
			// // *(x_BYTE *)((int)x_DWORD_180628b_screen_buffer + x_DWORD_18062C_resolution_x * (int16_t)result + v10) = x_BYTE_F6EE0_tablesx[256 * a5
			// 	+ *(uint8_t *)((int)x_DWORD_180628b_screen_buffer + x_DWORD_18062C_resolution_x * (int16_t)result + v10)];
		}
	}
	return result;
}

//----- (0002EB60) --------------------------------------------------------
void sub_2EB60()//20fb60
{
	//int result; // eax

	if (!x_BYTE_D41CE)
	{
		x_BYTE_D41CE = 1;
		x_BYTE_D41C1 = 1;
		x_DWORD_F01E4 = &x_DWORD_180628b_screen_buffer[0xfb40];//line 320x201 - after normal image
		x_WORD_F01F4 = 0x3200;
		sub_2EC30_clear_img_mem();
		x_DWORD_D41D0 = 0;
	}
	//return result;
}

//----- (0002EBB0) --------------------------------------------------------
void sub_2EBB0_draw_text_with_border_630x340(char* a1)//20fbb0
{
	//int result; // eax

	if (x_BYTE_D41CE)
	{
		x_DWORD_D41D0 = a1;
		x_WORD_E36D4 = 64;
		x_DWORD_180628b_screen_buffer += 0x26C0;
		/*result = */sub_7FCB0_draw_text_with_border(64, a1, 0, 630, 340, 5, x_BYTE_EB3B6, 0);
		x_WORD_E36D4 = 0;
		x_DWORD_180628b_screen_buffer -= 0x26C0;
	}
	//return result;
}

//----- (0002EC30) --------------------------------------------------------
void sub_2EC30_clear_img_mem()//20fc30
{
	//int result; // eax

	if (x_BYTE_D41CE)
		memset((void*)x_DWORD_F01E4, 0, x_WORD_F01F4);
}

//----- (0002EC60) --------------------------------------------------------
void sub_2EC60()//20fc60
{
	//int result; // eax

	if (x_BYTE_D41CE)
	{
		sub_2EC30_clear_img_mem();
		x_BYTE_D41C1 = 0;
		x_BYTE_D41CE = 0;
		x_DWORD_D41D0 = 0;
	}
	//return result;
}

//----- (0002EC90) --------------------------------------------------------
void sub_2EC90(char a1)//20fc90
{
	//char result; // al

	if (x_BYTE_D41CE)
	{
		//result = a1;
		x_BYTE_EB3B6 = a1;
		if (x_DWORD_D41D0)
			/*result = */sub_2EBB0_draw_text_with_border_630x340(x_DWORD_D41D0);
	}
	//return result;
}

//----- (0002ECC0) --------------------------------------------------------
void sub_2ECC0_draw_bottom_menu()//20fcc0
{
	//char v0; // t0
	//Bit8u* v1; // eax
	//int v2; // eax
	//char v3; // dh
	signed int v4; // eax
	int16_t v5; // si
	int16_t v6; // di
	int16_t v7; // bx
	char v8; // dl
	type_str_0x6E8E* v9x; // edx
	int16_t v10; // ax
	int16_t v11; // ax
	uint16_t v12; // dx
	posistruct v13; // eax
	uint8_t v14; // al
	//int v15; // eax
	int v16; // eax
	uint8_t v17; // dl
	int16_t v18; // cx
	int v19; // esi
	int v20; // ebx
	//char *v21; // edi
	int v22; // eax
	uint16_t v23; // cx
	int16_t v24; // ax
	int16_t v25; // cx
	int v26; // eax
	int v27; // eax
	int v28; // ecx
	int v29; // edx
	int v30; // ecx
	int v31; // eax
	int v32; // edi
	int16_t result; // ax
	int v34; // [esp+4h] [ebp-6Ch]
	int v35; // [esp+Ch] [ebp-64h]
	//type_str_611* v36x; // [esp+10h] [ebp-60h]
	type_str_0x6E8E* v37x; // [esp+14h] [ebp-5Ch]
	signed int i; // [esp+18h] [ebp-58h]
	//char *v39; // [esp+24h] [ebp-4Ch]
	signed int v40; // [esp+28h] [ebp-48h]
	int16_t v41; // [esp+2Ch] [ebp-44h]
	int16_t v42; // [esp+34h] [ebp-3Ch]
	Bit16s v43; // [esp+38h] [ebp-38h]
	int16_t v44; // [esp+38h] [ebp-38h]
	int16_t v45; // [esp+3Ch] [ebp-34h]
	uint8_t v46; // [esp+40h] [ebp-30h]
	int16_t v47; // [esp+40h] [ebp-30h]
	int v48; // [esp+44h] [ebp-2Ch]
	int16_t v49; // [esp+48h] [ebp-28h]
	int16_t v50; // [esp+4Ch] [ebp-24h]
	int v51; // [esp+50h] [ebp-20h]
	int16_t v52; // [esp+54h] [ebp-1Ch]
	int16_t v53; // [esp+58h] [ebp-18h]
	int16_t v54; // [esp+5Ch] [ebp-14h]
	char v55; // [esp+60h] [ebp-10h]
	uint8_t v56; // [esp+64h] [ebp-Ch]
	uint8_t v57; // [esp+68h] [ebp-8h]
	char v58; // [esp+6Ch] [ebp-4h]

	//v0 = *(0x2FED1 + x_D41A0_BYTEARRAY_0 + 3);
	//v1 = x_DWORD_EA3E4[*(uint16_t *)(2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0 + 11240)];
	v37x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	//v2 = *(x_DWORD *)(v37 + 164);
	//v36x = &v37x->dword_0xA4_164x->str_611;
	v57 = x_BYTE_E88E0x[3 * sub_61790(v37x->dword_0xA4_164x->word_0x38_56)];
	v56 = x_BYTE_E88E0x[1 + 3 * sub_61790(v37x->dword_0xA4_164x->word_0x38_56)];
	//v3 = x_WORD_180660_VGA_type_resolution;
	x_D41A0_BYTEARRAY_4_struct.byteindex_50 = -1;
	if (x_WORD_180660_VGA_type_resolution & 1)
		v4 = 400;
	else
		v4 = 480;
	//v41 = *(uint8_t *)(**filearray_2aa18c[6] + 532);
	v41 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[88].width;
	//v48 = *(uint8_t *)(**filearray_2aa18c[6] + 539);
	v48 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].height;
	v51 = v4 - 2 * v48;
	//v42 = *(uint8_t *)(**filearray_2aa18c[6] + 538);
	v42 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width;
	v49 = 0;
	v54 = 0;
	//v45 = v42 - *(uint8_t *)(**filearray_2aa18c[6] + 898);
	v45 = v42 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[149].width;
	v5 = v4 - 2 * v48;
	while (v49 < 2)
	{
		if ( !v49 )
		  x_DWORD_F01E8(0, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[88]);
		v6 = v41;
		v7 = 0;//left part of frame drawed
		while (v7 < 13)
		{
			v44 = x_BYTE_D94FF_spell_index[v54];
			v8 = 1;
			//if (!(*xadataspellsdat.var28_begin_buffer)[80 * x_BYTE_D94FF_spell_index[v54]] || !x_BYTE_D41B6 && v44 == 25)
			if (!SPELLS_BEGIN_BUFFER_str[x_BYTE_D94FF_spell_index[v54]].byte_0 || !x_BYTE_D41B6 && v44 == 25)
				v8 = 0;
			if (!v8)
			{
				//x_DWORD_F01E8(v6, v5, **filearray_2aa18c[6] + 534);
				x_DWORD_F01E8(v6, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89]);
				goto LABEL_54;
			}
			v9x = x_DWORD_EA3E4[v37x->dword_0xA4_164x->str_611.array_0x333_819x.word[x_BYTE_D94FF_spell_index[v54]]];
			if (v9x > x_DWORD_EA3E4[0])
			{				
				if (v54 == v37x->dword_0xA4_164x->str_611.byte_0x458_1112)
				{
					x_D41A0_BYTEARRAY_4_struct.byteindex_50 = v54;
					v10 = v37x->dword_0xA4_164x->str_611.byte_0x459_1113;
				}
				else
				{
					v10 = v37x->dword_0xA4_164x->str_611.array_0x437_1079x.byte[x_BYTE_D94FF_spell_index[v54]];
				}
				v46 = v10;
				//v39 = (char*)&((*xadataspellsdat.var28_begin_buffer)[80 * v44 + 2 + 26 * v10]);
				//v39 = SPELLS_BEGIN_BUFFER_str[v44].subspell[v10].dword_2;
				//if (SPELLS_BEGIN_BUFFER_DA818[0x1 +80 * v9x->byte_0x40_64] & 4)
				if (SPELLS_BEGIN_BUFFER_str[v9x->byte_0x40_64].byte_1 & 4)
				{
					v11 = v9x->word_0x2E_46;
					if (v11 > 0 && v11 < 32 && x_D41A0_BYTEARRAY_4_struct.byteindex_121[1])
						goto LABEL_43;
				}
				v55 = 0;
				if (!SPELLS_BEGIN_BUFFER_str[v44].subspell[v10].dword_A
					|| (v12 = v37x->dword_0xA4_164x->word_0x3A_58) != 0
					&& SPELLS_BEGIN_BUFFER_str[v44].subspell[v10].dword_A <= x_DWORD_EA3E4[v12]->dword_0x90_144)
				{
					v55 = 1;
				}
				if (v55)
				{
					if (x_D41A0_BYTEARRAY_4_struct.byteindex_50 == v54)
					{
						v35 = sub_6D710(v37x, v44, v46);
						if (v35 > 0)
						{
							//sub_2BB40_draw_bitmap(v6, v5, (Bit8u**)(**filearray_2aa18c[6] + 522));
							sub_2BB40_draw_bitmap(v6, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[87]);//draw top 2 left frame
							sub_2BC80(v6 + 6, v5 + 28, 36 * (v37x->dword_0x90_144 % v35) / v35, 4, v56);
							v34 = v37x->dword_0x90_144 / v35;
							for (i = 0; i < 36 && v34 > 0; i += 2)
							{
								v40 = 0;
								while (v40 < 4 && v34 > 0)
								{
									sub_2BC80(i + v6 + 6, v40 + v5 + 28, 2, 2, v57);//mana fo top left 2 frame
									v40 += 2;
									v34--;
								}
							}
						}
					LABEL_40:
						/*if ( v55 )
						  sub_2BB40_draw_bitmap(v6, v5, (Bit8u**)(**filearray_2aa18c[6] + 6 * (v44 + 97)));
						else
						  sub_2DE80_draw_bitmapxx(v6, v5, (Bit8u**)(6 * (v44 + 97) + **filearray_2aa18c[6]));*/
						if (v55)
							sub_2BB40_draw_bitmap(v6, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v44 + 97]);//top left2 spell1 and top left5 spell2
						else
							sub_2DE80_draw_bitmapxx(v6, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v44 + 97]);						
					LABEL_43:
						v14 = v37x->dword_0xA4_164x->str_611.array_0x3B5_949x.byte[v44];
						if (v14 >= 1u)
						{
							/*if ( v14 <= 1u )
							{
							  sub_2DE80_draw_bitmapxx(v6, v5, (Bit8u**)(**filearray_2aa18c[6] + 894));
							}
							else if ( v14 == 2 )
							{
							  sub_2DE80_draw_bitmapxx(v6 + v45, v5, (Bit8u**)(**filearray_2aa18c[6] + 900));
							}*/
							if ( v14 <= 1u )
							{
							  sub_2DE80_draw_bitmapxx(v6, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[149]);
							}
							else if ( v14 == 2 )
							{
							  sub_2DE80_draw_bitmapxx(v6 + v45, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[150]);
							}							
						}
						goto LABEL_54;
					}
					//v13 = **filearray_2aa18c[6] + 534;// fix it
					v13 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89];
				}
				else
				{
					//v13 = **filearray_2aa18c[6] + 546;//fix it
					v13 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[91];//FIX IT!

				}
				x_DWORD_F01E8(v6, v5, v13);
				goto LABEL_40;
			}
			//x_DWORD_F01E8(v6, v5, **filearray_2aa18c[6] + 534);
			x_DWORD_F01E8(v6, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89]);//top left 3 and 4 and 5 frame
			//v15 = v44 + v37x->dword_0xA4_164;
			/*if ( *(x_BYTE *)(v15 + 1001) || *(x_BYTE *)(v15 + 1027) )
			  sub_2DFD0(v6, v5, **filearray_2aa18c[6] + 6 * (v44 + 97), 0xA6u);*/
			if (v37x->dword_0xA4_164x->str_611.array_0x3E9_1001x.byte[v44] || v37x->dword_0xA4_164x->str_611.array_0x403_1027x.byte[v44])
				sub_2DFD0(v6, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v44 + 97], 0xA6u);
			//v42 = 0;
		LABEL_54:
			v7++;
			v6 += v42;
			v54++;
		}
		/*if ( !v49 )
		  x_DWORD_F01E8(v6, v5, **filearray_2aa18c[6] + 528);
		v5 += *(uint8_t *)(**filearray_2aa18c[6] + 539);*/
		if (!v49)
			x_DWORD_F01E8(v6, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[88]);
		v5 += (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].height;
		v49++;		
	}
	//sub_2BB40_draw_bitmap(v41 + v42 * (*(char *)(v36 + 501) % 13), *(char *)(v36 + 501) / 13 * v48 + v51, (Bit8u**)(**filearray_2aa18c[6] + 540));
	sub_2BB40_draw_bitmap(v41 + v42 * (v37x->dword_0xA4_164x->str_611.byte_0x458_1112 % 13), v37x->dword_0xA4_164x->str_611.byte_0x458_1112 / 13 * v48 + v51, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90]);
	//frame of selected spell
	v16 = x_D41A0_BYTEARRAY_4_struct.byteindex_50;	
	if (v16 != -1)
	{
		v17 = x_BYTE_D94FF_spell_index[v16];
		v43 = v17;
		v47 = v37x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[v17];
		/*v18 = 3 * *(uint8_t *)(**filearray_2aa18c[6] + 982);
		v50 = v51 - *(uint8_t *)(**filearray_2aa18c[6] + 983);*/
		v18 = 3 * (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[163].width;
		v50 = v51 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[163].height;
		v19 = v42 / 2 + v42 * (v37x->dword_0xA4_164x->str_611.byte_0x458_1112 % 13) + v41 - v18 / 2;
		if ((int16_t)v19 <= 640 - v18)
		{
			if ((v19 & 0x8000u) != 0)
				LOWORD(v19) = 0;
		}
		else
		{
			LOWORD(v19) = 640 - v18;
		}
		v20 = 0;
		//v52 = *(uint8_t *)(**filearray_2aa18c[6] + 982);
		v52 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[163].width;
		while (2)
		{
			if ((int16_t)v20 >= 3)
				break;
			//v21 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * v43 + 2 + 26 * (int16_t)v20];
			//v21 = SPELLS_BEGIN_BUFFER_str[v43].subspell[v20].dword_2;
			LOBYTE(v22) = 0;
			v58 = 0;
			if (!SPELLS_BEGIN_BUFFER_str[v43].subspell[v20].dword_A
				|| (v23 = v37x->dword_0xA4_164x->word_0x3A_58) != 0
				&& SPELLS_BEGIN_BUFFER_str[v43].subspell[v20].dword_A <= x_DWORD_EA3E4[v23]->dword_0x90_144)
			{
				v58 = 1;
				v22 = v37x->dword_0x90_144 / sub_6D710(v37x, v43, v20);
			}
			if ((int16_t)v20 > v47)
			{
				//sub_2BB40_draw_bitmap(v19, v50, (Bit8u**)(**filearray_2aa18c[6] + 978));
				sub_2BB40_draw_bitmap(v19, v50, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[163]);				
			}
			else
			{
				if (v58 && (x_BYTE)v22)
					v24 = 161;
				else
					v24 = 162;
				/*sub_2BB40_draw_bitmap(v19, v50, (Bit8u**)(**filearray_2aa18c[6] + 6 * v24));
				sub_2BB40_draw_bitmap(v19 + 6, v50 + 10, (Bit8u**)(**filearray_2aa18c[6] + 6 * (int16_t)(v20 + 165)));*/
				sub_2BB40_draw_bitmap(v19, v50, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v24]);
				sub_2BB40_draw_bitmap(v19 + 6, v50 + 10, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v20 + 165]);
				v53 = v19 + 18;
				v25 = v50 + 6;
				v26 = v20 + 3 * v43 + 179;
				/*if ( v58 )
					sub_2BB40_draw_bitmap(v53, v25, (Bit8u**)(**filearray_2aa18c[6] + 6 * (int16_t)v26));
				else
					sub_2DE80_draw_bitmapxx(v53, v25, (Bit8u**)(6 * (int16_t)v26 + **filearray_2aa18c[6]));*/
				if (v58)
					sub_2BB40_draw_bitmap(v53, v25, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v26]);
				else
					sub_2DE80_draw_bitmapxx(v53, v25, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v26]);				
			}
			//if ( (x_WORD)v20 == *(char *)(v36 + 502) )
			//sub_2BB40_draw_bitmap(v19, v50, (Bit8u**)(**filearray_2aa18c[6] + 984));
			if ((x_WORD)v20 == v37x->dword_0xA4_164x->str_611.byte_0x459_1113)
				sub_2BB40_draw_bitmap(v19, v50, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[164]);
			if ((int16_t)v20 <= v47 && (int16_t)v20 < 2)
			{
				if ((x_WORD)v20 == v47)
				{
					if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
					{
						v27 = v43;
						//v28 = *(x_DWORD *)(v21 + 42);
						v28 = SPELLS_BEGIN_BUFFER_str[v43].subspell[v20+1].dword_0x12;
						//v29 = *((x_DWORD *)v21 + 4);
						v29 = SPELLS_BEGIN_BUFFER_str[v43].subspell[v20].dword_0x12;
					}
					else
					{
						v27 = v43;
						//v28 = *(x_DWORD *)(v21 + 38);
						v28 = SPELLS_BEGIN_BUFFER_str[v43].subspell[v20 + 1].dword_E;
						//v29 = *((x_DWORD *)v21 + 3);
						v29 = SPELLS_BEGIN_BUFFER_str[v43].subspell[v20].dword_E;
					}
					v30 = v28 - v29;
					v31 = v37x->dword_0xA4_164x->str_611.array_0x263_611x.dword[v27] + v37x->dword_0xA4_164x->str_611.array_0x2CB_715x.dword[v27] - v29;
					if (v30 > 0)
					{
						v32 = 54 * v31 / v30;
						goto LABEL_92;
					}
				LABEL_91:
					LOWORD(v32) = 0;
				}
				else
				{
					if ((int16_t)v20 >= v47)
						goto LABEL_91;
					LOWORD(v32) = 54;
				}
			LABEL_92:
				if ((v32 & 0x8000u) != 0)
					LOWORD(v32) = 0;
				if ((int16_t)v32 > 54)
					LOWORD(v32) = 54;
				sub_2BC80(v19 + 6, v50 + 28, 54, 2, (*xadataclrd0dat.var28_begin_buffer)[0]);
				if ((x_WORD)v32)
					sub_2BC80(v19 + 6, v50 + 28, v32, 2, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);				
			}
			v20++;
			LOWORD(v19) = v52 + v19;
			continue;
		}
	}
	result = unk_18058Cstr.x_WORD_1805C2_joystick;
	if (unk_18058Cstr.x_WORD_1805C2_joystick == 8
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 12
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 13
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 4
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 6
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 11
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 5)
	{
		//result = sub_2BB40_draw_bitmap(x_DWORD_1805B0_mouse.x, x_DWORD_1805B0_mouse.y, (Bit8u**)(**filearray_2aa18c[0] + 6 * (uint8_t)x_BYTE_D419E));
		/*result = */sub_2BB40_draw_bitmap(unk_18058Cstr.x_DWORD_1805B0_mouse.x, unk_18058Cstr.x_DWORD_1805B0_mouse.y, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[x_BYTE_D419E]);
	}
	//return result;
}

//----- (0002F6B0) --------------------------------------------------------
void sub_2F6B0()//2106b0
{
	signed int v0; // eax
	int v1; // eax
	uint8_t v2; // dl
	char v3; // dh
	int16_t v4; // bx
	uint8_t v5; // di
	uint8_t v6; // al
	int16_t v7; // si
	int v8; // ebx
	int16_t v9; // di
	unsigned int v10; // ebx
	int16_t v11; // si
	uint8_t v12; // al
	int16_t v13; // ST04_2
	int16_t v14; // ST00_2
	int16_t v15; // si
	int16_t v16; // bx
	int16_t v17; // si
	int16_t v18; // bx
	posistruct v19; // eax
	int v20; // ebx
	int16_t v21; // si
	posistruct v22; // eax
	signed int v23; // eax
	int v24; // ebx
	int v25; // esi
	char v26; // al
	posistruct v27; // eax
	int16_t v28; // si
	int16_t v29; // bx
	int16_t v30; // si
	uint8_t v31; // di
	int result; // eax
	//char v33; // [esp+0h] [ebp-Eh]
	int v34; // [esp+48h] [ebp+3Ah]
	int v35; // [esp+4Ch] [ebp+3Eh]
	int v36; // [esp+50h] [ebp+42h]
	int v37; // [esp+54h] [ebp+46h]
	int v38; // [esp+58h] [ebp+4Ah]
	int v39; // [esp+5Ch] [ebp+4Eh]
	int v40; // [esp+60h] [ebp+52h]
	//x_BYTE *v41; // [esp+64h] [ebp+56h]
	uint8_t v42; // [esp+68h] [ebp+5Ah]
	uint8_t v43; // [esp+6Ch] [ebp+5Eh]
	uint8_t v44; // [esp+70h] [ebp+62h]
	uint8_t v45; // [esp+74h] [ebp+66h]
	uint8_t v46; // [esp+78h] [ebp+6Ah]
	uint8_t v47; // [esp+7Ch] [ebp+6Eh]
	uint8_t v48; // [esp+80h] [ebp+72h]
	uint8_t v49; // [esp+84h] [ebp+76h]
	bool v50; // [esp+88h] [ebp+7Ah]
	char v51; // [esp+8Ch] [ebp+7Eh]

	//v41 = (x_BYTE *)(2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0 + 11230);
	if (x_WORD_180660_VGA_type_resolution & 1)
		v0 = 400;
	else
		v0 = 480;
	v40 = v0 - 72;
	v36 = 0;	
	v1 = 5 * D41A0_BYTESTR_0.str_2FECE.byte_level_type;
	v2 = x_WORD_D93C0_bldgprmbuffer[2+0x12e + v1];
	v47 = x_WORD_D93C0_bldgprmbuffer[2+0x12f + v1];
	v3 = x_WORD_D93C0_bldgprmbuffer[2+0x130 + v1];
	v48 = x_WORD_D93C0_bldgprmbuffer[2+0x131 + v1];
	v42 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
	v44 = (*xadataclrd0dat.var28_begin_buffer)[0];
	v49 = v3;
	v45 = (*xadataclrd0dat.var28_begin_buffer)[0xf0];
	v43 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
	v4 = v40;
	v51 = -1;
	sub_2BC80(0, v40, 640, 72, v2);
	v34 = v49;
	sub_2BC80(0, v4, 640, 2, v49);
	v5 = v48;
	sub_2BC80(0, v40 + 70, 640, 2, v48);
	sub_2BC80(0, v4, 2, 70, v34);
	sub_2BC80(v36 + 638, v4, 2, 72, v5);
	if (x_WORD_E3760_mouse.x < 4
		|| x_WORD_E3760_mouse.x >= 66
		|| x_WORD_E3760_mouse.y < v40 + 28
		|| x_WORD_E3760_mouse.y >= v40 + 66)
	{
		v6 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E0_2BE4_12222;
	}
	else
	{
		v6 = 4 * ((x_WORD_E3760_mouse.y - (v40 + 28)) / 20)
			+ ((x_WORD_E3760_mouse.x
				- 4
				- (__CFSHL__((x_WORD_E3760_mouse.x - 4) >> 31, 4)
					+ 16 * ((x_WORD_E3760_mouse.x - 4) >> 31))) >> 4);
	}
	v46 = v6;
	v7 = v40 + 4;
	v8 = v36 + 4;
	v9 = v36 + 4;
	v34 = (int16_t)(v40 + 4);
	sub_2BC80(v36 + 4, v40 + 4, 372, 20, v47);
	v35 = v48;
	sub_2BC80(v9, v34, 372, 2, v48);
	v38 = v49;
	sub_2BC80(v9, v7 + 18, 372, 2, v49);
	sub_2BC80(v9, v34, 2, 18, v35);
	sub_2BC80(v8 + 370, v34, 2, 20, v38);
	sprintf(printbuffer, "%s", D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].names_81[v46]);
	v7 += 2;
	v8 += 6;
	sub_2BC10_draw_text(printbuffer, v8, v7, v42);
	v10 = 8 * strlen(printbuffer) + v8;
	v11 = v7 + 2;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_26 & 8)
		v12 = v43;
	else
		v12 = v47;
	v13 = v11;
	v39 = 0;
	v14 = v10;
	v15 = v40;
	v16 = v36;
	sub_2BC80(v14, v13, 6, 12, v12);
	v17 = v15 + 28;
	v18 = v16 + 4;
	while (v39 < 8)
	{
		if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E0_2BE4_12222 == v39 )
		v19 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[155];
	  else
		v19 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[158];
	   sub_2BB40_draw_bitmap(v18, v17, v19);
		sprintf(printbuffer, "%d", v39 + 1);
		sub_2BC10_draw_text(printbuffer, v18 + 4, v17 + 2, v44);
		if (++v39 == 4)
		{
			v18 = 4;
			v17 += 20;
		}
		else
		{
			v18 += 16;
		}
	}
	v39 = 0;
	v20 = v36 + 82;
	v21 = v40 + 32;
	while (v39 < 4)
	{
		if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E1_2BE4_12223 == v39 )
		  v22 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156];
		else
		  v22 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[159];
		sub_2BB40_draw_bitmap(v20, v21, v22);
		switch (v39)
		{
		case 0:
			v37 = 154;
			break;
		case 1:
			v37 = 153;
			break;
		case 2:
			v37 = 152;
			break;
		case 3:
			v37 = 151;
			break;
		default:
			break;
		}
		//sub_2BB40_draw_bitmap(v20 + 2, v21 + 2, (Bit8u**)(6 * v37 + **filearray_2aa18c[6]));
		sub_2BB40_draw_bitmap(v20 + 2, v21 + 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v37]);
		if (++v39 == 3)
			v23 = 20;
		else
			v23 = 2;
		v20 += v23 + 68;
	}
	v50 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E1_2BE4_12223 != 3;
	v39 = 0;
	v24 = v36 + 384;
	v25 = v40 + 26;
	while (v39 < 8)
	{
		if (D41A0_BYTESTR_0.word_0xc == v39)
			++v39;
		v26 = 1;
		if (!v50 && (1 << v39) & D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E3_2BE4_12225)
			v26 = 0;
		/*if ( v26 )
		  v27 = **filearray_2aa18c[6] + 960;
		else
		  v27 = **filearray_2aa18c[6] + 942;
		sub_2BB40_draw_bitmap(v24, v25, (Bit8u**)v27);
		sub_2BB40_draw_bitmap(v24 + 2, v25 + 2, (Bit8u**)(6 * (v39 + 74) + **filearray_2aa18c[6]));*/
		if ( v26 )
		  v27 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[160];
		else
		  v27 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[157];
		sub_2BB40_draw_bitmap(v24, v25, v27);
		sub_2BB40_draw_bitmap(v24 + 2, v25 + 2, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v39 + 74]);
		if (x_WORD_E3760_mouse.x >= v24
			&& x_WORD_E3760_mouse.x < v24 + 32
			&& x_WORD_E3760_mouse.y >= v25
			&& x_WORD_E3760_mouse.y < v25 + 22)
		{
			v51 = v39;
		}
		v24 += 34;
		v39++;
	}
	v28 = v40 + 4;
	v29 = v36 + 384;
	/*sub_2BB40_draw_bitmap(v36 + 384, v40 + 4, (Bit8u**)(**filearray_2aa18c[6] + 1554));
	sub_2BB40_draw_bitmap(v36 + 474, v28, (Bit8u**)(**filearray_2aa18c[6] + 1566));
	sub_2BB40_draw_bitmap(v36 + 564, v28, (Bit8u**)(**filearray_2aa18c[6] + 1560));*/
	sub_2BB40_draw_bitmap(v36 + 384, v40 + 4, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[259]);
	sub_2BB40_draw_bitmap(v36 + 474, v28, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[261]);
	sub_2BB40_draw_bitmap(v36 + 564, v28, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[260]);
	v30 = v40 + 50;
	sub_2BC80(v29, v40 + 50, 236, 18, v47);
	v31 = v48;
	sub_2BC80(v29, v30, 236, 2, v48);
	v38 = v49;
	sub_2BC80(v29, v40 + 66, 236, 2, v49);
	sub_2BC80(v29, v30, 2, 16, v31);
	sub_2BC80(v36 + 618, v30, 2, 18, v38);
	result = v51;
	if (v51 != -1)
		//v51
		/*result = */sub_2BC10_draw_text(D41A0_BYTESTR_0.array_0x2BDE[v51].array_0x39f_2BFA_12157, v36 + 390, v40 + 52, v45);//wizard name
	if (unk_18058Cstr.x_WORD_1805C2_joystick == 8
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 12
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 13
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 4
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 6
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 11
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 5)
	{
		//result = sub_2BB40_draw_bitmap(x_DWORD_1805B0_mouse.x, x_DWORD_1805B0_mouse.y, (Bit8u**)(**filearray_2aa18c[0] + 6 * (uint8_t)x_BYTE_D419E));
		sub_2BB40_draw_bitmap(unk_18058Cstr.x_DWORD_1805B0_mouse.x, unk_18058Cstr.x_DWORD_1805B0_mouse.y, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[x_BYTE_D419E]);
	}
	//return result;
}

//----- (0002FD90) --------------------------------------------------------
void sub_2FD90_draw_pause_menu()//210d90
{
	//char result; // al
	signed int v1; // ebx
	signed int v2; // ebx
	signed int v3; // ebx
	int v4; // [esp+0h] [ebp-14h]
	int v5; // [esp+4h] [ebp-10h]
	int v6; // [esp+8h] [ebp-Ch]
	int v7; // [esp+Ch] [ebp-8h]
	uint8_t v8; // [esp+10h] [ebp-4h]

	v8 = (*xadataclrd0dat.var28_begin_buffer)[0];
	//result = (char)x_D41A0_BYTEARRAY_4;
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
	{
		if (!x_D41A0_BYTEARRAY_4_struct.byteindex_206)
		{
			//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
			sub_2FFE0(&v6, &v7, &v5, &v4);
			//sub_2BB40_draw_bitmap(v6, v7, (Bit8u**)(**filearray_2aa18c[6] + 1044));
			sub_2BB40_draw_bitmap(v6, v7, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[174]);//Save Dialog
			v7 += v4;
			//sub_2BB40_draw_bitmap(v6, v7, (Bit8u**)(**filearray_2aa18c[6] + 1050));
			sub_2BB40_draw_bitmap(v6, v7, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[175]);//Load Dialog
			//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
			if (!x_D41A0_BYTEARRAY_4_struct.byteindex_208)
			{
				v1 = 0;
				while (v1 < 2)
				{
					v1++;
					//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
					sub_2E790(v6, (int16_t)v7, (int16_t)(v5 - 2), (int16_t)v4, v8);//Shade Load Dialog
					//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
				}
			}
			v7 += v4;
			//sub_2BB40_draw_bitmap(v6, v7, (Bit8u**)(**filearray_2aa18c[6] + 1056));
			sub_2BB40_draw_bitmap(v6, v7, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[176]);//Sound button
			if (!x_BYTE_E3798_sound_active2)
			{
				v2 = 0;
				while (v2 < 2)
				{
					v2++;
					/*sub_2E790(
					  v6,
					  (int16_t)v7,
					  *(uint8_t *)(**filearray_2aa18c[6] + 1060),
					  *(uint8_t *)(**filearray_2aa18c[6] + 1061),
					  v8);*/
					//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
					sub_2E790(
						v6,
						(int16_t)v7,
						(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[176].width,
						(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[176].height,
						v8);
					//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
				}
			}
			//sub_2BB40_draw_bitmap(v6 + *(uint8_t *)(**filearray_2aa18c[6] + 1060), v7, (Bit8u**)(**filearray_2aa18c[6] + 1062));
			sub_2BB40_draw_bitmap(v6 + (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[176].width,v7, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[177]);//Music button
			if (!x_BYTE_E37FC_music)
			{
				v3 = 0;
				while (v3 < 2)
				{
					v3++;
					/*sub_2E790(
					  v6 + *(uint8_t *)(**filearray_2aa18c[6] + 1060),
					  (int16_t)v7,
					  *(uint8_t *)(**filearray_2aa18c[6] + 1066),
					  *(uint8_t *)(**filearray_2aa18c[6] + 1067),
					  v8);*/
					//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
					sub_2E790(
						v6 + (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[176].width,
						(int16_t)v7,
						(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[177].width,
						(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[177].height,
						v8);
					//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
				}
			}
			v7 += v4;
			//sub_2BB40_draw_bitmap(v6, v7, (Bit8u**)(**filearray_2aa18c[6] + 1068));
			sub_2BB40_draw_bitmap(v6, v7, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[178]);//Settings button
		}
		if (unk_18058Cstr.x_WORD_1805C2_joystick == 8
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 12
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 13
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 4
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 6
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 11
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 5)
		{
			//sub_2BB40_draw_bitmap(x_DWORD_1805B0_mouse.x, x_DWORD_1805B0_mouse.y, (Bit8u**)(**filearray_2aa18c[0] + 6 * (uint8_t)x_BYTE_D419E));
			sub_2BB40_draw_bitmap(unk_18058Cstr.x_DWORD_1805B0_mouse.x, unk_18058Cstr.x_DWORD_1805B0_mouse.y, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[x_BYTE_D419E]);
		}
		//result = (char)x_D41A0_BYTEARRAY_4;
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 & 0x10)
			/*result = */sub_30870();
	}
	//return result;
}

//----- (0002FFE0) --------------------------------------------------------
int *sub_2FFE0(int *a1, int *a2, x_DWORD *a3, x_DWORD *a4)//210fe0
{
	//int v4; // eax
	int v5; // eax
	int v6; // ebx
	int v7; // eax
	int *result; // eax

	/*v4 = **filearray_2aa18c[6];
	*a3 = *(uint8_t *)(**filearray_2aa18c[6] + 1048) + 2;*/
	*a3 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[178].width + 2;
	v5 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[178].height;
	*a4 = v5;
	v6 = (400 - 4 * v5) / 2 - 60;
	v7 = (640 - *a3) / 2;
	LOBYTE(v7) = v7 & 0xFE;
	*a1 = v7;
	result = a2;
	LOBYTE(v6) = v6 & 0xFE;
	*a2 = v6;
	return result;
}

//----- (00030050) --------------------------------------------------------
void sub_30050_draw_in_game_menu_320()//211050
{
	signed int v0; // esi
	int v1; // edx
	int v2; // ebx
	int v3; // eax
	int v4; // eax
	int v5; // ecx
	int v6; // edi
	uint8_t v7; // dl
	int v8; // ebx
	int v9; // esi
	int v10; // edi
	int v11; // eax
	uint8_t v12; // dl
	//int result; // eax
	int v14; // [esp+0h] [ebp-20h]
	int v15; // [esp+4h] [ebp-1Ch]
	int v16; // [esp+8h] [ebp-18h]
	int v17; // [esp+Ch] [ebp-14h]
	char *v18; // [esp+10h] [ebp-10h]
	int v19; // [esp+14h] [ebp-Ch]
	int v20; // [esp+18h] [ebp-8h]
	int v21; // [esp+1Ch] [ebp-4h]

	//fix
	v9 = 0;
	v10 = 0;
	//fix

	v0 = 67;
	v1 = 0;
	v2 = (640 - x_D41A0_BYTEARRAY_4_struct.byteindex_186) / 2;
	while (1)
	{
		v21 = v1;
		if (v1 >= 17)
			break;
		sub_1A5B0_getLangStrings(v21 + 1, &v15, &v14);
		v19 = 1 << v21;
		if ((1 << v21) & x_D41A0_BYTEARRAY_4_struct.dwordindex_192 && (1 << v21) & x_D41A0_BYTEARRAY_4_struct.dwordindex_188)
			v3 = v15;
		else
			v3 = v14;
		v18 = (char *)x_DWORD_E9C4C_langindexbuffer[v3];
		//help mode On and etc
		v4 = x_D41A0_BYTEARRAY_4_struct.byteindex_186;
		/*v16 = v2 + *(uint8_t *)(**filearray_2aa18c[6] + 1012);
			v5 = v2 + v4 - *(uint8_t *)(**filearray_2aa18c[6] + 1024);
			v17 = *(uint8_t *)(**filearray_2aa18c[6] + 1018);
			v20 = v5;
			sub_2BB40_draw_bitmap(v2, v0, (Bit8u**)(**filearray_2aa18c[6] + 1008));
			v6 = v16;
			sub_2BB40_draw_bitmap(v20, v0, (Bit8u**)(**filearray_2aa18c[6] + 1020));
			while ( v6 < v20 )
			{
			  sub_2BB40_draw_bitmap(v6, v0, (Bit8u**)(**filearray_2aa18c[6] + 1014));
			  v6 += v17;
			}*/
		v16 = v2 + (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[168].width;
		v5 = v2 + v4 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[170].width;
		v17 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[169].width;
		v20 = v5;
		sub_2BB40_draw_bitmap(v2, v0, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[168]);
		v6 = v16;
		sub_2BB40_draw_bitmap(v20, v0, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[170]);
		while (v6 < v20)
		{
			sub_2BB40_draw_bitmap(v6, v0, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[169]);
			v6 += v17;
		}
		if (v19 & x_D41A0_BYTEARRAY_4_struct.dwordindex_192)
		{
			if (v2 > unk_18058Cstr.x_DWORD_1805B0_mouse.x
				|| v2 + x_D41A0_BYTEARRAY_4_struct.byteindex_186 <= unk_18058Cstr.x_DWORD_1805B0_mouse.x
				|| v0 > unk_18058Cstr.x_DWORD_1805B0_mouse.y
				|| v0 + 18 <= unk_18058Cstr.x_DWORD_1805B0_mouse.y)
			{
				v7 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
			}
			else
			{
				v7 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
			}
		}
		else
		{
			v7 = (*xadataclrd0dat.var28_begin_buffer)[0x888];
		}
		sub_2BC10_draw_text((char*)v18, v2 + ((x_D41A0_BYTEARRAY_4_struct.byteindex_186 - 8 * strlen(v18)) >> 1), v0 + 2, v7);
		v0 += 18;
		v1 = v21 + 1;
	}
	v8 = (x_D41A0_BYTEARRAY_4_struct.byteindex_186 - 82) / 2 + (640 - x_D41A0_BYTEARRAY_4_struct.byteindex_186) / 2;
	/*v16 = v8 + *(uint8_t *)(**filearray_2aa18c[6] + 1012);
	v9 = *(uint8_t *)(**filearray_2aa18c[6] + 1018);
	v20 = v8 + 82 - *(uint8_t *)(**filearray_2aa18c[6] + 1024);
	sub_2BB40_draw_bitmap(v8, 377, (Bit8u**)(**filearray_2aa18c[6] + 1008));
	v10 = v16;
	sub_2BB40_draw_bitmap(v20, 377, (Bit8u**)(**filearray_2aa18c[6] + 1020));
	while ( v10 < v20 )
	{
	  sub_2BB40_draw_bitmap(v10, 377, (Bit8u**)(**filearray_2aa18c[6] + 1014));
	  v10 += v9;
	}*/
	v16 = v8 + (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[168].width;
	v9 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[169].width;
	v20 = v8 + 82 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[170].width;
	sub_2BB40_draw_bitmap(v8, 377, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[168]);
	v10 = v16;
	sub_2BB40_draw_bitmap(v20, 377, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[170]);
	while (v10 < v20)
	{
		sub_2BB40_draw_bitmap(v10, 377, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[169]);
		v10 += v9;
	}
	v11 = (640 - x_D41A0_BYTEARRAY_4_struct.byteindex_186) / 2 + (x_D41A0_BYTEARRAY_4_struct.byteindex_186 - 82) / 2;
	if (v11 > unk_18058Cstr.x_DWORD_1805B0_mouse.x || v11 + 82 <= unk_18058Cstr.x_DWORD_1805B0_mouse.x || unk_18058Cstr.x_DWORD_1805B0_mouse.y < 377 || unk_18058Cstr.x_DWORD_1805B0_mouse.y >= 395)
		v12 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
	else
		v12 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
	/*result = */sub_2BC10_draw_text((char*)"OK",(640 - x_D41A0_BYTEARRAY_4_struct.byteindex_186) / 2 + (x_D41A0_BYTEARRAY_4_struct.byteindex_186 - 82) / 2 + 33,379,v12);
	if (unk_18058Cstr.x_WORD_1805C2_joystick == 8
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 12
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 13
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 4
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 6
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 11
		|| unk_18058Cstr.x_WORD_1805C2_joystick == 5)
	{
		//result = sub_2BB40_draw_bitmap(x_DWORD_1805B0_mouse.x, x_DWORD_1805B0_mouse.y, (Bit8u**)(6 * (uint8_t)x_BYTE_D419E + **filearray_2aa18c[0]));
		sub_2BB40_draw_bitmap(unk_18058Cstr.x_DWORD_1805B0_mouse.x, unk_18058Cstr.x_DWORD_1805B0_mouse.y, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[x_BYTE_D419E]);
	}
	//return result;
}

//----- (000303D0) --------------------------------------------------------
void sub_303D0(/*signed int a1*/)//2113d0
{
	//int v1; // edx
	uint8_t v2; // bh
	uint8_t v3; // bl
	uint8_t v4; // al
	int v5; // eax
	uint8_t v6; // si
	int v7; // ebx
	int v9; // [esp+0h] [ebp-1Ch]
	int v10; // [esp+4h] [ebp-18h]
	int v11; // [esp+8h] [ebp-14h]
	int v12; // [esp+Ch] [ebp-10h]
	int v13; // [esp+10h] [ebp-Ch]
	int v14; // [esp+14h] [ebp-8h]
	uint8_t v15; // [esp+18h] [ebp-4h]

	signed int a1=0;//fix this

	//v1 = *(uint8_t *)(x_D41A0_BYTEARRAY_0 + 196308);//D41A0_BYTESTR_0.str_2FECE.byte_level_type
;
	v3 = x_WORD_D93C0_bldgprmbuffer[2+0x130 + 5 * D41A0_BYTESTR_0.str_2FECE.byte_level_type];
	v15 = x_WORD_D93C0_bldgprmbuffer[2+0x131 + 5 * D41A0_BYTESTR_0.str_2FECE.byte_level_type];
	sub_2FFE0(&v12, &v11, &v10, &v9);
	v4 = x_D41A0_BYTEARRAY_4_struct.byte_38591;
	if (v4 >= 1u)
	{
		if (v4 <= 1u)
		{
			v5 = x_D41A0_BYTEARRAY_4_struct.wordindex_6;
		}
		else
		{
			if (v4 != 2)
				goto LABEL_8;
			v5 = x_D41A0_BYTEARRAY_4_struct.wordindex_8;
		}
		a1 = 127;
		v14 = v5;
	}
LABEL_8:
	v10 -= 2;
	v13 = v2;
	v11 += 4 * v9;
	sub_2BC80(v12, v11, v10, 24, v2);
	sub_2BC80(v12, v11, v10, 2, v3);
	v6 = v15;
	sub_2BC80(v12, v11 + 22, v10, 2, v15);
	sub_2BC80(v12, v11, 2, 22, v3);
	sub_2BC80(v10 + v12 - 2, v11, 2, 24, v6);
	sub_2BC80(v12 + 4, v11 + 4, v10 - 8, 16, v13);
	sub_2BC80(v12 + 4, v11 + 4, v10 - 8, 2, v6);
	sub_2BC80(v12 + 4, v11 + 18, v10 - 8, 2, v3);
	sub_2BC80(v12 + 4, v11 + 4, 2, 14, v6);
	sub_2BC80(v12 + 4 + v10 - 8 - 2, v11 + 4, 2, 16, v3);
	v7 = v14 * (v10 - 12) / a1;
	v11 += 6;
	v12 += 6;
	sub_2BC80(v12, v11, v10 - 12, 12, (*xadataclrd0dat.var28_begin_buffer)[0]);
	sub_2BC80(v12, v11, v7, 12, (*xadataclrd0dat.var28_begin_buffer)[0xf0]);
}

//----- (00030630) --------------------------------------------------------
void sub_30630()//211630
{
	char v0; // dl
	int result; // eax
	uint16_t v2; // cx
	//int v3; // edx
	//int v4; // edx
	char* v5; // ebx
	//Bit16s v6y[26]; // [esp+0h] [ebp-34h]
	type_sub_str_unk_1804B0ar v6z;
	/*int16_t v7; // [esp+2h] [ebp-32h]//v6x[1]
	//[ebp-30h]-v6x[2]
	//[ebp-2eh]-v6x[3]
	//[ebp-2ch]-v6x[4]
	//[ebp-2ah]-v6x[5]
	int16_t v8; // [esp+Ch] [ebp-28h]//v6x[6]
	int16_t v9; // [esp+Eh] [ebp-26h]//v6x[7]
	int16_t v10; // [esp+10h] [ebp-24h]//v6x[8]
	int16_t v11; // [esp+12h] [ebp-22h]//v6x[9]
	int16_t v12; // [esp+14h] [ebp-20h]//v6x[10]
	int16_t v13; // [esp+16h] [ebp-1Eh]//v6x[11]
	int16_t v14; // [esp+18h] [ebp-1Ch]//v6x[12]
	int16_t v15; // [esp+1Ah] [ebp-1Ah]//v6x[13]*/
	//[ebp-18h]-v6x[14]
	//[ebp-16h]-v6x[15]
	//[ebp-14h]-v6x[16]
	//[ebp-126h]-v6x[17]
	/*int16_t v16; // [esp+24h] [ebp-10h]//v6x[18]
	int16_t v17; // [esp+26h] [ebp-Eh]//v6x[19]
	int16_t v18; // [esp+28h] [ebp-Ch]//v6x[20]
	int16_t v19; // [esp+2Ah] [ebp-Ah]//v6x[21]*/
	//08-[22]
	//06-[23]
	//char v20; // [esp+30h] [ebp-4h]//v6x[24]
	//uint8_t v21; // [esp+31h] [ebp-3h][24]

	v0 = x_D41A0_BYTEARRAY_4_struct.setting_byte1_22;
	result = 0;
	if (!(v0 & 0x10) && !(v0 & 0x20))
	{
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 & 2)
		{
			//v4 = 11 * D41A0_BYTESTR_0.word_0xc;
			if (D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[0])
				result = (uint8_t)x_BYTE_DB520[6];
			else				
				result = (uint8_t)x_BYTE_DB520[D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[1]];
		}
		else if (D41A0_BYTESTR_0.byte_0x36E0B & 1)
		{
			result = (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E4_2BE4_12226 != 0) + 284;
		}
		else
		{
			v2 = x_D41A0_BYTEARRAY_4_struct.levelnumber_43w;
			if (v2 >= 0x1Eu && v2 <= 0x22u)
			{
				if (D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[0])
					result = (uint8_t)x_BYTE_DB507[0xa];
				else
					result = (uint8_t)x_BYTE_DB4EE[0] + 3;
			}
			else if (x_D41A0_BYTEARRAY_4_struct.setting_38545 & 0x20
				&& !D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[1])
			{
				D41A0_BYTESTR_0.byte_0x36E04 = 0;
			}
			else
			{
				//v3 = 11 * D41A0_BYTESTR_0.word_0xc;
				if (D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[0])
					result = (uint8_t)x_BYTE_DB507[x_D41A0_BYTEARRAY_4_struct.levelnumber_43w];
				else
					result = D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[1]
					+ (uint8_t)x_BYTE_DB4EE[x_D41A0_BYTEARRAY_4_struct.levelnumber_43w];
			}
		}
		if (result)
		{
			v5 = (char *)x_DWORD_E9C4C_langindexbuffer[result];
			/*"Fly towards my beacon."*/

			v6z.word_0x10 = 8;
			v6z.word_0xe = 400;
			v6z.word_0x14 = 40;
			v6z.word_0x16 = 600;
			v6z.word_0x12 = 14;
			v6z.word_0x1a = 260;
			v6z.byte_0x30 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
			v6z.byte_0x31 = ((*xadataclrd0dat.var28_begin_buffer)[0]);
			//v6y[24] = (((*xadataclrd0dat.var28_begin_buffer)[0]) << 8)+ (*xadataclrd0dat.var28_begin_buffer)[0xf00];//to ma byt 0x77
			v6z.word_0x18 = 80;
			//v6y[25] = ((uint8_t)*xadataclrd0dat.var28_begin_buffer)<<8+(v6y[25] & 0xff);
			v6z.word_0x0 = 320;
			v6z.word_0x2 = 300;
			v6z.word_0xc = 320;
			sub_89420(&v6z, v5);
			sub_89520(&v6z);
			sub_89980(&v6z);
			sub_2E790(v6z.word_0x24, v6z.word_0x26, v6z.word_0x28, v6z.word_0x2a, v6z.byte_0x31);

			sub_895D0_draw_textbox(&v6z, v5);

			sub_89690_draw_frame(&v6z);

		}
	}
	//return result;
}

//----- (00030870) --------------------------------------------------------
void sub_30870()//211870
{
	char* v0; // ebx
	int16_t v1; // ax
	//char v3; // [esp+0h] [ebp-32h]
	type_sub_str_unk_1804B0ar v4y; // [esp+80h] [ebp+4Eh]
	//int16_t v5; // [esp+82h] [ebp+50h]//v4x[1]
	//int16_t v6; // [esp+8Ch] [ebp+5Ah]//v4x[6]
	//int16_t v7; // [esp+8Eh] [ebp+5Ch]//v4x[7]
	//int16_t v8; // [esp+90h] [ebp+5Eh]//v4x[8]
	//int16_t v9; // [esp+92h] [ebp+60h]//v4x[9]
	//int16_t v10; // [esp+94h] [ebp+62h]//v4x[10]
	//int16_t v11; // [esp+96h] [ebp+64h]//v4x[11]
	//int16_t v12; // [esp+98h] [ebp+66h]//v4x[12]
	//int16_t v13; // [esp+9Ah] [ebp+68h]//v4x[13]
	//char v14; // [esp+B0h] [ebp+7Eh]
	//char v15; // [esp+B1h] [ebp+7Fh]

	sub_2BC80(4, 286, 632, 190, 0);
	sprintf(printbuffer, "%d", x_WORD_D41D4);
	sub_2BC10_draw_text(printbuffer, 10, 300, (*xadataclrd0dat.var28_begin_buffer)[0xfff]);
	v4y.word_0xe = 400;
	v4y.word_0x14 = 4;
	v4y.word_0x10 = 8;
	v4y.word_0x12 = 14;
	v4y.word_0x16 = 636;
	v0 = (char*)x_DWORD_E9C4C_langindexbuffer[x_WORD_D41D4];
	v4y.word_0xc = 600;
	v4y.word_0x0 = 320;
	v4y.byte_0x30 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
	v4y.byte_0x31 = (*xadataclrd0dat.var28_begin_buffer)[0x0];
	v4y.word_0x18 = 310;
	v4y.word_0x1a = 630;
	v4y.word_0x2 = 310;
	sub_89420(&v4y, v0);
	sub_89520(&v4y);
	sub_89980(&v4y);
	sub_895D0_draw_textbox(&v4y, v0);
	switch (x_BYTE_1806E4)
	{
	case 0x48:
		if (++x_WORD_D41D4 < 1)
			x_WORD_D41D4 = 1;
		if (x_WORD_D41D4 > 470)
			x_WORD_D41D4 = 470;
		x_BYTE_1806E4 = 0;
		break;
	case 0x50:
		v1 = x_WORD_D41D4 - 1;
		x_WORD_D41D4 = v1;
		if (v1 < 1)
			x_WORD_D41D4 = 1;
		if (x_WORD_D41D4 > 470)
			x_WORD_D41D4 = 470;
		x_BYTE_1806E4 = 0;
		break;
	case 0x4b:
		x_WORD_D41D4 = 1;
		x_BYTE_1806E4 = 0;
		break;
	case 0x4d:
		x_WORD_D41D4 = 470;
//		LOBYTE(v1) = 0;
		x_BYTE_1806E4 = 0;
		break;
	}
//	return v1;
}

//----- (00030A60) --------------------------------------------------------
void sub_30A60_in_game_menu(int16_t a1, int16_t a2)//211a60
{
	//int result; // eax
	uint8_t v3; // dl
	int64_t v4; // rax
	//char v5; // [esp+0h] [ebp-Eh]
	int v6; // [esp+80h] [ebp+72h]
	int v7; // [esp+84h] [ebp+76h]

	v7 = a1;
	v6 = a2;
	//result = (int)x_D41A0_BYTEARRAY_4;
	v3 = x_D41A0_BYTEARRAY_4_struct.byte_38546;
	if (v3)
	{
		if (v3 < 2u)
		{
			if (v3 == 1)
				sprintf(printbuffer, "%s?", x_DWORD_E9C4C_langindexbuffer[2]);//Abandon level.
		}
		else if (v3 <= 2u)
		{
			sprintf(printbuffer, "%s?", x_DWORD_E9C4C_langindexbuffer[423]);//Load Level
		}
		else if (v3 == 3)
		{
			sprintf(printbuffer, "%s?", x_DWORD_E9C4C_langindexbuffer[424]);//Save Level
		}
		v4 = 4080 * x_D41A0_BYTEARRAY_4_struct.byteindex_121[4];
		sub_2BC10_draw_text(printbuffer, v7, v6, (*xadataclrd0dat.var28_begin_buffer)[256 * ((signed int)(v4 - (__CFSHL__(HIDWORD(v4), 8) + (HIDWORD(v4) << 8))) >> 8)]);
		sub_30BE0(&v7, &v6);
		//sub_2BB40_draw_bitmap(v7, v6, (Bit8u**)(**filearray_2aa18c[6] + 1542));
		//result = sub_2BB40_draw_bitmap(v7 + 50, v6, (Bit8u**)(**filearray_2aa18c[6] + 1548));
		sub_2BB40_draw_bitmap(v7, v6, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[257]);
		sub_2BB40_draw_bitmap(v7 + 50, v6, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[258]);
		if (unk_18058Cstr.x_WORD_1805C2_joystick == 8
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 12
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 13
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 4
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 6
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 11
			|| unk_18058Cstr.x_WORD_1805C2_joystick == 5)
		{
			//result = sub_2BB40_draw_bitmap(x_DWORD_1805B0_mouse.x, x_DWORD_1805B0_mouse.y, (Bit8u**)(6 * (uint8_t)x_BYTE_D419E + **filearray_2aa18c[0]));
			sub_2BB40_draw_bitmap(unk_18058Cstr.x_DWORD_1805B0_mouse.x, unk_18058Cstr.x_DWORD_1805B0_mouse.y, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[x_BYTE_D419E]);
		}
	}
	//return result;
}

//----- (00030BE0) --------------------------------------------------------
x_DWORD *sub_30BE0(x_DWORD *a1, x_DWORD *a2)//211be0
{
	x_DWORD *result; // eax

	*a1 = 270;
	result = a2;
	*a2 = 104;
	return result;
}

int debugcounter_30D50 = 0;

//----- (00030D50) --------------------------------------------------------
void sub_30D50(type_str_0x6E8E* a1x/*, Bit8u v2, Bit8u v4*/)//211d50
{
	//int v1; // eax
	char v2; // dl
	signed int v3; // esi
	char v4; // cl
	char v5; // ch
	//int16_t v6; // ax
	//Bit8u* v7; // eax
	//int v8; // edi
	int v9; // esi
	uaxis_2d v10x; // [esp+0h] [ebp-4h]

	// fix if begin
	v2 = 0;
	v4 = 0;
	// end

	if (a1x->dword_0x10_16 & 3)
	{
		a1x->dword_0x10_16--;
	}
	else
	{
		//v1 = a1x->dword_0x8;
		a1x->dword_0x8--;// = v1 - 1;
		if (a1x->dword_0x8 >= -1)
		{
			a1x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
			v3 = (int16_t)sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
			if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
			{
				v10x._axis_2d.x = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
				v4 = a1x->struct_byte_0xc_12_15.byte[2];
				v10x._axis_2d.y = (uint16_t)(a1x->array_0x4C_76.y + 128) >> 8;
				if (!(a1x->struct_byte_0xc_12_15.byte[2] & 1))
					sub_10C80(a1x, 0, a1x->word_0x2A_42);
				v5 = x_BYTE_10B4E0_terraintype[v10x.word];
				if (v5)
				{
					switch (v5)
					{
					case 26:
						sub_45DC0(v2, v4, v10x, 0x14u);
						break;
					case 10:
						sub_45DC0(v2, v4, v10x, 0x15u);
						break;
					case 11:
						sub_45DC0(v2, v4, v10x, 0x16u);
						break;
					default:
						if (((uint8_t)v5 < 6u || (uint8_t)v5 > 0x22u)
							&& (x_BYTE_13B4E0_angle[v10x.word] & 7) != 1
							&& a1x->array_0x4C_76.z - v3 <= 128
							&& !(sub_104A0(&a1x->array_0x4C_76) & 1))
						{
							a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
							sub_572C0(a1x, 0, 0, 0 - (a1x->word_0x14_20 % 7u), 1);
						}
						break;
					}
				}
				//v6 = 9377 * a1x->word_0x14_20;
				a1x->struct_byte_0xc_12_15.byte[0] |= 2u;
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				a1x->word_0x2C_44 = a1x->word_0x14_20 % 0x41u - 32;
				sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 3);
			}
			sub_580E0(&a1x->array_0x4C_76, v3, 0, 0, a1x->word_0x2C_44);
			if (x_BYTE_D41B6)
			{
				//v8 = a1x->array_0x52_82.dd;
				v9 = (int16_t)sub_10C60(&a1x->array_0x4C_76) - a1x->array_0x52_82.dd;
				if (a1x->array_0x4C_76.z > v9)
					a1x->array_0x4C_76.z = v9;
			}
			sub_585A0(a1x);
		}
		else
		{
			sub_57F10(a1x);
		}
	}
	debugcounter_30D50++;
}

long debugcounter31 = 0;
//----- (00030F60) --------------------------------------------------------
void sub_30F60(type_str_0x6E8E* a1x)//211f60
{
	int v1; // eax
	//int result; // eax
	//Bit8u* v3; // eax
	int v4; // esi
	type_str_0x6E8E* v5x; // eax
	unsigned int v6; // edx
	axis_3d v7x; // [esp+0h] [ebp-10h]
	//int16_t v8; // [esp+2h] [ebp-Eh]//v7x[1]
	//int16_t v9; // [esp+4h] [ebp-Ch]//v7x[2]
	int v10; // [esp+8h] [ebp-8h]
	int v11; // [esp+Ch] [ebp-4h]

	v1 = a1x->dword_0x8;
	a1x->dword_0x8 = v1 - 1;
	if (v1 < 0)
	{
		sub_57F10(a1x);
		return;
	}
	if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
	{
		a1x->struct_byte_0xc_12_15.byte[0] |= 2u;
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 3);
	}
	v4 = sub_10080(a1x->dword_0x10_16, a1x->dword_0x10_16);
	//v4 = result;
	if (v4)
	{
		while (sub_10130(v4, &v11, &v10) == 1)
		{
			//adress 211fd8
			if (debugcounter31 >= 32)
			{
				//myprintf("i:%d,", debugcounter31);
			}
			debugcounter31++;//0x13
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			if (2 * ((signed int)(a1x->word_0x14_20 % 0x9Du) / 79) - 1 > 0)
			{
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v7x.x = a1x->array_0x4C_76.x - 96 + 192 * v11 + a1x->word_0x14_20 % 0x81u - 64;
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v7x.y = a1x->array_0x4C_76.y - 96 + 192 * v10 + a1x->word_0x14_20 % 0x81u - 64;
				v7x.z = a1x->array_0x4C_76.z;
				v5x = sub_4A190(&v7x, 10, 0);
				if (v5x)
				{
					v5x->word_0x1A_26 = a1x->word_0x1A_26;//here
					v5x->word_0x1C_28 = a1x->word_0x1C_28;
					v6 = 0x10000 & a1x->struct_byte_0xc_12_15.byte[0];
					LOBYTE(v6) = v6 | 0x80;
					v5x->struct_byte_0xc_12_15.byte[0] |= v6;//here
				}
			}
		}
		sub_10100(v4);
	}
	//return result;
}

//----- (00031100) --------------------------------------------------------
void sub_31100(type_str_0x6E8E* a1x)//212100 // zrychleni
{
	//int v1; // eax

	//v1 = a1x->dword_0x8;
	a1x->dword_0x8--;// = v1 - 1;
	if (a1x->dword_0x8 < -1)
		sub_57F10(a1x);
	//return result;
}

//----- (00031120) --------------------------------------------------------
void sub_31120(type_str_0x6E8E* a1x)//212120
{
	//int result; // eax
	//int v2; // edx
	//int v3; // eax
	bool v4; // [esp+0h] [ebp-4h]

	v4 = false;
	//result = sub_10C40_getTerrainAlt(a1x->array_0x4C_76);
	if (sub_10C40_getTerrainAlt(&a1x->array_0x4C_76) != a1x->array_0x4C_76.z)
		goto LABEL_12;
	if (a1x->dword_0x4 - 5 == a1x->dword_0x8)
	{
		sub_4A190(&a1x->array_0x4C_76, 10, 87);
		//v2 = (int)x_D41A0_BYTEARRAY_0;
		//v3 = 9377 * *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
		//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) = v3;
		D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;
		if (!(D41A0_BYTESTR_0.dword_0x8 & 1))
			sub_6E450_distance_sound((a1x-D41A0_BYTESTR_0.struct_0x6E8E), -1, a1x->word_0x5A_90 - 282);
	}
	//result = *(x_DWORD *)(a1 + 8);
	a1x->dword_0x8--;// = result - 1;
	if (a1x->dword_0x8+1 < 0)
		LABEL_12:
	v4 = true;
	else
		sub_585A0(a1x);
	if (v4)
		sub_57F10(a1x);
	//return result;
}

//----- (000311E0) --------------------------------------------------------
void sub_311E0(type_str_0x6E8E* a1x)//2121e0
{
	unsigned int v1; // eax
	type_str_0x6E8E* v2x; // eax
	uint8_t v3; // dl
	int16_t v4; // di
	int16_t v5; // si
	int16_t v6; // ax
	signed int v7; // edi
	//char v8; // al
	char v9; // al
	signed int v10; // eax
	int v11; // eax
	int v12; // esi
	int v13; // eax
	type_str_0x6E8E* jx; // esi
	signed int v15; // eax
	signed int v16; // ecx
	signed int v17; // eax
	signed int v18; // edx
	int v19; // ecx
	int v20; // edx
	int v21; // eax
	uint8_t v22; // dh
	char v23; // cl
	int v24; // eax
	uint16_t v25; // dx
	int16_t v26; // si
	axis_3d v28x; // [esp+0h] [ebp-50h]
	//int16_t v29; // [esp+2h] [ebp-4Eh]
	int v30; // [esp+8h] [ebp-48h]
	unsigned int v31; // [esp+Ch] [ebp-44h]
	int v32; // [esp+10h] [ebp-40h]
	int v33; // [esp+14h] [ebp-3Ch]
	int v34; // [esp+18h] [ebp-38h]
	int v35; // [esp+1Ch] [ebp-34h]
	int v36; // [esp+20h] [ebp-30h]
	int k; // [esp+24h] [ebp-2Ch]
	int v38; // [esp+28h] [ebp-28h]
	int v39; // [esp+2Ch] [ebp-24h]
	int v40; // [esp+30h] [ebp-20h]
	int v41; // [esp+34h] [ebp-1Ch]
	int v42; // [esp+38h] [ebp-18h]
	int v43; // [esp+3Ch] [ebp-14h]
	int v44; // [esp+40h] [ebp-10h]
	int v45; // [esp+44h] [ebp-Ch]
	int v46; // [esp+48h] [ebp-8h]
	uint16_t ix; // [esp+4Ch] [ebp-4h]
	//uint16_t iy; // [esp+4Ch] [ebp-4h]

	v1 = a1x->dword_0x4;
	if (v1 < 1)
		goto LABEL_78;
	if (v1 <= 1)
	{
		v39 = 5;
		goto LABEL_8;
	}
	if (v1 == 2)
		v39 = 7;
	else
		LABEL_78:
	v39 = 3;
LABEL_8:
	v36 = v39 + 12;
	//LOBYTE(v2) = a1x->byte_0x46_70;
	if (a1x->byte_0x46_70 == 1)
		return;
	if (a1x->byte_0x46_70 == 0)
	{
		v3 = ((uint16_t)(a1x->array_0x4C_76.x + 128) >> 8) - v36;
		BYTE1(v46) = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - v36;
		v4 = BYTE1(v46);
		v5 = v3;
		LOBYTE(v46) = v3;
		a1x->array_0x4C_76.z = sub_48EF0(v3, BYTE1(v46), 2 * v36, 2 * v36);
		v6 = sub_48E60(v5, v4, 2 * v36, 2 * v36);
		a1x->dword_0x8 = 40;
		a1x->word_0x2C_44 = 227;
		a1x->word_0x36_54 = 0;
		a1x->byte_0x46_70 = 2;
		a1x->word_0x9A_154x.z = v6;
	}
	else if (a1x->byte_0x46_70 > 2)
	{
		if (a1x->byte_0x46_70 == 3)
			sub_57F10(a1x);
		return;
	}
	v32 = a1x->array_0x4C_76.z;
	v42 = a1x->word_0x9A_154x.z;
	v33 = 0;
	v44 = v32 - v42;
	v35 = 0;
	v7 = a1x->word_0x2C_44;
	//LOBYTE(v2) = v39;
	v44 = ((v32 - v42) >> 1) + v32 - v42;
	v38 = v39;
	while (v33 < 6)
	{
		v43 = v35 - 1024;
		if (v35 - 1024 < 0)
			v43 = 0;
		if (v36 << 8 < v43)
			v43 = v36 << 8;
		v35 = v38 << 8;
		//LOBYTE(v2) = 2 * v38;
		v41 = 2 * v38;
		if (v7 > 0 && v7 <= 512)
		{
			//v8 = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - v38;
			LOBYTE(v46) = ((uint16_t)(a1x->array_0x4C_76.x + 128) >> 8) - v38;
			HIBYTE(v46) = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - v38;
			v34 = 0;
			for (ix = v46; ; ++HIBYTE(ix))
			{
				//LOBYTE(v2) = v34;
				if (v34 >= v41)
					break;
				v40 = 0;
				v9 = v46;
				while (1)
				{
					LOBYTE(ix) = v9;
					if (v40 >= v41)
						break;
					v28x.x = LOBYTE(ix) << 8;
					v28x.y = HIBYTE(ix) << 8;
					v10 = sub_58490_radix_3d_2(&a1x->array_0x4C_76, &v28x);
					if (v10 < v35 && v10 >= v43)
					{
						v11 = (v44 * ((x_DWORD)(0x10000 + (signed int)x_DWORD_DB750[0x200+(v10 << 10) / v35]) >> 1) >> 16)
							* (0x10000 - x_DWORD_DB750[0x200+v7]);
						v12 = v11 >> 16;
						v45 = (v11 >> 18) + v42;
						if (x_BYTE_11B4E0_height[ix] < v45)
							sub_570F0(ix, HIBYTE(ix), v45, 0, 1, 1);
						v13 = x_BYTE_14B4E0[ix];
						v45 = v32 - v12;
						if (v32 - v12 < 0)
							v45 = 0;
						if (v13 > v45)
							x_BYTE_14B4E0[ix] = v45;
						for (jx = x_D41A0_BYTEARRAY_4_struct.dword_38519; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
						{
							if (!jx->byte_0x40_64)
							{
								v15 = abs(v28x.x - jx->array_0x4C_76.x);
								v16 = v15;
								if (v15 >= 0x8000)
									v16 = abs(v15 - 0x10000);
								v17 = abs(v28x.y - jx->array_0x4C_76.y);
								v18 = v17;
								if (v17 >= 0x8000)
									v18 = abs(v17 - 0x10000);
								v19 = v16 * v16;
								v20 = v18 * v18;
								if (v19 + v20 <= 0x64000)
								{
									v31 = sub_7277A_radix_3d((unsigned int)(0x64000 - v19 - v20)) >> 5;
									v30 = jx->array_0x4C_76.z >> 5;
									v45 = v30 - v31;
									if ((signed int)(v30 - v31) < 0)
										v45 = 0;
									if (v45 > 254)
										v45 = 254;
									if (x_BYTE_11B4E0_height[ix] > v45)
										sub_570F0(LOBYTE(ix), HIBYTE(ix), v45, 0, 0, 1);
									v45 = v31 + v30;
									if ((signed int)(v31 + v30) < 0)
										v45 = 0;
									if (v45 > 254)
										v45 = 254;
									if (x_BYTE_14B4E0[ix] < v45)
										x_BYTE_14B4E0[ix] = v45;
								}
							}
						}
					}
					v21 = ix;
					v22 = x_BYTE_11B4E0_height[ix];
					if (x_BYTE_14B4E0[ix] > v22)
					{
						x_BYTE_13B4E0_angle[ix] &= 0xF7u;
					}
					else
					{
						v23 = x_BYTE_13B4E0_angle[ix] | 8;
						x_BYTE_14B4E0[ix] = v22;
						x_BYTE_13B4E0_angle[v21] = v23;
					}
					v9 = ix + 1;
					v40++;
				}
				v34++;
			}
		}
		v7 -= 68;
		v33++;
		v38 += 2;
	}
	if (!a1x->word_0x36_54 && a1x->word_0x2C_44 > 455)
	{
		a1x->word_0x36_54 = 1;
		for (k = 0; k < 2048; k += 28)
		{
			v24 = (v39 << 8) - 768;
			x_WORD_EB398ar = a1x->array_0x4C_76;
			if (v24 < 256)
				v24 = 256;
			if (v24 > 0x2000)
				LOWORD(v24) = 0x2000;
			sub_57FA0(&x_WORD_EB398ar, k, 0, v24);
			v2x = sub_4A190(&x_WORD_EB398ar, 10, 13);
			if (v2x)
			{
				v2x->word_0x1C_28 = k;
				v25 = ix;
				v2x->word_0x86_134 = 512;
				x_WORD_EB398ar.z = 32 * x_BYTE_11B4E0_height[v25];
				/*LOBYTE(v2) = */sub_57CF0(v2x, &x_WORD_EB398ar);
			}
		}
	}
	v26 = a1x->word_0x2C_44 + 22;
	a1x->dword_0x8 += 4;
	a1x->word_0x2C_44 = v26;
	if (v26 > 1024)
		a1x->byte_0x46_70 = 3;
	//return v2;
}

//----- (00031760) --------------------------------------------------------
void sub_31760(type_str_0x6E8E* a1x)//212760
{
	int v1; // eax
	int v2; // esi
	//int16_t v3; // cx
	char v4; // ah
	type_str_0x6E8E* v5x; // eax
	int16_t v6; // dx
	int16_t v7; // di
	Bit32u v8; // eax

	v1 = a1x->dword_0x8;
	a1x->dword_0x8 = v1 - 1;
	if (v1 < 0)
		goto LABEL_17;
	sub_5C870(a1x);
	if (a1x->dword_0x8 < 12)
	{
		if (a1x->dword_0x10_16 > 0)
		{
			//v3 = a1x->str_0x5E_94.word_0x62_98;
			a1x->dword_0x10_16--;
			v4 = a1x->struct_byte_0xc_12_15.byte[0];
			a1x->word_0x5A_90--;// = v3 - 1;
			if (v4 >= 0)
			{
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				if (!(a1x->word_0x14_20 % 7u))
				{
					v5x = sub_4A190(&a1x->array_0x4C_76, 10, 14);
					if (v5x)
					{
						v6 = a1x->word_0x1A_26;
						v5x->dword_0x10_16 = 100;
						v7 = v5x->word_0x5A_90;
						v5x->dword_0x8 = 15;
						v5x->word_0x1A_26 = v6;
						v5x->word_0x5A_90 = v7 + 2;
					}
				}
			}
		}
	}
	else if (a1x->dword_0x10_16 <= 6)
	{
		v2 = a1x->dword_0x10_16 + 1;
		a1x->word_0x5A_90++;
		a1x->dword_0x10_16 = v2;
	}
	a1x->array_0x4C_76.z = a1x->word_0x2C_44 + sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	v8 = sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76);
	if (v8 == 1)
		LABEL_17:
	sub_57F10(a1x);
	if (!(a1x->struct_byte_0xc_12_15.byte[2] & 1))
		/*LOBYTE(v8) = */sub_11400(a1x, 0, a1x->word_0x2A_42);
	//return 1;
}

//----- (00031870) --------------------------------------------------------
void sub_31870(type_str_0x6E8E* a1x)//212870
{
	sub_57F10(a1x);
}

//----- (00031890) --------------------------------------------------------
void sub_31890(type_str_0x6E8E* a1x)//212890
{
	int result; // eax

	result = a1x->dword_0x8;
	a1x->dword_0x8 = result - 1;
	if (result < 0)
		sub_57F10(a1x);
	//return result;
}

//----- (000318B0) --------------------------------------------------------
void sub_318B0(type_str_0x6E8E* a1x)//2128b0
{
	int v1; // edx
	//Bit8u* v2; // eax

	v1 = a1x->dword_0x8;
	a1x->dword_0x8 = v1 - 1;
	if (v1 >= 0)
	{
		sub_585A0(a1x);
		if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
		{
			a1x->struct_byte_0xc_12_15.byte[0] |= 2u;
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 27);
		}
	}
	else
	{
		sub_57F10(a1x);
	}
}

//----- (00031920) --------------------------------------------------------
void sub_31920(type_str_0x6E8E* a1x)//212920
{
	sub_57F10(a1x);
	//return 1;
}

//----- (00031940) --------------------------------------------------------
void sub_31940(type_str_0x6E8E* a1x)//212940
{
	//int v1;
	type_str_0x6E8E* v1x; // eax
	unsigned int v2; // ebx
	int16_t v3; // ST0C_2
	int16_t v4; // ST08_2
	int v5; // esi
	signed int v6; // edi
	int v7; // esi
	int v8; // eax
	uaxis_2d v9x; // bx
	int v10; // edx
	signed int v11; // eax
	int v12; // edx
	int v13; // eax
	int v14; // edx
	int v15; // eax
	uaxis_2d v16x; // bx
	signed int v17; // edx
	signed int v18; // eax
	uaxis_2d v19x; // si
	int v20; // eax
	int v21; // esi
	int v22; // esi
	uaxis_2d v23x; // bx
	int v24; // eax
	signed int v25; // eax
	uaxis_2d v26x; // bx
	int v27; // edx
	signed int v28; // edx
	uaxis_2d v29x; // si
	axis_3d v31x; // [esp+0h] [ebp-3Ch]
	//int16_t v32; // [esp+2h] [ebp-3Ah]
	int v33; // [esp+8h] [ebp-34h]
	int v34; // [esp+Ch] [ebp-30h]
	int v35; // [esp+10h] [ebp-2Ch]
	int v36; // [esp+14h] [ebp-28h]
	uaxis_2d v37x; // [esp+18h] [ebp-24h]
	int v38; // [esp+1Ch] [ebp-20h]
	int v39; // [esp+20h] [ebp-1Ch]
	int v40; // [esp+24h] [ebp-18h]
	int v41; // [esp+28h] [ebp-14h]
	int v42; // [esp+2Ch] [ebp-10h]
	int v43; // [esp+30h] [ebp-Ch]
	uaxis_2d v44x; // [esp+34h] [ebp-8h]
	uaxis_2d v45x; // [esp+38h] [ebp-4h]

	v45x._axis_2d.x = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
	v45x._axis_2d.y = (uint16_t)(a1x->array_0x4C_76.y + 128) >> 8;
	//LOBYTE(v1) = a1x->byte_0x46_70;
	v39 = 0;
	if (a1x->byte_0x46_70 < 1u)
	{
		if (a1x->byte_0x46_70)
			return;
		v2 = a1x->dword_0x4;
		LOBYTE(v2) = v2 | 1;
		sub_49EA0(a1x, (x_WORD)v2 << 8, 0x4000);
		v44x._axis_2d.x = v45x._axis_2d.x - v2;
		v44x._axis_2d.y = v45x._axis_2d.y - v2;
		v3 = (uint8_t)(v45x._axis_2d.y - v2);
		v4 = (uint8_t)(v45x._axis_2d.x - v2);
		LOWORD(v2) = 2 * v2;
		a1x->array_0x4C_76.z = sub_48E60(v4, v3, v2, v2);
		a1x->word_0x2C_44 = v2 + 100;
		if (a1x->array_0x4C_76.z + a1x->word_0x2C_44 > 255)
			a1x->word_0x2C_44 = 255 - a1x->array_0x4C_76.z;
		a1x->byte_0x46_70 = 1;
	}
	else if (a1x->byte_0x46_70 > 1u)
	{
		if (a1x->byte_0x46_70 == 2)
		{
			v43 = a1x->array_0x4C_76.z + a1x->word_0x2C_44 - 24;
			v20 = a1x->array_0x52_82.xshift;
			v21 = v20;
			v20 >>= 8;
			v44x._axis_2d.x = v45x._axis_2d.x - v20;
			v44x._axis_2d.y = v45x._axis_2d.y - v20;
			v22 = v21 >> 7;
			v23x._axis_2d.y = v45x._axis_2d.y - v20;
			v24 = 0;
			if (v22 > 0)
			{
				do
				{
					v23x._axis_2d.x = v44x._axis_2d.x;
					v27 = 0;
					while (v27 < v22)
					{
						if (x_BYTE_11B4E0_height[v23x.word] > v43)
							x_BYTE_11B4E0_height[v23x.word] = v43;
						v27++;
						v23x._axis_2d.x++;
					}
					v24++;
					v23x._axis_2d.y++;
				} while (v24 < v22);
				v25 = 0;
				v26x._axis_2d.y = v45x._axis_2d.y - 1;
			}
			else
			{
				v25 = 0;
				v26x._axis_2d.y = v45x._axis_2d.y - 1;
			}
			while (v25 < 2)
			{
				v28 = 0;
				v26x._axis_2d.x = v45x._axis_2d.x - 1;
				while (v28 < 2)
				{
					x_BYTE_11B4E0_height[v26x.word] = v43 - 16;
					if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
						v36 = 1;
					else
						v36 = 63;
					v29x.word = v26x.word;
					v28++;
					v26x._axis_2d.x++;
					x_BYTE_12B4E0_shading[v29x.word] = v36;
				}
				v25++;
				v26x._axis_2d.y++;
			}
			sub_57F10(a1x);
		}
		return;
	}
	//LOBYTE(v1) = a1;
	v5 = a1x->dword_0x8 - 1;
	a1x->dword_0x8 = v5;
	if (v5 <= 0)
	{
		a1x->byte_0x46_70 = 2;
	}
	else
	{
		v6 = a1x->array_0x52_82.xshift;
		v7 = v6 >> 7;
		v44x._axis_2d.x = v45x._axis_2d.x - BYTE1(v6);
		v34 = v6 - ((((v6 >> 8) - 7) >> 1 << 8) + 512);
		v44x._axis_2d.y = v45x._axis_2d.y - BYTE1(v6);
		v8 = 0;
		for (v9x._axis_2d.y = v45x._axis_2d.y - BYTE1(v6); ; ++v9x._axis_2d.y)
		{
			v41 = v8;
			if (v7 <= v8)
				break;
			v10 = 0;
			for (v9x._axis_2d.x = v44x._axis_2d.x; ; v9x._axis_2d.x++)
			{
				v40 = v10;
				if (v7 <= v10)
					break;
				v31x.x = v9x._axis_2d.x << 8;
				v31x.y = v9x._axis_2d.y << 8;
				v11 = sub_58490_radix_3d_2(&a1x->array_0x4C_76, &v31x);
				v33 = v11;
				if (v11 < v6)
				{
					v12 = (a1x->word_0x2C_44
						* ((x_DWORD)(0x10000 + (signed int)x_DWORD_DB750[0x200+(v11 << 10) / v6]) >> 1) >> 16)
						+ a1x->array_0x4C_76.z;
					v43 = v12;
					v42 = x_BYTE_11B4E0_height[v9x.word];
					v13 = v12;
					v14 = v42;
					if (v13 > v42)
						v14 = (v13 - v42) / a1x->dword_0x8 + v42;
					v43 = v14;
					sub_570F0(v9x._axis_2d.x, v9x._axis_2d.y, v14, 0, v33 <= v34, 1);
					if (x_BYTE_D41B6)
					{
						v43 += 64;
						if (v43 > 254)
							v43 = 254;
						v37x.word = v9x.word;
						v38 = (uint8_t)x_BYTE_14B4E0[v9x.word];
						if (v43 > v38)
						{
							v15 = (v38 - v43) / a1x->dword_0x8;
							v43 = v38 - v15;
							x_BYTE_14B4E0[v37x.word] = v38 - v15;
						}
					}
				}
				if (x_BYTE_D41B6)
				{
					if (x_BYTE_14B4E0[v9x.word] > x_BYTE_11B4E0_height[v9x.word])
						x_BYTE_13B4E0_angle[v9x.word] &= 0xF7u;
					else
						x_BYTE_13B4E0_angle[v9x.word] |= 8u;
				}
				v10 = v40 + 1;
			}
			v8 = v41 + 1;
		}
		if (!D41A0_BYTESTR_0.byte_0x36E03)
			v39 = (int16_t)sub_116A0(a1x, 0, a1x->word_0x2A_42);
		if (v39)
			sub_6D8B0(a1x->word_0x1A_26, 0x12u, v39);
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 10);
		if (D41A0_BYTESTR_0.byte_0x36E03 && !(a1x->byte_0x3E_62 & 3))
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 63);
		//LOBYTE(v1) = a1;
		if (a1x->dword_0x8 == 3)
		{
			v16x._axis_2d.y = v45x._axis_2d.y - 1;
			v17 = 0;
			v43 = a1x->array_0x4C_76.z + a1x->word_0x2C_44 - 24;
			while (v17 < 2)
			{
				v18 = 0;
				v16x._axis_2d.x = v45x._axis_2d.x - 1;
				while (v18 < 2)
				{
					x_BYTE_11B4E0_height[v16x.word] = v43 - 16;
					if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
						v35 = 1;
					else
						v35 = 63;
					v19x.word = v16x.word;
					v18++;
					v16x._axis_2d.x++;
					x_BYTE_12B4E0_shading[v19x.word] = v35;
				}
				v17++;
				v16x._axis_2d.y++;
			}
			x_WORD_EB398ar = a1x->array_0x4C_76;
			x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
			v1x = D41A0_BYTESTR_0.byte_0x36E03 ? sub_4A190(&x_WORD_EB398ar, 10, 91) : sub_4A190(
				&x_WORD_EB398ar,10,18);
			if (v1x)
				v1x->word_0x1A_26 = a1x->word_0x1A_26;
		}
	}
	return;
}

//----- (00031E90) --------------------------------------------------------
void sub_31E90(type_str_0x6E8E* a1x)//212e90
{
	if (!(sub_104A0(&a1x->array_0x4C_76) & 1))
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		sub_572C0(
			a1x,
			0,
			(a1x->array_0x52_82.xshift - (__CFSHL__(a1x->array_0x52_82.xshift >> 31, 8) + (a1x->array_0x52_82.xshift >> 31 << 8))) >> 8,
			0 - (a1x->word_0x14_20 % 7u),
			1);
	}
	sub_57F10(a1x);
	//return 1;
}

//----- (00031F00) --------------------------------------------------------
void sub_31F00(type_str_0x6E8E* a1x, int16_t a2, int16_t a3)//212f00
{
	int v3; // ebx
	int v4; // esi
	int v5; // edi
	//unsigned int result; // eax
	int v7; // ebx
	int v8; // [esp+0h] [ebp-Ch]
	int v9; // [esp+4h] [ebp-8h]
	int v10; // [esp+8h] [ebp-4h]

	LOWORD(v3) = a3;
	v4 = (a1x->array_0x4C_76.x + 128) >> 8;
	v5 = (a1x->array_0x4C_76.y + 128) >> 8;
	if (a3 > ((a1x->array_0x52_82.xshift - (my_sign32(a1x->array_0x52_82.xshift)<<8) + my_sign32(a1x->array_0x52_82.xshift))) >> 8)
		v3 = ((a1x->array_0x52_82.xshift - (my_sign32(a1x->array_0x52_82.xshift) << 8) + my_sign32(a1x->array_0x52_82.xshift))) >> 8;
	v10 = -3;
	v7 = sub_10080(a2, (int16_t)v3);
	//v7 = result;
	if (v7)
	{
		while (sub_10130(v7, &v9, &v8) == 1)
			sub_56F10(v4 + v9, v5 + v8, v10, 0);
		sub_10100(v7);
	}
	//return result;
}

//----- (00031FB0) --------------------------------------------------------
void sub_31FB0(type_str_0x6E8E* a1x)//212fb0
{
	int v1; // edx
	uint16_t v2; // ax
	int16_t v3; // ax
	uint16_t v4; // dx
	int v5; // eax
	int16_t v6; // si

	if (!(a1x->byte_0x3E_62 % 3))
		a1x->dword_0x10_16++;
	v1 = a1x->dword_0x8;
	a1x->dword_0x8 = v1 - 1;
	if (v1 < 0 || sub_104A0(&a1x->array_0x4C_76) & 1)
	{
		sub_57F10(a1x);
	}
	else
	{
		if (a1x->struct_byte_0xc_12_15.byte[0] & 2)
			v2 = a1x->word_0x2A_42 / 25;
		else
			v2 = a1x->word_0x2A_42;
		v3 = sub_116A0(a1x, 0, v2);
		if (v3)
		{
			v4 = a1x->word_0x26_38;
			if (v4 >= 0xBu)
			{
				if (v4 <= 0xBu)
				{
					sub_6D8B0(a1x->word_0x1A_26, 0x10u, v3);
				}
				else if (v4 == 15)
				{
					sub_6D8B0(a1x->word_0x1A_26, 0x11u, v3);
				}
			}
		}
		//v5 = (a1x->array_0x52_82.xshift-(__CFSHL__(a1x->array_0x52_82.xshift >> 31, 8)+ (a1x->array_0x52_82.xshift >> 31 << 8))) >> 8;
		v5 = (a1x->array_0x52_82.xshift - (my_sign32(a1x->array_0x52_82.xshift) << 8) + my_sign32(a1x->array_0x52_82.xshift)) >> 8;
		v6 = a1x->dword_0x10_16;
		if (v6 > v5 - 1)
		{
			v6 = v5 - 1;
			if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
				sub_31F00(a1x, v5, v5);
		}
		a1x->struct_byte_0xc_12_15.byte[0] |= 2u;
		sub_31F00(a1x, 0, v6);
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 10);
	}
}

//----- (000320E0) --------------------------------------------------------
void sub_320E0(type_str_0x6E8E* a1x)//2130e0
{
	int v1; // eax

	v1 = a1x->dword_0x8;
	a1x->dword_0x10_16++;
	a1x->dword_0x8 = v1 - 1;
	if (v1 < 0)
	{
		sub_57F10(a1x);
		return;
	}
	sub_585A0(a1x);
	sub_112D0(a1x, 0);
}

//----- (00032120) --------------------------------------------------------
void sub_32120(type_str_0x6E8E* a1x)//213120
{
	int v1; // eax

	v1 = a1x->dword_0x8;
	a1x->dword_0x10_16++;
	a1x->dword_0x8 = v1 - 1;
	if (v1 < 0)
	{
		sub_57F10(a1x);
		return;
	}
	sub_585A0(a1x);
	sub_112D0(a1x, 1u);
}

//----- (00032160) --------------------------------------------------------
void sub_32160(type_str_0x6E8E* a1x)//213160
{
	int v1; // eax
	int16_t v3; // dx
	int16_t v4; // ax
	int v5; // edx
	int16_t v6; // ax
	int16_t v7; // si
	int16_t v8; // ax

	v1 = a1x->dword_0x8;
	a1x->dword_0x8 = v1 - 1;
	if (v1 < 0)
	{
		sub_57F10(a1x);
		return;
	}
	x_WORD_EB398ar = a1x->array_0x4C_76;
	v3 = a1x->word_0x82_130 - 4;
	a1x->word_0x82_130 = v3;
	if (v3 < 64)
		a1x->word_0x82_130 = 64;
	if (a1x->word_0x82_130 > 128)
		a1x->word_0x82_130 = 128;
	x_WORD_EB398ar.z += a1x->word_0x82_130;
	v4 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	if (x_WORD_EB398ar.z < v4)
		x_WORD_EB398ar.z = v4;
	v5 = a1x->dword_0x10_16 + 1;
	a1x->dword_0x10_16 = v5;
	if (v5 < 16)
	{
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x86_134);
		v6 = a1x->word_0x86_134 - 52;
		a1x->word_0x86_134 = v6;
		if (v6 < 30)
			a1x->word_0x86_134 = 30;
		if (a1x->word_0x86_134 > 1024)
			a1x->word_0x86_134 = 1024;
		if (!(a1x->dword_0x10_16 & 1))
		{
			v7 = a1x->word_0x5A_90;
			if (v7 < 74)
				a1x->word_0x5A_90 = v7 + 1;
		}
	}
	if (a1x->dword_0x8 < 6)
	{
		v8 = a1x->word_0x5A_90;
		if (v8 > 67)
			a1x->word_0x5A_90 = v8 - 1;
	}
	sub_57CF0(a1x, &x_WORD_EB398ar);
}

//----- (000322A0) --------------------------------------------------------
void sub_322A0(type_str_0x6E8E* a1x)//2132a0
{
	//int v1; // eax
	//int16_t v3; // dx
	int16_t v4; // ax
	//int v5; // edx
	//int16_t v6; // ax
	//int16_t v7; // si
	//int16_t v8; // ax

	//v1 = a1x->dword_0x8;
	//a1x->dword_0x8--;
	if (a1x->dword_0x8-- < 0)
	{
		sub_57F10(a1x);
		return;
	}
	x_WORD_EB398ar = a1x->array_0x4C_76;
	//v3 = a1x->word_0x82_130 - 4;
	a1x->word_0x82_130 -= 4;
	if (a1x->word_0x82_130 < 64)
		a1x->word_0x82_130 = 64;
	if (a1x->word_0x82_130 > 128)
		a1x->word_0x82_130 = 128;
	x_WORD_EB398ar.z += a1x->word_0x82_130;
	v4 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	if (x_WORD_EB398ar.z < v4)
		x_WORD_EB398ar.z = v4;
	//v5 = a1x->dword_0x10_16 + 1;
	a1x->dword_0x10_16++;
	if (a1x->dword_0x10_16 < 16)
	{
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x86_134);
		//v6 = a1x->word_0x86_134 - 52;
		a1x->word_0x86_134 -= 52;
		if (a1x->word_0x86_134 < 30)
			a1x->word_0x86_134 = 30;
		if (a1x->word_0x86_134 > 1024)
			a1x->word_0x86_134 = 1024;
		if (!(a1x->dword_0x10_16 & 1))
		{
			//v7 = a1x->word_0x5A_90;
			if (a1x->word_0x5A_90 < 16)
				a1x->word_0x5A_90++;
		}
	}
	if (a1x->dword_0x8 < 6)
	{
		//v8 = a1x->word_0x5A_90;
		if (a1x->word_0x5A_90 > 9)
			a1x->word_0x5A_90--;
	}
	sub_57CF0(a1x, &x_WORD_EB398ar);
}

//----- (000323E0) --------------------------------------------------------
void sub_323E0(type_str_0x6E8E* a1x)//2133e0
{
	sub_32420(a1x);
}

//----- (00032400) --------------------------------------------------------
void sub_32400(type_str_0x6E8E* a1x)//213400
{
	sub_32420(a1x);
}

//----- (00032420) --------------------------------------------------------
void sub_32420(type_str_0x6E8E* a1x)//213420
{
	type_str_0x6E8E* v1x; // ecx
	//int v2; // eax
	//int v3; // eax
	//Bit8u v3a;
	int16_t v4; // dx
	int16_t v5; // ax
	//int16_t v6; // dx
	//int16_t v7; // ax
	axis_3d v9x;
	//Bit16s v9x[4]; // [esp+0h] [ebp-8h]
	//int16_t v10; // [esp+4h] [ebp-4h]

	//dw_w v9y;

	//fix
	//v9x[3] = 0;
	v1x = 0;
	//fix

	//v2 = *(x_DWORD *)(a1 + 8);
	a1x->dword_0x8--;
	if (a1x->dword_0x8+1 < 0)
	{
		sub_57F10(a1x);
		return;
	}
	v9x = a1x->array_0x4C_76;
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	v9x.x += a1x->word_0x14_20 % 0xA0u;
	//v9y.dw += *(Bit16u*)(a1 + 20) % 0xA0u;
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	v9x.z += a1x->word_0x14_20 % 0xA0u;
	//v9y.w += *(Bit16u*)(a1 + 20) % 0xA0u;
 	//v3a = *(a1 + 64);
	if (a1x->byte_0x40_64 == 0x3Bu)
		v1x = sub_4E9E0(&v9x);
	else if (a1x->byte_0x40_64 == 0x3Cu)
		v1x = sub_4EA20(&v9x);
	//v1 = v3;
//LABEL_10:
	if (v1x)
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v4 = a1x->word_0x14_20 % 0x4Du;
		v5 = a1x->word_0x82_130;
		v1x->dword_0x8 = 32;
		//v6 = v5 + v4;
		//v7 = a1x->word_0x82_130;
		v1x->dword_0x4 = 32;
		//LOWORD(v3) = v6 + v7;
		v1x->word_0x82_130 += v5 + v4;
	}
	//return v3;
}

void sub_32520__wcpp_1_unwind_leave__69(type_str_0x6E8E* a1x)//213520
{
}

//----- (00032530) --------------------------------------------------------
void sub_32530(type_str_0x6E8E* a1x)//213530
{
	//int v1; // ecx
	//int v2; // eax
	type_str_0x6E8E* resultx; // eax
	//int16_t v4; // dx

	if (sub_104A0(&a1x->array_0x4C_76) & 1)
	{
		a1x->dword_0x10_16++;
	}
	else
	{
		//v1 = a1x->dword_0x10_16;
		if (a1x->dword_0x10_16 > 0)
			a1x->dword_0x10_16--;// = v1 - 1;
	}
	//v2 = a1x->dword_0x8;
	a1x->dword_0x8--;// = v2 - 1;
	if (a1x->dword_0x8 < -1 || a1x->dword_0x10_16 > 8)
	{
		sub_57F10(a1x);
		return;
	}
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	a1x->word_0x1C_28 = (a1x->word_0x14_20 % 0x5Bu + a1x->word_0x1C_28 - 45) & 0x7FF;
	sub_57FA0(&a1x->array_0x4C_76, a1x->word_0x1C_28, 0, 256);
	resultx = sub_4A190(&a1x->array_0x4C_76, 10, 11);
	if (resultx)
	{
		resultx->array_0x52_82.xshift = a1x->array_0x52_82.xshift;
		resultx->array_0x52_82.yshift = a1x->array_0x52_82.yshift;
		resultx->array_0x52_82.dd = a1x->array_0x52_82.dd;
		resultx->dword_0x8 = 10;
		//v4 = a1x->word_0x1A_26;
		resultx->word_0x26_38 = 15;
		resultx->word_0x1A_26 = a1x->word_0x1A_26;
	}
	//return result;
}

//----- (00032600) --------------------------------------------------------
void sub_32600(type_str_0x6E8E* a1x)//213600
{
	int v1; // eax
	int v2; // eax
	char v3; // ah
	//int16_t v4; // di
	//int16_t v5; // ax
	//int16_t v6; // ax
	Bit16s v7; // si
	int v8; // edx
	type_str_0x6E8E* v9x; // eax
	type_str_0x6E8E* v10x; // eax
	int16_t v11; // cx
	int v12; // eax
	//Bit16s v13; // edx

	v1 = a1x->dword_0x8;
	a1x->dword_0x8 = v1 - 1;
	if (v1 >= 0)
	{
		v3 = a1x->struct_byte_0xc_12_15.byte[0];
		if (!(v3 & 2))
			a1x->struct_byte_0xc_12_15.byte[0] = v3 | 2;
		if ((Bit16s)a1x->word_0x9A_154x.x < -80)
			a1x->word_0x9A_154x.x = -80;
		if ((Bit16s)a1x->word_0x9A_154x.x > 80)
			a1x->word_0x9A_154x.x = 80;
		if ((Bit16s)a1x->word_0x9A_154x.y < -80)
			a1x->word_0x9A_154x.y = -80;
		if ((Bit16s)a1x->word_0x9A_154x.y > 80)
			a1x->word_0x9A_154x.y = 80;
		x_WORD_EB398ar = a1x->array_0x4C_76;
		//v4 = a1x->word_0x9A_154[1];
		x_WORD_EB398ar.x = a1x->word_0x9A_154x.x + a1x->array_0x4C_76.x;
		x_WORD_EB398ar.y = a1x->word_0x9A_154x.y + a1x->array_0x4C_76.y;
		//v5 = *(x_WORD *)(a1 + 44);
		x_WORD_EB398ar.z += a1x->word_0x2C_44;
		a1x->word_0x2C_44 -=28;
		if (a1x->word_0x2C_44 < -384)
			a1x->word_0x2C_44 = -384;
		if (a1x->word_0x2C_44 > 256)
			a1x->word_0x2C_44 = 256;
		//v6 = sub_10C40_getTerrainAlt(x_WORD_EB398ar);
		v7 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
		if (v7 > x_WORD_EB398ar.z)
		{
			v8 = a1x->word_0x2C_44;
			x_WORD_EB398ar.z = v7;
			//a1x->word_0x2C_44 = -((v8 - (__CFSHL__(v8 >> 31, 2) + 4 * (v8 >> 31))) >> 2);
			a1x->word_0x2C_44 = -((v8-(my_sign32(v8)<<2)+my_sign32(v8))>>2);
			if (sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 1)
			{
				v9x = sub_4A190(&x_WORD_EB398ar, 10, 5);
				if (v9x)
				{
					v9x->word_0x1A_26 = a1x->word_0x1A_26;
					sub_57F10(a1x);
				}
			}
			else
			{
				if (!sub_10B70(&x_WORD_EB398ar, 10, 6))
				{
					v10x = sub_4A190(&x_WORD_EB398ar, 10, 6);
					if (v10x)
					{
						v11 = v10x->word_0x2A_42;
						v10x->word_0x1A_26 = a1x->word_0x1A_26;
						v10x->dword_0x8 = 30;
						v10x->word_0x2A_42 = 3 * v11;
						a1x->dword_0x10_16 = 0;
					}
				}
				if (a1x->word_0x2C_44 <= 28)
					a1x->word_0x2C_44 = 0;
			}
		}
		a1x->dword_0x10_16++;
		sub_57CF0(a1x, &x_WORD_EB398ar);
		//LOWORD(v2) = x_WORD_EB398ar.z;
		if (v7 == x_WORD_EB398ar.z)
		{
			sub_58030(&a1x->array_0x4C_76, &x_WORD_EB398ar);
			a1x->word_0x9A_154x.x += x_WORD_EB398ar.x;
			//v12 = (250 * a1x->word_0x9A_154x.x - (__CFSHL__(250 * a1x->word_0x9A_154x.x >> 31, 8) + (250 * a1x->word_0x9A_154x.x >> 31 << 8))) >> 8;
			v12 = ((250 * (Bit16s)a1x->word_0x9A_154x.x)-(my_sign32(250 * (Bit16s)a1x->word_0x9A_154x.x)<<8)+ my_sign32(250 * (Bit16s)a1x->word_0x9A_154x.x)) >> 8;
			a1x->word_0x9A_154x.y += x_WORD_EB398ar.y;
			//v13 = a1x->word_0x9A_154x.y;
			a1x->word_0x9A_154x.x = v12;
			//v2 = (250 * v13 - (__CFSHL__(250 * v13 >> 31, 8) + (250 * v13 >> 31 << 8))) >> 8;
			v2 = ((250 * (Bit16s)a1x->word_0x9A_154x.y) - (my_sign32(250 * (Bit16s)a1x->word_0x9A_154x.y) << 8) + my_sign32(250 * (Bit16s)a1x->word_0x9A_154x.y)) >> 8;
			a1x->word_0x9A_154x.y = v2;
		}
	}
	else
	{
		sub_57F10(a1x);
	}
	//return v2;
}

//----- (00032880) --------------------------------------------------------
void sub_32880(type_str_0x6E8E* a1x)//213880
{
	int v1; // edx
	//int result; // eax
	//int v3; // edx
	int16_t v4; // ax
	int v5; // edi
	type_str_0x6E8E* v6x; // eax
	//Bit8u* v7; // esi
	//int v8; // ecx
	axis_3d v9x; // [esp+0h] [ebp-10h]
	//int16_t v10; // [esp+2h] [ebp-Eh]
	//int16_t v11; // [esp+4h] [ebp-Ch]
	int v12; // [esp+8h] [ebp-8h]
	int v13; // [esp+Ch] [ebp-4h]

	v1 = a1x->dword_0x8 - 1;
	a1x->dword_0x8 = v1;
	if (v1 < 0)
	{
		sub_57F10(a1x);
		return;
	}
	if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
	{
		a1x->struct_byte_0xc_12_15.dword |= 0x10002;
		//a1x->byte_0xc_12 |= 0x02;
		//a1x->byte_0xe_14 |= 0x1;
		sub_6E450_distance_sound(a1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 30);
	}
	//sub_49EA0(a1x,(768 * a1x->dword_0x10_16- (__CFSHL__(768 * a1x->dword_0x10_16 >> 31, 2)+ 4 * (768 * a1x->dword_0x10_16 >> 31))) >> 2,512);
	sub_49EA0(a1x, (768 * a1x->dword_0x10_16 - my_sign32(768 * a1x->dword_0x10_16) * 5) >> 2, 512);

	//my_sign(768 * a1x->dword_0x10_16)

	v4 = sub_10C80(a1x, 0, a1x->word_0x2A_42 / a1x->dword_0x4);
	if (v4)
		sub_6D8B0(a1x->word_0x1A_26, 9u, v4);
	v5 = sub_10080(a1x->dword_0x10_16, a1x->dword_0x10_16);
	if (v5)
	{
		while (sub_10130(v5, &v12, &v13) == 1)
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v9x.x = a1x->array_0x4C_76.x - 96 + 160 * v12 + a1x->word_0x14_20 % 0x81u - 64;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v9x.y = a1x->word_0x14_20 % 0x81u + 160 * v13 + a1x->array_0x4C_76.y - 96 - 64;
			v9x.z = a1x->array_0x4C_76.z;
			v6x = sub_4A190(&v9x, 10, 0);
			//v7 = v6;
			if (v6x)
			{
				//v8 = v6x->byte_0xc_12;
				v6x->word_0x1A_26 = a1x->word_0x1A_26;
				v6x->word_0x1C_28 = a1x->word_0x1C_28;
				//v6x->byte_0xc_12 = 0x10080 | v8;//(unsigned int)sub_10080 | v8;
				v6x->struct_byte_0xc_12_15.dword |= 0x10080;
				//v6x->byte_0xc_12 |= 0x80;
				//v6x->byte_0xe_14 |= 0x1;
				sub_49EA0(v6x, 512, 512);
				v6x->dword_0x10_16 = 0;
			}
		}
		sub_10100(v5);
	}
	//result = (a1x->dword_0x10_16 + 2) / 11;
	a1x->dword_0x10_16 = (a1x->dword_0x10_16 + 2) % 11;
	//return result;
}

//----- (00032A70) --------------------------------------------------------
void sub_32A70(type_str_0x6E8E* a1x)//213a70
{
	int16_t v1; // si
	int16_t v2; // ax
	int16_t v3; // si
	int16_t v4; // ax
	type_str_0x6E8E* v5x; // eax
	type_str_0x6E8E* v6x; // eax
	//Bit8u* v7; // esi
	type_str_0x6E8E* v8x; // eax
	//int16_t v9; // dx
	int v10; // esi
	int16_t v11; // ax
	type_str_0x6E8E* v12x; // [esp+0h] [ebp-4h]

	if (a1x->dword_0x10_16 > 2500)
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		if (!(a1x->word_0x14_20 % 0x64u) && !D41A0_BYTESTR_0.word_0x31)
		{
			v1 = a1x->array_0x4C_76.z;
			v2 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
			a1x->array_0x4C_76.z = v2;
			if (v1 != v2)
			{
				sub_57F10(a1x);
				return;
			}
			a1x->dword_0x10_16 = 0;
		}
	}
	if (a1x->dword_0x10_16 < 128
		&& a1x->dword_0x10_16 & 0xF
		&& (a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439, !(a1x->word_0x14_20 % 5u))
		|| !a1x->dword_0x10_16)
	{
		v3 = a1x->array_0x4C_76.z;
		v4 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		a1x->array_0x4C_76.z = v4;
		if (v3 != v4)
		{
			sub_57F10(a1x);
			D41A0_BYTESTR_0.word_0x31 = 0;
			return;
		}
		if (!a1x->dword_0x10_16)
		{
			v5x = x_DWORD_EA3E4[D41A0_BYTESTR_0.word_0x31];
			if (v5x > x_DWORD_EA3E4[0])
				v5x->dword_0x10_16 = 250;
			D41A0_BYTESTR_0.word_0x31 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
			v6x = sub_4A190(&a1x->array_0x4C_76, 10, 19);
			//v7 = v6;
			if (v6x)
			{
				v6x->word_0x1A_26 = a1x->word_0x1A_26;
				if (x_DWORD_EA3E4[D41A0_BYTESTR_0.word_0x33] > x_DWORD_EA3E4[0])
					sub_57F10(x_DWORD_EA3E4[D41A0_BYTESTR_0.word_0x33]);
				D41A0_BYTESTR_0.word_0x33 = v6x-D41A0_BYTESTR_0.struct_0x6E8E;
			}
		}
		v8x = sub_4A190(&a1x->array_0x4C_76, 10, 16);
		if (v8x)
		{
			v8x->word_0x1A_26 = a1x->word_0x1A_26;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			//a1x->word_0x14_20 = v9;
			v8x->word_0x14_20 = a1x->word_0x14_20;
		}
		v10 = a1x->dword_0x10_16;
		a1x->word_0x1C_28 += 1280;
		if (!v10)
		{
			v12x = sub_4A190(&a1x->array_0x4C_76, 9, 0);
			if (v12x)
			{
				v12x->word_0x1A_26 = a1x->word_0x1A_26;
				v11 = a1x->word_0x1C_28;
				v12x->word_0x1E_30 = -386;
				v12x->byte_0x43_67 = 10;
				v12x->byte_0x44_68 = 17;
				HIBYTE(v11) &= 7u;
				v12x->dword_0x8 = 1;
				v12x->word_0x1C_28 = v11;
				v12x->word_0x9A_154x = a1x->array_0x4C_76;
				sub_57FA0(&v12x->word_0x9A_154x, v12x->word_0x1C_28, 0, 1536);
				v12x->word_0x9A_154x.z = sub_10C40_getTerrainAlt(&v12x->word_0x9A_154x);
			}
		}
		if (a1x->dword_0x10_16 >= 127)
		{
			sub_57F10(a1x);
			D41A0_BYTESTR_0.word_0x31 = 0;
		}
	}
	a1x->dword_0x10_16++;
}

//----- (00032CF0) --------------------------------------------------------
void sub_32CF0(type_str_0x6E8E* a1x)//213cf0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ecx
	//Bit8u* v3; // ebx
	char v4; // ah
	int16_t v5; // dx
	int16_t v6; // ax
	unsigned int v7; // ecx
	signed int v8; // esi
	int16_t v9; // ax
	int16_t v10; // ax
	//int16_t v11; // cx
	//char *v12; // esi
	int v12x;
	signed int v13; // ebx
	int v14; // ST0C_4
	uint16_t v15; // ST08_2
	signed int i; // [esp+0h] [ebp-4h]

	//fix
	//v3 = 0;
	//fix

	for (i = 0; i < 3; i++)
	{
		v1x = sub_4A190(&a1x->array_0x4C_76, 10, 39);
		//v2 = v1;
		//v3 = v1;
		if (v1x)
		{
			v4 = v1x->struct_byte_0xc_12_15.byte[1] | 0x20;
			v1x->dword_0x4 = 140;
			v1x->struct_byte_0xc_12_15.byte[1] = v4;
			v1x->dword_0x8 = v1x->dword_0x4;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v5 = a1x->word_0x14_20 % 0x300u;
			v1x->word_0x82_130 = v5;
			if (v5 < 64)
				v1x->word_0x82_130 = 64;
			if (v1x->word_0x82_130 > 768)
				v1x->word_0x82_130 = 768;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v6 = a1x->word_0x14_20 & 0x7F;
			v1x->word_0x94_148 = 0;
			v1x->word_0x2C_44 = v6 + 128;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v7 = a1x->word_0x14_20 % 9u - 1;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v8 = 0;
			v1x->dword_0x90_144 = a1x->word_0x14_20 % 0xA00u + 1;
			while (v8 < 7 && v1x->dword_0x90_144 > x_DWORD_DB538[v8])
				v8++;
			v9 = sub_36A50(/*(int)v3, */v7);
			sub_49CD0(v1x, v8 + v9);
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v10 = a1x->word_0x14_20 & 0x7FF;
			v1x->word_0x1E_30 = 0;
			v1x->word_0x1C_28 = v10;
			v1x->word_0x20_32 = v1x->word_0x1C_28;
			v1x->word_0x9A_154x = a1x->array_0x4C_76;
			sub_57FA0(&v1x->word_0x9A_154x, v1x->word_0x1C_28, 0, v1x->word_0x82_130);
			//v11 = v1x->word_0x9A_154x[1] - v1x->array_0x4C_76.y;
			v1x->word_0x9A_154x.x -= v1x->array_0x4C_76.x;
			v1x->word_0x9A_154x.y -= v1x->array_0x4C_76.y;
			v1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&v1x->array_0x4C_76) + 96;
		}
	}
	if (!(a1x->byte_0x3E_62 & 1))
	{
		//v12 = (char*)&(*xadataspellsdat.var28_begin_buffer)[0];
		v12x = 0;
		v13 = 0;
		while (v13 < 26)
		{
			//v14 = (*(x_DWORD *)(v12 + 66) - (__CFSHL__(*(x_DWORD *)(v12 + 66) >> 31, 9) + (*(x_DWORD *)(v12 + 66) >> 31 << 9))) >> 9;
			v14=(SPELLS_BEGIN_BUFFER_str[v12x].subspell[2].dword_E - (my_sign32(SPELLS_BEGIN_BUFFER_str[v12x].subspell[2].dword_E) << 9) + my_sign32(SPELLS_BEGIN_BUFFER_str[v12x].subspell[2].dword_E)) >> 9;
			
			v15 = v13++;
			//v12 += 80;
			v12x++;
			sub_6D8B0(D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240, v15, v14);
		}
	}
}

//----- (00032F40) --------------------------------------------------------
void sub_32F40(type_str_0x6E8E* a1x)//213f40
{
	int v1; // eax
	int v2; // esi
	type_str_0x6E8E* v3x; // eax
	axis_3d v5x; // [esp+0h] [ebp-14h]
	//int16_t v6; // [esp+2h] [ebp-12h]
	//int16_t v7; // [esp+4h] [ebp-10h]
	int v8; // [esp+8h] [ebp-Ch]
	int v9; // [esp+Ch] [ebp-8h]
	int v10; // [esp+10h] [ebp-4h]

	v1 = a1x->dword_0x8;
	a1x->dword_0x8 = v1 - 1;
	if (v1 >= 0)
	{
		a1x->dword_0x10_16 = 0;
		v2 = sub_10080(0, a1x->dword_0x10_16);
		if (v2)
		{
			while (sub_10130(v2, &v9, &v8) == 1)
			{
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				if (2 * ((signed int)(a1x->word_0x14_20 % 0x9Du) / 79) - 1 > 0)
				{
					a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
					v5x.x = a1x->word_0x14_20 % 0x81u + a1x->array_0x4C_76.x - 96 + 192 * v9 - 64;
					a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
					v5x.y = a1x->array_0x4C_76.y - 96 + 192 * v8 + a1x->word_0x14_20 % 0x81u - 64;
					v5x.z = a1x->array_0x4C_76.z;
					if (a1x->dword_0x8 & 1)
					{
						LOWORD(v10) = (a1x->dword_0x8 / 2 & 1) << 8;
						while ((uint16_t)v10 < 0x800u)
						{
							v3x = sub_4A190(&v5x, 10, 14);
							if (v3x)
							{
								v3x->word_0x1A_26 = a1x->word_0x1A_26;
								v3x->word_0x1C_28 = v10;
							}
							BYTE1(v10) += 2;
						}
					}
				}
			}
			sub_10100(v2);
		}
		a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	}
	else
	{
		sub_57F10(a1x);
		D41A0_BYTESTR_0.word_0x33 = 0;
	}
	/*return */sub_10C80(a1x, 0, a1x->word_0x2A_42);
}

//----- (00033110) --------------------------------------------------------
void sub_33110(type_str_0x6E8E* a1x)//214110
{
	int v1; // edx

	v1 = a1x->dword_0x8 - 1;
	a1x->dword_0x8 = v1;
	if (v1 < 0)
	{
		sub_6EAB0(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 49);
		sub_338D0(a1x);
	}
	else
	{
		sub_331A0(a1x);
		sub_33340(a1x);
		sub_33710(a1x);
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 49);
	}
}

//----- (000331A0) --------------------------------------------------------
void sub_331A0(type_str_0x6E8E* a1x)//2141a0
{
	int16_t v1; // ax
	int16_t v2; // ax
	type_str_0x6E8E* resultx; // eax
	axis_3d* v4; // edi
	signed int v5; // eax
	int v6; // edi
	type_str_0x6E8E* v7x; // [esp+0h] [ebp-4h]

	x_WORD_EB398ar = a1x->array_0x4C_76;
	a1x->word_0x30_48 = x_WORD_EB398ar.z;
	if (!(a1x->byte_0x3E_62 & 0xF))
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		if (!(a1x->word_0x14_20 & 1))
			a1x->word_0x2E_46 = -a1x->word_0x2E_46;
	}
	v1 = a1x->word_0x20_32 + 11 * a1x->word_0x2E_46;
	HIBYTE(v1) &= 7u;
	a1x->word_0x20_32 = v1;
	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x20_32, 0, 32);
	a1x->word_0x9A_154x = x_WORD_EB398ar;
	v2 = a1x->word_0x1C_28 + 341;
	HIBYTE(v2) &= 7u;
	a1x->word_0x1C_28 = v2;
	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, 120);
	x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
	sub_57CF0(a1x, &x_WORD_EB398ar);
	v7x = x_DWORD_EA3E4[a1x->word_0x34_52];
	resultx = a1x;
	while (v7x > x_DWORD_EA3E4[0])
	{
		x_WORD_EB398ar = v7x->array_0x4C_76;
		v4 = &resultx->array_0x4C_76;
		v7x->word_0x1C_28 = sub_581E0_maybe_tan2(&v7x->array_0x4C_76, &resultx->array_0x4C_76);
		v5 = sub_58490_radix_3d_2(v4, &v7x->array_0x4C_76);
		v6 = 72 - 4 * (12 - v7x->word_0x2C_44);
		if (v5 > v6)
			sub_57FA0(&x_WORD_EB398ar, v7x->word_0x1C_28, 0, v5 - v6);
		x_WORD_EB398ar.z = v7x->word_0x36_54 + a1x->array_0x4C_76.z;
		sub_57CF0(v7x, &x_WORD_EB398ar);
		resultx = v7x;
		v7x = x_DWORD_EA3E4[v7x->word_0x34_52];
	}
	//return resultx;
}

//----- (00033340) --------------------------------------------------------
void sub_33340(type_str_0x6E8E* a1x)//214340
{
	type_str_0x6E8E* ix; // ebx
	char v2; // dl
	signed int v3; // eax
	signed int v4; // eax
	int v5; // eax
	int16_t v6; // dx
	//int v7; // eax
	int16_t v8; // cx
	int v9; // edi
	int16_t v10; // si
	int16_t v11; // ax
	int16_t v12; // cx
	unsigned int v13; // esi
	int16_t v14; // dx
	int16_t v15; // ax
	int16_t v16; // ax
	char v17; // ch
	//int v18; // edx
	int v19; // edi
	int v20; // esi
	//int v21; // eax
	int16_t v22; // ST10_2
	int v23; // ST0C_4
	int v24; // ST08_4
	int16_t v25; // ax
	uint16_t v26; // ST10_2
	int v27; // esi
	int v28; // [esp+0h] [ebp-34h]
	int v29; // [esp+4h] [ebp-30h]
	int v30; // [esp+8h] [ebp-2Ch]
	int v31; // [esp+Ch] [ebp-28h]
	int v32; // [esp+10h] [ebp-24h]
	int v33; // [esp+14h] [ebp-20h]
	int v34; // [esp+18h] [ebp-1Ch]
	int v35; // [esp+1Ch] [ebp-18h]
	int v36; // [esp+20h] [ebp-14h]
	int v37; // [esp+24h] [ebp-10h]
	int v38; // [esp+28h] [ebp-Ch]
	char v39; // [esp+2Ch] [ebp-8h]
	bool v40; // [esp+30h] [ebp-4h]

	v31 = 0;
	v32 = (a1x->array_0x4C_76.x + 128) >> 8;
	v36 = (a1x->array_0x4C_76.y + 128) >> 8;
	v35 = sub_10080(0, 12);
	if (v35)
	{
		while (1)
		{
			v27 = v35;
			if (sub_10130(v35, &v29, &v28) != 1)
				break;
			for (ix = x_DWORD_EA3E4[x_WORD_15B4E0_source[(uint8_t)(v29 + v32) + ((uint8_t)(v28 + v36) << 8)]];
				ix != x_DWORD_EA3E4[0];
				ix = x_DWORD_EA3E4[ix->word_0x16_22])
			{
				if (sub_33810(a1x, ix))
				{
					v2 = ix->byte_0x3F_63;
					v39 = 0;
					v37 = 0;
					v30 = 0;
					v40 = v2 == 3 && !ix->byte_0x40_64;
					if (v40)
						v3 = 56;
					else
						v3 = 204;
					v38 = v3;
					if (v40)
						v4 = 384;
					else
						v4 = 768;
					v34 = v4;
					v5 = sub_584D0_SQdistX_SQdistY(&a1x->word_0x9A_154x, &ix->array_0x4C_76);
					v33 = v5;
					if (v5 >= 3211264)
					{
						x_WORD_EB398ar = ix->array_0x4C_76;
						if (ix->struct_byte_0xc_12_15.byte[3] & 0x10)
						{
							v17 = ix->struct_byte_0xc_12_15.byte[1] | 8;
							v39 = 1;
							//v18 = ix->dword_0xA0_160;
							ix->struct_byte_0xc_12_15.byte[1] = v17;
							v37 = ix->dword_0xA0_160x->word_160_0xe_14;
							//LOWORD(v18) = v38 + ix->word_0x1C_28;
							//BYTE1(v18) &= 7u;
							v30 = 64;
							ix->word_0x1C_28 = (v38 + ix->word_0x1C_28)&0x7ffu;
							if (v5 >= 5308416)
								ix->struct_byte_0xc_12_15.byte[3] &= 0xEFu;
						}
					}
					else
					{
						v6 = sub_581E0_maybe_tan2(&a1x->word_0x9A_154x, &ix->array_0x4C_76);
						if (ix->struct_byte_0xc_12_15.byte[3] & 0x10)
						{
							ix->struct_byte_0xc_12_15.byte[1] |= 8u;
							v30 = 128;
							x_WORD_EB398ar = ix->array_0x4C_76;
							v15 = ix->word_0x1C_28;
							v39 = 1;
							v16 = v38 + v15;
							v16 &= 0x7ffu;
							x_WORD_EB398ar.z += 114;
							ix->word_0x1C_28 = v16;
						}
						else
						{
							if (v40)
							{
								//v7 = ix->dword_0xA4_164;
								v8 = ix->dword_0xA4_164x->word_0x155_341;
								if (v8 < 256)
									ix->dword_0xA4_164x->word_0x155_341 = v8 + 28;
								ix->word_0x82_130 = 80;
							}
							if (v33 >= 0x40000)
							{
								v14 = v6 + 591;
								v14 &= 0x7ffu;
								x_WORD_EB398ar = ix->array_0x4C_76;
								ix->word_0x30_48 = v14;
								ix->word_0x1C_28 = v14;
								v30 = 96;
							}
							else
							{
								ix->struct_byte_0xc_12_15.byte[1] |= 8u;
								x_WORD_EB398ar = a1x->word_0x9A_154x;
								v9 = ix->array_0x4C_76.z - a1x->word_0x30_48 + 57;
								v10 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
								x_WORD_EB398ar.z = v9 + v10;
								if (x_WORD_EB398ar.z < v10)
									x_WORD_EB398ar.z = v10;
								v11 = v38 + ix->word_0x1C_28;
								v11 &= 0x7ffu;
								v12 = ix->word_0x14_20;
								ix->word_0x1C_28 = v11;
								v13 = v34;
								ix->word_0x14_20 = 9377 * v12 + 9439;
								if (v9 >= (signed int)(v13 + ix->word_0x14_20 % v13))
								{
									ix->struct_byte_0xc_12_15.byte[3] |= 0x10u;
									ix->word_0x30_48 = ix->word_0x1C_28;
								}
							}
						}
					}
					sub_57FA0(&x_WORD_EB398ar, ix->word_0x30_48, 0, v30);
					if (x_BYTE_D41B6)
					{
						v19 = ix->array_0x52_82.dd;
						v20 = (int16_t)sub_10C60(&x_WORD_EB398ar) - v19;
						if (x_WORD_EB398ar.z > v20)
							x_WORD_EB398ar.z = v20;
					}
					//v21 = ix->dword_0xA0_160;
					v22 = v37;
					v23 = ix->dword_0xA0_160x->word_160_0xa_10;
					v24 = ix->dword_0xA0_160x->word_160_0xc_12;
					v25 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
					sub_580E0(&x_WORD_EB398ar, v25, v24, v23, v22);
					sub_57CF0(ix, &x_WORD_EB398ar);
					if (v39)
					{
						v26 = a1x->word_0x2A_42;
						v31++;
						sub_11900(a1x, ix, 0, v26);
					}
				}
			}
		}
		sub_10100(v27);
		if (v31)
			sub_6D8B0(a1x->word_0x1A_26, 0x15u, v31);
	}
}

//----- (00033710) --------------------------------------------------------
void sub_33710(type_str_0x6E8E* a1x)//214710
{
	int v1; // edi
	type_str_0x6E8E* ix; // ebx
	type_str_0x6E8E* jx; // ebx
	int16_t v4; // ax

	v1 = 0;
	if (!(a1x->byte_0x3E_62 & 7))
	{
		for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38527; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (sub_10750(a1x, ix))
				sub_11900(a1x, ix, 0, a1x->word_0x2A_42);
		}
		for (jx = x_D41A0_BYTEARRAY_4_struct.dword_38519; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
		{
			if (jx->byte_0x40_64 == 2 && sub_10750(a1x, jx))
			{
				v4 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
				jx->word_0x30_48 = 30;
				jx->word_0x26_38 = v4;
				jx->str_0x5E_94.dword_0x5E_94 += a1x->word_0x2A_42;
				v1 += 2;
				jx->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
			}
		}
		if (v1)
			sub_6D8B0(a1x->word_0x1A_26, 0x15u, v1);
	}
}

//----- (00033810) --------------------------------------------------------
char sub_33810(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//214810
{
	char result; // al
	uint8_t v3; // ah
	//char v4; // bl
	uint8_t v5; // ah
	uint8_t v6; // ah
	uint8_t v7; // ah

	result = 1;
	v3 = a2x->byte_0x3F_63 - 2;
	if (v3 > 8u)
		return 0;
	switch (v3)
	{
	case 0u:
		v7 = a2x->byte_0x40_64;
		if (v7 < 7u || v7 > 8u)
			return 0;
		return result;
	case 1u:
		if (a2x->word_0x1A_26 == a1x->word_0x1A_26)
			return 0;
		if (a2x->byte_0x40_64 == 2)
			result = 0;
		return result;
	case 2u:
	case 4u:
	case 5u:
	case 6u:
	case 7u:
		return 0;
	case 3u:
		//v4 = a2x->byte_0x45_69;
		if (a2x->byte_0x45_69 == 232 || a2x->byte_0x45_69 == 180)
			return 0;
		v5 = a2x->byte_0x40_64;
		if (v5 < 0xFu)
		{
			if (v5 == 10)
				result = 0;
		}
		else if (v5 <= 0xFu || v5 >= 0x12u && (v5 <= 0x12u || v5 >= 0x1Bu && v5 <= 0x1Cu))
		{
			return 0;
		}
		return result;
	case 8u:
		v6 = a2x->byte_0x40_64;
		if (v6 < 0x27u)
		{
			if (v6 < 0xDu)
				return 0;
			if (v6 > 0xEu)
				result = 0;
		}
		else if (v6 > 0x27u && v6 != 57)
		{
			result = 0;
		}
		break;
	}
	return result;
}

//----- (000338D0) --------------------------------------------------------
void sub_338D0(type_str_0x6E8E* a1x)//2148d0
{
	int v1; // edi
	int v2; // esi
	//unsigned int result; // eax
	int v4; // edi
	int v5; // ebx
	Bit16s ix; // eax
	type_str_0x6E8E* v7x; // eax
	type_str_0x6E8E* jx; // ebx
	int v9; // [esp+0h] [ebp-8h]
	int v10; // [esp+4h] [ebp-4h]

	v1 = a1x->array_0x4C_76.y + 128;
	v2 = (a1x->array_0x4C_76.x + 128) >> 8;
	v5 = sub_10080(0, 12);
	v4 = v1 >> 8;
	//v5 = result;
	if (v5)
	{
		while (sub_10130(v5, &v10, &v9) == 1)
		{
			for (ix = x_WORD_15B4E0_source[((uint8_t)(v4 + v9) << 8) + (uint8_t)(v2 + v10)];
				;
				ix = v7x->word_0x16_22)
			{
				v7x = x_DWORD_EA3E4[ix];
				if (v7x == x_DWORD_EA3E4[0])
					break;
				//v7x->byte_0xc_12 &= 0xEFFFF7FF;
				v7x->struct_byte_0xc_12_15.dword &= 0xEFFFF7FF;
				//v7x->byte_0xd_13 &= 0xF7;
				//v7x->byte_0xf_15 &= 0xEF;
			}
		}
		sub_10100(v5);
	}
	for (jx = a1x; jx > x_DWORD_EA3E4[0]; jx = x_DWORD_EA3E4[jx->word_0x34_52])
		sub_57F10(jx);
	//return result;
}

//----- (000339B0) --------------------------------------------------------
void sub_339B0(type_str_0x6E8E* a1x)//2149b0
{
	int16_t v1; // ax
	uint16_t v2; // dx
	type_str_0x6E8E* v3x; // eax
	int16_t v4; // cx
	int v5; // edx
	char v6; // ah
	int16_t v7; // di

	LOBYTE(v1) = a1x->byte_0x46_70;
	if ((uint8_t)v1 < 1u)
	{
		if ((x_BYTE)v1)
			return;// v1;
		v2 = a1x->word_0x96_150;
		if (v2)
		{
			v3x = x_DWORD_EA3E4[v2];
			a1x->word_0x86_134 = v3x->array_0x52_82.xshift >> 1;
			v4 = a1x->word_0x86_134;
			a1x->word_0x84_132 = 6 * v3x->array_0x52_82.xshift >> 2;
			if (v4 < 128)
				a1x->word_0x86_134 = 128;
			if (a1x->word_0x84_132 > 640)
				a1x->word_0x84_132 = 640;
		}
		a1x->byte_0x46_70 = 1;
	}
	else if ((uint8_t)v1 > 1u)
	{
		if ((x_BYTE)v1 == 2)
		{
			v6 = a1x->byte_0x3D_61;
			if (v6 < 0)
				a1x->byte_0x3D_61 = -v6;
			sub_33B20(a1x);
			v1 = a1x->byte_0x3D_61;
			v7 = a1x->word_0x2C_44 - v1;
			a1x->word_0x2C_44 = v7;
			if (v7 < 0)
			{
				sub_4A190(&a1x->array_0x4C_76, 10, 0);
				/*LOBYTE(v1) = */sub_33D40(a1x);
			}
		}
		return;// v1;
	}
	sub_33C70(a1x);
	sub_33AD0(a1x);
	sub_33B20(a1x);
	/*LOBYTE(v1) = */sub_33C00(a1x);
	v5 = a1x->dword_0x8 - 1;
	a1x->dword_0x8 = v5;
	if (v5 < 1)
		a1x->byte_0x46_70 = 2;
	return;// v1;
}

//----- (00033AD0) --------------------------------------------------------
void sub_33AD0(type_str_0x6E8E* a1x)//214ad0
{
	//int result; // eax
	int16_t v2; // bx
	int16_t v3; // cx
	char v4; // dl
	int16_t v5; // si
	char v6; // dh

	//result = a1;
	v2 = a1x->byte_0x3D_61 + a1x->word_0x2C_44;
	v3 = a1x->word_0x84_132;
	a1x->word_0x2C_44 = v2;
	if (v2 <= v3)
	{
		v5 = a1x->word_0x86_134;
		if (v2 < v5)
		{
			v6 = a1x->byte_0x3D_61;
			a1x->word_0x2C_44 = v5;
			a1x->byte_0x3D_61 = -v6;
		}
	}
	else
	{
		v4 = a1x->byte_0x3D_61;
		a1x->word_0x2C_44 = v3;
		a1x->byte_0x3D_61 = -v4;
	}
	//return result;
}

//----- (00033B20) --------------------------------------------------------
void sub_33B20(type_str_0x6E8E* a1x)//214b20
{
	int16_t v1; // ax
	int16_t v2; // ax
	int i; // eax
	int16_t v4; // ax
	int16_t v5; // ax
	int16_t v6; // ax
	int16_t v7; // ST08_2
	uint16_t v8; // ax
	type_str_0x6E8E* v9x; // ebx

	v1 = a1x->word_0x1C_28 + 22;
	HIBYTE(v1) &= 7u;
	a1x->word_0x1C_28 = v1;
	v2 = a1x->word_0x1E_30 + 16;
	HIBYTE(v2) &= 7u;
	a1x->word_0x1E_30 = v2;
	for (i = a1x->word_0x34_52; ; i = v9x->word_0x34_52)
	{
		v9x = x_DWORD_EA3E4[i];
		if (v9x <= x_DWORD_EA3E4[0])
			break;
		v4 = v9x->word_0x20_32 + v9x->word_0x1C_28;
		HIBYTE(v4) &= 7u;
		v9x->word_0x1C_28 = v4;
		v5 = v9x->word_0x22_34 + v9x->word_0x1E_30;
		HIBYTE(v5) &= 7u;
		v9x->word_0x1E_30 = v5;
		x_WORD_EB398ar = a1x->array_0x4C_76;
		v6 = v9x->word_0x1E_30 + a1x->word_0x1E_30;
		HIBYTE(v6) &= 7u;
		v7 = v6;
		v8 = v9x->word_0x1C_28 + a1x->word_0x1C_28;
		HIBYTE(v8) &= 7u;
		sub_57FA0(&x_WORD_EB398ar, v8, v7, a1x->word_0x2C_44);
		sub_57CF0(v9x, &x_WORD_EB398ar);
	}
	//return i;
}

//----- (00033C00) --------------------------------------------------------
void sub_33C00(type_str_0x6E8E* a1x)//214c00
{
	int result; // eax
	type_str_0x6E8E* v2x; // ebx

	for (result = a1x->word_0x34_52; ; result = v2x->word_0x34_52)
	{
		v2x = x_DWORD_EA3E4[result];
		if (v2x <= x_DWORD_EA3E4[0])
			break;
		if (!v2x->byte_0x44_68)
		{
			if (sub_10C80(v2x, 0, a1x->word_0x2A_42))
				sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 3);
		}
	}
	//return result;
}

//----- (00033C70) --------------------------------------------------------
void sub_33C70(type_str_0x6E8E* a1x)//214c70
{
	uint16_t v1; // dx
	type_str_0x6E8E* v2x; // eax
	//Bit8u* v3; // esi
	int v4; // edi
	int result; // eax
	int v6; // esi
	int v7; // edi
	int v8; // esi
	char v9; // [esp+4h] [ebp-4h]

	v1 = a1x->word_0x96_150;
	v9 = 0;
	if (v1)
	{
		v2x = x_DWORD_EA3E4[v1];
		x_WORD_EB398ar = v2x->array_0x4C_76;
		//v3 = v2;
		x_WORD_EB398ar.z += v2x->array_0x52_82.aa;
		sub_57CF0(a1x, &x_WORD_EB398ar);
		if (v2x->dword_0x8 < 0 || v2x->struct_byte_0xc_12_15.byte[1] & 4)
			v9 = 1;
	}
	v4 = a1x->word_0x2C_44;
	result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	v6 = v4 + (int16_t)result;
	if (a1x->array_0x4C_76.z < v6)
		a1x->array_0x4C_76.z = v6;
	if (x_BYTE_D41B6)
	{
		v7 = a1x->word_0x2C_44;
		result = sub_10C60(&a1x->array_0x4C_76);
		v8 = (int16_t)result - v7;
		if (a1x->array_0x4C_76.z > v8)
			a1x->array_0x4C_76.z = v8;
	}
	if (v9)
		a1x->byte_0x46_70 = 2;
	//return result;
}

//----- (00033D40) --------------------------------------------------------
void sub_33D40(type_str_0x6E8E* a1x)//214d40
{
	int i; // ebx
	type_str_0x6E8E* v2x; // ebx

	for (i = a1x->word_0x34_52; ; i = v2x->word_0x34_52)
	{
		v2x = x_DWORD_EA3E4[i];
		if (v2x <= x_DWORD_EA3E4[0])
			break;
		sub_57F10(v2x);
	}
	sub_57F10(a1x);
	//return 1;
}

//----- (00033D80) --------------------------------------------------------
void sub_33D80(type_str_0x6E8E* a1x)//214d80
{
	int v1; // eax
	int16_t v2; // ax
	char v3; // dl

	v1 = a1x->dword_0x8;
	a1x->dword_0x10_16++;
	a1x->dword_0x8 = v1 - 1;
	if (v1 >= 0)
	{
		if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
		{
			v2 = sub_10C80(a1x, 0, a1x->word_0x2A_42);
			if (v2)
				sub_6D8B0(a1x->word_0x1A_26, 7u, v2);
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 24);
			v3 = a1x->struct_byte_0xc_12_15.byte[0];
			a1x->dword_0x8 = 1;
			a1x->struct_byte_0xc_12_15.byte[0] = v3 | 2;
		}
	}
	else
	{
		sub_57F10(a1x);
	}
}

//----- (00033E20) --------------------------------------------------------
void sub_33E20(type_str_0x6E8E* a1x)//214e20
{
	int v1; // ecx
	uint16_t v2; // ST08_2

	v1 = a1x->dword_0x8 - 1;
	a1x->dword_0x10_16++;
	a1x->dword_0x8 = v1;
	if (v1 >= 0)
	{
		if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
		{
			v2 = a1x->byte_0x46_70;
			a1x->struct_byte_0xc_12_15.byte[0] |= 2u;
			if (sub_10C80(a1x, 3u, v2))
				a1x->dword_0x8 = 0;
		}
	}
	else
	{
		sub_57F10(a1x);
	}
}

//----- (00033E80) --------------------------------------------------------
void sub_33E80(type_str_0x6E8E* a1x)//214e80
{
	int v1; // eax
	int result; // eax

	v1 = a1x->dword_0x8;
	a1x->dword_0x10_16++;
	a1x->dword_0x8 = v1 - 1;
	if (v1 < 0)
	{
		sub_57F10(a1x);
		return;
	}
	sub_585A0(a1x);
	result = sub_10C80(a1x, 4u, a1x->byte_0x46_70);
	if (result)
		a1x->dword_0x8 = 0;
	//return result;
}

//----- (00033F70) --------------------------------------------------------
bool sub_33F70(uint16_t a1)//214f70
{
	uint16_t v1; // ax
	signed int v2; // edx
	uint16_t v3; // ax
	bool result; // al

	HIBYTE(v1) = HIBYTE(a1);
	LOBYTE(v1) = a1 - 1;
	result = 1;
	if (x_BYTE_10B4E0_terraintype[v1] == 8)
	{
		v2 = (uint16_t)(x_BYTE_11B4E0_height[a1] + 30);
		if (x_BYTE_11B4E0_height[v1] <= (signed int)(uint16_t)v2)
		{
			LOBYTE(v1) = v1 + 2;
			if (x_BYTE_11B4E0_height[v1] <= v2)
			{
				LOBYTE(v3) = v1 - 1;
				HIBYTE(v3) = HIBYTE(a1) + 1;
				if (x_BYTE_11B4E0_height[v3] <= v2)
				{
					HIBYTE(v3) = HIBYTE(a1) - 1;
					if (x_BYTE_11B4E0_height[v3] <= v2)
						result = 0;
				}
			}
		}
	}
	return result;
}

//----- (00034000) --------------------------------------------------------
void sub_34000(type_str_0x6E8E* a1x)//215000
{
	uint16_t v1; // bx
	uint16_t v3; // [esp+0h] [ebp-Ch]
	int16_t i; // [esp+4h] [ebp-8h]
	int16_t v5; // [esp+8h] [ebp-4h]

	LOBYTE(v3) = (a1x->array_0x4C_76.x + 128) >> 8;
	HIBYTE(v3) = (a1x->array_0x4C_76.y + 128) >> 8;
	if (v3 % 2)
		LOBYTE(v3) = v3 + 1;
	LOBYTE(v3) = v3 - a1x->dword_0x8 + 1;
	v5 = a1x->dword_0x8 + a1x->dword_0x10_16;
	while (v5)
	{
		HIBYTE(v1) = HIBYTE(v3);
		LOBYTE(v1) = v3 - 1;
		x_BYTE_13B4E0_angle[v1] |= 0x80u;
		LOBYTE(v1) = v3;
		for (i = a1x->dword_0x8; i; i--)
		{
			if (x_BYTE_10B4E0_terraintype[v1] != 8 || sub_33F70(v1))
				x_BYTE_11B4E0_height[v1] += 48;
			sub_46180(v1++, 8);
		}
		x_BYTE_13B4E0_angle[v1] |= 0x80u;
		v5--;
		HIBYTE(v3)++;
	}
	sub_57F10(a1x);
	//return 1;
}

//----- (00034110) --------------------------------------------------------
void sub_34110(type_str_0x6E8E* a1x)//215110
{
	uint16_t v1; // bx
	char v3; // [esp+0h] [ebp-Ch]
	char v4; // [esp+1h] [ebp-Bh]
	int16_t i; // [esp+4h] [ebp-8h]
	int16_t v6; // [esp+8h] [ebp-4h]

	v3 = (a1x->array_0x4C_76.x + 128) >> 8;
	v4 = ((a1x->array_0x4C_76.y + 128) >> 8) + 2;
	v6 = a1x->dword_0x8 + a1x->dword_0x10_16;
	while (v6)
	{
		HIBYTE(v1) = v4;
		LOBYTE(v1) = v3 - 1;
		x_BYTE_13B4E0_angle[v1] |= 0x80u;
		LOBYTE(v1) = v3;
		for (i = a1x->dword_0x8; i; i--)
		{
			if (x_BYTE_10B4E0_terraintype[v1] != 8 || sub_33F70(v1))
				x_BYTE_11B4E0_height[v1] += 48;
			sub_46180(v1++, 8);
		}
		x_BYTE_13B4E0_angle[v1] |= 0x80u;
		v6--;
		v4--;
	}
	sub_57F10(a1x);
	//return 1;
}

//----- (00034210) --------------------------------------------------------
void sub_34210(type_str_0x6E8E* a1x)//215210
{
	int v1; // edx
	int v2; // ebx
	uint16_t v3; // di
	char v4; // cl
	uint16_t v5; // bx
	int v6; // ebx
	int16_t v7; // dx
	uint16_t v8; // di
	char v9; // cl
	int v11; // [esp+0h] [ebp-Ch]
	int v12; // [esp+4h] [ebp-8h]
	int16_t i; // [esp+8h] [ebp-4h]

	LOBYTE(v12) = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
	HIBYTE(v12) = (uint16_t)(a1x->array_0x4C_76.y + 128) >> 8;
	v1 = ((uint8_t)v12 + BYTE1(v12)) % 2;
	if (v1)
		LOBYTE(v12) = v12 + 1;
	v2 = v12;
	LOWORD(v1) = a1x->dword_0x10_16;
	--BYTE1(v2);
	while ((x_WORD)v1)
	{
		v3 = v2;
		--v1;
		v4 = x_BYTE_13B4E0_angle[(uint16_t)v2++] | 0x80;
		x_BYTE_13B4E0_angle[v3] = v4;
	}
	for (i = a1x->dword_0x8; i; i--)
	{
		LOWORD(v1) = a1x->dword_0x10_16;
		v5 = v12;
		while (1)
		{
			v11 = v1;
			if (!(x_WORD)v1)
				break;
			if (x_BYTE_10B4E0_terraintype[v5] != 8 || sub_33F70(v5))
				x_BYTE_11B4E0_height[v5] += 48;
			sub_46180(v5++, 8);
			v1 = v11 - 1;
		}
		++BYTE1(v12);
	}
	v6 = v12;
	v7 = a1x->dword_0x10_16;
	while (v7)
	{
		v8 = v6;
		v7--;
		v9 = x_BYTE_13B4E0_angle[(uint16_t)v6++] | 0x80;
		x_BYTE_13B4E0_angle[v8] = v9;
	}
	sub_57F10(a1x);
	//return 1;
}

//----- (00034330) --------------------------------------------------------
void sub_34330(type_str_0x6E8E* a1x)//215330
{
	sub_57F10(a1x);
	//return 1;
}

//----- (00034350) --------------------------------------------------------
void sub_34350(type_str_0x6E8E* a1x)//215350
{
	sub_57F10(a1x);
	//return 1;
}

//----- (00034390) --------------------------------------------------------
void sub_34390(type_str_0x6E8E* a1x)//215390
{
	type_str_0x6E8E* v1x; // eax

	v1x = sub_5B070(a1x);
	if (v1x)
		v1x->dword_0x8 = 2;
	sub_57F10(a1x);
	//return 1;
}

//----- (000343C0) --------------------------------------------------------
void sub_343C0(type_str_0x6E8E* a1x)//2153c0
{
	type_str_0x6E8E* v1x; // eax

	v1x = sub_5B070(a1x);
	if (v1x)
		v1x->dword_0x8 = 1;
	sub_57F10(a1x);
	//return 1;
}

//----- (000343F0) --------------------------------------------------------
void sub_343F0(type_str_0x6E8E* a1x)//2153f0
{
	uaxis_2d v1; // bx
	Bit16u v2; // di
	Bit16u v4; // [esp+0h] [ebp-8h]
	Bit16u v5; // [esp+4h] [ebp-4h]

	v1._axis_2d.x = (a1x->array_0x4C_76.x + 128) >> 8;
	v1._axis_2d.y = (a1x->array_0x4C_76.y + 128) >> 8;

	v5 = a1x->word_0x1C_28;
	v2 = a1x->dword_0x10_16;
	v4 = a1x->word_0x1E_30;
	while (v2)
	{
		x_BYTE_13B4E0_angle[v1.word] = x_BYTE_13B4E0_angle[v1.word] & 0xF0 | 1;
		v2--;
		sub_462A0(v1, v1);
		v1._axis_2d.x += v5;
		v1._axis_2d.y += v4;
	}
	sub_57F10(a1x);
	//return 1;
}

//----- (00034480) --------------------------------------------------------
void sub_34480(type_str_0x6E8E* a1x)//215480
{
	sub_57F10(a1x);
	//return 1;
}

//----- (000344A0) --------------------------------------------------------
void sub_344A0(type_str_0x6E8E* a1x)//2154a0
{
	int v1; // eax
	type_str_0x6E8E* v3x; // eax

	v1 = a1x->dword_0x8;
	a1x->dword_0x8 = v1 - 1;
	if (v1 < 0 || sub_104A0(&a1x->array_0x4C_76) & 1)
	{
		sub_57F10(a1x);
		return;// NULL;
	}
	v3x = sub_4A190(&a1x->array_0x4C_76, 10, 11);
	if (v3x)
	{
		v3x->array_0x52_82.dd = a1x->array_0x52_82.dd;
		v3x->word_0x1A_26 = a1x->word_0x1A_26;
		v3x->dword_0x8 = a1x->byte_0x46_70;
	}
	/*return */sub_57FA0(&a1x->array_0x4C_76, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
}

//----- (00034520) --------------------------------------------------------
void sub_34520(type_str_0x6E8E* a1x)//215520
{
	sub_57F10(a1x);
	//return 1;
}

int debugafter_215540 = 0;
int debugcounter_215540 = 0;
//----- (00034540) --------------------------------------------------------
void sub_34540(type_str_0x6E8E* a1x)//215540
{
	//int v1; // ebx
	int v1x;
	int v2; // eax
	int v3; // edx
	int v4; // esi
	int v5; // edi
	signed int v6; // eax
	signed int v7; // ebx
	signed int v8; // ebx
	signed int v9; // eax
	int v10; // ebx
	int v11; // eax
	unsigned int v12; // ST14_4
	int v13; // ebx
	unsigned int v14; // eax
	int v15; // ebx
	int v16; // ebx
	uaxis_2d v17x; // ebx
	uint8_t v18; // ah
	char v19; // dl
	signed int i; // eax
	int v21; // ebx
	axis_3d v23x; // [esp+0h] [ebp-4Ch]
	//int16_t v24; // [esp+4h] [ebp-48h]
	axis_3d v25x; // [esp+8h] [ebp-44h]
	//int16_t v26; // [esp+Ch] [ebp-40h]
	int v27; // [esp+10h] [ebp-3Ch]
	int v28; // [esp+14h] [ebp-38h]
	int v29; // [esp+18h] [ebp-34h]
	int v30; // [esp+1Ch] [ebp-30h]
	unsigned int v31; // [esp+20h] [ebp-2Ch]
	int v32; // [esp+24h] [ebp-28h]
	int v33; // [esp+28h] [ebp-24h]
	int v34; // [esp+2Ch] [ebp-20h]
	int v35; // [esp+30h] [ebp-1Ch]
	int v36; // [esp+34h] [ebp-18h]
	uaxis_2d v37x; // [esp+38h] [ebp-14h]
	uaxis_2d v38x; // [esp+3Ch] [ebp-10h]
	uaxis_2d v39x; // [esp+40h] [ebp-Ch]
	uint8_t v40; // [esp+44h] [ebp-8h]
	uint8_t v41; // [esp+48h] [ebp-4h]

	debugafter_215540 = 1;

	v28 = (a1x->byte_0x46_70 >> 4 << 8) + 512;
	v27 = ((a1x->byte_0x46_70 & 0xF) << 8) + 512;
	v29 = sub_58490_radix_3d_2(&a1x->array_0x4C_76, &a1x->word_0x9A_154x) / 0x55;
	v34 = (uint16_t)sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a1x->word_0x9A_154x);
	v33 = 0;
	v25x = a1x->array_0x4C_76;
	while (v33 < 32)
	{
		//LOBYTE(v39) = v25x.x>>8;
		//HIBYTE(v39) = v25x.y>>8;
		v39x._axis_2d.x = v25x.x>>8;
		v39x._axis_2d.y = v25x.y>>8;
		v1x = (x_BYTE_11B4E0_height[v39x.word] + x_BYTE_14B4E0[v39x.word]) / 2;
		if (v1x < 0)
			v1x = 0;
		if (v1x > 254)
			v1x = 254;
		x_BYTE_F01FEx[2 + v33++] = v1x;
		sub_57FA0(&v25x, v34, 0, 85);
	}
	v30 = 0;//adress 215637
	v23x = a1x->array_0x4C_76;
	while (v30 < v29)
	{
		v2 = v28 + v30 * ((v27 - v28) / v29);
		v36 = v2 * v2;
		v3 = 2 * v2 + 128;
		v40 = (uint16_t)(v23x.x + 128) >> 8;
		v35 = (uint8_t)x_BYTE_F01FEx[2 + 0];
		v4 = v3 >> 8;
		v3 >>= 9;
		v41 = (uint16_t)(v23x.y + 128) >> 8;
		//LOBYTE(v37) = v40 - v3;
		//HIBYTE(v37) = v41 - v3;
		v37x._axis_2d.x= v40 - v3;
		v37x._axis_2d.y = v41 - v3;
		v5 = 0;
		//LOWORD(v38) = v37;
		v38x.word = v37x.word;
		while (v5 < v4)
		{
			v32 = 0;
			//v39 = v38;
			v39x.word = v38x.word;
			while (v4 > v32)
			{
				//adress 2156d8
				//if (debugcounter_215540 >= 0x8cc)
				if (debugcounter_215540 >= 0xbf)
				{
					debugcounter_215540++;
					debugcounter_215540--;
				}
				/*Bit8u origbyte20 = 0;
				Bit8u remakebyte20 = 0;
				int comp20;

				comp20 = compare_with_sequence((char*)"002156D8-002C1200", (Bit8u*)& x_BYTE_F01FEx[2 + 0], 0x2c1200, debugcounter_215540, 0x20, 0x20, &origbyte20, &remakebyte20);
				*/

				debugcounter_215540++;

				v6 = abs(v39x._axis_2d.x - v40);
				v7 = v6;
				if (v6 >= 0x80)
					v7 = abs(v6 - 256);
				v8 = v7 << 8;
				v9 = abs(v39x._axis_2d.y - v41);
				if (v9 >= 0x80)
					v9 = abs(v9 - 256);
				v10 = v8 * v8;
				v11 = (v9 << 8) * (v9 << 8);
				if (v10 + v11 <= v36)
				{
					v12 = v36 - v10 - v11;
					v13 = v35;
					v14 = sub_7277A_radix_3d(v12) >> 5;
					v15 = v13 - v14;
					v31 = v14;
					if (v15 < 0)
						v15 = 0;
					if (v15 > 254)
						v15 = 254;
					if (x_BYTE_11B4E0_height[v39x.word] > v15)
						sub_570F0(v39x._axis_2d.x, v39x._axis_2d.y, v15, 0, 0, 1);
					v16 = v31 + v35;
					if ((signed int)(v31 + v35) < 0)
						v16 = 0;
					if (v16 > 254)
						v16 = 254;
					if ((uint8_t)x_BYTE_14B4E0[v39x.word] < v16)
						x_BYTE_14B4E0[v39x.word] = v16;
				}
				//v17 = v39;
				v17x.word = v39x.word;
				v18 = x_BYTE_11B4E0_height[v39x.word];
				if (x_BYTE_14B4E0[v39x.word] > v18)
				{
					x_BYTE_13B4E0_angle[v39x.word] &= 0xF7u;
				}
				else
				{
					v19 = x_BYTE_13B4E0_angle[v39x.word] | 8;
					x_BYTE_14B4E0[v39x.word] = v18 - 1;
					x_BYTE_13B4E0_angle[v17x.word] = v19;
				}
				v32++;
				//LOBYTE(v39)++;
				v39x._axis_2d.x++;
			}
			v5++;
			//BYTE1(v38)++;
			v38x._axis_2d.y++;
		}
		sub_34B00(v37x._axis_2d.x - 1, v37x._axis_2d.y - 1, v4 + 1, v4 + 1);
		sub_57FA0(&v23x, v34, 0, 85);
		for (i = 1; i < 32; i++)
			x_BYTE_F01FEx[i+1] = x_BYTE_F01FEx[2 +i];
		//LOBYTE(v39) = v25x.x >> 8;
		//HIBYTE(v39) = v25x.y >> 8;
		v39x._axis_2d.x = v25x.x >> 8;
		v39x._axis_2d.y = v25x.y >> 8;
		v21 = (x_BYTE_11B4E0_height[v39x.word] + x_BYTE_14B4E0[v39x.word]) / 2;
		if (v21 < 0)
			v21 = 0;
		if (v21 > 254)
			v21 = 254;
		x_BYTE_F01FEx[2 +31] = v21;
		v30++;
		sub_57FA0(&v25x, v34, 0, 85);
	}
	sub_57F10(a1x);
	//return 1;
}

//----- (00034910) --------------------------------------------------------
void sub_34910(type_str_0x6E8E* a1x)//215910
{
	int v1; // ebx
	int v2; // esi
	int v3; // ecx
	int v4; // edi
	uaxis_2d v5x; // ebx
	int v6; // eax
	int v7; // eax
	uint8_t v8; // dh
	char v9; // cl
	signed int v11; // [esp+8h] [ebp-1Ch]
	signed int v12; // [esp+Ch] [ebp-18h]
	int v13; // [esp+10h] [ebp-14h]
	int v14; // [esp+14h] [ebp-10h]
	int v15; // [esp+18h] [ebp-Ch]
	uaxis_2d v16x; // [esp+1Ch] [ebp-8h]
	uaxis_2d v17x; // [esp+20h] [ebp-4h]

	v13 = 3 * a1x->byte_0x46_70;
	v1 = a1x->byte_0x43_67;
	v2 = 2 * v1;
	v5x._axis_2d.x = (a1x->array_0x4C_76.x >> 8) - v1;
	v3 = a1x->byte_0x44_68;
	v4 = 2 * v3;
	v5x._axis_2d.y = (a1x->array_0x4C_76.y >> 8) - v3;
	v11 = sub_48E60(v5x._axis_2d.x, v5x._axis_2d.y, v2, 2 * v3);
	v16x.word = v5x.word;
	v12 = sub_48E90(v5x._axis_2d.x, v5x._axis_2d.y, v2, v4);
	v14 = 0;
	while (v4 > v14)
	{
		v15 = 0;
		v17x.word = v16x.word;
		while (v2 > v15)
		{
			v6 = v11 - v13;
			if (v11 - v13 < 0)
				v6 = 0;
			if (v6 > 254)
				v6 = 254;
			if (x_BYTE_11B4E0_height[v17x.word] > v6)
				sub_570F0(v17x._axis_2d.x, v16x._axis_2d.y, v6, 0, 0, 0);
			v7 = v13 + v12;
			if (v13 + v12 < 0)
				v7 = 0;
			if (v7 > 254)
				v7 = 254;
			if (v7 > (uint8_t)x_BYTE_14B4E0[v17x.word])
				x_BYTE_14B4E0[v17x.word] = v7;
			v8 = x_BYTE_11B4E0_height[v17x.word];
			if ((uint8_t)x_BYTE_14B4E0[v17x.word] > v8)
			{
				x_BYTE_13B4E0_angle[v17x.word] &= 0xF7u;
			}
			else
			{
				v9 = x_BYTE_13B4E0_angle[v17x.word] | 8;
				x_BYTE_14B4E0[v17x.word] = v8 - 1;
				x_BYTE_13B4E0_angle[v17x.word] = v9;
			}
			v15++;
			v17x._axis_2d.x++;
		}
		v14++;
		v16x._axis_2d.y++;
	}
	sub_34B00(v5x._axis_2d.x - 1, v5x._axis_2d.y - 1, v2 + 1, v4 + 1);
	sub_43C60(v5x._axis_2d.x, v5x._axis_2d.y, (uint16_t)v2, (uint16_t)v4);
	sub_57F10(a1x);
	//return 1;
}

//----- (00034B00) --------------------------------------------------------
void sub_34B00(char a1, char a2, int16_t a3, int16_t a4)//215b00
{
	uaxis_2d v4x; // bx
	char v5; // dl
	uaxis_2d v6x; // eax
	char v7; // ch
	int result; // eax
	uaxis_2d v9x; // bx
	char v10; // dl
	uaxis_2d v11x; // eax
	char v12; // ch
	signed int v13; // [esp+0h] [ebp-Ch]
	signed int i; // [esp+4h] [ebp-8h]

	for (i = 0; a3 > i; i++)
	{
		//HIBYTE(v4) = a2;
		//LOBYTE(v4) = i + a1;
		v4x._axis_2d.y = a2;
		v4x._axis_2d.x = i + a1;
		v5 = x_BYTE_13B4E0_angle[v4x.word];
		if (v5 & 8)
		{
			x_BYTE_13B4E0_angle[v4x.word] = v5 & 0xF8 | 1;
			x_BYTE_10B4E0_terraintype[v4x.word] = 1;
			//uaxis_2d temp_v4;
			//temp_v4.word = v4;
			sub_462A0(v4x, v4x);
		}
		//HIWORD(v6) = 0;
		//v6x._axis_2d.y = 0;
		//HIBYTE(v4) = a4 + a2;
		v4x._axis_2d.y = a4 + a2;
		//LOWORD(v6) = v4;
		v6x.word = v4x.word;
		v7 = x_BYTE_13B4E0_angle[v4x.word];
		if (v7 & 8)
		{
			x_BYTE_13B4E0_angle[v6x.word] = v7 & 0xF8 | 1;
			//uaxis_2d temp_v4;
			//temp_v4.word = v4;
			sub_462A0(v4x, v4x);
		}
	}
	v13 = 0;
	for (result = a4; a4 > v13; result = a4)
	{
		//LOBYTE(v9) = a1;
		//HIBYTE(v9) = v13 + a2;
		v9x._axis_2d.x = a1;
		v9x._axis_2d.y = v13 + a2;
		v10 = x_BYTE_13B4E0_angle[v9x.word];
		if (v10 & 8)
		{
			x_BYTE_13B4E0_angle[v9x.word] = v10 & 0xF8 | 1;
			x_BYTE_10B4E0_terraintype[v9x.word] = 1;
			//uaxis_2d temp_v9;
			//temp_v9.word = v9;
			sub_462A0(v9x, v9x);
		}
		//HIWORD(v11) = 0;
		//LOBYTE(v9) = a3 + v9;
		//LOWORD(v11) = v9;
		//v11x._axis_2d.y == 0;
		v9x._axis_2d.x += a3;
		v11x.word = v9x.word;
		v12 = x_BYTE_13B4E0_angle[v9x.word];
		if (v12 & 8)
		{
			x_BYTE_13B4E0_angle[v11x.word] = v12 & 0xF8 | 1;
			//uaxis_2d temp_v9;
			//temp_v9.word = v9;
			sub_462A0(v9x, v9x);
		}
		v13++;
	}
	//return result;
}

//----- (00034C40) --------------------------------------------------------
void sub_34C40(type_str_0x6E8E* a1x)//215c40
{
	int v1; // edx
	int v2; // eax
	int v3; // esi
	uint8_t v4; // cl
	uint8_t v5; // dl
	int16_t v6; // di
	signed int v7; // edi
	signed int v8; // eax
	int v9; // ecx
	int v10; // ecx
	axis_3d v12x; // [esp+0h] [ebp-40h]
	//int16_t v13; // [esp+2h] [ebp-3Eh]
	int v14; // [esp+8h] [ebp-38h]
	int v15; // [esp+Ch] [ebp-34h]
	int v16; // [esp+10h] [ebp-30h]
	int v17; // [esp+14h] [ebp-2Ch]
	int v18; // [esp+18h] [ebp-28h]
	int v19; // [esp+1Ch] [ebp-24h]
	int v20; // [esp+20h] [ebp-20h]
	int v21; // [esp+24h] [ebp-1Ch]
	int v22; // [esp+28h] [ebp-18h]
	int v23; // [esp+2Ch] [ebp-14h]
	int v24; // [esp+30h] [ebp-10h]
	int v25; // [esp+34h] [ebp-Ch]
	uint16_t i; // [esp+38h] [ebp-8h]
	int v27; // [esp+3Ch] [ebp-4h]

	//fixed
	v2 = 0;
	//fixed

	v1 = a1x->dword_0x8 - 1;
	a1x->dword_0x8 = v1;
	if (v1 <= 0)
	{
		sub_57F10(a1x);
	}
	else
	{
		v2 = a1x->word_0x9A_154x.x;
		v3 = 2 * v2;
		v4 = ((uint16_t)(a1x->array_0x4C_76.x + 128) >> 8) - v2;
		BYTE1(v27) = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - v2;
		v5 = a1x->byte_0x46_70;
		LOBYTE(v27) = v4;
		if (v5 < 1u)
		{
			if (!v5)
			{
				v6 = v4;
				v21 = BYTE1(v27);
				a1x->array_0x4C_76.z = sub_48E60(v4, BYTE1(v27), v3, v3);
				LOWORD(v2) = sub_48EF0(v6, v21, v3, v3);
				a1x->word_0x9A_154x.z = v2;
				LOBYTE(v2) = ((int16_t)v2 - a1x->array_0x4C_76.z <= 0) + 1;
				a1x->byte_0x46_70 = v2;
			}
		}
		else if (v5 <= 1u)
		{
			v7 = v2 << 8;
			v23 = a1x->array_0x4C_76.z;
			v2 = a1x->word_0x9A_154x.z;
			v24 = v2;
			v17 = 192 * v7 >> 8;
			v14 = v2 - v23;
			LOBYTE(v2) = v27;
			v20 = 0;
			for (i = v27; v3 > v20; ++HIBYTE(i))
			{
				v19 = 0;
				LOBYTE(v2) = v27;
				LOBYTE(i) = v27;
				while (v3 > v19)
				{
					v12x.x = (uint8_t)i << 8;
					v12x.y = HIBYTE(i) << 8;
					v16 = 0;
					v8 = sub_58490_radix_3d_2(&a1x->array_0x4C_76, &v12x);
					v15 = v8;
					if (v8 < v7)
					{
						v22 = x_BYTE_11B4E0_height[i];
						v25 = x_BYTE_14B4E0[i];
						v18 = v14 * ((x_DWORD)(0x10000 + (signed int)x_DWORD_DB750[0x200+(v8 << 10) / v7]) >> 1) >> 16;
						v9 = v18 + v23;
						if (v18 + v23 > 254)
							v9 = 254;
						if (v9 > v22)
							sub_570F0(
							(uint8_t)i,
								HIBYTE(i),
								(unsigned int)((v9 - v22) / a1x->dword_0x8) + v22,
								0,
								v15 <= v17,
								1);
						v10 = v16 + v24 - v18;
						if (v10 < 0)
							v10 = 0;
						if (v10 < v25)
							x_BYTE_14B4E0[i] = v25 - (unsigned int)((v25 - v10) / a1x->dword_0x8);
						if ((uint8_t)x_BYTE_14B4E0[i] > x_BYTE_11B4E0_height[i])
							x_BYTE_13B4E0_angle[i] &= 0xF7u;
						else
							x_BYTE_13B4E0_angle[i] |= 8u;
					}
					LOBYTE(v2) = v19++ + 1;
					LOBYTE(i) = i + 1;
				}
				++v20;
			}
		}
		else if (v5 == 2)
		{
			a1x->dword_0x8 = 0;
		}
	}
	//return v2;
}

//----- (00034EE0) --------------------------------------------------------
void sub_34EE0(/*signed int a1, int a2, */type_str_0x6E8E* a3x)//215ee0
{
	int v3; // edx
	int v4; // eax
	int v5; // ecx
	int v6; // edx
	uint8_t v7; // dl
	uint8_t v8; // al
	int16_t v9; // dx
	unsigned int v10; // esi
	char v11; // ah
	int16_t v12; // di
	int v13; // edi
	int v14; // esi
	signed int v15; // eax
	int v16; // ecx
	uint8_t v17; // al
	int v18; // ecx
	int v19; // ecx
	int v20; // eax
	int v21; // eax
	int v22; // ecx
	int v23; // ecx
	int v24; // eax
	int v25; // ecx
	uint8_t v26; // dl
	char v27; // dh
	axis_3d v28x; // [esp+0h] [ebp-34h]
	//int16_t v29; // [esp+2h] [ebp-32h]
	int v30; // [esp+8h] [ebp-2Ch]
	int v31; // [esp+Ch] [ebp-28h]
	int v32; // [esp+10h] [ebp-24h]
	int v33; // [esp+14h] [ebp-20h]
	int v34; // [esp+18h] [ebp-1Ch]
	int v35; // [esp+1Ch] [ebp-18h]
	int v36; // [esp+20h] [ebp-14h]
	int v37; // [esp+24h] [ebp-10h]
	int v38; // [esp+28h] [ebp-Ch]
	unsigned int v39; // [esp+2Ch] [ebp-8h]
	uint16_t i; // [esp+30h] [ebp-4h]

	signed int a1;
	int a2;

	v3 = a3x->dword_0x8 - 1;
	a3x->dword_0x8 = v3;
	if (v3 <= 0)
	{
		sub_57F10(a3x);
	}
	else
	{
		v4 = a3x->word_0x9A_154x.x;
		v5 = a3x->array_0x4C_76.y;
		v38 = 2 * v4;
		v6 = (a3x->array_0x4C_76.x + 128) >> 8;
		v36 = (v5 + 128) >> 8;
		LOBYTE(v39) = v6 - v4;
		BYTE1(v39) = v36 - v4;
		v7 = a3x->byte_0x46_70;
		if (v7 < 1u)
		{
			if (!v7)
			{
				v8 = a3x->byte_0x40_64;
				if (v8 >= 0x54u)
				{
					if (v8 <= 0x54u)
					{
						v37 = BYTE1(v39);
						v36 = (uint8_t)v39;
						a1 = sub_48EF0((uint8_t)v39, BYTE1(v39), v38, v38);
						a2 = a1 - sub_48E90((uint8_t)v39, BYTE1(v39), v38, v38) - 1;
					}
					else if (v8 == 85)
					{
						v36 = BYTE1(v39);
						v37 = (uint8_t)v39;
						a1 = sub_48E60((uint8_t)v39, BYTE1(v39), v38, v38);
						a2 = sub_48EC0((uint8_t)v39, BYTE1(v39), v38, v38) - a1 - 1;
					}
				}
				if (a2 <= 0)
				{
					a3x->byte_0x46_70 = 2;
				}
				else
				{
					v9 = a3x->array_0x4C_76.z;
					if (v9)
					{
						v10 = (51 * v9 * a2 - (__CFSHL__(51 * v9 * a2 >> 31, 8) + (51 * v9 * a2 >> 31 << 8))) >> 8;
					}
					else
					{
						a3x->word_0x14_20 = 9377 * a3x->word_0x14_20 + 9439;
						v10 = a3x->word_0x14_20 % (unsigned int)a2;
					}
					v11 = a3x->byte_0x40_64;
					a3x->word_0x9A_154x.z = a1;
					if (v11 == 84)
						v12 = a1 - v10;
					else
						v12 = v10 + a1;
					a3x->array_0x4C_76.z = v12;
					a3x->byte_0x46_70 = 1;
				}
			}
		}
		else if (v7 <= 1u)
		{
			v35 = v4 << 8;
			v13 = a3x->word_0x9A_154x.z;
			v14 = abs(a3x->array_0x4C_76.z - v13);
			v34 = 0;
			v30 = 49152 * v4 >> 8;
			for (i = v39; v34 < v38; ++HIBYTE(i))
			{
				v33 = 0;
				LOBYTE(i) = v39;
				while (v33 < v38)
				{
					v28x.x = (uint8_t)i << 8;
					v28x.y = HIBYTE(i) << 8;
					v15 = sub_58490_radix_3d_2(&a3x->array_0x4C_76, &v28x);
					v31 = v15;
					if (v15 < v35)
					{
						v16 = v14 * ((x_DWORD)(0x10000 + (signed int)x_DWORD_DB750[0x200+(v15 << 10) / v35]) >> 1);
						v17 = a3x->byte_0x40_64;
						v18 = v16 >> 16;
						if (v17 >= 0x54u)
						{
							if (v17 <= 0x54u)
							{
								v19 = v13 - v18;
								if (v19 < 0)
									v19 = 0;
								v32 = i;
								v20 = (uint8_t)x_BYTE_14B4E0[i];
								v37 = v20;
								v21 = (v20 - v19) / a3x->dword_0x8;
								if (v37 - v21 < v37)
									x_BYTE_14B4E0[v32] = v37 - v21;
							}
							else if (v17 == 85)
							{
								v22 = v13 + v18;
								if (v22 > 254)
									v22 = 254;
								v23 = v22 - x_BYTE_11B4E0_height[i];
								v37 = x_BYTE_11B4E0_height[i];
								v24 = v23 / a3x->dword_0x8;
								if (v24 + v37 > v37)
									sub_570F0((uint8_t)i, HIBYTE(i), v24 + v37, 0, v31 <= v30, 1);
							}
						}
						v25 = i;
						v26 = x_BYTE_11B4E0_height[i];
						if ((uint8_t)x_BYTE_14B4E0[i] > v26)
						{
							x_BYTE_13B4E0_angle[i] &= 0xF7u;
						}
						else
						{
							v27 = x_BYTE_13B4E0_angle[i] | 8;
							x_BYTE_14B4E0[i] = v26 - 1;
							x_BYTE_13B4E0_angle[v25] = v27;
						}
					}
					v33++;
					LOBYTE(i) = i + 1;
				}
				v34++;
			}
		}
		else if (v7 == 2)
		{
			if (a3x->byte_0x40_64 == 84)
				sub_43C60(v39, SBYTE1(v39), (uint16_t)v38, (uint16_t)v38);
			a3x->dword_0x8 = 0;
		}
	}
}

//----- (000352A0) --------------------------------------------------------
void sub_352A0(type_str_0x6E8E* a1x)//2162a0
{
	sub_57F10(a1x);
	//return 1;
}

//----- (000352C0) --------------------------------------------------------
void sub_352C0(type_str_0x6E8E* a1x)//2162c0
{
	int v1; // edx

	v1 = a1x->dword_0x8;
	a1x->dword_0x8 = v1 - 1;
	if (v1 < 0 || sub_104A0(&a1x->array_0x4C_76) & 1)
	{
		sub_57F10(a1x);
		return;// &a1x->array_0x4C_76;
	}
	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	if (!sub_572C0(a1x, 0, 1024, a1x->word_0x14_20 % 0xFu + 10, 0))
	{
		sub_10C80(a1x, 0, a1x->word_0x2A_42);
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 10);
	}
	/*return */sub_57FA0(&a1x->array_0x4C_76, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
}

//----- (00035390) --------------------------------------------------------
void sub_35390(type_str_0x6E8E* a1x)//216390
{
	//Bit8u* v1; // eax
	int v2; // edx
	//Bit8u* v3; // edi
	int v3x;
	type_str_0x6E8E* v4x; // esi
	int16_t v5; // ax
	//int v6; // ST0C_4
	int16_t v7; // ax
	//Bit8u* v8; // edx
	axis_3d* v9; // [esp+8h] [ebp-8h]
	uint16_t i; // [esp+Ch] [ebp-4h]

	v3x = 0;

	if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
	{
		a1x->struct_byte_0xc_12_15.byte[0] |= 2u;
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 21);
	}
	v2 = a1x->dword_0x8;
	if (v2 <= 0 || (a1x->dword_0x8 = v2 - 1, v2 != 1))
	{
		//v3 = x_D41A0_BYTEARRAY_0 + 11230;
		for (i = 0; ; i++)
		{
			v9 = &a1x->array_0x4C_76;
			if (D41A0_BYTESTR_0.word_0xe <= i)
				break;
			v4x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[v3x].word_0x00a_2BE4_11240];
			if (sub_106C0(a1x, x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[v3x].word_0x00a_2BE4_11240]))
			{
				v5 = sub_581E0_maybe_tan2(&v4x->array_0x4C_76, v9);
				if ((uint16_t)sub_582B0(v4x->word_0x1C_28, v5) < 0xAAu)
				{
					//v6 = a1x->dword_0xA0_160;
					v7 = sub_10C40_getTerrainAlt(&a1x->word_0x9A_154x);
					//v8 = x_D41A0_BYTEARRAY_0;
					a1x->word_0x9A_154x.z = a1x->dword_0xA0_160x->word_160_0xc_12 + v7;
					sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 22);
					sub_57CF0(v4x, &a1x->word_0x9A_154x);
					sub_5C800(v4x, 6);
				}
			}
			//v3 += 2124;
			v3x++;
		}
		a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(v9);
	}
	else
	{
		sub_57F10(a1x);
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 20);
	}
}

//----- (00035530) --------------------------------------------------------
void sub_35530(type_str_0x6E8E* a1x)//216530
{
	type_str_0x6E8E* resultx; // eax
	int16_t v2; // ax
	int16_t v3; // ax

	resultx = x_DWORD_EA3E4[a1x->word_0x28_40];
	if (resultx > x_DWORD_EA3E4[0])
	{
		if (resultx->dword_0x8 == 1)
		{
			sub_57F10(a1x);
		}
		else
		{
			x_WORD_EB398ar = resultx->array_0x4C_76;
			sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
			v2 = a1x->word_0x1C_28 + 45;
			HIBYTE(v2) &= 7u;
			a1x->word_0x1C_28 = v2;
			v3 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
			HIBYTE(v3)++;
			x_WORD_EB398ar.z = v3;
			/*result = */sub_57CF0(a1x, &x_WORD_EB398ar);
		}
	}
	//return result;
}

//----- (00035600) --------------------------------------------------------
void sub_35600(type_str_0x6E8E* a1x)//216600
{
	type_str_0x6E8E* resultx; // eax
	int v2; // edx
	char v3; // dl

	resultx = a1x;
	resultx->dword_0x10_16++;
	v2 = a1x->dword_0x8;
	a1x->dword_0x8 = v2 - 1;
	if (v2 < 0)
	{
		sub_57F10(a1x);
		return;// (type_str_0x6E8E*)1;
	}
	v3 = a1x->struct_byte_0xc_12_15.byte[0];
	if (!(v3 & 2))
		a1x->struct_byte_0xc_12_15.byte[0] = v3 | 2;
	//return resultx;
}

//----- (00035640) --------------------------------------------------------
void sub_35640(type_str_0x6E8E* a1x)//216640
{
	int16_t v1; // si
	int16_t v2; // dx
	int v3; // eax
	int16_t v4; // ax
	int16_t v5; // ax
	int v6; // ST08_4
	int v7; // ST04_4
	type_str_0x6E8E* v8x; // eax
	type_str_0x6E8E* v9x; // ecx
	int16_t v10; // ax
	signed int v11; // [esp+0h] [ebp-4h]

	v1 = 0;
	v2 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	if (a1x->array_0x4C_76.z < v2 + 1024)
	{
		v1 = 1;
		a1x->array_0x4C_76.z += 64;
	}
	if (a1x->array_0x4C_76.z > v2 + 1024)
	{
		HIBYTE(v2) += 4;
		v1 = 1;
		a1x->array_0x4C_76.z = v2;
	}
	if (!v1)
	{
		v3 = a1x->dword_0x8;
		a1x->dword_0x8 = v3 - 1;
		if (v3 >= 0)
		{
			v4 = 9377 * a1x->word_0x14_20;
			a1x->word_0x1E_30 = 56;
			a1x->word_0x14_20 = v4 + 9439;
			v11 = 0;
			a1x->word_0x1C_28 = a1x->word_0x14_20 & 0x7FF;
			do
			{
				v5 = a1x->word_0x1C_28;
				HIBYTE(v5) = (HIBYTE(v5) + 4) & 7;
				a1x->word_0x1C_28 = v5;
				x_WORD_EB398ar = a1x->array_0x4C_76;
				v6 = a1x->byte_0x44_68;
				v7 = a1x->byte_0x43_67;
				x_WORD_EB398ar.z += a1x->array_0x52_82.aa;
				v8x = sub_4A190(&a1x->array_0x4C_76, v7, v6);
				v9x = v8x;
				if (v8x)
				{
					v8x->word_0x1A_26 = a1x->word_0x1A_26;
					v8x->dword_0x8 /= 3;
					v8x->word_0x1C_28 = a1x->word_0x1C_28;
					v8x->word_0x1E_30 = a1x->word_0x1E_30;
					v10 = a1x->word_0x2A_42;
					v9x->byte_0x43_67 = 10;
					v9x->byte_0x44_68 = 23;
					v9x->word_0x2A_42 = v10;
					if (!v11)
						sub_6E450_distance_sound(v9x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 23);
				}
				v11++;
			} while (v11 < 2);
		}
		else
		{
			sub_57F10(a1x);
		}
	}
}

//----- (000357C0) --------------------------------------------------------
void sub_357C0(type_str_0x6E8E* a1x)//2167c0
{
	int16_t v1; // bx
	uint16_t v2; // cx
	type_str_0x6E8E* ix; // eax
	int v4; // eax
	type_str_0x6E8E* v5x; // ecx
	int v7; // [esp+0h] [ebp-10h]
	uint16_t v8; // [esp+4h] [ebp-Ch]
	int16_t v9; // [esp+8h] [ebp-8h]
	int v10; // [esp+Ch] [ebp-4h]

	a1x->word_0x2A_42 = 10000;
	if (a1x->word_0x2A_42)
	{
		v1 = sub_4A810_get_0x35plus();
		if (v1 < 0)
			v1 = 0;
		if (v1 > 8)
			v1 = 8;
		v2 = 0;
		for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[36/4]; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (ix->word_0x94_148 == a1x->word_0x1A_26)
				v2++;
		}
		if (v1 < 0)
			v1 = 0;
		if (v1 > 64 - v2)
			v1 = 64 - v2;
		if (v1 > 0)
		{
			HIWORD(v4) = HIWORD(a1x);
			LOWORD(v4) = a1x->word_0x2A_42;
			v7 = v4;
			v10 = (int16_t)v4 / v1;
			v9 = 2048 / v1;
			v8 = 0;
			while (v1 > 0)
			{
				x_WORD_EB398ar = a1x->array_0x4C_76;
				sub_57FA0(&x_WORD_EB398ar, v8, 0, 512);
				v5x = sub_4A190(&x_WORD_EB398ar, 5, 9);
				if (v5x)
				{
					v5x->dword_0x90_144 = (int16_t)v7 % (int16_t)v10;
					v5x->word_0x94_148 = a1x->word_0x1A_26;
					v5x->word_0x1A_26 = a1x->word_0x1A_26;
					v5x->word_0x20_32 = __PAIR__(HIBYTE(v8) + 4, (uint8_t)v8) & 0x7FF;
					v5x->word_0x1C_28 = __PAIR__(HIBYTE(v8) + 4, (uint8_t)v8) & 0x7FF;
					v7 -= v10;
				}
				v1--;
				v8 += v9;
			}
		}
	}
	sub_57F10(a1x);
	//return 1;
}

int debugcounter_216940 = 0;

//----- (00035940) --------------------------------------------------------
void sub_35940(type_str_0x6E8E* a1x)//216940 //move mana sphere
{
	//char v1; // dh
	//int16_t v2; // dx
	//int16_t v3; // ax
	//int16_t v4; // ax
	//uint16_t v5; // si
	//int16_t v6; // ST0C_2
	//uint16_t v7; // ST04_2
	type_str_0x6E8E* v8x; // eax
	char v9; // dl
	uint16_t v10; // ax
	signed int v11; // eax
	type_str_0x6E8E* v12x; // eax
	//int16_t v13; // si
	int16_t v14; // ax
	//int16_t v15; // cx
	//int16_t v16; // ax
	//int16_t v17; // t0
	signed int v18; // eax
	//int16_t v19; // ax
	//int16_t v20; // dx
	//int16_t v21; // cx
	int16_t v22; // si
	int v23; // eax
	int16_t v24; // cx
	type_str_0x6E8E* v25x; // eax
	int v26; // eax
	int v27; // edx
	unsigned int v28; // eax
	char v29; // cl
	int v30; // [esp+0h] [ebp-1Ch]
	uint16_t v31; // [esp+4h] [ebp-18h]
	signed int v32; // [esp+8h] [ebp-14h]
	int16_t v33; // [esp+Ch] [ebp-10h]
	char v34; // [esp+10h] [ebp-Ch]
	char v35; // [esp+14h] [ebp-8h]
	char v36; // [esp+18h] [ebp-4h]

	if (debugcounter_216940 >= 0x12) {
		debugcounter_216940++;
		debugcounter_216940--;
	}

	//v1 = a1x->struct_byte_0xc_12_15.byte[1];
	v35 = 0;
	v36 = 0;
	if (a1x->struct_byte_0xc_12_15.byte[1] & 8)
	{
		a1x->struct_byte_0xc_12_15.byte[1] &= 0xF7;
	}
	else
	{
		//v2 = a1x->str_0x5E_94.word_0x68_104;
		if (a1x->str_0x5E_94.word_0x68_104)
		{
			if (a1x->str_0x5E_94.word_0x68_104 != a1x->word_0x94_148)
			{
				v36 = 1;
				if (a1x->str_0x5E_94.dword_0x64_100)
				{
					//v4 = a1x->str_0x5E_94.word_0x68_104;
					a1x->word_0x94_148 = a1x->str_0x5E_94.word_0x68_104;
					sub_6E450_distance_sound(a1x->str_0x5E_94.word_0x68_104, -1, 4);
					//a1x->byte_0xc_12 &= 0xFFDFFFBF;
					a1x->struct_byte_0xc_12_15.dword &= 0xFFDFFFBF;
					/*a1x->byte_0xc_12 &= 0xBF;
					a1x->byte_0xe_14 &= 0xDF;*/
					a1x->struct_byte_0xc_12_15.byte[2] |= 0x20u;
				}
				else if (!(a1x->struct_byte_0xc_12_15.byte[2] & 0x20))
				{
					//v3 = a1x->str_0x5E_94.word_0x68_104;
					a1x->word_0x94_148 = a1x->str_0x5E_94.word_0x68_104;
					sub_6E450_distance_sound(a1x->str_0x5E_94.word_0x68_104, -1, 4);
					a1x->struct_byte_0xc_12_15.byte[0] &= 0xBFu;
				}
			}
			a1x->str_0x5E_94.word_0x68_104 = 0;
			a1x->str_0x5E_94.dword_0x64_100 = 0;
		}
		//v5 = a1x->str_0x5E_94.word_0x7A_122;
		if (a1x->str_0x5E_94.word_0x7A_122)
		{
			v35 = 1;
			a1x->word_0x1C_28 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76,&x_DWORD_EA3E4[a1x->str_0x5E_94.word_0x7A_122]->array_0x4C_76);
			//v6 = a1x->str_0x5E_94.word_0x76_118;
			//v7 = a1x->word_0x1C_28;
			x_WORD_EB398ar.x = 0;
			x_WORD_EB398ar.y = 0;
			x_WORD_EB398ar.z = 0;
			sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->str_0x5E_94.word_0x76_118);
			a1x->word_0x9A_154x.x = x_WORD_EB398ar.x;
			a1x->word_0x9A_154x.y = x_WORD_EB398ar.y;
			a1x->str_0x5E_94.word_0x7A_122 = 0;
		}
		if (a1x->struct_byte_0xc_12_15.byte[0] & 0x40)
		{
			v8x = x_DWORD_EA3E4[a1x->word_0x96_150];
			v9 = 1;
			if (v8x->byte_0x3F_63 != 3 || 3 != v8x->byte_0x40_64)
			{
				if (v8x->byte_0x3F_63 == 5 && v8x->byte_0x40_64 == 23)
				{
					v9 = 0;
					v33 = v8x->word_0x2C_44;
				}
			}
			else
			{
				v9 = 0;
				v33 = 32;
			}
			if (v9)
			{
				a1x->struct_byte_0xc_12_15.byte[0] &= 0xBFu;
			}
			else
			{
				v10 = a1x->word_0x96_150;
				a1x->word_0x2C_44 = 128;
				a1x->word_0x1C_28 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &x_DWORD_EA3E4[v10]->array_0x4C_76);
				v11 = sub_58490_radix_3d_2(&a1x->array_0x4C_76, &x_DWORD_EA3E4[a1x->word_0x96_150]->array_0x4C_76);
				if (v11 <= 1024)
				{
					if (v11 >= 16)
					{
						x_WORD_EB398ar = a1x->array_0x4C_76;
						sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, 16);
					}
					else
					{
						x_WORD_EB398ar = a1x->array_0x4C_76;
						v12x = x_DWORD_EA3E4[a1x->word_0x96_150];
						x_WORD_EB398ar.x = v12x->array_0x4C_76.x;
						//v13 = v12x->array_0x4C_76.z;
						x_WORD_EB398ar.y = v12x->array_0x4C_76.y;
						if (x_WORD_EB398ar.z >= v12x->array_0x4C_76.z)
						{
							if (x_WORD_EB398ar.z > v12x->array_0x4C_76.z + 512)
								x_WORD_EB398ar.z -= v33;
						}
						else
						{
							x_WORD_EB398ar.z += v33;
						}
					}
					v14 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
					if (v14 > x_WORD_EB398ar.z)
						x_WORD_EB398ar.z = v14;
					sub_57CF0(a1x, &x_WORD_EB398ar);
				}
				else
				{
					a1x->struct_byte_0xc_12_15.byte[0] &= 0xBFu;
				}
			}
		}
		else if (a1x->byte_0x39_57 || v35)
		{
			if ((Bit16s)a1x->word_0x9A_154x.x < -64)
				a1x->word_0x9A_154x.x = -64;
			if ((Bit16s)a1x->word_0x9A_154x.x > 64)
				a1x->word_0x9A_154x.x = 64;
			if ((Bit16s)a1x->word_0x9A_154x.y < -64)
				a1x->word_0x9A_154x.y = -64;
			if ((Bit16s)a1x->word_0x9A_154x.y > 64)
				a1x->word_0x9A_154x.y = 64;
			x_WORD_EB398ar = a1x->array_0x4C_76;
			//v15 = a1x->word_0x9A_154x.y;
			x_WORD_EB398ar.x = (Bit16s)a1x->word_0x9A_154x.x + a1x->array_0x4C_76.x;
			x_WORD_EB398ar.y = (Bit16s)a1x->word_0x9A_154x.y + a1x->array_0x4C_76.y;
			//v16 = a1x->word_0x2C_44;
			x_WORD_EB398ar.z += a1x->word_0x2C_44;
			a1x->word_0x2C_44 -= 16;
			if (a1x->word_0x2C_44 < -128)
				a1x->word_0x2C_44 = -128;
			if (x_BYTE_D41B6 && sub_11E70(a1x, &x_WORD_EB398ar))
			{
				if (v35)
				{
					x_WORD_EB398ar = a1x->array_0x4C_76;
				}
				else
				{
					//v17 = a1x->word_0x82_130;
					a1x->word_0x82_130 = 256;
					v32 = 170;
					v34 = 0;
					v30 = 1;
					while (v32 <= 1024)
					{
						x_WORD_EB398ar = a1x->array_0x4C_76;
						v31 = (v30 * v32 + a1x->word_0x1C_28 + 512) & 0x7FF;
						sub_57FA0(&x_WORD_EB398ar, v31, 0, a1x->word_0x82_130);
						x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
						if (!sub_11E70(a1x, &x_WORD_EB398ar))
						{
							v34 = 1;
							break;
						}
						v30 = -v30;
						if (v30 == 1)
							v18 = 170;
						else
							v18 = 0;
						v32 += v18;
					}
					if (v34)
					{
						a1x->word_0x20_32 = v31;
						a1x->word_0x1C_28 = v31;
					}
					else
					{
						a1x->word_0x9A_154x.x = 64;
						//v19 = a1x->array_0x4C_76.x;
						//v20 = a1x->word_0x9A_154x.x;
						a1x->word_0x9A_154x.y = 64;
						//v21 = a1x->word_0x9A_154x.y;
						x_WORD_EB398ar.x = (Bit16s)a1x->word_0x9A_154x.x + a1x->array_0x4C_76.x;
						x_WORD_EB398ar.y = (Bit16s)a1x->word_0x9A_154x.y + a1x->array_0x4C_76.y;
					}
				}
				a1x->word_0x2C_44 = -128;
			}
			v22 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
			if (v22 > (Bit16s)x_WORD_EB398ar.z)
			{
				int cftemp = 0;
				if ((a1x->word_0x2C_44 >> 30) & 1)cftemp = 1;
				v23 = -(((a1x->word_0x2C_44 - ((a1x->word_0x2C_44 >> 31) << 2)) - cftemp) >> 2);
				/*v23 = -((a1x->word_0x2C_44
					- (__CFSHL__(a1x->word_0x2C_44 >> 31, 2)
						+ 4 * (a1x->word_0x2C_44 >> 31))) >> 2);*/
				a1x->word_0x2C_44 = v23;
				if ((int16_t)v23 <= 16)
					a1x->word_0x2C_44 = 0;
				x_WORD_EB398ar.z = v22;
			}
			if (x_BYTE_D41B6)
			{
				v24 = sub_10C60(&x_WORD_EB398ar) - a1x->array_0x52_82.dd;
				if (v24 < (Bit16s)x_WORD_EB398ar.z)
				{
					a1x->word_0x2C_44 = -abs(a1x->word_0x2C_44);
					x_WORD_EB398ar.z = v24;
				}
			}
			sub_57CF0(a1x, &x_WORD_EB398ar);
			if (v22 == x_WORD_EB398ar.z)
			{
				v25x = sub_10A50(a1x);
				if (v25x && !(a1x->struct_byte_0xc_12_15.byte[1] & 0x20))
					sub_36D50(a1x, v25x);
				sub_58030(&a1x->array_0x4C_76, &x_WORD_EB398ar);
				a1x->word_0x9A_154x.x += x_WORD_EB398ar.x;
				int cftemp = 0;
				if ((250* (Bit16s)a1x->word_0x9A_154x.x >> 30) & 1)cftemp = 1;
				v26 = (((250* (Bit16s)a1x->word_0x9A_154x.x - ((250* (Bit16s)a1x->word_0x9A_154x.x >> 31) << 8)) - cftemp) >> 8);
				/*v26 = (250 * (Bit16s)a1x->word_0x9A_154x.x
					- (__CFSHL__(250 * (Bit16s)a1x->word_0x9A_154x.x >> 31, 8)
						+ (250 * (Bit16s)a1x->word_0x9A_154x.x >> 31 << 8))) >> 8;*/
				a1x->word_0x9A_154x.y += x_WORD_EB398ar.y;
				v27 = (Bit16s)a1x->word_0x9A_154x.y;
				a1x->word_0x9A_154x.x = v26;
				cftemp = 0;
				if ((250 * (Bit16s)a1x->word_0x9A_154x.y >> 30) & 1)cftemp = 1;
				//a1x->word_0x9A_154x.y = (250 * v27 - (__CFSHL__(250 * v27 >> 31, 8) + (250 * v27 >> 31 << 8))) >> 8;
				a1x->word_0x9A_154x.y = (((250 * (Bit16s)a1x->word_0x9A_154x.y - ((250 * (Bit16s)a1x->word_0x9A_154x.y >> 31) << 8)) - cftemp) >> 8);
			}
			if (!(a1x->struct_byte_0xc_12_15.byte[1] & 0x20) || v36)
				sub_36920(/*a1x,*/ a1x);
		}
		if (a1x->struct_byte_0xc_12_15.byte[1] & 0x20)
		{
			v28 = a1x->dword_0x8 - 1;
			a1x->dword_0x8 = v28;
			if (v28 < 6)
			{
				if (!v28)
					sub_57F10(a1x);
			}
			else if (v28 <= 6)
			{
				v29 = a1x->struct_byte_0xc_12_15.byte[3] & 0xFE;
				a1x->struct_byte_0xc_12_15.byte[2] |= 0x80u;
				a1x->struct_byte_0xc_12_15.byte[3] = v29;
			}
			else if (v28 == 12)
			{
				a1x->struct_byte_0xc_12_15.byte[3] |= 1u;
			}
		}
	}
	debugcounter_216940++;
}

void sub_35FB0(type_str_0x6E8E* a1x)//216FB0
{
	char v1; // dl
	uint16_t v2; // ax
	int v3; // ST0C_4
	char v4; // ST04_1
	uint16_t v5; // ax
	type_str_0x6E8E* v6x; // eax
	char v7; // dl
	uint16_t v8; // ax
	signed int v9; // eax
	type_str_0x6E8E* v10x; // eax
	int16_t v11; // si
	int16_t v12; // ax
	int16_t v13; // si
	int16_t v14; // si
	int16_t v15; // ax
	type_str_0x6E8E* v16x; // eax
	int16_t v17; // si
	int v18; // eax
	//int16_t v19; // cx
	int16_t v20; // ax
	int16_t v21; // ax
	int16_t v22; // dx
	int16_t v23; // cx
	int16_t v24; // si
	int v25; // eax
	int v26; // eax
	type_str_0x6E8E* v27x; // eax
	int v28; // eax
	int v29; // edx
	int16_t v30; // [esp+0h] [ebp-8h]
	char v31; // [esp+4h] [ebp-4h]

	v1 = a1x->struct_byte_0xc_12_15.byte[1];
	v31 = 0;
	if (v1 & 8)
	{
		a1x->struct_byte_0xc_12_15.byte[1] = v1 & 0xF7;
	}
	else if (a1x->str_0x5E_94.word_0x68_104 && sub_36680(a1x))
	{
		sub_4A190(&a1x->array_0x4C_76, 10, 0);
		sub_57F10(a1x);
	}
	else
	{
		if (a1x->str_0x5E_94.word_0x7A_122)
		{
			v2 = a1x->str_0x5E_94.word_0x7A_122;
			a1x->word_0x82_130 = 0;
			v31 = 1;
			a1x->word_0x1C_28 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &x_DWORD_EA3E4[v2]->array_0x4C_76);
			v3 = a1x->str_0x5E_94.word_0x76_118;
			v4 = a1x->word_0x1C_28;
			x_WORD_EB398ar.x = 0;
			x_WORD_EB398ar.y = 0;
			x_WORD_EB398ar.z = 0;
			sub_57FA0(&x_WORD_EB398ar, v4, 0, v3);
			a1x->word_0x9A_154x.x= x_WORD_EB398ar.x;
			a1x->word_0x9A_154x.y = x_WORD_EB398ar.y;
			a1x->str_0x5E_94.word_0x7A_122 = 0;
		}
		if (a1x->struct_byte_0xc_12_15.byte[0] & 0x40)
		{
			v5 = a1x->word_0x96_150;
			a1x->word_0x82_130 = 0;
			v6x = x_DWORD_EA3E4[v5];
			v7 = 1;
			if (v6x->byte_0x3F_63 != 3 || 3 != v6x->byte_0x40_64)
			{
				if (v6x->byte_0x3F_63 == 5 && v6x->byte_0x40_64 == 23)
				{
					v7 = 0;
					v30 = v6x->word_0x2C_44;
				}
			}
			else
			{
				v7 = 0;
				v30 = 32;
			}
			if (v7)
			{
				a1x->struct_byte_0xc_12_15.byte[0] &= 0xBFu;
			}
			else
			{
				v8 = a1x->word_0x96_150;
				a1x->word_0x2C_44 = 128;
				a1x->word_0x1C_28 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &x_DWORD_EA3E4[v8]->array_0x4C_76);
				v9 = sub_58490_radix_3d_2(&a1x->array_0x4C_76, &x_DWORD_EA3E4[a1x->word_0x96_150]->array_0x4C_76);
				if (v9 <= 1024)
				{
					if (v9 >= 16)
					{
						x_WORD_EB398ar = a1x->array_0x4C_76;
						//*(_DWORD*)& word_EB398 = *(_DWORD*)(a1 + 76);
						//*(&word_EB398 + 2) = *(_WORD*)(a1 + 80);
						sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, 16);
					}
					else
					{
						x_WORD_EB398ar = a1x->array_0x4C_76;
						//*(_DWORD*)& word_EB398 = *(_DWORD*)(a1 + 76);
						//*(&word_EB398 + 2) = *(_WORD*)(a1 + 80);
						v10x = x_DWORD_EA3E4[a1x->word_0x96_150];
						//word_EB398 = v10[38];
						//v11 = v10[40];
						//word_EB39A = v10[39];
						x_WORD_EB398ar.x = v10x->array_0x4C_76.x;
						x_WORD_EB398ar.y = v10x->array_0x4C_76.y;
						v11 = v10x->array_0x4C_76.z;
						if (x_WORD_EB398ar.z >= v11)
						{
							if (x_WORD_EB398ar.z > v11 + 512)
								x_WORD_EB398ar.z -= v30;
						}
						else
						{
							x_WORD_EB398ar.z += v30;
						}
					}
					v12 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
					if (v12 > x_WORD_EB398ar.z)
						x_WORD_EB398ar.z = v12;
					sub_57CF0(a1x, &x_WORD_EB398ar);
				}
				else
				{
					a1x->struct_byte_0xc_12_15.byte[0] &= 0xBFu;
				}
			}
		}
		else
		{
			v13 = a1x->word_0x82_130;
			if (v13)
			{
				if (v13 <= 0)
				{
					if (v13 < -4)
						a1x->word_0x82_130 = v13 + 4;
				}
				else if (v13 > 4)
				{
					a1x->word_0x82_130 = v13 - 4;
				}
				//*(_DWORD*)& word_EB398 = *(_DWORD*)(a1 + 76);
				//*(&word_EB398 + 2) = *(_WORD*)(a1 + 80);
				x_WORD_EB398ar = a1x->array_0x4C_76;
				sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
				v14 = a1x->word_0x2C_44 - 16;
				a1x->word_0x2C_44 = v14;
				if (v14 < -128)
					a1x->word_0x2C_44 = -128;
				x_WORD_EB398ar.z += a1x->word_0x2C_44;
				if (x_BYTE_D41B6 && (uint8_t)sub_11E70(a1x, &x_WORD_EB398ar))
				{
					//*(_DWORD*)& word_EB398 = *(_DWORD*)(a1 + 76);
					//*(&word_EB398 + 2) = *(_WORD*)(a1 + 80);
					x_WORD_EB398ar = a1x->array_0x4C_76;
					a1x->word_0x82_130 = 0;
					a1x->word_0x2C_44 = -128;
				}
				else
				{
					sub_57CF0(a1x, &x_WORD_EB398ar);
				}
				v15 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
				if (v15 <= (Bit16s)x_WORD_EB398ar.z)
				{
					if (x_BYTE_D41B6)
					{
						v17 = sub_10C60(&x_WORD_EB398ar) - a1x->array_0x52_82.dd;
						if (v17 < x_WORD_EB398ar.z)
						{
							a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
							v18 = (a1x->word_0x14_20 & 3) - 2;
							a1x->word_0x82_130 = v18;
							if (!(_WORD)v18)
								a1x->word_0x82_130 = 1;
							a1x->word_0x2C_44 = -abs(a1x->word_0x2C_44);
							x_WORD_EB398ar.z = v17;
						}
					}
				}
				else
				{
					a1x->word_0x82_130 = 0;
					a1x->array_0x4C_76.z = v15;
					if (sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 1)
					{
						a1x->word_0x2C_44 = 0;
						v16x = sub_4A190(&a1x->array_0x4C_76, 10, 5);
						if (v16x)
							sub_6E450_distance_sound(v16x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 27);
					}
					else
					{
						a1x->word_0x2C_44 = 128;
					}
				}
			}
			else if (a1x->byte_0x39_57 || v31)
			{
				if ((Bit16s)a1x->word_0x9A_154x.x < -64)
					a1x->word_0x9A_154x.x = -64;
				if ((Bit16s)a1x->word_0x9A_154x.x > 64)
					a1x->word_0x9A_154x.x = 64;
				if ((Bit16s)a1x->word_0x9A_154x.y < -64)
					a1x->word_0x9A_154x.y = -64;
				if ((Bit16s)a1x->word_0x9A_154x.y > 64)
					a1x->word_0x9A_154x.y = 64;
				//*(_DWORD*)& word_EB398 = *(_DWORD*)(a1 + 76);
				//*(&word_EB398 + 2) = *(_WORD*)(a1 + 80);
				x_WORD_EB398ar = a1x->array_0x4C_76;
				//v19 = a1x->word_0x9A_154x.y;
				x_WORD_EB398ar.x = a1x->word_0x9A_154x.x + a1x->array_0x4C_76.x;
				x_WORD_EB398ar.y = a1x->word_0x9A_154x.y + a1x->array_0x4C_76.y;
				v20 = a1x->word_0x2C_44;
				x_WORD_EB398ar.z += v20;
				a1x->word_0x2C_44 = v20 - 16;
				if ((Bit16s)(v20 - 16) < -128)
					a1x->word_0x2C_44 = -128;
				if (x_BYTE_D41B6 && (uint8_t)sub_11E70(a1x, &x_WORD_EB398ar))
				{
					if (v31)
					{
						//*(_DWORD*)& word_EB398 = *(_DWORD*)(a1 + 76);
						//*(&word_EB398 + 2) = *(_WORD*)(a1 + 80);
						x_WORD_EB398ar = a1x->array_0x4C_76;
					}
					else
					{
						a1x->word_0x9A_154x.x = 64;
						v21 = a1x->array_0x4C_76.x;
						v22 = a1x->word_0x9A_154x.x;
						a1x->word_0x9A_154x.y = 64;
						v23 = a1x->word_0x9A_154x.y;
						x_WORD_EB398ar.x = v22 + v21;
						x_WORD_EB398ar.y = v23 + a1x->array_0x4C_76.y;
					}
					a1x->word_0x2C_44 = -128;
				}
				v24 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
				if (v24 > (Bit16s)x_WORD_EB398ar.z)
				{
					/*v25 = -((signed int)(a1x->word_0x2C_44
						- (__CFSHL__(a1x->word_0x2C_44 >> 32, 2)
							+ 4 * (a1x->word_0x2C_44 >> 32))) >> 2);*/
					v25 = -((a1x->word_0x2C_44 - (my_sign32(a1x->word_0x2C_44) * 4) + my_sign32(a1x->word_0x2C_44)) >> 2);
					a1x->word_0x2C_44 = v25;
					if ((int16_t)v25 <= 16)
						a1x->word_0x2C_44 = 0;
					x_WORD_EB398ar.z = v24;
				}
				if (x_BYTE_D41B6 && (int16_t)(sub_10C60(&x_WORD_EB398ar) - a1x->array_0x52_82.dd) < x_WORD_EB398ar.z)
				{
					v26 = -abs(a1x->word_0x2C_44);
					//JUMPOUT(*(_DWORD*)byte_3659C);
					//[2BC39C],cx
					//[2BC39C] = (int16_t)(sub_10C60(&word_EB398) - *(_WORD*)(a1 + 88));//fix !!
				}
				sub_57CF0(a1x, &x_WORD_EB398ar);
				if (v24 == x_WORD_EB398ar.z)
				{
					v27x = sub_10A50(a1x);
					if (v27x)
					{
						sub_36F30(a1x, v27x);
						sub_36920(a1x);
					}
					sub_58030(&a1x->array_0x4C_76, &x_WORD_EB398ar);
					a1x->word_0x9A_154x.x += x_WORD_EB398ar.x;
					/*v28 = (250 * a1x->word_0x9A_154x.x
						- (__CFSHL__(250 * a1x->word_0x9A_154x.x >> 31, 8)
							+ (250 * a1x->word_0x9A_154x.x >> 31 << 8))) >> 8;*/
					v28 = ((250 * (Bit16s)a1x->word_0x9A_154x.x) - (my_sign32(250 * (Bit16s)a1x->word_0x9A_154x.x) * 256) + my_sign32(250 * (Bit16s)a1x->word_0x9A_154x.x)) >> 8;
					a1x->word_0x9A_154x.y += x_WORD_EB398ar.y;
					v29 = a1x->word_0x9A_154x.y;
					a1x->word_0x9A_154x.x = v28;
					//a1x->word_0x9A_154x.y = (250 * v29 - (__CFSHL__(250 * v29 >> 31, 8) + (250 * v29 >> 31 << 8))) >> 8;
					a1x->word_0x9A_154x.y = ((250 * (Bit16s)v29) - (my_sign32(250 * (Bit16s)v29) * 256) + my_sign32(250 * (Bit16s)v29)) >> 8;
				}
			}
		}
	}
}

//----- (00036680) --------------------------------------------------------
char sub_36680(type_str_0x6E8E* a1x)//217680
{
	uint8_t v1; // al
	signed int v2; // eax
	int v3; // eax
	char v5; // [esp+0h] [ebp-4h]

	v5 = 0;
	if (a1x->word_0x28_40 == a1x->str_0x5E_94.word_0x68_104)
	{
		a1x->str_0x5E_94.word_0x68_104 = 0;
		a1x->str_0x5E_94.dword_0x64_100 = 0;
	}
	else
	{
		v1 = a1x->byte_0x46_70;
		if (v1 < 1u)
		{
			if (!v1)
			{
				sub_36770(a1x);
				sub_6D8B0(a1x->word_0x28_40, 0x16u, 1);
				v5 = 1;
			}
		}
		else if (v1 <= 1u)
		{
			v2 = a1x->dword_0x10_16;
			a1x->dword_0x10_16 = v2 + 1;
			if (v2 >= 8)
			{
				sub_6D8B0(a1x->word_0x28_40, 0x16u, 1);
				return 1;
			}
			if (!(a1x->dword_0x10_16 & 1))
				sub_36770(a1x);
		}
		else if (v1 <= 3u)
		{
			v3 = a1x->dword_0x10_16;
			a1x->dword_0x10_16 = v3 + 1;
			if (!v3)
			{
				sub_36850(a1x);
				return 0;
			}
			if (v3 + 1 > 2)
			{
				sub_6D8B0(a1x->word_0x28_40, 0x16u, 1);
				return 1;
			}
		}
	}
	return v5;
}

//----- (00036770) --------------------------------------------------------
void sub_36770(type_str_0x6E8E* a1x)//217770
{
	type_str_0x6E8E* v1x; // ebx
	type_str_0x6E8E* v2x; // ST08_4
	type_str_0x6E8E* v3x; // eax

	v1x = sub_4A190(&a1x->array_0x4C_76, 9, 0);
	if (v1x)
	{
		v2x = x_DWORD_EA3E4[a1x->str_0x5E_94.word_0x68_104];
		v1x->word_0x96_150 = a1x->str_0x5E_94.word_0x68_104;
		sub_655C0(v1x, v2x);
		v1x->word_0x1C_28 = v1x->word_0x20_32;
		v1x->word_0x1E_30 = v1x->word_0x22_34;
		v1x->array_0x4C_76.z += a1x->array_0x52_82.dd;
		v1x->word_0x2A_42 = a1x->word_0x2A_42;
		sub_6E450_distance_sound(v1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 9);
		if (sub_104D0_terrain_tile_is_water(&v1x->array_0x4C_76) == 1)
		{
			v3x = sub_4A190(&a1x->array_0x4C_76, 10, 5);
			if (v3x)
				sub_6E450_distance_sound(v3x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 27);
		}
	}
}

//----- (00036850) --------------------------------------------------------
void sub_36850(type_str_0x6E8E* a1x)//217850
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // ebx
	type_str_0x6E8E* v3x; // esi

	x_WORD_EB398ar = a1x->array_0x4C_76;
	v1x = sub_4A190(&x_WORD_EB398ar, 9, 9);
	v2x = v1x;
	if (v1x)
	{
		v3x = x_DWORD_EA3E4[a1x->str_0x5E_94.word_0x68_104];
		v1x->byte_0x43_67 = 10;
		v1x->byte_0x44_68 = 23;
		v1x->word_0x1A_26 = a1x->word_0x1A_26;
		v1x->word_0x96_150 = a1x->str_0x5E_94.word_0x68_104;
		sub_655C0(v1x, v3x);
		//LOWORD(v1) = *(x_WORD *)(v2 + 32);
		v2x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x880];
		v2x->word_0x1C_28 = v2x->word_0x20_32;
		v2x->word_0x1E_30 = v2x->word_0x22_34;
		v2x->byte_0x42_66 = v3x->byte_0x40_64;
		//LOBYTE(v1) = *(x_BYTE *)(v3 + 63);
		v2x->byte_0x41_65 = v3x->byte_0x3F_63;
		v2x->array_0x4C_76.z += a1x->array_0x52_82.dd;
		v2x->word_0x2A_42 = a1x->word_0x2A_42;
	}
	//return v1;
}

//----- (00036920) --------------------------------------------------------
void sub_36920(/*int16_t a1, */type_str_0x6E8E* a2x)//217920
{
	int16_t i; // si
	int16_t v3; // ax

	Bit16s a1;

	for (i = 0; i < 7 && a2x->dword_0x90_144 > x_DWORD_DB538[i]; i++)
		;
	v3 = sub_369F0(/*a1, */a2x->word_0x94_148);
	if (v3 + i != a2x->word_0x5A_90)
	{
		/*LOBYTE(v3) = */sub_49C90(a2x, i + v3);
		switch (i)
		{
		case 0:
			a1 = 13;
			break;
		case 1:
			a1 = 28;
			break;
		case 2:
			a1 = 42;
			break;
		case 3:
			a1 = 56;
			break;
		case 4:
			a1 = 70;
			break;
		case 5:
			a1 = 84;
			break;
		case 6:
			a1 = 98;
			break;
		case 7:
			a1 = 112;
			break;
		default:
			break;
		}
		a2x->array_0x52_82.xshift = a1;
		a2x->array_0x52_82.yshift = a1;
		a2x->array_0x52_82.dd = a1;
		a2x->array_0x52_82.aa = a1;
	}
	//return v3;
}

//----- (000369F0) --------------------------------------------------------
signed int sub_369F0(/*signed int a1, */int16_t a2)//2179f0
{
	type_str_0x6E8E* v2x; // eax
	signed int result; // eax

	v2x = x_DWORD_EA3E4[a2];
	if (v2x <= x_DWORD_EA3E4[0] || v2x->byte_0x3F_63 != 3)
		result = 52;
	else
		result = sub_36A50(/*a1, */v2x->dword_0xA4_164x->word_0x38_56);
	return result;
}

//----- (00036A50) --------------------------------------------------------
signed int sub_36A50(/*signed int a1, */char a2)//217a50
{
	char v2; // al
	signed int result; // eax

	signed int a1;

	v2 = a2;
	if (a2 >= 0)
		v2 = sub_616D0(a2);
	switch (v2 + 1)
	{
	case 0:
		result = 52;
		break;
	case 1:
		result = 105;
		break;
	case 2:
		result = 113;
		break;
	case 3:
		result = 121;
		break;
	case 4:
		result = 129;
		break;
	case 5:
		result = 137;
		break;
	case 6:
		result = 145;
		break;
	case 7:
		result = 153;
		break;
	case 8:
		a1 = 161;
		goto LABEL_13;
	default:
	LABEL_13:
		result = a1;
		break;
	}
	return result;
}

//----- (00036AE0) --------------------------------------------------------
void sub_36AE0(type_str_0x6E8E* a1x)//217ae0
{
	int result; // eax
	uint16_t v2; // dx
	type_str_0x6E8E* v3x; // edi
	type_str_0x6E8E* ix; // ecx

	result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	v2 = a1x->str_0x5E_94.word_0x68_104;
	a1x->array_0x4C_76.z = result;
	if (v2)
	{
		v3x = x_DWORD_EA3E4[v2];
		if (v3x->byte_0x3F_63 == 3 && !a1x->word_0x94_148)
		{
			for (ix = x_DWORD_EA3E4[1]; ix < x_DWORD_EA3E4[0x3e8]; ix++)
			{
				if (a1x-D41A0_BYTESTR_0.struct_0x6E8E == ix->word_0x94_148)
					ix->word_0x94_148 = v3x-D41A0_BYTESTR_0.struct_0x6E8E;
			}
		}
		a1x->str_0x5E_94.word_0x68_104 = 0;
		sub_57F10(a1x);
	}
	//return result;
}

//----- (00036BA0) --------------------------------------------------------
void sub_36BA0(type_str_0x6E8E* a1x, char a2)//217ba0
{
	int v2; // edx
	int v3; // edi
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // ebx
	int v6; // edx
	int16_t v7; // cx
	int16_t v8; // dx
	uint16_t v9; // ax
	int v10; // ST14_4
	int16_t v11; // ax
	int v12; // [esp+0h] [ebp-Ch]
	int v13; // [esp+8h] [ebp-4h]

	v2 = a1x->dword_0x90_144;
	if (v2 > 0)
	{
		if (a2)
		{
			v3 = v2 / 1000;
			if (v2 / 1000 < 1)
				v3 = 1;
			if (v3 > 16)
				v3 = 16;
			v13 = a1x->dword_0x90_144 / v3;
		}
		else
		{
			v3 = 1;
			v13 = a1x->dword_0x90_144;
		}
		v12 = 0;
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		while (v3 > v12)
		{
			v4x = sub_4A190(&a1x->array_0x4C_76, 10, 39);
			v5x = v4x;
			if (v4x)
			{
				if (v3 - 1 == v12)
					v6 = a1x->dword_0x90_144 - (v3 - 1) * v13;
				else
					v6 = v13;
				v4x->dword_0x90_144 = v6;
				v7 = v4x->word_0x14_20;
				v4x->word_0x94_148 = a1x->word_0x94_148;
				v4x->word_0x14_20 = 9377 * v7 + 9439;
				v8 = v4x->word_0x14_20;
				v4x->word_0x1C_28 = (v4x->word_0x14_20 % 0x71u + a1x->word_0x1C_28 - 56) & 0x7FF;
				v4x->word_0x14_20 = 9377 * v8 + 9439;
				v9 = v4x->word_0x14_20;
				v5x->word_0x9A_154x.x = 0;
				v5x->word_0x9A_154x.y = 0;
				v5x->word_0x82_130 = v9 % 0x30u + 16;
				v10 = a1x->array_0x4C_76.z;
				v11 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
				v5x->word_0x2C_44 = (1024 - (v10 - v11) - (__CFSHL__((1024 - (v10 - v11)) >> 31, 3) + 8 * ((1024 - (v10 - v11)) >> 31))) >> 3;
				sub_57FA0(&v5x->word_0x9A_154x, v5x->word_0x1C_28, 0, v5x->word_0x82_130);
			}
			v12++;
		}
		a1x->word_0x94_148 = 0;
	}
}

//----- (00036D50) --------------------------------------------------------
void sub_36D50(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//217d50
{
	type_str_0x6E8E* v3x; // edx
	type_str_0x6E8E* v4x; // eax
	//int v5; // eax
	int v6; // eax
	//int v7; // edi
	//int v8; // edx
	//int v9; // eax
	//Bit8u* v10; // eax
	//int64_t v11; // rtt

	if (a1x->word_0x94_148 || a2x->word_0x94_148)
	{
		if (!a1x->word_0x94_148)
		{
			a1x->dword_0x90_144 += a2x->dword_0x90_144;
			a1x->word_0x94_148 = a2x->word_0x94_148;
			if (a2x->struct_byte_0xc_12_15.byte[2] & 0x20)
			{
				a1x->struct_byte_0xc_12_15.byte[2] |= 0x20u;
				return sub_57F20(a2x);
			}
			return sub_57F20(a2x);
		}
		if (!a2x->word_0x94_148)
		{
			a1x->dword_0x90_144 += a2x->dword_0x90_144;
			return sub_57F20(a2x);
		}
		v3x = x_DWORD_EA3E4[a1x->word_0x94_148];
		v4x = x_DWORD_EA3E4[a2x->word_0x94_148];
		if (v3x->byte_0x3F_63 == 10 && v4x->byte_0x3F_63 == 10)
		{
			a1x->dword_0x90_144 += a2x->dword_0x90_144;
			return sub_57F20(a2x);
		}
		if (v3x->byte_0x3F_63 == 10)
		{
			a1x->dword_0x90_144 += a2x->dword_0x90_144;
			v6 = v4x- D41A0_BYTESTR_0.struct_0x6E8E;
		LABEL_22:
			a1x->word_0x94_148 = v6;
			return sub_57F20(a2x);
		}
		if (v4x->byte_0x3F_63 == 10)
		{
			//v7 = a2x->dword_0x90_144 + a1x->dword_0x90_144;
			//v8 = v3x-D41A0_BYTESTR_0.struct_0x6E8E;
			//v9 = v8;
			v6 = v3x - D41A0_BYTESTR_0.struct_0x6E8E;
		}
		else
		{
			if (v3x == v4x)
			{
				a1x->dword_0x90_144 += a2x->dword_0x90_144;
				return sub_57F20(a2x);
			}
			if (v3x->dword_0x8C_140 > v4x->dword_0x8C_140)
			{
				a1x->dword_0x90_144 += a2x->dword_0x90_144;
				v6 = v3x-D41A0_BYTESTR_0.struct_0x6E8E;
				goto LABEL_22;
			}
			//v7 = a2x->dword_0x90_144 + a1x->dword_0x90_144;
			//v9 = (Bit8u*)v4x - (&x_D41A0_BYTEARRAY_0[2288330022]);
			//v8 = v9;
			v6 = v4x - D41A0_BYTESTR_0.struct_0x6E8E;
		}
		//LODWORD(v11) = v9;
		//HIDWORD(v11) = v8 >> 31;
		//v6 = v11 / 168;
		a1x->dword_0x90_144 += a2x->dword_0x90_144;
		goto LABEL_22;
	}
	a1x->dword_0x90_144 += a2x->dword_0x90_144;
	return sub_57F20(a2x);
}

//----- (00036F30) --------------------------------------------------------
void sub_36F30(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//217f30
{
	int16_t v2; // bx

	LOBYTE(v2) = 0;
	if (a1x->byte_0x46_70 >= a2x->byte_0x46_70)
	{
		if (a2x->word_0x28_40 != a1x->word_0x28_40)
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v2 = a1x->word_0x14_20 & 1;
		}
	}
	else
	{
		LOBYTE(v2) = 1;
	}
	if ((x_BYTE)v2)
	{
		a1x->word_0x28_40 = a2x->word_0x28_40;
		a1x->word_0x94_148 = a2x->word_0x94_148;
		a1x->byte_0x46_70 = a2x->byte_0x46_70;
		a1x->word_0x2A_42 = a2x->word_0x2A_42;
	}
	a1x->dword_0x90_144 += a2x->dword_0x90_144;
	return sub_57F20(a2x);
}

//----- (00036FC0) --------------------------------------------------------
void sub_36FC0(type_str_0x6E8E* a1x)//217fc0
{
	uint8_t v1; // bl
	//int v2; // eax
	unsigned int v3; // esi
	unsigned int v4; // edi
	char result; // al
	uaxis_2d v6x; // bx
	uint8_t v7; // cl
	char v8; // dl
	int16_t v9; // dx
	int v10; // eax
	int v11; // eax
	uint8_t v12; // cl
	char v13; // ch
	char v14; // cl
	uaxis_2d v15x; // bx
	uint8_t *v16; // [esp+0h] [ebp-2Ch]
	uint8_t *v17; // [esp+4h] [ebp-28h]
	unsigned int v18; // [esp+8h] [ebp-24h]
	unsigned int v19; // [esp+Ch] [ebp-20h]
	unsigned int v20; // [esp+10h] [ebp-1Ch]
	unsigned int v21; // [esp+14h] [ebp-18h]
	uint8_t *v22; // [esp+18h] [ebp-14h]
	uaxis_2d v23x; // [esp+1Ch] [ebp-10h]
	uaxis_2d v24x; // [esp+1Ch] [ebp-10h]
	int16_t v25; // [esp+20h] [ebp-Ch]
	char v26; // [esp+24h] [ebp-8h]
	uaxis_2d v27x; // [esp+24h] [ebp-8h]
	char v28; // [esp+25h] [ebp-7h]
	char v29; // [esp+28h] [ebp-4h]

	v29 = 0;
	v26 = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
	v28 = (uint16_t)(a1x->array_0x4C_76.y + 128) >> 8;
	v1 = a1x->byte_0x46_70;
	v25 = a1x->array_0x4C_76.z >> 5;
	//v2 = 6 * v1;
	/*  v3 = *(uint8_t *)(v2 + **filearray_2aa18c[24] + 5);
	  v17 = *(uint8_t **)(v2 + **filearray_2aa18c[24]);
	  v4 = *(uint8_t *)(v2 + **filearray_2aa18c[24] + 4);
	  result = sub_37740(a1);*/
	v3 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[v1].height;
	v17 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[v1].data;
	v4 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[v1].width;
	result = sub_37740(a1x);
	//result = 0;v3 = 0;v4 = 0;v17 = 0;  //fix it
	if (!result)
	{
		if (x_WORD_180660_VGA_type_resolution == 1)
		{
			v3 >>= 1;
			v4 >>= 1;
		}
		if (x_BYTE_D41B6 && !(x_WORD_D93C0_bldgprmbuffer[2+4 * v1] & 4))
			v29 = 1;
		v27x._axis_2d.x = v26 - (v4 >> 1);
		v27x._axis_2d.y = v28 - (v3 >> 1);
		v23x.word = v27x.word;
		v20 = 0;
		v22 = v17;
		while (v3 > v20)
		{
			v6x.word = v23x.word;
			v18 = 0;
			while (v4 > v18)
			{
				sub_57390(v6x, a1x->word_0x1A_26);
				v7 = v22[1];
				if (v7 != 0xff)
				{
					x_BYTE_11B4E0_height[v6x.word] = v7 + v25;
					v8 = x_BYTE_13B4E0_angle[v6x.word];
					if (!(v8 & 7))
					{
						x_BYTE_13B4E0_angle[v6x.word] = v8 & 0xF8 | 1;						
						sub_462A0(v6x, v6x);
					}
				}
				if (v29)
				{
					v9 = x_BYTE_11B4E0_height[v6x.word];
					if (v9 >= v25)
						v10 = (uint8_t)v9;
					else
						v10 = v25;
					v11 = v10 + 80;
					if (v11 > 255)
						v11 = 255;
					if (v11 > (uint8_t)x_BYTE_14B4E0[v6x.word])
						x_BYTE_14B4E0[v6x.word] = v11;
					v12 = x_BYTE_11B4E0_height[v6x.word];
					if ((uint8_t)x_BYTE_14B4E0[v6x.word] > v12)
					{
						x_BYTE_13B4E0_angle[v6x.word] &= 0xF7u;
					}
					else
					{
						v13 = x_BYTE_13B4E0_angle[v6x.word] | 8;
						x_BYTE_14B4E0[v6x.word] = v12 - 1;
						x_BYTE_13B4E0_angle[v6x.word] = v13;
					}
				}
				//LOBYTE(v6) = v6 + 1;
				v6x._axis_2d.x++;
				++v18;
				v22 += 2;
			}
			++v20;
			//++HIBYTE(v23);
			v23x._axis_2d.y++;
		}
		v24x.word = v27x.word;
		//result = (char)v17;
		v19 = 0;
		v16 = v17;
		if (v3)
		{
			do
			{
				v14 = 0;
				v15x.word = v24x.word;
				v21 = 0;
				while (v4 > v21)
				{
					// FIXME: types
					// // if (*v16 != 0xff)
					// 	sub_45DC0((Bit8u)v16, v14, v15x, *v16);
					v15x._axis_2d.x++;
					v21++;
					v16 += 2;
				}
				//result = v19++ + 1;
				v19++;
				v24x._axis_2d.y++;
			} while (v3 > v19);
		}
	}
	//return result;
}

int debugcounter_218240 = 0;

//----- (00037240) --------------------------------------------------------
void sub_37240(type_str_0x6E8E* a1x)//218240
{
	Bit8u v1; // cl
	posistruct v2; // esi
	unsigned int v3; // edi
	unsigned int v4; // esi
	//int v5; // ecx
	//char v6; // dh
	Bit16u v7; // dx
	int v8; // eax
	int v9; // eax
	int v10; // edx
	Bit8u v11; // ch
	//Bit8u v12; // cl
	Bit8u* v13; // ebx
	unsigned int v14; // edx
	Bit8u* v15; // ebx
	//Bit8u v16; // dl
	Bit8u v17; // al
	Bit16u v18; // ax
	unsigned int v19; // esi
	int v20; // edi
	unsigned int v21; // [esp+0h] [ebp-58h]
	unsigned int v22; // [esp+4h] [ebp-54h]
	unsigned int v23; // [esp+8h] [ebp-50h]
	unsigned int v24; // [esp+Ch] [ebp-4Ch]
	unsigned int v25; // [esp+18h] [ebp-40h]
	Bit8u* v26; // [esp+1Ch] [ebp-3Ch]
	Bit8u* v27; // [esp+20h] [ebp-38h]
	unsigned int v28; // [esp+24h] [ebp-34h]
	unsigned int v29; // [esp+28h] [ebp-30h]
	unsigned int v30; // [esp+2Ch] [ebp-2Ch]
	unsigned int v31; // [esp+30h] [ebp-28h]
	unsigned int v32; // [esp+34h] [ebp-24h]
	unsigned int v33; // [esp+38h] [ebp-20h]
	Bit8u* v34; // [esp+40h] [ebp-18h]
	int v35; // [esp+44h] [ebp-14h]
	Bit8u v36; // [esp+48h] [ebp-10h]
	uaxis_2d v37x; // [esp+48h] [ebp-10h]
	uaxis_2d v38x; // [esp+48h] [ebp-10h]
	Bit8u v39; // [esp+49h] [ebp-Fh]
	uaxis_2d v40x; // [esp+4Ch] [ebp-Ch]
	uaxis_2d v41x; // [esp+4Ch] [ebp-Ch]
	uaxis_2d v42x; // [esp+4Ch] [ebp-Ch]
	uaxis_2d v43x; // [esp+4Ch] [ebp-Ch]
	uaxis_2d v44x; // [esp+4Ch] [ebp-Ch]
	uaxis_2d v45x; // [esp+50h] [ebp-8h]
	uaxis_2d v46x; // [esp+50h] [ebp-8h]
	uaxis_2d v47x; // [esp+50h] [ebp-8h]
	uaxis_2d v48x; // [esp+50h] [ebp-8h]
	uaxis_2d v49x; // [esp+50h] [ebp-8h]
	Bit8u v50; // [esp+54h] [ebp-4h]

	//Bit8u v13x=0;
	Bit8u v17x;

	v50 = 0;
	if (a1x->dword_0x4 == a1x->dword_0x8)
		sub_49EC0(a1x, a1x->byte_0x46_70);
	if (!sub_37740(a1x))
	{
		v36 = (a1x->array_0x4C_76.x + 128) >> 8;
		v1 = a1x->byte_0x46_70;
		v39 = (a1x->array_0x4C_76.y + 128) >> 8;
		v35 = a1x->array_0x4C_76.z >> 5;
		v2 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[v1];
		/*switch (v1)
		{
		case 0x11:
			v2 = *filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct;
			break;
		default:
			mydelay(10000);
			exit(0);
		}*/
		v3 = v2.height;
		v26 = v2.data;
		v4 = v2.width;
		if (x_WORD_180660_VGA_type_resolution == 1)
		{
			v3 >>= 1;
			v4 >>= 1;
		}
		if (x_BYTE_D41B6 && !(x_WORD_D93C0_bldgprmbuffer[2+4 * v1] & 4))
			v50 = 1;
		v22 = v3 >> 1;
		//v5 = *(Bit32u*)(a1 + 8) - 1;
		a1x->dword_0x8--;
		v25 = v4 >> 1;
		if (a1x->dword_0x8 <= 0)//adress 21830a
		{
			//LOBYTE(v38) = v36 - v25;
			//HIBYTE(v38) = v39 - v22;
			v38x._axis_2d.x = v36 - v25;
			v38x._axis_2d.y = v39 - v22;
			v23 = 0;
			v44x.word = v38x.word;
			v27 = v26;
			while (v3 > v23)
			{
				v21 = 0;
				v49x.word = v44x.word;
				while (v4 > v21)
				{
					if (v27[0] != 0xffu)
					{
						sub_462A0(v49x, v49x);//218609
					}
					v21++;
					v27 += 2;
					//LOBYTE(v49)++;
					v49x._axis_2d.x++;
				}
				v23++;
				//HIBYTE(v44)++;
				v44x._axis_2d.y++;
			}
			v17 = a1x->byte_0x45_69;//adress 218650
			if (v17 >= 0x30u)
			{
				if (v17 <= 0x30u)
				{
					x_DWORD_EA3E4[a1x->word_0x28_40]->word_0x2E_46 = 2;
					sub_377A0(a1x);
					sub_57F10(a1x);
				}
				else if (v17 == 51)
				{
					a1x->dword_0x8 = 1000 * a1x->word_0x2A_42;
					v18 = a1x->word_0x94_148;
					a1x->byte_0x45_69 = 52;
					if (v18)
						a1x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
					else
						a1x->struct_byte_0xc_12_15.byte[0] |= 1u;
					a1x->word_0x9A_154x.z = a1x->array_0x4C_76.z;
					v19 = v4 >> 1;
					a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
					v20 = (v3 >> 1) & 0xFFFF;
					sub_48A20(v20, v38x._axis_2d.x, v38x._axis_2d.y, v20, (Bit16u)v19, 2u);
					sub_48A20(v20, v38x._axis_2d.x, v38x._axis_2d.y, v20, (Bit16u)v19, 5u);//problem
					sub_377A0(a1x);
				}
			}
		}
		else
		{
			v37x._axis_2d.x = v36 - v25;
			v37x._axis_2d.y = v39 - v22;
			if (a1x->dword_0x4 - 1 == a1x->dword_0x8)
			{
				v29 = 0;
				v40x.word = v37x.word;
				while (v3 > v29)
				{
					v30 = 0;
					v45x.word = v40x.word;
					while (v4 > v30)
					{
						sub_57390(v45x, a1x->word_0x1A_26);
						v30++;
						v45x._axis_2d.x++;
					}
					v29++;
					v40x._axis_2d.y++;
				}
			}
			v41x.word = v37x.word;//adress 218389
			v28 = 0;
			v34 = v26;
			while (v3 > v28)
			{
				v33 = 0;
				v46x.word = v41x.word;
				while (v4 > v33)
				{
					if (v34[1] != 0xffu)
					{
						//v6 = x_BYTE_13B4E0_angle[v46];
						x_BYTE_11B4E0_height[v46x.word] += ((Bit32s)((Bit8u)v34[1] + (Bit16u)v35 - x_BYTE_11B4E0_height[v46x.word]))/ a1x->dword_0x8;
						if (!(x_BYTE_13B4E0_angle[v46x.word] & 7))
						{
							x_BYTE_13B4E0_angle[v46x.word] = x_BYTE_13B4E0_angle[v46x.word] & 0xF0 | 1;
							
							sub_462A0(v46x, v46x);
						}
					}
					if (v50)
					{
						v7 = x_BYTE_11B4E0_height[v46x.word];
						if (v7 >= (Bit16u)v35)
							v8 = (Bit8u)v7;
						else
							v8 = (Bit16u)v35;
						v9 = v8 + 80;
						if (v9 > 255)
							v9 = 255;
						v10 = x_BYTE_14B4E0[v46x.word];
						if (v9 > v10)
							x_BYTE_14B4E0[v46x.word] = v10 + (Bit32u)((v9 - v10) / a1x->dword_0x8);
						v11 = x_BYTE_11B4E0_height[v46x.word];
						if (x_BYTE_14B4E0[v46x.word] > v11)
						{
							x_BYTE_13B4E0_angle[v46x.word] &= 0xF7u;
						}
						else
						{
							x_BYTE_14B4E0[v46x.word] = v11 - 1;
							x_BYTE_13B4E0_angle[v46x.word] |= 8u;
						}
					}
					v33++;
					v34 += 2;
					v46x._axis_2d.x++;
				}
				v28++;
				v41x._axis_2d.y++;
			}
			//v12 = 5;//adress 2184e0
			if (!(a1x->dword_0x8 % 5) || a1x->dword_0x8 == 1)
			{
				v13 = v26;
				v14 = 0;
				v42x.word = v37x.word;
				while (v14 < v3)
				{
					//v12 = 0;
					v32 = 0;
					v47x = v42x;
					while (v4 > v32)
					{
						if (v13[0] != 0xffu)
						{//adress 218519
							//v12 = x_BYTE_13B4E0_angle[v47] & 0xF0 | 1;
							x_BYTE_13B4E0_angle[v47x.word] = x_BYTE_13B4E0_angle[v47x.word] & 0xF0 | 1;
							x_BYTE_10B4E0_terraintype[v47x.word] = 1;
						}
						v13 += 2;
						v32++;
						v47x._axis_2d.x++;
					}
					v14++;
					v42x._axis_2d.y++;
				}
				v31 = 0;//21855e
				v15 = v26;
				v43x.word = v37x.word;
				if (v3)
				{
					do
					{
						//v16 = 0;
						v24 = 0;
						v48x = v43x;
						v17x = 0;
						while (v4 > v24)
						{
							if (v15[0] != 0xffu)//adress 218593
								sub_45DC0(v17x, v24, v48x, v15[0]);//adress
							v15 += 2;
							//v12 = v24 + 1;
							//v16 = v48 + 1;
							//13x = v24 + 1;
							v17x = v48x._axis_2d.x + 1;
							v24++;
							v48x._axis_2d.x++;
						}
						v31++;
						v43x._axis_2d.y++;
					} while (v3 > v31);
				}
			}
		}
	}
}

//----- (00037740) --------------------------------------------------------
char sub_37740(type_str_0x6E8E* a1x)//218740
{
	type_str_0x6E8E* v1x; // ebx
	char v3; // [esp+0h] [ebp-4h]

	v3 = 0;
	v1x = x_D41A0_BYTEARRAY_4_struct.dword_38535;
	if (v1x <= x_DWORD_EA3E4[0])
		return 0;
	while (v1x->byte_0x3F_63 != 10 || v1x->byte_0x40_64 != 42 || !sub_10750(a1x, v1x))
	{
		v1x = v1x->next_0;//fix it
		if (v1x <= x_DWORD_EA3E4[0])
			return v3;
	}
	return 1;
}

//----- (000377A0) --------------------------------------------------------
void sub_377A0(type_str_0x6E8E* a1x)//2187a0
{
	type_str_0x6E8E* ix; // ebx

	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix >x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (sub_10750(a1x, ix))
			sub_5FBD0(ix);
	}
}

//----- (000377F0) --------------------------------------------------------
void sub_377F0(type_str_0x6E8E* a1x)//2187f0
{
	int16_t v1; // dx
	//signed int v2; // eax
	unsigned int v3; // esi
	//unsigned int v4; // eax
	unsigned int v5; // edi
	char v6; // cl
	int16_t v7; // ax
	int v8; // eax
	int v9; // eax
	int v10; // ecx
	int v11; // edx
	int v12; // edx
	unsigned int v13; // edx
	uint16_t v14; // ax
	char v15; // cl
	uint8_t v16; // ch
	unsigned int k; // ecx
	unsigned int v18; // edx
	uint8_t v19; // ch
	unsigned int l; // [esp+0h] [ebp-28h]
	unsigned int i; // [esp+4h] [ebp-24h]
	int v23; // [esp+8h] [ebp-20h]
	unsigned int j; // [esp+10h] [ebp-18h]
	uint16_t v25; // [esp+18h] [ebp-10h]

	LOBYTE(v1) = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
	HIBYTE(v1) = (uint16_t)(a1x->array_0x4C_76.y + 128) >> 8;
	/* if ( x_WORD_180660_VGA_type_resolution == 1 )
	   v2 = (signed int)*(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 4) >> 1;
	 else
	   v2 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 4);
	 v3 = v2;
	 if ( x_WORD_180660_VGA_type_resolution == 1 )
	   v4 = (signed int)*(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 5) >> 1;
	 else
	   v4 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 5);
	 v5 = v4;*/
	if (x_WORD_180660_VGA_type_resolution == 1)
		v3 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[a1x->byte_0x46_70].width >> 1;
	else
		v3 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[a1x->byte_0x46_70].width;
	//v3 = v2;
	if (x_WORD_180660_VGA_type_resolution == 1)
		v5 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[a1x->byte_0x46_70].height >> 1;
	else
		v5 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[a1x->byte_0x46_70].height;
	//v5 = v4;
	if (x_WORD_180660_VGA_type_resolution == 1)
	{
		v5 >>= 1;
		v3 >>= 1;
	}
	LOBYTE(v25) = v1 - (v3 >> 1);
	v6 = a1x->struct_byte_0xc_12_15.byte[0];
	HIBYTE(v25) = HIBYTE(v1) - (v5 >> 1);
	if (v6 & 2)
	{
		if (!x_DWORD_EA3E4[a1x->word_0x28_40]->word_0x30_48 && a1x->dword_0x10_16)
		{
			v9 = a1x->word_0x2A_42 - a1x->word_0x2E_46;
			v10 = a1x->dword_0x10_16;
			HIWORD(v11) = (unsigned int)(v9 % v10) >> 16;
			v23 = v9 / v10;
			LOWORD(v11) = a1x->word_0x2E_46;
			v12 = v9 / v10 + v11;
			v8 = a1x->dword_0x10_16;
			a1x->word_0x2E_46 = v12;
			if (v8 == 1)
			{
				v13 = 0;
				v14 = v25;
				while (v5 > v13)
				{
					for (i = 0; v3 > i; i++)
					{
						v15 = x_BYTE_13B4E0_angle[v14];
						if (v15 < 0)
						{
							x_BYTE_13B4E0_angle[v14] = v15 & 0x7F;
							if (!x_BYTE_D41B6)
								x_BYTE_13B4E0_angle[v14] = v15 & 0x7F | 8;
						}
						v16 = v23 + x_BYTE_11B4E0_height[v14];
						x_BYTE_11B4E0_height[v14] = v16;
						if (x_BYTE_D41B6)
						{
							if (v16 < (uint8_t)x_BYTE_14B4E0[v14])
							{
								x_BYTE_13B4E0_angle[v14] &= 0xF7u;
							}
							else
							{
								x_BYTE_14B4E0[v14] = v16 - 1;
								x_BYTE_13B4E0_angle[v14] |= 8u;
							}
						}
						LOBYTE(v14) = v14 + 1;
					}
					v13++;
					v14 = __PAIR__(HIBYTE(v14), (uint8_t)v25) + 256;
				}
				LOWORD(v8) = -10;
				a1x->dword_0x10_16 = -10;
			}
			else if (v8 == -1)
			{
				LOWORD(v8) = v25;
				for (j = 0; v5 > j; j++)
				{
					for (k = 0; k < v3; k++)
					{
						if (!x_BYTE_D41B6 && x_BYTE_13B4E0_angle[(uint16_t)v8] & 8)
						{
							x_BYTE_13B4E0_angle[(uint16_t)v8] |= 0x80u;
							x_BYTE_13B4E0_angle[(uint16_t)v8] &= 0xF7u;
						}
						LOBYTE(v8) = v8 + 1;
					}
					LOWORD(v8) = __PAIR__(BYTE1(v8), (uint8_t)v25) + 256;
				}
				a1x->dword_0x10_16++;
			}
			else if (v8 <= 0)
			{
				a1x->dword_0x10_16 = v8 + 1;
			}
			else
			{
				v18 = 0;
				LOWORD(v8) = v25;
				while (v5 > v18)
				{
					for (l = 0; v3 > l; l++)
					{
						v19 = v23 + x_BYTE_11B4E0_height[(uint16_t)v8];
						x_BYTE_11B4E0_height[(uint16_t)v8] = v19;
						if (x_BYTE_D41B6)
						{
							if (v19 < (uint8_t)x_BYTE_14B4E0[(uint16_t)v8])
							{
								x_BYTE_13B4E0_angle[(uint16_t)v8] &= 0xF7u;
							}
							else
							{
								x_BYTE_14B4E0[(uint16_t)v8] = v19 - 1;
								x_BYTE_13B4E0_angle[(uint16_t)v8] |= 8u;
							}
						}
						LOBYTE(v8) = v8 + 1;
					}
					v18++;
					LOWORD(v8) = __PAIR__(BYTE1(v8), (uint8_t)v25) + 256;
				}
				a1x->dword_0x10_16--;
			}
		}
		else
		{
			x_DWORD_EA3E4[a1x->word_0x28_40]->word_0x2E_46 = 2;
			x_DWORD_EA3E4[a1x->word_0x28_40]->word_0x9A_154x.z = 32 * a1x->word_0x2E_46;
			sub_48A20(v5 >> 1, v1, SHIBYTE(v1), (uint16_t)(v5 >> 1), (v3 >> 1) & 0xFFFF, 3u);
			sub_57F10(a1x);
		}
	}
	else
	{
		a1x->word_0x2E_46 = a1x->array_0x4C_76.z >> 5;
		a1x->dword_0x10_16 = 10;
		a1x->struct_byte_0xc_12_15.byte[0] = v6 | 2;
		v7 = sub_48DF0(v25 - 1, HIBYTE(v25) - 1, v5 + 2, v3 + 2);
		a1x->word_0x2A_42 = v7;
		if ((uint16_t)v7 > 0xDCu)
			a1x->word_0x2A_42 = 220;
		v8 = a1x->word_0x2E_46;
		if (v8 == a1x->word_0x2A_42)
			a1x->dword_0x10_16 = 0;
	}
	//return v8;
}

//----- (00037BC0) --------------------------------------------------------
void sub_37BC0_modify_terrain(type_str_0x6E8E* a1x)//218bc0 // groove castle
{
	//Bit8u* v1; // eax
	//int v2; // edx
	signed int v3; // eax
	unsigned int v4; // eax
	//int v5; // eax
	signed int v6; // eax
	unsigned int v7; // edx
	unsigned int v8; // edx
	uaxis_2d v9x; // ax
	uint8_t *v10; // esi
	int v11; // edi
	uint8_t v12; // ch
	int v13; // edx
	unsigned int v14; // edi
	int v15; // esi
	char v16; // al
	char v17; // dl
	int16_t v18; // dx
	int v19; // eax
	int v20; // eax
	int v21; // edx
	uint8_t v22; // ch
	signed int v23; // eax
	unsigned int v24; // esi
	unsigned int v25; // eax
	uaxis_2d v26x; // ST44_2
	unsigned int v27; // edx
	unsigned int v28; // ecx
	Bit8u* v30; // [esp+4h] [ebp-54h]
	unsigned int v31; // [esp+10h] [ebp-48h]
	unsigned int v32; // [esp+14h] [ebp-44h]
	int v33; // [esp+18h] [ebp-40h]
	unsigned int k; // [esp+1Ch] [ebp-3Ch]
	int v35; // [esp+20h] [ebp-38h]
	unsigned int v36; // [esp+24h] [ebp-34h]
	unsigned int v37; // [esp+28h] [ebp-30h]
	unsigned int v38; // [esp+2Ch] [ebp-2Ch]
	unsigned int v39; // [esp+30h] [ebp-28h]
	int v40; // [esp+34h] [ebp-24h]
	uaxis_2d v41x; // [esp+38h] [ebp-20h]
	uaxis_2d v42x; // [esp+3Ch] [ebp-1Ch]
	uaxis_2d jx; // [esp+3Ch] [ebp-1Ch]
	uaxis_2d v44x; // [esp+3Ch] [ebp-1Ch]
	uaxis_2d v45x; // [esp+40h] [ebp-18h]
	uint8_t i; // [esp+44h] [ebp-14h]
	char v47; // [esp+48h] [ebp-10h]
	uint8_t v48; // [esp+50h] [ebp-8h]
	char v49; // [esp+54h] [ebp-4h]
	char v50; // [esp+54h] [ebp-4h]

	v30 = x_DWORD_E9C38_smalltit;
	//BYTE1(v1) = *(x_BYTE *)(a1 + 12);
	if (!(a1x->struct_byte_0xc_12_15.byte[0] & 0x2))
	{
		a1x->dword_0x10_16 = 0x13;
		a1x->struct_byte_0xc_12_15.byte[0] |= 2;
	}
	//v2 = *(x_DWORD *)(a1 + 16);
	if (a1x->dword_0x10_16 <= 0)
	{
		a1x->dword_0x10_16++;
		if (a1x->dword_0x10_16 == 0)
		{
			v50 = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
			/*if ( x_WORD_180660_VGA_type_resolution == 1 )
			  v23 = (signed int)*(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 4) >> 1;
			else
			  v23 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 4);
			v24 = v23;
			if ( x_WORD_180660_VGA_type_resolution == 1 )
			  v25 = (signed int)*(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 5) >> 1;
			else
			  v25 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 5);*/
			if (a1x->byte_0x46_70 < 0)//fix
			{//fix
				v23 = 0;//fix
				v25 = 0;//fix
			}//fix
			else//fix
			{
			if (x_WORD_180660_VGA_type_resolution == 1)
				v23 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a1x->byte_0x46_70].width >> 1;
			else
				v23 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a1x->byte_0x46_70].width;

			if (x_WORD_180660_VGA_type_resolution == 1)
				v25 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a1x->byte_0x46_70].height >> 1;
			else
				v25 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a1x->byte_0x46_70].height;
			}
	
			v24 = v23;
			
			if (!x_BYTE_D41B6)
			{
				v27 = 0;
				v26x._axis_2d.y = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - (v25 >> 1);
				v26x._axis_2d.x = v50 - (v24 >> 1);
				v44x.word = v26x.word;
				while (v27 < v25)
				{
					v28 = 0;
					while (v28 < v24)
					{
						if (x_BYTE_13B4E0_angle[v44x.word] & 8)
						{
							x_BYTE_13B4E0_angle[v44x.word] |= 0x80u;
							x_BYTE_13B4E0_angle[v44x.word] &= 0xF7u;
						}
						v28++;
						v44x._axis_2d.x++;
					}
					v44x._axis_2d.x = v50 - (v24 >> 1);
					v27++;
					v44x._axis_2d.y++;
				}
			}
			x_DWORD_EA3E4[a1x->word_0x28_40]->word_0x2E_46 = 2;
			sub_57F10(a1x);
		}
	}
	else
	{
		a1x->dword_0x10_16--;// = v2 - 1;
		if (a1x->dword_0x10_16 == 0)
		{
			if (a1x->byte_0x3B_59)
				a1x->dword_0x10_16 = -25;
			else
				a1x->dword_0x10_16 = -1;
		}
		else
		{
			//v1 = x_DWORD_EA3E4[*(uint16_t *)(a1 + 40)];
			if (!x_DWORD_EA3E4[a1x->word_0x28_40]->word_0x30_48)
			{
				v49 = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
				v47 = (uint16_t)(a1x->array_0x4C_76.y + 128) >> 8;
				v40 = a1x->array_0x4C_76.z >> 5;
				/*if ( x_WORD_180660_VGA_type_resolution == 1 )
				  v3 = (signed int)*(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 4) >> 1;
				else
				  v3 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 4);
				v36 = v3;
				if ( x_WORD_180660_VGA_type_resolution == 1 )
				  v4 = (signed int)*(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 5) >> 1;
				else
				  v4 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * *(char *)(a1 + 70) + 5);*/
				if (a1x->byte_0x46_70 < 0)//fix
				{//fix
					v3 = 0;//fix
					v4 = 0;//fix
				}//fix
				else//fix
				{
					if (x_WORD_180660_VGA_type_resolution == 1)
						v3 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a1x->byte_0x46_70].width >> 1;
					else
						v3 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a1x->byte_0x46_70].width;

					if (x_WORD_180660_VGA_type_resolution == 1)
						v4 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a1x->byte_0x46_70].height >> 1;
					else
						v4 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a1x->byte_0x46_70].height;
				}
			
				v36 = v3;

				v37 = v4;
				v48 = v4 >> 1;
				v41x._axis_2d.x = v49 - (v36 >> 1);
				v41x._axis_2d.y = v47 - v48;
				memset((void*)v30, 0, 2 * v4 * v36);
				for (i = 1; i <= a1x->byte_0x46_70; i++)
				{
					//v5 = 6 * i;
					/*if ( x_WORD_180660_VGA_type_resolution == 1 )
					  v6 = (signed int)*(uint8_t *)(**filearray_2aa18c[24] + v5 + 4) >> 1;
					else
					  v6 = *(uint8_t *)(**filearray_2aa18c[24] + v5 + 4);
					v31 = v6;
					if ( x_WORD_180660_VGA_type_resolution == 1 )
					  v7 = (signed int)*(uint8_t *)(**filearray_2aa18c[24] + 6 * i + 5) >> 1;
					else
					  v7 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * i + 5);*/
					if (x_WORD_180660_VGA_type_resolution == 1)
						v6 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[i].width >> 1;
					else
						v6 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[i].width;
					v31 = v6;
					if (x_WORD_180660_VGA_type_resolution == 1)
						v7 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[i].height >> 1;
					else
						v7 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[i].height;
					v39 = v7;
					v8 = v7 >> 1;
					v9x._axis_2d.x = v49 - v8;
					v9x._axis_2d.y = v47 - (v31 >> 1);
					v10 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[i].data;
					v45x.word = v9x.word;
					v33 = (uint8_t)(v36 >> 1) - v8;
					v38 = 0;
					v11 = v36 * (v48 - (v31 >> 1));
					while (v38 < v31)
					{
						v35 = v11 + v33;
						v32 = 0;
						v42x.word = v45x.word;
						while (v32 < v39)
						{
							if (a1x->struct_byte_0xc_12_15.byte[2] & 1)
								sub_57390(v42x, a1x->word_0x1A_26);
							v12 = v10[1];
							if (v12 != 0xff)
								*(x_WORD *)(v30 + 2 * v35) = v12 + (x_WORD)v40 - x_BYTE_11B4E0_height[v42x.word];
							v13 = a1x->dword_0x10_16 % 7;
							if ((!(a1x->dword_0x10_16 % 7) || a1x->dword_0x10_16 == 1) && v10[0] != 0xff)
								sub_45DC0(v13, 7, v42x, v10[0]);
							v10 += 2;
							v32++;
							v42x._axis_2d.x++;
							v35++;
						}
						v11 += v36;
						v38++;
						v45x._axis_2d.y++;
					}
				}
				//LOWORD(v1) = v41;
				v14 = 0;
				v15 = 0;
				for (jx.word = v41x.word; v14 < v37; ++jx._axis_2d.y)
				{
					for (k = 0; k < v36; k++)
					{
						if (*(x_WORD *)(v30 + 2 * v15))
						{
							if (!x_BYTE_11B4E0_height[jx.word] || sub_57450(x_BYTE_10B4E0_terraintype[jx.word]))
							{
								//adress 218f4e
								//j==ffff
								//j==0000
								x_BYTE_13B4E0_angle[jx.word] = x_BYTE_13B4E0_angle[jx.word] & 0xF8 | 1;
								sub_46570(jx, jx);
							}
							x_BYTE_11B4E0_height[jx.word] += (signed int)*(Bit16s*)(v30 + 2 * v15) / a1x->dword_0x10_16;
							if (a1x->dword_0x10_16 == 1)
							{
								v16 = x_BYTE_13B4E0_angle[jx.word];
								if (v16 < 0)
								{
									v17 = x_BYTE_D41B6;
									x_BYTE_13B4E0_angle[jx.word] = v16 & 0x7F;
									if (!v17)
										x_BYTE_13B4E0_angle[jx.word] = v16 & 0x7F | 8;
								}
							}
						}
						if (x_BYTE_D41B6)
						{
							v18 = x_BYTE_11B4E0_height[jx.word];
							if (v18 >= (int16_t)v40)
								v19 = (uint8_t)v18;
							else
								v19 = (int16_t)v40;
							v20 = v19 + 100;
							if (v20 > 255)
								v20 = 255;
							v21 = (uint8_t)x_BYTE_14B4E0[jx.word];
							if (v20 > v21)
								x_BYTE_14B4E0[jx.word] += (v20 - v21) / a1x->dword_0x10_16;
							v22 = x_BYTE_11B4E0_height[jx.word];
							if ((uint8_t)x_BYTE_14B4E0[jx.word] > v22)
							{
								x_BYTE_13B4E0_angle[jx.word] &= 0xF7u;
							}
							else
							{
								x_BYTE_14B4E0[jx.word] = v22 - 1;
								x_BYTE_13B4E0_angle[jx.word] |= 8u;
							}
						}
						if (!x_BYTE_D41B6 && a1x->dword_0x10_16 == 2)
							x_BYTE_13B4E0_angle[jx.word] &= 0xF7u;
						jx._axis_2d.x++;
						v15++;
					}
					jx._axis_2d.x = v49 - (v36 >> 1);
					//LOWORD(v1) = __PAIR__(HIBYTE(j), (uint8_t)v41) + 256;
					v14++;
				}
			}
		}
	}
	//return v1;
}

//----- (00038270) --------------------------------------------------------
type_str_0x6E8E* sub_38270(type_str_0x6E8E* a1x)//219270
{
	type_str_0x6E8E* v1x; // ebx
	type_str_0x6E8E* resultx; // eax
	type_str_0x6E8E* v3x; // eax

	a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
	v1x = 0;
	switch (a1x->word_0x14_20 % 0xCu)
	{
	case 0u:
	case 1u:
		resultx = sub_4A190(&x_WORD_EB398ar, 5, 4);
		v1x = resultx;
		if (!resultx)
			goto LABEL_10;
		resultx->byte_0x45_69 = 33;
		break;
	case 2u:
	case 3u:
		resultx = sub_4A190(&x_WORD_EB398ar, 5, 14);
		v1x = resultx;
		if (!resultx)
			goto LABEL_10;
		resultx->byte_0x45_69 = 113;
		break;
	case 4u:
	case 5u:
	case 6u:
	case 7u:
	case 8u:
		resultx = sub_4A190(&x_WORD_EB398ar, 5, 13);
		v1x = resultx;
		if (!resultx)
			goto LABEL_10;
		resultx->byte_0x45_69 = 105;
		break;
	case 9u:
	case 0xAu:
	case 0xBu:
		v3x = sub_4A190(&x_WORD_EB398ar, 5, 12);
		v1x = v3x;
		if (v3x)
			v3x->byte_0x45_69 = 97;
		goto LABEL_10;
	default:
	LABEL_10:
		resultx = v1x;
		break;
	}
	return resultx;
}

//----- (00038330) --------------------------------------------------------
int sub_38330(type_str_0x6E8E* a1x)//219330
{
	unsigned int v1; // eax
	signed int v2; // edx
	int v3; // eax
	type_str_0x6E8E* v4x; // eax
	int16_t v5; // dx
	type_str_0x6E8E* v6x; // edx
	int16_t v7; // cx
	int16_t v8; // ax
	int16_t v9; // cx
	unsigned int v10; // ecx
	int result; // eax

	v1 = sub_38B00(a1x);
	if (v1 < 1)
	{
		if (v1)
			goto LABEL_31;
	}
	else
	{
		if (v1 > 1)
		{
			if (v1 == 2)
				a1x->byte_0x45_69 = 53;
			goto LABEL_31;
		}
		v2 = a1x->dword_0x10_16;
		if (v2 > 2)
		{
			v3 = a1x->byte_0x46_70;
			a1x->dword_0x10_16 = v2 - 1;
			if (x_WORD_D93C0_bldgprmbuffer[2+4 * v3] & 1)
			{
				x_WORD_EB398ar = a1x->array_0x4C_76;
				x_WORD_EB398ar.x += a1x->array_0x52_82.xshift;
				v4x = sub_4A190(&x_WORD_EB398ar, 5, 4);
				if (v4x)
				{
					v4x->byte_0x45_69 = 33;
					v5 = a1x->word_0x26_38;
					v4x->str_0x5E_94.dword_0x5E_94 = 1;
					v4x->str_0x5E_94.word_0x62_98 = v5;
				}
			}
			v6x = x_DWORD_EA3E4[a1x->word_0x26_38];
			if (v6x > x_DWORD_EA3E4[0] && (!v6x->byte_0x40_64 || v6x->byte_0x40_64 == 1))
				x_DWORD_EA3E4[a1x->word_0x26_38]->dword_0xA4_164x->word_0x248_584 = 200;
		}
	}
	v7 = a1x->str_0x5E_94.word_0x68_104;
	if (v7)
	{
		if (v7 != a1x->word_0x94_148)
		{
			if (a1x->str_0x5E_94.dword_0x64_100)
			{
				a1x->word_0x94_148 = v7;
				sub_6E450_distance_sound(v7, -1, 4);
				//*(x_DWORD *)(a1 + 12) &= 0xFFDFFFFE;
				a1x->struct_byte_0xc_12_15.dword &= 0xFFDFFFFE;
				//a1x->byte_0xe_14 &= 0xdf;
				//a1x->byte_0xc_12 &= 0xfe;
				a1x->struct_byte_0xc_12_15.byte[2] |= 0x20u;
				sub_49CD0(a1x, 177);
				a1x->word_0x5A_90 += x_DWORD_EA3E4[a1x->str_0x5E_94.word_0x68_104]->dword_0xA4_164x->word_0x38_56;
			}
			else if (!(a1x->struct_byte_0xc_12_15.byte[2] & 0x20))
			{
				v8 = a1x->str_0x5E_94.word_0x68_104;
				a1x->word_0x94_148 = v8;
				sub_6E450_distance_sound(v8, -1, 4);
				a1x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
				sub_49CD0(a1x, 177);
				a1x->word_0x5A_90 += x_DWORD_EA3E4[a1x->str_0x5E_94.word_0x68_104]->dword_0xA4_164x->word_0x38_56;
			}
		}
		a1x->str_0x5E_94.word_0x68_104 = 0;
		a1x->str_0x5E_94.dword_0x64_100 = 0;
	}
	if (!(a1x->byte_0x3E_62 & 0x1F))
	{
		if (x_WORD_D93C0_bldgprmbuffer[2+4 * a1x->byte_0x46_70] & 1)
		{
			v9 = a1x->word_0x84_132;
			if (v9 > 5 && v9 == a1x->dword_0x10_16)
			{
				v10 = a1x->word_0x84_132;
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				if ((signed int)(a1x->word_0x14_20 % v10) > a1x->word_0x84_132
					- (a1x->word_0x84_132 >> 4)
					- 2)
				{
					x_WORD_EB398ar = a1x->array_0x4C_76;
					x_WORD_EB398ar.x += a1x->array_0x52_82.xshift;
					sub_38270(a1x);
				}
			}
		}
	}
	if (x_WORD_D93C0_bldgprmbuffer[2+4 * a1x->byte_0x46_70] & 1)
		sub_5C8D0(a1x);
LABEL_31:
	result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	a1x->array_0x4C_76.z = result;
	return result;
}

//----- (000385C0) --------------------------------------------------------
void sub_385C0_remove_castle_stage(type_str_0x6E8E* a1x)//2195c0 //remove castle stage
{
	//uint8_t v1; // dl
	Bit16s v2; // eax
	Bit8u* v3; // edi
	int v4; // esi
	signed int v5; // edx
	type_str_0x6E8E* v6x; // eax
	//int16_t v7; // dx
	uaxis_2d v8x; // esi
	char v9; // dh
	uint8_t v10; // cl
	char v11; // ch
	type_str_0x6E8E* v13x; // esi
	int16_t v14; // cx
	//char v15; // ah
	unsigned int v16; // edi
	Bit8u* v17; // eax
	unsigned int v18; // esi
	unsigned int v19; // [esp+0h] [ebp-28h]
	int v20; // [esp+4h] [ebp-24h]
	unsigned int v21; // [esp+8h] [ebp-20h]
	Bit8u* v22; // [esp+Ch] [ebp-1Ch]
	unsigned int v23; // [esp+10h] [ebp-18h]
	unsigned int v24; // [esp+14h] [ebp-14h]
	int16_t v25; // [esp+18h] [ebp-10h]
	uaxis_2d v26x; // [esp+1Ch] [ebp-Ch]
	uaxis_2d v27x; // [esp+1Ch] [ebp-Ch]
	uaxis_2d v28x; // [esp+20h] [ebp-8h]
	uaxis_2d v29x; // [esp+20h] [ebp-8h]
	uaxis_2d v30x; // [esp+24h] [ebp-4h]

	//v1 = *(x_BYTE *)(a1 + 70);
	/*v22 = *(x_BYTE **)(**filearray_2aa18c[24] + 6 * v1);
	v21 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * v1 + 5);
	v24 = *(uint8_t *)(**filearray_2aa18c[24] + 6 * v1 + 4);
	if ( x_WORD_180660_VGA_type_resolution == 1 )
	{
	  v21 >>= 1;
	  v24 = (unsigned int)*(uint8_t *)(**filearray_2aa18c[24] + 6 * v1 + 4) >> 1;
	}*/
	v22 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a1x->byte_0x46_70].data;
	v21 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a1x->byte_0x46_70].height;
	v24 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a1x->byte_0x46_70].width;
	if (x_WORD_180660_VGA_type_resolution == 1)
	{
		v21 >>= 1;
		v24 >>= 1;
	}
	v30x._axis_2d.x = ((uint16_t)(a1x->array_0x4C_76.x + 128) >> 8) - (v24 >> 1);
	v30x._axis_2d.y = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - (v21 >> 1);
	if (!a1x->byte_0x3D_61)
	{
		if (a1x->byte_0x40_64)
			v2 = sub_48DF0(v30x._axis_2d.x, v30x._axis_2d.y, v21, v24);
		else
			v2 = a1x->array_0x4C_76.z >> 5;
		v25 = v2;
		v19 = 0;
		v28x.word = v30x.word;
		v3 = v22;
		v20 = 0;
		while (v19 < v21)
		{
			v23 = 0;
			v26x.word = v28x.word;
			while (v23 < v24)
			{
				if (v3[1] != 0xff || v3[0] != 0xff)
				{
					x_WORD_EB398ar.x = v26x._axis_2d.x << 8;
					x_WORD_EB398ar.y = v26x._axis_2d.y << 8;
					v20++;
					x_WORD_EB398ar.z = 32 * v25;
					if (!(v20 & 7))
						x_WORD_EB398ar.z = 32 * (v25 - 10);
					v4 = a1x->dword_0x10_16;
					if (v4 > 0)
					{
						a1x->dword_0x10_16 = v4 - 1;
						if (x_WORD_D93C0_bldgprmbuffer[2+4 * a1x->byte_0x46_70] & 1)
						{
							v5 = a1x->dword_0x10_16;
							if (v5)
							{
								if (v5 >= 4)
								{
									v6x = sub_38270(a1x);
								}
								else
								{
									v6x = sub_4A190(&x_WORD_EB398ar, 5, 4);
									if (v6x)
										v6x->byte_0x45_69 = 33;
								}
							}
							else
							{
								v6x = sub_4A190(&x_WORD_EB398ar, 5, 12);
								if (v6x)
									v6x->byte_0x45_69 = 97;
							}
							if (v6x)
							{
								//v7 = *(x_WORD *)(a1 + 38);
								v6x->str_0x5E_94.dword_0x5E_94 = 1;
								v6x->str_0x5E_94.word_0x62_98 = a1x->word_0x26_38;
							}
						}
					}
					v8x.word = v26x.word;
					v9 = x_BYTE_13B4E0_angle[v26x.word] & 0x7F;
					x_BYTE_13B4E0_angle[v8x.word] = x_BYTE_13B4E0_angle[v8x.word] & 0x70 | 1;
					sub_46570(v8x, v8x);
					v10 = v3[1];
					if (v10 != 0xff)
					{
						if (v10 >= x_BYTE_11B4E0_height[v26x.word])
						{
							x_BYTE_11B4E0_height[v26x.word] = 0;
						}
						else
						{
							a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
							if ((signed int)(a1x->word_0x14_20 % 0x32u) <= 20)
							{
								x_BYTE_11B4E0_height[v26x.word] -= v3[1];
							}
							else
							{
								a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
								x_BYTE_11B4E0_height[v26x.word] -= v3[1] - a1x->word_0x14_20 % 0x14u;
							}
						}
					}
				}
				v3 += 2;
				v23++;
				//LOBYTE(v26) = v26 + 1;
				v26x._axis_2d.x++;
			}
			v19++;
			//HIBYTE(v28)++;
			v28x._axis_2d.y++;
		}
		sub_48B50(v30x._axis_2d.x, v30x._axis_2d.y, (uint16_t)v21, (uint16_t)v24);
		v11 = a1x->byte_0x41_65;
		if (v11)
			sub_4A1E0(v11, 1);
		if (a1x->byte_0x46_70 == 68)
		{
			D41A0_BYTESTR_0.word_0x3654A = 0;
			sub_57F10(a1x);
			return;
		}
		sub_57F10(a1x);
		return;
	}
	v13x = sub_4A190(&a1x->array_0x4C_76, 10, 45);
	if (!v13x)
	{
		a1x->byte_0x3D_61 = 0;
		sub_57F10(a1x);
		return;
	}
	sub_49A30(v13x, a1x->byte_0x3D_61);
	v13x->array_0x4C_76.z = a1x->word_0x9A_154x.z;
	v13x->byte_0x41_65 = a1x->byte_0x41_65;
	v14 = a1x->word_0x94_148;
	if (v14)
	{
		//v15 = v13[12];
		v13x->word_0x94_148 = v14;
		v13x->struct_byte_0xc_12_15.byte[0] |= 1;
		if (v13x->struct_byte_0xc_12_15.byte[2] & 0x20)
			v13x->struct_byte_0xc_12_15.byte[2] |= 0x20u;
		else
			v13x->struct_byte_0xc_12_15.byte[2] &= 0xDFu;
		sub_49CD0(v13x, 177);
		v13x->word_0x5A_90 = a1x->word_0x5A_90;
	}
	sub_59760(a1x, v13x);
	v16 = 0;
	v29x.word = v30x.word;
	v17 = v22;
	while (v16 < v21)
	{
		v18 = 0;
		v27x.word = v29x.word;
		while (v18 < v24)
		{
			if (v17[1] != 0xff || v17[0] != 0xff)
				x_BYTE_13B4E0_angle[v27x.word] &= 0x7Fu;
			v18++;
			v17 += 2;
			//LOBYTE(v27) = v27 + 1;
			v27x._axis_2d.x;
		}
		v16++;
		//HIBYTE(v29)++;
		v29x._axis_2d.y;
	}
	sub_57F10(a1x);
}

//----- (000389F0) --------------------------------------------------------
int sub_389F0(type_str_0x6E8E* a1x)//2199f0
{
	int v1; // eax
	//int16_t v2; // dx

	v1 = a1x->dword_0x8;
	a1x->dword_0x10_16++;
	a1x->dword_0x8 = v1 - 1;
	if (v1 >= 0)
	{
		sub_585A0(a1x);
		if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
		{
			a1x->struct_byte_0xc_12_15.byte[0] |= 2u;
			if ((int16_t)sub_10C40_getTerrainAlt(&a1x->array_0x4C_76) > 58880)
				sub_5F890(a1x, 0);
			if (sub_106C0(
				a1x,
				x_DWORD_EA3E4[x_DWORD_EA3E4[a1x->word_0x1A_26]->dword_0xA4_164x->word_0x3A_58]))
			{
				//v2 =a1x->word_0x1A_26;
				x_DWORD_EA3E4[x_DWORD_EA3E4[a1x->word_0x1A_26]->dword_0xA4_164x->word_0x3A_58]->str_0x5E_94.word_0x80_128 = a1x->word_0x1A_26;
				x_DWORD_EA3E4[x_DWORD_EA3E4[a1x->word_0x1A_26]->dword_0xA4_164x->word_0x3A_58]->str_0x5E_94.word_0x7C_124 = 10;
			}
			else
			{
				sub_5F890(a1x, 0);
			}
		}
	}
	sub_57F10(a1x);
	return 1;
}

//----- (00038B00) --------------------------------------------------------
signed int sub_38B00(type_str_0x6E8E* a1x)//219b00
{
	//signed int v1; // ebx
	//int v3; // ecx
	//int16_t v4; // bx

	a1x->word_0x26_38 = 0;
	//v1 = 0;
	if (a1x->dword_0x8 < 0)
		return 2;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		//v3 = a1x->dword_0x8 - a1x->str_0x5E_94.dword_0x5E_94;
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		if (a1x->dword_0x8 < 0)
		{
			//v4 = a1x->str_0x5E_94.word_0x62_98;
			a1x->word_0x24_36 = a1x->str_0x5E_94.word_0x62_98;
			a1x->word_0x26_38 = a1x->str_0x5E_94.word_0x62_98;
			return 2;
		}
		a1x->word_0x26_38 = a1x->str_0x5E_94.word_0x62_98;
		a1x->str_0x5E_94.dword_0x5E_94 = 0;
		//v1 = 1;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		return 1;
	}
	return 0;
}

//----- (00038B90) --------------------------------------------------------
int sub_38B90(type_str_0x6E8E* a1x)//219b90
{
	int v1; // eax
	int result; // eax
	//Bit8u* v3; // eax
	int v4; // edi
	type_str_0x6E8E* v5x; // eax
	type_str_0x6E8E* v6x; // esi
	int v7; // edx
	axis_3d v8x; // [esp+0h] [ebp-10h]
	//int16_t v9; // [esp+2h] [ebp-Eh]
	//int16_t v10; // [esp+4h] [ebp-Ch]
	int v11; // [esp+8h] [ebp-8h]
	int v12; // [esp+Ch] [ebp-4h]

	v1 = a1x->dword_0x8;
	a1x->dword_0x8 = v1 - 1;
	if (v1 < 0)
	{
		return 1;
	}
	if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
	{
		//a1x->byte_0xc_12 |= 0x10002;
		a1x->struct_byte_0xc_12_15.dword |= 0x10002;
		//a1x->byte_0xc_12 |= 0x02;
		//a1x->byte_0xe_14 |= 0x1;
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 30);
	}
	sub_49EA0(
		a1x,
		(768 * a1x->dword_0x10_16
			- (__CFSHL__(768 * a1x->dword_0x10_16 >> 31, 2)
				+ 4 * (768 * a1x->dword_0x10_16 >> 31))) >> 2,
		512);
	sub_10C80(a1x, 0, (signed int)a1x->word_0x2A_42 / a1x->dword_0x4);
	v4 = sub_10080(a1x->dword_0x10_16, a1x->dword_0x10_16);
	if (v4)
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		while (sub_10130(v4, &v12, &v11) == 1)
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v8x.x = a1x->array_0x4C_76.x - 96 + 160 * v12 + a1x->word_0x14_20 % 0x81u - 64;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v8x.y = a1x->word_0x14_20 % 0x81u + a1x->array_0x4C_76.y - 96 + 160 * v11 - 64;
			v8x.z = a1x->array_0x4C_76.z;
			v5x = sub_4A190(&v8x, 10, 0);
			v6x = v5x;
			if (v5x)
			{
				v5x->word_0x1A_26 = a1x->word_0x1A_26;
				v5x->word_0x1C_28 = a1x->word_0x1C_28;
				//v5x->byte_0xc_12 |= 0x80;//(unsigned int)sub_10080;
				//v5x->byte_0xd_13 |= 0x00;
				//v5x->byte_0xe_14 |= 0x01;
				v5x->struct_byte_0xc_12_15.dword |= 0x10080;
				sub_49EA0(v5x, 512, 512);
				v6x->dword_0x10_16 = 0;
			}
		}
		sub_10100(v4);
	}
	v7 = a1x->dword_0x10_16 + 2;
	result = v7 / 7;
	a1x->dword_0x10_16 = v7 % 7;
	return result;
}

//----- (00038D80) --------------------------------------------------------
unsigned int sub_38D80(type_str_0x6E8E* a1x)//219d80
{
	unsigned int result; // eax
	type_str_0x6E8E* ix; // ebx
	unsigned int v3; // ecx

	result = a1x->dword_0x8;
	a1x->dword_0x8 = result - 1;
	if ((result & 0x80000000) != 0)
	{
		sub_57F10(a1x);
		return 0;
	}
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38523; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (!ix->str_0x5E_94.word_0x7A_122)
		{
			result = sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &ix->array_0x4C_76);
			if (result < a1x->dword_0x10_16)
			{
				v3 = sub_7277A_radix_3d(result);
				if (v3 > 0x2A)
					v3 = 42;
				result = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
				ix->str_0x5E_94.word_0x76_118 = LOWORD(v3);
				ix->str_0x5E_94.word_0x78_120 = HIWORD(v3);
				ix->str_0x5E_94.word_0x7A_122= result;
			}
		}
	}
	return result;
}

//----- (00038E20) --------------------------------------------------------
int sub_38E20(type_str_0x6E8E* a1x)//219e20
{
	sub_57F10(a1x);
	return 1;
}

//----- (00038E40) --------------------------------------------------------
int sub_38E40(type_str_0x6E8E* a1x)//219e40
{
	sub_57F10(a1x);
	return 1;
}

//----- (00038E70) --------------------------------------------------------
int sub_38E70(type_str_0x6E8E* a1x)//219e70
{
	type_str_0x6E8E* v1x; // ebx
	//int v2; // eax
	uint8_t v3; // dh

	if (a1x->word_0x96_150)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v1x->byte_0x3F_63 == 3 && !v1x->byte_0x40_64)
		{
			//v2 = v1x->dword_0xA4_164;
			v3 = v1x->dword_0xA4_164x->byte_0x14C_332;
			if (v3 < 3u)
			{
				if (!v3)
				{
					v1x->dword_0xA4_164x->word_0x1E_30 = -80;
					a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
					sub_6E450_distance_sound(a1x->word_0x96_150, -1, (a1x->word_0x14_20 & 3) + 54);
				}
				sub_5C830(v1x, 3, 171 * ++v1x->dword_0xA4_164x->byte_0x14C_332 / 3 + 85);
			}
			v1x->dword_0xA4_164x->byte_0x14D_333 = 8;
		}
	}
	sub_57F10(a1x);
	return 1;
}

//----- (00038F70) --------------------------------------------------------
int sub_38F70(type_str_0x6E8E* a1x)//219f70
{
	type_str_0x6E8E* v1x; // esi
	//int v2; // eax

	if (a1x->word_0x96_150)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v1x->byte_0x3F_63 == 3 && !v1x->byte_0x40_64)
		{
			//v2 = v1x->dword_0xA4_164;
			if (!v1x->dword_0xA4_164x->byte_0x14E_334)
			{
				v1x->dword_0xA4_164x->word_0x1E_30 = -80;
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				sub_6E450_distance_sound(a1x->word_0x96_150, -1, (a1x->word_0x14_20 & 3) + 54);
				sub_11900(a1x, v1x, 0, a1x->word_0x2A_42);
			}
			v1x->dword_0xA4_164x->byte_0x14E_334 = 1;
			v1x->dword_0xA4_164x->byte_0x14F_335 = 10;
		}
	}
	sub_57F10(a1x);
	return 1;
}

//----- (00039040) --------------------------------------------------------
void sub_39040(type_str_0x6E8E* a1x)//21a040
{
	int v1; // eax
	int v2; // ebx
	int v3; // edx
	uint8_t v4; // bl
	uint16_t v5; // ax
	int v6; // edx
	int v7; // ecx
	uaxis_2d v8x; // bx
	signed int v9; // eax
	int16_t v10; // ax
	int v11; // ecx
	int v12; // ecx
	char v13; // dl
	int v14; // esi
	int v15; // edx
	int v16; // esi
	char v17; // al
	uaxis_2d v18x; // cx
	int v19; // eax
	int v20; // ecx
	int v21; // eax
	char v22; // dh
	uaxis_2d v23x; // dx
	uaxis_2d v24x; // ax
	signed int v25; // esi
	uaxis_2d v26x; // bx
	int v27; // ecx
	int v28; // edi
	int v29; // eax
	uaxis_2d v30x; // bx
	signed int v31; // esi
	signed int v32; // edi
	uaxis_2d v33x; // ax
	uaxis_2d v34x; // dx
	uaxis_2d v35x; // bx
	signed int v36; // eax
	signed int v37; // edx
	uaxis_2d v38x; // si
	axis_3d v40x; // [esp+0h] [ebp-3Ch]
	//int16_t v41; // [esp+2h] [ebp-3Ah]
	axis_3d v42x; // [esp+8h] [ebp-34h]
	//int16_t v43; // [esp+Ch] [ebp-30h]
	int i; // [esp+10h] [ebp-2Ch]
	int v45; // [esp+14h] [ebp-28h]
	int v46; // [esp+18h] [ebp-24h]
	uaxis_2d v47x; // [esp+1Ch] [ebp-20h]
	int v48; // [esp+20h] [ebp-1Ch]
	uaxis_2d v49x; // [esp+24h] [ebp-18h]
	int v50; // [esp+28h] [ebp-14h]
	int v51; // [esp+2Ch] [ebp-10h]
	uaxis_2d v52x; // [esp+30h] [ebp-Ch]
	uaxis_2d v53x; // [esp+34h] [ebp-8h]
	char v54; // [esp+38h] [ebp-4h]

	v54 = 0;
	//LOBYTE(v1) = a1;
	v2 = a1x->dword_0x8 - 1;
	x_DWORD_E9B90 = 0;
	a1x->dword_0x8 = v2;
	if (v2 <= 0)
	{
		a1x->byte_0x45_69 = 74;
		a1x->byte_0x46_70 = 0;
	}
	else
	{
		v3 = (a1x->array_0x4C_76.x + 128) >> 8;
		v1 = (a1x->array_0x4C_76.y + 128) >> 8;
		v53x._axis_2d.x = v3 - 15;
		v53x._axis_2d.y = v1 - 15;
		v52x._axis_2d.x = v3;
		v4 = a1x->byte_0x46_70;
		v52x._axis_2d.y = v1;
		if (v4 <= 3u)
		{
			switch (v4)
			{
			case 0u:
				LOBYTE(v1) = sub_39E40(a1x);
				if ((x_BYTE)v1)
					a1x->byte_0x46_70 = 1;
				else
					sub_57F10(a1x);
				break;
			case 1u:
				v5 = sub_48DF0(v3 - 9, v1 - 9, 18, 18);
				a1x->array_0x4C_76.z = 0;
				a1x->word_0x2C_44 = 0;
				if ((signed int)v5 > 64)
				{
					a1x->array_0x4C_76.z = v5 - 64;
					if ((int16_t)(v5 - 64) > 16)
						a1x->word_0x2C_44 = 32 * (v5 - 80);
				}
				a1x->dword_0x90_144 = 0;
				a1x->byte_0x46_70 = 2;
				a1x->dword_0x10_16 = 12;
				sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 64);
				goto LABEL_11;
			case 2u:
			LABEL_11:
				v6 = a1x->dword_0x10_16 - 1;
				a1x->dword_0x10_16 = v6;
				if (v6 <= 0)
				{
					a1x->byte_0x46_70 = 3;
				}
				else
				{
					v7 = 0;
					for (v8x._axis_2d.y = v53x._axis_2d.y; ; ++v8x._axis_2d.y)
					{
						v51 = v7;
						if (v7 >= 30)
							break;
						v8x._axis_2d.x = v53x._axis_2d.x;
						for (i = 0; i < 30; i++)
						{
							v40x.x = v8x._axis_2d.x << 8;
							v40x.y = v8x._axis_2d.y << 8;
							v9 = sub_58490_radix_3d_2(&a1x->array_0x4C_76, &v40x);
							v48 = v9;
							if (v9 < 3840)
							{
								if (v9 >= 2304)
								{
									v10 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v40x);
									v42x = a1x->array_0x4C_76;
									sub_57FA0(&v42x, v10, 0, 3840);
									v11 = (int16_t)sub_10C40_getTerrainAlt(&v42x) >> 5;
									if (a1x->word_0x2C_44 < v11)
										a1x->word_0x2C_44 = v11;
									v50 = v11
										- (((x_DWORD)(0x10000 + (signed int)x_DWORD_DB750[0x200+((v48 - 2304) << 10) / 1536]) >> 1)
											* (v11 - (a1x->array_0x4C_76.z + 64)) >> 16);
								}
								else
								{
									v50 = a1x->array_0x4C_76.z
										+ 64
										- ((0x10000 - x_DWORD_DB750[0x200+((2304 - v9) << 9) / 2304]) << 6 >> 16);
								}
								v12 = (v50 - x_BYTE_11B4E0_height[v8x.word]) / a1x->dword_0x10_16
									+ x_BYTE_11B4E0_height[v8x.word];
								if (v12 < 1)
									v12 = 1;
								if (v12 > 255)
									v12 = 255;
								v13 = x_BYTE_D41B6;
								x_BYTE_11B4E0_height[v8x.word] = v12;
								if (v13)
								{
									v50 = v12 + 64;
									if (v12 + 64 > 254)
										v50 = 254;
									v14 = (uint8_t)x_BYTE_14B4E0[v8x.word];
									v15 = (uint8_t)x_BYTE_14B4E0[v8x.word];
									v47x.word = v8x.word;
									v50 = v14 - (v15 - v50) / a1x->dword_0x10_16;
									x_BYTE_14B4E0[v47x.word] = v50;
								}
								v16 = a1x->array_0x4C_76.z;
								if (v12 <= v16 + 64 && v12 >= v16 + 6 * a1x->dword_0x10_16 && sub_57450(x_BYTE_10B4E0_terraintype[v8x.word]))
								{
									v17 = x_BYTE_13B4E0_angle[v8x.word] & 0xF8;
									v54 = 1;
									x_BYTE_10B4E0_terraintype[v8x.word] = 1;
									x_BYTE_13B4E0_angle[v8x.word] = v17 | 1;
								}
							}
							v8x._axis_2d.x++;
							v8x._axis_2d.y++;
							v18x.word = v8x.word;
							v8x._axis_2d.x -= 2;
							v8x._axis_2d.y -= 2;
							v19 = x_BYTE_11B4E0_height[v8x.word];
							v8x._axis_2d.x++;
							v20 = v19 - x_BYTE_11B4E0_height[v18x.word] + 32;
							v8x._axis_2d.y++;
							if (v20 >= 28)
							{
								if (v20 > 40)
									v20 = (v20 & 7) + 40;
							}
							else
							{
								v20 = (v20 & 3) + 28;
							}
							if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
								v21 = 32 - v20 + 32;
							else
								LOBYTE(v21) = v20;
							v22 = x_BYTE_D41B6;
							x_BYTE_12B4E0_shading[v8x.word] = v21;
							if (v22)
							{
								if (x_BYTE_14B4E0[v8x.word] > x_BYTE_11B4E0_height[v8x.word])
									x_BYTE_13B4E0_angle[v8x.word] &= 0xF7u;
								else
									x_BYTE_13B4E0_angle[v8x.word] |= 8u;
							}
							v8x._axis_2d.x++;
						}
						v7 = v51 + 1;
					}
					if (a1x->dword_0x10_16 == 5)
					{
						sub_3A090(a1x);
						v54 = 1;
					}
					if (v54)
					{
						v23x._axis_2d.x = v52x._axis_2d.x - 15;
						v24x._axis_2d.x = v52x._axis_2d.x + 15;
						v23x._axis_2d.y = v52x._axis_2d.y - 15;
						v24x._axis_2d.y = v52x._axis_2d.y + 15;
						sub_462A0(v23x, v24x);
					}
					v25 = 0;
					v26x._axis_2d.y = v52x._axis_2d.y - 1;
					do
					{
						v46 = 0;
						v26x._axis_2d.x = v52x._axis_2d.x - 1;
						while (v46 < 2)
						{
							v27 = x_BYTE_11B4E0_height[v26x.word] - (signed int)x_BYTE_11B4E0_height[v26x.word] / a1x->dword_0x10_16;
							if (v27 < 0)
								v27 = 0;
							if (v27 > 255)
								LOBYTE(v27) = -1;
							x_BYTE_11B4E0_height[v26x.word] = v27;
							v28 = a1x->dword_0x10_16;
							v29 = 31 / v28 + 32;
							if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
								v29 = -31 / v28 + 32;
							x_BYTE_12B4E0_shading[v26x.word] = v29;
							v26x._axis_2d.x++;
							v46++;
						}
						v25++;
						v26x._axis_2d.y++;
					} while (v25 < 2);
				}
				//LOBYTE(v1) = a1;
				if (a1x->dword_0x10_16 < 6)
					/*LOBYTE(v1) = */sub_39B60(a1x);
				break;
			case 3u:
				v30x._axis_2d.y = v53x._axis_2d.y;
				v31 = 0;
				while (v31 < 30)
				{
					v30x._axis_2d.x = v53x._axis_2d.x;
					v32 = 0;
					while (v32 < 30)
					{
						v49x.word = v30x.word;
						if (sub_57450(x_BYTE_10B4E0_terraintype[v30x.word]) || x_BYTE_10B4E0_terraintype[v49x.word] == 8)
						{
							x_BYTE_10B4E0_terraintype[v30x.word] = 1;
							x_BYTE_13B4E0_angle[v30x.word] = x_BYTE_13B4E0_angle[v30x.word] & 0xF8 | 1;
						}
						v32++;
						v30x._axis_2d.x++;
					}
					v31++;
					v30x._axis_2d.y++;
				}
				v33x._axis_2d.x = v52x._axis_2d.x - 15;
				v34x._axis_2d.x = v52x._axis_2d.x + 15;
				v33x._axis_2d.y = v52x._axis_2d.y - 15;
				v34x._axis_2d.y = v52x._axis_2d.y + 15;
				sub_46570(v33x, v34x);
				v35x._axis_2d.y = v52x._axis_2d.y - 1;
				v36 = 0;
				while (v36 < 2)
				{
					v37 = 0;
					v35x._axis_2d.x = v52x._axis_2d.x - 1;
					while (v37 < 2)
					{
						if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
							v45 = 1;
						else
							v45 = 63;
						v38x.word = v35x.word;
						v37++;
						v35x._axis_2d.x++;
						x_BYTE_12B4E0_shading[v38x.word] = v45;
					}
					v36++;
					v35x._axis_2d.y++;
				}
				sub_39B60(a1x);
				//LOBYTE(v1) = a1;
				a1x->byte_0x45_69 = 73;
				break;
			}
		}
	}
	//return v1;
}

//----- (000396A0) --------------------------------------------------------
void sub_396A0(type_str_0x6E8E* a1x)//21a6a0
{
	//int result; // eax
	int v2; // edx

	//result = a1;
	v2 = a1x->dword_0x8 - 1;
	a1x->dword_0x8 = v2;
	if (v2 > 0)
	{
		/*return */sub_39B60(a1x);
		return;
	}
	a1x->byte_0x45_69 = 74;
	a1x->byte_0x46_70 = 0;
	//return result;
}

//----- (000396D0) --------------------------------------------------------
uint8_t sub_396D0(type_str_0x6E8E* a1x)//21a6d0
{
	int v1; // eax
	int16_t v2; // dx
	uint8_t resulty; // al
	//type_str_0x6E8E* resultx; // al
	signed int v4; // edi
	int16_t v5; // dx
	uint16_t v6; // bx
	uaxis_2d v7x; // dx
	uaxis_2d v8x; // ax
	int v9; // edx
	uint16_t v10; // bx
	int16_t v11; // ax
	int16_t v12; // ax
	int v13; // ecx
	int v14; // edx
	int v15; // ecx
	uint16_t v16; // ax
	int v17; // edx
	int v18; // eax
	int v19; // edx
	char v20; // ch
	uint16_t v21; // bx
	signed int v22; // edi
	signed int v23; // esi
	char v24; // al
	uint16_t v25; // dx
	type_str_0x6E8E* jx; // ecx
	char v27; // dl
	axis_3d v28x; // [esp+0h] [ebp-30h]
	//int16_t v29; // [esp+4h] [ebp-2Ch]
	axis_3d v30x; // [esp+8h] [ebp-28h]
	//int16_t v31; // [esp+Ah] [ebp-26h]
	int i; // [esp+10h] [ebp-20h]
	int k; // [esp+14h] [ebp-1Ch]
	int v34; // [esp+18h] [ebp-18h]
	int v35; // [esp+1Ch] [ebp-14h]
	int v36; // [esp+20h] [ebp-10h]
	int v37; // [esp+24h] [ebp-Ch]
	char v38; // [esp+28h] [ebp-8h]
	char v39; // [esp+2Ch] [ebp-4h]

	v1 = (a1x->array_0x4C_76.y + 128) >> 8;
	v2 = a1x->array_0x4C_76.x + 128;
	v38 = v1;
	BYTE1(v37) = v1 - 15;
	v39 = HIBYTE(v2);
	resulty = a1x->byte_0x46_70;
	LOBYTE(v37) = HIBYTE(v2) - 15;
	if (resulty < 1u)
	{
		if (resulty)
			return resulty;
		sub_39B60(a1x);
		sub_3A090(a1x);
		a1x->byte_0x46_70 = 1;
		v4 = 0;
		v5 = a1x->array_0x4C_76.z;
		a1x->dword_0x10_16 = 16;
		a1x->array_0x4C_76.z = v5 + 64;
		HIBYTE(v6) = BYTE1(v37);
		while (v4 < 30)
		{
			LOBYTE(v6) = v37;
			for (i = 0; i < 30; i++)
			{
				if (sub_57450(x_BYTE_10B4E0_terraintype[v6]))
				{
					x_BYTE_10B4E0_terraintype[v6] = 1;
					x_BYTE_13B4E0_angle[v6] = x_BYTE_13B4E0_angle[v6] & 0xF8 | 1;
				}
				LOBYTE(v6) = v6 + 1;
			}
			v4++;
			HIBYTE(v6)++;
		}
		/*LOBYTE(v7) = v39 - 15;
		LOBYTE(v8) = v39 + 15;
		HIBYTE(v7) = v38 - 15;
		HIBYTE(v8) = v38 + 15;*/

		v7x._axis_2d.x = v39 - 15;
		v8x._axis_2d.x = v39 + 15;
		v7x._axis_2d.y = v38 - 15;
		v8x._axis_2d.y = v38 + 15;
		
		/*uaxis_2d temp_v7;
		temp_v7.word = v7;
		uaxis_2d temp_v8;
		temp_v8.word = v8;*/
		sub_462A0(v7x, v8x);
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 64);
	}
	else if (resulty > 1u)
	{
		if (resulty == 2)
		{
			HIBYTE(v21) = BYTE1(v37);
			v22 = 0;
			while (v22 < 30)
			{
				LOBYTE(v21) = v37;
				v23 = 0;
				while (v23 < 30)
				{
					v24 = sub_439A0(v23++, v21);
					v25 = v21;
					LOBYTE(v21) = v21 + 1;
					x_BYTE_11B4E0_height[v25] = v24;
				}
				v22++;
				HIBYTE(v21)++;
			}
			for (jx = x_D41A0_BYTEARRAY_4_struct.dword_38519; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
			{
				if (jx->byte_0x40_64 == 2
					&& jx->struct_byte_0xc_12_15.byte[2] & 0x10
					&& jx->word_0x26_38 == a1x-D41A0_BYTESTR_0.struct_0x6E8E)
				{
					v27 = jx->struct_byte_0xc_12_15.byte[2];
					jx->word_0x26_38 = 0;
					jx->struct_byte_0xc_12_15.byte[2] = v27 & 0xEF;
				}
			}
			sub_57F10(a1x);
		}
		return resulty;
	}
	//resultx = a1x;
	if (!(a1x->dword_0x8 & 3))
	{
		v9 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16 = v9;
		if (v9 <= 0)
		{
			a1x->byte_0x46_70 = 2;
		}
		else
		{
			HIBYTE(v10) = BYTE1(v37);
			v35 = 0;
			do
			{
				LOBYTE(v10) = v37;
				for (k = 0; k < 30; k++)
				{
					v30x.x = (uint8_t)v10 << 8;
					v30x.y = HIBYTE(v10) << 8;
					v36 = sub_58490_radix_3d_2(&a1x->array_0x4C_76, &v30x);
					if (v36 < 3840)
					{
						v11 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v30x);
						v28x = a1x->array_0x4C_76;
						sub_57FA0(&v28x, v11, 0, 3840);
						v12 = sub_10C40_getTerrainAlt(&v28x);
						v13 = (v12 >> 5)
							- (((x_DWORD)(0x10000 + (signed int)x_DWORD_DB750[0x200+(v36 << 10) / 3840]) >> 1)
								* ((v12 >> 5) - a1x->array_0x4C_76.z) >> 16);
						a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
						v14 = (a1x->word_0x14_20 & 3) + v13 - 2;
						v34 = x_BYTE_11B4E0_height[v10];
						v34 += (v14 - v34) / a1x->dword_0x10_16;
						if (v34 < 1)
							v34 = 1;
						if (v34 > 255)
							v34 = 255;
						x_BYTE_11B4E0_height[v10] = v34;
						if (a1x->dword_0x10_16 < 3)
							x_BYTE_11B4E0_height[v10] = sub_439A0(v10, v10);
						if (x_BYTE_D41B6)
						{
							v15 = x_BYTE_11B4E0_height[v10] + 64;
							if (v15 > 254)
								v15 = 254;
							x_BYTE_14B4E0[v10] -= ((uint8_t)x_BYTE_14B4E0[v10] - v15) / a1x->dword_0x10_16;
						}
					}
					LOBYTE(v10)++;
					HIBYTE(v10)++;
					v16 = v10;
					LOBYTE(v10) -= 2;
					HIBYTE(v10) -= 2;
					v17 = x_BYTE_11B4E0_height[v10];
					LOBYTE(v10)++;
					v18 = v17 - x_BYTE_11B4E0_height[v16] + 32;
					HIBYTE(v10)++;
					if (v18 >= 28)
					{
						if (v18 > 40)
							v18 = (v18 & 7) + 40;
					}
					else
					{
						v18 = (v18 & 3) + 28;
					}
					if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
						v19 = 32 - v18 + 32;
					else
						LOBYTE(v19) = v18;
					v20 = x_BYTE_D41B6;
					x_BYTE_12B4E0_shading[v10] = v19;
					if (v20)
					{
						if (x_BYTE_14B4E0[v10] > x_BYTE_11B4E0_height[v10])
							x_BYTE_13B4E0_angle[v10] &= 0xF7u;
						else
							x_BYTE_13B4E0_angle[v10] |= 8u;
					}
					//resulty = k + 1;
					LOBYTE(v10) = v10 + 1;
				}
				HIBYTE(v10)++;
				v35++;
			} while (v35 < 30);
		}
	}
	return resulty;
}

//----- (00039B60) --------------------------------------------------------
void sub_39B60(type_str_0x6E8E* a1x)//21ab60
{
	char v1; // al
	int i; // eax
	signed int v3; // eax
	int v4; // edx
	int v5; // esi
	int v6; // esi
	int16_t v7; // ax
	int v8; // ecx
	int v9; // eax
	type_str_0x6E8E* v10x; // ebx
	int result; // eax
	axis_3d v12x; // [esp+0h] [ebp-1Ch]
	//int16_t v13; // [esp+2h] [ebp-1Ah]
	int v14; // [esp+8h] [ebp-14h]
	int v15; // [esp+Ch] [ebp-10h]
	uint16_t v16; // [esp+10h] [ebp-Ch]
	int v17; // [esp+14h] [ebp-8h]
	int v18; // [esp+18h] [ebp-4h]

	v1 = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - 13;
	LOBYTE(v15) = ((uint16_t)(a1x->array_0x4C_76.x + 128) >> 8) - 13;
	BYTE1(v15) = v1;
	v17 = 0;
	v16 = v15;
	do
	{
		v18 = 0;
		LOBYTE(v16) = v15;
		while ((int16_t)v18 < 26)
		{
			v12x.x = (uint8_t)v16 << 8;
			v12x.y = HIBYTE(v16) << 8;
			if ((unsigned int)sub_584D0_SQdistX_SQdistY(&a1x->array_0x4C_76, &v12x) < 0xA90000)
			{
				for (i = x_WORD_15B4E0_source[v16]; ; i = v10x->word_0x16_22)
				{
					v10x = x_DWORD_EA3E4[i];
					if (v10x == x_DWORD_EA3E4[0])
						goto LABEL_35;
					if (sub_39FA0(a1x, x_DWORD_EA3E4[i]))
					{
						v3 = sub_58490_radix_3d_2(&v10x->array_0x4C_76, &a1x->array_0x4C_76);
						v4 = a1x->word_0x2C_44;
						v5 = v10x->array_0x4C_76.z - v4;
						v14 = v10x->array_0x4C_76.z - v4;
						if (v3 < 3328 && v5 < 4096)
							break;
					}
				LABEL_25:
					if (a1x->byte_0x45_69 == 74 && v10x->struct_byte_0xc_12_15.byte[2] & 0x10)
					{
						if (v10x->byte_0x3F_63 != 3
							|| v10x->byte_0x40_64
							|| v10x->dword_0xA4_164x->word_0x38_56 != D41A0_BYTESTR_0.word_0xc)
						{
							v10x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
						}
						else
						{
							v10x->struct_byte_0xc_12_15.byte[0] |= 1u;
						}
						v10x->struct_byte_0xc_12_15.byte[2] &= 0xEFu;
					}
				}
				if (v3 <= 32 || v5 <= 96)
				{
					sub_3A200(a1x, v10x);
					goto LABEL_25;
				}
				x_WORD_EB398ar = v10x->array_0x4C_76;
				v6 = ((3328 - v3) << 8) / 3328 << 7 >> 8;
				if (v6 < 4)
					v6 = 4;
				if (v6 > 128)
					v6 = 128;
				if (v6 > v3)
					LOWORD(v6) = v3;
				v7 = sub_581E0_maybe_tan2(&x_WORD_EB398ar, &a1x->array_0x4C_76);
				sub_57FA0(&x_WORD_EB398ar, v7, 0, v6);
				v8 = (int16_t)sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
				if (v10x->byte_0x3F_63 == 3 && !v10x->byte_0x40_64)
				{
					v9 = (int16_t)(x_WORD_EB398ar.z
						- (48
							* ((((4096 - v14) << 8)
								- (__CFSHL__((4096 - v14) << 8 >> 31, 12)
									+ ((4096 - v14) << 8 >> 31 << 12))) >> 12) >> 8));
					x_WORD_EB398ar.z -= 48
						* ((((4096 - v14) << 8)
							- (__CFSHL__((4096 - v14) << 8 >> 31, 12)
								+ ((4096 - v14) << 8 >> 31 << 12))) >> 12) >> 8;
					goto LABEL_21;
				}
				if (v10x->dword_0xA0_160x->word_160_0xe_14 < -64)
					goto LABEL_40;
				x_WORD_EB398ar.z -= 48
					* ((((4096 - v14) << 8) - (__CFSHL__((4096 - v14) << 8 >> 31, 12) + ((4096 - v14) << 8 >> 31 << 12))) >> 12) >> 8;
				v9 = x_WORD_EB398ar.z;
			LABEL_21:
				if (v9 < v8)
					LABEL_40 :
					x_WORD_EB398ar.z = v8;
				sub_57CF0(v10x, &x_WORD_EB398ar);
				goto LABEL_25;
			}
		LABEL_35:
			v18++;
			LOBYTE(v16) = v16 + 1;
		}
		result = v17++ + 1;
		HIBYTE(v16)++;
	} while ((int16_t)v17 < 26);
	//return result;
}

//----- (00039E40) --------------------------------------------------------
char sub_39E40(type_str_0x6E8E* a1x)//21ae40
{
	char v1; // ch
	signed int v2; // edx
	signed int v3; // esi
	uint16_t v4; // ax
	signed int v5; // edi
	char v6; // bl
	signed int v7; // esi
	uint16_t v8; // ax
	int v9; // edx
	int i; // edx
	uint8_t v11; // ch
	char v12; // ch
	type_str_0x6E8E* v13x; // edx
	int v15; // [esp+4h] [ebp-8h]

	v1 = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
	v2 = 0;
	v3 = 0;
	HIBYTE(v4) = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - 15;
	while (v3 < 30)
	{
		v5 = 0;
		LOBYTE(v4) = v1 - 15;
		while (v5 < 30)
		{
			if (!x_BYTE_10B4E0_terraintype[v4])
				v2++;
			v5++;
			LOBYTE(v4) = v4 + 1;
		}
		++v3;
		++HIBYTE(v4);
	}
	if (v2 >= 225)
		return 0;
	v6 = v1 - 27;
	v7 = 0;
	HIBYTE(v8) = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - 27;
	do
	{
		v9 = 0;
		for (LOBYTE(v8) = v6; ; LOBYTE(v8) = v8 + 1)
		{
			v15 = v9;
			if (v9 >= 54)
				break;
			for (i = x_WORD_15B4E0_source[v8]; ; i = v13x->word_0x16_22)
			{
				v13x = x_DWORD_EA3E4[i];
				if (v13x == x_DWORD_EA3E4[0])
					break;
				if (v13x != a1x && v13x->byte_0x3F_63 == 10)
				{
					v11 = v13x->byte_0x40_64;
					if (v11 >= 0x2Du)
					{
						if (v11 <= 0x2Du)
						{
							v12 = v13x->byte_0x45_69;
							if (v12 == 48 || v12 == 51)
								return 0;
						}
						else if (v11 == 67)
						{
							return 0;
						}
					}
				}
			}
			v9 = v15 + 1;
		}
		v7++;
		HIBYTE(v8)++;
	} while (v7 < 54);
	return 1;
}

//----- (00039FA0) --------------------------------------------------------
char sub_39FA0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//21afa0
{
	char result; // al
	uint8_t v3; // ah
	//char v4; // bl
	uint8_t v5; // ah
	uint8_t v6; // dl
	uint8_t v7; // ah
	uint8_t v8; // dl
	bool v9; // zf

	result = 1;
	v3 = a2x->byte_0x3F_63 - 1;
	if (v3 <= 0xEu)
	{
		switch (v3)
		{
		case 0u:
		case 3u:
		case 5u:
		case 6u:
		case 7u:
		case 0xAu:
		case 0xBu:
		case 0xCu:
		case 0xEu:
			return 0;
		case 1u:
			return result;
		case 2u:
			v7 = a2x->byte_0x40_64;
			if (v7 < 1u)
			{
				if (v7)
					return result;
			}
			else
			{
				if (v7 > 1u)
				{
					if (v7 != 2)
						return result;
					return 0;
				}
				if (a2x->struct_byte_0xc_12_15.byte[0] & 0x21)
					return 0;
			}
			if (a1x->word_0x1A_26 == a2x->word_0x1A_26)
				result = 0;
			break;
		case 4u:
			if (a2x->struct_byte_0xc_12_15.byte[0] & 0x21)
				return 0;
			//v4 = a2x->byte_0x45_69;
			if (a2x->byte_0x45_69 == 232)
				return 0;
			v5 = a2x->byte_0x40_64;
			if (v5 < 0x16u)
				return result;
			if (v5 <= 0x16u)
				return 0;
			if (v5 != 27)
				return result;
			if (a2x->byte_0x45_69 == 233)
				return 0;
			if (a2x->byte_0x45_69 == 234)
				result = 0;
			return result;
		case 8u:
			v6 = a2x->byte_0x40_64;
			if (!v6)
				return result;
			if (v6 < 0xDu)
				return 0;
			if (v6 > 0xEu)
				result = 0;
			return result;
		case 9u:
			v8 = a2x->byte_0x40_64;
			if (v8 < 0x27u)
			{
				v9 = v8 == 6;
			}
			else
			{
				if (v8 <= 0x28u)
					return result;
				v9 = v8 == 57;
			}
			if (!v9)
				result = 0;
			return result;
		case 0xDu:
			if (a2x->struct_byte_0xc_12_15.byte[0] & 0x21 || a2x->byte_0x40_64 == 1)
				return 0;
			return result;
		}
	}
	return result;
}

//----- (0003A090) --------------------------------------------------------
void sub_3A090(type_str_0x6E8E* a1x)//21b909
{
	type_str_0x6E8E* ix; // ebx
	type_str_0x6E8E* jx; // ebx
	int v3; // edi
	//Bit8u* v4; // eax
	int v5; // eax
	uint16_t v6; // bx
	char v7; // al
	int v8; // [esp+0h] [ebp-10h]
	signed int k; // [esp+4h] [ebp-Ch]
	int v10; // [esp+8h] [ebp-8h]
	char v11; // [esp+Ch] [ebp-4h]

	v8 = 0;
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38527; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (sub_10750(a1x, ix))
		{
			ix->dword_0x8 = -1;
			ix->byte_0x3D_61 = 0;
		}
	}
	for (jx = x_D41A0_BYTEARRAY_4_struct.dword_38519; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
	{
		if (jx->byte_0x40_64 == 2 && sub_10750(a1x, jx))
		{
			v3 = x_DWORD_E9B90 + 1;
			jx->struct_byte_0xc_12_15.byte[2] |= 0x10u;
			x_DWORD_E9B90 = v3;
			jx->word_0x30_48 = 30;
			jx->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
			jx->str_0x5E_94.dword_0x5E_94 += a1x->word_0x2A_42;
			v8 += 2;
			jx->str_0x5E_94.word_0x62_98 = a1x->word_0x1A_26;
		}
	}
	v11 = ((uint16_t)(a1x->array_0x4C_76.x + 128) >> 8) - 15;
	v5 = 0;
	for (HIBYTE(v6) = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - 15; ; ++HIBYTE(v6))
	{
		v10 = v5;
		if (v5 >= 30)
			break;
		LOBYTE(v6) = v11;
		for (k = 0; k < 30; k++)
		{
			if ((unsigned int)sub_10590_terrain_tile_type(x_BYTE_10B4E0_terraintype[v6]) & 0x7F0000)
			{
				v7 = x_BYTE_13B4E0_angle[v6] & 0xF8 | 1;
				x_BYTE_10B4E0_terraintype[v6] = 1;
				x_BYTE_13B4E0_angle[v6] = v7;
			}
			LOBYTE(v6) = v6 + 1;
		}
		v5 = v10 + 1;
	}
	if (v8)
		sub_6D8B0(a1x->word_0x1A_26, 0x14u, v8);
}

//----- (0003A200) --------------------------------------------------------
void sub_3A200(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//21b200
{
	bool v2; // ah
	uint8_t v3; // al
	uint8_t v4; // al
	//int v5; // edx
	uint16_t v6; // ax
	char v7; // [esp+0h] [ebp-4h]

	v2 = 0;
	v7 = 0;
	v3 = a2x->byte_0x3F_63;
	//a2x->byte_0xc_12 |= 0x01;//0x100001;
	//a2x->byte_0xe_14 |= 0x10;
	a2x->struct_byte_0xc_12_15.dword |= 0x100001;
	if (v3 < 3u)
		goto LABEL_13;
	if (v3 > 3u)
	{
		if (v3 != 5)
			goto LABEL_13;
		v4 = a2x->byte_0x40_64;
		if (v4 < 0x12u)
		{
			if (v4 != 12)
				goto LABEL_13;
		}
		else if (v4 > 0x12u)
		{
			if (v4 == 27)
				v7 = 1;
			goto LABEL_13;
		}
		v2 = 1;
		goto LABEL_13;
	}
	if (!a2x->byte_0x40_64)
	{
		//v5 = a2x->dword_0xA4_164;
		a2x->word_0x1E_30 = 512;
		a2x->dword_0xA4_164x->word_0x157_343 = 512;
	}
LABEL_13:
	if (!v2)
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v2 = a1x->word_0x14_20 % 7u == 0;
	}
	if (v2 && !v7)
	{
		if (a2x->byte_0x38_56 & 1)
		{
			a2x->str_0x5E_94.dword_0x5E_94 += a2x->dword_0x8 + 1;
			v6 = a1x->word_0x1A_26;
			a2x->str_0x5E_94.word_0x62_98 = v6;
			sub_6D8B0(v6, 0x14u, 1);
		}
	}
}

//----- (0003A2D0) --------------------------------------------------------
void sub_3A2D0(type_str_0x6E8E* a1x)//21b2d0
{
	uint8_t v1; // al
	int v2; // ecx
	int v3; // edx
	int v4; // esi
	int v5; // edi
	int v6; // esi
	int v7; // edx
	char v8; // dl
	uint16_t v9; // dx
	signed int v10; // ecx
	int v11; // eax
	int v12; // edi
	uint16_t v13; // dx
	int v14; // eax
	int16_t v15; // ax
	Bit32s v16; // [esp+0h] [ebp-1Ch]
	Bit32s v17; // [esp+4h] [ebp-18h]
	int v18; // [esp+8h] [ebp-14h]
	int v19; // [esp+Ch] [ebp-10h]
	int v20; // [esp+10h] [ebp-Ch]
	char v21; // [esp+14h] [ebp-8h]
	char v22; // [esp+18h] [ebp-4h]

	if (a1x->dword_0x8 >= 0)
	{
		v1 = a1x->byte_0x46_70;
		if (v1)
		{
			if (v1 > 3u)
			{
			LABEL_51:
				a1x->dword_0x8--;
				return;
			}
		}
		else
		{
			v2 = a1x->dword_0x4;
			v3 = a1x->word_0x2A_42;
			a1x->word_0x2C_44 = a1x->dword_0x4 >> 3;
			a1x->dword_0x10_16 = 0;
			a1x->byte_0x46_70 = 1;
			a1x->word_0x2A_42 = 4 * (unsigned int)(v3 / v2);
		}
		v4 = a1x->word_0x2C_44;
		v5 = a1x->dword_0x8;
		if (a1x->dword_0x4 - 3 * v4 >= v5)
		{
			if (a1x->dword_0x4 - 5 * v4 > v5)
			{
				v6 = a1x->dword_0x10_16 - 1;
				a1x->dword_0x10_16 = v6;
			}
			else
			{
				v6 = 3 * v4;
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				if (!(a1x->word_0x14_20 % 5u))
					a1x->byte_0x46_70 += 2;
			}
		}
		else
		{
			v6 = a1x->dword_0x10_16 + 1;
			a1x->dword_0x10_16 = v6;
		}
		if (v6 < 0)
			v6 = 0;
		v7 = a1x->word_0x2C_44;
		if (v6 > 3 * v7)
			v6 = 3 * v7;
		if (v6 < 0)
			v6 = 0;
		if (v6 > 15)
			v6 = 15;
		v8 = a1x->byte_0x46_70;
		v20 = 0;
		if (v8 > 1)
		{
			v20 = 1;
			a1x->byte_0x46_70 = v8 - 1;
		}
		if (v6 > 0)
		{
			v21 = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
			v22 = (uint16_t)(a1x->array_0x4C_76.y + 128) >> 8;
			v18 = sub_10080(0, v6);
			if (v18)
			{
				while (sub_10130(v18, (x_DWORD*)&v17, (x_DWORD*)&v16) == 1)
				{
					LOBYTE(v9) = v17 + v21;
					HIBYTE(v9) = v16 + v22;
					if (a1x->dword_0x8 & 1)
						v10 = 1;
					else
						v10 = -1;
					v11 = v10 + x_BYTE_11B4E0_height[v9];
					if (v11 < 0)
						v11 = 0;
					if (v11 > 255)
						LOBYTE(v11) = -1;
					x_BYTE_11B4E0_height[v9] = v11;
				}
				sub_10100(v18);
			}
			if (v20)
			{
				v12 = sub_10080(0, v6 >> 1);
				if (v12)
				{
					while (sub_10130(v12, (x_DWORD*)&v17, (x_DWORD*)&v16) == 1)
					{
						LOBYTE(v13) = v17 + v21;
						HIBYTE(v13) = v16 + v22;
						if (a1x->dword_0x8 & 1)
							v19 = 1;
						else
							v19 = -1;
						v14 = v19 + x_BYTE_11B4E0_height[v13];
						if (v14 < 0)
							v14 = 0;
						if (v14 > 255)
							LOBYTE(v14) = -1;
						x_BYTE_11B4E0_height[v13] = v14;
					}
					sub_10100(v12);
				}
			}
			if (!(a1x->dword_0x8 & 3))
			{
				sub_49EA0(a1x, (x_WORD)v6 << 8, 2048);
				sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 10);
				v15 = sub_10C80(a1x, 0, a1x->word_0x2A_42);
				if (v15)
					sub_6D8B0(a1x->word_0x1A_26, 0xFu, v15);
			}
		}
		goto LABEL_51;
	}
	sub_57F10(a1x);
}

//----- (0003A5B0) --------------------------------------------------------
void sub_3A5B0(type_str_0x6E8E* a1x)//21b5b0
{
	int v1; // edx
	type_str_0x6E8E* v2x; // eax
	char v3; // dl
	int16_t v4; // dx

	v1 = a1x->dword_0x8 - 1;
	a1x->dword_0x8 = v1;
	if (v1 < 0)
	{
		sub_57F10(a1x);
	}
	else if (!v1)
	{
		v2x = sub_4A190(&a1x->array_0x4C_76, 5, a1x->byte_0x46_70);
		if (v2x)
		{
			v3 = 8 * v2x->byte_0x40_64;
			v2x->byte_0x49_73 = 13;
			v2x->byte_0x45_69 = v3 + 7;
			v2x->word_0x28_40 = a1x->word_0x28_40;
			v4 = a1x->word_0x1A_26;
			v2x->word_0x96_150 = 0;
			v2x->dword_0x90_144 = 0;
			v2x->dword_0x8C_140 = 0;
			v2x->word_0x2E_46 = 250;
			v2x->word_0x1A_26 = v4;
		}
	}
}

//----- (0003A630) --------------------------------------------------------
void sub_3A630(type_str_0x6E8E* a1x)//21b630
{
	//int result; // eax
	int v2; // edx

	//result = a1;
	v2 = a1x->dword_0x8 - 1;
	a1x->dword_0x8 = v2;
	if (v2 <= 0)
		sub_57F10(a1x);
	//return result;
}

//----- (0003A650) --------------------------------------------------------
int sub_3A650(type_str_0x6E8E* a1x)//21b650
{
	type_str_0x6E8E* v1x; // edi
	char v2; // al
	int k; // eax
	int16_t v4; // ax
	int16_t v5; // ax
	type_str_0x6E8E* v6x; // ebx
	int16_t v8; // [esp+0h] [ebp-14h]
	char v9; // [esp+4h] [ebp-10h]
	char v10; // [esp+8h] [ebp-Ch]
	uint8_t j; // [esp+Ch] [ebp-8h]
	uint8_t i; // [esp+10h] [ebp-4h]

	if (a1x->word_0x96_150)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v1x > x_DWORD_EA3E4[0])
		{
			v2 = a1x->byte_0x46_70;
			v10 = ((uint16_t)(v1x->array_0x4C_76.x + 128) >> 8) - v2;
			v8 = 2 * a1x->byte_0x46_70;
			v9 = ((uint16_t)(v1x->array_0x4C_76.y + 128) >> 8) - v2;
			for (i = 0; i < v8; i++)
			{
				for (j = 0; j < v8; j++)
				{
					for (k = x_WORD_15B4E0_source[(uint8_t)(j + v10) + ((uint8_t)(v9 + i) << 8)];
						;
						k = v6x->word_0x16_22)
					{
						v6x = x_DWORD_EA3E4[k];
						if (v6x <= x_DWORD_EA3E4[0])
							break;
						if (v6x->byte_0x3F_63 == v1x->byte_0x3F_63
							&& v6x->byte_0x40_64 == v1x->byte_0x40_64
							&& sub_3A7F0(v6x))
						{
							sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 6);
							v6x->byte_0x49_73 = 14;
							v4 = v6x->byte_0x48_72;
							v6x->byte_0x48_72 = 0;
							v6x->word_0x4A_74 = v4;
							v6x->word_0x28_40 = a1x->word_0x1A_26;
							v5 = a1x->word_0x2A_42;
							v6x->word_0x2E_46 = v5;
							v6x->word_0x30_48 = v5;
							if ((v6x->byte_0x45_69 & 7) == 2)
								v6x->word_0x96_150 = 0;
							else
								v6x->byte_0x45_69 = 8 * v6x->byte_0x40_64 + 7;
						}
					}
				}
			}
		}
	}
	sub_57F10(a1x);
	return 1;
}

//----- (0003A7F0) --------------------------------------------------------
char sub_3A7F0(type_str_0x6E8E* a1x)//21b7f0
{
	char result; // al
	uint8_t v2; // ah
	char v3; // bh

	result = 1;
	if (a1x->byte_0x3F_63 != 5)
		return 0;
	v2 = a1x->byte_0x40_64;
	if (v2 < 0x16u)
	{
		if (v2 >= 0xCu && v2 <= 0xFu)
			goto LABEL_12;
	}
	else
	{
		if (v2 <= 0x17u)
			goto LABEL_12;
		if (v2 >= 0x19u)
		{
			if (v2 > 0x19u)
			{
				if (v2 > 0x1Bu)
					goto LABEL_13;
				goto LABEL_12;
			}
			if (a1x->byte_0x46_70)
			{
			LABEL_12:
				result = 0;
				goto LABEL_13;
			}
		}
	}
LABEL_13:
	if (result)
	{
		v3 = a1x->byte_0x49_73;
		if (v3 == 14 || v3 == 13 || v3 == 16 || v3 == 17)
			result = 0;
	}
	if (result && a1x->byte_0x45_69 == 232)
		return 0;
	return result;
}

//----- (0003A8B0) --------------------------------------------------------
void sub_3A8B0(type_str_0x6E8E* a1x)//21b8b0
{
	int16_t v1; // cx
	type_str_0x6E8E* v2x; // eax
	char v3; // dh
	char v4; // cl
	int v5; // esi
	char v6; // ah
	int v7; // eax
	int16_t v8; // di
	type_str_0x6E8E* v9x; // eax
	int16_t v10; // dx
	int v11; // esi
	//Bit32u v12; // eax
	Bit32u v12x;
	int v13; // edx
	unsigned int v14; // edx
	int v15; // esi
	type_str_0x6E8E* ix; // esi
	uint16_t v17; // di
	//type_str_0x6E8E* v18x; // edi
	type_str_0x6E8E* v19x; // eax
	type_str_0x6E8E* v20x; // esi
	int16_t v21; // ax
	char v22; // ah
	int16_t v23; // ax
	char v24; // al
	char v25; // dl
	//int v26; // esi
	char v27; // cl
	Bit32u v29; // [esp+0h] [ebp-24h]
	type_SPELLS_BEGIN_BUFFER_str_sub* v30x; // [esp+4h] [ebp-20h]
	type_str_0x6E8E* v31x; // [esp+8h] [ebp-1Ch]
	type_str_0x6E8E* v32x; // [esp+Ch] [ebp-18h]
	type_str_0x6E8E* v33x; // [esp+10h] [ebp-14h]
	bool v34; // [esp+14h] [ebp-10h]
	uint8_t v35; // [esp+18h] [ebp-Ch]
	uint8_t v36; // [esp+1Ch] [ebp-8h]
	char v37; // [esp+20h] [ebp-4h]

	v2x = x_DWORD_EA3E4[a1x->word_0x32_50];
	v31x = 0;
	v29 = 0x10000;
	v33x = x_DWORD_EA3E4[a1x->word_0x32_50];
	if (v2x->dword_0x8 < 0 || v2x->struct_byte_0xc_12_15.byte[1] & 4)
	{
	LABEL_99:
		sub_57F10(a1x);
	}
	else
	{
		v3 = a1x->byte_0x44_68;
		if (v3)
		{
			switch (abs(v3))
			{
			case 1:
				v1 = 0;
				break;
			case 2:
				v1 = 153;
				break;
			case 3:
				v1 = 307;
				break;
			case 4:
				v1 = 445;
				break;
			case 5:
				v1 = 491;
				break;
			case 6:
				v1 = 512;
				break;
			default:
				break;
			}
			x_WORD_EB398ar = a1x->word_0x9A_154x;
			x_WORD_EB398ar.z = a1x->array_0x4C_76.z;
			sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, v1);
			sub_57CF0(a1x, &x_WORD_EB398ar);
			v4 = a1x->byte_0x44_68 + 1;
			a1x->byte_0x44_68 = v4;
			if (v4 > 0 && v4 > 6)
				a1x->byte_0x44_68 = -5;
		}
		v5 = (int16_t)sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		v6 = a1x->byte_0x46_70;
		if (v6 != 9 && v6 != 7)
		{
			v7 = a1x->dword_0x8 - 1;
			a1x->dword_0x8 = v7;
			if (v7 <= 0)
				a1x->byte_0x46_70 = 6;
			if (D41A0_BYTESTR_0.word_0xc == v33x->dword_0xA4_164x->word_0x38_56)
			{
				v8 = a1x->word_0x36_54;
				a1x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
				if (v8 != -1)
					a1x->struct_byte_0xc_12_15.byte[2] |= 0x80u;
			}
			else if (!(a1x->byte_0x3E_62 & 7))
			{
				v9x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[12]];
				if (v9x > x_DWORD_EA3E4[0] && v9x->word_0x2E_46 && v9x->byte_0x46_70 >= 2)
					a1x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
				else
					a1x->struct_byte_0xc_12_15.byte[0] |= 1u;
			}
			if (a1x->array_0x4C_76.z < v5)
				a1x->array_0x4C_76.z = v5;
			if (!a1x->byte_0x44_68 && abs(a1x->array_0x4C_76.z - (v5 + 1024)) > 96)
			{
				if (a1x->array_0x4C_76.z - (v5 + 1024) <= 0)
					v10 = 48;
				else
					v10 = -48;
				a1x->array_0x4C_76.z += v10;
			}
			if (x_BYTE_D41B6)
			{
				v11 = a1x->array_0x52_82.dd;
				v5 = (int16_t)sub_10C60(&a1x->array_0x4C_76) - v11;
				if (a1x->array_0x4C_76.z > v5)
					a1x->array_0x4C_76.z = v5;
			}
		}
		//LOBYTE(v12) = a1x->byte_0x46_70;
		switch (a1x->byte_0x46_70)
		{
		case 0:
			//v12 = (int)& SPELLS_BEGIN_BUFFER_DA818[0x732] + 26 * a1x->word_0x2A_42;
			//v13 = *(x_DWORD *)v12;
			v13 = SPELLS_BEGIN_BUFFER_str[23].subspell[a1x->word_0x2A_42].dword_2;
			a1x->dword_0x4 = v13;// *(x_DWORD*)v12;
			a1x->dword_0x8 = v13;
			a1x->word_0x9A_154x = a1x->array_0x4C_76;
			//LOBYTE(v12) = *(x_BYTE *)(v12 + 24);
			//LOBYTE(v12) = SPELLS_BEGIN_BUFFER_str[23].subspell[a1x->word_0x2A_42].byte_0x1A;
			switch (SPELLS_BEGIN_BUFFER_str[23].subspell[a1x->word_0x2A_42].byte_0x1A)
			{
			case 0:
				a1x->byte_0x43_67 = 1;
				break;
			case 1:
				a1x->byte_0x43_67 = 2;
				break;
			case 2:
				a1x->byte_0x43_67 = 4;
				break;
			case 3:
				a1x->byte_0x43_67 = 8;
				break;
			default:
				break;
			}
			a1x->byte_0x46_70 = 1;
			goto LABEL_45;
		case 1:
		LABEL_45:
			if (a1x->word_0x36_54 != 0xffff)
			{
				a1x->byte_0x46_70 = 2;
				//return v12;
			}				
			return;// v12;
		case 2:
			a1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
			a1x->word_0x1A_26 = a1x->word_0x32_50;
			//if ((*xadataspellsdat.var28_begin_buffer)[80 * a1x->word_0x36_54 + 27 + 26 * a1x->word_0x34_52] & 1)
			if (SPELLS_BEGIN_BUFFER_str[a1x->word_0x36_54].subspell[a1x->word_0x34_52].byte_0x1B & 1)
				a1x->byte_0x3D_61 = 6;
			else
				a1x->byte_0x3D_61 = 1;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			//LOWORD(v12) = a1x->word_0x14_20 / 0x32u;
			v14 = a1x->word_0x14_20 % 0x32u;
			a1x->byte_0x46_70 = 3;
			a1x->dword_0x10_16 = v14 + 16;
			return;// v12;
		case 3:
			v15 = a1x->dword_0x10_16 - 1;
			a1x->dword_0x10_16 = v15;
			if (!v15)
				a1x->byte_0x46_70 = 4;
			return;// v12;
		case 4:
			if (!(a1x->byte_0x3E_62 & 0xF))
			{
				for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
				{
					//LOBYTE(v12) = ix->byte_0x40_64;
					if (ix->byte_0x40_64 <= 1u && ix != v33x)
					{
						v12x = sub_583F0_distance_3d(&a1x->array_0x4C_76, &ix->array_0x4C_76);
						if (v12x < 3584 && v12x < (signed int)v29)
						{
							v31x = ix;
							v29 = v12x;
						}
					}
				}
				if (v31x)
				{
					//v12 = v31x - D41A0_BYTESTR_0.struct_0x6E8E;
					a1x->byte_0x46_70 = 5;
					a1x->word_0x96_150 = v31x - D41A0_BYTESTR_0.struct_0x6E8E;
				}
			}
			return;// v12;
		case 5:
			//a1x->byte_0xc_12 &= 0xFF7FFFFE;
			a1x->struct_byte_0xc_12_15.dword &= 0xFF7FFFFE;
			//a1x->byte_0xc_12 &= 0xFE;
			//a1x->byte_0xe_14 &= 0x7F;
			//LOBYTE(v12) = 0;
			v17 = a1x->word_0x96_150;
			v37 = 0;
			if (!v17
				|| x_DWORD_EA3E4[v17]->dword_0x8 < 0
				|| x_DWORD_EA3E4[v17]->struct_byte_0xc_12_15.byte[1] & 4)
			{
				v37 = 1;
			}
			else
			{
				sub_6D8B0(v33x->word_0x1A_26, 0x17u, 1);
				//v30 = (int16_t *)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->word_0x36_54 + 2 + 26 * a1x->word_0x34_52];
				v30x = &SPELLS_BEGIN_BUFFER_str[a1x->word_0x36_54].subspell[a1x->word_0x34_52];
				//v34 = a1x->word_0x36_54 == 7
				//&& (*xadataspellsdat.var28_begin_buffer)[80 * a1x->word_0x36_54 + 26 + 26 * a1x->word_0x34_52] == 2;
				v34 = a1x->word_0x36_54 == 7
				&& SPELLS_BEGIN_BUFFER_str[a1x->word_0x36_54].subspell[a1x->word_0x34_52].byte_0x1A == 2;
				v35 = (v34 != 0) + 1;
				v36 = 0;
				for (; v36 < v35; )
				{
					v19x = sub_6DCA0(v33x, &a1x->array_0x4C_76, a1x->word_0x36_54, v30x, 0, 1);
					v20x = v19x;
					v32x = v19x;
					if (v19x)
					{
						v19x->word_0x1A_26 = a1x->word_0x32_50;
						v19x->word_0x96_150 = a1x->word_0x96_150;
						sub_655C0(v19x, x_DWORD_EA3E4[v17]);
						v20x->word_0x1C_28 = v20x->word_0x20_32;
						v20x->word_0x1E_30 = v20x->word_0x22_34;
						v21 = v20x->word_0x1C_28;
						v20x->array_0x4C_76.z += a1x->array_0x52_82.aa;
						HIBYTE(v21) = (HIBYTE(v21) + 4) & 7;
						a1x->word_0x1C_28 = v21;
						v22 = a1x->byte_0x44_68;
						if (v22)
						{
							a1x->byte_0x44_68 = v22 + 1;
							if ((char)(v22 + 1) > 5)
								a1x->byte_0x44_68 = 5;
						}
						else
						{
							a1x->byte_0x44_68 = 1;
						}
						if (v34)
						{
							if (v36)
								v23 = v32x->word_0x1C_28 - 113;
							else
								v23 = v32x->word_0x1C_28 + 113;
							v32x->word_0x1C_28 = v23 & 0x7FF;
						}
						v24 = a1x->byte_0x3D_61 - 1;
						a1x->byte_0x3D_61 = v24;
						if (!v24)
							v37 = 1;
					}
					v36++;
				}
			}
			if (v37)
			{
				v25 = a1x->byte_0x43_67;
				a1x->word_0x96_150 = 0;
				a1x->byte_0x43_67 = --v25;
				if (v25)
					//LABEL_46:
					a1x->byte_0x46_70 = 2;
				else
					a1x->byte_0x46_70 = 6;
			}
			return;// v12;
		case 6:
			v27 = a1x->byte_0x44_68;
			//*(x_DWORD *)(a1 + 12) &= 0xFF7FFFFE;
			a1x->struct_byte_0xc_12_15.dword &= 0xFF7FFFFE;
			//a1x->byte_0xc_12 &= 0xfe;
			//a1x->byte_0xe_14 &= 0x7f;
			if (!v27)
			{
				a1x->byte_0x46_70 = 7;
				a1x->dword_0x10_16 = 10;
			}
			return;// v12;
		case 7:
			//v12 = a1x->dword_0x10_16 - 1;
			a1x->dword_0x10_16--;// = v12;
			if (!a1x->dword_0x10_16)
			{
				a1x->byte_0x46_70 = 9;
				a1x->dword_0x10_16 = 3;
			}
			return;// v12;
		case 8:
			a1x->byte_0x46_70 = 9;
			//v26 = *(x_DWORD *)(a1 + 12);
			a1x->dword_0x10_16 = 3;
			//*(x_DWORD *)(a1 + 12) = v26 & 0xFF7FFFFE;
			a1x->struct_byte_0xc_12_15.dword &= 0xFF7FFFFE;
			//a1x->byte_0xc_12 &= 0xFE;
			//a1x->byte_0xe_14 &= 0x7F;
			return;// v12;
		case 9:
			//v12 = a1x->dword_0x10_16;
			a1x->dword_0x10_16++;// = v12 + 1;
			//LOWORD(v12) = a1x->array_0x4C_76.z - 32 * v12;
			a1x->array_0x4C_76.z -= 32 * a1x->dword_0x10_16;
			if ((int16_t)a1x->array_0x4C_76.z >= v5)
				return;// v12;
			a1x->array_0x4C_76.z = v5;
			if (sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 1)
				sub_4A190(&a1x->array_0x4C_76, 10, 5);
			else
				sub_4A190(&a1x->array_0x4C_76, 10, 0);
			goto LABEL_99;
		default:
			return;// v12;
		}
	}
	//return v12;
}

typedef union {
	type_str_0x6E8E* un_0x6E8E;
	Bit32s unint;
} type_un_v3;

//----- (0003AF00) --------------------------------------------------------
void sub_3AF00_castle_defend_event(type_str_0x6E8E* a1x)//21bf00
{
	int v1; // edx
	int16_t v2; // dx
	type_un_v3 v3;
	//type_str_0x6E8E* v3x; // esi
	//int v3z = 0;
	//Bit16s* v3y; // esi
	unsigned int v4; // edx
	int v5; // eax
	type_str_0x6E8E* ix; // ecx
	uint8_t v7; // al
	uint8_t v8; // al
	bool v9; // zf
	int v10; // eax
	int v11; // edx
	int16_t v12; // di
	signed int v13; // edx
	int16_t v14; // ax
	uint16_t v15; // ax
	type_str_0x6E8E* v16x; // edi
	type_str_0x6E8E* v17x; // eax
	int16_t v18; // ax
	int16_t v19; // ax
	char v20; // dh
	char v21; // al
	type_str_0x6E8E* v22x; // eax
	char v23; // dl
	int16_t v24; // ax
	char v25; // dh
	int16_t v26; // ax
	int result; // eax
	int v28; // ecx
	int v29; // ecx
	//Bit16s* v30; // esi
	//signed int v31; // edx
	int v32; // [esp+0h] [ebp-30h]
	int v33; // [esp+4h] [ebp-2Ch]
	int v34; // [esp+8h] [ebp-28h]
	int v35; // [esp+Ch] [ebp-24h]
	int v36; // [esp+10h] [ebp-20h]
	int v37; // [esp+14h] [ebp-1Ch]
	type_str_0x6E8E* v38x; // [esp+18h] [ebp-18h]
	char v39; // [esp+1Ch] [ebp-14h]
	uint8_t v40; // [esp+20h] [ebp-10h]
	char v41; // [esp+24h] [ebp-Ch]
	uint8_t v42; // [esp+28h] [ebp-8h]
	char v43; // [esp+2Ch] [ebp-4h]

	v1 = a1x->dword_0x8;
	v41 = 0;
	if (v1 < 0)
	{
		sub_57F10(a1x);
		return;
	}
	v2 = a1x->word_0x1A_26;
	if (!v2)
	{
		sub_57F10(a1x);
		return;
	}
	v38x = x_DWORD_EA3E4[v2];
	v3.un_0x6E8E = x_DWORD_EA3E4[v38x->dword_0xA4_164x->word_0x3A_58];
	if (a1x->word_0x4A_74 <= 1)
		v37 = 384;
	else
		v37 = 224;
	switch (a1x->byte_0x46_70)
	{
	case 0:
		a1x->word_0x9A_154x = a1x->array_0x4C_76;
		//v3y = a1x->array_0x52_82;
		a1x->byte_0x46_70 = 1;
		goto LABEL_74;
	case 1:
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v4 = a1x->word_0x14_20 % 0x30u;
		a1x->byte_0x46_70 = 2;
		a1x->dword_0x10_16 = v4 + 16;
		goto LABEL_9;
	case 2:
	LABEL_9:
		v5 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16 = v5;
		if (!v5)
			a1x->byte_0x46_70 = 3;
		goto LABEL_74;
	case 3:
		if (a1x->byte_0x3E_62 & 0x3F)
			goto LABEL_74;
		v36 = (a1x->array_0x4C_76.x + 128) >> 8;
		v35 = (a1x->array_0x4C_76.y + 128) >> 8;
		v3.unint = sub_10080(3, 12);
		if (!v3.un_0x6E8E)
			goto LABEL_74;
		v39 = 0;
		break;
	case 4:
		a1x->byte_0x46_70 = 5;
		a1x->dword_0x10_16 = 4;
		goto LABEL_37;
	case 5:
	LABEL_37:
		v11 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16 = v11;
		if (v11)
		{
			a1x->word_0x36_54 += 160;
		}
		else
		{
			a1x->byte_0x46_70 = 6;
			a1x->word_0x36_54 = 0;
		}
		goto LABEL_74;
	case 6:
		v12 = a1x->word_0x14_20;
		a1x->word_0x9A_154x.z = a1x->array_0x4C_76.z;
		a1x->word_0x14_20 = 9377 * v12 + 9439;
		v13 = a1x->word_0x14_20 % 0x64u;
		a1x->byte_0x46_70 = 7;
		if (v13)
		{
			if (v13 <= 5)
			{
				v14 = (a1x->byte_0x43_67 == 1) + 2;
			}
			else
			{
				v14 = a1x->byte_0x43_67 != 1;				
			}
			a1x->word_0x2C_44 = v14;
		}
		else
		{
			a1x->word_0x2C_44 = 4;
		}
		v15 = a1x->word_0x2C_44;
		a1x->byte_0x3D_61 = 1;
		if (v15 <= 1u)
			a1x->byte_0x3D_61 = 6;
		goto LABEL_48;
	case 7:
	case 8:
	LABEL_48:
		v43 = 0;
		if (!a1x->word_0x96_150)
			goto LABEL_104;
		v16x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v16x->dword_0x8 < 0 || v16x->struct_byte_0xc_12_15.byte[1] & 4)
			goto LABEL_104;
		switch (a1x->word_0x2C_44)
		{
		case 0:
			v40 = 0;
			v42 = 1;
			break;
		case 1:
			v40 = 7;
			goto LABEL_57;
		case 2:
			v40 = 7;
			v42 = 1;
			break;
		case 3:
			v40 = 0;
			v42 = 2;
			break;
		case 4:
			v40 = 9;
		LABEL_57:
			v42 = 0;
			break;
		default:
			break;
		}
		//v17x = sub_6DCA0(v3.un_0x6E8E, &a1x->array_0x4C_76, v40, (int16_t*) & (*xadataspellsdat.var28_begin_buffer)[80 * v40 + 2 + 26 * v42], 0, a1x->byte_0x46_70 == 7);
		v17x = sub_6DCA0(v3.un_0x6E8E, &a1x->array_0x4C_76, v40, &SPELLS_BEGIN_BUFFER_str[v40].subspell[v42], 0, a1x->byte_0x46_70 == 7);
		v3.un_0x6E8E = v17x;
		if (v17x)
		{
			v17x->word_0x1A_26 = a1x->word_0x1A_26;
			v17x->word_0x96_150 = a1x->word_0x96_150;
			if (v38x->dword_0xA4_164x->word_0x38_56 == D41A0_BYTESTR_0.word_0xc && !v40)
				sub_49C90(v17x, 42);
			sub_655C0(v3.un_0x6E8E, v16x);
			v3.un_0x6E8E->word_0x1C_28 = v3.un_0x6E8E->word_0x20_32;
			v3.un_0x6E8E->word_0x1E_30 = v3.un_0x6E8E->word_0x22_34;
			v18 = v3.un_0x6E8E->word_0x1C_28;
			v3.un_0x6E8E->array_0x4C_76.z += a1x->array_0x52_82.aa;
			v18 &= 0x7ffu;
			a1x->word_0x1C_28 = v18;
			v19 = v3.un_0x6E8E->word_0x1E_30;
			v19 &= 0x7ffu;
			v20 = a1x->byte_0x44_68;
			a1x->word_0x1E_30 = v19;
			if (v20)
			{
				a1x->byte_0x44_68 = v20 + 1;
				if ((char)(v20 + 1) > 5)
					a1x->byte_0x44_68 = 5;
			}
			else
			{
				a1x->byte_0x44_68 = 1;
			}
			v21 = a1x->byte_0x3D_61 - 1;
			a1x->byte_0x3D_61 = v21;
			if (!v21)
				LABEL_104:
			v43 = 1;
		}
		if (v43)
		{
			a1x->word_0x96_150 = 0;
			a1x->byte_0x46_70 = 1;
		}
		else
		{
			a1x->byte_0x46_70 = 8;
		}
		goto LABEL_74;
	case 9:
		goto LABEL_73;
	case 0xA:
		v22x = sub_4A190(&a1x->array_0x4C_76, 10, 1);
		if (v22x)
			v22x->word_0x1A_26 = a1x->word_0x1A_26;
	LABEL_73:
		v41 = 1;
		goto LABEL_74;
	default:
		goto LABEL_74;
	}
LABEL_33:
	if (sub_10130(v3.unint, &v33, &v32) == 1 && !v39)
	{
		/*//fix
		int previndex = -1;
		//fix*/

		for (ix = x_DWORD_EA3E4[x_WORD_15B4E0_source[(uint8_t)(v33 + v36) + ((uint8_t)(v32 + v35) << 8)]];
			;
			ix = x_DWORD_EA3E4[ix->word_0x16_22])
		{
			//fix
			/*if (ix->word_0x16_22 == x_DWORD_EA3E4[ix->word_0x16_22]->word_0x16_22)
				return;*/
			//fix

			if (ix == x_DWORD_EA3E4[0] || v39)
				goto LABEL_33;
			v7 = ix->byte_0x3F_63;
			if (v7 >= 3u)
			{
				if (v7 <= 3u)
				{
					v8 = ix->byte_0x40_64;
					if (v8 <= 1u || v8 == 3)
					{
						v9 = ix->word_0x1A_26 == a1x->word_0x1A_26;
					LABEL_26:
						if (v9)
							goto LABEL_28;
					LABEL_27:
						v39 = 1;
						goto LABEL_28;
					}
				}
				else if (v7 == 5 && ix->byte_0x40_64 != 22 && ix->word_0x1A_26 != a1x->word_0x1A_26)
				{
					if (ix->byte_0x49_73 == 14)
					{
						v9 = ix->word_0x28_40 == a1x->word_0x1A_26;
						goto LABEL_26;
					}
					goto LABEL_27;
				}
			}
		LABEL_28:
			if (v39)
			{
				v10 = ix - D41A0_BYTESTR_0.struct_0x6E8E;
				a1x->byte_0x46_70 = 4;
				a1x->word_0x96_150 = v10;
			}
		}
	}
	sub_10100(v3.unint);
LABEL_74:
	if (v41)
	{
		sub_57F20(a1x);
		return;
	}
	v23 = a1x->byte_0x44_68;
	if (v23)
	{
		switch (abs(v23))
		{
		case 1:
			v34 = 0;
			break;
		case 2:
			v34 = 115;
			break;
		case 3:
			v34 = 230;
			break;
		case 4:
			v34 = 334;
			break;
		case 5:
			v34 = 368;
			break;
		case 6:
			v34 = 384;
			break;
		default:
			break;
		}
		v24 = -(int16_t)v34;
		x_WORD_EB398ar = a1x->word_0x9A_154x;
		//v3z = a1x->dword_0xA0_160;
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, v24);
		sub_57CF0(a1x, &x_WORD_EB398ar);
		v25 = a1x->byte_0x44_68 + 1;
		a1x->byte_0x44_68 = v25;
		if (v25 > 0 && v25 > 6)
			a1x->byte_0x44_68 = -5;
	}
	v26 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	result = v37 + v26;
	v28 = a1x->array_0x4C_76.z;
	if (v28 < result)
	{
	LABEL_98:
		a1x->array_0x4C_76.z = result;
		return;
	}
	//LOWORD(v3) = *(x_WORD *)(a1 + 54);
	if (a1x->word_0x36_54)
	{
		result += a1x->word_0x36_54;
		goto LABEL_98;
	}
	if (!a1x->byte_0x44_68)
	{
		v29 = v28 - result;
		result = abs(v29);
		if (result > 32)
		{
			//v30 = &a1x->array_0x4C_76.z;
			if (v29 <= 0)
				a1x->array_0x4C_76.z += (Bit16s)16;
			else
				a1x->array_0x4C_76.z += (Bit16s)-16;
			//result = v31 + (int16_t)*v30;
			//*v30 = result;
			//a1x->array_0x4C_76.z += v31;
		}
		if (a1x->byte_0x3E_62 & 8)
			a1x->array_0x4C_76.z += (Bit16s)6;
		else
			a1x->array_0x4C_76.z += (Bit16s)-6;
	}
	//return result;
}

//----- (0003B4D0) --------------------------------------------------------
void sub_3B4D0_fill_unk_D4350_256(int a1)//21c4d0
{
	Bit32u* result; // eax
	char v2; // bl
	int v3; // edx

	result = (Bit32u*)unk_D4350;
	v2 = 32;
	v3 = (a1 << 16) - 1;
	do
	{
		if (result[0])
			result[0] = v3;
		if (result[1])
			result[1] = v3;
		if (result[2])
			result[2] = v3;
		if (result[3])
			result[3] = v3;
		if (result[4])
			result[4] = v3;
		if (result[5])
			result[5] = v3;
		if (result[6])
			result[6] = v3;
		if (result[7])
			result[7] = v3;
		result += 8;
		v2--;
	} while (v2);
	//return result;
}

//----- (0003B560) --------------------------------------------------------
x_DWORD *sub_3B560_set_billboards(int16_t a1)//21c560
{
	int v1; // edx
	x_DWORD *v2; // edi
	signed int *v3; // esi
	//type_E9C38_smalltit_59360* v3x;
	int v4; // eax
	int16_t v5; // bx
	signed int v6; // ecx
	int v7; // edx
	uint8_t v8; // cf
	int v9; // eax
	int v10; // esi
	Bit32u v11; // eax
	x_DWORD *v12; // edi
	signed int *v13; // esi
	int v14; // eax
	signed int v15; // ecx
	int v16; // edx
	x_DWORD *v17; // edi
	signed int *v18; // esi
	int v19; // eax
	int16_t v20; // bx
	signed int v21; // ecx
	int v22; // edx
	x_DWORD *v23; // edi
	signed int *v24; // esi
	int v25; // eax
	int16_t v26; // bx
	signed int v27; // ecx
	int v28; // edx
	x_DWORD *result; // eax
	//int v30; // eax
	signed int *v31; // esi
	x_DWORD *v32; // edi
	int v33; // eax
	signed int v34; // ecx
	int v35; // edx
	x_DWORD *v36; // edi
	signed int *v37; // esi
	int v38; // eax
	int16_t v39; // bx
	signed int v40; // ecx
	int v41; // edx
	Bit32s* v42; // edx
	x_DWORD *v43; // edi
	signed int *v44; // esi
	int v45; // eax
	int16_t v46; // bx
	signed int v47; // ecx
	int v48; // edx
	int v49; // edx
	int v50; // esi
	//int v51; // esi
	signed int *v52; // esi
	x_DWORD *v53; // edi
	int v54; // eax
	signed int v55; // ecx
	int v56; // edx
	x_DWORD *v57; // edi
	signed int *v58; // esi
	int v59; // eax
	int16_t v60; // bx
	signed int v61; // ecx
	int v62; // edx
	x_DWORD *v63; // edi
	signed int *v64; // esi
	int v65; // eax
	int16_t v66; // bx
	signed int v67; // ecx
	int v68; // edx
	int v69; // esi
	int v70; // eax
	x_DWORD *v71; // edi
	signed int *v72; // esi
	int v73; // eax
	signed int v74; // ecx
	int v75; // edx
	x_DWORD *v76; // edi
	signed int *v77; // esi
	int v78; // eax
	int16_t v79; // bx
	signed int v80; // ecx
	int v81; // edx
	int v82; // edx
	int v83; // ecx
	int v84; // [esp+0h] [ebp-10h]
	int v85; // [esp+0h] [ebp-10h]
	int v86; // [esp+0h] [ebp-10h]
	int v87; // [esp+0h] [ebp-10h]
	int v88; // [esp+4h] [ebp-Ch]
	int v89; // [esp+4h] [ebp-Ch]
	int v90; // [esp+4h] [ebp-Ch]
	int v91; // [esp+4h] [ebp-Ch]
	int v92; // [esp+8h] [ebp-8h]
	int v93; // [esp+8h] [ebp-8h]
	int v94; // [esp+8h] [ebp-8h]
	int v95; // [esp+8h] [ebp-8h]
	int v96; // [esp+8h] [ebp-8h]
	int v97; // [esp+8h] [ebp-8h]
	int v98; // [esp+8h] [ebp-8h]
	int v99; // [esp+8h] [ebp-8h]
	int v100; // [esp+8h] [ebp-8h]
	int16_t v101; // [esp+Ch] [ebp-4h]
	int16_t v102; // [esp+Ch] [ebp-4h]
	int16_t v103; // [esp+Ch] [ebp-4h]
	int16_t v104; // [esp+Ch] [ebp-4h]
	int16_t v105; // [esp+Ch] [ebp-4h]
	int16_t v106; // [esp+Ch] [ebp-4h]
	int16_t v107; // [esp+Ch] [ebp-4h]
	int16_t v108; // [esp+Ch] [ebp-4h]

	v1 = a1 & 0x7FF;
	str_F2C20ar.dword0x1e = v1 >> 8;
	switch (v1 >> 8)
	{
	case 0:
		//str_F2C20ar.dword0x27 = x_DWORD_DB750[v1];
		//str_F2C20ar.dword0x27 = *(Bit32s*)x_DWORD_DB750ar_ret(v1 * 4);//copy to other //db750
		str_F2C20ar.dword0x27= x_DWORD_DB750[v1];
		//str_F2C20ar.dword0x1b = (int)off_DBF50[v1];
		//str_F2C20ar.dword0x1b = *(Bit32s*)x_DWORD_DB750ar_ret(0x800+v1 * 4);//copy to other//db750
		str_F2C20ar.dword0x1b = x_DWORD_DB750[0x200+v1];

		v88 = x_DWORD_DE560_ScreenWidth;
		v92 = (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x1f = (str_F2C20ar.dword0x27 << 8) / (str_F2C20ar.dword0x1b >> 8);
		v101 = (str_F2C20ar.dword0x27 << 8) / (str_F2C20ar.dword0x1b >> 8);
		v2 = (x_DWORD*)unk_F0E20x;
		v3 = (signed int *)(x_DWORD_E9C38_smalltit + 59360);
		//v3x = &str_E9C38_smalltit_59360;
		v4 = 0;
		v5 = 0;
		v6 = 1;
		v7 = 0;
		do
		{
			v2[1] = v4;
			v2[2] = v7;
			v8 = __CFADD__(v101, v5);
			v5 += v101;
			if (v8)
			{
				v4 += v88;
				++v7;
				*v3 = v6;
				++v3;
			}
			v2 += 3;
			++v4;
			++v6;
			--v92;
		} while (v92);
		str_F2C20ar.dword0x1d = v7;
		str_F2C20ar.dword0x21 = -v7;
		str_F2C20ar.dword0x25 = (uint16_t)x_DWORD_DE568;
		str_F2C20ar.dword0x26 = (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x1c = (uint16_t)x_DWORD_DE568 + (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x1a = (Bit32s*)(&x_DWORD_E9C38_smalltit[59360] + 4 * v7 - 4);
		v9 = x_DWORD_DE560_ScreenWidth;
		str_F2C20ar.dword0x19 = (uint16_t)x_DWORD_DE568 - v7;
		goto LABEL_66;
	case 1:
		v10 = x_DWORD_DB750[v1];
		v11 = x_DWORD_DB750[0x200+v1];

		str_F2C20ar.dword0x27 = v10;
		str_F2C20ar.dword0x1b = (int)v11;
		v84 = x_DWORD_DE560_ScreenWidth;
		v93 = (uint16_t)x_DWORD_DE568;
		if (v1 == 256)
		{
			str_F2C20ar.dword0x1f = 0x10000;
			v12 = (x_DWORD*)unk_F0E20x;
			v13 = (signed int *)&x_DWORD_E9C38_smalltit[59360];
			v14 = 0;
			v15 = 1;
			v16 = 0;
			do
			{
				v12[1] = v14;
				v12[2] = v16++;
				*v13 = v15;
				++v13;
				v12 += 3;
				v14 += v84 + 1;
				++v15;
				--v93;
			} while (v93);
			str_F2C20ar.dword0x1d = (uint16_t)x_DWORD_DE568;
			str_F2C20ar.dword0x21 = -(uint16_t)x_DWORD_DE568;
		}
		else
		{
			str_F2C20ar.dword0x1f = (str_F2C20ar.dword0x1b << 8) / (v10 >> 8);
			v102 = (str_F2C20ar.dword0x1b << 8) / (v10 >> 8);
			v17 = (x_DWORD*)unk_F0E20x;
			v18 = (signed int *)(x_DWORD_E9C38_smalltit + 59360);
			v19 = 0;
			v20 = 0;
			v21 = 1;
			v22 = 0;
			do
			{
				v17[1] = v19;
				v17[2] = v22;
				v8 = __CFADD__(v102, v20);
				v20 += v102;
				if (v8)
				{
					v19++;
					v22++;
					*v18 = v21;
					v18++;
				}
				v17 += 3;
				v19 += v84;
				v21++;
				v93--;
			} while (v93);
			str_F2C20ar.dword0x1d = v22;
			str_F2C20ar.dword0x21 = -v22;
		}
		str_F2C20ar.dword0x25 = (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x26 = (uint16_t)x_DWORD_DE568;
		str_F2C20ar.dword0x1c = (uint16_t)x_DWORD_DE568 + (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x1a = (Bit32s*)(&x_DWORD_E9C38_smalltit[59360] - 4*str_F2C20ar.dword0x21 - 4);
		v9 = -1;
		str_F2C20ar.dword0x19 = (uint16_t)x_DWORD_DE564 + str_F2C20ar.dword0x21;
		goto LABEL_66;
	case 2:
		//str_F2C20ar.dword0x27 = *(Bit32s*)&x_DWORD_DAF50ar[v1*4];
		str_F2C20ar.dword0x27 = x_DWORD_DB750[v1-0x200];//copy to other
		//str_F2C20ar.dword0x1b = x_DWORD_DB750[v1];
		//str_F2C20ar.dword0x1b = *(Bit32s*)x_DWORD_DB750ar_ret(v1 * 4);//copy to other
		str_F2C20ar.dword0x1b = x_DWORD_DB750[v1];

		v85 = x_DWORD_DE560_ScreenWidth;
		v94 = (uint16_t)x_DWORD_DE568;
		str_F2C20ar.dword0x1f = (str_F2C20ar.dword0x27 << 8) / (str_F2C20ar.dword0x1b >> 8);
		v103 = (str_F2C20ar.dword0x27 << 8) / (str_F2C20ar.dword0x1b >> 8);
		v23 = (x_DWORD*)unk_F0E20x;
		v24 = (signed int *)&x_DWORD_E9C38_smalltit[59360];
		v25 = 0;
		v26 = 0;
		v27 = 1;
		v28 = 0;
		do
		{
			v23[1] = v25;
			v23[2] = v28;
			v8 = __CFADD__(v103, v26);
			v26 += v103;
			if (v8)
			{
				v25--;
				v28++;
				*v24 = v27;
				v24++;
			}
			v23 += 3;
			v25 += v85;
			v27++;
			v94--;
		} while (v94);
		str_F2C20ar.dword0x1d = v28;
		str_F2C20ar.dword0x21 = -v28;
		str_F2C20ar.dword0x25 = (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x1c = (uint16_t)x_DWORD_DE568 + (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x26 = (uint16_t)x_DWORD_DE568;
		str_F2C20ar.dword0x23 = -1;
		str_F2C20ar.dword0x19 = (uint16_t)x_DWORD_DE564 - v28;
		str_F2C20ar.dword0x1a = (Bit32s*)(&x_DWORD_E9C38_smalltit[59360] + 4 * v28 - 4);
		v95 = (uint16_t)x_DWORD_DE568 - 1;
		result = (x_DWORD*)unk_F0E20x;
		if (v95 < 0)
			return result;
		goto LABEL_68;
	case 3:
		//str_F2C20ar.dword0x27 = *(Bit32s*)&x_DWORD_DAF50ar[v1*4];
		str_F2C20ar.dword0x27 = x_DWORD_DB750[v1-0x200];//copy to other
		//str_F2C20ar.dword0x1b = x_DWORD_DB750[v1];
		//str_F2C20ar.dword0x1b = *(Bit32s*)x_DWORD_DB750ar_ret(v1 * 4);//copy to other
		str_F2C20ar.dword0x1b = x_DWORD_DB750[v1];

		v89 = x_DWORD_DE560_ScreenWidth;
		v96 = (uint16_t)x_DWORD_DE564;
		if (v1 == 768)
		{
			str_F2C20ar.dword0x1f = 0x10000;
			v31 = (signed int *)&x_DWORD_E9C38_smalltit[59360];
			v32 = (x_DWORD*)unk_F0E20x;
			v33 = 0;
			v34 = 1;
			v35 = 0;
			do
			{
				v32[1] = v33;
				v32[2] = v35++;
				*v31 = v34;
				v31++;
				v32 += 3;
				v33 = v89 + v33 - 1;
				v34++;
				v96--;
			} while (v96);
			str_F2C20ar.dword0x1d = (uint16_t)x_DWORD_DE564;
			str_F2C20ar.dword0x21 = -(uint16_t)x_DWORD_DE564;
		}
		else
		{
			str_F2C20ar.dword0x1f = (str_F2C20ar.dword0x1b << 8) / (str_F2C20ar.dword0x27 >> 8);
			v104 = (str_F2C20ar.dword0x1b << 8) / (str_F2C20ar.dword0x27 >> 8);
			v36 = (x_DWORD*)unk_F0E20x;
			v37 = (signed int *)(x_DWORD_E9C38_smalltit + 59360);
			v38 = 0;
			v39 = 0;
			v40 = 1;
			v41 = 0;
			do
			{
				v36[1] = v38;
				v36[2] = v41;
				v8 = __CFADD__(v104, v39);
				v39 += v104;
				if (v8)
				{
					v38 += v89;
					v41++;
					*v37 = v40;
					v37++;
				}
				v36 += 3;
				v38--;
				v40++;
				v96--;
			} while (v96);
			str_F2C20ar.dword0x1d = v41;
			str_F2C20ar.dword0x21 = -v41;
		}
		str_F2C20ar.dword0x25 = (uint16_t)x_DWORD_DE568;
		str_F2C20ar.dword0x26 = (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x1c = (uint16_t)x_DWORD_DE568 + (uint16_t)x_DWORD_DE564;
		v42 = (Bit32s*)(&x_DWORD_E9C38_smalltit[59360] - 4*str_F2C20ar.dword0x21 - 4);
		str_F2C20ar.dword0x19 = (uint16_t)x_DWORD_DE568 + str_F2C20ar.dword0x21;
		v9 = -x_DWORD_DE560_ScreenWidth;
		goto LABEL_65;
	case 4:
		//str_F2C20ar.dword0x27 = *(Bit32s*)&x_DWORD_DA750ar[v1*4];
		str_F2C20ar.dword0x27 = x_DWORD_DB750[v1-0x400];//copy to other
		//str_F2C20ar.dword0x1b = *(Bit32s*)&x_DWORD_DAF50ar[v1*4];
		str_F2C20ar.dword0x1b = x_DWORD_DB750[v1-0x200];//copy to other

		v90 = -x_DWORD_DE560_ScreenWidth;
		v97 = (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x1f = (str_F2C20ar.dword0x27 << 8) / (str_F2C20ar.dword0x1b >> 8);
		v105 = (str_F2C20ar.dword0x27 << 8) / (str_F2C20ar.dword0x1b >> 8);
		v43 = (x_DWORD*)unk_F0E20x;
		v44 = (signed int *)&x_DWORD_E9C38_smalltit[59360];
		v45 = 0;
		v46 = 0;
		v47 = 1;
		v48 = 0;
		do
		{
			v43[1] = v45;
			v43[2] = v48;
			v8 = __CFADD__(v105, v46);
			v46 += v105;
			if (v8)
			{
				v45 += v90;
				v48++;
				*v44 = v47;
				v44++;
			}
			v43 += 3;
			v45--;
			v47++;
			v97--;
		} while (v97);
		str_F2C20ar.dword0x1d = v48;
		v49 = -v48;
		str_F2C20ar.dword0x21 = v49;
		v50 = (uint16_t)x_DWORD_DE568 + v49;
		str_F2C20ar.dword0x25 = (uint16_t)x_DWORD_DE568;
		str_F2C20ar.dword0x26 = (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x1c = (uint16_t)x_DWORD_DE568 + (uint16_t)x_DWORD_DE564;
		v42 = (Bit32s*)(&x_DWORD_E9C38_smalltit[59360] - 4*v49 - 4);
		str_F2C20ar.dword0x19 = v50;
		v9 = -x_DWORD_DE560_ScreenWidth;
		goto LABEL_65;
	case 5:
		//str_F2C20ar.dword0x1b = *(Bit32s*)&x_DWORD_DAF50ar[v1*4];
		str_F2C20ar.dword0x1b = x_DWORD_DB750[v1-0x200];//copy to other
		//str_F2C20ar.dword0x27 = *(Bit32s*)&x_DWORD_DA750ar[v1 * 4];
		str_F2C20ar.dword0x27 = x_DWORD_DB750[v1-0x400];//copy to other

		v86 = -x_DWORD_DE560_ScreenWidth;
		v98 = (uint16_t)x_DWORD_DE568;
		if (v1 == 1280)
		{
			str_F2C20ar.dword0x1f = 0x10000;
			v52 = (signed int *)&x_DWORD_E9C38_smalltit[59360];
			v53 = (x_DWORD*)unk_F0E20x;
			v54 = 0;
			v55 = 1;
			v56 = 0;
			do
			{
				v53[1] = v54;
				v53[2] = v56++;
				*v52 = v55;
				++v52;
				v53 += 3;
				v54 = v86 + v54 - 1;
				++v55;
				--v98;
			} while (v98);
			str_F2C20ar.dword0x1d = (uint16_t)x_DWORD_DE568;
			str_F2C20ar.dword0x21 = -(uint16_t)x_DWORD_DE568;
		}
		else
		{
			str_F2C20ar.dword0x1f = (str_F2C20ar.dword0x1b << 8) / (str_F2C20ar.dword0x27 >> 8);
			v106 = (str_F2C20ar.dword0x1b << 8) / (str_F2C20ar.dword0x27 >> 8);
			v57 = (x_DWORD*)unk_F0E20x;
			v58 = (signed int *)(x_DWORD_E9C38_smalltit + 59360);
			v59 = 0;
			v60 = 0;
			v61 = 1;
			v62 = 0;
			do
			{
				v57[1] = v59;
				v57[2] = v62;
				v8 = __CFADD__(v106, v60);
				v60 += v106;
				if (v8)
				{
					v59--;
					v62++;
					*v58 = v61;
					v58++;
				}
				v57 += 3;
				v59 += v86;
				v61++;
				v98--;
			} while (v98);
			str_F2C20ar.dword0x1d = v62;
			str_F2C20ar.dword0x21 = -v62;
		}
		str_F2C20ar.dword0x25 = (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x26 = (uint16_t)x_DWORD_DE568;
		str_F2C20ar.dword0x1c = (uint16_t)x_DWORD_DE568 + (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x23 = 1;
		str_F2C20ar.dword0x19 = (uint16_t)x_DWORD_DE564 + str_F2C20ar.dword0x21;
		str_F2C20ar.dword0x1a = (Bit32s*)(&x_DWORD_E9C38_smalltit[59360] - 4*str_F2C20ar.dword0x21 - 4);
		v95 = (uint16_t)x_DWORD_DE568 - 1;
		result = (x_DWORD*)unk_F0E20x;
		if (v95 < 0)
			return result;
		goto LABEL_68;
	case 6:
		//str_F2C20ar.dword0x27 = *(Bit32s*)&x_DWORD_D9F50ar[v1*4];
		str_F2C20ar.dword0x27 = x_DWORD_DB750[v1-0x600];//copy to other
		//str_F2C20ar.dword0x1b = *(Bit32s*)&x_DWORD_DA750ar[v1*4];
		str_F2C20ar.dword0x1b = x_DWORD_DB750[v1-0x400];//copy to other

		v87 = -x_DWORD_DE560_ScreenWidth;
		v99 = (uint16_t)x_DWORD_DE568;
		str_F2C20ar.dword0x1f = (str_F2C20ar.dword0x27 << 8) / (str_F2C20ar.dword0x1b >> 8);
		v107 = (str_F2C20ar.dword0x27 << 8) / (str_F2C20ar.dword0x1b >> 8);
		v63 = (x_DWORD*)unk_F0E20x;
		v64 = (signed int *)&x_DWORD_E9C38_smalltit[59360];
		v65 = 0;
		v66 = 0;
		v67 = 1;
		v68 = 0;
		do
		{
			v63[1] = v65;
			v63[2] = v68;
			v8 = __CFADD__(v107, v66);
			v66 += v107;
			if (v8)
			{
				v65++;
				v68++;
				*v64 = v67;
				v64++;
			}
			v63 += 3;
			v65 += v87;
			v67++;
			v99--;
		} while (v99);
		str_F2C20ar.dword0x1d = v68;
		str_F2C20ar.dword0x21 = -v68;
		str_F2C20ar.dword0x19 = (uint16_t)x_DWORD_DE564 - v68;
		str_F2C20ar.dword0x25 = (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x1c = (uint16_t)x_DWORD_DE568 + (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x26 = (uint16_t)x_DWORD_DE568;
		str_F2C20ar.dword0x23 = 1;
		str_F2C20ar.dword0x1a = (Bit32s*)(&x_DWORD_E9C38_smalltit[59360] + 4*v68 - 4);
		v95 = (uint16_t)x_DWORD_DE568 - 1;
		result = (x_DWORD*)unk_F0E20x;
		if (v95 < 0)
			return result;
		goto LABEL_68;
	case 7:

		//v69 = *(Bit32s*)&x_DWORD_D9F50ar[v1*4];
		v69 = x_DWORD_DB750[v1-0x600];//copy to other
		//v70 = *(Bit32s*)&x_DWORD_DA750ar[v1*4];
		v70 = x_DWORD_DB750[v1-0x400];//copy to other

		str_F2C20ar.dword0x27 = v69;
		str_F2C20ar.dword0x1b = v70;
		v91 = -x_DWORD_DE560_ScreenWidth;
		v100 = (uint16_t)x_DWORD_DE564;
		if (v1 == 1792)
		{
			v71 = (x_DWORD*)unk_F0E20x;
			v72 = (signed int *)&x_DWORD_E9C38_smalltit[59360];
			str_F2C20ar.dword0x1f = 0x10000;
			v73 = 0;
			v74 = 1;
			v75 = 0;
			do
			{
				v71[1] = v73;
				v71[2] = v75++;
				v72[0] = v74;
				v72++;
				v71 += 3;
				v73 += v91 + 1;
				v74++;
				v100--;
			} while (v100);
			str_F2C20ar.dword0x1d = (uint16_t)x_DWORD_DE564;
			str_F2C20ar.dword0x21 = -(uint16_t)x_DWORD_DE564;
		}
		else
		{
			str_F2C20ar.dword0x1f = (str_F2C20ar.dword0x1b << 8) / (v69 >> 8);
			v108 = (str_F2C20ar.dword0x1b << 8) / (v69 >> 8);
			v76 = (x_DWORD*)unk_F0E20x;
			v77 = (signed int *)(x_DWORD_E9C38_smalltit + 59360);
			v78 = 0;
			v79 = 0;
			v80 = 1;
			v81 = 0;
			do
			{
				v76[1] = v78;
				v76[2] = v81;
				v8 = __CFADD__(v108, v79);
				v79 += v108;
				if (v8)
				{
					v78 += v91;
					v81++;
					*v77 = v80;
					v77++;
				}
				v76 += 3;
				v78++;
				v80++;
				v100--;
			} while (v100);
			str_F2C20ar.dword0x1d = v81;
			str_F2C20ar.dword0x21 = -v81;
		}
		str_F2C20ar.dword0x25 = (uint16_t)x_DWORD_DE568;
		str_F2C20ar.dword0x26 = (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x1c = (uint16_t)x_DWORD_DE568 + (uint16_t)x_DWORD_DE564;
		str_F2C20ar.dword0x19 = (uint16_t)x_DWORD_DE568 + str_F2C20ar.dword0x21;
		v42 = (Bit32s*)(&x_DWORD_E9C38_smalltit[59360] - 4*str_F2C20ar.dword0x21 - 4);
		v9 = x_DWORD_DE560_ScreenWidth;
	LABEL_65:
		str_F2C20ar.dword0x1a = v42;
	LABEL_66:
		str_F2C20ar.dword0x23 = v9;
		break;
	default:
		break;
	}
	v95 = str_F2C20ar.dword0x26 - 1;
	for (result = (x_DWORD*)unk_F0E20x; v95 >= 0; --v95)
	{
	LABEL_68:
		v82 = result[1];
		v83 = *(result - 2);
		result += 3;
		*(result - 3) = v82 - v83;
	}
	return result;
}

Bit32s* x_DWORD_DB350_ret(Bit32u adress) {
	if(adress>=0x100) return &x_DWORD_DB750[adress-0x100];
	allert_error();
	//return *(Bit32s*)&x_BYTE_DB080[0x2D0+ adress*4]//&x_DWORD_DB350[adress];
}



typedef struct {//lenght 44
	Bit32s dword0_rot;
	Bit32s dword4;//?
	Bit32s dword8;//?
	Bit32s dword12;//?
	Bit32s dword16;//triangleB
	Bit32s dword20;//triangleB
	Bit32s dword24;//triangleA
	Bit32s dword28;//triangleA
	Bit32s dword32;//triangleA and triangleB
	Bit32s word36;//? billboard
	Bit16s word38;
	Bit8s byte40;
	Bit8u byte41;//texture index
	Bit8s byte42;
	Bit8s byte43;
}
type_E9C38_smalltit;

type_E9C38_smalltit str_E9C38_smalltit[21 * 40];

int debugcounter_21d080 = 0;
//----- (0003C080) --------------------------------------------------------
void sub_3C080_draw_terrain_and_particles(/*int a1, int a2,*/ int16_t a3, int16_t a4, int16_t a5, signed int a6, int a7, int16_t a8, int a9)//21d080
{
	int v9; // eax
	int v10; // edx
	int v11; // ecx
	int v12; // edx
	int v13; // edi
	char v14; // dh
	//Bit8u* v15; // eax
	int v15x;
	char v16; // dl
	char v17; // dl
	//x_DWORD *v18; // eax
	int v18x;
	char v19; // dh
	int v20; // ebx
	int v21; // ecx
	char v22; // ch
	int v23; // eax
	//int v24; // edx
	Bit8u* v25x; // edi
	//Bit32u* v25y; // edi
	int v25z;
	uint16_t v26; // dx
	int v27; // ebx
	int v28; // eax
	int16_t v29; // si
	int v30; // edx
	int16_t v31; // cx
	int v32; // eax
	int v33; // ecx
	signed int v34; // esi
	int v35; // ebx
	uint16_t v36; // dx
	int v37; // eax
	int16_t v38; // ax
	int v39; // eax
	int v40; // edi
	//Bit8u* v41; // edx
	int v41x; // edx
	uint16_t v42; // bx
	//Bit8u* v43; // edx
	int v43x;
	Bit8u* v44; // eax
	char v45; // bh
	signed int v46; // edx
	//Bit8u* v47; // eax
	int v47x;
	int v48; // esi
	int v49; // ecx
	int v50; // ecx
	int v51; // ebx
	int v52; // ecx
	int v53; // ebx
	signed int v54; // esi
	signed int v55; // esi
	//Bit8u* v56; // eax
	int v56x;
	//int v56b; // eax
	//Bit8u* v57; // esi
	int v57x;
	char v58; // ah
	//Bit8u* j; // ebx
	int jx;
	char v60; // dl
	char v61; // dh
	char v62; // ch
	char v63; // ah
	char v64; // dl
	char v65; // dh
	char v66; // ch
	char v67; // dl
	//Bit8u* v68; // ebx
	int v68x;
	int v69; // eax
	int *v70; // edx
	char v71; // dl
	char v72; // dh
	char v73; // ch
	char v74; // ah
	char v75; // dl
	char v76; // dh
	char v77; // ch
	char v78; // dl
	char v79; // dh
	//Bit8u* v80; // ebx
	int v80x;
	int *v81; // edx
	//Bit8u* v82; // edi
	//Bit8u* v83; // ebx
	int v82x;
	int v83x;
	char v84; // dl
	char v85; // cl
	char v86; // dh
	char v87; // al
	char v88; // dl
	char v89; // dh
	int v90; // eax
	//Bit8u* v91; // ebx
	int v91x; // ebx
	char v92; // cl
	char v93; // dl
	//Bit8u* v94; // ebx
	int v94x;
	int *v95; // edx
	char v96; // al
	char v97; // dl
	char v98; // dh
	char v99; // ah
	char v100; // dl
	char v101; // dh
	char v102; // ch
	int v103; // eax
	//Bit8u* v104; // ebx
	int v104x;
	char v105; // dl
	char v106; // dh
	//Bit8u* v107; // ebx
	int v107x;
	int *v108; // edx
	signed int v109; // esi
	int v110; // ebx
	uint16_t v111; // dx
	int16_t v112; // ax
	int v113; // eax
	//x_DWORD *v114; // ecx
	int v114x;
	signed int v115; // edx
	int v116; // eax
	//Bit8u* v117; // edx
	int v117x;
	uint16_t v118; // bx
	uint8_t v119; // al
	//Bit8u* v120; // edx
	int v120x;
	Bit8u* v121; // eax
	char v122; // bh
	signed int v123; // ebx
	//Bit8u* v124; // eax
	int v124x;
	int v125; // esi
	int v126; // ecx
	int v127; // ecx
	int v128; // edx
	int v129; // ecx
	int v130; // edx
	signed int v131; // esi
	signed int v132; // esi
	//Bit8u* v133; // esi
	int v133x;
	//Bit8u* v134; // ebx
	int v134x;
	int v135; // eax
	char v136; // dl
	char v137; // ch
	char v138; // dl
	int v139; // eax
	//Bit8u* v140; // ebx
	int v140x;
	int v141; // eax
	char v142; // ch
	//Bit8u* v143; // ebx
	int v143x;
	char v144; // dl
	int v145; // eax
	int *v146; // edx
	//Bit8u* v147; // ebx
	int v147x;
	char v148; // dl
	char v149; // dl
	int v150; // eax
	//Bit8u* v151; // ebx
	int v151x;
	int v152; // eax
	char v153; // cl
	int v154; // eax
	//Bit8u* v155; // ebx
	int v155x;
	char v156; // dl
	int v157; // eax
	int *v158; // edx
	int v159; // eax
	//Bit8u* v160_smtit; // esi
	//Bit8u* v161_smtit2; // ebx
	int v160;
	int v161;
	int v162; // eax
	char v163; // dl
	char v164; // dh
	char v165; // ah
	char v166; // dl
	char v167; // dh
	int v168; // eax
	//Bit8u* v169; // ebx
	int v169x;
	char v170; // ch
	int v171; // eax
	//Bit8u* v172; // ebx
	int v172x;
	char v173; // dl
	char v174; // dh
	int *v175; // edx
	int *v176; // edx
	//Bit8u* v177; // edi
	//Bit8u* v178; // ebx
	int v177x;
	int v178x;
	char v179; // dl
	char v180; // ch
	char v181; // dh
	char v182; // ah
	char v183; // dl
	char v184; // dh
	int v185; // eax
	//Bit8u* v186; // ebx
	int v186x;
	int v187; // eax
	int v188; // eax
	char v189; // ch
	//Bit8u* v190; // ebx
	int v190x;
	char v191; // dl
	char v192; // dh
	int *v193; // edx
	char v194; // ch
	int *v195; // edx
	char v196; // ch
	int v197; // ecx
	signed int v198; // esi
	int v199; // ebx
	uint16_t v200; // di
	int16_t v201; // ax
	int v202; // eax
	int v203; // eax
	uint16_t v204; // bx
	//uint8_t *v205; // ecx
	int v205x;
	//Bit8u* v206; // edx
	int v206x;
	Bit8u* v207; // eax
	int v208; // eax
	signed int v209; // ebx
	int v210; // edx
	Bit32u v211; // eax
	int v212; // ecx
	int v213; // edx
	int v214; // ecx
	int v215; // edx
	signed int v216; // esi
	//Bit8u* v217; // esi
	//Bit8u* v218; // ebx
	int v217x, v218x;
	char v219; // dl
	char v220; // dh
	char v221; // al
	char v222; // dl
	char v223; // dh
	int v224; // eax
	//Bit8u* v225; // ebx
	int v225x;
	char v226; // cl
	//Bit8u* v227; // ebx
	int v227x;
	char v228; // dl
	char v229; // dh
	int *v230; // edx
	//Bit8u* v231; // edi
	//Bit8u* v232; // ebx
	int v231x, v232x;
	char v233; // dl
	char v234; // ch
	char v235; // dh
	char v236; // ah
	char v237; // dl
	char v238; // dh
	int v239; // eax
	//Bit8u* v240; // ebx
	int v240x;
	int v241; // eax
	char v242; // ch
	//Bit8u* v243; // ebx
	int v243x;
	char v244; // dl
	char v245; // dh
	int *v246; // edx
	int v248x[33]; // [esp+0h] [ebp-62h]//v248x[0]
	//int v249; // [esp+4h] [ebp-5Eh]//v248x[1]
	//int v250; // [esp+8h] [ebp-5Ah]//v248x[2]
	//int v251; // [esp+Ch] [ebp-56h]//v248x[3]
	//int v252; // [esp+10h] [ebp-52h]//v248x[4]
	//int v253; // [esp+18h] [ebp-4Ah]//v248x[6]
	//int v254; // [esp+1Ch] [ebp-46h]//v248x[7]
	//int v255; // [esp+20h] [ebp-42h]//v248x[8]
	//int v256; // [esp+24h] [ebp-3Eh]//v248x[9]
	//x_DWORD *v257; // [esp+28h] [ebp-3Ah]//v248x[10]
	//int v258; // [esp+30h] [ebp-32h]//v248x[12]
	//int v259; // [esp+34h] [ebp-2Eh]//v248x[13]
	//int v260; // [esp+38h] [ebp-2Ah]//v248x[14]
	//int v261; // [esp+3Ch] [ebp-26h]//v248x[15]
	//int v262; // [esp+40h] [ebp-22h]//v248x[16]
	//int v263; // [esp+48h] [ebp-1Ah]//v248x[18]
	//int v264; // [esp+4Ch] [ebp-16h]//v248x[19]
	//int v265; // [esp+50h] [ebp-12h]//v248x[20]
	//int v266; // [esp+54h] [ebp-Eh]//v248x[21]
	//int v267; // [esp+58h] [ebp-Ah]//v248x[22]
	//int v268; // [esp+60h] [ebp-2h]//v248x[24]

	//int v269; // [esp+64h] [ebp+2h]//v248x[25]
	//int v270; // [esp+68h] [ebp+6h]//v248x[26]
	//int v271; // [esp+6Ch] [ebp+Ah]//v248x[27]
	//int v272; // [esp+70h] [ebp+Eh]//v248x[28]
	//int v273; // [esp+74h] [ebp+12h]//v248x[29]
	//Bit32u v274; // [esp+78h] [ebp+16h]//v248x[30]
	//int v275; // [esp+7Ch] [ebp+1Ah]//v248x[31]
	//int v276; // [esp+80h] [ebp+1Eh]//v248x[32]

	Bit8u* v277; // [esp+84h] [ebp+22h]
	//Bit8u* v278; // [esp+88h] [ebp+26h]
	int v278x;
	uint16_t v279; // [esp+8Ch] [ebp+2Ah]
	char l; // [esp+90h] [ebp+2Eh]
	char v281; // [esp+94h] [ebp+32h]
	char v282; // [esp+98h] [ebp+36h]
	char v283; // [esp+9Ch] [ebp+3Ah]
	char k; // [esp+A0h] [ebp+3Eh]
	char v285; // [esp+A4h] [ebp+42h]
	char i; // [esp+A8h] [ebp+46h]
	char jj; // [esp+ACh] [ebp+4Ah]
	char m; // [esp+B0h] [ebp+4Eh]
	char v289; // [esp+B4h] [ebp+52h]
	char n; // [esp+B8h] [ebp+56h]
	char ii; // [esp+BCh] [ebp+5Ah]
	char kk; // [esp+C0h] [ebp+5Eh]
	char v293; // [esp+C4h] [ebp+62h]

	int a1;
	int a2;


	x_BYTE_F2CC7 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.shadows_0x218B;//21d080

	isNotDayLevel = D41A0_BYTESTR_0.str_2FECE.byte_level_type != MC2LevelType::Day;

	str_F2C20ar.dword0x10 = (signed int)(uint16_t)x_DWORD_DE568 >> 1;
	x_WORD_F2CC4 = a3;
	x_WORD_F2CC0 = a5 & 0x7FF;
	x_WORD_F2CC2 = a4;
	v9 = (a5 & 0x7FF) + 256;
	str_F2C20ar.dword0x20 = a6;
	v10 = x_DWORD_DB750[0x100+v9];
	str_F2C20ar.dword0x24 = x_DWORD_D4324 + ((signed int)(uint16_t)x_DWORD_DE564 >> 1);
	str_F2C20ar.dword0x0f = v10;
	//v11 = x_DWORD_DB350[v9];
	v11=*x_DWORD_DB350_ret(v9);
	v12 = ((((a5 & 0x7FF) + 256) & 0x1FF) - 256) & 0x7FF;
	v248x[32] = (v9 >> 9) & 3;
	v248x[30] = x_DWORD_DB750[0x200+v12];
	str_F2C20ar.dword0x17 = v11;
	v13 = x_DWORD_DB750[v12];
	sub_3B560_set_billboards(-a8 & 0x7FF);//21d1aa
	str_F2C20ar.dword0x18 = 7
		* sub_7277A_radix_3d(
		(uint16_t)x_DWORD_DE564 * (uint16_t)x_DWORD_DE564
			+ (uint16_t)x_DWORD_DE568 * (uint16_t)x_DWORD_DE568)
		* a9 >> 11;
	v277 = unk_D4328x + 10 * v248x[32];
	//switch ((uint8_t)a4)
	switch ((uint8_t)v248x[32])//fixed? //rotations
	{
	case 0u:
		a2 = (uint8_t)a4 - 256;
		a1 = -(uint8_t)a3 - 4864;
		break;
	case 1u:
		a1 = -(uint8_t)a4 - 4864;
		a2 = -(uint8_t)a3;
		break;
	case 2u:
		a1 = (uint8_t)a3 - 4864;
		a2 = -(uint8_t)a4;
		break;
	case 3u:
		a1 = (uint8_t)a4 - 4864;
		a2 = (uint8_t)a3 - 256;
		break;
	default:
		break;
	}
	v14 = 40;//21d231
	//v15 = str_E9C38_smalltit;
	v15x = 0;
	do//filling first pointer of x_DWORD_E9C38_smalltit(3f52a4)//prepare billboards
	{
		v248x[29] = a1 * v13 >> 16;
		v16 = 21;
		v248x[28] = a1 * (signed int)v248x[30] >> 16;
		while (v16)
		{
			//*(x_DWORD *)v15 = v248x[28];
			str_E9C38_smalltit[v15x].dword0_rot= v248x[28];
			//*(x_DWORD *)(v15 + 12) = v248x[29];
			str_E9C38_smalltit[v15x].dword12 = v248x[29];
			if (a1 < 0)
				//*(x_WORD *)(v15 + 38) = 0;
				str_E9C38_smalltit[v15x].word38 = 0;
			else
				//*(x_WORD *)(v15 + 38) = 4;
				str_E9C38_smalltit[v15x].word38 = 4;
			//v15 += 1760;
			v15x += 40;
			v16--;
		}
		//v15 -= 36916;
		v15x -= 839;
		a1 += 256;
		v14--;
	} while (v14);
	v17 = 21;//21d29c not drawing
	//v18 = (x_DWORD *)str_E9C38_smalltit;
	v18x = 0;
	while (v17)
	{
		v248x[27] = a2 * v13 >> 16;
		v19 = 40;
		v20 = a2 * (signed int)v248x[30] >> 16;
		while (v19)
		{
			//*v18 -= v248x[27];
			str_E9C38_smalltit[v18x].dword0_rot -= v248x[27];
			//v21 = v18[3];
			//v21 = str_E9C38_smalltit[v18x].dword12;
			//v18 += 11;			
			//*(v18 - 8) = v20 + v21;
			str_E9C38_smalltit[v18x].dword12 += v20;// +v21;
			v18x++;
			v19--;
		}
		a2 += 256;
		v17--;
	}
	str_F2C20ar.dword0x15 = 26214400;//21d2df not drawing
	//v278 = str_E9C38_smalltit;
	v278x = 0;
	str_F2C20ar.dword0x12 = 8912896;
	v22 = *v277;
	str_F2C20ar.dword0x22 = a7 * (uint16_t)x_DWORD_DE564 >> 8;
	LOBYTE(v279) = v22 + HIBYTE(a3);
	HIBYTE(v279) = v277[1] + HIBYTE(a4);
	v23 = a8 & 0x7FF;
	//v24 = x_DWORD_DB750[v23];
	//v25y = 14745600;
	str_F2C20ar.dword0x11 = (int)x_DWORD_DB750[0x200+v23];
	str_F2C20ar.dword0x16 = 23658496;
	str_F2C20ar.dword0x0d = x_DWORD_DB750[v23];
	//LOBYTE(v24) = x_D41A0_BYTEARRAY_0[8588];
	str_F2C20ar.dword0x13 = 14745600;
	if (!D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.sky_0x218C || x_BYTE_D41B6)
	{
		v26 = x_DWORD_DE564;
		v27 = x_DWORD_DE560_ScreenWidth - x_DWORD_DE564;
		v28 = (v26 - (__CFSHL__((signed int)v26 >> 31, 2) + 4 * ((signed int)v26 >> 31))) >> 2;
		v29 = x_DWORD_DE568;
		v25x = x_DWORD_DE558;
		v30 = (v26 - (__CFSHL__((signed int)v26 >> 31, 2) + 4 * ((signed int)v26 >> 31))) >> 2;
		LOBYTE(v28) = x_WORD_D4B7C;
		HIBYTE(v28) = x_WORD_D4B7C;
		v31 = v28;
		v32 = v28 << 16;
		LOWORD(v32) = v31;
		do
		{
			memset32(v25x, v32, v30*4);
			v25x += 4 * v30 + v27;
			v29--;
		} while (v29);
	}
	else
	{
		sub_40950_draw_sky(a8);
	}
	if (x_BYTE_D41B6)//21d3e3 cleaned screen
	{
		for (i = 21; ; i--)
		{
			if (!i)
			{
				v46 = 840;
				//v47 = str_E9C38_smalltit;
				v47x = 0;
				while (v46)
				{
					v48 = ((str_E9C38_smalltit[v47x].dword16 * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * str_E9C38_smalltit[v47x].dword20) >> 16) + str_F2C20ar.dword0x24;
					v248x[25] = ((str_E9C38_smalltit[v47x].dword16 * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * str_E9C38_smalltit[v47x].dword28) >> 16) + str_F2C20ar.dword0x24;
					v49 = str_E9C38_smalltit[v47x].dword16 * str_F2C20ar.dword0x0d;
					v248x[24] = str_F2C20ar.dword0x10 - ((v49 + str_F2C20ar.dword0x11 * str_E9C38_smalltit[v47x].dword20) >> 16);
					v50 = str_F2C20ar.dword0x10 - ((v49 + str_F2C20ar.dword0x11 * str_E9C38_smalltit[v47x].dword28) >> 16);
					str_E9C38_smalltit[v47x].dword16 = v48;
					v51 = v50;
					v52 = v248x[24];
					str_E9C38_smalltit[v47x].dword28 = v51;
					str_E9C38_smalltit[v47x].dword20 = v52;
					v53 = str_E9C38_smalltit[v47x].dword16;
					str_E9C38_smalltit[v47x].dword24 = v248x[25];
					if (v53 >= 0)
					{
						if ((signed int)(uint16_t)x_DWORD_DE564 <= str_E9C38_smalltit[v47x].dword16)
							str_E9C38_smalltit[v47x].word38 |= 0x10u;
					}
					else
					{
						str_E9C38_smalltit[v47x].word38 |= 8u;
					}
					v54 = str_E9C38_smalltit[v47x].dword20;
					if (v54 >= 0)
					{
						if ((uint16_t)x_DWORD_DE568 <= v54)
							str_E9C38_smalltit[v47x].word38 |= 0x40u;
					}
					else
					{
						str_E9C38_smalltit[v47x].word38 |= 0x20u;
					}
					if (str_E9C38_smalltit[v47x].dword24 >= 0)
					{
						if ((signed int)(uint16_t)x_DWORD_DE564 <= str_E9C38_smalltit[v47x].dword24)
							str_E9C38_smalltit[v47x].word38 |= 0x200u;
					}
					else
					{
						str_E9C38_smalltit[v47x].word38 |= 0x100u;
					}
					v55 = str_E9C38_smalltit[v47x].dword28;
					if (v55 >= 0)
					{
						if ((uint16_t)x_DWORD_DE568 <= v55)
							str_E9C38_smalltit[v47x].word38 |= 0x800u;
					}
					else
					{
						str_E9C38_smalltit[v47x].word38 |= 0x400u;
					}
					//v47 += 44;
					v47x++;
					v46--;
				}
				//LOBYTE(v56b) = 20;
				//v57 = &str_E9C38_smalltit[35200];
				v57x = 800;
				v281 = 20;
				do
				{
					v58 = 39;
					//for (j = v57; ; j = (v80 + 44))
					for (jx = v57x; ; jx = v80x+1)
					{
						v293 = v58;
						if (!v58)
							break;
						//v248x[18] = *(x_DWORD *)(j + 24);
						//v248x[19] = *(x_DWORD *)(j + 28);
						//v248x[22] = *(x_DWORD *)(j + 32);
						v248x[18] = str_E9C38_smalltit[jx].dword24;
						v248x[19] = str_E9C38_smalltit[jx].dword28;
						v248x[22] = str_E9C38_smalltit[jx].dword32;
						//j += 44;
						//v248x[22] = v56b;
						//v60 = *(x_BYTE *)(j - 6);
						//v61 = *(x_BYTE *)(j - 6);
						v60 = str_E9C38_smalltit[jx].word38;
						v61 = str_E9C38_smalltit[jx].word38;
						jx++;
						if (str_E9C38_smalltit[jx].word38 & 4)
							break;
						v248x[12] = str_E9C38_smalltit[jx].dword24;
						v248x[13] = str_E9C38_smalltit[jx].dword28;
						v248x[16] = str_E9C38_smalltit[jx].dword32;
						v62 = str_E9C38_smalltit[jx].word38;
						//v248x[6] = *(x_DWORD *)(j - 1736);
						//v248x[7] = *(x_DWORD *)(j - 1732);
						//v248x[10] = (int)*(x_DWORD **)(j - 1728);
						v248x[6] = str_E9C38_smalltit[jx-40].dword24;
						v248x[7] = str_E9C38_smalltit[jx-40].dword28;
						//v248x[10] = (int)*(x_DWORD*)str_E9C38_smalltit[jx-40].dword32;
						v248x[10] = str_E9C38_smalltit[jx - 40].dword32;
						//v63 = *(x_BYTE *)(j - 1722);
						v63 = str_E9C38_smalltit[jx - 40].word38;
						v64 = v63 | v62 | v60;
						v65 = v63 & v62 & v61;
						//v248x[0] = *(x_DWORD *)(j - 1780);
						//v248x[1] = *(x_DWORD *)(j - 1776);
						//v248x[4] = *(x_DWORD *)(j - 1772);
						v248x[0] = str_E9C38_smalltit[jx-41].dword24;
						v248x[1] = str_E9C38_smalltit[jx-41].dword28;
						v248x[4] = str_E9C38_smalltit[jx-41].dword32;
						//v66 = *(x_BYTE *)(j - 1766);
						v66 = str_E9C38_smalltit[jx - 41].word38;
						v67 = v66 | v64;
						//v68 = (Bit8u*)(j - 1804 + 1760);
						v68x = jx - 1;
						if ((v66 & v65 & 0x80u) == 0)
						{
							//if (v68[39] & 0x10)
							if (str_E9C38_smalltit[v68x].word38 & 0x1000)
							{
								x_BYTE_E126D = 7;
								x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
							}
							else
							{
								x_BYTE_E126D = 5;
							}
							if (!(v67 & 2))
							{
								v69 = 0;
								if (!(v69 & 0xF00))
								{
									//LOBYTE(v69) = v68[42];
									LOBYTE(v69) = str_E9C38_smalltit[v68x].byte42;
									v70 = (int *)((char *)unk_D4350 + 32 * v69);
									v248x[20] = v70[0];
									v248x[21] = v70[1];
									v248x[14] = v70[2];
									v248x[15] = v70[3];
									v248x[8] = v70[4];
									v248x[9] = v70[5];
									v248x[2] = v70[6];
									v248x[3] = v70[7];
									// FIXME: types
									// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[1];
									x_BYTE_E126D = 5;
									//if (v68[38] & 1)
									if(str_E9C38_smalltit[v68x].word38 & 1)
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[12]);
										sub_B6253_draw_triangle(&v248x[0], &v248x[6], &v248x[12]);
									}
									else
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[12]);
										sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[6]);
									}
								}
							}
						}
						//v248x[18] = *(x_DWORD *)(v68 + 16);
						//v248x[19] = *(x_DWORD *)(v68 + 20);
						//v248x[22] = *(x_DWORD *)(v68 + 32);
						//j = &v68[44];
						v248x[18] = str_E9C38_smalltit[v68x].dword16;
						v248x[19] = str_E9C38_smalltit[v68x].dword20;
						v248x[22] = str_E9C38_smalltit[v68x].dword32;
						jx = v68x+1;
						//v248x[22] = v56b;
						//v71 = *(x_BYTE *)(j - 6);
						//v72 = *(x_BYTE *)(j - 6);
						v71 = str_E9C38_smalltit[jx - 1].word38;
						v72 = str_E9C38_smalltit[jx - 1].word38;
						//if (*(x_BYTE *)(j + 38) & 4)
						if (str_E9C38_smalltit[jx].word38 & 4)
							break;
						//v248x[12] = *(x_DWORD *)(j + 16);
						//v248x[13] = *(x_DWORD *)(j + 20);
						//v248x[16] = *(x_DWORD *)(j + 32);
						v248x[12] = str_E9C38_smalltit[jx].dword16;
						v248x[13] = str_E9C38_smalltit[jx].dword20;
						v248x[16] = str_E9C38_smalltit[jx].dword32;
						v73 = str_E9C38_smalltit[jx].word38;
						//v248x[6] = *(x_DWORD *)(j - 1744);
						//v248x[7] = *(x_DWORD *)(j - 1740);
						//v248x[10] = (int)*(x_DWORD **)(j - 1728);
						v248x[6] = str_E9C38_smalltit[jx-40].dword16;
						v248x[7] = str_E9C38_smalltit[jx - 40].dword20;
						//v248x[10] = (int)*(x_DWORD*)str_E9C38_smalltit[jx - 40].dword32;
						v248x[10] = str_E9C38_smalltit[jx - 40].dword32;
						v74 = str_E9C38_smalltit[jx - 40].word38;
						v75 = v74 | v73 | v71;
						v76 = v74 & v73 & v72;
						//v248x[0] = *(x_DWORD *)(j - 1788);
						//v248x[1] = *(x_DWORD *)(j - 1784);
						//v248x[4] = *(x_DWORD *)(j - 1772);
						//v77 = *(x_BYTE *)(j - 1766);
						v248x[0] = str_E9C38_smalltit[jx - 41].dword16;
						v248x[1] = str_E9C38_smalltit[jx - 41].dword20;
						v248x[4] = str_E9C38_smalltit[jx - 41].dword32;
						v77 = str_E9C38_smalltit[jx - 41].word38;
						v78 = v77 | v75;
						v79 = v77 & v76;
						//v80 = (Bit8u*)(j - 1804 + 1760);
						v80x = jx - 1;
						if (v79 >= 0)
						{
							if (str_E9C38_smalltit[v80x].word38 & 0x1000)
							{
								x_BYTE_E126D = 7;
								//v56b = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
								x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
							}
							else
							{
								x_BYTE_E126D = 5;
							}
							if (!(v78 & 2) && !(v79 & 0x78))
							{
								v81 = (int *)((char *)unk_D4350 + 32 * str_E9C38_smalltit[v80x].byte42);
								v248x[20] = v81[0];
								v248x[21] = v81[1];
								v248x[14] = v81[2];
								v248x[15] = v81[3];
								v248x[8] = v81[4];
								v248x[9] = v81[5];
								v248x[2] = v81[6];
								v248x[3] = v81[7];
								// FIXME: types
								// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[str_E9C38_smalltit[v80x].byte41];
								if (str_E9C38_smalltit[v80x].word38 & 1)
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
									//v56b = (int)&v248x[0];
									sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
								}
								else
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
									//v56b = (int)&v248x[18];
									sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
								}
							}
							if (str_E9C38_smalltit[v80x].word36)
								/*LOBYTE(v56b) = */sub_3E360_draw_particles(/*v57x,*/ v80x);
						}
						v58 = v293 - 1;
					}
					if (v293)
					{
						//v82 = j - 44;
						//v83 = v57 + 1672;
						v82x = jx - 1;
						v83x = v57x - 38;
						do
						{
							//v248x[18] = *(x_DWORD *)(v83 + 24);
							//v248x[19] = *(x_DWORD *)(v83 + 28);
							//v248x[22] = *(x_DWORD *)(v83 + 32);
							//v84 = *(x_BYTE *)(v83 + 38);
							v248x[18] = str_E9C38_smalltit[v83x].dword24;
							v248x[19] = str_E9C38_smalltit[v83x].dword28;
							v248x[22] = str_E9C38_smalltit[v83x].dword32;
							v84 = str_E9C38_smalltit[v83x].word38;
							//v248x[12] = *(x_DWORD *)(v83 + 68);
							//v248x[13] = *(x_DWORD *)(v83 + 72);
							//v248x[16] = *(x_DWORD *)(v83 + 76);
							//v85 = *(x_BYTE *)(v83 + 82);
							v248x[12] = str_E9C38_smalltit[v83x+1].dword24;
							v248x[13] = str_E9C38_smalltit[v83x+1].dword28;
							v248x[16] = str_E9C38_smalltit[v83x+1].dword32;
							v85 = str_E9C38_smalltit[v83x+1].word38;
							//v248x[6] = *(x_DWORD *)(v83 - 1692);
							//v248x[7] = *(x_DWORD *)(v83 - 1688);
							v248x[6] = str_E9C38_smalltit[v83x -39].dword24;
							v248x[7] = str_E9C38_smalltit[v83x -39].dword28;
							v86 = v84;
							//v248x[10] = (int)*(x_DWORD **)(v83 - 1684);
							//v248x[10] = (int)*(x_DWORD *)str_E9C38_smalltit[v83x -39].dword32;
							v248x[10] = str_E9C38_smalltit[v83x - 39].dword32;
							//v87 = *(x_BYTE *)(v83 - 1678);
							v87 = str_E9C38_smalltit[v83x -39].word38;
							v88 = v87 | v85 | v84;
							v89 = v87 & v85 & v86;
							//v248x[0] = *(x_DWORD *)(v83 - 1736);
							//v248x[1] = *(x_DWORD *)(v83 - 1732);
							//v90 = *(x_DWORD *)(v83 - 1728);
							v248x[0] = str_E9C38_smalltit[v83x - 40].dword24;
							v248x[1] = str_E9C38_smalltit[v83x - 40].dword28;
							//v90 = (int)*(x_DWORD*)str_E9C38_smalltit[v83x - 40].dword32;
							v90 = str_E9C38_smalltit[v83x - 40].dword32;
							//v91 = v83 + 44;
							v91x = v83x + 1;
							v248x[4] = v90;
							//v92 = *(x_BYTE *)(v91 - 1766);
							v92 = str_E9C38_smalltit[v83x - 41].word38;
							v93 = v92 | v88;
							//v94 = v91 - 1804 + 1760;
							v94x = v91x+1;
							if ((v92 & v89 & 0x80u) == 0)
							{
								//if (*(x_BYTE *)(v94 + 39) & 0x10)
								if (str_E9C38_smalltit[v94x].word38 & 0x1000)
								{
									x_BYTE_E126D = 7;
									x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
								}
								else
								{
									x_BYTE_E126D = 5;
								}
								if (!(v93 & 2))
								{
									v95 = (int *)((char *)unk_D4350 + 32 * str_E9C38_smalltit[v94x].byte42);
									v248x[20] = v95[0];
									v248x[21] = v95[1];
									v248x[14] = v95[2];
									v248x[15] = v95[3];
									v248x[8] = v95[4];
									v248x[9] = v95[5];
									v248x[2] = v95[6];
									v248x[3] = v95[7];
									// FIXME: types
									// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[1];
									v96 = str_E9C38_smalltit[v94x].word38;
									x_BYTE_E126D = 5;
									if (v96 & 1)
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[12]);
										sub_B6253_draw_triangle(&v248x[0], &v248x[6], &v248x[12]);
									}
									else
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[12]);
										sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[6]);
									}
								}
							}
							//v248x[18] = *(x_DWORD *)(v94 + 16);
							//v248x[19] = *(x_DWORD *)(v94 + 20);
							//v248x[22] = *(x_DWORD *)(v94 + 32);
							//v97 = *(x_BYTE *)(v94 + 38);
							//v248x[12] = *(x_DWORD *)(v94 + 60);
							//v248x[13] = *(x_DWORD *)(v94 + 64);
							//v248x[16] = *(x_DWORD *)(v94 + 76);
							v248x[18] = str_E9C38_smalltit[v94x].dword16;
							v248x[19] = str_E9C38_smalltit[v94x].dword20;
							v248x[22] = str_E9C38_smalltit[v94x].dword32;
							v97 = str_E9C38_smalltit[v94x].word38;
							v248x[12] = str_E9C38_smalltit[v94x+1].dword16;
							v248x[13] = str_E9C38_smalltit[v94x+1].dword20;
							v248x[16] = str_E9C38_smalltit[v94x+1].dword32;
							v98 = v97;
							//v99 = *(x_BYTE *)(v94 + 82);
							v99 = str_E9C38_smalltit[v94x+1].word38;
							v100 = v99 | v97;
							v101 = v99 & v98;
							//v248x[6] = *(x_DWORD *)(v94 - 1700);
							//v248x[7] = *(x_DWORD *)(v94 - 1696);
							//v248x[10] = (int)*(x_DWORD **)(v94 - 1684);
							//v102 = *(x_BYTE *)(v94 - 1678);
							//v248x[0] = *(x_DWORD *)(v94 - 1744);
							//v103 = *(x_DWORD *)(v94 - 1740);
							//v104 = v94 + 44;
							v248x[6] = str_E9C38_smalltit[v94x -39].dword16;
							v248x[7] = str_E9C38_smalltit[v94x - 39].dword20;
							//v248x[10] = (int)*(x_DWORD *)str_E9C38_smalltit[v94x - 39].dword32;
							v248x[10] = str_E9C38_smalltit[v94x - 39].dword32;
							v102 = str_E9C38_smalltit[v94x - 39].word38;
							v248x[0] = str_E9C38_smalltit[v94x - 39].dword28;
							v103 = str_E9C38_smalltit[v94x - 39].dword24;
							v104x = v94x + 1;
							v248x[1] = v103;
							//v248x[4] = *(x_DWORD *)(v104 - 1772);
							//v105 = (*(x_BYTE*)(v104 - 1766)) | v102 | v100;
							//v106 = (*(x_BYTE*)(v104 - 1766)) & v102 & v101;
							//v107 = v104 - 1804 + 1760;
							v248x[4] = str_E9C38_smalltit[v104x - 41].dword32;
							v105 = (str_E9C38_smalltit[v104x - 41].word38 & 0xff) | v102 | v100;
							v106 = (str_E9C38_smalltit[v104x - 41].word38 & 0xff) & v102 & v101;
							v107x = v104x - 1;
							if (v106 >= 0)
							{
								if (str_E9C38_smalltit[v107x].word38 & 0x1000)
								{
									x_BYTE_E126D = 7;
									//v56b = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
									x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
								}
								else
								{
									x_BYTE_E126D = 5;
								}
								if (!(v105 & 2) && !(v106 & 0x78))
								{
									v108 = (int *)((char *)unk_D4350 + 32 * str_E9C38_smalltit[v107x].byte42);
									v248x[20] = v108[0];
									v248x[21] = v108[1];
									v248x[14] = v108[2];
									v248x[15] = v108[3];
									v248x[8] = v108[4];
									v248x[9] = v108[5];
									v248x[2] = v108[6];
									v248x[3] = v108[7];
									LOBYTE(v108) = str_E9C38_smalltit[v107x].word38;
									// FIXME: types
									// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[str_E9C38_smalltit[v107x].byte41];
									// FIXME: types
									// // if ((uint8_t)v108 & 1)
									// {
									// 	sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
									// 	//v56b = (int)&v248x[0];
									// 	sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
									// }
									// else
									// {
									// 	sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
									// 	//v56b = (int)&v248x[18];
									// 	sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
									// }
								}
								if (str_E9C38_smalltit[v107x].word36)
									/*LOBYTE(v56b) = */sub_3E360_draw_particles(/*v57x,*/ v107x);
							}
							//v83 = v107 - 44;
							v83x = v107x - 1;
						//} while (v83 >= v82);
						} while (v83x >= v82x);
					}
					//v57 -= 1760;
					v57x -= 40;
					v281--;
				} while (v281);
				return/* v56b*/;
			}
			for (k = 40; k; k--)
			{
				v33 = ((uint8_t)x_BYTE_12B4E0_shading[v279] << 8) + 128;
				//v34 = *(x_DWORD *)(v278 + 12);
				v34 = str_E9C38_smalltit[v278x].dword12;
				v35 = v34 * v34 + str_E9C38_smalltit[v278x].dword0_rot * str_E9C38_smalltit[v278x].dword0_rot;
				//*(x_WORD *)(v278 + 36) = 0;
				str_E9C38_smalltit[v278x].word36 = 0;
				if (v34 <= -256 || v35 >= str_F2C20ar.dword0x15)
				{
					str_E9C38_smalltit[v278x].word38 |= 2u;
					goto LABEL_46;
				}
				if (v34 < 128)
					v34 = 128;
				//*(x_DWORD *)(v278 + 16) = str_F2C20ar.dword0x18 * *(x_DWORD *)v278 / v34;
				str_E9C38_smalltit[v278x].dword16 = str_F2C20ar.dword0x18 * str_E9C38_smalltit[v278x].dword0_rot / v34;
				v36 = v279;
				//*(x_DWORD *)(v278 + 4) = 32 * x_BYTE_11B4E0_height[v279] - a6;
				//*(x_DWORD *)(v278 + 8) = ((uint8_t)x_BYTE_14B4E0[v36] << 15 >> 10) - a6;
				str_E9C38_smalltit[v278x].dword4 = 32 * x_BYTE_11B4E0_height[v279] - a6;
				str_E9C38_smalltit[v278x].dword8 = ((uint8_t)x_BYTE_14B4E0[v36] << 15 >> 10) - a6;
				v37 = 0;
				if (!x_BYTE_10B4E0_terraintype[v36])
				{
					v38 = 32 * D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248;
					v37 = (x_DWORD_DB750[(v38 + (HIBYTE(v279) << 7)) & 0x7FF] >> 8)
						* (x_DWORD_DB750[(((uint8_t)v279 << 7) + v38) & 0x7FF] >> 8);
					str_E9C38_smalltit[v278x].dword4 -= v37 >> 13;
					if (v33 >= 14464)
						v37 = 0;
				}
				v39 = (v33 << 8) + 8 * v37;
				if (v35 <= str_F2C20ar.dword0x13)
					goto LABEL_39;
				if (v35 < str_F2C20ar.dword0x16)
				{
					v39 = v39 * (int64_t)(str_F2C20ar.dword0x16 - v35) / str_F2C20ar.dword0x12;
				LABEL_39:
					str_E9C38_smalltit[v278x].dword32 = v39;
					goto LABEL_40;
				}
				str_E9C38_smalltit[v278x].dword32 = 0;
			LABEL_40:
				if (x_BYTE_13B4E0_angle[v279] & 8)
					str_E9C38_smalltit[v278x].word38 |= 0x80u;
				v40 = str_F2C20ar.dword0x18;
				v41x = v278x;
				str_E9C38_smalltit[v278x].dword20 = str_F2C20ar.dword0x22 + str_F2C20ar.dword0x18 * str_E9C38_smalltit[v278x].dword4 / v34;
				str_E9C38_smalltit[v278x].dword28 = str_F2C20ar.dword0x22 + v40 * str_E9C38_smalltit[v278x].dword8 / v34;
				LOBYTE(v42) = v277[2] + v279;
				HIBYTE(v42) = v277[3] + HIBYTE(v279);
				v43x = v278x;
				str_E9C38_smalltit[v278x].byte41 = x_BYTE_10B4E0_terraintype[v42];
				if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.flat_0x2199)
					str_E9C38_smalltit[v43x].word38 |= 0x1000u;
				str_E9C38_smalltit[v278x].byte43 = x_BYTE_D41D8[str_E9C38_smalltit[v278x].byte41];
				str_E9C38_smalltit[v278x].byte42 = v248x[32] + (((signed int)(uint8_t)x_BYTE_13B4E0_angle[v42] >> 2) & 0x1C);
				LOBYTE(v42) = v277[4] + v42;
				HIBYTE(v42) += v277[5];
				str_E9C38_smalltit[v278x].word36 = x_WORD_15B4E0_source[v42];
			LABEL_46:
				v44 = v277;
				str_E9C38_smalltit[v278x].word38 |= ((x_BYTE)v279 + HIBYTE(v279)) & 1;
				LOBYTE(v279) = v44[8] + v279;
				HIBYTE(v279) += v277[9];
				//v278 += 44;
				v278x++;
			}
			v45 = v277[6] + v279;
			HIBYTE(v279) += v277[7];
			LOBYTE(v279) = v45;
		}
	}
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.reflections_0x218A)//21de79 nothing changed
	{
		for (l = 21; ; l--)
		{
			if (!l)
			{
				v123 = 840;
				//v124 = str_E9C38_smalltit;
				v124x = 0;
				while (v123)
				{
					v125 = ((str_F2C20ar.dword0x11 * str_E9C38_smalltit[v124x].dword16 - str_F2C20ar.dword0x0d * str_E9C38_smalltit[v124x].dword20) >> 16) + str_F2C20ar.dword0x24;
					v248x[25] = ((str_F2C20ar.dword0x11 * str_E9C38_smalltit[v124x].dword16 - str_F2C20ar.dword0x0d * str_E9C38_smalltit[v124x].dword28) >> 16) + str_F2C20ar.dword0x24;
					v126 = str_E9C38_smalltit[v124x].dword16 * str_F2C20ar.dword0x0d;
					//v25 = (x_DWORD *)(str_F2C20ar.dword0x10 - ((v126 + str_F2C20ar.dword0x11 * *(x_DWORD *)(v124 + 20)) >> 16));
					v248x[24] = str_F2C20ar.dword0x10 - ((v126 + str_F2C20ar.dword0x11 * str_E9C38_smalltit[v124x].dword20) >> 16);
					v127 = str_F2C20ar.dword0x10 - ((v126 + str_F2C20ar.dword0x11 * str_E9C38_smalltit[v124x].dword28) >> 16);
					str_E9C38_smalltit[v124x].dword16 = v125;
					v128 = v127;
					v129 = v248x[24];
					str_E9C38_smalltit[v124x].dword28 = v128;
					str_E9C38_smalltit[v124x].dword20 = v129;
					v130 = str_E9C38_smalltit[v124x].dword16;
					str_E9C38_smalltit[v124x].dword24 = v248x[25];
					if (v130 >= 0)
					{
						if ((signed int)(uint16_t)x_DWORD_DE564 <= str_E9C38_smalltit[v124x].dword16)
							str_E9C38_smalltit[v124x].word38 |= 0x10u;
					}
					else
					{
						str_E9C38_smalltit[v124x].word38 |= 8u;
					}
					v131 = str_E9C38_smalltit[v124x].dword20;
					if (v131 >= 0)
					{
						if ((uint16_t)x_DWORD_DE568 <= v131)
							str_E9C38_smalltit[v124x].word38 |= 0x40u;
					}
					else
					{
						str_E9C38_smalltit[v124x].word38 |= 0x20u;
					}
					if (str_E9C38_smalltit[v124x].dword24 >= 0)
					{
						if ((signed int)(uint16_t)x_DWORD_DE564 <= str_E9C38_smalltit[v124x].dword24)
							str_E9C38_smalltit[v124x].word38 |= 0x200u;
					}
					else
					{
						str_E9C38_smalltit[v124x].word38 |= 0x100u;
					}
					v132 = str_E9C38_smalltit[v124x].dword28;
					if (v132 >= 0)
					{
						if ((uint16_t)x_DWORD_DE568 <= v132)
							str_E9C38_smalltit[v124x].word38 |= 0x800u;
					}
					else
					{
						str_E9C38_smalltit[v124x].word38 |= 0x400u;
					}
					//v124 += 44;
					v124x++;
					v123--;
				}
				if (a6 < 4096)
				{
					//v133 = &str_E9C38_smalltit[35200];
					v133x = 800;
					for (m = 20; m; --m)
					{
						v134x = v133x;
						for (n = 39; n; --n)
						{
							//v248x[18] = *(x_DWORD *)(v134 + 24);
							//v248x[19] = *(x_DWORD *)(v134 + 28);
							//v135 = *(x_DWORD *)(v134 + 32);
							//v134 += 44;
							v248x[18] = str_E9C38_smalltit[v134x].dword24;
							v248x[19] = str_E9C38_smalltit[v134x].dword28;
							v135 = str_E9C38_smalltit[v134x].dword32;
							v134x++;
							v248x[22] = v135;
							//v136 = *(x_BYTE *)(v134 - 6);
							//if (*(x_BYTE *)(v134 + 38) & 4)
							//	break;
							v136 = str_E9C38_smalltit[v134x-1].word38;
							if (str_E9C38_smalltit[v134x].word38 & 4)
								break;
							//v248x[12] = *(x_DWORD *)(v134 + 24);
							//v248x[13] = *(x_DWORD *)(v134 + 28);
							//v248x[16] = *(x_DWORD *)(v134 + 32);
							//v137 = *(x_BYTE *)(v134 + 38);
							v248x[12] = str_E9C38_smalltit[v134x].dword24;
							v248x[13] = str_E9C38_smalltit[v134x].dword28;
							v248x[16] = str_E9C38_smalltit[v134x].dword32;
							v137 = str_E9C38_smalltit[v134x].word38;
							//v248x[6] = *(x_DWORD *)(v134 - 1736);
							//v248x[7] = *(x_DWORD *)(v134 - 1732);
							//v248x[10] = (int)*(x_DWORD **)(v134 - 1728);
							//v138 = *(x_BYTE *)(v134 - 1722) | v137 | v136;
							//v248x[0] = *(x_DWORD *)(v134 - 1780);
							//v139 = *(x_DWORD *)(v134 - 1776);
							//v140 = v134 - 1760;
							v248x[6] = str_E9C38_smalltit[v134x-40].dword24;
							v248x[7] = str_E9C38_smalltit[v134x-40].dword28;
							//v248x[10] = (int)*(x_DWORD *)str_E9C38_smalltit[v134x-40].dword32;
							// FIXME: types
							// v248x[10] = (int)*(x_DWORD**)&str_E9C38_smalltit[v134x - 40].dword32;
							v138 = str_E9C38_smalltit[v134x-40].word38 | v137 | v136;
							v248x[0] = str_E9C38_smalltit[v134x-41].dword24;
							v139 = str_E9C38_smalltit[v134x-41].dword28;
							//v140 = v134 - 1760;
							v140x = v134x - 40;
							v248x[1] = v139;
							//v141 = *(x_DWORD *)(v140 - 12);
							v141 = str_E9C38_smalltit[v140x].dword12;
							//v140 -= 44;
							v140x--;
							v248x[4] = v141;
							//v142 = *(x_BYTE *)(v140 + 38);
							v142 = str_E9C38_smalltit[v140x].word38;
							//v143 = v140 + 1760;
							v143x = v140x + 40;
							v144 = v142 | v138;
							//if (*(x_BYTE *)(v143 + 41))
							if (str_E9C38_smalltit[v143x].byte41)
							{
								//if (*(x_BYTE *)(v143 + 39) & 0x10)
								if (str_E9C38_smalltit[v143x].word38 & 0x1000)
								{
									x_BYTE_E126D = 7;
									//v25 = v257;
									x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
								}
								else
								{
									x_BYTE_E126D = 5;
								}
								if (!(v144 & 2))
								{
									v145 = 0;
									if (!(v145 & 0xF00))
									{
										//LOBYTE(v145) = *(x_BYTE *)(v143 + 42);
										LOBYTE(v145) = str_E9C38_smalltit[v143x].byte42;
										v146 = (int *)((char *)unk_D4350 + 32 * v145);
										v248x[20] = v146[0];
										v248x[21] = v146[1];
										v248x[14] = v146[2];
										v248x[15] = v146[3];
										v248x[8] = v146[4];
										v248x[9] = v146[5];
										v248x[2] = v146[6];
										v248x[3] = v146[7];
										// FIXME: types
										// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[str_E9C38_smalltit[v143x].byte41];
										LOBYTE(v146) = str_E9C38_smalltit[v143x].word38;
										x_BYTE_E126D = 5;
										// FIXME: types
										// // if ((uint8_t)v146 & 1)
										// {
										// 	sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[12]);
										// 	sub_B6253_draw_triangle(&v248x[0], &v248x[6], &v248x[12]);
										// }
										// else
										// {
										// 	sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[12]);
										// 	sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[6]);
										// }
									}
								}
							}
							if (str_E9C38_smalltit[v143x].word36)
								sub_3FD60(v143x);
							//v134 = v143 + 44;
							v134x = v143x + 1;
						}
						if (n)
						{
							//v25y = (Bit32u*)(v134 - 44);
							v25z = v134x - 1;
							//v147 = v133 + 1672;
							v147x = v133x + 38;
							do
							{
								v248x[18] = str_E9C38_smalltit[v147x].dword24;
								v248x[19] = str_E9C38_smalltit[v147x].dword28;
								v248x[22] = str_E9C38_smalltit[v147x].dword32;
								v148 = str_E9C38_smalltit[v147x].word38;
								v248x[12] = str_E9C38_smalltit[v147x+1].dword24;
								v248x[13] = str_E9C38_smalltit[v147x+1].dword28;
								v248x[16] = str_E9C38_smalltit[v147x+1].dword32;
								v149 = str_E9C38_smalltit[v147x+1].word38 | v148;
								//v248x[6] = *(x_DWORD *)(v147 - 1692);
								//v150 = *(x_DWORD *)(v147 - 1688);
								//v151 = v147 + 44;
								v248x[6] = str_E9C38_smalltit[v147x -39].dword24;
								v150 = str_E9C38_smalltit[v147x -39].dword28;
								//v151 = v147 + 44;
								v151x = v147x + 1;
								v248x[7] = v150;
								//v152 = *(x_DWORD *)(v151 - 1728);
								//v151 -= 1760;
								v152 = str_E9C38_smalltit[v151x -40].dword32;
								v151x -= 40;
								// FIXME: types
								// v248x[10] = (int)(x_DWORD *)v152;
								v153 = str_E9C38_smalltit[v151x].word38;
								//v248x[0] = *(x_DWORD *)(v151 - 20);
								//v154 = *(x_DWORD *)(v151 - 16);
								//v151 -= 44;
								v248x[0] = str_E9C38_smalltit[v151x - 1].dword24;
								v154 = str_E9C38_smalltit[v151x - 1].dword28;
								v151x --;
								v248x[1] = v154;
								//v248x[4] = *(x_DWORD *)(v151 + 32);
								//LOBYTE(v154) = *(x_BYTE *)(v151 + 38);
								//v155 = v151 + 1760;
								v248x[4] = str_E9C38_smalltit[v151x].dword32;
								LOBYTE(v154) = str_E9C38_smalltit[v151x].word38;
								v155x = v151x + 40;
								v156 = v154 | v153 | v149;
								if (str_E9C38_smalltit[v155x].byte41)
								{
									if (str_E9C38_smalltit[v155x].word38 & 0x1000)
									{
										x_BYTE_E126D = 7;
										x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
									}
									else
									{
										x_BYTE_E126D = 5;
									}
									if (!(v156 & 2))
									{
										v157 = 0;
										if (!(v157 & 0xF00))
										{
											LOBYTE(v157) = str_E9C38_smalltit[v155x].byte42;
											v158 = (int *)((char *)unk_D4350 + 32 * v157);
											v248x[20] = v158[0];
											v248x[21] = v158[1];
											v248x[14] = v158[2];
											v248x[15] = v158[3];
											v248x[8] = v158[4];
											v248x[9] = v158[5];
											v248x[2] = v158[6];
											v248x[3] = v158[7];
											v159 = str_E9C38_smalltit[v155x].byte41;
											x_BYTE_E126D = 5;
											BYTE1(v158) = str_E9C38_smalltit[v155x].word38;
											// FIXME: types
											// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[v159];
											if (BYTE1(v158) & 1)
											{
												sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[12]);
												sub_B6253_draw_triangle(&v248x[0], &v248x[6], &v248x[12]);
											}
											else
											{
												sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[12]);
												sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[6]);
											}
										}
									}
								}
								if (str_E9C38_smalltit[v155x].word36)
									sub_3FD60(v155x);
								//v147 = v155 - 44;
								v147x = v155x - 1;
							} while (v147x >= v25z);
						}
						//v133 -= 1760;
						v133x -= 40;
					}
				}
				//v160_smtit = &str_E9C38_smalltit[35200];
				v160 = 800;
				v282 = 20;
				do
				{
					//v161_smtit2 = v160_smtit;
					v161 = v160;
					for (ii = 39; ii; --ii)
					{
						//v248x[18] = *(x_DWORD *)(v161_smtit2 + 16);
						//v248x[19] = *(x_DWORD *)(v161_smtit2 + 20);
						//v162 = *(x_DWORD *)(v161_smtit2 + 32);
						//v161_smtit2 += 44;
						v248x[18] = str_E9C38_smalltit[v161].dword16;
						v248x[19] = str_E9C38_smalltit[v161].dword20;
						v162 = str_E9C38_smalltit[v161].dword32;
						v161++;
						v248x[22] = v162;
						//v163 = *(x_BYTE *)(v161_smtit2 - 6);
						//v164 = *(x_BYTE *)(v161_smtit2 - 6);
						//if (*(x_BYTE *)(v161_smtit2 + 38) & 4)
						//	break;
						//v248x[12] = *(x_DWORD *)(v161_smtit2 + 16);
						//v248x[13] = *(x_DWORD *)(v161_smtit2 + 20);
						//v248x[16] = *(x_DWORD *)(v161_smtit2 + 32);
						//v165 = *(x_BYTE *)(v161_smtit2 + 38);
						v163 = str_E9C38_smalltit[v161-1].word38;
						v164 = str_E9C38_smalltit[v161 - 1].word38;
						if (str_E9C38_smalltit[v161].word38 & 4)
							break;
						v248x[12] = str_E9C38_smalltit[v161].dword16;
						v248x[13] = str_E9C38_smalltit[v161].dword20;
						v248x[16] = str_E9C38_smalltit[v161].dword32;
						v165 = str_E9C38_smalltit[v161].word38;
						v166 = v165 | v163;
						v167 = v165 & v164;
						//v248x[6] = *(x_DWORD *)(v161_smtit2 - 1744);
						//v248x[7] = *(x_DWORD *)(v161_smtit2 - 1740);
						//v168 = *(x_DWORD *)(v161_smtit2 - 1728);
						//v169 = v161_smtit2 - 1760;
						//v248x[10] = (int)(x_DWORD *)v168;
						//v170 = *(x_BYTE *)(v169 + 38);
						//v248x[0] = *(x_DWORD *)(v169 - 28);
						//v171 = *(x_DWORD *)(v169 - 24);
						//v169 -= 44;
						v248x[6] = str_E9C38_smalltit[v161-40].dword16;
						v248x[7] = str_E9C38_smalltit[v161 - 40].dword20;
						v168 = str_E9C38_smalltit[v161 - 40].dword32;
						v169x = v161 - 40;
						//v170 = *(x_BYTE*)(v169 + 38);
						//v248x[0] = *(x_DWORD*)(v169 - 28);
						//v171 = *(x_DWORD*)(v169 - 24);
						//v169 -= 44;
						//v248x[1] = v171;
						//v248x[4] = *(x_DWORD *)(v169 + 32);
						//BYTE1(v171) = *(x_BYTE *)(v169 + 38);
						//v172 = v169 + 1760;
						// FIXME: types
						// v248x[10] = (int)(x_DWORD*)v168;
						v170 = str_E9C38_smalltit[v169x].word38;
						v248x[0] = str_E9C38_smalltit[v169x-1].dword16;
						v171 = str_E9C38_smalltit[v169x - 1].dword20;
						v169x--;
						v248x[1] = v171;
						v248x[4] = str_E9C38_smalltit[v169x].dword32;
						BYTE1(v171) = str_E9C38_smalltit[v169x].word38;
						v172x = v169x + 40;
						v173 = BYTE1(v171) | v170 | v166;
						v174 = BYTE1(v171) & v170 & v167;
						if ((Bit8s)(str_E9C38_smalltit[v172x].word38 & 0xff) >= 0)
						{
							if (str_E9C38_smalltit[v172x].word38 & 0x1000)
							{
								x_BYTE_E126D = 7;
								x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
							}
							else
							{
								x_BYTE_E126D = 5;
							}
							if (!(v173 & 2) && !(v174 & 0x78))
							{
								v176 = (int *)((char *)unk_D4350 + 32 * str_E9C38_smalltit[v172x].byte42);
								v248x[20] = v176[0];
								v248x[21] = v176[1];
								v248x[14] = v176[2];
								v248x[15] = v176[3];
								v248x[8] = v176[4];
								v248x[9] = v176[5];
								v248x[2] = v176[6];
								v248x[3] = v176[7];
								// FIXME: types
								// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[str_E9C38_smalltit[v172x].byte41];
								if (str_E9C38_smalltit[v172x].word38 & 1)
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
									sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
								}
								else
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
									sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
								}
							}
						}
						else
						{
							x_BYTE_E126D = 26;
							if (!(v173 & 2) && !(v174 & 0x78))
							{
								v175 = (int *)((char *)unk_D4350 + 32 * str_E9C38_smalltit[v172x].byte42);
								v248x[20] = v175[0];
								v248x[21] = v175[1];
								v248x[14] = v175[2];
								v248x[15] = v175[3];
								v248x[8] = v175[4];
								v248x[9] = v175[5];
								v248x[2] = v175[6];
								v248x[3] = v175[7];
								// FIXME: types
								// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[str_E9C38_smalltit[v172x].byte41];
								if (str_E9C38_smalltit[v172x].word38 & 1)
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
									sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
								}
								else
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
									sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
								}
							}
						}
						if (str_E9C38_smalltit[v172x].word36)
							sub_3E360_draw_particles(/*v160,*/ v172x);
						//v161_smtit2 = v172 + 44;
						v161 = v172x + 1;
					}
					if (ii)
					{
						//v177 = v161_smtit2 - 44;
						//v178 = v160_smtit + 1672;
						v177x = v161 - 1;
						v178x = v160 + 38;
						do
						{
							//v248x[18] = *(x_DWORD *)(v178 + 16);
							//v248x[19] = *(x_DWORD *)(v178 + 20);
							//v248x[22] = *(x_DWORD *)(v178 + 32);
							//v179 = *(x_BYTE *)(v178 + 38);
							//v248x[12] = *(x_DWORD *)(v178 + 60);
							//v248x[13] = *(x_DWORD *)(v178 + 64);
							//v248x[16] = *(x_DWORD *)(v178 + 76);
							//v180 = *(x_BYTE *)(v178 + 82);
							//v248x[6] = *(x_DWORD *)(v178 - 1700);
							//v248x[7] = *(x_DWORD *)(v178 - 1696);
							v248x[18] = str_E9C38_smalltit[v178x].dword16;
							v248x[19] = str_E9C38_smalltit[v178x].dword20;
							v248x[22] = str_E9C38_smalltit[v178x].dword32;
							v179 = str_E9C38_smalltit[v178x].word38;
							v248x[12] = str_E9C38_smalltit[v178x+1].dword16;
							v248x[13] = str_E9C38_smalltit[v178x+1].dword20;
							v248x[16] = str_E9C38_smalltit[v178x+1].dword32;
							v180 = str_E9C38_smalltit[v178x+1].word38;
							v248x[6] = str_E9C38_smalltit[v178x -39].dword16;
							v248x[7] = str_E9C38_smalltit[v178x - 39].dword20;
							v181 = v179;
							//v248x[10] = (int)*(x_DWORD **)(v178 - 1684);
							//v182 = *(x_BYTE *)(v178 - 1678);
							//v248x[10] = (int) * (x_DWORD *)str_E9C38_smalltit[v178x - 39].dword32;
							// FIXME: types
							// v248x[10] = (int)*(x_DWORD **)&str_E9C38_smalltit[v178x - 39].dword32;
							v182 = str_E9C38_smalltit[v178x - 39].word38;
							v183 = v182 | v180 | v179;
							v184 = v182 & v180 & v181;
							//v185 = *(x_DWORD *)(v178 - 1744);
							v185 = str_E9C38_smalltit[v178x - 40].dword16;
							v186x = v178x + 1;
							v248x[0] = v185;
							//v187 = *(x_DWORD *)(v186 - 1784);
							v187 = str_E9C38_smalltit[v186x - 41].dword20;
							v186x -= 40;
							v248x[1] = v187;
							//v188 = *(x_DWORD *)(v186 - 12);
							v188 = str_E9C38_smalltit[v186x - 1].dword32;
							v186x--;
							v248x[4] = v188;
							//v189 = *(x_BYTE *)(v186 + 38);
							v189 = str_E9C38_smalltit[v186x].word38;
							v190x = v186x + 40;
							v191 = v189 | v183;
							v192 = v189 & v184;
							if ((Bit8s)(str_E9C38_smalltit[v190x].word38&0xff) >= 0)
							{
								if (str_E9C38_smalltit[v190x].word38 & 0x1000)
								{
									x_BYTE_E126D = 7;
									x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
								}
								else
								{
									x_BYTE_E126D = 5;
								}
								if (!(v191 & 2) && !(v192 & 0x78))
								{
									v195 = (int *)((char *)unk_D4350 + 32 * str_E9C38_smalltit[v190x].byte42);
									v248x[20] = v195[0];
									v248x[21] = v195[1];
									v248x[14] = v195[2];
									v248x[15] = v195[3];
									v248x[8] = v195[4];
									v248x[9] = v195[5];
									v248x[2] = v195[6];
									v248x[3] = v195[7];
									v196 = str_E9C38_smalltit[v190x].word38;
									// FIXME: types
									// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[str_E9C38_smalltit[v190x].byte41];
									if (v196 & 1)
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
										sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
									}
									else
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
										sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
									}
								}
							}
							else
							{
								x_BYTE_E126D = 26;
								if (!(v191 & 2) && !(v192 & 0x78))
								{
									v193 = (int *)((char *)unk_D4350 + 32 * str_E9C38_smalltit[v190x].byte42);
									v248x[20] = v193[0];
									v248x[21] = v193[1];
									v248x[14] = v193[2];
									v248x[15] = v193[3];
									v248x[8] = v193[4];
									v248x[9] = v193[5];
									v248x[2] = v193[6];
									v248x[3] = v193[7];
									v194 = str_E9C38_smalltit[v190x].word38;
									// FIXME: types
									// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[str_E9C38_smalltit[v190x].byte41];
									if (v194 & 1)
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
										sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
									}
									else
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
										sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
									}
								}
							}
							if (str_E9C38_smalltit[v190x].word36)
								sub_3E360_draw_particles(/*v160,*/ v190x);
							v178x = v190x - 1;
						} while (v178x >= v177x);
					}
					//LOBYTE(v56b) = v282 - 1;
					v160 -= 40;
					v282--;
				} while (v282);
				return/* v56b*/;
			}
			for (jj = 40; jj; --jj)
			{
				v248x[31] = ((uint8_t)x_BYTE_12B4E0_shading[v279] << 8) + 128;
				//v109 = *(x_DWORD *)(v278 + 12);
				v109 = str_E9C38_smalltit[v278x].dword12;
				v110 = v109 * v109 + str_E9C38_smalltit[v278x].dword0_rot * str_E9C38_smalltit[v278x].dword0_rot;
				str_E9C38_smalltit[v278x].word36 = 0;
				if (v109 <= -256 || v110 >= str_F2C20ar.dword0x15)
				{
					str_E9C38_smalltit[v278x].word38 |= 2u;
					goto LABEL_140;
				}
				if (v109 < 128)
					v109 = 128;
				str_E9C38_smalltit[v278x].dword16 = str_F2C20ar.dword0x18 * str_E9C38_smalltit[v278x].dword0_rot / v109;
				v111 = v279;
				str_E9C38_smalltit[v278x].dword4 = 32 * x_BYTE_11B4E0_height[v279] - a6;
				v112 = (uint16_t)D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248 << 6;
				v248x[26] = x_DWORD_DB750[(v112 + (HIBYTE(v279) << 7)) & 0x7FF] >> 8;
				v113 = v248x[26] * (x_DWORD_DB750[(((uint8_t)v279 << 7) + v112) & 0x7FF] >> 8);
				v248x[26] = x_BYTE_11B4E0_height[v111];
				//v25z = v278x;
				str_E9C38_smalltit[v278x].dword8 = -(v248x[26] * ((v113 >> 4) + 0x8000) >> 10) - a6;
				//if (!(x_BYTE_13B4E0_angle[v111] & 8)|| (v114x = v25y, v25y = (Bit32u*)(v25y[1] - (v113 >> 10)), v115 = v248x[31], v114[1] = (x_DWORD)v25y, v115 >= 14464))
				if (!(x_BYTE_13B4E0_angle[v111] & 8) || (str_E9C38_smalltit[v278x].dword4 -= v113 >> 10, v248x[31] >= 14464))
				//if (!(x_BYTE_13B4E0_angle[v111] & 8) || (v114x = v25z, v25z = (Bit32u*)(str_E9C38_smalltit[v25z].dword4 - (v113 >> 10)), v115 = v248x[31], str_E9C38_smalltit[v114x].dword4 = (x_DWORD)&str_E9C38_smalltit[v25z], v115 >= 14464))
				{
					v113 = 0;
				}
				v116 = (v248x[31] << 8) + 8 * v113;
				if (v110 <= str_F2C20ar.dword0x13)
					goto LABEL_133;
				//v25 = (x_DWORD *)str_F2C20ar.dword0x16;
				if (v110 < str_F2C20ar.dword0x16)
				{
					v116 = v116 * (int64_t)(str_F2C20ar.dword0x16 - v110) / str_F2C20ar.dword0x12;
				LABEL_133:
					//*(x_DWORD *)(v278 + 32) = v116;
					str_E9C38_smalltit[v278x].dword32 = v116;
					goto LABEL_134;
				}
				str_E9C38_smalltit[v278x].dword32 = 0;
			LABEL_134:
				v117x = v278x;
				str_E9C38_smalltit[v278x].dword20 = str_F2C20ar.dword0x22 + str_F2C20ar.dword0x18 * str_E9C38_smalltit[v278x].dword4 / v109;
				str_E9C38_smalltit[v278x].dword28 = str_F2C20ar.dword0x22 + str_F2C20ar.dword0x18 * str_E9C38_smalltit[v117x].dword8 / v109;
				LOBYTE(v118) = v277[2] + v279;
				HIBYTE(v118) = v277[3] + HIBYTE(v279);
				v119 = x_BYTE_10B4E0_terraintype[v118];
				str_E9C38_smalltit[v278x].byte41 = v119;
				if (x_BYTE_D41D8[0xa4+v119])
					str_E9C38_smalltit[v278x].word38 |= 0x80u;
				if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.flat_0x2199)
					str_E9C38_smalltit[v278x].word38 |= 0x1000u;
				v120x = v278x;
				str_E9C38_smalltit[v278x].byte43 = x_BYTE_D41D8[str_E9C38_smalltit[v278x].byte41];
				str_E9C38_smalltit[v120x].byte42 = v248x[32] + (((signed int)(uint8_t)x_BYTE_13B4E0_angle[v118] >> 2) & 0x1C);
				LOBYTE(v118) = v277[4] + v118;
				HIBYTE(v118) += v277[5];
				str_E9C38_smalltit[v278x].word36 = x_WORD_15B4E0_source[v118];
			LABEL_140:
				v121 = v277;
				str_E9C38_smalltit[v278x].word38 |= ((x_BYTE)v279 + HIBYTE(v279)) & 1;
				LOBYTE(v279) = v121[8] + v279;
				HIBYTE(v279) += v277[9];
				v278x += 1;
			}
			v122 = v277[6] + v279;
			HIBYTE(v279) += v277[7];
			LOBYTE(v279) = v122;
		}
	}
	v283 = 21;//21eb44 nothing changed
LABEL_259:
	if (v283)
	{
		v285 = 40;
		while (1)
		{
			if (!v285)
			{
				LOBYTE(v279) = v277[6] + v279;
				HIBYTE(v279) += v277[7];
				v283--;
				goto LABEL_259;
			}
			v197 = ((uint8_t)x_BYTE_12B4E0_shading[v279] << 8) + 128;
			v198 = str_E9C38_smalltit[v278x].dword12;
			v199 = v198 * v198 + str_E9C38_smalltit[v278x].dword0_rot * str_E9C38_smalltit[v278x].dword0_rot;
			str_E9C38_smalltit[v278x].word36 = 0;
			if (v198 > -256 && v199 < str_F2C20ar.dword0x15)
				break;
			str_E9C38_smalltit[v278x].word38 |= 2u;
		LABEL_256:
			v206x = v278x;
			v207 = v277;
			str_E9C38_smalltit[v278x].word38 |= ((x_BYTE)v279 + HIBYTE(v279)) & 1;
			LOBYTE(v279) = v207[8] + v279;
			HIBYTE(v279) += v277[9];
			v285--;
			v278x = v206x + 1;
		}
		if (v198 < 128)
			v198 = 128;
		v200 = v279;
		str_E9C38_smalltit[v278x].dword16 = str_F2C20ar.dword0x18 * str_E9C38_smalltit[v278x].dword0_rot / v198;
		str_E9C38_smalltit[v278x].dword4 = 32 * x_BYTE_11B4E0_height[v200] - a6;
		v201 = (uint16_t)D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248 << 6;
		v248x[26] = x_DWORD_DB750[(v201 + (HIBYTE(v279) << 7)) & 0x7FF] >> 8;
		v202 = v248x[26] * (x_DWORD_DB750[(((uint8_t)v279 << 7) + v201) & 0x7FF] >> 8);
		if (!(x_BYTE_13B4E0_angle[v200] & 8) || (str_E9C38_smalltit[v278x].dword4 -= v202 >> 10, v197 >= 14464))
			v202 = 0;
		v203 = (v197 << 8) + 8 * v202;
		if (v199 > str_F2C20ar.dword0x13)
		{
			if (v199 >= str_F2C20ar.dword0x16)
			{
				str_E9C38_smalltit[v278x].dword32 = 0;
			LABEL_254:
				str_E9C38_smalltit[v278x].dword20 = str_F2C20ar.dword0x22 + str_F2C20ar.dword0x18 * str_E9C38_smalltit[v278x].dword4 / v198;
				LOBYTE(v204) = v277[2] + v279;
				HIBYTE(v204) = v277[3] + HIBYTE(v279);
				v205x = v278x;
				str_E9C38_smalltit[v278x].byte41 = x_BYTE_10B4E0_terraintype[v204];
				str_E9C38_smalltit[v205x].byte43 = x_BYTE_D41D8[str_E9C38_smalltit[v205x].byte41];
				str_E9C38_smalltit[v205x].byte42 = v248x[32] + (((signed int)(uint8_t)x_BYTE_13B4E0_angle[v204] >> 2) & 0x1C);
				LOBYTE(v204) = v277[4] + v204;
				HIBYTE(v204) += v277[5];
				str_E9C38_smalltit[v278x].word36 = x_WORD_15B4E0_source[v204];
				goto LABEL_256;
			}
			v203 = v203 * (int64_t)(str_F2C20ar.dword0x16 - v199) / str_F2C20ar.dword0x12;
		}
		str_E9C38_smalltit[v278x].dword32 = v203;
		goto LABEL_254;
	}//21edb7 nothing changed
	v208 = a8 & 0x7FF;//21edb7
	v209 = 840;
	v210 = x_DWORD_DB750[v208];
	v211 = x_DWORD_DB750[0x200+v208];
	str_F2C20ar.dword0x0d = v210;
	str_F2C20ar.dword0x11 = v211;
	//v56 = str_E9C38_smalltit;
	v56x = 0;
	while (v209)
	{
		v212 = str_F2C20ar.dword0x10;
		v213 = (str_F2C20ar.dword0x0d * str_E9C38_smalltit[v56x].dword16 + str_F2C20ar.dword0x11 * str_E9C38_smalltit[v56x].dword20) >> 16;
		str_E9C38_smalltit[v56x].dword16 = ((str_E9C38_smalltit[v56x].dword16 * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * str_E9C38_smalltit[v56x].dword20) >> 16)
			+ str_F2C20ar.dword0x24;
		v214 = v212 - v213;
		v215 = str_E9C38_smalltit[v56x].dword16;
		str_E9C38_smalltit[v56x].dword20 = v214;
		if (v215 >= 0)
		{
			if ((signed int)(uint16_t)x_DWORD_DE564 <= str_E9C38_smalltit[v56x].dword16)
				str_E9C38_smalltit[v56x].word38 |= 0x10u;
		}
		else
		{
			str_E9C38_smalltit[v56x].word38 |= 8u;
		}
		v216 = str_E9C38_smalltit[v56x].dword20;
		if (v216 >= 0)
		{
			if ((uint16_t)x_DWORD_DE568 <= v216)
				str_E9C38_smalltit[v56x].word38 |= 0x40u;
		}
		else
		{
			str_E9C38_smalltit[v56x].word38 |= 0x20u;
		}
		v56x ++;
		v209--;
	}
	//adress 3de7d
	//v217 = &str_E9C38_smalltit[35200];//21ee85
	v217x = 800;
	v289 = 20;
	do
	{
		v218x = v217x;
		for (kk = 39; kk; kk--)
		{
			v248x[18] = str_E9C38_smalltit[v218x].dword16;
			v248x[19] = str_E9C38_smalltit[v218x].dword20;
			v248x[22] = str_E9C38_smalltit[v218x].dword32;
			v218x++;
			//v248x[22] = v56b;
			v219 = str_E9C38_smalltit[v218x-1].word38;
			v220 = str_E9C38_smalltit[v218x - 1].word38;
			if (str_E9C38_smalltit[v218x].word38 & 4)
				break;
			v248x[12] = str_E9C38_smalltit[v218x].dword16;
			v248x[13] = str_E9C38_smalltit[v218x].dword20;
			v248x[16] = str_E9C38_smalltit[v218x].dword32;
			v221 = str_E9C38_smalltit[v218x].word38;
			v222 = v221 | v219;
			v223 = v221 & v220;
			v248x[6] = str_E9C38_smalltit[v218x-40].dword16;
			v248x[7] = str_E9C38_smalltit[v218x-40].dword20;
			v224 = str_E9C38_smalltit[v218x-40].dword32;
			v225x = v218x - 40;
			// FIXME: types
			// v248x[10] = (int)(x_DWORD *)v224;
			v226 = str_E9C38_smalltit[v225x].word38;
			v248x[0] = str_E9C38_smalltit[v225x-1].dword16;
			v248x[1] = str_E9C38_smalltit[v225x-1].dword20;
			v225x--;
			//v248x[1] = v56b;
			v248x[4] = str_E9C38_smalltit[v225x].dword32;
			//LOBYTE(v56b) = *(x_BYTE *)(v225 + 38);
			v227x = v225x + 40;
			v228 = (str_E9C38_smalltit[v225x].word38 & 0xff) | v226 | v222;
			v229 = (str_E9C38_smalltit[v225x].word38 & 0xff) & v226 & v223;
			if (str_E9C38_smalltit[v227x].word38 & 0x1000)
			{
				x_BYTE_E126D = 7;
				//v56b = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
				x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
			}
			else
			{
				x_BYTE_E126D = 5;
			}
			if (!(v228 & 2) && !(v229 & 0x78))
			{//21ef76
				v230 = (int *)((char *)unk_D4350 + 32 * str_E9C38_smalltit[v227x].byte42);
				v248x[20] = v230[0];
				v248x[21] = v230[1];
				v248x[14] = v230[2];
				v248x[15] = v230[3];
				v248x[8] = v230[4];
				v248x[9] = v230[5];
				v248x[2] = v230[6];
				v248x[3] = v230[7];
				// FIXME: types
				// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[str_E9C38_smalltit[v227x].byte41];
				if (str_E9C38_smalltit[v227x].word38 & 1)
				{//adress 21ddf0
					sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
					//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
					//v56b = (int)&v248x[0];
					sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
					//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
				}
				else
				{
					sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
					//v56b = (int)&v248x[18];
					sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
				}
			}
			if (str_E9C38_smalltit[v227x].word36)
				/*LOBYTE(v56b) = */sub_3E360_draw_particles(/*v217x,*/ v227x);//21f01b
			v218x = v227x + 1;
		}
		//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
		if (kk)
		{
			v231x = v218x - 1;
			v232x = v217x + 38;
			do
			{
				v248x[18] = str_E9C38_smalltit[v232x].dword16;
				v248x[19] = str_E9C38_smalltit[v232x].dword20;
				v248x[22] = str_E9C38_smalltit[v232x].dword32;
				v233 = str_E9C38_smalltit[v232x].word38;
				v248x[12] = str_E9C38_smalltit[v232x+1].dword16;
				v248x[13] = str_E9C38_smalltit[v232x+1].dword20;
				v248x[16] = str_E9C38_smalltit[v232x+1].dword32;
				v234 = str_E9C38_smalltit[v232x+1].word38;
				v248x[6] = str_E9C38_smalltit[v232x-39].dword16;
				v248x[7] = str_E9C38_smalltit[v232x-39].dword20;
				v235 = v233;
				//v248x[10] = (int)*(x_DWORD *)str_E9C38_smalltit[v232x-39].dword32;
				v248x[10] = str_E9C38_smalltit[v232x - 39].dword32;
				v236 = str_E9C38_smalltit[v232x - 39].word38;
				v237 = v236 | v234 | v233;
				v238 = v236 & v234 & v235;
				v239 = str_E9C38_smalltit[v232x - 40].dword16;
				v240x = v232x + 1;
				v248x[0] = v239;
				v241 = str_E9C38_smalltit[v240x - 41].dword20;
				v240x -= 40;
				v248x[1] = v241;
				v248x[4] = str_E9C38_smalltit[v240x - 1].dword32;
				v240x -= 1;
				//v248x[4] = v56b;
				v242 = str_E9C38_smalltit[v240x].word38;
				v243x = v240x + 40;
				v244 = v242 | v237;
				v245 = v242 & v238;
				if (str_E9C38_smalltit[v240x].word38 & 0x1000)
				{
					x_BYTE_E126D = 7;
					//v56b = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
					x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
				}
				else
				{
					x_BYTE_E126D = 5;
				}
				if (!(v244 & 2) && !(v245 & 0x78))
				{
					v246 = (int *)((char *)unk_D4350 + 32 * str_E9C38_smalltit[v243x].byte42);
					v248x[20] = v246[0];
					v248x[21] = v246[1];
					v248x[14] = v246[2];
					v248x[15] = v246[3];
					v248x[8] = v246[4];
					v248x[9] = v246[5];
					v248x[2] = v246[6];
					v248x[3] = v246[7];
					// FIXME: types
					// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[str_E9C38_smalltit[v243x].byte41];
					if (str_E9C38_smalltit[v243x].word38 & 1)
					{
						sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
						//v56b = (int)&v248x[0];
						sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
					}
					else
					{
						sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
						//v56b = (int)&v248x[18];
						sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
					}
				}
				if (str_E9C38_smalltit[v243x].word36)//adress 21f1b5 aex 360000 ebx 3f78a0 ecx 0 edx 414eb0
					/*LOBYTE(v56b) = */sub_3E360_draw_particles(/*v217x,*/ v243x);
				v232x = v243x - 1;
			} while (v232x >= v231x);
		}
		v217x -= 40;
		v289--;
	} while (v289);
	//return v56b;
	
}











void sub_3E360_draw_particlesB(/*Bit8u* a1,*/ Bit8u* a2);
uint16_t sub_3FD60B(/*int a1, */Bit8u* a2);


void sub_3C080_draw_terrain_and_particles_old(/*int a1, int a2,*/ int16_t a3, int16_t a4, int16_t a5, signed int a6, int a7, int16_t a8, int a9)//21d080
{
	int v9; // eax
	int v10; // edx
	int v11; // ecx
	int v12; // edx
	int v13; // edi
	char v14; // dh
	Bit8u* v15; // eax
	char v16; // dl
	char v17; // dl
	x_DWORD* v18; // eax
	char v19; // dh
	int v20; // ebx
	int v21; // ecx
	char v22; // ch
	int v23; // eax
	//int v24; // edx
	Bit8u* v25x; // edi
	Bit32u* v25y; // edi
	uint16_t v26; // dx
	int v27; // ebx
	int v28; // eax
	int16_t v29; // si
	int v30; // edx
	int16_t v31; // cx
	int v32; // eax
	int v33; // ecx
	signed int v34; // esi
	int v35; // ebx
	uint16_t v36; // dx
	int v37; // eax
	int16_t v38; // ax
	int v39; // eax
	int v40; // edi
	Bit8u* v41; // edx
	uint16_t v42; // bx
	Bit8u* v43; // edx
	Bit8u* v44; // eax
	char v45; // bh
	signed int v46; // edx
	Bit8u* v47; // eax
	int v48; // esi
	int v49; // ecx
	int v50; // ecx
	int v51; // ebx
	int v52; // ecx
	int v53; // ebx
	signed int v54; // esi
	signed int v55; // esi
	Bit8u* v56; // eax
	//int v56b; // eax
	Bit8u* v57; // esi
	char v58; // ah
	Bit8u* j; // ebx
	char v60; // dl
	char v61; // dh
	char v62; // ch
	char v63; // ah
	char v64; // dl
	char v65; // dh
	char v66; // ch
	char v67; // dl
	Bit8u* v68; // ebx
	int v69; // eax
	int* v70; // edx
	char v71; // dl
	char v72; // dh
	char v73; // ch
	char v74; // ah
	char v75; // dl
	char v76; // dh
	char v77; // ch
	char v78; // dl
	char v79; // dh
	Bit8u* v80; // ebx
	int* v81; // edx
	Bit8u* v82; // edi
	Bit8u* v83; // ebx
	char v84; // dl
	char v85; // cl
	char v86; // dh
	char v87; // al
	char v88; // dl
	char v89; // dh
	int v90; // eax
	Bit8u* v91; // ebx
	char v92; // cl
	char v93; // dl
	Bit8u* v94; // ebx
	int* v95; // edx
	char v96; // al
	char v97; // dl
	char v98; // dh
	char v99; // ah
	char v100; // dl
	char v101; // dh
	char v102; // ch
	int v103; // eax
	Bit8u* v104; // ebx
	char v105; // dl
	char v106; // dh
	Bit8u* v107; // ebx
	int* v108; // edx
	signed int v109; // esi
	int v110; // ebx
	uint16_t v111; // dx
	int16_t v112; // ax
	int v113; // eax
	x_DWORD* v114; // ecx
	signed int v115; // edx
	int v116; // eax
	Bit8u* v117; // edx
	uint16_t v118; // bx
	uint8_t v119; // al
	Bit8u* v120; // edx
	Bit8u* v121; // eax
	char v122; // bh
	signed int v123; // ebx
	Bit8u* v124; // eax
	int v125; // esi
	int v126; // ecx
	int v127; // ecx
	int v128; // edx
	int v129; // ecx
	int v130; // edx
	signed int v131; // esi
	signed int v132; // esi
	Bit8u* v133; // esi
	Bit8u* v134; // ebx
	int v135; // eax
	char v136; // dl
	char v137; // ch
	char v138; // dl
	int v139; // eax
	Bit8u* v140; // ebx
	int v141; // eax
	char v142; // ch
	Bit8u* v143; // ebx
	char v144; // dl
	int v145; // eax
	int* v146; // edx
	Bit8u* v147; // ebx
	char v148; // dl
	char v149; // dl
	int v150; // eax
	Bit8u* v151; // ebx
	int v152; // eax
	char v153; // cl
	int v154; // eax
	Bit8u* v155; // ebx
	char v156; // dl
	int v157; // eax
	int* v158; // edx
	int v159; // eax
	Bit8u* v160; // esi
	Bit8u* v161; // ebx
	int v162; // eax
	char v163; // dl
	char v164; // dh
	char v165; // ah
	char v166; // dl
	char v167; // dh
	int v168; // eax
	Bit8u* v169; // ebx
	char v170; // ch
	int v171; // eax
	Bit8u* v172; // ebx
	char v173; // dl
	char v174; // dh
	int* v175; // edx
	int* v176; // edx
	Bit8u* v177; // edi
	Bit8u* v178; // ebx
	char v179; // dl
	char v180; // ch
	char v181; // dh
	char v182; // ah
	char v183; // dl
	char v184; // dh
	int v185; // eax
	Bit8u* v186; // ebx
	int v187; // eax
	int v188; // eax
	char v189; // ch
	Bit8u* v190; // ebx
	char v191; // dl
	char v192; // dh
	int* v193; // edx
	char v194; // ch
	int* v195; // edx
	char v196; // ch
	int v197; // ecx
	signed int v198; // esi
	int v199; // ebx
	uint16_t v200; // di
	int16_t v201; // ax
	int v202; // eax
	int v203; // eax
	uint16_t v204; // bx
	uint8_t* v205; // ecx
	Bit8u* v206; // edx
	Bit8u* v207; // eax
	int v208; // eax
	signed int v209; // ebx
	int v210; // edx
	Bit32u v211; // eax
	int v212; // ecx
	int v213; // edx
	int v214; // ecx
	int v215; // edx
	signed int v216; // esi
	Bit8u* v217; // esi
	Bit8u* v218; // ebx
	char v219; // dl
	char v220; // dh
	char v221; // al
	char v222; // dl
	char v223; // dh
	int v224; // eax
	Bit8u* v225; // ebx
	char v226; // cl
	Bit8u* v227; // ebx
	char v228; // dl
	char v229; // dh
	int* v230; // edx
	Bit8u* v231; // edi
	Bit8u* v232; // ebx
	char v233; // dl
	char v234; // ch
	char v235; // dh
	char v236; // ah
	char v237; // dl
	char v238; // dh
	int v239; // eax
	Bit8u* v240; // ebx
	int v241; // eax
	char v242; // ch
	Bit8u* v243; // ebx
	char v244; // dl
	char v245; // dh
	int* v246; // edx
	int v248x[33]; // [esp+0h] [ebp-62h]//v248x[0]
	//int v249; // [esp+4h] [ebp-5Eh]//v248x[1]
	//int v250; // [esp+8h] [ebp-5Ah]//v248x[2]
	//int v251; // [esp+Ch] [ebp-56h]//v248x[3]
	//int v252; // [esp+10h] [ebp-52h]//v248x[4]
	//int v253; // [esp+18h] [ebp-4Ah]//v248x[6]
	//int v254; // [esp+1Ch] [ebp-46h]//v248x[7]
	//int v255; // [esp+20h] [ebp-42h]//v248x[8]
	//int v256; // [esp+24h] [ebp-3Eh]//v248x[9]
	//x_DWORD *v257; // [esp+28h] [ebp-3Ah]//v248x[10]
	//int v258; // [esp+30h] [ebp-32h]//v248x[12]
	//int v259; // [esp+34h] [ebp-2Eh]//v248x[13]
	//int v260; // [esp+38h] [ebp-2Ah]//v248x[14]
	//int v261; // [esp+3Ch] [ebp-26h]//v248x[15]
	//int v262; // [esp+40h] [ebp-22h]//v248x[16]
	//int v263; // [esp+48h] [ebp-1Ah]//v248x[18]
	//int v264; // [esp+4Ch] [ebp-16h]//v248x[19]
	//int v265; // [esp+50h] [ebp-12h]//v248x[20]
	//int v266; // [esp+54h] [ebp-Eh]//v248x[21]
	//int v267; // [esp+58h] [ebp-Ah]//v248x[22]
	//int v268; // [esp+60h] [ebp-2h]//v248x[24]

	//int v269; // [esp+64h] [ebp+2h]//v248x[25]
	//int v270; // [esp+68h] [ebp+6h]//v248x[26]
	//int v271; // [esp+6Ch] [ebp+Ah]//v248x[27]
	//int v272; // [esp+70h] [ebp+Eh]//v248x[28]
	//int v273; // [esp+74h] [ebp+12h]//v248x[29]
	//Bit32u v274; // [esp+78h] [ebp+16h]//v248x[30]
	//int v275; // [esp+7Ch] [ebp+1Ah]//v248x[31]
	//int v276; // [esp+80h] [ebp+1Eh]//v248x[32]

	Bit8u* v277; // [esp+84h] [ebp+22h]
	Bit8u* v278; // [esp+88h] [ebp+26h]
	uint16_t v279; // [esp+8Ch] [ebp+2Ah]
	char l; // [esp+90h] [ebp+2Eh]
	char v281; // [esp+94h] [ebp+32h]
	char v282; // [esp+98h] [ebp+36h]
	char v283; // [esp+9Ch] [ebp+3Ah]
	char k; // [esp+A0h] [ebp+3Eh]
	char v285; // [esp+A4h] [ebp+42h]
	char i; // [esp+A8h] [ebp+46h]
	char jj; // [esp+ACh] [ebp+4Ah]
	char m; // [esp+B0h] [ebp+4Eh]
	char v289; // [esp+B4h] [ebp+52h]
	char n; // [esp+B8h] [ebp+56h]
	char ii; // [esp+BCh] [ebp+5Ah]
	char kk; // [esp+C0h] [ebp+5Eh]
	char v293; // [esp+C4h] [ebp+62h]

	int a1;
	int a2;

	x_BYTE_F2CC7 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.shadows_0x218B;//21d080

	isNotDayLevel = D41A0_BYTESTR_0.str_2FECE.byte_level_type != MC2LevelType::Day;

	str_F2C20ar.dword0x10 = (signed int)(uint16_t)x_DWORD_DE568 >> 1;
	x_WORD_F2CC4 = a3;
	x_WORD_F2CC0 = a5 & 0x7FF;
	x_WORD_F2CC2 = a4;
	v9 = (a5 & 0x7FF) + 256;
	str_F2C20ar.dword0x20 = a6;
	v10 = x_DWORD_DB750[0x100 + v9];
	str_F2C20ar.dword0x24 = x_DWORD_D4324 + ((signed int)(uint16_t)x_DWORD_DE564 >> 1);
	str_F2C20ar.dword0x0f = v10;
	//v11 = x_DWORD_DB350[v9];
	v11 = *x_DWORD_DB350_ret(v9);
	v12 = ((((a5 & 0x7FF) + 256) & 0x1FF) - 256) & 0x7FF;
	v248x[32] = (v9 >> 9) & 3;
	v248x[30] = x_DWORD_DB750[0x200 + v12];
	str_F2C20ar.dword0x17 = v11;
	v13 = x_DWORD_DB750[v12];
	sub_3B560_set_billboards(-a8 & 0x7FF);//21d1aa
	str_F2C20ar.dword0x18 = 7
		* sub_7277A_radix_3d(
		(uint16_t)x_DWORD_DE564 * (uint16_t)x_DWORD_DE564
			+ (uint16_t)x_DWORD_DE568 * (uint16_t)x_DWORD_DE568)
		* a9 >> 11;
	v277 = unk_D4328x + 10 * v248x[32];
	//switch ((uint8_t)a4)
	switch ((uint8_t)v248x[32])//fixed?
	{
	case 0u:
		a2 = (uint8_t)a4 - 256;
		a1 = -(uint8_t)a3 - 4864;
		break;
	case 1u:
		a1 = -(uint8_t)a4 - 4864;
		a2 = -(uint8_t)a3;
		break;
	case 2u:
		a1 = (uint8_t)a3 - 4864;
		a2 = -(uint8_t)a4;
		break;
	case 3u:
		a1 = (uint8_t)a4 - 4864;
		a2 = (uint8_t)a3 - 256;
		break;
	default:
		break;
	}
	v14 = 40;//21d231
	v15 = x_DWORD_E9C38_smalltit;
	do//filling first pointer of x_DWORD_E9C38_smalltit(3f52a4)
	{
		v248x[29] = a1 * v13 >> 16;
		v16 = 21;
		v248x[28] = a1 * (signed int)v248x[30] >> 16;
		while (v16)
		{
			*(x_DWORD*)v15 = v248x[28];
			*(x_DWORD*)(v15 + 12) = v248x[29];
			if (a1 < 0)
				* (x_WORD*)(v15 + 38) = 0;
			else
				*(x_WORD*)(v15 + 38) = 4;
			v15 += 1760;
			v16--;
		}
		v15 -= 36916;
		a1 += 256;
		v14--;
	} while (v14);
	v17 = 21;//21d29c not drawing
	v18 = (x_DWORD*)x_DWORD_E9C38_smalltit;
	while (v17)
	{
		v248x[27] = a2 * v13 >> 16;
		v19 = 40;
		v20 = a2 * (signed int)v248x[30] >> 16;
		while (v19)
		{
			*v18 -= v248x[27];
			v21 = v18[3];
			v18 += 11;
			v19--;
			*(v18 - 8) = v20 + v21;
		}
		a2 += 256;
		v17--;
	}
	str_F2C20ar.dword0x15 = 26214400;//21d2df not drawing
	v278 = x_DWORD_E9C38_smalltit;
	str_F2C20ar.dword0x12 = 8912896;
	v22 = *v277;
	str_F2C20ar.dword0x22 = a7 * (uint16_t)x_DWORD_DE564 >> 8;
	LOBYTE(v279) = v22 + HIBYTE(a3);
	HIBYTE(v279) = v277[1] + HIBYTE(a4);
	v23 = a8 & 0x7FF;
	//v24 = x_DWORD_DB750[v23];
	//v25y = 14745600;
	str_F2C20ar.dword0x11 = (int)x_DWORD_DB750[0x200 + v23];
	str_F2C20ar.dword0x16 = 23658496;
	str_F2C20ar.dword0x0d = x_DWORD_DB750[v23];
	//LOBYTE(v24) = x_D41A0_BYTEARRAY_0[8588];
	str_F2C20ar.dword0x13 = 14745600;
	if (!D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.sky_0x218C || x_BYTE_D41B6)
	{
		v26 = x_DWORD_DE564;
		v27 = x_DWORD_DE560_ScreenWidth - x_DWORD_DE564;
		v28 = (v26 - (__CFSHL__((signed int)v26 >> 31, 2) + 4 * ((signed int)v26 >> 31))) >> 2;
		v29 = x_DWORD_DE568;
		v25x = x_DWORD_DE558;
		v30 = (v26 - (__CFSHL__((signed int)v26 >> 31, 2) + 4 * ((signed int)v26 >> 31))) >> 2;
		LOBYTE(v28) = x_WORD_D4B7C;
		HIBYTE(v28) = x_WORD_D4B7C;
		v31 = v28;
		v32 = v28 << 16;
		LOWORD(v32) = v31;
		do
		{
			memset32(v25x, v32, v30 * 4);
			v25x += 4 * v30 + v27;
			v29--;
		} while (v29);
	}
	else
	{
		sub_40950_draw_sky(a8);
	}
	if (x_BYTE_D41B6)//21d3e3 cleaned screen
	{
		for (i = 21; ; i--)
		{
			if (!i)
			{
				v46 = 840;
				v47 = x_DWORD_E9C38_smalltit;
				while (v46)
				{
					v48 = ((*(x_DWORD*)(v47 + 16) * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * *(x_DWORD*)(v47 + 20)) >> 16) + str_F2C20ar.dword0x24;
					v248x[25] = ((*(x_DWORD*)(v47 + 16) * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * *(x_DWORD*)(v47 + 28)) >> 16) + str_F2C20ar.dword0x24;
					v49 = *(x_DWORD*)(v47 + 16) * str_F2C20ar.dword0x0d;
					v248x[24] = str_F2C20ar.dword0x10 - ((v49 + str_F2C20ar.dword0x11 * *(x_DWORD*)(v47 + 20)) >> 16);
					v50 = str_F2C20ar.dword0x10 - ((v49 + str_F2C20ar.dword0x11 * *(x_DWORD*)(v47 + 28)) >> 16);
					*(x_DWORD*)(v47 + 16) = v48;
					v51 = v50;
					v52 = v248x[24];
					*(x_DWORD*)(v47 + 28) = v51;
					*(x_DWORD*)(v47 + 20) = v52;
					v53 = *(x_DWORD*)(v47 + 16);
					*(x_DWORD*)(v47 + 24) = v248x[25];
					if (v53 >= 0)
					{
						if ((signed int)(uint16_t)x_DWORD_DE564 <= *(x_DWORD*)(v47 + 16))
							v47[38] |= 0x10u;
					}
					else
					{
						v47[38] |= 8u;
					}
					v54 = *(x_DWORD*)(v47 + 20);
					if (v54 >= 0)
					{
						if ((uint16_t)x_DWORD_DE568 <= v54)
							* (x_BYTE*)(v47 + 38) |= 0x40u;
					}
					else
					{
						*(x_BYTE*)(v47 + 38) |= 0x20u;
					}
					if (*(x_DWORD*)(v47 + 24) >= 0)
					{
						if ((signed int)(uint16_t)x_DWORD_DE564 <= *(x_DWORD*)(v47 + 24))
							v47[39] |= 2u;
					}
					else
					{
						v47[39] |= 1u;
					}
					v55 = *(x_DWORD*)(v47 + 28);
					if (v55 >= 0)
					{
						if ((uint16_t)x_DWORD_DE568 <= v55)
							v47[39] |= 8u;
					}
					else
					{
						v47[39] |= 4u;
					}
					v47 += 44;
					v46--;
				}
				//LOBYTE(v56b) = 20;
				v57 = &x_DWORD_E9C38_smalltit[35200];
				v281 = 20;
				do
				{
					v58 = 39;
					for (j = v57; ; j = (v80 + 44))
					{
						v293 = v58;
						if (!v58)
							break;
						v248x[18] = *(x_DWORD*)(j + 24);
						v248x[19] = *(x_DWORD*)(j + 28);
						v248x[22] = *(x_DWORD*)(j + 32);
						j += 44;
						//v248x[22] = v56b;
						v60 = *(x_BYTE*)(j - 6);
						v61 = *(x_BYTE*)(j - 6);
						if (*(x_BYTE*)(j + 38) & 4)
							break;
						v248x[12] = *(x_DWORD*)(j + 24);
						v248x[13] = *(x_DWORD*)(j + 28);
						v248x[16] = *(x_DWORD*)(j + 32);
						v62 = *(x_BYTE*)(j + 38);
						v248x[6] = *(x_DWORD*)(j - 1736);
						v248x[7] = *(x_DWORD*)(j - 1732);
						// FIXME: types
						// v248x[10] = (int) * (x_DWORD * *)(j - 1728);
						v63 = *(x_BYTE*)(j - 1722);
						v64 = v63 | v62 | v60;
						v65 = v63 & v62 & v61;
						v248x[0] = *(x_DWORD*)(j - 1780);
						v248x[1] = *(x_DWORD*)(j - 1776);
						v248x[4] = *(x_DWORD*)(j - 1772);
						v66 = *(x_BYTE*)(j - 1766);
						v67 = v66 | v64;
						v68 = (Bit8u*)(j - 1804 + 1760);
						if ((v66 & v65 & 0x80u) == 0)
						{
							if (v68[39] & 0x10)
							{
								x_BYTE_E126D = 7;
								x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
							}
							else
							{
								x_BYTE_E126D = 5;
							}
							if (!(v67 & 2))
							{
								v69 = 0;
								if (!(v69 & 0xF00))
								{
									LOBYTE(v69) = v68[42];
									v70 = (int*)((char*)unk_D4350 + 32 * v69);
									v248x[20] = v70[0];
									v248x[21] = v70[1];
									v248x[14] = v70[2];
									v248x[15] = v70[3];
									v248x[8] = v70[4];
									v248x[9] = v70[5];
									v248x[2] = v70[6];
									v248x[3] = v70[7];
									// FIXME: types
									// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[1];
									x_BYTE_E126D = 5;
									if (v68[38] & 1)
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[12]);
										sub_B6253_draw_triangle(&v248x[0], &v248x[6], &v248x[12]);
									}
									else
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[12]);
										sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[6]);
									}
								}
							}
						}
						v248x[18] = *(x_DWORD*)(v68 + 16);
						v248x[19] = *(x_DWORD*)(v68 + 20);
						v248x[22] = *(x_DWORD*)(v68 + 32);
						j = &v68[44];
						//v248x[22] = v56b;
						v71 = *(x_BYTE*)(j - 6);
						v72 = *(x_BYTE*)(j - 6);
						if (*(x_BYTE*)(j + 38) & 4)
							break;
						v248x[12] = *(x_DWORD*)(j + 16);
						v248x[13] = *(x_DWORD*)(j + 20);
						v248x[16] = *(x_DWORD*)(j + 32);
						v73 = *(x_BYTE*)(j + 38);
						v248x[6] = *(x_DWORD*)(j - 1744);
						v248x[7] = *(x_DWORD*)(j - 1740);
						// FIXME: types
						// v248x[10] = (int) * (x_DWORD * *)(j - 1728);
						v74 = *(x_BYTE*)(j - 1722);
						v75 = v74 | v73 | v71;
						v76 = v74 & v73 & v72;
						v248x[0] = *(x_DWORD*)(j - 1788);
						v248x[1] = *(x_DWORD*)(j - 1784);
						//v56b = *(x_DWORD *)(j - 1772);
						v248x[4] = *(x_DWORD*)(j - 1772);
						v77 = *(x_BYTE*)(j - 1766);
						v78 = v77 | v75;
						v79 = v77 & v76;
						v80 = (Bit8u*)(j - 1804 + 1760);
						if (v79 >= 0)
						{
							if (*(x_BYTE*)(v80 + 39) & 0x10)
							{
								x_BYTE_E126D = 7;
								//v56b = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
								x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
							}
							else
							{
								x_BYTE_E126D = 5;
							}
							if (!(v78 & 2) && !(v79 & 0x78))
							{
								v81 = (int*)((char*)unk_D4350 + 32 * *(uint8_t*)(v80 + 42));
								v248x[20] = v81[0];
								v248x[21] = v81[1];
								v248x[14] = v81[2];
								v248x[15] = v81[3];
								v248x[8] = v81[4];
								v248x[9] = v81[5];
								v248x[2] = v81[6];
								v248x[3] = v81[7];
								// FIXME: types
								// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[*(uint8_t*)(v80 + 41)];
								if (v80[38] & 1)
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
									//v56b = (int)&v248x[0];
									sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
								}
								else
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
									//v56b = (int)&v248x[18];
									sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
								}
							}
							if (*(x_WORD*)(v80 + 36))
								/*LOBYTE(v56b) = */sub_3E360_draw_particlesB(/*v57, */v80);
						}
						v58 = v293 - 1;
					}
					if (v293)
					{
						v82 = j - 44;
						v83 = v57 + 1672;
						do
						{
							v248x[18] = *(x_DWORD*)(v83 + 24);
							v248x[19] = *(x_DWORD*)(v83 + 28);
							v248x[22] = *(x_DWORD*)(v83 + 32);
							v84 = *(x_BYTE*)(v83 + 38);
							v248x[12] = *(x_DWORD*)(v83 + 68);
							v248x[13] = *(x_DWORD*)(v83 + 72);
							v248x[16] = *(x_DWORD*)(v83 + 76);
							v85 = *(x_BYTE*)(v83 + 82);
							v248x[6] = *(x_DWORD*)(v83 - 1692);
							v248x[7] = *(x_DWORD*)(v83 - 1688);
							v86 = v84;
							// FIXME: types
							// v248x[10] = (int) * (x_DWORD * *)(v83 - 1684);
							v87 = *(x_BYTE*)(v83 - 1678);
							v88 = v87 | v85 | v84;
							v89 = v87 & v85 & v86;
							v248x[0] = *(x_DWORD*)(v83 - 1736);
							v248x[1] = *(x_DWORD*)(v83 - 1732);
							v90 = *(x_DWORD*)(v83 - 1728);
							v91 = v83 + 44;
							v248x[4] = v90;
							v92 = *(x_BYTE*)(v91 - 1766);
							v93 = v92 | v88;
							v94 = v91 - 1804 + 1760;
							if ((v92 & v89 & 0x80u) == 0)
							{
								if (*(x_BYTE*)(v94 + 39) & 0x10)
								{
									x_BYTE_E126D = 7;
									x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
								}
								else
								{
									x_BYTE_E126D = 5;
								}
								if (!(v93 & 2))
								{
									v95 = (int*)((char*)unk_D4350 + 32 * *(uint8_t*)(v94 + 42));
									v248x[20] = v95[0];
									v248x[21] = v95[1];
									v248x[14] = v95[2];
									v248x[15] = v95[3];
									v248x[8] = v95[4];
									v248x[9] = v95[5];
									v248x[2] = v95[6];
									v248x[3] = v95[7];
									// FIXME: types
									// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[1];
									v96 = *(x_BYTE*)(v94 + 38);
									x_BYTE_E126D = 5;
									if (v96 & 1)
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[12]);
										sub_B6253_draw_triangle(&v248x[0], &v248x[6], &v248x[12]);
									}
									else
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[12]);
										sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[6]);
									}
								}
							}
							v248x[18] = *(x_DWORD*)(v94 + 16);
							v248x[19] = *(x_DWORD*)(v94 + 20);
							v248x[22] = *(x_DWORD*)(v94 + 32);
							v97 = *(x_BYTE*)(v94 + 38);
							v248x[12] = *(x_DWORD*)(v94 + 60);
							v248x[13] = *(x_DWORD*)(v94 + 64);
							v248x[16] = *(x_DWORD*)(v94 + 76);
							v98 = v97;
							v99 = *(x_BYTE*)(v94 + 82);
							v100 = v99 | v97;
							v101 = v99 & v98;
							v248x[6] = *(x_DWORD*)(v94 - 1700);
							v248x[7] = *(x_DWORD*)(v94 - 1696);
							// FIXME: types
							// v248x[10] = (int) * (x_DWORD * *)(v94 - 1684);
							v102 = *(x_BYTE*)(v94 - 1678);
							v248x[0] = *(x_DWORD*)(v94 - 1744);
							v103 = *(x_DWORD*)(v94 - 1740);
							v104 = v94 + 44;
							v248x[1] = v103;
							//v56b = *(x_DWORD *)(v104 - 1772);
							v248x[4] = *(x_DWORD*)(v104 - 1772);
							//BYTE1(v56b) = *(x_BYTE *)(v104 - 1766);
							v105 = (*(x_BYTE*)(v104 - 1766)) | v102 | v100;
							v106 = (*(x_BYTE*)(v104 - 1766)) & v102 & v101;
							v107 = v104 - 1804 + 1760;
							if (v106 >= 0)
							{
								if (*(x_BYTE*)(v107 + 39) & 0x10)
								{
									x_BYTE_E126D = 7;
									//v56b = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
									x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
								}
								else
								{
									x_BYTE_E126D = 5;
								}
								if (!(v105 & 2) && !(v106 & 0x78))
								{
									v108 = (int*)((char*)unk_D4350 + 32 * *(uint8_t*)(v107 + 42));
									v248x[20] = v108[0];
									v248x[21] = v108[1];
									v248x[14] = v108[2];
									v248x[15] = v108[3];
									v248x[8] = v108[4];
									v248x[9] = v108[5];
									v248x[2] = v108[6];
									v248x[3] = v108[7];
									LOBYTE(v108) = *(x_BYTE*)(v107 + 38);
									// FIXME: types
									// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[*(uint8_t*)(v107 + 41)];
									// FIXME: types
									// // if ((uint8_t)v108 & 1)
									// {
									// 	sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
									// 	//v56b = (int)&v248x[0];
									// 	sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
									// }
									// else
									// {
									// 	sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
									// 	//v56b = (int)&v248x[18];
									// 	sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
									// }
								}
								if (*(x_WORD*)(v107 + 36))
									/*LOBYTE(v56b) = */sub_3E360_draw_particlesB(/*v57,*/ v107);
							}
							v83 = v107 - 44;
						} while (v83 >= v82);
					}
					v57 -= 1760;
					v281--;
				} while (v281);
				return/* v56b*/;
			}
			for (k = 40; k; k--)
			{
				v33 = ((uint8_t)x_BYTE_12B4E0_shading[v279] << 8) + 128;
				v34 = *(x_DWORD*)(v278 + 12);
				v35 = v34 * v34 + *(x_DWORD*)v278 * *(x_DWORD*)v278;
				*(x_WORD*)(v278 + 36) = 0;
				if (v34 <= -256 || v35 >= str_F2C20ar.dword0x15)
				{
					*(x_BYTE*)(v278 + 38) |= 2u;
					goto LABEL_46;
				}
				if (v34 < 128)
					v34 = 128;
				*(x_DWORD*)(v278 + 16) = str_F2C20ar.dword0x18 * *(x_DWORD*)v278 / v34;
				v36 = v279;
				*(x_DWORD*)(v278 + 4) = 32 * x_BYTE_11B4E0_height[v279] - a6;
				*(x_DWORD*)(v278 + 8) = ((uint8_t)x_BYTE_14B4E0[v36] << 15 >> 10) - a6;
				v37 = 0;
				if (!x_BYTE_10B4E0_terraintype[v36])
				{
					v38 = 32 * D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248;
					v37 = (x_DWORD_DB750[(v38 + (HIBYTE(v279) << 7)) & 0x7FF] >> 8)
						* (x_DWORD_DB750[(((uint8_t)v279 << 7) + v38) & 0x7FF] >> 8);
					*(x_DWORD*)(v278 + 4) -= v37 >> 13;
					if (v33 >= 14464)
						v37 = 0;
				}
				v39 = (v33 << 8) + 8 * v37;
				if (v35 <= str_F2C20ar.dword0x13)
					goto LABEL_39;
				if (v35 < str_F2C20ar.dword0x16)
				{
					v39 = v39 * (int64_t)(str_F2C20ar.dword0x16 - v35) / str_F2C20ar.dword0x12;
				LABEL_39:
					*(x_DWORD*)(v278 + 32) = v39;
					goto LABEL_40;
				}
				*(x_DWORD*)(v278 + 32) = 0;
			LABEL_40:
				if (x_BYTE_13B4E0_angle[v279] & 8)
					* (x_BYTE*)(v278 + 38) |= 0x80u;
				v40 = str_F2C20ar.dword0x18;
				v41 = v278;
				*(x_DWORD*)(v278 + 20) = str_F2C20ar.dword0x22 + str_F2C20ar.dword0x18 * *(x_DWORD*)(v278 + 4) / v34;
				*(x_DWORD*)(v278 + 28) = str_F2C20ar.dword0x22 + v40 * *(x_DWORD*)(v41 + 8) / v34;
				LOBYTE(v42) = v277[2] + v279;
				HIBYTE(v42) = v277[3] + HIBYTE(v279);
				v43 = v278;
				*(x_BYTE*)(v278 + 41) = x_BYTE_10B4E0_terraintype[v42];
				if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.flat_0x2199)
					* (x_BYTE*)(v43 + 39) |= 0x10u;
				*(x_BYTE*)(v278 + 43) = x_BYTE_D41D8[*(uint8_t*)(v278 + 41)];
				*(x_BYTE*)(v278 + 42) = v248x[32] + (((signed int)(uint8_t)x_BYTE_13B4E0_angle[v42] >> 2) & 0x1C);
				LOBYTE(v42) = v277[4] + v42;
				HIBYTE(v42) += v277[5];
				*(x_WORD*)(v278 + 36) = x_WORD_15B4E0_source[v42];
			LABEL_46:
				v44 = v277;
				*(x_WORD*)(v278 + 38) |= ((x_BYTE)v279 + HIBYTE(v279)) & 1;
				LOBYTE(v279) = v44[8] + v279;
				HIBYTE(v279) += v277[9];
				v278 += 44;
			}
			v45 = v277[6] + v279;
			HIBYTE(v279) += v277[7];
			LOBYTE(v279) = v45;
		}
	}
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.reflections_0x218A)//21de79 nothing changed
	{
		for (l = 21; ; l--)
		{
			if (!l)
			{
				v123 = 840;
				v124 = x_DWORD_E9C38_smalltit;
				while (v123)
				{
					v125 = ((str_F2C20ar.dword0x11 * *(x_DWORD*)(v124 + 16) - str_F2C20ar.dword0x0d * *(x_DWORD*)(v124 + 20)) >> 16) + str_F2C20ar.dword0x24;
					v248x[25] = ((str_F2C20ar.dword0x11 * *(x_DWORD*)(v124 + 16) - str_F2C20ar.dword0x0d * *(x_DWORD*)(v124 + 28)) >> 16) + str_F2C20ar.dword0x24;
					v126 = *(x_DWORD*)(v124 + 16) * str_F2C20ar.dword0x0d;
					//v25 = (x_DWORD *)(str_F2C20ar.dword0x10 - ((v126 + str_F2C20ar.dword0x11 * *(x_DWORD *)(v124 + 20)) >> 16));
					v248x[24] = str_F2C20ar.dword0x10 - ((v126 + str_F2C20ar.dword0x11 * *(x_DWORD*)(v124 + 20)) >> 16);
					v127 = str_F2C20ar.dword0x10 - ((v126 + str_F2C20ar.dword0x11 * *(x_DWORD*)(v124 + 28)) >> 16);
					*(x_DWORD*)(v124 + 16) = v125;
					v128 = v127;
					v129 = v248x[24];
					*(x_DWORD*)(v124 + 28) = v128;
					*(x_DWORD*)(v124 + 20) = v129;
					v130 = *(x_DWORD*)(v124 + 16);
					*(x_DWORD*)(v124 + 24) = v248x[25];
					if (v130 >= 0)
					{
						if ((signed int)(uint16_t)x_DWORD_DE564 <= *(x_DWORD*)(v124 + 16))
							v124[38] |= 0x10u;
					}
					else
					{
						v124[38] |= 8u;
					}
					v131 = *(x_DWORD*)(v124 + 20);
					if (v131 >= 0)
					{
						if ((uint16_t)x_DWORD_DE568 <= v131)
							v124[38] |= 0x40u;
					}
					else
					{
						v124[38] |= 0x20u;
					}
					if (*(x_DWORD*)(v124 + 24) >= 0)
					{
						if ((signed int)(uint16_t)x_DWORD_DE564 <= *(x_DWORD*)(v124 + 24))
							v124[39] |= 2u;
					}
					else
					{
						v124[39] |= 1u;
					}
					v132 = *(x_DWORD*)(v124 + 28);
					if (v132 >= 0)
					{
						if ((uint16_t)x_DWORD_DE568 <= v132)
							v124[39] |= 8u;
					}
					else
					{
						v124[39] |= 4u;
					}
					v124 += 44;
					v123--;
				}
				if (a6 < 4096)
				{
					v133 = &x_DWORD_E9C38_smalltit[35200];
					for (m = 20; m; --m)
					{
						v134 = v133;
						for (n = 39; n; --n)
						{
							v248x[18] = *(x_DWORD*)(v134 + 24);
							v248x[19] = *(x_DWORD*)(v134 + 28);
							v135 = *(x_DWORD*)(v134 + 32);
							v134 += 44;
							v248x[22] = v135;
							v136 = *(x_BYTE*)(v134 - 6);
							if (*(x_BYTE*)(v134 + 38) & 4)
								break;
							v248x[12] = *(x_DWORD*)(v134 + 24);
							v248x[13] = *(x_DWORD*)(v134 + 28);
							v248x[16] = *(x_DWORD*)(v134 + 32);
							v137 = *(x_BYTE*)(v134 + 38);
							v248x[6] = *(x_DWORD*)(v134 - 1736);
							v248x[7] = *(x_DWORD*)(v134 - 1732);
							// FIXME: types
							// v248x[10] = (int) * (x_DWORD * *)(v134 - 1728);
							v138 = *(x_BYTE*)(v134 - 1722) | v137 | v136;
							v248x[0] = *(x_DWORD*)(v134 - 1780);
							v139 = *(x_DWORD*)(v134 - 1776);
							v140 = v134 - 1760;
							v248x[1] = v139;
							v141 = *(x_DWORD*)(v140 - 12);
							v140 -= 44;
							v248x[4] = v141;
							v142 = *(x_BYTE*)(v140 + 38);
							v143 = v140 + 1760;
							v144 = v142 | v138;
							if (*(x_BYTE*)(v143 + 41))
							{
								if (*(x_BYTE*)(v143 + 39) & 0x10)
								{
									x_BYTE_E126D = 7;
									//v25 = v257;
									x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
								}
								else
								{
									x_BYTE_E126D = 5;
								}
								if (!(v144 & 2))
								{
									v145 = 0;
									if (!(v145 & 0xF00))
									{
										LOBYTE(v145) = *(x_BYTE*)(v143 + 42);
										v146 = (int*)((char*)unk_D4350 + 32 * v145);
										v248x[20] = v146[0];
										v248x[21] = v146[1];
										v248x[14] = v146[2];
										v248x[15] = v146[3];
										v248x[8] = v146[4];
										v248x[9] = v146[5];
										v248x[2] = v146[6];
										v248x[3] = v146[7];
										// FIXME: types
										// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[*(uint8_t*)(v143 + 41)];
										LOBYTE(v146) = *(x_BYTE*)(v143 + 38);
										x_BYTE_E126D = 5;
										// FIXME: types
										// // if ((uint8_t)v146 & 1)
										// {
										// 	sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[12]);
										// 	sub_B6253_draw_triangle(&v248x[0], &v248x[6], &v248x[12]);
										// }
										// else
										// {
										// 	sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[12]);
										// 	sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[6]);
										// }
									}
								}
							}
							if (*(x_WORD*)(v143 + 36))
								sub_3FD60B(/*(int)v25, */(Bit8u*)v143);
							v134 = v143 + 44;
						}
						if (n)
						{
							v25y = (Bit32u*)(v134 - 44);
							v147 = v133 + 1672;
							do
							{
								v248x[18] = *(x_DWORD*)(v147 + 24);
								v248x[19] = *(x_DWORD*)(v147 + 28);
								v248x[22] = *(x_DWORD*)(v147 + 32);
								v148 = *(x_BYTE*)(v147 + 38);
								v248x[12] = *(x_DWORD*)(v147 + 68);
								v248x[13] = *(x_DWORD*)(v147 + 72);
								v248x[16] = *(x_DWORD*)(v147 + 76);
								v149 = *(x_BYTE*)(v147 + 82) | v148;
								v248x[6] = *(x_DWORD*)(v147 - 1692);
								v150 = *(x_DWORD*)(v147 - 1688);
								v151 = v147 + 44;
								v248x[7] = v150;
								v152 = *(x_DWORD*)(v151 - 1728);
								v151 -= 1760;
								// FIXME: types
								// v248x[10] = (int)(x_DWORD*)v152;
								v153 = *(x_BYTE*)(v151 + 38);
								v248x[0] = *(x_DWORD*)(v151 - 20);
								v154 = *(x_DWORD*)(v151 - 16);
								v151 -= 44;
								v248x[1] = v154;
								v248x[4] = *(x_DWORD*)(v151 + 32);
								LOBYTE(v154) = *(x_BYTE*)(v151 + 38);
								v155 = v151 + 1760;
								v156 = v154 | v153 | v149;
								if (*(x_BYTE*)(v155 + 41))
								{
									if (*(x_BYTE*)(v155 + 39) & 0x10)
									{
										x_BYTE_E126D = 7;
										x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
									}
									else
									{
										x_BYTE_E126D = 5;
									}
									if (!(v156 & 2))
									{
										v157 = 0;
										if (!(v157 & 0xF00))
										{
											LOBYTE(v157) = *(x_BYTE*)(v155 + 42);
											v158 = (int*)((char*)unk_D4350 + 32 * v157);
											v248x[20] = v158[0];
											v248x[21] = v158[1];
											v248x[14] = v158[2];
											v248x[15] = v158[3];
											v248x[8] = v158[4];
											v248x[9] = v158[5];
											v248x[2] = v158[6];
											v248x[3] = v158[7];
											v159 = *(uint8_t*)(v155 + 41);
											x_BYTE_E126D = 5;
											BYTE1(v158) = *(x_BYTE*)(v155 + 38);
											// FIXME: types
											// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[v159];
											if (BYTE1(v158) & 1)
											{
												sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[12]);
												sub_B6253_draw_triangle(&v248x[0], &v248x[6], &v248x[12]);
											}
											else
											{
												sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[12]);
												sub_B6253_draw_triangle(&v248x[18], &v248x[0], &v248x[6]);
											}
										}
									}
								}
								if (*(x_WORD*)(v155 + 36))
									sub_3FD60B(/*(int)v25,*/ (Bit8u*)v155);
								v147 = v155 - 44;
							} while (v147 >= (Bit8u*)v25y);
						}
						v133 -= 1760;
					}
				}
				v160 = &x_DWORD_E9C38_smalltit[35200];
				v282 = 20;
				do
				{
					v161 = v160;
					for (ii = 39; ii; --ii)
					{
						v248x[18] = *(x_DWORD*)(v161 + 16);
						v248x[19] = *(x_DWORD*)(v161 + 20);
						v162 = *(x_DWORD*)(v161 + 32);
						v161 += 44;
						v248x[22] = v162;
						v163 = *(x_BYTE*)(v161 - 6);
						v164 = *(x_BYTE*)(v161 - 6);
						if (*(x_BYTE*)(v161 + 38) & 4)
							break;
						v248x[12] = *(x_DWORD*)(v161 + 16);
						v248x[13] = *(x_DWORD*)(v161 + 20);
						v248x[16] = *(x_DWORD*)(v161 + 32);
						v165 = *(x_BYTE*)(v161 + 38);
						v166 = v165 | v163;
						v167 = v165 & v164;
						v248x[6] = *(x_DWORD*)(v161 - 1744);
						v248x[7] = *(x_DWORD*)(v161 - 1740);
						v168 = *(x_DWORD*)(v161 - 1728);
						v169 = v161 - 1760;
						// FIXME: types
						// v248x[10] = (int)(x_DWORD*)v168;
						v170 = *(x_BYTE*)(v169 + 38);
						v248x[0] = *(x_DWORD*)(v169 - 28);
						v171 = *(x_DWORD*)(v169 - 24);
						v169 -= 44;
						v248x[1] = v171;
						v248x[4] = *(x_DWORD*)(v169 + 32);
						BYTE1(v171) = *(x_BYTE*)(v169 + 38);
						v172 = v169 + 1760;
						v173 = BYTE1(v171) | v170 | v166;
						v174 = BYTE1(v171) & v170 & v167;
						if (*(x_BYTE*)(v172 + 38) >= 0)
						{
							if (*(x_BYTE*)(v172 + 39) & 0x10)
							{
								x_BYTE_E126D = 7;
								x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
							}
							else
							{
								x_BYTE_E126D = 5;
							}
							if (!(v173 & 2) && !(v174 & 0x78))
							{
								v176 = (int*)((char*)unk_D4350 + 32 * *(uint8_t*)(v172 + 42));
								v248x[20] = v176[0];
								v248x[21] = v176[1];
								v248x[14] = v176[2];
								v248x[15] = v176[3];
								v248x[8] = v176[4];
								v248x[9] = v176[5];
								v248x[2] = v176[6];
								v248x[3] = v176[7];
								// FIXME: types
								// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[*(uint8_t*)(v172 + 41)];
								if (*(x_BYTE*)(v172 + 38) & 1)
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
									sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
								}
								else
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
									sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
								}
							}
						}
						else
						{
							x_BYTE_E126D = 26;
							if (!(v173 & 2) && !(v174 & 0x78))
							{
								v175 = (int*)((char*)unk_D4350 + 32 * *(uint8_t*)(v172 + 42));
								v248x[20] = v175[0];
								v248x[21] = v175[1];
								v248x[14] = v175[2];
								v248x[15] = v175[3];
								v248x[8] = v175[4];
								v248x[9] = v175[5];
								v248x[2] = v175[6];
								v248x[3] = v175[7];
								// FIXME: types
								// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[*(uint8_t*)(v172 + 41)];
								if (*(x_BYTE*)(v172 + 38) & 1)
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
									sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
								}
								else
								{
									sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
									sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
								}
							}
						}
						if (*(x_WORD*)(v172 + 36))
							sub_3E360_draw_particlesB(/*v160,*/ v172);
						v161 = v172 + 44;
					}
					if (ii)
					{
						v177 = v161 - 44;
						v178 = v160 + 1672;
						do
						{
							v248x[18] = *(x_DWORD*)(v178 + 16);
							v248x[19] = *(x_DWORD*)(v178 + 20);
							v248x[22] = *(x_DWORD*)(v178 + 32);
							v179 = *(x_BYTE*)(v178 + 38);
							v248x[12] = *(x_DWORD*)(v178 + 60);
							v248x[13] = *(x_DWORD*)(v178 + 64);
							v248x[16] = *(x_DWORD*)(v178 + 76);
							v180 = *(x_BYTE*)(v178 + 82);
							v248x[6] = *(x_DWORD*)(v178 - 1700);
							v248x[7] = *(x_DWORD*)(v178 - 1696);
							v181 = v179;
							// FIXME: types
							// v248x[10] = (int) * (x_DWORD * *)(v178 - 1684);
							v182 = *(x_BYTE*)(v178 - 1678);
							v183 = v182 | v180 | v179;
							v184 = v182 & v180 & v181;
							v185 = *(x_DWORD*)(v178 - 1744);
							v186 = v178 + 44;
							v248x[0] = v185;
							v187 = *(x_DWORD*)(v186 - 1784);
							v186 -= 1760;
							v248x[1] = v187;
							v188 = *(x_DWORD*)(v186 - 12);
							v186 -= 44;
							v248x[4] = v188;
							v189 = *(x_BYTE*)(v186 + 38);
							v190 = v186 + 1760;
							v191 = v189 | v183;
							v192 = v189 & v184;
							if (*(x_BYTE*)(v190 + 38) >= 0)
							{
								if (*(x_BYTE*)(v190 + 39) & 0x10)
								{
									x_BYTE_E126D = 7;
									x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
								}
								else
								{
									x_BYTE_E126D = 5;
								}
								if (!(v191 & 2) && !(v192 & 0x78))
								{
									v195 = (int*)((char*)unk_D4350 + 32 * *(uint8_t*)(v190 + 42));
									v248x[20] = v195[0];
									v248x[21] = v195[1];
									v248x[14] = v195[2];
									v248x[15] = v195[3];
									v248x[8] = v195[4];
									v248x[9] = v195[5];
									v248x[2] = v195[6];
									v248x[3] = v195[7];
									v196 = *(x_BYTE*)(v190 + 38);
									// FIXME: types
									// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[*(uint8_t*)(v190 + 41)];
									if (v196 & 1)
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
										sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
									}
									else
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
										sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
									}
								}
							}
							else
							{
								x_BYTE_E126D = 26;
								if (!(v191 & 2) && !(v192 & 0x78))
								{
									v193 = (int*)((char*)unk_D4350 + 32 * *(uint8_t*)(v190 + 42));
									v248x[20] = v193[0];
									v248x[21] = v193[1];
									v248x[14] = v193[2];
									v248x[15] = v193[3];
									v248x[8] = v193[4];
									v248x[9] = v193[5];
									v248x[2] = v193[6];
									v248x[3] = v193[7];
									v194 = *(x_BYTE*)(v190 + 38);
									// FIXME: types
									// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[*(uint8_t*)(v190 + 41)];
									if (v194 & 1)
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
										sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
									}
									else
									{
										sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
										sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
									}
								}
							}
							if (*(x_WORD*)(v190 + 36))
								sub_3E360_draw_particlesB(/*v160,*/ v190);
							v178 = v190 - 44;
						} while (v178 >= v177);
					}
					//LOBYTE(v56b) = v282 - 1;
					v160 -= 1760;
					v282--;
				} while (v282);
				return/* v56b*/;
			}
			for (jj = 40; jj; --jj)
			{
				v248x[31] = ((uint8_t)x_BYTE_12B4E0_shading[v279] << 8) + 128;
				v109 = *(x_DWORD*)(v278 + 12);
				v110 = v109 * v109 + *(x_DWORD*)v278 * *(x_DWORD*)v278;
				*(x_WORD*)(v278 + 36) = 0;
				if (v109 <= -256 || v110 >= str_F2C20ar.dword0x15)
				{
					*(x_BYTE*)(v278 + 38) |= 2u;
					goto LABEL_140;
				}
				if (v109 < 128)
					v109 = 128;
				*(x_DWORD*)(v278 + 16) = str_F2C20ar.dword0x18 * *(x_DWORD*)v278 / v109;
				v111 = v279;
				*(x_DWORD*)(v278 + 4) = 32 * x_BYTE_11B4E0_height[v279] - a6;
				v112 = (uint16_t)D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248 << 6;
				v248x[26] = x_DWORD_DB750[(v112 + (HIBYTE(v279) << 7)) & 0x7FF] >> 8;
				v113 = v248x[26] * (x_DWORD_DB750[(((uint8_t)v279 << 7) + v112) & 0x7FF] >> 8);
				v248x[26] = x_BYTE_11B4E0_height[v111];
				v25y = (Bit32u*)v278;
				*(x_DWORD*)(v278 + 8) = -(v248x[26] * ((v113 >> 4) + 0x8000) >> 10) - a6;
				// FIXME: types
				// // if (!(x_BYTE_13B4E0_angle[v111] & 8)
				// 	|| (v114 = (Bit32s*)v25y, v25y = (Bit32u*)(v25y[1] - (v113 >> 10)), v115 = v248x[31], v114[1] = (x_DWORD)v25y, v115 >= 14464))
				// {
				// 	v113 = 0;
				// }
				v116 = (v248x[31] << 8) + 8 * v113;
				if (v110 <= str_F2C20ar.dword0x13)
					goto LABEL_133;
				//v25 = (x_DWORD *)str_F2C20ar.dword0x16;
				if (v110 < str_F2C20ar.dword0x16)
				{
					v116 = v116 * (int64_t)(str_F2C20ar.dword0x16 - v110) / str_F2C20ar.dword0x12;
				LABEL_133:
					*(x_DWORD*)(v278 + 32) = v116;
					goto LABEL_134;
				}
				*(x_DWORD*)(v278 + 32) = 0;
			LABEL_134:
				v117 = v278;
				*(x_DWORD*)(v278 + 20) = str_F2C20ar.dword0x22 + str_F2C20ar.dword0x18 * *(x_DWORD*)(v278 + 4) / v109;
				*(x_DWORD*)(v278 + 28) = str_F2C20ar.dword0x22 + str_F2C20ar.dword0x18 * *(x_DWORD*)(v117 + 8) / v109;
				LOBYTE(v118) = v277[2] + v279;
				HIBYTE(v118) = v277[3] + HIBYTE(v279);
				v119 = x_BYTE_10B4E0_terraintype[v118];
				*(x_BYTE*)(v278 + 41) = v119;
				if (x_BYTE_D41D8[0xa4 + v119])
					* (x_BYTE*)(v278 + 38) |= 0x80u;
				if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.flat_0x2199)
					* (x_BYTE*)(v278 + 39) |= 0x10u;
				v120 = v278;
				*(x_BYTE*)(v278 + 43) = x_BYTE_D41D8[*(uint8_t*)(v278 + 41)];
				*(x_BYTE*)(v120 + 42) = v248x[32] + (((signed int)(uint8_t)x_BYTE_13B4E0_angle[v118] >> 2) & 0x1C);
				LOBYTE(v118) = v277[4] + v118;
				HIBYTE(v118) += v277[5];
				*(x_WORD*)(v278 + 36) = x_WORD_15B4E0_source[v118];
			LABEL_140:
				v121 = v277;
				*(x_WORD*)(v278 + 38) |= ((x_BYTE)v279 + HIBYTE(v279)) & 1;
				LOBYTE(v279) = v121[8] + v279;
				HIBYTE(v279) += v277[9];
				v278 += 44;
			}
			v122 = v277[6] + v279;
			HIBYTE(v279) += v277[7];
			LOBYTE(v279) = v122;
		}
	}
	v283 = 21;//21eb44 nothing changed
LABEL_259:
	if (v283)
	{
		v285 = 40;
		while (1)
		{
			if (!v285)
			{
				LOBYTE(v279) = v277[6] + v279;
				HIBYTE(v279) += v277[7];
				v283--;
				goto LABEL_259;
			}
			v197 = ((uint8_t)x_BYTE_12B4E0_shading[v279] << 8) + 128;
			v198 = *(x_DWORD*)(v278 + 12);
			v199 = v198 * v198 + *(x_DWORD*)v278 * *(x_DWORD*)v278;
			*(x_WORD*)(v278 + 36) = 0;
			if (v198 > -256 && v199 < str_F2C20ar.dword0x15)
				break;
			*(x_BYTE*)(v278 + 38) |= 2u;
		LABEL_256:
			v206 = v278;
			v207 = v277;
			*(x_WORD*)(v278 + 38) |= ((x_BYTE)v279 + HIBYTE(v279)) & 1;
			LOBYTE(v279) = v207[8] + v279;
			HIBYTE(v279) += v277[9];
			v285--;
			v278 = v206 + 44;
		}
		if (v198 < 128)
			v198 = 128;
		v200 = v279;
		*(x_DWORD*)(v278 + 16) = str_F2C20ar.dword0x18 * *(x_DWORD*)v278 / v198;
		*(x_DWORD*)(v278 + 4) = 32 * x_BYTE_11B4E0_height[v200] - a6;
		v201 = (uint16_t)D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248 << 6;
		v248x[26] = x_DWORD_DB750[(v201 + (HIBYTE(v279) << 7)) & 0x7FF] >> 8;
		v202 = v248x[26] * (x_DWORD_DB750[(((uint8_t)v279 << 7) + v201) & 0x7FF] >> 8);
		if (!(x_BYTE_13B4E0_angle[v200] & 8) || (*(x_DWORD*)(v278 + 4) -= v202 >> 10, v197 >= 14464))
			v202 = 0;
		v203 = (v197 << 8) + 8 * v202;
		if (v199 > str_F2C20ar.dword0x13)
		{
			if (v199 >= str_F2C20ar.dword0x16)
			{
				*(x_DWORD*)(v278 + 32) = 0;
			LABEL_254:
				*(x_DWORD*)(v278 + 20) = str_F2C20ar.dword0x22 + str_F2C20ar.dword0x18 * *(x_DWORD*)(v278 + 4) / v198;
				LOBYTE(v204) = v277[2] + v279;
				HIBYTE(v204) = v277[3] + HIBYTE(v279);
				v205 = (uint8_t*)v278;
				*(x_BYTE*)(v278 + 41) = x_BYTE_10B4E0_terraintype[v204];
				v205[43] = x_BYTE_D41D8[v205[41]];
				v205[42] = v248x[32] + (((signed int)(uint8_t)x_BYTE_13B4E0_angle[v204] >> 2) & 0x1C);
				LOBYTE(v204) = v277[4] + v204;
				HIBYTE(v204) += v277[5];
				*(x_WORD*)(v278 + 36) = x_WORD_15B4E0_source[v204];
				goto LABEL_256;
			}
			v203 = v203 * (int64_t)(str_F2C20ar.dword0x16 - v199) / str_F2C20ar.dword0x12;
		}
		*(x_DWORD*)(v278 + 32) = v203;
		goto LABEL_254;
	}//21edb7 nothing changed
	v208 = a8 & 0x7FF;//21edb7
	v209 = 840;
	v210 = x_DWORD_DB750[v208];
	v211 = x_DWORD_DB750[0x200 + v208];
	str_F2C20ar.dword0x0d = v210;
	str_F2C20ar.dword0x11 = v211;
	v56 = x_DWORD_E9C38_smalltit;
	while (v209)
	{
		v212 = str_F2C20ar.dword0x10;
		v213 = (str_F2C20ar.dword0x0d * *(x_DWORD*)(v56 + 16) + str_F2C20ar.dword0x11 * *(x_DWORD*)(v56 + 20)) >> 16;
		*(x_DWORD*)(v56 + 16) = ((*(x_DWORD*)(v56 + 16) * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * *(x_DWORD*)(v56 + 20)) >> 16)
			+ str_F2C20ar.dword0x24;
		v214 = v212 - v213;
		v215 = *(x_DWORD*)(v56 + 16);
		*(x_DWORD*)(v56 + 20) = v214;
		if (v215 >= 0)
		{
			if ((signed int)(uint16_t)x_DWORD_DE564 <= *(x_DWORD*)(v56 + 16))
				* (x_BYTE*)(v56 + 38) |= 0x10u;
		}
		else
		{
			*(x_BYTE*)(v56 + 38) |= 8u;
		}
		v216 = *(x_DWORD*)(v56 + 20);
		if (v216 >= 0)
		{
			if ((uint16_t)x_DWORD_DE568 <= v216)
				* (x_BYTE*)(v56 + 38) |= 0x40u;
		}
		else
		{
			*(x_BYTE*)(v56 + 38) |= 0x20u;
		}
		v56 += 44;
		v209--;
	}
	//adress 3de7d
	v217 = &x_DWORD_E9C38_smalltit[35200];//21ee85
	v289 = 20;
	do
	{
		v218 = v217;
		for (kk = 39; kk; kk--)
		{
			v248x[18] = *(x_DWORD*)(v218 + 16);
			v248x[19] = *(x_DWORD*)(v218 + 20);
			v248x[22] = *(x_DWORD*)(v218 + 32);
			v218 += 44;
			//v248x[22] = v56b;
			v219 = *(x_BYTE*)(v218 - 6);
			v220 = *(x_BYTE*)(v218 - 6);
			if (*(x_BYTE*)(v218 + 38) & 4)
				break;
			v248x[12] = *(x_DWORD*)(v218 + 16);
			v248x[13] = *(x_DWORD*)(v218 + 20);
			v248x[16] = *(x_DWORD*)(v218 + 32);
			v221 = *(x_BYTE*)(v218 + 38);
			v222 = v221 | v219;
			v223 = v221 & v220;
			v248x[6] = *(x_DWORD*)(v218 - 1744);
			v248x[7] = *(x_DWORD*)(v218 - 1740);
			v224 = *(x_DWORD*)(v218 - 1728);
			v225 = v218 - 1760;
			// FIXME: types
			// v248x[10] = (int)(x_DWORD*)v224;
			v226 = *(x_BYTE*)(v225 + 38);
			v248x[0] = *(x_DWORD*)(v225 - 28);
			v248x[1] = *(x_DWORD*)(v225 - 24);
			v225 -= 44;
			//v248x[1] = v56b;
			v248x[4] = *(x_DWORD*)(v225 + 32);
			//LOBYTE(v56b) = *(x_BYTE *)(v225 + 38);
			v227 = v225 + 1760;
			v228 = (*(x_BYTE*)(v225 + 38)) | v226 | v222;
			v229 = (*(x_BYTE*)(v225 + 38)) & v226 & v223;
			if (*(x_BYTE*)(v227 + 39) & 0x10)
			{
				x_BYTE_E126D = 7;
				//v56b = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
				x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
			}
			else
			{
				x_BYTE_E126D = 5;
			}
			if (!(v228 & 2) && !(v229 & 0x78))
			{//21ef76
				v230 = (int*)((char*)unk_D4350 + 32 * *(uint8_t*)(v227 + 42));
				v248x[20] = v230[0];
				v248x[21] = v230[1];
				v248x[14] = v230[2];
				v248x[15] = v230[3];
				v248x[8] = v230[4];
				v248x[9] = v230[5];
				v248x[2] = v230[6];
				v248x[3] = v230[7];
				// FIXME: types
				// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[*(uint8_t*)(v227 + 41)];
				if (*(x_BYTE*)(v227 + 38) & 1)
				{//adress 21ddf0
					sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
					//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
					//v56b = (int)&v248x[0];
					sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
					//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
				}
				else
				{
					sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
					//v56b = (int)&v248x[18];
					sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
				}
			}
			if (*(x_WORD*)(v227 + 36))
				/*LOBYTE(v56b) = */sub_3E360_draw_particlesB(/*v217,*/ v227);//21f01b
			v218 = v227 + 44;
		}
		//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
		if (kk)
		{
			v231 = v218 - 44;
			v232 = v217 + 1672;
			do
			{
				v248x[18] = *(x_DWORD*)(v232 + 16);
				v248x[19] = *(x_DWORD*)(v232 + 20);
				v248x[22] = *(x_DWORD*)(v232 + 32);
				v233 = *(x_BYTE*)(v232 + 38);
				v248x[12] = *(x_DWORD*)(v232 + 60);
				v248x[13] = *(x_DWORD*)(v232 + 64);
				v248x[16] = *(x_DWORD*)(v232 + 76);
				v234 = *(x_BYTE*)(v232 + 82);
				v248x[6] = *(x_DWORD*)(v232 - 1700);
				v248x[7] = *(x_DWORD*)(v232 - 1696);
				v235 = v233;
				// FIXME: types
				// v248x[10] = (int) * (x_DWORD * *)(v232 - 1684);
				v236 = *(x_BYTE*)(v232 - 1678);
				v237 = v236 | v234 | v233;
				v238 = v236 & v234 & v235;
				v239 = *(x_DWORD*)(v232 - 1744);
				v240 = v232 + 44;
				v248x[0] = v239;
				v241 = *(x_DWORD*)(v240 - 1784);
				v240 -= 1760;
				v248x[1] = v241;
				v248x[4] = *(x_DWORD*)(v240 - 12);
				v240 -= 44;
				//v248x[4] = v56b;
				v242 = *(x_BYTE*)(v240 + 38);
				v243 = v240 + 1760;
				v244 = v242 | v237;
				v245 = v242 & v238;
				if (*(x_BYTE*)(v243 + 39) & 0x10)
				{
					x_BYTE_E126D = 7;
					//v56b = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
					x_BYTE_E126C = ((signed int)v248x[10] + v248x[16] + v248x[22] + v248x[4]) >> 18;
				}
				else
				{
					x_BYTE_E126D = 5;
				}
				if (!(v244 & 2) && !(v245 & 0x78))
				{
					v246 = (int*)((char*)unk_D4350 + 32 * *(uint8_t*)(v243 + 42));
					v248x[20] = v246[0];
					v248x[21] = v246[1];
					v248x[14] = v246[2];
					v248x[15] = v246[3];
					v248x[8] = v246[4];
					v248x[9] = v246[5];
					v248x[2] = v246[6];
					v248x[3] = v246[7];
					// FIXME: types
					// x_DWORD_DE55C_ActTexture = (int)x_DWORD_DDF50_texture_adresses[*(uint8_t*)(v243 + 41)];
					if (*(x_BYTE*)(v243 + 38) & 1)
					{
						sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[0]);
						//v56b = (int)&v248x[0];
						sub_B6253_draw_triangle(&v248x[0], &v248x[12], &v248x[6]);
					}
					else
					{
						sub_B6253_draw_triangle(&v248x[18], &v248x[12], &v248x[6]);
						//v56b = (int)&v248x[18];
						sub_B6253_draw_triangle(&v248x[18], &v248x[6], &v248x[0]);
					}
				}
				if (*(x_WORD*)(v243 + 36))//adress 21f1b5 aex 360000 ebx 3f78a0 ecx 0 edx 414eb0
					/*LOBYTE(v56b) = */sub_3E360_draw_particlesB(/*v217,*/ v243);
				v232 = v243 - 44;
			} while (v232 >= v231);
		}
		v217 -= 1760;
		v289--;
	} while (v289);
	//return v56b;

}


#pragma pack (1)
typedef struct {
	Bit8u byte_0;
	Bit8u byte_1;
	Bit16u word_2;
	Bit16u word_4;
	char data_6[];
}
type_particle_str;
#pragma pack (16)


int debugcountersub_3E360 = 0;

//----- (0003E360) --------------------------------------------------------
void sub_3E360_draw_particles(/*int a1x, */int a2x)//21f360
{
	uint16_t result; // ax
	type_str_0x6E8E* v3x; // eax
	int16_t v4; // cx
	int v5; // ecx
	int v6; // edx
	int16_t *v7; // edi
	int v8; // ecx
	int v9; // ST18_4
	char v10; // al
	int v11; // ebx
	int v12; // eax
	int v13; // ebx
	int v14; // ebx
	int v15; // eax
	int v16; // ebx
	int v17; // ebx
	int v18; // ebx
	int v19; // eax
	int v20; // eax
	int v21; // eax
	int v22; // edx
	int v23; // eax
	int v24; // eax
	int v25; // ebx
	//int v26; // edx
	uint16_t v27; // ax
	int v28; // eax
	//int v29; // edx
	uint16_t v30; // ax
	int v31; // eax
	int v32; // ebx
	int v33; // eax
	//int v34; // edx
	int v35; // eax
	int v36; // eax
	int v37; // ebx
	int v38; // edx
	int v39; // eax
	int v40; // eax
	int v41; // eax
	int v42; // eax
	int v43; // ebx
	char v44; // ch
	uint8_t v45; // al
	int v46; // ecx
	int v47; // eax
	int v48; // eax
	int v49; // ecx
	int16_t *v50; // ebx
	int v51; // edx
	int16_t *v52; // edi
	int v53; // ecx
	int v54; // ST1C_4
	char v55; // al
	int v56; // ebx
	int v57; // eax
	int v58; // ebx
	int v59; // ebx
	//Bit32u* v60; // esi
	int v61; // ebx
	int v62; // ebx
	int v63; // eax
	//int v64; // edx
	uint16_t v65; // ax
	int v66; // eax
	int v67; // eax
	int v68; // eax
	//int v69; // edx
	int v70; // eax
	int v71; // eax
	int v72; // ebx
	int v73; // eax
	//int v74; // edx
	int v75; // eax
	int v76; // eax
	int v77; // eax
	int v78; // eax
	int v79; // ebx
	int v80; // eax
	int v81; // eax
	int v82; // ebx
	int v83; // edx
	int v84; // eax
	int v85; // eax
	int v86; // eax
	//int v87; // edx
	uint16_t v88; // ax
	int v89; // eax
	type_str_0x6E8E* v90x; // ebx
	int16_t v91; // cx
	uint8_t v92; // al
	char v93; // cl
	int v94; // eax
	int v95; // eax
	int v96; // [esp+0h] [ebp-20h]
	int v97; // [esp+8h] [ebp-18h]
	int v98; // [esp+10h] [ebp-10h]
	int v99; // [esp+18h] [ebp-8h]
	int v100; // [esp+1Ch] [ebp-4h]

	//fix
	type_particle_str* a1y = NULL;
	//fix

	result = str_E9C38_smalltit[a2x].word36;
	do
	{
		//adress 21f370

		v3x = x_DWORD_EA3E4[result];
		str_F2C20ar.dword0x14x = v3x;
		if (!(v3x->struct_byte_0xc_12_15.byte[0] & 0x21))
		{
			v4 = v3x->array_0x4C_76.y;
			v96 = (int16_t)(v3x->array_0x4C_76.x - x_WORD_F2CC4);
			v97 = (int16_t)(x_WORD_F2CC2 - v4);
			if (x_BYTE_F2CC7)
			{
				if (!str_E9C38_smalltit[a2x].byte43 && !(v3x->struct_byte_0xc_12_15.word[1] & 0x808))
				{
					//adress 21f40c
					v98 = sub_B5C60_getTerrainAlt2(v3x->array_0x4C_76.x, v4) - str_F2C20ar.dword0x20;
					v5 = (str_F2C20ar.dword0x0f * v96 - str_F2C20ar.dword0x17 * v97) >> 16;
					v99 = (str_F2C20ar.dword0x17 * v96 + str_F2C20ar.dword0x0f * v97) >> 16;
					v6 = v99 * v99 + v5 * v5;
					if (v99 > 64 && v6 < str_F2C20ar.dword0x15)
					{
						if (v6 <= str_F2C20ar.dword0x13)
							str_F2C20ar.dword0x00 = 0x2000;
						else
							str_F2C20ar.dword0x00 = v6 < str_F2C20ar.dword0x16 ? 32 * (str_F2C20ar.dword0x16 - (v99 * v99 + v5 * v5)) / str_F2C20ar.dword0x12 << 8 : 0;
						v7 = (short*)&x_WORD_D951C[7 * str_F2C20ar.dword0x14x->word_0x5A_90];
						if (!*((x_BYTE *)v7 + 10))
						{
							v8 = v5 * str_F2C20ar.dword0x18 / v99;
							v9 = str_F2C20ar.dword0x18 * v98 / v99 + str_F2C20ar.dword0x22;
							str_F2C20ar.dword0x04_screenY = ((v8 * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * v9) >> 16) + str_F2C20ar.dword0x24;
							str_F2C20ar.dword0x03_screenX = str_F2C20ar.dword0x10 - ((str_F2C20ar.dword0x0d * v8 + v9 * str_F2C20ar.dword0x11) >> 16);
							v10 = *((x_BYTE *)v7 + 12);
							x_BYTE_F2CC6 = 0;
							switch (v10)
							{
							case 0:
								v11 = (uint16_t)*v7;
								if (x_DWORD_F66F0x[v11])
								{
									v12 = (uint16_t)*v7;
									v13 = 4 * v11;
								}
								else
								{
									if (!sub_71520_mainInitTmaps(v11))
										goto LABEL_178;
									v12 = (uint16_t)*v7;
									v13 = 4 * v12;
								}
								x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 2 * (v12 + v13) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								a1y = (type_particle_str*)*(x_DWORD *)x_DWORD_F66F0x[(uint16_t)*v7];
								goto LABEL_51;
							case 1:
								if (!x_DWORD_F66F0x[(uint16_t)*v7] && !sub_71520_mainInitTmaps(*v7))
									goto LABEL_178;
								x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)*v7 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v7];
								goto LABEL_51;
							case 2:
							case 3:
							case 4:
							case 5:
							case 6:
							case 7:
							case 8:
							case 9:
							case 10:
							case 11:
							case 12:
							case 13:
							case 14:
							case 15:
							case 16:
								goto LABEL_29;
							case 17:
								v25 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
								if (v25 < 8)
								{
									if (x_DWORD_F66F0x[v25 + (uint16_t)*v7])
									{
										//v26 = (int)x_D41A0_BYTEARRAY_4;
										v27 = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v25 + (uint16_t)*v7) + 8);
									}
									else
									{
										if (!sub_71520_mainInitTmaps(v25 + *v7))
											goto LABEL_178;
										//v26 = (int)x_D41A0_BYTEARRAY_4;
										v27 = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v25 + (uint16_t)*v7) + 8);
									}
									x_DWORD_F5730.at(v27) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									a1y = (type_particle_str*)*x_DWORD_F66F0x[v25 + (uint16_t)*v7];
									goto LABEL_51;
								}
								if (x_DWORD_F66F0x[(uint16_t)*v7 + 15 - v25])
								{
									//v29 = (int)x_D41A0_BYTEARRAY_4;
									v30 = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)*v7 + 15 - v25) + 8);
								}
								else
								{
									if (!sub_71520_mainInitTmaps(*v7 + 15 - v25))
										goto LABEL_178;
									//v29 = (int)x_D41A0_BYTEARRAY_4;
									v30 = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)*v7 + 15 - v25) + 8);
								}
								x_DWORD_F5730.at(v30) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v7 + 15 - v25];
								str_F2C20ar.dword0x08_width = a1y->word_2;
								str_F2C20ar.dword0x06_height = a1y->word_4;
								v31 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
								str_F2C20ar.dword0x0c_realHeight = v31;
								str_F2C20ar.dword0x09_realWidth = v31 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
								v21 = -str_F2C20ar.dword0x08_width;
								goto LABEL_72;
							case 18:
								v32 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
								v33 = v32 + (uint16_t)*v7;
								if (x_DWORD_F66F0x[v33])
								{
									v35 = *(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v33 + 8);
									//v34 = (int)x_D41A0_BYTEARRAY_4;
								}
								else
								{
									if (!sub_71520_mainInitTmaps(v32 + *v7))
										goto LABEL_178;
									//v34 = (int)x_D41A0_BYTEARRAY_4;
									v35 = *(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v32 + (uint16_t)*v7) + 8);
								}
								x_DWORD_F5730.at(v35) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								a1y = (type_particle_str*)*x_DWORD_F66F0x[v32 + (uint16_t)*v7];
								str_F2C20ar.dword0x08_width = a1y->word_2;
								str_F2C20ar.dword0x06_height = a1y->word_4;
								v36 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
								str_F2C20ar.dword0x0c_realHeight = v36;
								str_F2C20ar.dword0x09_realWidth = v36 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
								v21 = str_F2C20ar.dword0x08_width;
								goto LABEL_72;
							case 19:
								v18 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
								if (v18 >= 8)
								{
									v22 = (uint8_t)x_BYTE_D4750[0xc+v18];
									v23 = v22 + (uint16_t)*v7;
									if (x_DWORD_F66F0x[v23])
									{
										x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v23 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									else
									{
										if (!sub_71520_mainInitTmaps(*v7 + (uint8_t)v22))
											goto LABEL_178;
										x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER
											+ 10 * ((uint16_t)*v7 + (uint8_t)x_BYTE_D4750[0xc + v18])
											+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v7 + (uint8_t)x_BYTE_D4750[0xc + v18]];
									str_F2C20ar.dword0x08_width = a1y->word_2;
									str_F2C20ar.dword0x06_height = a1y->word_4;
									v24 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
									str_F2C20ar.dword0x0c_realHeight = v24;
									str_F2C20ar.dword0x09_realWidth = v24 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
									v21 = -str_F2C20ar.dword0x08_width;
								}
								else
								{
									v19 = (uint8_t)x_BYTE_D4750[0xc + v18] + (uint16_t)*v7;
									if (x_DWORD_F66F0x[v19])
									{
										x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v19 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									else
									{
										if (!sub_71520_mainInitTmaps(*v7 + (uint8_t)x_BYTE_D4750[0xc + v18]))
											goto LABEL_178;
										x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER
											+ 10 * ((uint16_t)*v7 + (uint8_t)x_BYTE_D4750[0xc + v18])
											+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v7 + (uint8_t)x_BYTE_D4750[0xc + v18]];
									str_F2C20ar.dword0x08_width = a1y->word_2;
									str_F2C20ar.dword0x06_height = a1y->word_4;
									v20 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
									str_F2C20ar.dword0x0c_realHeight = v20;
									str_F2C20ar.dword0x09_realWidth = v20 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
									v21 = str_F2C20ar.dword0x08_width;
								}
								goto LABEL_72;
							case 20:
								v37 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
								if (v37 >= 8)
								{
									v41 = (uint16_t)*v7 + (uint8_t)x_BYTE_D4750[0x1c+v37];
									if (!x_DWORD_F66F0x[v41])
									{
										if (!sub_71520_mainInitTmaps(*v7 + (uint8_t)x_BYTE_D4750[0x1c + v37]))
											goto LABEL_178;
										v41 = (uint8_t)x_BYTE_D4750[0x1c + v37] + (uint16_t)*v7;
									}
									x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v41 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v7 + (uint8_t)x_BYTE_D4750[0x1c + v37]];
									str_F2C20ar.dword0x08_width = a1y->word_2;
									str_F2C20ar.dword0x06_height = a1y->word_4;
									v42 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
									str_F2C20ar.dword0x0c_realHeight = v42;
									str_F2C20ar.dword0x09_realWidth = v42 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
									v21 = -str_F2C20ar.dword0x08_width;
								}
								else
								{
									v38 = (uint8_t)x_BYTE_D4750[0x1c + v37];
									v39 = v38 + (uint16_t)*v7;
									if (x_DWORD_F66F0x[v39])
									{
										x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v39 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									else
									{
										if (!sub_71520_mainInitTmaps(*v7 + (uint8_t)v38))
											goto LABEL_178;
										x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER
											+ 10 * ((uint16_t)*v7 + (uint8_t)x_BYTE_D4750[0x1c + v37])
											+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v7 + (uint8_t)x_BYTE_D4750[0x1c + v37]];
									str_F2C20ar.dword0x08_width = a1y->word_2;
									str_F2C20ar.dword0x06_height = a1y->word_4;
									v40 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
									str_F2C20ar.dword0x0c_realHeight = v40;
									str_F2C20ar.dword0x09_realWidth = v40 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
									v21 = str_F2C20ar.dword0x08_width;
								}
								goto LABEL_72;
							case 21:
								v14 = (uint16_t)*v7;
								if (x_DWORD_F66F0x[v14])
								{
									v15 = (uint16_t)*v7;
									v16 = 4 * v14;
								}
								else
								{
									if (!sub_71520_mainInitTmaps(v14))
										goto LABEL_178;
									v15 = (uint16_t)*v7;
									v16 = 4 * v15;
								}
								x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 2 * (v15 + v16) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v7];
								goto LABEL_51;
							case 22:
							case 23:
							case 24:
							case 25:
							case 26:
							case 27:
							case 28:
							case 29:
							case 30:
							case 31:
							case 32:
							case 33:
							case 34:
							case 35:
							case 36:
								x_BYTE_F2CC6 = 1;
							LABEL_29:
								v17 = (uint16_t)*v7 + str_F2C20ar.dword0x14x->byte_0x5C_92;
								if (x_DWORD_F66F0x[v17])
								{
									x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v17 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								}
								else
								{
									if (!sub_71520_mainInitTmaps(*v7 + str_F2C20ar.dword0x14x->byte_0x5C_92))
										goto LABEL_178;
									x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER
										+ 10
										* ((uint16_t)*v7 + str_F2C20ar.dword0x14x->byte_0x5C_92)
										+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								}
								a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v7 + str_F2C20ar.dword0x14x->byte_0x5C_92];
							LABEL_51:
								str_F2C20ar.dword0x08_width = a1y->word_2;
								str_F2C20ar.dword0x06_height = a1y->word_4;
								v28 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
								str_F2C20ar.dword0x0c_realHeight = v28;
								str_F2C20ar.dword0x09_realWidth = v28 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
								v21 = str_F2C20ar.dword0x08_width;
							LABEL_72:
								str_F2C20ar.dword0x05 = v21;
							LABEL_73:
								v43 = str_F2C20ar.dword0x00;
								v44 = a1y->byte_0 | 8;
								// FIXME: types
								// str_F2C20ar.dword0x02_data = (int)a1y->data_6;
								a1y->byte_0 = v44;
								if (v43 == 0x2000)
									v45 = x_BYTE_D4750[*((uint8_t *)v7 + 10)];
								else
									v45 = x_BYTE_D4750[6+*((uint8_t *)v7 + 10)];
								str_F2C20ar.dword0x01_rotIdx = v45;
								v46 = str_F2C20ar.dword0x0c_realHeight >> 2;
								str_F2C20ar.dword0x0c_realHeight >>= 2;
								if (str_F2C20ar.dword0x09_realWidth > 0 && v46 > 0)
								{
									v47 = str_F2C20ar.dword0x00 >> 2;
									if (isNotDayLevel)
										str_F2C20ar.dword0x00 = 0x2000 - v47;
									else
										str_F2C20ar.dword0x00 = v47 + 0x2000;
									str_F2C20ar.dword0x01_rotIdx = 8;
									sub_41BD3_subDrawSprite(0);
								}
								break;
							default:
								goto LABEL_73;
							}
						}
					}
				}
			}
			if (str_F2C20ar.dword0x14x->struct_byte_0xc_12_15.byte[3] >= 0)
				v48 = str_F2C20ar.dword0x14x->array_0x4C_76.z;
			else
				v48 = str_F2C20ar.dword0x14x->array_0x4C_76.z - 160;
			v100 = (str_F2C20ar.dword0x17 * v96 + str_F2C20ar.dword0x0f * v97) >> 16;
			v49 = (str_F2C20ar.dword0x0f * v96 - str_F2C20ar.dword0x17 * v97) >> 16;
			if (str_F2C20ar.dword0x14x->struct_byte_0xc_12_15.byte[3] & 0x20)
			{
				v50 = (int16_t *)((char *)ar_D404C + 22 * str_F2C20ar.dword0x14x->byte_0x3B_59);
				switch ((((x_DWORD_EA3E4[str_F2C20ar.dword0x14x->word_0x32_50]->word_0x1C_28
					- (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4)
				{
				case 0:
				case 15:
					v100 -= v50[8];
					break;
				case 1:
				case 14:
					v100 -= v50[9];
					break;
				case 2:
				case 13:
					v100 -= v50[10];
					break;
				case 5:
				case 10:
					v100 += v50[10];
					break;
				case 6:
				case 9:
					v100 += v50[9];
					break;
				case 7:
				case 8:
					v100 += v50[8];
					break;
				default:
					break;
				}
			}
			v51 = v100 * v100 + v49 * v49;
			if (v100 > 64 && v51 < str_F2C20ar.dword0x15)
			{
				if (v51 <= str_F2C20ar.dword0x13)
				{
					str_F2C20ar.dword0x00 = 0x2000;
				}
				else if (v51 < str_F2C20ar.dword0x16)
				{
					str_F2C20ar.dword0x00 = 32 * (str_F2C20ar.dword0x16 - (v100 * v100 + v49 * v49)) / str_F2C20ar.dword0x12 << 8;
				}
				else
				{
					str_F2C20ar.dword0x00 = 0;
				}
				v52 = (short*)&x_WORD_D951C[7 * str_F2C20ar.dword0x14x->word_0x5A_90];
				v53 = v49 * str_F2C20ar.dword0x18 / v100;
				v54 = str_F2C20ar.dword0x18 * (v48 - str_F2C20ar.dword0x20) / v100 + str_F2C20ar.dword0x22;
				str_F2C20ar.dword0x04_screenY = ((v53 * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * v54) >> 16) + str_F2C20ar.dword0x24;
				str_F2C20ar.dword0x03_screenX = str_F2C20ar.dword0x10 - ((str_F2C20ar.dword0x0d * v53 + v54 * str_F2C20ar.dword0x11) >> 16);
				v55 = *((x_BYTE *)v52 + 12);
				x_BYTE_F2CC6 = 0;
				switch (v55)
				{
				case 0:
					v56 = (uint16_t)*v52;
					if (x_DWORD_F66F0x[v56])
					{
						v57 = (uint16_t)*v52;
						v58 = 4 * v56;
						goto LABEL_105;
					}
					if (sub_71520_mainInitTmaps(v56))
					{
						v57 = (uint16_t)*v52;
						v58 = 4 * v57;
					LABEL_105:
						x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 2 * (v57 + v58) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v52];
						goto LABEL_141;
					}
					break;
				case 1:
					if (x_DWORD_F66F0x[(uint16_t)*v52])
					{
						x_DWORD_F5730.at(*(uint16_t *)(10 * (uint16_t)*v52 + TMAPS00TAB_BEGIN_BUFFER + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					else
					{
						if (!sub_71520_mainInitTmaps(*v52))
							break;
						x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)*v52 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v52];
					goto LABEL_141;
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
				case 11:
				case 12:
				case 13:
				case 14:
				case 15:
				case 16:
					goto LABEL_117;
				case 17:
					v72 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
					if (str_F2C20ar.dword0x14x->struct_byte_0xc_12_15.byte[3] & 0x40)
						v72 = (uint8_t)x_BYTE_D4750[0x2c+v72];
					if (v72 < 8)
					{
						v73 = v72 + (uint16_t)*v52;
						if (x_DWORD_F66F0x[v73])
						{
							//v74 = (int)x_D41A0_BYTEARRAY_4;
							v75 = *(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v73 + 8);
						}
						else
						{
							if (!sub_71520_mainInitTmaps(v72 + *v52))
								break;
							//v74 = (int)x_D41A0_BYTEARRAY_4;
							v75 = *(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v72 + (uint16_t)*v52) + 8);
						}
						x_DWORD_F5730.at(v75) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v52 + v72];
						goto LABEL_141;
					}
					v77 = (uint16_t)*v52 + 15 - v72;
					if (x_DWORD_F66F0x[v77])
					{
						x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v77 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					else
					{
						if (!sub_71520_mainInitTmaps(*v52 + 15 - v72))
							break;
						x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)*v52 + 15 - v72) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v52 + 15 - v72];
					str_F2C20ar.dword0x08_width = a1y->word_2;
					str_F2C20ar.dword0x06_height = a1y->word_4;
					v78 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
					str_F2C20ar.dword0x0c_realHeight = v78;
					str_F2C20ar.dword0x09_realWidth = v78 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
					v67 = -str_F2C20ar.dword0x08_width;
					goto LABEL_163;
				case 18:
					v79 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
					v80 = v79 + (uint16_t)*v52;
					if (x_DWORD_F66F0x[v80])
					{
						x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v80 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					else
					{
						if (!sub_71520_mainInitTmaps(v79 + *v52))
							break;
						x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v79 + (uint16_t)*v52) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					a1y = (type_particle_str*)*x_DWORD_F66F0x[v79 + (uint16_t)*v52];
					str_F2C20ar.dword0x08_width = a1y->word_2;
					str_F2C20ar.dword0x06_height = a1y->word_4;
					v81 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
					str_F2C20ar.dword0x0c_realHeight = v81;
					str_F2C20ar.dword0x09_realWidth = v81 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
					v67 = str_F2C20ar.dword0x08_width;
					goto LABEL_163;
				case 19:
					v62 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
					if (v62 >= 8)
					{
						v68 = (uint16_t)*v52 + (uint8_t)x_BYTE_D4750[0xc + v62];
						if (x_DWORD_F66F0x[v68])
						{
							v70 = *(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v68 + 8);
							//v69 = (int)x_D41A0_BYTEARRAY_4;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v52 + (uint8_t)x_BYTE_D4750[0xc + v62]))
								break;
							//v69 = (int)x_D41A0_BYTEARRAY_4;
							v70 = *(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER
								+ 10 * ((uint16_t)*v52 + (uint8_t)x_BYTE_D4750[0xc + v62])
								+ 8);
						}
						x_DWORD_F5730.at(v70) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v52 + (uint8_t)x_BYTE_D4750[0xc + v62]];
						str_F2C20ar.dword0x08_width = a1y->word_2;
						str_F2C20ar.dword0x06_height = a1y->word_4;
						v71 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
						str_F2C20ar.dword0x0c_realHeight = v71;
						str_F2C20ar.dword0x09_realWidth = v71 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v67 = -str_F2C20ar.dword0x08_width;
					}
					else
					{
						v63 = (uint16_t)*v52 + (uint8_t)x_BYTE_D4750[0xc + v62];
						if (x_DWORD_F66F0x[v63])
						{
							//v64 = (int)x_D41A0_BYTEARRAY_4;
							v65 = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v63 + 8);
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v52 + (uint8_t)x_BYTE_D4750[0xc + v62]))
								break;
							//v64 = (int)x_D41A0_BYTEARRAY_4;
							v65 = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint8_t)x_BYTE_D4750[0xc + v62] + (uint16_t)*v52) + 8);
						}
						x_DWORD_F5730.at(v65) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v52 + (uint8_t)x_BYTE_D4750[0xc + v62]];
						str_F2C20ar.dword0x08_width = a1y->word_2;
						str_F2C20ar.dword0x06_height = a1y->word_4;
						v66 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
						str_F2C20ar.dword0x0c_realHeight = v66;
						str_F2C20ar.dword0x09_realWidth = v66 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v67 = str_F2C20ar.dword0x08_width;
					}
					goto LABEL_163;
				case 20:
					v82 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
					if (v82 >= 8)
					{
						v86 = (uint8_t)x_BYTE_D4750[0x1c + v82] + (uint16_t)*v52;
						if (x_DWORD_F66F0x[v86])
						{
							//v87 = (int)x_D41A0_BYTEARRAY_4;
							v88 = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v86 + 8);
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v52 + (uint8_t)x_BYTE_D4750[0x1c + v82]))
								break;
							//v87 = (int)x_D41A0_BYTEARRAY_4;
							v88 = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)*v52 + (uint8_t)x_BYTE_D4750[0x1c + v82]) + 8);
						}
						x_DWORD_F5730.at(v88) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v52 + (uint8_t)x_BYTE_D4750[0x1c + v82]];
						str_F2C20ar.dword0x08_width = a1y->word_2;
						str_F2C20ar.dword0x06_height = a1y->word_4;
						v89 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
						str_F2C20ar.dword0x0c_realHeight = v89;
						str_F2C20ar.dword0x09_realWidth = v89 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v67 = -str_F2C20ar.dword0x08_width;
					}
					else
					{
						v83 = (uint8_t)x_BYTE_D4750[0x1c + v82];
						v84 = v83 + (uint16_t)*v52;
						if (x_DWORD_F66F0x[v84])
						{
							x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v84 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v52 + (uint8_t)v83))
								break;
							x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER
								+ 10 * ((uint16_t)*v52 + (uint8_t)x_BYTE_D4750[0x1c + v82])
								+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v52 + (uint8_t)x_BYTE_D4750[0x1c + v82]];
						str_F2C20ar.dword0x08_width = a1y->word_2;
						str_F2C20ar.dword0x06_height = a1y->word_4;
						v85 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
						str_F2C20ar.dword0x0c_realHeight = v85;
						str_F2C20ar.dword0x09_realWidth = v85 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v67 = str_F2C20ar.dword0x08_width;
					}
					goto LABEL_163;
				case 21:
					v59 = (uint16_t)*v52;
					if (x_DWORD_F66F0x[v59])
					{
						x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v59 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					else
					{
						if (!sub_71520_mainInitTmaps(v59))
							break;
						x_DWORD_F5730.at(*(uint16_t *)(10 * (uint16_t)*v52 + TMAPS00TAB_BEGIN_BUFFER + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v52];
					x_BYTE_F2CC6 = 1;
					//a1 = (Bit8u*)*v60;
					goto LABEL_141;
				case 22:
				case 23:
				case 24:
				case 25:
				case 26:
				case 27:
				case 28:
				case 29:
				case 30:
				case 31:
				case 32:
				case 33:
				case 34:
				case 35:
				case 36:
					x_BYTE_F2CC6 = 1;
				LABEL_117:
					v61 = (uint16_t)*v52 + str_F2C20ar.dword0x14x->byte_0x5C_92;
					if (x_DWORD_F66F0x[v61])
					{
						x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v61 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					else
					{
						if (!sub_71520_mainInitTmaps(*v52 + str_F2C20ar.dword0x14x->byte_0x5C_92))
							break;
						x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER
							+ 10 * ((uint16_t)*v52 + str_F2C20ar.dword0x14x->byte_0x5C_92)
							+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v52 + str_F2C20ar.dword0x14x->byte_0x5C_92];
				LABEL_141:
					str_F2C20ar.dword0x08_width = a1y->word_2;
					str_F2C20ar.dword0x06_height = a1y->word_4;
					v76 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
					str_F2C20ar.dword0x0c_realHeight = v76;
					str_F2C20ar.dword0x09_realWidth = v76 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
					v67 = str_F2C20ar.dword0x08_width;
				LABEL_163:
					str_F2C20ar.dword0x05 = v67;
				LABEL_164:
					v90x = str_F2C20ar.dword0x14x;
					a1y->byte_0 |= 8u;
					v91 = v90x->struct_byte_0xc_12_15.byte[2];
					// FIXME: types
					// str_F2C20ar.dword0x02_data = (int)(a1y->data_6);
					if (v91 & 0x380)
					{
						v93 = v90x->struct_byte_0xc_12_15.byte[3];
						if (v93 & 2)
						{
							v94 = (uint8_t)x_BYTE_E88E0x[0x2+3
								* x_DWORD_EA3E4[v90x->word_0x28_40]->dword_0xA4_164x->word_0x38_56];
							str_F2C20ar.dword0x01_rotIdx = 4;
							str_F2C20ar.dword0x07 = v94;
						}
						else if (v93 & 4)
						{
							v95 = (uint8_t)x_BYTE_E88E0x[0x2+3
								* x_DWORD_EA3E4[v90x->word_0x28_40]->dword_0xA4_164x->word_0x38_56];
							str_F2C20ar.dword0x01_rotIdx = 5;
							str_F2C20ar.dword0x07 = v95;
						}
						else if (v90x->struct_byte_0xc_12_15.byte[2] >= 0)
						{
							if (v93 & 1)
								str_F2C20ar.dword0x01_rotIdx = 3;
						}
						else
						{
							str_F2C20ar.dword0x01_rotIdx = 2;
						}
					}
					else
					{
						if (str_F2C20ar.dword0x00 == 0x2000)
							v92 = x_BYTE_D4750[*((uint8_t *)v52 + 10)];
						else
							v92 = x_BYTE_D4750[6 + *((uint8_t *)v52 + 10)];
						str_F2C20ar.dword0x01_rotIdx = v92;
					}
					str_F2C20ar.dword0x09_realWidth++;
					str_F2C20ar.dword0x0c_realHeight++;
					sub_41BD3_subDrawSprite(1u);
					break;
				default:
					goto LABEL_164;
				}
			}
		}
	LABEL_178:
		result = str_F2C20ar.dword0x14x->word_0x16_22;
	} while (result);
	/*VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	x_DWORD_180628b_screen_buffer = x_DWORD_180628b_screen_buffer;//debug*/
	//return result;
}







void sub_3E360_draw_particlesB(/*Bit8u* a1,*/ Bit8u* a2)//21f360
{
	uint16_t result; // ax
	type_str_0x6E8E* v3x; // eax
	int16_t v4; // cx
	int v5; // ecx
	int v6; // edx
	int16_t* v7; // edi
	int v8; // ecx
	int v9; // ST18_4
	char v10; // al
	int v11; // ebx
	int v12; // eax
	int v13; // ebx
	int v14; // ebx
	int v15; // eax
	int v16; // ebx
	int v17; // ebx
	int v18; // ebx
	int v19; // eax
	int v20; // eax
	int v21; // eax
	int v22; // edx
	int v23; // eax
	int v24; // eax
	int v25; // ebx
	//int v26; // edx
	uint16_t v27; // ax
	int v28; // eax
	//int v29; // edx
	uint16_t v30; // ax
	int v31; // eax
	int v32; // ebx
	int v33; // eax
	//int v34; // edx
	int v35; // eax
	int v36; // eax
	int v37; // ebx
	int v38; // edx
	int v39; // eax
	int v40; // eax
	int v41; // eax
	int v42; // eax
	int v43; // ebx
	char v44; // ch
	uint8_t v45; // al
	int v46; // ecx
	int v47; // eax
	int v48; // eax
	int v49; // ecx
	int16_t* v50; // ebx
	int v51; // edx
	int16_t* v52; // edi
	int v53; // ecx
	int v54; // ST1C_4
	char v55; // al
	int v56; // ebx
	int v57; // eax
	int v58; // ebx
	int v59; // ebx
	//Bit32u* v60; // esi
	int v61; // ebx
	int v62; // ebx
	int v63; // eax
	//int v64; // edx
	uint16_t v65; // ax
	int v66; // eax
	int v67; // eax
	int v68; // eax
	//int v69; // edx
	int v70; // eax
	int v71; // eax
	int v72; // ebx
	int v73; // eax
	//int v74; // edx
	int v75; // eax
	int v76; // eax
	int v77; // eax
	int v78; // eax
	int v79; // ebx
	int v80; // eax
	int v81; // eax
	int v82; // ebx
	int v83; // edx
	int v84; // eax
	int v85; // eax
	int v86; // eax
	//int v87; // edx
	uint16_t v88; // ax
	int v89; // eax
	type_str_0x6E8E* v90x; // ebx
	int16_t v91; // cx
	uint8_t v92; // al
	char v93; // cl
	int v94; // eax
	int v95; // eax
	int v96; // [esp+0h] [ebp-20h]
	int v97; // [esp+8h] [ebp-18h]
	int v98; // [esp+10h] [ebp-10h]
	int v99; // [esp+18h] [ebp-8h]
	int v100; // [esp+1Ch] [ebp-4h]

	// FIXME: segfault just after label LABEL_73 when accessing a1y
	std::cerr << "FIXME: Skip particles for the moment" << std::endl;
	return;

	type_particle_str* a1y = NULL;

	result = *(x_WORD*)(a2 + 36);
	do
	{
		//adress 21f370

		v3x = x_DWORD_EA3E4[result];
		str_F2C20ar.dword0x14x = v3x;
		if (!(v3x->struct_byte_0xc_12_15.byte[0] & 0x21))
		{
			v4 = v3x->array_0x4C_76.y;
			v96 = (int16_t)(v3x->array_0x4C_76.x - x_WORD_F2CC4);
			v97 = (int16_t)(x_WORD_F2CC2 - v4);
			if (x_BYTE_F2CC7)
			{
				if (!*(x_BYTE*)(a2 + 43) && !(v3x->struct_byte_0xc_12_15.word[1] & 0x808))
				{
					//adress 21f40c
					v98 = sub_B5C60_getTerrainAlt2(v3x->array_0x4C_76.x, v4) - str_F2C20ar.dword0x20;
					v5 = (str_F2C20ar.dword0x0f * v96 - str_F2C20ar.dword0x17 * v97) >> 16;
					v99 = (str_F2C20ar.dword0x17 * v96 + str_F2C20ar.dword0x0f * v97) >> 16;
					v6 = v99 * v99 + v5 * v5;
					if (v99 > 64 && v6 < str_F2C20ar.dword0x15)
					{
						if (v6 <= str_F2C20ar.dword0x13)
							str_F2C20ar.dword0x00 = 0x2000;
						else
							str_F2C20ar.dword0x00 = v6 < str_F2C20ar.dword0x16 ? 32 * (str_F2C20ar.dword0x16 - (v99 * v99 + v5 * v5)) / str_F2C20ar.dword0x12 << 8 : 0;
						v7 = (short*)& x_WORD_D951C[7 * str_F2C20ar.dword0x14x->word_0x5A_90];
						if (!*((x_BYTE*)v7 + 10))
						{
							v8 = v5 * str_F2C20ar.dword0x18 / v99;
							v9 = str_F2C20ar.dword0x18 * v98 / v99 + str_F2C20ar.dword0x22;
							str_F2C20ar.dword0x04_screenY = ((v8 * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * v9) >> 16) + str_F2C20ar.dword0x24;
							str_F2C20ar.dword0x03_screenX = str_F2C20ar.dword0x10 - ((str_F2C20ar.dword0x0d * v8 + v9 * str_F2C20ar.dword0x11) >> 16);
							v10 = *((x_BYTE*)v7 + 12);
							x_BYTE_F2CC6 = 0;
							switch (v10)
							{
							case 0:
								v11 = (uint16_t)* v7;
								if (x_DWORD_F66F0x[v11])
								{
									v12 = (uint16_t)* v7;
									v13 = 4 * v11;
								}
								else
								{
									if (!sub_71520_mainInitTmaps(v11))
										goto LABEL_178;
									v12 = (uint16_t)* v7;
									v13 = 4 * v12;
								}
								x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 2 * (v12 + v13) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)*v7];
								goto LABEL_51;
							case 1:
								if (!x_DWORD_F66F0x[(uint16_t)* v7] && !sub_71520_mainInitTmaps(*v7))
									goto LABEL_178;
								x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)* v7 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v7];
								goto LABEL_51;
							case 2:
							case 3:
							case 4:
							case 5:
							case 6:
							case 7:
							case 8:
							case 9:
							case 10:
							case 11:
							case 12:
							case 13:
							case 14:
							case 15:
							case 16:
								goto LABEL_29;
							case 17:
								v25 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
								if (v25 < 8)
								{
									if (x_DWORD_F66F0x[v25 + (uint16_t)* v7])
									{
										//v26 = (int)x_D41A0_BYTEARRAY_4;
										v27 = *(x_WORD*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v25 + (uint16_t)* v7) + 8);
									}
									else
									{
										if (!sub_71520_mainInitTmaps(v25 + *v7))
											goto LABEL_178;
										//v26 = (int)x_D41A0_BYTEARRAY_4;
										v27 = *(x_WORD*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v25 + (uint16_t)* v7) + 8);
									}
									x_DWORD_F5730.at(v27) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									a1y = (type_particle_str*)*x_DWORD_F66F0x[v25 + (uint16_t)* v7];
									goto LABEL_51;
								}
								if (x_DWORD_F66F0x[(uint16_t)* v7 + 15 - v25])
								{
									//v29 = (int)x_D41A0_BYTEARRAY_4;
									v30 = *(x_WORD*)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)* v7 + 15 - v25) + 8);
								}
								else
								{
									if (!sub_71520_mainInitTmaps(*v7 + 15 - v25))
										goto LABEL_178;
									//v29 = (int)x_D41A0_BYTEARRAY_4;
									v30 = *(x_WORD*)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)* v7 + 15 - v25) + 8);
								}
								x_DWORD_F5730.at(v30) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v7 + 15 - v25];
								str_F2C20ar.dword0x08_width = a1y->word_2;
								str_F2C20ar.dword0x06_height = a1y->word_4;
								v31 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
								str_F2C20ar.dword0x0c_realHeight = v31;
								str_F2C20ar.dword0x09_realWidth = v31 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
								v21 = -str_F2C20ar.dword0x08_width;
								goto LABEL_72;
							case 18:
								v32 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
								v33 = v32 + (uint16_t)* v7;
								if (x_DWORD_F66F0x[v33])
								{
									v35 = *(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v33 + 8);
									//v34 = (int)x_D41A0_BYTEARRAY_4;
								}
								else
								{
									if (!sub_71520_mainInitTmaps(v32 + *v7))
										goto LABEL_178;
									//v34 = (int)x_D41A0_BYTEARRAY_4;
									v35 = *(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v32 + (uint16_t)* v7) + 8);
								}
								x_DWORD_F5730.at(v35) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								a1y = (type_particle_str*)*x_DWORD_F66F0x[v32 + (uint16_t)* v7];
								str_F2C20ar.dword0x08_width = a1y->word_2;
								str_F2C20ar.dword0x06_height = a1y->word_4;
								v36 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
								str_F2C20ar.dword0x0c_realHeight = v36;
								str_F2C20ar.dword0x09_realWidth = v36 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
								v21 = str_F2C20ar.dword0x08_width;
								goto LABEL_72;
							case 19:
								v18 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
								if (v18 >= 8)
								{
									v22 = (uint8_t)x_BYTE_D4750[0xc + v18];
									v23 = v22 + (uint16_t)* v7;
									if (x_DWORD_F66F0x[v23])
									{
										x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v23 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									else
									{
										if (!sub_71520_mainInitTmaps(*v7 + (uint8_t)v22))
											goto LABEL_178;
										x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER
											+ 10 * ((uint16_t)* v7 + (uint8_t)x_BYTE_D4750[0xc + v18])
											+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v7 + (uint8_t)x_BYTE_D4750[0xc + v18]];
									str_F2C20ar.dword0x08_width = a1y->word_2;
									str_F2C20ar.dword0x06_height = a1y->word_4;
									v24 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
									str_F2C20ar.dword0x0c_realHeight = v24;
									str_F2C20ar.dword0x09_realWidth = v24 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
									v21 = -str_F2C20ar.dword0x08_width;
								}
								else
								{
									v19 = (uint8_t)x_BYTE_D4750[0xc + v18] + (uint16_t)* v7;
									if (x_DWORD_F66F0x[v19])
									{
										x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v19 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									else
									{
										if (!sub_71520_mainInitTmaps(*v7 + (uint8_t)x_BYTE_D4750[0xc + v18]))
											goto LABEL_178;
										x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER
											+ 10 * ((uint16_t)* v7 + (uint8_t)x_BYTE_D4750[0xc + v18])
											+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v7 + (uint8_t)x_BYTE_D4750[0xc + v18]];
									str_F2C20ar.dword0x08_width = a1y->word_2;
									str_F2C20ar.dword0x06_height = a1y->word_4;
									v20 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
									str_F2C20ar.dword0x0c_realHeight = v20;
									str_F2C20ar.dword0x09_realWidth = v20 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
									v21 = str_F2C20ar.dword0x08_width;
								}
								goto LABEL_72;
							case 20:
								v37 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
								if (v37 >= 8)
								{
									v41 = (uint16_t)* v7 + (uint8_t)x_BYTE_D4750[0x1c + v37];
									if (!x_DWORD_F66F0x[v41])
									{
										if (!sub_71520_mainInitTmaps(*v7 + (uint8_t)x_BYTE_D4750[0x1c + v37]))
											goto LABEL_178;
										v41 = (uint8_t)x_BYTE_D4750[0x1c + v37] + (uint16_t)* v7;
									}
									x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v41 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v7 + (uint8_t)x_BYTE_D4750[0x1c + v37]];
									str_F2C20ar.dword0x08_width = a1y->word_2;
									str_F2C20ar.dword0x06_height = a1y->word_4;
									v42 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
									str_F2C20ar.dword0x0c_realHeight = v42;
									str_F2C20ar.dword0x09_realWidth = v42 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
									v21 = -str_F2C20ar.dword0x08_width;
								}
								else
								{
									v38 = (uint8_t)x_BYTE_D4750[0x1c + v37];
									v39 = v38 + (uint16_t)* v7;
									if (x_DWORD_F66F0x[v39])
									{
										x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v39 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									else
									{
										if (!sub_71520_mainInitTmaps(*v7 + (uint8_t)v38))
											goto LABEL_178;
										x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER
											+ 10 * ((uint16_t)* v7 + (uint8_t)x_BYTE_D4750[0x1c + v37])
											+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
									}
									a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v7 + (uint8_t)x_BYTE_D4750[0x1c + v37]];
									str_F2C20ar.dword0x08_width = a1y->word_2;
									str_F2C20ar.dword0x06_height = a1y->word_4;
									v40 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
									str_F2C20ar.dword0x0c_realHeight = v40;
									str_F2C20ar.dword0x09_realWidth = v40 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
									v21 = str_F2C20ar.dword0x08_width;
								}
								goto LABEL_72;
							case 21:
								v14 = (uint16_t)* v7;
								if (x_DWORD_F66F0x[v14])
								{
									v15 = (uint16_t)* v7;
									v16 = 4 * v14;
								}
								else
								{
									if (!sub_71520_mainInitTmaps(v14))
										goto LABEL_178;
									v15 = (uint16_t)* v7;
									v16 = 4 * v15;
								}
								x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 2 * (v15 + v16) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v7];
								goto LABEL_51;
							case 22:
							case 23:
							case 24:
							case 25:
							case 26:
							case 27:
							case 28:
							case 29:
							case 30:
							case 31:
							case 32:
							case 33:
							case 34:
							case 35:
							case 36:
								x_BYTE_F2CC6 = 1;
							LABEL_29:
								v17 = (uint16_t)* v7 + str_F2C20ar.dword0x14x->byte_0x5C_92;
								if (x_DWORD_F66F0x[v17])
								{
									x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v17 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								}
								else
								{
									if (!sub_71520_mainInitTmaps(*v7 + str_F2C20ar.dword0x14x->byte_0x5C_92))
										goto LABEL_178;
									x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER
										+ 10
										* ((uint16_t)* v7 + str_F2C20ar.dword0x14x->byte_0x5C_92)
										+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
								}
								a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v7 + str_F2C20ar.dword0x14x->byte_0x5C_92];
							LABEL_51:
								str_F2C20ar.dword0x08_width = a1y->word_2;
								str_F2C20ar.dword0x06_height = a1y->word_4;
								v28 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v7[4]) / v99;
								str_F2C20ar.dword0x0c_realHeight = v28;
								str_F2C20ar.dword0x09_realWidth = v28 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
								v21 = str_F2C20ar.dword0x08_width;
							LABEL_72:
								str_F2C20ar.dword0x05 = v21;
							LABEL_73:
								v43 = str_F2C20ar.dword0x00;
								v44 = a1y->byte_0 | 8;
								// FIXME: types
								// str_F2C20ar.dword0x02_data = (int)(a1y->data_6);
								a1y->byte_0 = v44;
								if (v43 == 0x2000)
									v45 = x_BYTE_D4750[*((uint8_t*)v7 + 10)];
								else
									v45 = x_BYTE_D4750[6 + *((uint8_t*)v7 + 10)];
								str_F2C20ar.dword0x01_rotIdx = v45;
								v46 = str_F2C20ar.dword0x0c_realHeight >> 2;
								str_F2C20ar.dword0x0c_realHeight >>= 2;
								if (str_F2C20ar.dword0x09_realWidth > 0 && v46 > 0)
								{
									v47 = str_F2C20ar.dword0x00 >> 2;
									if (isNotDayLevel)
										str_F2C20ar.dword0x00 = 0x2000 - v47;
									else
										str_F2C20ar.dword0x00 = v47 + 0x2000;
									str_F2C20ar.dword0x01_rotIdx = 8;
									sub_41BD3_subDrawSprite(0);
								}
								break;
							default:
								goto LABEL_73;
							}
						}
					}
				}
			}
			if (str_F2C20ar.dword0x14x->struct_byte_0xc_12_15.byte[3] >= 0)
				v48 = str_F2C20ar.dword0x14x->array_0x4C_76.z;
			else
				v48 = str_F2C20ar.dword0x14x->array_0x4C_76.z - 160;
			v100 = (str_F2C20ar.dword0x17 * v96 + str_F2C20ar.dword0x0f * v97) >> 16;
			v49 = (str_F2C20ar.dword0x0f * v96 - str_F2C20ar.dword0x17 * v97) >> 16;
			if (str_F2C20ar.dword0x14x->struct_byte_0xc_12_15.byte[3] & 0x20)
			{
				v50 = (int16_t*)((char*)ar_D404C + 22 * str_F2C20ar.dword0x14x->byte_0x3B_59);
				switch ((((x_DWORD_EA3E4[str_F2C20ar.dword0x14x->word_0x32_50]->word_0x1C_28
					- (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4)
				{
				case 0:
				case 15:
					v100 -= v50[8];
					break;
				case 1:
				case 14:
					v100 -= v50[9];
					break;
				case 2:
				case 13:
					v100 -= v50[10];
					break;
				case 5:
				case 10:
					v100 += v50[10];
					break;
				case 6:
				case 9:
					v100 += v50[9];
					break;
				case 7:
				case 8:
					v100 += v50[8];
					break;
				default:
					break;
				}
			}
			v51 = v100 * v100 + v49 * v49;
			if (v100 > 64 && v51 < str_F2C20ar.dword0x15)
			{
				if (v51 <= str_F2C20ar.dword0x13)
				{
					str_F2C20ar.dword0x00 = 0x2000;
				}
				else if (v51 < str_F2C20ar.dword0x16)
				{
					str_F2C20ar.dword0x00 = 32 * (str_F2C20ar.dword0x16 - (v100 * v100 + v49 * v49)) / str_F2C20ar.dword0x12 << 8;
				}
				else
				{
					str_F2C20ar.dword0x00 = 0;
				}
				v52 = (short*)& x_WORD_D951C[7 * str_F2C20ar.dword0x14x->word_0x5A_90];
				v53 = v49 * str_F2C20ar.dword0x18 / v100;
				v54 = str_F2C20ar.dword0x18 * (v48 - str_F2C20ar.dword0x20) / v100 + str_F2C20ar.dword0x22;
				str_F2C20ar.dword0x04_screenY = ((v53 * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * v54) >> 16) + str_F2C20ar.dword0x24;
				str_F2C20ar.dword0x03_screenX = str_F2C20ar.dword0x10 - ((str_F2C20ar.dword0x0d * v53 + v54 * str_F2C20ar.dword0x11) >> 16);
				v55 = *((x_BYTE*)v52 + 12);
				x_BYTE_F2CC6 = 0;
				switch (v55)
				{
				case 0:
					v56 = (uint16_t)* v52;
					if (x_DWORD_F66F0x[v56])
					{
						v57 = (uint16_t)* v52;
						v58 = 4 * v56;
						goto LABEL_105;
					}
					if (sub_71520_mainInitTmaps(v56))
					{
						v57 = (uint16_t)* v52;
						v58 = 4 * v57;
					LABEL_105:
						x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 2 * (v57 + v58) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v52];
						goto LABEL_141;
					}
					break;
				case 1:
					if (x_DWORD_F66F0x[(uint16_t)* v52])
					{
						x_DWORD_F5730.at(*(uint16_t*)(10 * (uint16_t)* v52 + TMAPS00TAB_BEGIN_BUFFER + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					else
					{
						if (!sub_71520_mainInitTmaps(*v52))
							break;
						x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)* v52 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v52];
					goto LABEL_141;
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
				case 11:
				case 12:
				case 13:
				case 14:
				case 15:
				case 16:
					goto LABEL_117;
				case 17:
					v72 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
					if (str_F2C20ar.dword0x14x->struct_byte_0xc_12_15.byte[3] & 0x40)
						v72 = (uint8_t)x_BYTE_D4750[0x2c + v72];
					if (v72 < 8)
					{
						v73 = v72 + (uint16_t)* v52;
						if (x_DWORD_F66F0x[v73])
						{
							//v74 = (int)x_D41A0_BYTEARRAY_4;
							v75 = *(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v73 + 8);
						}
						else
						{
							if (!sub_71520_mainInitTmaps(v72 + *v52))
								break;
							//v74 = (int)x_D41A0_BYTEARRAY_4;
							v75 = *(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v72 + (uint16_t)* v52) + 8);
						}
						x_DWORD_F5730.at(v75) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v52 + v72];
						goto LABEL_141;
					}
					v77 = (uint16_t)* v52 + 15 - v72;
					if (x_DWORD_F66F0x[v77])
					{
						x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v77 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					else
					{
						if (!sub_71520_mainInitTmaps(*v52 + 15 - v72))
							break;
						x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)* v52 + 15 - v72) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v52 + 15 - v72];
					str_F2C20ar.dword0x08_width = a1y->word_2;
					str_F2C20ar.dword0x06_height = a1y->word_4;
					v78 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
					str_F2C20ar.dword0x0c_realHeight = v78;
					str_F2C20ar.dword0x09_realWidth = v78 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
					v67 = -str_F2C20ar.dword0x08_width;
					goto LABEL_163;
				case 18:
					v79 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
					v80 = v79 + (uint16_t)* v52;
					if (x_DWORD_F66F0x[v80])
					{
						x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v80 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					else
					{
						if (!sub_71520_mainInitTmaps(v79 + *v52))
							break;
						x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v79 + (uint16_t)* v52) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					a1y = (type_particle_str*)*x_DWORD_F66F0x[v79 + (uint16_t)* v52];
					str_F2C20ar.dword0x08_width = a1y->word_2;
					str_F2C20ar.dword0x06_height = a1y->word_4;
					v81 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
					str_F2C20ar.dword0x0c_realHeight = v81;
					str_F2C20ar.dword0x09_realWidth = v81 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
					v67 = str_F2C20ar.dword0x08_width;
					goto LABEL_163;
				case 19:
					v62 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
					if (v62 >= 8)
					{
						v68 = (uint16_t)* v52 + (uint8_t)x_BYTE_D4750[0xc + v62];
						if (x_DWORD_F66F0x[v68])
						{
							v70 = *(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v68 + 8);
							//v69 = (int)x_D41A0_BYTEARRAY_4;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v52 + (uint8_t)x_BYTE_D4750[0xc + v62]))
								break;
							//v69 = (int)x_D41A0_BYTEARRAY_4;
							v70 = *(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER
								+ 10 * ((uint16_t)* v52 + (uint8_t)x_BYTE_D4750[0xc + v62])
								+ 8);
						}
						x_DWORD_F5730.at(v70) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v52 + (uint8_t)x_BYTE_D4750[0xc + v62]];
						str_F2C20ar.dword0x08_width = a1y->word_2;
						str_F2C20ar.dword0x06_height = a1y->word_4;
						v71 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
						str_F2C20ar.dword0x0c_realHeight = v71;
						str_F2C20ar.dword0x09_realWidth = v71 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v67 = -str_F2C20ar.dword0x08_width;
					}
					else
					{
						v63 = (uint16_t)* v52 + (uint8_t)x_BYTE_D4750[0xc + v62];
						if (x_DWORD_F66F0x[v63])
						{
							//v64 = (int)x_D41A0_BYTEARRAY_4;
							v65 = *(x_WORD*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v63 + 8);
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v52 + (uint8_t)x_BYTE_D4750[0xc + v62]))
								break;
							//v64 = (int)x_D41A0_BYTEARRAY_4;
							v65 = *(x_WORD*)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint8_t)x_BYTE_D4750[0xc + v62] + (uint16_t)* v52) + 8);
						}
						x_DWORD_F5730.at(v65) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v52 + (uint8_t)x_BYTE_D4750[0xc + v62]];
						str_F2C20ar.dword0x08_width = a1y->word_2;
						str_F2C20ar.dword0x06_height = a1y->word_4;
						v66 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
						str_F2C20ar.dword0x0c_realHeight = v66;
						str_F2C20ar.dword0x09_realWidth = v66 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v67 = str_F2C20ar.dword0x08_width;
					}
					goto LABEL_163;
				case 20:
					v82 = (((str_F2C20ar.dword0x14x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
					if (v82 >= 8)
					{
						v86 = (uint8_t)x_BYTE_D4750[0x1c + v82] + (uint16_t)* v52;
						if (x_DWORD_F66F0x[v86])
						{
							//v87 = (int)x_D41A0_BYTEARRAY_4;
							v88 = *(x_WORD*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v86 + 8);
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v52 + (uint8_t)x_BYTE_D4750[0x1c + v82]))
								break;
							//v87 = (int)x_D41A0_BYTEARRAY_4;
							v88 = *(x_WORD*)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)* v52 + (uint8_t)x_BYTE_D4750[0x1c + v82]) + 8);
						}
						x_DWORD_F5730.at(v88) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v52 + (uint8_t)x_BYTE_D4750[0x1c + v82]];
						str_F2C20ar.dword0x08_width = a1y->word_2;
						str_F2C20ar.dword0x06_height = a1y->word_4;
						v89 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
						str_F2C20ar.dword0x0c_realHeight = v89;
						str_F2C20ar.dword0x09_realWidth = v89 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v67 = -str_F2C20ar.dword0x08_width;
					}
					else
					{
						v83 = (uint8_t)x_BYTE_D4750[0x1c + v82];
						v84 = v83 + (uint16_t)* v52;
						if (x_DWORD_F66F0x[v84])
						{
							x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v84 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v52 + (uint8_t)v83))
								break;
							x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER
								+ 10 * ((uint16_t)* v52 + (uint8_t)x_BYTE_D4750[0x1c + v82])
								+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v52 + (uint8_t)x_BYTE_D4750[0x1c + v82]];
						str_F2C20ar.dword0x08_width = a1y->word_2;
						str_F2C20ar.dword0x06_height = a1y->word_4;
						v85 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
						str_F2C20ar.dword0x0c_realHeight = v85;
						str_F2C20ar.dword0x09_realWidth = v85 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v67 = str_F2C20ar.dword0x08_width;
					}
					goto LABEL_163;
				case 21:
					v59 = (uint16_t)* v52;
					if (x_DWORD_F66F0x[v59])
					{
						x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v59 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					else
					{
						if (!sub_71520_mainInitTmaps(v59))
							break;
						x_DWORD_F5730.at(*(uint16_t*)(10 * (uint16_t)* v52 + TMAPS00TAB_BEGIN_BUFFER + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					a1y= (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v52];
					x_BYTE_F2CC6 = 1;
					//a1 = (Bit8u*)* v60;
					goto LABEL_141;
				case 22:
				case 23:
				case 24:
				case 25:
				case 26:
				case 27:
				case 28:
				case 29:
				case 30:
				case 31:
				case 32:
				case 33:
				case 34:
				case 35:
				case 36:
					x_BYTE_F2CC6 = 1;
				LABEL_117:
					v61 = (uint16_t)* v52 + str_F2C20ar.dword0x14x->byte_0x5C_92;
					if (x_DWORD_F66F0x[v61])
					{
						x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v61 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					else
					{
						if (!sub_71520_mainInitTmaps(*v52 + str_F2C20ar.dword0x14x->byte_0x5C_92))
							break;
						x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER
							+ 10 * ((uint16_t)* v52 + str_F2C20ar.dword0x14x->byte_0x5C_92)
							+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
					}
					a1y = (type_particle_str*)*x_DWORD_F66F0x[(uint16_t)* v52 + str_F2C20ar.dword0x14x->byte_0x5C_92];
				LABEL_141:
					str_F2C20ar.dword0x08_width = a1y->word_2;
					str_F2C20ar.dword0x06_height = a1y->word_4;
					v76 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v52[4]) / v100;
					str_F2C20ar.dword0x0c_realHeight = v76;
					str_F2C20ar.dword0x09_realWidth = v76 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
					v67 = str_F2C20ar.dword0x08_width;
				LABEL_163:
					str_F2C20ar.dword0x05 = v67;
				LABEL_164:
					v90x = str_F2C20ar.dword0x14x;
					a1y->byte_0 |= 8u;
					v91 = v90x->struct_byte_0xc_12_15.byte[2];
					// FIXME: types
					// str_F2C20ar.dword0x02_data = (int)(a1y->data_6);
					if (v91 & 0x380)
					{
						v93 = v90x->struct_byte_0xc_12_15.byte[3];
						if (v93 & 2)
						{
							v94 = (uint8_t)x_BYTE_E88E0x[0x2 + 3
								* x_DWORD_EA3E4[v90x->word_0x28_40]->dword_0xA4_164x->word_0x38_56];
							str_F2C20ar.dword0x01_rotIdx = 4;
							str_F2C20ar.dword0x07 = v94;
						}
						else if (v93 & 4)
						{
							v95 = (uint8_t)x_BYTE_E88E0x[0x2 + 3
								* x_DWORD_EA3E4[v90x->word_0x28_40]->dword_0xA4_164x->word_0x38_56];
							str_F2C20ar.dword0x01_rotIdx = 5;
							str_F2C20ar.dword0x07 = v95;
						}
						else if (v90x->struct_byte_0xc_12_15.byte[2] >= 0)
						{
							if (v93 & 1)
								str_F2C20ar.dword0x01_rotIdx = 3;
						}
						else
						{
							str_F2C20ar.dword0x01_rotIdx = 2;
						}
					}
					else
					{
						if (str_F2C20ar.dword0x00 == 0x2000)
							v92 = x_BYTE_D4750[*((uint8_t*)v52 + 10)];
						else
							v92 = x_BYTE_D4750[6 + *((uint8_t*)v52 + 10)];
						str_F2C20ar.dword0x01_rotIdx = v92;
					}
					str_F2C20ar.dword0x09_realWidth++;
					str_F2C20ar.dword0x0c_realHeight++;
					sub_41BD3_subDrawSprite(1u);
					break;
				default:
					goto LABEL_164;
				}
			}
		}
	LABEL_178:
		result = str_F2C20ar.dword0x14x->word_0x16_22;
	} while (result);
	/*VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	x_DWORD_180628b_screen_buffer = x_DWORD_180628b_screen_buffer;//debug*/
	//return result;
}






//----- (0003FD60) --------------------------------------------------------
uint16_t sub_3FD60(int a2x)//220d60
{
	uint16_t result; // ax
	type_str_0x6E8E* v3x; // eax
	int v4; // edx
	int v5; // eax
	int v6; // ecx
	int v7; // esi
	int v8; // edx
	int16_t *v9; // esi
	int v10; // ecx
	int v11; // ST0C_4
	char v12; // al
	int v13; // ebx
	int v14; // eax
	int v15; // ebx
	int v16; // ebx
	Bit32u* v17; // edi
	int v18; // eax
	int v19; // ebx
	int v20; // edx
	int v21; // eax
	int v22; // eax
	int v23; // eax
	int v24; // eax
	int v25; // eax
	int v26; // ebx
	int v27; // eax
	int v28; // eax
	int v29; // ebx
	int v30; // eax
	int v31; // eax
	int v32; // ebx
	int v33; // eax
	int v34; // eax
	int v35; // eax
	int v36; // eax
	char v37; // cl
	int v38; // eax
	uint8_t v39; // al
	int v40; // [esp+0h] [ebp-Ch]
	type_str_0x6E8E* v41x; // [esp+4h] [ebp-8h]
	int v42; // [esp+8h] [ebp-4h]

	//fix
	v41x = 0;
	int a1;
	//fix

	//result = *(x_WORD *)(a2 + 36);
	result = str_E9C38_smalltit[a2x].word36;
	do
	{
		if (result < 0x3E8u)
		{
			v3x = x_DWORD_EA3E4[result];
			v41x = v3x;
			if (!(v3x->struct_byte_0xc_12_15.byte[0] & 0x21))
			{
				v4 = (int16_t)(v3x->array_0x4C_76.x - x_WORD_F2CC4);
				v5 = (int16_t)(x_WORD_F2CC2 - v3x->array_0x4C_76.y);
				v42 = -v3x->array_0x4C_76.z - str_F2C20ar.dword0x20;
				v6 = (v4 * str_F2C20ar.dword0x0f - v5 * str_F2C20ar.dword0x17) >> 16;
				v40 = (str_F2C20ar.dword0x17 * v4 + str_F2C20ar.dword0x0f * v5) >> 16;
				v7 = (str_F2C20ar.dword0x17 * v4 + str_F2C20ar.dword0x0f * v5) >> 16;
				v8 = v40 * v40 + v6 * v6;
				if (v7 > 64 && v8 < str_F2C20ar.dword0x15)
				{
					if (v8 <= str_F2C20ar.dword0x13)
					{
						str_F2C20ar.dword0x00 = 0x2000;
					}
					else if (v8 < str_F2C20ar.dword0x16)
					{
						str_F2C20ar.dword0x00 = 32 * (str_F2C20ar.dword0x16 - (v40 * v40 + v6 * v6)) / str_F2C20ar.dword0x12 << 8;
					}
					else
					{
						str_F2C20ar.dword0x00 = 0;
					}
					v9 = (short*)&x_WORD_D951C[7 * v41x->word_0x5A_90];
					v10 = v6 * str_F2C20ar.dword0x18 / v40;
					v11 = str_F2C20ar.dword0x18 * v42 / v40 + str_F2C20ar.dword0x22;
					str_F2C20ar.dword0x04_screenY = ((v10 * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * v11) >> 16) + str_F2C20ar.dword0x24;
					str_F2C20ar.dword0x03_screenX = str_F2C20ar.dword0x10 - ((str_F2C20ar.dword0x0d * v10 + v11 * str_F2C20ar.dword0x11) >> 16);
					v12 = *((x_BYTE *)v9 + 12);
					x_BYTE_F2CC6 = 0;
					switch (v12)
					{
					case 0:
						v13 = (uint16_t)*v9;
						if (x_DWORD_F66F0x[v13])
						{
							v14 = (uint16_t)*v9;
							v15 = 4 * v13;
							goto LABEL_16;
						}
						if (sub_71520_mainInitTmaps(v13))
						{
							v14 = (uint16_t)*v9;
							v15 = 4 * v14;
						LABEL_16:
							x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 2 * (v14 + v15) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							a1 = *x_DWORD_F66F0x[(uint16_t)*v9];
							goto LABEL_47;
						}
						break;
					case 1:
						if (!x_DWORD_F66F0x[(uint16_t)*v9] && !sub_71520_mainInitTmaps(*v9))
							break;
						x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)*v9 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1 = *x_DWORD_F66F0x[(uint16_t)*v9];
						goto LABEL_47;
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
					case 12:
					case 13:
					case 14:
					case 15:
					case 16:
						goto LABEL_26;
					case 17:
						v26 = (((v41x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
						if (v26 < 8)
						{
							if (x_DWORD_F66F0x[v26 + (uint16_t)*v9])
							{
								x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v26 + (uint16_t)*v9) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							else
							{
								if (!sub_71520_mainInitTmaps(v26 + *v9))
									break;
								x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v26 + (uint16_t)*v9) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							a1 = *x_DWORD_F66F0x[v26 + (uint16_t)*v9];
							goto LABEL_47;
						}
						if (x_DWORD_F66F0x[(uint16_t)*v9 + 15 - v26])
						{
							x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)*v9 + 15 - v26) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v9 + 15 - v26))
								break;
							x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)*v9 + 15 - v26) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						a1 = *x_DWORD_F66F0x[(uint16_t)*v9 + 15 - v26];
						str_F2C20ar.dword0x08_width = *(uint16_t *)(a1 + 2);
						str_F2C20ar.dword0x06_height = *(uint16_t *)(a1 + 4);
						v28 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
						str_F2C20ar.dword0x0c_realHeight = v28;
						str_F2C20ar.dword0x09_realWidth = v28 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v23 = -str_F2C20ar.dword0x08_width;
						goto LABEL_69;
					case 18:
						v29 = (((v41x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
						v30 = v29 + (uint16_t)*v9;
						if (x_DWORD_F66F0x[v30])
						{
							x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v30 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(v29 + *v9))
								break;
							x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v29 + (uint16_t)*v9) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						a1 = *x_DWORD_F66F0x[(uint16_t)*v9 + v29];
						str_F2C20ar.dword0x08_width = *(uint16_t *)(a1 + 2);
						str_F2C20ar.dword0x06_height = *(uint16_t *)(a1 + 4);
						v31 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
						str_F2C20ar.dword0x0c_realHeight = v31;
						str_F2C20ar.dword0x09_realWidth = v31 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v23 = str_F2C20ar.dword0x08_width;
						goto LABEL_69;
					case 19:
						v19 = (((v41x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
						if (v19 >= 8)
						{
							v24 = (uint16_t)*v9 + (uint8_t)x_BYTE_D4750[0xc + v19];
							if (!x_DWORD_F66F0x[v24])
							{
								if (!sub_71520_mainInitTmaps(*v9 + (uint8_t)x_BYTE_D4750[0xc + v19]))
									break;
								v24 = (uint16_t)*v9 + (uint8_t)x_BYTE_D4750[0xc + v19];
							}
							x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v24 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							a1 = *x_DWORD_F66F0x[(uint16_t)*v9 + (uint8_t)x_BYTE_D4750[0xc + v19]];
							str_F2C20ar.dword0x08_width = *(uint16_t *)(a1 + 2);
							str_F2C20ar.dword0x06_height = *(uint16_t *)(a1 + 4);
							v25 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
							str_F2C20ar.dword0x0c_realHeight = v25;
							str_F2C20ar.dword0x09_realWidth = v25 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
							v23 = -str_F2C20ar.dword0x08_width;
						}
						else
						{
							v20 = (uint8_t)x_BYTE_D4750[0xc + v19];
							v21 = v20 + (uint16_t)*v9;
							if (x_DWORD_F66F0x[v21])
							{
								x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v21 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							else
							{
								if (!sub_71520_mainInitTmaps(*v9 + (uint8_t)v20))
									break;
								x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER
									+ 10 * ((uint16_t)*v9 + (uint8_t)x_BYTE_D4750[0xc + v19])
									+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							a1 = *x_DWORD_F66F0x[(uint16_t)*v9 + (uint8_t)x_BYTE_D4750[0xc + v19]];
							str_F2C20ar.dword0x08_width = *(uint16_t *)(a1 + 2);
							str_F2C20ar.dword0x06_height = *(uint16_t *)(a1 + 4);
							v22 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
							str_F2C20ar.dword0x0c_realHeight = v22;
							str_F2C20ar.dword0x09_realWidth = v22 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
							v23 = str_F2C20ar.dword0x08_width;
						}
						goto LABEL_69;
					case 20:
						v32 = (((v41x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
						if (v32 >= 8)
						{
							v35 = (uint16_t)*v9 + (uint8_t)x_BYTE_D4750[0x1c + v32];
							if (x_DWORD_F66F0x[v35])
							{
								x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v35 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							else
							{
								if (!sub_71520_mainInitTmaps(*v9 + (uint8_t)x_BYTE_D4750[0x1c + v32]))
									break;
								x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER
									+ 10 * ((uint16_t)*v9 + (uint8_t)x_BYTE_D4750[0x1c + v32])
									+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							a1 = *x_DWORD_F66F0x[(uint8_t)x_BYTE_D4750[0x1c + v32] + (uint16_t)*v9];
							str_F2C20ar.dword0x08_width = *(uint16_t *)(a1 + 2);
							str_F2C20ar.dword0x06_height = *(uint16_t *)(a1 + 4);
							v36 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
							str_F2C20ar.dword0x0c_realHeight = v36;
							str_F2C20ar.dword0x09_realWidth = v36 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
							v23 = -str_F2C20ar.dword0x08_width;
						}
						else
						{
							v33 = (uint16_t)*v9 + (uint8_t)x_BYTE_D4750[0x1c + v32];
							if (x_DWORD_F66F0x[v33])
							{
								x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v33 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							else
							{
								if (!sub_71520_mainInitTmaps(*v9 + (uint8_t)x_BYTE_D4750[0x1c + v32]))
									break;
								x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER
									+ 10 * ((uint16_t)*v9 + (uint8_t)x_BYTE_D4750[0x1c + v32])
									+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							a1 = *x_DWORD_F66F0x[(uint16_t)*v9 + (uint8_t)x_BYTE_D4750[0x1c + v32]];
							str_F2C20ar.dword0x08_width = *(uint16_t *)(a1 + 2);
							str_F2C20ar.dword0x06_height = *(uint16_t *)(a1 + 4);
							v34 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
							str_F2C20ar.dword0x0c_realHeight = v34;
							str_F2C20ar.dword0x09_realWidth = v34 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
							v23 = str_F2C20ar.dword0x08_width;
						}
						goto LABEL_69;
					case 21:
						v16 = (uint16_t)*v9;
						if (x_DWORD_F66F0x[v16])
						{
							x_DWORD_F5730.at(*(uint16_t *)(10 * v16 + TMAPS00TAB_BEGIN_BUFFER + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(v16))
								break;
							x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)*v9 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						v17 = x_DWORD_F66F0x[(uint16_t)*v9];
						x_BYTE_F2CC6 = 1;
						a1 = *v17;
						goto LABEL_47;
					case 22:
					case 23:
					case 24:
					case 25:
					case 26:
					case 27:
					case 28:
					case 29:
					case 30:
					case 31:
					case 32:
					case 33:
					case 34:
					case 35:
					case 36:
						x_BYTE_F2CC6 = 1;
					LABEL_26:
						v18 = v41x->byte_0x5C_92 + (uint16_t)*v9;
						if (x_DWORD_F66F0x[v18])
						{
							x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v18 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v9 + v41x->byte_0x5C_92))
								break;
							x_DWORD_F5730.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER
								+ 10 * ((uint16_t)*v9 + v41x->byte_0x5C_92)
								+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						a1 = *x_DWORD_F66F0x[(uint16_t)*v9 + v41x->byte_0x5C_92];
					LABEL_47:
						str_F2C20ar.dword0x08_width = *(uint16_t *)(a1 + 2);
						str_F2C20ar.dword0x06_height = *(uint16_t *)(a1 + 4);
						v27 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
						str_F2C20ar.dword0x0c_realHeight = v27;
						str_F2C20ar.dword0x09_realWidth = v27 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v23 = str_F2C20ar.dword0x08_width;
					LABEL_69:
						str_F2C20ar.dword0x05 = v23;
					LABEL_70:
						v37 = *(x_BYTE *)a1 | 8;
						str_F2C20ar.dword0x02_data = a1 + 6;
						v38 = str_F2C20ar.dword0x00;
						*(x_BYTE *)a1 = v37;
						if (v38 == 0x2000)
							v39 = x_BYTE_D4750[*((uint8_t *)v9 + 10)];
						else
							v39 = x_BYTE_D4750[6 + *((uint8_t *)v9 + 10)];
						str_F2C20ar.dword0x01_rotIdx = v39;
						str_F2C20ar.dword0x09_realWidth++;
						str_F2C20ar.dword0x0c_realHeight++;
						sub_41BD3_subDrawSprite(2u);
						break;
					default:
						goto LABEL_70;
					}
				}
			}
		}
		result = v41x->word_0x16_22;
	} while (result);
	return result;
}


uint16_t sub_3FD60B(/*int a1, */Bit8u* a2)//220d60
{
	uint16_t result; // ax
	type_str_0x6E8E* v3x; // eax
	int v4; // edx
	int v5; // eax
	int v6; // ecx
	int v7; // esi
	int v8; // edx
	int16_t* v9; // esi
	int v10; // ecx
	int v11; // ST0C_4
	char v12; // al
	int v13; // ebx
	int v14; // eax
	int v15; // ebx
	int v16; // ebx
	Bit32u* v17; // edi
	int v18; // eax
	int v19; // ebx
	int v20; // edx
	int v21; // eax
	int v22; // eax
	int v23; // eax
	int v24; // eax
	int v25; // eax
	int v26; // ebx
	int v27; // eax
	int v28; // eax
	int v29; // ebx
	int v30; // eax
	int v31; // eax
	int v32; // ebx
	int v33; // eax
	int v34; // eax
	int v35; // eax
	int v36; // eax
	char v37; // cl
	int v38; // eax
	uint8_t v39; // al
	int v40; // [esp+0h] [ebp-Ch]
	type_str_0x6E8E* v41x; // [esp+4h] [ebp-8h]
	int v42; // [esp+8h] [ebp-4h]

	//fix
	v41x = 0;
	int a1;
	//fix

	result = *(x_WORD*)(a2 + 36);
	do
	{
		if (result < 0x3E8u)
		{
			v3x = x_DWORD_EA3E4[result];
			v41x = v3x;
			if (!(v3x->struct_byte_0xc_12_15.byte[0] & 0x21))
			{
				v4 = (int16_t)(v3x->array_0x4C_76.x - x_WORD_F2CC4);
				v5 = (int16_t)(x_WORD_F2CC2 - v3x->array_0x4C_76.y);
				v42 = -v3x->array_0x4C_76.z - str_F2C20ar.dword0x20;
				v6 = (v4 * str_F2C20ar.dword0x0f - v5 * str_F2C20ar.dword0x17) >> 16;
				v40 = (str_F2C20ar.dword0x17 * v4 + str_F2C20ar.dword0x0f * v5) >> 16;
				v7 = (str_F2C20ar.dword0x17 * v4 + str_F2C20ar.dword0x0f * v5) >> 16;
				v8 = v40 * v40 + v6 * v6;
				if (v7 > 64 && v8 < str_F2C20ar.dword0x15)
				{
					if (v8 <= str_F2C20ar.dword0x13)
					{
						str_F2C20ar.dword0x00 = 0x2000;
					}
					else if (v8 < str_F2C20ar.dword0x16)
					{
						str_F2C20ar.dword0x00 = 32 * (str_F2C20ar.dword0x16 - (v40 * v40 + v6 * v6)) / str_F2C20ar.dword0x12 << 8;
					}
					else
					{
						str_F2C20ar.dword0x00 = 0;
					}
					v9 = (short*)& x_WORD_D951C[7 * v41x->word_0x5A_90];
					v10 = v6 * str_F2C20ar.dword0x18 / v40;
					v11 = str_F2C20ar.dword0x18 * v42 / v40 + str_F2C20ar.dword0x22;
					str_F2C20ar.dword0x04_screenY = ((v10 * str_F2C20ar.dword0x11 - str_F2C20ar.dword0x0d * v11) >> 16) + str_F2C20ar.dword0x24;
					str_F2C20ar.dword0x03_screenX = str_F2C20ar.dword0x10 - ((str_F2C20ar.dword0x0d * v10 + v11 * str_F2C20ar.dword0x11) >> 16);
					v12 = *((x_BYTE*)v9 + 12);
					x_BYTE_F2CC6 = 0;
					switch (v12)
					{
					case 0:
						v13 = (uint16_t)* v9;
						if (x_DWORD_F66F0x[v13])
						{
							v14 = (uint16_t)* v9;
							v15 = 4 * v13;
							goto LABEL_16;
						}
						if (sub_71520_mainInitTmaps(v13))
						{
							v14 = (uint16_t)* v9;
							v15 = 4 * v14;
						LABEL_16:
							x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 2 * (v14 + v15) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							a1 = *x_DWORD_F66F0x[(uint16_t)* v9];
							goto LABEL_47;
						}
						break;
					case 1:
						if (!x_DWORD_F66F0x[(uint16_t)* v9] && !sub_71520_mainInitTmaps(*v9))
							break;
						x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)* v9 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						a1 = *x_DWORD_F66F0x[(uint16_t)* v9];
						goto LABEL_47;
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
					case 12:
					case 13:
					case 14:
					case 15:
					case 16:
						goto LABEL_26;
					case 17:
						v26 = (((v41x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
						if (v26 < 8)
						{
							if (x_DWORD_F66F0x[v26 + (uint16_t)* v9])
							{
								x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v26 + (uint16_t)* v9) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							else
							{
								if (!sub_71520_mainInitTmaps(v26 + *v9))
									break;
								x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v26 + (uint16_t)* v9) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							a1 = *x_DWORD_F66F0x[v26 + (uint16_t)* v9];
							goto LABEL_47;
						}
						if (x_DWORD_F66F0x[(uint16_t)* v9 + 15 - v26])
						{
							x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)* v9 + 15 - v26) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v9 + 15 - v26))
								break;
							x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * ((uint16_t)* v9 + 15 - v26) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						a1 = *x_DWORD_F66F0x[(uint16_t)* v9 + 15 - v26];
						str_F2C20ar.dword0x08_width = *(uint16_t*)(a1 + 2);
						str_F2C20ar.dword0x06_height = *(uint16_t*)(a1 + 4);
						v28 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
						str_F2C20ar.dword0x0c_realHeight = v28;
						str_F2C20ar.dword0x09_realWidth = v28 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v23 = -str_F2C20ar.dword0x08_width;
						goto LABEL_69;
					case 18:
						v29 = (((v41x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
						v30 = v29 + (uint16_t)* v9;
						if (x_DWORD_F66F0x[v30])
						{
							x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v30 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(v29 + *v9))
								break;
							x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (v29 + (uint16_t)* v9) + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						a1 = *x_DWORD_F66F0x[(uint16_t)* v9 + v29];
						str_F2C20ar.dword0x08_width = *(uint16_t*)(a1 + 2);
						str_F2C20ar.dword0x06_height = *(uint16_t*)(a1 + 4);
						v31 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
						str_F2C20ar.dword0x0c_realHeight = v31;
						str_F2C20ar.dword0x09_realWidth = v31 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v23 = str_F2C20ar.dword0x08_width;
						goto LABEL_69;
					case 19:
						v19 = (((v41x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
						if (v19 >= 8)
						{
							v24 = (uint16_t)* v9 + (uint8_t)x_BYTE_D4750[0xc + v19];
							if (!x_DWORD_F66F0x[v24])
							{
								if (!sub_71520_mainInitTmaps(*v9 + (uint8_t)x_BYTE_D4750[0xc + v19]))
									break;
								v24 = (uint16_t)* v9 + (uint8_t)x_BYTE_D4750[0xc + v19];
							}
							x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v24 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							a1 = *x_DWORD_F66F0x[(uint16_t)* v9 + (uint8_t)x_BYTE_D4750[0xc + v19]];
							str_F2C20ar.dword0x08_width = *(uint16_t*)(a1 + 2);
							str_F2C20ar.dword0x06_height = *(uint16_t*)(a1 + 4);
							v25 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
							str_F2C20ar.dword0x0c_realHeight = v25;
							str_F2C20ar.dword0x09_realWidth = v25 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
							v23 = -str_F2C20ar.dword0x08_width;
						}
						else
						{
							v20 = (uint8_t)x_BYTE_D4750[0xc + v19];
							v21 = v20 + (uint16_t)* v9;
							if (x_DWORD_F66F0x[v21])
							{
								x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v21 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							else
							{
								if (!sub_71520_mainInitTmaps(*v9 + (uint8_t)v20))
									break;
								x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER
									+ 10 * ((uint16_t)* v9 + (uint8_t)x_BYTE_D4750[0xc + v19])
									+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							a1 = *x_DWORD_F66F0x[(uint16_t)* v9 + (uint8_t)x_BYTE_D4750[0xc + v19]];
							str_F2C20ar.dword0x08_width = *(uint16_t*)(a1 + 2);
							str_F2C20ar.dword0x06_height = *(uint16_t*)(a1 + 4);
							v22 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
							str_F2C20ar.dword0x0c_realHeight = v22;
							str_F2C20ar.dword0x09_realWidth = v22 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
							v23 = str_F2C20ar.dword0x08_width;
						}
						goto LABEL_69;
					case 20:
						v32 = (((v41x->word_0x1C_28 - (uint16_t)x_WORD_F2CC0) >> 3) & 0xF0) >> 4;
						if (v32 >= 8)
						{
							v35 = (uint16_t)* v9 + (uint8_t)x_BYTE_D4750[0x1c + v32];
							if (x_DWORD_F66F0x[v35])
							{
								x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v35 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							else
							{
								if (!sub_71520_mainInitTmaps(*v9 + (uint8_t)x_BYTE_D4750[0x1c + v32]))
									break;
								x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER
									+ 10 * ((uint16_t)* v9 + (uint8_t)x_BYTE_D4750[0x1c + v32])
									+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							a1 = *x_DWORD_F66F0x[(uint8_t)x_BYTE_D4750[0x1c + v32] + (uint16_t)* v9];
							str_F2C20ar.dword0x08_width = *(uint16_t*)(a1 + 2);
							str_F2C20ar.dword0x06_height = *(uint16_t*)(a1 + 4);
							v36 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
							str_F2C20ar.dword0x0c_realHeight = v36;
							str_F2C20ar.dword0x09_realWidth = v36 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
							v23 = -str_F2C20ar.dword0x08_width;
						}
						else
						{
							v33 = (uint16_t)* v9 + (uint8_t)x_BYTE_D4750[0x1c + v32];
							if (x_DWORD_F66F0x[v33])
							{
								x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v33 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							else
							{
								if (!sub_71520_mainInitTmaps(*v9 + (uint8_t)x_BYTE_D4750[0x1c + v32]))
									break;
								x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER
									+ 10 * ((uint16_t)* v9 + (uint8_t)x_BYTE_D4750[0x1c + v32])
									+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
							}
							a1 = *x_DWORD_F66F0x[(uint16_t)* v9 + (uint8_t)x_BYTE_D4750[0x1c + v32]];
							str_F2C20ar.dword0x08_width = *(uint16_t*)(a1 + 2);
							str_F2C20ar.dword0x06_height = *(uint16_t*)(a1 + 4);
							v34 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
							str_F2C20ar.dword0x0c_realHeight = v34;
							str_F2C20ar.dword0x09_realWidth = v34 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
							v23 = str_F2C20ar.dword0x08_width;
						}
						goto LABEL_69;
					case 21:
						v16 = (uint16_t)* v9;
						if (x_DWORD_F66F0x[v16])
						{
							x_DWORD_F5730.at(*(uint16_t*)(10 * v16 + TMAPS00TAB_BEGIN_BUFFER + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(v16))
								break;
							x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)* v9 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						v17 = x_DWORD_F66F0x[(uint16_t)* v9];
						x_BYTE_F2CC6 = 1;
						a1 = *v17;
						goto LABEL_47;
					case 22:
					case 23:
					case 24:
					case 25:
					case 26:
					case 27:
					case 28:
					case 29:
					case 30:
					case 31:
					case 32:
					case 33:
					case 34:
					case 35:
					case 36:
						x_BYTE_F2CC6 = 1;
					LABEL_26:
						v18 = v41x->byte_0x5C_92 + (uint16_t)* v9;
						if (x_DWORD_F66F0x[v18])
						{
							x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER + 10 * v18 + 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						else
						{
							if (!sub_71520_mainInitTmaps(*v9 + v41x->byte_0x5C_92))
								break;
							x_DWORD_F5730.at(*(uint16_t*)(TMAPS00TAB_BEGIN_BUFFER
								+ 10 * ((uint16_t)* v9 + v41x->byte_0x5C_92)
								+ 8)) = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
						}
						a1 = *x_DWORD_F66F0x[(uint16_t)* v9 + v41x->byte_0x5C_92];
					LABEL_47:
						str_F2C20ar.dword0x08_width = *(uint16_t*)(a1 + 2);
						str_F2C20ar.dword0x06_height = *(uint16_t*)(a1 + 4);
						v27 = (int64_t)(str_F2C20ar.dword0x18 * (uint64_t)(uint16_t)v9[4]) / v40;
						str_F2C20ar.dword0x0c_realHeight = v27;
						str_F2C20ar.dword0x09_realWidth = v27 * str_F2C20ar.dword0x08_width / str_F2C20ar.dword0x06_height;
						v23 = str_F2C20ar.dword0x08_width;
					LABEL_69:
						str_F2C20ar.dword0x05 = v23;
					LABEL_70:
						v37 = *(x_BYTE*)a1 | 8;
						str_F2C20ar.dword0x02_data = a1 + 6;
						v38 = str_F2C20ar.dword0x00;
						*(x_BYTE*)a1 = v37;
						if (v38 == 0x2000)
							v39 = x_BYTE_D4750[*((uint8_t*)v9 + 10)];
						else
							v39 = x_BYTE_D4750[6 + *((uint8_t*)v9 + 10)];
						str_F2C20ar.dword0x01_rotIdx = v39;
						str_F2C20ar.dword0x09_realWidth++;
						str_F2C20ar.dword0x0c_realHeight++;
						sub_41BD3_subDrawSprite(2u);
						break;
					default:
						goto LABEL_70;
					}
				}
			}
		}
		result = v41x->word_0x16_22;
	} while (result);
	return result;
}

//----- (00040950) --------------------------------------------------------
int16_t sub_40950_draw_sky(int16_t a1)//221950
{
	int v1; // ebx
	int v2; // edx
	int v3; // esi
	int v4; // ebx
	char *v5; // edx
	int v6; // eax
	int v7; // edx
	int v8; // eax
	int v9; // ecx
	int v10; // edx
	int16_t result; // ax
	int v12; // eax
	char *v13; // esi
	int *v14; // edi
	Bit8u* v15; // edx
	int v16; // ecx
	int v17; // ebx
	int v18; // eax
	char v19ar[0x500]; // [esp+0h] [ebp-52Ch]
	int v20; // [esp+500h] [ebp-2Ch]
	int v21; // [esp+504h] [ebp-28h]
	int *v22; // [esp+508h] [ebp-24h]
	int v23; // [esp+50Ch] [ebp-20h]
	int v24; // [esp+510h] [ebp-1Ch]
	int v25; // [esp+514h] [ebp-18h]
	int v26; // [esp+518h] [ebp-14h]
	int v27; // [esp+51Ch] [ebp-10h]
	char v28; // [esp+520h] [ebp-Ch]
	char v29; // [esp+524h] [ebp-8h]
	uint8_t v30; // [esp+528h] [ebp-4h]

	v1 = a1 & 0x7FF;
	v2 = (x_DWORD)x_DWORD_DB750[0x200+v1] << 8;
	v26 = (x_DWORD_DB750[v1] << 8) / (uint16_t)x_DWORD_DE564;
	v3 = 0;
	v25 = v2 / (uint16_t)x_DWORD_DE564;
	v4 = 0;
	v29 = 0;
	v5 = v19ar;
	v30 = 0;
	v6 = (uint16_t)x_DWORD_DE564;
	while (v6)
	{
		v28 = BYTE2(v3);
		*v5 = BYTE2(v3) - v29;
		v21 = BYTE2(v4);
		v20 = BYTE2(v4) - v30;
		v5 += 2;
		v6--;
		*(v5 - 1) = BYTE2(v4) - v30;
		v29 = v28;
		v30 = BYTE2(v4);
		v4 += v26;
		v3 += v25;
	}
	v7 = (-(str_F2C20ar.dword0x0d * str_F2C20ar.dword0x22) >> 16) + str_F2C20ar.dword0x24;
	v8 = str_F2C20ar.dword0x10 - (str_F2C20ar.dword0x11 * str_F2C20ar.dword0x22 >> 16);
	v9 = v7 * v25 - v8 * v26;
	v10 = v25 * v8 + v26 * v7;
	v23 = ((uint16_t)x_WORD_F2CC0 << 15) - v9;
	v22 = (int *)x_DWORD_DE558;
	result = x_DWORD_DE568;
	v27 = -v10;
	v24 = (uint16_t)x_DWORD_DE568;
	if ((x_WORD)x_DWORD_DE568)
	{
		do
		{
			v12 = ((uint16_t)x_DWORD_DE564
				- (__CFSHL__((signed int)(uint16_t)x_DWORD_DE564 >> 31, 2)
					+ 4 * ((signed int)(uint16_t)x_DWORD_DE564 >> 31))) >> 2;
			v13 = v19ar;
			v20 = v27 >> 16;
			v14 = v22;
			v21 = v23 >> 16;
			v15 = off_D41A8_sky;
			BYTE1(v17) = BYTE2(v27);
			v16 = ((uint16_t)x_DWORD_DE564
				- (__CFSHL__((signed int)(uint16_t)x_DWORD_DE564 >> 31, 2)
					+ 4 * ((signed int)(uint16_t)x_DWORD_DE564 >> 31))) >> 2;
			LOBYTE(v17) = BYTE2(v23);
			v17 = (uint16_t)v17;
			do
			{
				LOBYTE(v12) = v15[v17];
				LOBYTE(v17) = *v13 + v17;
				BYTE1(v17) += v13[1];
				BYTE1(v12) = v15[v17];
				LOBYTE(v17) = v13[2] + v17;
				BYTE1(v17) += v13[3];
				v18 = v12 << 16;
				LOBYTE(v18) = v15[v17];
				LOBYTE(v17) = v13[4] + v17;
				BYTE1(v17) += v13[5];
				BYTE1(v18) = v15[v17];
				LOBYTE(v17) = v13[6] + v17;
				BYTE1(v17) += v13[7];
				v12 = __ROL4__(v18, 16);
				*v14 = v12;
				v14++;
				v13 += 8;
				v16--;
			} while (v16);
			v22 = (int *)((char *)v22 + x_DWORD_DE560_ScreenWidth);
			result = v25;
			v24--;
			v23 -= v26;
			v27 += v25;
		} while (v24);
	}
	return result;
}

//----- (00040BF0) --------------------------------------------------------
void sub_40BF0(int a1, int a2, int a3, int a4)//221bf0
{
	int v4; // ebx
	int v5; // eax
	int v6; // ecx
	int v7; // edx
	//int result; // eax

	v4 = a1;
	v5 = a2;
	LOWORD(v6) = a3;
	LOWORD(v7) = a4;
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		v4 = a1 >> 1;
		v5 = a2 >> 1;
		v6 = a3 >> 1;
		v7 = a4 >> 1;
	}
	str_F2C20ar.dword0x0e = v4 + x_DWORD_18062C_resolution_x * v5;
	//result = str_F2C20ar.dword0x0e + (int)x_DWORD_180628b_screen_buffer;
	sub_BCD45(str_F2C20ar.dword0x0e + x_DWORD_180628b_screen_buffer, 0, x_DWORD_18062C_resolution_x, (uint16_t)v6, (uint16_t)v7);
	//return result;
}

//----- (00040C50) --------------------------------------------------------
void sub_40C50(int a1)//221c50
{
	int v1; // eax
	int v2; // esi
	int v3; // eax
	uint16_t v4; // bx
	int v5; // ST10_4
	//int result; // eax

	v1 = 40 - a1;
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		v2 = x_DWORD_18062C_resolution_x * (5 * v1 / 2) + 4 * v1;
		v3 = (uint16_t)(5 * a1);
		v4 = 8 * a1;
	}
	else
	{
		v2 = x_DWORD_18062C_resolution_x * (12 * v1 / 2) + 8 * v1;
		v3 = (uint16_t)(12 * a1);
		v4 = 16 * a1;
	}
	v5 = v3;
	//result = v2 + (int)x_DWORD_180628b_screen_buffer;
	str_F2C20ar.dword0x0e = v2;
	sub_BCD45(v2 + x_DWORD_180628b_screen_buffer, 0, x_DWORD_18062C_resolution_x, v4, v5);
	//return result;
}

//----- (00040D10) --------------------------------------------------------
int /*__fastcall*/ sub_40D10()//221d10//fix vga
{
	int v1; // ebx
	signed int v2; // ecx
	x_BYTE *v3; // esi
	int *v4; // edi
	signed int v5; // ecx
	x_BYTE *v6; // esi
	int *v7; // edi
	signed int v8; // ecx
	int *v9; // edi
	x_BYTE *v10; // esi
	signed int v11; // ecx
	int *v12; // edi
	x_BYTE *v13; // esi
	signed int v14; // ecx
	int *v15; // edi
	x_BYTE *v16; // esi
	signed int v17; // ecx
	int *v18; // edi
	x_BYTE *v19; // esi
	signed int v20; // ecx
	int *v21; // edi
	x_BYTE *v22; // esi
	signed int v23; // ecx
	int *v24; // edi
	x_BYTE *v25; // esi
	int result; // eax
	signed int v27; // [esp+4h] [ebp-10h]
	int v28; // [esp+8h] [ebp-Ch]
	int v29; // [esp+Ch] [ebp-8h]
	int *v30; // [esp+10h] [ebp-4h]

	int a1;

	//__outx_WORD(0x3CEu, 0xFF08u);
	HIWORD(v1) = 0;
	v30 = (int *)&loc_A0000_vga_buffer;
	// FIXME: types
	// v28 = (int)x_DWORD_180628b_screen_buffer;
	v27 = 200;
	// FIXME: types
	// v29 = (Bit8u)x_DWORD_E9C3C;
	while (v27)
	{
		v2 = 10;
		v3 = (x_BYTE *)v28;
		v4 = v30;
		//__outx_WORD(0x3C4u, 0x102u);
		do
		{
			LOBYTE(a1) = v3[8];
			LOBYTE(v1) = v3[24];
			BYTE1(a1) = v3[12];
			BYTE1(v1) = v3[28];
			a1 = __ROL4__(a1, 16);
			v1 = __ROL4__(v1, 16);
			LOBYTE(a1) = *v3;
			LOBYTE(v1) = v3[16];
			BYTE1(a1) = v3[4];
			BYTE1(v1) = v3[20];
			*v4 = a1;
			v4[1] = v1;
			v3 += 32;
			v4 += 2;
			v2--;
		} while (v2);
		v5 = 10;
		v6 = (x_BYTE *)v29;
		v7 = v30 + 20;
		do
		{
			LOBYTE(a1) = v6[8];
			LOBYTE(v1) = v6[24];
			BYTE1(a1) = v6[12];
			BYTE1(v1) = v6[28];
			a1 = __ROL4__(a1, 16);
			v1 = __ROL4__(v1, 16);
			LOBYTE(a1) = *v6;
			LOBYTE(v1) = v6[16];
			BYTE1(a1) = v6[4];
			BYTE1(v1) = v6[20];
			*v7 = a1;
			v7[1] = v1;
			v6 += 32;
			v7 += 2;
			v5--;
		} while (v5);
		v8 = 10;
		v9 = v30;
		v10 = (x_BYTE *)(v28 + 1);
		//__outx_WORD(0x3C4u, 0x202u);
		do
		{
			LOBYTE(a1) = v10[8];
			LOBYTE(v1) = v10[24];
			BYTE1(a1) = v10[12];
			BYTE1(v1) = v10[28];
			a1 = __ROL4__(a1, 16);
			v1 = __ROL4__(v1, 16);
			LOBYTE(a1) = *v10;
			LOBYTE(v1) = v10[16];
			BYTE1(a1) = v10[4];
			BYTE1(v1) = v10[20];
			*v9 = a1;
			v9[1] = v1;
			v10 += 32;
			v9 += 2;
			v8--;
		} while (v8);
		v11 = 10;
		v12 = v30 + 20;
		v13 = (x_BYTE *)(v29 + 1);
		do
		{
			LOBYTE(a1) = v13[8];
			LOBYTE(v1) = v13[24];
			BYTE1(a1) = v13[12];
			BYTE1(v1) = v13[28];
			a1 = __ROL4__(a1, 16);
			v1 = __ROL4__(v1, 16);
			LOBYTE(a1) = *v13;
			LOBYTE(v1) = v13[16];
			BYTE1(a1) = v13[4];
			BYTE1(v1) = v13[20];
			*v12 = a1;
			v12[1] = v1;
			v13 += 32;
			v12 += 2;
			--v11;
		} while (v11);
		v14 = 10;
		v15 = v30;
		v16 = (x_BYTE *)(v28 + 2);
		//__outx_WORD(0x3C4u, 0x402u);
		do
		{
			LOBYTE(a1) = v16[8];
			LOBYTE(v1) = v16[24];
			BYTE1(a1) = v16[12];
			BYTE1(v1) = v16[28];
			a1 = __ROL4__(a1, 16);
			v1 = __ROL4__(v1, 16);
			LOBYTE(a1) = *v16;
			LOBYTE(v1) = v16[16];
			BYTE1(a1) = v16[4];
			BYTE1(v1) = v16[20];
			*v15 = a1;
			v15[1] = v1;
			v16 += 32;
			v15 += 2;
			v14--;
		} while (v14);
		v17 = 10;
		v18 = v30 + 20;
		v19 = (x_BYTE *)(v29 + 2);
		do
		{
			LOBYTE(a1) = v19[8];
			LOBYTE(v1) = v19[24];
			BYTE1(a1) = v19[12];
			BYTE1(v1) = v19[28];
			a1 = __ROL4__(a1, 16);
			v1 = __ROL4__(v1, 16);
			LOBYTE(a1) = *v19;
			LOBYTE(v1) = v19[16];
			BYTE1(a1) = v19[4];
			BYTE1(v1) = v19[20];
			*v18 = a1;
			v18[1] = v1;
			v19 += 32;
			v18 += 2;
			v17--;
		} while (v17);
		v20 = 10;
		v21 = v30;
		v22 = (x_BYTE *)(v28 + 3);
		//__outx_WORD(0x3C4u, 0x802u);
		do
		{
			LOBYTE(a1) = v22[8];
			LOBYTE(v1) = v22[24];
			BYTE1(a1) = v22[12];
			BYTE1(v1) = v22[28];
			a1 = __ROL4__(a1, 16);
			v1 = __ROL4__(v1, 16);
			LOBYTE(a1) = *v22;
			LOBYTE(v1) = v22[16];
			BYTE1(a1) = v22[4];
			BYTE1(v1) = v22[20];
			*v21 = a1;
			v21[1] = v1;
			v22 += 32;
			v21 += 2;
			v20--;
		} while (v20);
		v23 = 10;
		v24 = v30 + 20;
		v25 = (x_BYTE *)(v29 + 3);
		do
		{
			LOBYTE(a1) = v25[8];
			LOBYTE(v1) = v25[24];
			BYTE1(a1) = v25[12];
			BYTE1(v1) = v25[28];
			a1 = __ROL4__(a1, 16);
			v1 = __ROL4__(v1, 16);
			LOBYTE(a1) = *v25;
			LOBYTE(v1) = v25[16];
			BYTE1(a1) = v25[4];
			BYTE1(v1) = v25[20];
			*v24 = a1;
			v24[1] = v1;
			v25 += 32;
			v24 += 2;
			v23--;
		} while (v23);
		a1 = v27 - 1;
		v28 += 320;
		v29 += 320;
		v30 += 40;
		v27--;
	}
	result = 0;
	memset((void *)x_DWORD_180628b_screen_buffer, 0, 0xFA00u);
	return result;
}

//----- (00040F80) --------------------------------------------------------
void sub_40F80()//221f80
{
	int v0; // eax
	signed int v1; // ecx
	x_BYTE *v2; // esi
	x_BYTE *v3; // edi
	int v4; // edx
	int v5; // ebx
	int v6; // eax
	signed int v7; // ecx
	x_BYTE *v8; // esi
	x_BYTE *v9; // edi
	int v10; // edx
	int v11; // ebx
	char v12; // bl
	signed int v13; // [esp+0h] [ebp-10h]
	int i; // [esp+4h] [ebp-Ch]
	int v15; // [esp+8h] [ebp-8h]
	int v16; // [esp+8h] [ebp-8h]
	Bit8u* v17; // [esp+Ch] [ebp-4h]
	Bit8u* v18; // [esp+Ch] [ebp-4h]

	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 == 2 && !x_BYTE_D478C)
	{
		v13 = (signed int)(uint16_t)x_DWORD_DE564 >> 2;
		// FIXME: types
		// v15 = (Bit8u)x_DWORD_E9C3C;
		v17 = x_DWORD_DE558;
		v0 = (uint16_t)x_DWORD_DE568 / 2;
		for (i = (uint16_t)x_DWORD_DE568 / 2; i; i--)
		{
			v1 = v13;
			v2 = (x_BYTE *)v15;
			v3 = (x_BYTE *)v17;
			v4 = 0;
			v5 = 0;
			do
			{
				LOBYTE(v5) = v2[2];
				LOBYTE(v4) = v3[2];
				LOBYTE(v0) = x_BYTE_F0520[v4] + x_BYTE_F0620[v5];
				LOBYTE(v5) = v2[3];
				LOBYTE(v4) = v3[3];
				BYTE1(v0) = x_BYTE_F0920[v4] + x_BYTE_F0220[v5];
				v0 <<= 16;
				LOBYTE(v5) = *v2;
				LOBYTE(v4) = *v3;
				LOBYTE(v0) = x_BYTE_F0520[v4] + x_BYTE_F0620[v5];
				LOBYTE(v5) = v2[1];
				LOBYTE(v4) = v3[1];
				BYTE1(v0) = x_BYTE_F0920[v4] + x_BYTE_F0220[v5];
				*(x_DWORD *)v3 = v0;
				v3 += 4;
				v2 += 4;
				--v1;
			} while (v1);
			HIWORD(v6) = HIWORD(x_DWORD_DE560_ScreenWidth);
			v7 = v13;
			v16 = x_DWORD_DE560_ScreenWidth + v15;
			v18 = x_DWORD_DE560_ScreenWidth + v17;
			v8 = (x_BYTE *)v16;
			v9 = (x_BYTE *)v18;
			v10 = 0;
			v11 = 0;
			do
			{
				LOBYTE(v11) = v8[2];
				LOBYTE(v10) = v9[2];
				LOBYTE(v6) = x_BYTE_F0820[v10] + x_BYTE_F0320[v11];
				LOBYTE(v11) = v8[3];
				LOBYTE(v10) = v9[3];
				BYTE1(v6) = x_BYTE_F0720[v10] + x_BYTE_F0420[v11];
				v6 <<= 16;
				LOBYTE(v11) = *v8;
				LOBYTE(v10) = *v9;
				LOBYTE(v6) = x_BYTE_F0820[v10] + x_BYTE_F0320[v11];
				LOBYTE(v11) = v8[1];
				LOBYTE(v10) = v9[1];
				BYTE1(v6) = x_BYTE_F0720[v10] + x_BYTE_F0420[v11];
				*(x_DWORD *)v9 = v6;
				v9 += 4;
				v8 += 4;
				v7--;
			} while (v7);
			HIWORD(v0) = HIWORD(x_DWORD_DE560_ScreenWidth);
			v15 = x_DWORD_DE560_ScreenWidth + v16;
			v17 = x_DWORD_DE560_ScreenWidth + v18;
		}
	}
	v12 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190;
	if (v12 == 1)
	{
		sub_40D10(/*(int)x_D41A0_BYTEARRAY_0*/);
	}
	else if (x_WORD_180660_VGA_type_resolution & 1)
	{
		if (x_BYTE_D478C)
		{
			// FIXME: types
			// sub_BD2CB((int)unk_F0A20x);
		}
		else if (x_WORD_180660_VGA_type_resolution & 1)
		{
			sub_90478_VGA_Blit320();
		}
		else
		{
			sub_75200_VGA_Blit640(480);
		}
	}
	else if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2192.xxxx_0x2193 && v12)
	{
		sub_BD3DD();
	}
	else if (x_BYTE_D478C)
	{
		// FIXME: types
		// sub_BD1B6((int)unk_F0A20x);
	}
	else if (x_WORD_180660_VGA_type_resolution & 1)
	{
		sub_90478_VGA_Blit320();
	}
	else
	{
#ifdef ALT_RESOLUTION
		VGA_BlitAny();
#else
		sub_75200_VGA_Blit640(480);
#endif
	}
}

//----- (000411A0) --------------------------------------------------------
void sub_411A0_draw_world(Bit8u* a1, int a2, int a3, int16_t a4, signed int a5, int a6, int16_t a7, int a8)//2221a0
{
	uint16_t v8; // ax
	int v9; // ecx
	int v10; // ebx
	int v11; // edx
	int v12; // ecx
	int v13; // ebx
	int v14; // edx
	int v15; // ecx
	int v16; // ebx
	int v17; // edx
	int v18; // ecx
	int v19; // ebx
	int v20; // edx
	int v21; // esi
	int v22; // edx
	int v23; // ebx
	Bit32u v24; // edx
	int v25; // ebx
	int v26; // edi
	//char result; // al
	int v28; // ebx
	Bit32u v29; // edx
	int v30; // ebx
	int v31; // edi
	Bit8u* v32; // ST2C_4
	//Bit8u* v33; // edx
	int64_t v34; // rax
	Bit8u* v35; // edi
	int v36; // eax
	x_BYTE *v37; // esi
	signed int v38; // ecx
	uint16_t v39; // bx
	uint16_t v40; // dx
	uint16_t v41; // bx
	uint16_t v42; // dx
	x_BYTE *v43; // edi
	int v44; // esi
	int v45; // ecx
	int v46; // eax
	int v47; // ebx
	int v48; // edx
	int v49; // [esp+0h] [ebp-1Ch]
	int v50; // [esp+4h] [ebp-18h]
	signed int v51; // [esp+8h] [ebp-14h]
	char v52; // [esp+Ch] [ebp-10h]
	Bit8u* v53; // [esp+14h] [ebp-8h]
	int i; // [esp+18h] [ebp-4h]
	int v55; // [esp+34h] [ebp+18h]
	int v56; // [esp+38h] [ebp+1Ch]

	LOBYTE(v8) = HIBYTE(a2);
	HIBYTE(v8) = HIBYTE(a3);
	if ((signed int)(uint8_t)a2 < 128)
		LOBYTE(v8) = HIBYTE(a2) - 1;
	if ((signed int)(uint8_t)a3 < 128)
		HIBYTE(v8) = HIBYTE(a3) - 1;
	v9 = x_BYTE_11B4E0_height[v8];
	LOBYTE(v8) += 2;
	v10 = v9;
	v11 = v9;
	v12 = x_BYTE_11B4E0_height[v8];
	HIBYTE(v8) += 2;
	v13 = v10 - v12;
	v14 = v12 + v11;
	v15 = x_BYTE_11B4E0_height[v8];
	LOBYTE(v8) -= 2;
	v16 = v13 - v15;
	v17 = v14 - v15;
	v18 = x_BYTE_11B4E0_height[v8];
	v19 = 2 * (v18 + v16);
	v20 = 2 * (v17 - v18);
	if (v19 <= 100)
	{
		if (v19 < -100)
			v19 = -100;
	}
	else
	{
		v19 = 100;
	}
	if (v20 <= 100)
	{
		if (v20 < -100)
			v20 = -100;
	}
	else
	{
		v20 = 100;
	}
	v21 = a4 & 0x7FF;
	x_DWORD_D4794 += (v19 - x_DWORD_D4794) >> 3;
	x_DWORD_D4798 += (v20 - x_DWORD_D4798) >> 3;
	v55 = x_DWORD_D4794 + a2;
	v56 = x_DWORD_D4798 + a3;
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2192.xxxx_0x2193 && D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 && x_DWORD_18062C_resolution_x == 640)
	{
		sub_BCD45(
			x_DWORD_180628b_screen_buffer,
			0,
			2 * x_DWORD_18062C_resolution_x,
			(uint16_t)(x_DWORD_18062C_resolution_x / 2 - 8),
			(uint16_t)(x_DWORD_180624_resolution_y / 2 - 40));
		v22 = x_DWORD_DB750[v21];
		x_DWORD_D4790 = 20;
		v23 = 5 * v22;
		v24 = x_DWORD_DB750[0x200+v21];
		x_DWORD_D4324 = -5;
		v25 = 4 * v23 >> 16;
		v26 = 20 * (signed int)v24 >> 16;
		sub_3C080_draw_terrain_and_particles(/*v25, v21, */v55 - v26, v56 - v25, v21, a5, a6, a7, a8);
		sub_BCD45(x_DWORD_180628b_screen_buffer + x_DWORD_18062C_resolution_x / 2, 0, 0, 0, 0);
		x_DWORD_D4324 = 5;
		sub_3C080_draw_terrain_and_particles(/*v56 + v25, v21, */v55 + v26, v56 + v25, v21, a5, a6, a7, a8);
		//result = x_DWORD_18062C_resolution_x;
		x_DWORD_D4324 = 0;
		sub_BCD45(x_DWORD_180628b_screen_buffer, 0, x_DWORD_18062C_resolution_x, (uint16_t)x_DWORD_18062C_resolution_x, (uint16_t)x_DWORD_180624_resolution_y);
	}
	else if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 != 1 || D41A0_BYTESTR_0.str_0x218A_settings.str_0x2192.xxxx_0x2193)
	{
		v52 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.xxxx_0x2191;
		if (x_WORD_180660_VGA_type_resolution == 1)
		{
			//v33 = x_D41A0_BYTEARRAY_0 + 2124 * D41A0_BYTESTR_0.word_0xc;
			if (!D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221)
			{
				if (x_D41A0_BYTEARRAY_4_struct.byteindex_34)
				{
					if (x_DWORD_E9C3C)
					{
						if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D == 40)
						{
							v34 = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]->word_0x82_130;
							if ((signed int)((HIDWORD(v34) ^ v34) - HIDWORD(v34)) > 80)
								D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.xxxx_0x2191 = 1;
						}
					}
				}
			}
		}
		if (D41A0_BYTESTR_0.str_0x21AE.xxxx_0x21B1 && D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.xxxx_0x2191 && x_DWORD_E9C3C)
		{
			v35 = x_DWORD_DE558;
			sub_BCD45(x_DWORD_E9C3C, 0, 0, 0, 0);
			sub_3C080_draw_terrain_and_particles(/*v55, v21, */v55, v56, v21, a5, a6, a7, a8);
			sub_BCD45(v35, 0, 0, 0, 0);
			v51 = (signed int)(uint16_t)x_DWORD_DE564 >> 2;
			v49 = x_DWORD_DE560_ScreenWidth - (uint16_t)x_DWORD_DE564;
			v50 = (uint16_t)x_DWORD_DE568;
			//HIWORD(v36) = HIWORD(x_D41A0_BYTEARRAY_0);
			if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.xxxx_0x2191 != 1)
			{
				v37 = (x_BYTE *)x_DWORD_E9C3C;
				goto LABEL_33;
			}
			v37 = (x_BYTE *)x_DWORD_E9C3C;
			v38 = (signed int)(uint16_t)x_DWORD_DE564 >> 2;
			LOBYTE(v39) = *(x_BYTE *)(x_DWORD_E9C3C + 2);
			HIBYTE(v39) = v35[2];
			LOBYTE(v40) = *(x_BYTE *)(x_DWORD_E9C3C + 3);
			LOBYTE(v36) = x_BYTE_F6EE0_tablesx[0x4000+v39];
			HIBYTE(v40) = v35[3];
			HIBYTE(v36) = x_BYTE_F6EE0_tablesx[0x4000+v40];
			v36 <<= 16;
			LOBYTE(v39) = *(x_BYTE *)x_DWORD_E9C3C;
			HIBYTE(v39) = *v35;
			LOBYTE(v40) = *(x_BYTE *)(x_DWORD_E9C3C + 1);
			LOBYTE(v36) = x_BYTE_F6EE0_tablesx[0x4000+v39];
			HIBYTE(v40) = v35[1];
			for (BYTE1(v36) = x_BYTE_F6EE0_tablesx[0x4000+v40]; ; BYTE1(v36) = x_BYTE_F6EE0_tablesx[0x4000+v42])
			{
				*(x_DWORD *)v35 = v36;
				v35 += 4;
				v37 += 4;
				if (!--v38)
				{
					HIWORD(v36) = HIWORD(v49);
					v37 += v49;
					v35 += v49;
					if (!--v50)
						goto LABEL_44;
				LABEL_33:
					v38 = v51;
				}
				HIBYTE(v41) = v37[2];
				LOBYTE(v41) = v35[2];
				HIBYTE(v42) = v37[3];
				LOBYTE(v36) = x_BYTE_F6EE0_tablesx[0x4000+v41];
				LOBYTE(v42) = v35[3];
				HIBYTE(v36) = x_BYTE_F6EE0_tablesx[0x4000+v42];
				v36 <<= 16;
				HIBYTE(v41) = *v37;
				LOBYTE(v41) = *v35;
				HIBYTE(v42) = v37[1];
				LOBYTE(v36) = x_BYTE_F6EE0_tablesx[0x4000+v41];
				LOBYTE(v42) = v35[1];
			}
		}
		//debug
		//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
		//debug
		#ifdef OLD_PARTICLES
		sub_3C080_draw_terrain_and_particles_old(/*v56, v21, */v55, v56, v21, a5, a6, a7, a8);
		#else
		sub_3C080_draw_terrain_and_particles(/*v56, v21, */v55, v56, v21, a5, a6, a7, a8);
		#endif
		//debug
		//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
		//debug
		if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2192.xxxx_0x2192)
		{
			v53 = x_DWORD_DE558;
			for (i = (uint16_t)x_DWORD_DE568 - 1; i; i--)
			{
				v43 = (x_BYTE *)v53;
				v44 = x_DWORD_DE560_ScreenWidth;
				v45 = (uint16_t)x_DWORD_DE564 - 1;
				HIWORD(v46) = 0;
				HIWORD(v47) = 0;
				HIWORD(v48) = 0;
				do
				{
					LOBYTE(v46) = v43[0];
					LOBYTE(v47) = v43[1];
					BYTE1(v46) = v43[v44];
					LOBYTE(v48) = x_BYTE_F6EE0_tablesx[0x4000+v46];
					BYTE1(v47) = v43[v44 + 1];
					BYTE1(v48) = x_BYTE_F6EE0_tablesx[0x4000+v47];
					*v43++ = x_BYTE_F6EE0_tablesx[0x4000+v48];
					v45--;
				} while (v45);
				v53 += x_DWORD_DE560_ScreenWidth;
			}
		}
	LABEL_44:
		//result = (int)x_D41A0_BYTEARRAY_0;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.xxxx_0x2191 = v52;
	}
	else
	{
		v28 = 5 * x_DWORD_DB750[v21];
		v29 = x_DWORD_DB750[0x200+v21];
		x_DWORD_D4790 = 20;
		x_DWORD_D4324 = x_DWORD_DE560_ScreenWidth / 0x28u;
		v30 = 4 * v28 >> 16;
		v31 = 20 * (signed int)v29 >> 16;
		sub_3C080_draw_terrain_and_particles(/*v30, v21, */v31 + v55, v30 + v56, v21, a5, a6, a7, a8);
		v32 = x_DWORD_DE558;
		sub_BCD45(x_DWORD_E9C3C, 0, 0, 0, 0);
		x_DWORD_D4324 = 0 - (x_DWORD_DE560_ScreenWidth / 0x28u);
		/*result = */sub_3C080_draw_terrain_and_particles(/*v30, v21, */v55 - v31, v56 - v30, v21, a5, a6, a7, a8);
		sub_BCD45(v32, 0, 0, 0, 0);
		x_DWORD_D4324 = 0;
	}
	//return result;
}

//----- (000417A0) --------------------------------------------------------
void sub_417A0_install_pal_and_mouse_minmax()//2227a0
{
	//sub_90810();
	sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);
	sub_6EF10_set_mouse_minmax(0, 640, 0, 400);
}

//----- (000417D0) --------------------------------------------------------
void sub_417D0_install_pal_and_mouse_minmax2()//2227d0
{
	sub_906B4();
	sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);
	sub_6EF10_set_mouse_minmax(0, 640, 0, 800);
}

void sub_41A90_VGA_pallette_install(Bit8u* buffer)//222a90
{
	//354f24 - 000000 00002a 002a00 002a2a 2a0000
	//debug
	//loadfromsnapshot((char*)"0160-00222A90-x", a1, 0x1a7358, 0x300);//4c
	//loadfromsnapshot((char*)"0160-00222A90-x", a1, 0x3aa0a4, 0x300);//4c
	//debug
	VGA_Set_pallette(buffer);
}

//----- (00041AF0) --------------------------------------------------------
void sub_41AF0()//222af0
{
	//char result; // al
	//uint8_t *v1; // ST00_4

	if (!x_BYTE_D47D9)
	{
		//result = (int)x_D41A0_BYTEARRAY_0;
		if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190)
		{
			if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2192.xxxx_0x2193 && x_DWORD_DE560_ScreenWidth == 640)
				sub_75C50();
			x_BYTE_D47D8 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190;
			sub_417A0_install_pal_and_mouse_minmax();
			//v1 = *xadatapald0dat2.var28_begin_buffer;
			D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 = 0;
			sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);
		}
	}
	x_BYTE_D47D9++;
}

//----- (00041B60) --------------------------------------------------------
void sub_41B60()//222b60
{
	//char v0; // dl
	//char result; // al

	//fix
	//result = 0;
	//fix

	if (x_BYTE_D47D9 == 1)
	{
		//v0 = x_BYTE_D47D8;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 = x_BYTE_D47D8;
		//result = v0;
		if ((uint8_t)x_BYTE_D47D8 >= 1u && (uint8_t)x_BYTE_D47D8 <= 1u)
			sub_417D0_install_pal_and_mouse_minmax2();
		x_BYTE_D47D8 = 0;
	}
	if (x_BYTE_D47D9)
		x_BYTE_D47D9--;
	//return result;
}

//----- (00041BC0) --------------------------------------------------------
void sub_41BC0()//222bc0
{
	//int64_t result; // rax

	//BYTE1(result) = 0;
	x_BYTE_D47D9 = 0;
	x_BYTE_D47D8 = 0;
	//return result;
}



//----- (00041BD3) --------------------------------------------------------
void sub_41BD3_subDrawSprite(unsigned int a1)//222bd3 //draw particle / billboards?
{
	//int v1; // eax
	char* v2; // ebx
	x_DWORD* v3; // esi
	x_BYTE* v4; // edi
	int v5; // ecx
	char v6; // cf
	int v7; // ecx
	int v8; // ecx
	char v9; // al
	char v10; // al
	char v11; // al
	char v12; // al
	int v13; // eax
	x_BYTE* v14; // ebx
	x_DWORD* v15; // esi
	x_BYTE* v16; // edi
	int v17; // ecx
	x_BYTE* v18; // ebx
	x_DWORD* v19; // esi
	x_BYTE* v20; // edi
	int v21; // eax
	int v22; // ecx
	x_BYTE* v23; // ebx
	x_DWORD* v24; // esi
	x_BYTE* v25; // edi
	int v26; // eax
	int v27; // ecx
	x_BYTE* v28; // ebx
	x_DWORD* v29; // esi
	x_BYTE* v30; // edi
	int v31; // eax
	int v32; // ecx
	int v33; // eax
	x_BYTE* v34; // ebx
	x_DWORD* v35; // esi
	x_BYTE* v36; // edi
	int v37; // ecx
	int v38; // edx
	x_BYTE* v39; // ebx
	x_DWORD* v40; // esi
	x_BYTE* v41; // edi
	int v42; // eax
	int v43; // ecx
	int v44; // edx
	x_BYTE* v45; // ebx
	x_DWORD* v46; // esi
	x_BYTE* v47; // edi
	int v48; // eax
	int v49; // ecx
	int v50; // ST4C_4
	char* v51; // ebx
	x_BYTE* v52; // edx
	x_DWORD* v53; // esi
	char* v54; // edi
	int v55; // ecx
	int v56; // ecx
	int v57; // ecx
	char v58; // al
	char v59; // al
	char v60; // al
	char v61; // al
	x_BYTE* v62; // ebx
	int v63; // eax
	Bit8s* v64; // edx
	x_DWORD* v65; // esi
	x_DWORD* v66; // edi
	int v67; // ecx
	x_BYTE* v68; // ebx
	x_BYTE* v69; // edx
	x_DWORD* v70; // esi
	x_DWORD* v71; // edi
	int v72; // eax
	int v73; // ecx
	x_BYTE* v74; // ebx
	x_BYTE* v75; // edx
	x_DWORD* v76; // esi
	x_DWORD* v77; // edi
	int v78; // eax
	int v79; // ecx
	x_BYTE* v80; // ebx
	x_BYTE* v81; // edx
	x_DWORD* v82; // esi
	x_DWORD* v83; // edi
	int v84; // eax
	int v85; // ecx
	x_BYTE* v86; // ebx
	int v87; // eax
	x_BYTE* v88; // edx
	x_DWORD* v89; // esi
	x_DWORD* v90; // edi
	int v91; // ecx
	int v92; // ecx
	x_BYTE* v93; // ebx
	x_BYTE* v94; // edx
	int v95; // eax
	x_DWORD* v96; // esi
	x_DWORD* v97; // edi
	int v98; // ecx
	x_BYTE* v99; // ebx
	x_BYTE* v100; // edx
	int v101; // eax
	x_DWORD* v102; // esi
	x_DWORD* v103; // edi
	char* v104; // ebx
	int v105; // eax
	x_BYTE* v106; // edx
	x_DWORD* v107; // esi
	x_DWORD* v108; // edi
	int v109; // ecx
	char v110; // al
	char v111; // al
	int v112; // eax
	int v113; // edx
	int v114; // edx
	signed int v116; // [esp+10h] [ebp-54h]
	x_DWORD* v117; // [esp+14h] [ebp-50h]
	x_DWORD* v118; // [esp+14h] [ebp-50h]
	x_DWORD* v119; // [esp+14h] [ebp-50h]
	x_DWORD* v120; // [esp+14h] [ebp-50h]
	int v121; // [esp+1Ch] [ebp-48h]
	int v122; // [esp+20h] [ebp-44h]
	Bit8u* v123; // [esp+20h] [ebp-44h]
	int v124; // [esp+24h] [ebp-40h]
	int v125; // [esp+24h] [ebp-40h]
	int i; // [esp+24h] [ebp-40h]
	//Bit8u* j; // [esp+24h] [ebp-40h]
	int k; // [esp+24h] [ebp-40h]
	int v129; // [esp+24h] [ebp-40h]
	int v130; // [esp+24h] [ebp-40h]
	int l; // [esp+28h] [ebp-3Ch]
	int v132; // [esp+28h] [ebp-3Ch]
	int v133; // [esp+28h] [ebp-3Ch]
	int v134; // [esp+34h] [ebp-30h]
	int v135; // [esp+34h] [ebp-30h]
	int v136; // [esp+38h] [ebp-2Ch]
	int v137; // [esp+38h] [ebp-2Ch]
	int v138; // [esp+3Ch] [ebp-28h]
	int v139; // [esp+3Ch] [ebp-28h]
	int v140; // [esp+3Ch] [ebp-28h]
	int v141; // [esp+3Ch] [ebp-28h]
	int v142; // [esp+3Ch] [ebp-28h]
	int v143; // [esp+3Ch] [ebp-28h]
	int v144; // [esp+3Ch] [ebp-28h]
	int v145; // [esp+3Ch] [ebp-28h]
	int v146; // [esp+3Ch] [ebp-28h]
	int v147; // [esp+3Ch] [ebp-28h]
	int v148; // [esp+3Ch] [ebp-28h]
	int v149; // [esp+3Ch] [ebp-28h]
	int v150; // [esp+3Ch] [ebp-28h]
	int v151; // [esp+3Ch] [ebp-28h]
	int v152; // [esp+3Ch] [ebp-28h]
	x_DWORD* v153; // [esp+40h] [ebp-24h]
	x_DWORD* v154; // [esp+40h] [ebp-24h]
	Bit8u* v155; // [esp+40h] [ebp-24h]
	int v156; // [esp+44h] [ebp-20h]
	int v157; // [esp+48h] [ebp-1Ch]
	int v158; // [esp+48h] [ebp-1Ch]
	int v159; // [esp+4Ch] [ebp-18h]
	int v160; // [esp+50h] [ebp-14h]
	int v161; // [esp+50h] [ebp-14h]
	int* v162; // [esp+54h] [ebp-10h]
	x_DWORD* v163; // [esp+54h] [ebp-10h]
	x_DWORD* v164; // [esp+54h] [ebp-10h]
	x_DWORD* v165; // [esp+54h] [ebp-10h]
	int* v166; // [esp+54h] [ebp-10h]
	x_DWORD* v167; // [esp+54h] [ebp-10h]
	x_DWORD* v168; // [esp+54h] [ebp-10h]
	char* v169; // [esp+58h] [ebp-Ch]
	int v170; // [esp+5Ch] [ebp-8h]
	int v171; // [esp+5Ch] [ebp-8h]
	int v172; // [esp+60h] [ebp-4h]
	int v173; // [esp+60h] [ebp-4h]
	int v174; // [esp+60h] [ebp-4h]
	int v175; // [esp+60h] [ebp-4h]

	int jy;

	return; // FIXME

	#ifdef TEST_BIG_SPRITES//real size is 4xsmaller
		//str_F2C20ar.dword0x09_realWidth >>= 2;
		//str_F2C20ar.dword0x0c_realHeight >>= 2;
	#endif

	if (!x_BYTE_F2CC6)
	{
		if (a1 < 1)
		{
			if (a1)
				goto LABEL_126;
		}
		else
		{
			if (a1 <= 1)
			{
				str_F2C20ar.dword0x04_screenY -= ((str_F2C20ar.dword0x11 * str_F2C20ar.dword0x09_realWidth >> 1) + str_F2C20ar.dword0x0d * str_F2C20ar.dword0x0c_realHeight) >> 16;
				str_F2C20ar.dword0x03_screenX -= (str_F2C20ar.dword0x11 * str_F2C20ar.dword0x0c_realHeight - (str_F2C20ar.dword0x0d * str_F2C20ar.dword0x09_realWidth >> 1)) >> 16;
				goto LABEL_126;
			}
			if (a1 != 2)
			{
			LABEL_126:
				//LOWORD(v1) = str_F2C20ar.dword0x1e;
				if ((unsigned int)str_F2C20ar.dword0x1e <= 7)
				{
					switch (str_F2C20ar.dword0x1e)//mirroring
					{
					case 0:
						//v1 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x09_realWidth >> 16;
						v156 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x09_realWidth >> 16;
						if (v156 <= 0)
							break;
						//v1 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x1b;
						v159 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x1b;
						if (v159 <= 0)
							break;
						v135 = (str_F2C20ar.dword0x06_height << 16) / v159;
						if (a1 == 1)
						{
							str_F2C20ar.dword0x0a_actIdx = 0;
						}
						else
						{
							str_F2C20ar.dword0x0a_actIdx = (v159 - 1) * v135;
							v135 = -v135;
						}
						v160 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x0c_realHeight / v159;
						v162 = (int*)(&x_DWORD_E9C38_smalltit[45920]);
						v157 = str_F2C20ar.dword0x04_screenY << 16;
						v170 = str_F2C20ar.dword0x03_screenX - (str_F2C20ar.dword0x1f * str_F2C20ar.dword0x04_screenY >> 16);
						if (str_F2C20ar.dword0x03_screenX - (str_F2C20ar.dword0x1f * str_F2C20ar.dword0x04_screenY >> 16) >= str_F2C20ar.dword0x21)
							goto LABEL_136;
						v139 = str_F2C20ar.dword0x21 - v170;
						//LOWORD(v1) = str_F2C20ar.dword0x21 - v170;
						v159 -= str_F2C20ar.dword0x21 - v170;
						if (v159 > 0)
						{
							str_F2C20ar.dword0x0a_actIdx += v139 * v135;
							v157 -= v139 * v160;
							v170 = str_F2C20ar.dword0x21;
						LABEL_136:
							v123 = x_DWORD_DE560_ScreenWidth * v170 + x_DWORD_DE558;
							goto LABEL_137;
						}
						break;
					case 1:
						//v1 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x09_realWidth >> 16;
						v156 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x09_realWidth >> 16;
						if (v156 <= 0)
							break;
						//v1 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x27;
						v159 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x27;
						if (v159 <= 0)
							break;
						v135 = (str_F2C20ar.dword0x06_height << 16) / v159;
						if (a1 == 1)
						{
							str_F2C20ar.dword0x0a_actIdx = 0;
						}
						else
						{
							str_F2C20ar.dword0x0a_actIdx = (v159 - 1) * v135;
							v135 = -v135;
						}
						v161 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x0c_realHeight / v159;
						v166 = (int*)(&x_DWORD_E9C38_smalltit[45920]);
						v158 = str_F2C20ar.dword0x03_screenX << 16;
						v171 = str_F2C20ar.dword0x04_screenY - (str_F2C20ar.dword0x1f * str_F2C20ar.dword0x03_screenX >> 16);
						if (str_F2C20ar.dword0x04_screenY - (str_F2C20ar.dword0x1f * str_F2C20ar.dword0x03_screenX >> 16) < str_F2C20ar.dword0x25)
						{
							//LOWORD(v1) = x_DWORD_F2C30 - ((unsigned int)(str_F2C20ar.dword0x1f * x_DWORD_F2C2C) >> 16);
							if (v171 >= str_F2C20ar.dword0x21)
								goto LABEL_284;
						}
						else
						{
							v141 = v171 - str_F2C20ar.dword0x25;
							//LOWORD(v1) = v171 - str_F2C20ar.dword0x25;
							v159 -= v171 - str_F2C20ar.dword0x25;
							if (v159 > 0)
							{
								str_F2C20ar.dword0x0a_actIdx += v141 * v135;
								v158 += v141 * v161;
								v171 = str_F2C20ar.dword0x25;
							LABEL_284:
								v123 = v171 + x_DWORD_DE558;
								//myprintf("v123-2 %08X", v123);
								goto LABEL_285;
							}
						}
						break;
					case 2:
						//v1 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x09_realWidth >> 16;
						v156 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x09_realWidth >> 16;
						if (v156 <= 0)
							break;
						//v1 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x1b;
						v159 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x1b;
						if (v159 <= 0)
							break;
						v135 = (str_F2C20ar.dword0x06_height << 16) / v159;
						if (a1 == 1)
						{
							str_F2C20ar.dword0x0a_actIdx = 0;
						}
						else
						{
							str_F2C20ar.dword0x0a_actIdx = (v159 - 1) * v135;
							v135 = -v135;
						}
						v160 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x0c_realHeight / v159;
						v162 = (int*)(&x_DWORD_E9C38_smalltit[45920]);
						v157 = str_F2C20ar.dword0x03_screenX << 16;
						v170 = str_F2C20ar.dword0x25 - str_F2C20ar.dword0x04_screenY - (str_F2C20ar.dword0x1f * str_F2C20ar.dword0x03_screenX >> 16);
						if (v170 >= str_F2C20ar.dword0x21)
							goto LABEL_329;
						v147 = str_F2C20ar.dword0x21 - v170;
						//LOWORD(v1) = str_F2C20ar.dword0x21 - v170;
						v159 -= str_F2C20ar.dword0x21 - v170;
						if (v159 <= 0)
							break;
						str_F2C20ar.dword0x0a_actIdx += v147 * v135;
						v157 -= v147 * v160;
						v170 = str_F2C20ar.dword0x21;
					LABEL_329:
						v123 = str_F2C20ar.dword0x25 + x_DWORD_DE558 - 1 - v170;
						//myprintf("v123-3 %08X", v123);
						goto LABEL_137;
					case 3:
						//v1 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x09_realWidth >> 16;
						v156 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x09_realWidth >> 16;
						if (v156 <= 0)
							break;
						//v1 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x27;
						v159 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x27;
						if (v159 <= 0)
							break;
						v135 = (str_F2C20ar.dword0x06_height << 16) / v159;
						if (a1 == 1)
						{
							str_F2C20ar.dword0x0a_actIdx = 0;
						}
						else
						{
							str_F2C20ar.dword0x0a_actIdx = (v159 - 1) * v135;
							v135 = -v135;
						}
						v161 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x0c_realHeight / v159;
						v166 = (int*)(&x_DWORD_E9C38_smalltit[45920]);
						v158 = (str_F2C20ar.dword0x26 - str_F2C20ar.dword0x04_screenY) << 16;
						v171 = str_F2C20ar.dword0x03_screenX - (str_F2C20ar.dword0x1f * (str_F2C20ar.dword0x26 - str_F2C20ar.dword0x04_screenY) >> 16);
						if (str_F2C20ar.dword0x03_screenX - (str_F2C20ar.dword0x1f * (str_F2C20ar.dword0x26 - str_F2C20ar.dword0x04_screenY) >> 16) < str_F2C20ar.dword0x25)
						{
							//LOWORD(v1) = x_DWORD_F2C2C - ((unsigned int)(str_F2C20ar.dword0x1f * (str_F2C20ar.dword0x26 - x_DWORD_F2C30)) >> 16);
							if (v171 < str_F2C20ar.dword0x21)
								break;
						}
						else
						{
							v148 = v171 - str_F2C20ar.dword0x25;
							//LOWORD(v1) = v171 - str_F2C20ar.dword0x25;
							v159 -= v171 - str_F2C20ar.dword0x25;
							if (v159 <= 0)
								break;
							str_F2C20ar.dword0x0a_actIdx += v148 * v135;
							v158 += v148 * v161;
							v171 = str_F2C20ar.dword0x25;
						}
						v123 = str_F2C20ar.dword0x26 + x_DWORD_DE560_ScreenWidth * v171 - 1 + x_DWORD_DE558;
						//myprintf("v123-4 %08X", v123);
						goto LABEL_285;
					case 4:
						//v1 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x09_realWidth >> 16;
						v156 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x09_realWidth >> 16;
						if (v156 <= 0)
							break;
						//v1 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x1b;
						v159 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x1b;
						if (v159 <= 0)
							break;
						v135 = (str_F2C20ar.dword0x06_height << 16) / v159;
						if (a1 == 1)
						{
							str_F2C20ar.dword0x0a_actIdx = 0;
						}
						else
						{
							str_F2C20ar.dword0x0a_actIdx = (v159 - 1) * v135;
							v135 = -v135;
						}
						v160 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x0c_realHeight / v159;
						v162 = (int*)(&x_DWORD_E9C38_smalltit[45920]);
						v157 = (str_F2C20ar.dword0x26 - str_F2C20ar.dword0x04_screenY) << 16;
						v170 = str_F2C20ar.dword0x25 - str_F2C20ar.dword0x03_screenX - (str_F2C20ar.dword0x1f * (str_F2C20ar.dword0x26 - str_F2C20ar.dword0x04_screenY) >> 16);
						if (v170 >= str_F2C20ar.dword0x21)
							goto LABEL_348;
						v149 = str_F2C20ar.dword0x21 - v170;
						//LOWORD(v1) = str_F2C20ar.dword0x21 - v170;
						v159 -= str_F2C20ar.dword0x21 - v170;
						if (v159 <= 0)
							break;
						str_F2C20ar.dword0x0a_actIdx += v149 * v135;
						v157 -= v149 * v160;
						v170 = str_F2C20ar.dword0x21;
					LABEL_348:
						v123 = str_F2C20ar.dword0x26 + x_DWORD_DE558 + x_DWORD_DE560_ScreenWidth * (str_F2C20ar.dword0x25 - v170 - 1) - 1;
						//myprintf("v123-5 %08X", v123);
						goto LABEL_137;
					case 5:
						//v1 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x09_realWidth >> 16;
						v156 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x09_realWidth >> 16;
						if (v156 <= 0)
							break;
						//v1 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x27;
						v159 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x27;
						if (v159 <= 0)
							break;
						v135 = (str_F2C20ar.dword0x06_height << 16) / v159;
						if (a1 == 1)
						{
							str_F2C20ar.dword0x0a_actIdx = 0;
						}
						else
						{
							str_F2C20ar.dword0x0a_actIdx = (v159 - 1) * v135;
							v135 = -v135;
						}
						v161 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x0c_realHeight / v159;
						v166 = (int*)(&x_DWORD_E9C38_smalltit[45920]);
						v158 = (str_F2C20ar.dword0x26 - str_F2C20ar.dword0x03_screenX) << 16;
						v113 = str_F2C20ar.dword0x1f * (str_F2C20ar.dword0x26 - str_F2C20ar.dword0x03_screenX) >> 16;
						v171 = str_F2C20ar.dword0x25 - str_F2C20ar.dword0x04_screenY - v113;
						if (v171 < str_F2C20ar.dword0x25)
						{
							//LOWORD(v1) = str_F2C20ar.dword0x25 - x_DWORD_F2C30 - v113;
							if (v171 < str_F2C20ar.dword0x21)
								break;
						}
						else
						{
							v150 = v171 - str_F2C20ar.dword0x25;
							//LOWORD(v1) = v171 - str_F2C20ar.dword0x25;
							v159 -= v171 - str_F2C20ar.dword0x25;
							if (v159 <= 0)
								break;
							str_F2C20ar.dword0x0a_actIdx += v150 * v135;
							v158 += v150 * v161;
							v171 = str_F2C20ar.dword0x25;
						}
						v123 = (str_F2C20ar.dword0x26 - 1) * x_DWORD_DE560_ScreenWidth + str_F2C20ar.dword0x25 + x_DWORD_DE558 - 1 - v171;
						//myprintf("v123-6 %08X", v123);
						goto LABEL_285;
					case 6:
						//v1 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x09_realWidth >> 16;
						v156 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x09_realWidth >> 16;
						if (v156 <= 0)
							break;
						//v1 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x1b;
						v159 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x1b;
						if (v159 <= 0)
							break;
						v135 = (str_F2C20ar.dword0x06_height << 16) / v159;
						if (a1 == 1)
						{
							str_F2C20ar.dword0x0a_actIdx = 0;
						}
						else
						{
							str_F2C20ar.dword0x0a_actIdx = (v159 - 1) * v135;
							v135 = -v135;
						}
						v160 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x0c_realHeight / v159;
						v162 = (int*)(&x_DWORD_E9C38_smalltit[45920]);
						v157 = (str_F2C20ar.dword0x26 - str_F2C20ar.dword0x03_screenX) << 16;
						v170 = str_F2C20ar.dword0x04_screenY - (str_F2C20ar.dword0x1f * (str_F2C20ar.dword0x26 - str_F2C20ar.dword0x03_screenX) >> 16);
						if (str_F2C20ar.dword0x04_screenY - (str_F2C20ar.dword0x1f * (str_F2C20ar.dword0x26 - str_F2C20ar.dword0x03_screenX) >> 16) >= str_F2C20ar.dword0x21)
							goto LABEL_367;
						v151 = str_F2C20ar.dword0x21 - v170;
						//LOWORD(v1) = str_F2C20ar.dword0x21 - v170;
						v159 -= str_F2C20ar.dword0x21 - v170;
						if (v159 <= 0)
							break;
						str_F2C20ar.dword0x0a_actIdx += v151 * v135;
						v157 -= v151 * v160;
						v170 = str_F2C20ar.dword0x21;
					LABEL_367:
						v123 = x_DWORD_DE558 + x_DWORD_DE560_ScreenWidth * (str_F2C20ar.dword0x26 - 1) + v170;
						//myprintf("v123-7 %08X", v123);
					LABEL_137:
						v140 = str_F2C20ar.dword0x25 - str_F2C20ar.dword0x21;
						if (v170 <= 0)
						{
							if (v159 > v140)
								v159 = str_F2C20ar.dword0x25 - str_F2C20ar.dword0x21;
						}
						else if (v170 + v159 > v140)
						{
							//LOWORD(v1) = v140 - v170;
							v159 = v140 - v170;
							if (v140 - v170 <= 0)
								break;
						}
						v116 = 9999999;
						v124 = v159;
						while (2)
						{
							if (!v124)
								goto LABEL_154;
							v172 = v157 >> 16;
							if (v157 >> 16 >= 0)
							{
								v162[0] = v172;
								v162[1] = v156;
								v162[2] = 0;
								v116 = 0;
							LABEL_151:
								if (v162[1] + *v162 > str_F2C20ar.dword0x26)
									v162[1] = str_F2C20ar.dword0x26 - *v162;
								v157 -= v160;
								v162 += 3;
								v124--;
								continue;
							}
							break;
						}
						v173 = -v172;
						v162[0] = 0;
						v162[1] = v156 - v173;
						if (v162[1] > 0)
						{
							v162[2] = v173;
							if (v173 < v116)
								v116 = v173;
							goto LABEL_151;
						}
						v159 -= v124;
					LABEL_154:
						if (v170 + v159 > str_F2C20ar.dword0x19)
						{
							if (str_F2C20ar.dword0x19 - v170 <= 0)
							{
								v163 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[45920]);
								v117 = (x_DWORD*)(4 * (str_F2C20ar.dword0x19 - v170) + str_F2C20ar.dword0x1a);
								v125 = v159;
							}
							else
							{
								v163 = (x_DWORD*)(12 * (str_F2C20ar.dword0x19 - v170) + &x_DWORD_E9C38_smalltit[45920]);
								v117 = (x_DWORD*)str_F2C20ar.dword0x1a;
								v125 = v170 + v159 - str_F2C20ar.dword0x19;
							}
							while (v125)
							{
								if (*v163 + v163[1] > * v117)
								{
									if (*v163 >= *v117)
									{
										v159 -= v125;
										break;
									}
									v163[1] = *v117 - *v163;
								}
								v163 += 3;
								v117--;
								v125--;
							}
						}
						if (v170 < 0)
						{
							v118 = (x_DWORD*)(4 * (-1 - v170) + &x_DWORD_E9C38_smalltit + 59360);
							v164 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[45920]);
							while (v170)
							{
								if (*v118 > * v164)
								{
									if (v164[1] + *v164 >= *v118)
									{
										v50 = *v118 - *v164;
										v164[0] = *v118;
										v164[2] += v50;
										v164[1] -= v50;
									}
									else
									{
										v164[1] = 0;
									}
								}
								v118--;
								v164 += 3;
								v170++;
							}
						}
					LABEL_172:
						v137 = (str_F2C20ar.dword0x05 << 16) / v156;
						str_F2C20ar.dword0x0b = 0;
						if (str_F2C20ar.dword0x05 < 0)
							str_F2C20ar.dword0x0b -= v137 * (v156 - 1);
						//LOWORD(v1) = v156 - v116;
						v132 = v156 - v116;
						if (v156 - v116 > 0)
						{
							if (v132 > str_F2C20ar.dword0x1c)
								v132 = str_F2C20ar.dword0x1c;
							str_F2C20ar.dword0x0b += v137 * v116;
							v154 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[36960]);
							while (v132 >= 0)
							{
								v154[1] = str_F2C20ar.dword0x0b >> 16;
								*v154 = v154[1] - *(v154 - 1);
								str_F2C20ar.dword0x0b += v137;
								v154 += 2;
								v132--;
							}
							v165 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[45920]);
							//LOWORD(v1) = v159;
							for (i = v159; i; i--)
							{
								v133 = v165[1];
								if (v133 > 0)
								{
									//adress 2237d3

									v169 = (char*)unk_F0E20x + 12 * *v165;
									v155 = 8 * (v165[2] - v116) + &x_DWORD_E9C38_smalltit[36960];
									v121 = str_F2C20ar.dword0x08_width * (str_F2C20ar.dword0x0a_actIdx >> 16) + str_F2C20ar.dword0x02_data;
									if ((unsigned int)str_F2C20ar.dword0x01_rotIdx <= 8)
									{
										switch (str_F2C20ar.dword0x01_rotIdx)
										{
										case 0:
											v51 = (char*)(*(x_DWORD*)(v155 + 4) + v121);
											v52 = (x_BYTE*)(*((Bit32s*)v169 + 1) + v123);
											v53 = (x_DWORD*)(8 * (v165[2] - v116) + &x_DWORD_E9C38_smalltit[36960]);
											v54 = (char*)unk_F0E20x + 12 * *v165;
											v55 = v133 >> 1;
											if (!(v133 & 1))
											{
												v6 = v55 & 1;
												v56 = v133 >> 2;
												if (v6)
												{
													v56++;
													v53 = (x_DWORD*)(v155 - 8);
													v54 = v169 - 12;
													goto LABEL_197;
												}
												v53 = (x_DWORD*)(v155 + 8);
												v54 = v169 + 12;
												goto LABEL_191;
											}
											v57 = v55 + 2;
											v6 = v57 & 1;
											v56 = v57 >> 1;
											if (!v6)
											{
												v53 = (x_DWORD*)(v155 - 16);
												v54 = v169 - 24;
												goto LABEL_200;
											}
											while (1)
											{
												v59 = *v51;
												v51 += v53[2];
												if (v59)
													*v52 = v59;
												v52 += *((x_DWORD*)v54 + 3);
											LABEL_197:
												v60 = *v51;
												v51 += v53[4];
												if (v60)
													*v52 = v60;
												v52 += *((x_DWORD*)v54 + 6);
											LABEL_200:
												v61 = *v51;
												v51 += v53[6];
												if (v61)
													*v52 = v61;
												v52 += *((x_DWORD*)v54 + 9);
												v53 += 8;
												v54 += 48;
												if (!--v56)
													break;
											LABEL_191:
												v58 = *v51;
												v51 += *v53;
												if (v58)
													*v52 = v58;
												v52 += *(x_DWORD*)v54;
											}
											break;
										case 1:
											v62 = (x_BYTE*)(*(x_DWORD*)(v155 + 4) + v121);
											v63 = str_F2C20ar.dword0x00;
											v64 = (Bit8s*)(*((Bit32s*)v169 + 1) + v123);
											v65 = (x_DWORD*)(8 * (v165[2] - v116) + &x_DWORD_E9C38_smalltit[36960]);
											v66 = (x_DWORD*)((char*)unk_F0E20x + 12 * *v165);
											v67 = v133 >> 1;
											if (!(v133 & 1))
											{
												v65 = (x_DWORD*)(v155 + 8);
												v66 = (x_DWORD*)(v169 + 12);
												goto LABEL_207;
											}
											v67++;
											while (1)
											{
												LOBYTE(v63) = *v62;
												v62 += v65[2];
												if ((x_BYTE)v63)
													*v64 = x_BYTE_F6EE0_tablesx[v63];
												v64 += v66[3];
												v65 += 4;
												v66 += 6;
												if (!--v67)
													break;
											LABEL_207:
												LOBYTE(v63) = *v62;
												v62 += *v65;
												if ((x_BYTE)v63)
													*v64 = x_BYTE_F6EE0_tablesx[v63];
												v64 += *v66;
											}
											break;
										case 2:
											v68 = (x_BYTE*)(*(x_DWORD*)(v155 + 4) + v121);
											v69 = (x_BYTE*)(*((x_DWORD*)v169 + 1) + v123);
											v70 = (x_DWORD*)(8 * (v165[2] - v116) + &x_DWORD_E9C38_smalltit[36960]);
											v71 = (x_DWORD*)((char*)unk_F0E20x + 12 * *v165);
											HIWORD(v72) = 0;
											v73 = v133 >> 1;
											if (!(v133 & 1))
											{
												v70 = (x_DWORD*)(v155 + 8);
												v71 = (x_DWORD*)(v169 + 12);
												goto LABEL_217;
											}
											v73++;
											while (1)
											{
												HIBYTE(v72) = *v68;
												v68 += v70[2];
												if (HIBYTE(v72))
												{
													LOBYTE(v72) = *v69;
													*v69 = x_BYTE_F6EE0_tablesx[0x4000 + v72];
												}
												v69 += v71[3];
												v70 += 4;
												v71 += 6;
												if (!--v73)
													break;
											LABEL_217:
												HIBYTE(v72) = *v68;
												v68 += *v70;
												if (HIBYTE(v72))
												{
													LOBYTE(v72) = *v69;
													*v69 = x_BYTE_F6EE0_tablesx[0x4000 + v72];
												}
												v69 += *v71;
											}
											break;
										case 3:
											v74 = (x_BYTE*)(*(x_DWORD*)(v155 + 4) + v121);
											v75 = (x_BYTE*)(*((x_DWORD*)v169 + 1) + v123);
											v76 = (x_DWORD*)(8 * (v165[2] - v116) + &x_DWORD_E9C38_smalltit[36960]);//to position
											v77 = (x_DWORD*)((char*)unk_F0E20x + 12 * v165[0]);//from position
											HIWORD(v78) = 0;
											v79 = v133 >> 1;
											if (!(v133 & 1))
											{
												v76 = (x_DWORD*)(v155 + 8);
												v77 = (x_DWORD*)(v169 + 12);
												goto LABEL_227;
											}
											v79++;
											while (1)
											{
												LOBYTE(v78) = *v74;
												v74 += v76[2];
												if ((x_BYTE)v78)
												{
													HIBYTE(v78) = *v75;
													*v75 = x_BYTE_F6EE0_tablesx[0x4000 + v78];
												}
												v75 += v77[3];
												v76 += 4;
												v77 += 6;
												if (!--v79)
													break;
											LABEL_227:
												LOBYTE(v78) = *v74;
												v74 += *v76;
												if ((x_BYTE)v78)
												{
													HIBYTE(v78) = *v75;
													*v75 = x_BYTE_F6EE0_tablesx[0x4000 + v78];
												}
												v75 += *v77;
											}
											break;
										case 4:
											v80 = (x_BYTE*)(*(x_DWORD*)(v155 + 4) + v121);
											HIWORD(v84) = HIWORD(str_F2C20ar.dword0x07);
											v81 = (x_BYTE*)(*((x_DWORD*)v169 + 1) + v123);
											v82 = (x_DWORD*)(8 * (v165[2] - v116) + &x_DWORD_E9C38_smalltit[36960]);
											v83 = (x_DWORD*)((char*)unk_F0E20x + 12 * *v165);
											BYTE1(v84) = str_F2C20ar.dword0x07;
											v85 = v133 >> 1;
											if (!(v133 & 1))
											{
												v82 = (x_DWORD*)(v155 + 8);
												v83 = (x_DWORD*)(v169 + 12);
												goto LABEL_237;
											}
											v85++;
											while (1)
											{
												LOBYTE(v84) = *v80;
												v80 += v82[2];
												if ((x_BYTE)v84)
													* v81 = x_BYTE_F6EE0_tablesx[0x4000 + v84];
												v81 += v83[3];
												v82 += 4;
												v83 += 6;
												if (!--v85)
													break;
											LABEL_237:
												LOBYTE(v84) = *v80;
												v80 += *v82;
												if ((x_BYTE)v84)
													* v81 = x_BYTE_F6EE0_tablesx[0x4000 + v84];
												v81 += *v83;
											}
											break;
										case 5:
											v86 = (x_BYTE*)(*(x_DWORD*)(v155 + 4) + v121);
											v87 = str_F2C20ar.dword0x07;
											v88 = (x_BYTE*)(*((x_DWORD*)v169 + 1) + v123);
											v89 = (x_DWORD*)(8 * (v165[2] - v116) + &x_DWORD_E9C38_smalltit[36960]);
											v90 = (x_DWORD*)((char*)unk_F0E20x + 12 * *v165);
											v91 = v133 >> 1;
											if (!(v133 & 1))
											{
												v89 = (x_DWORD*)(v155 + 8);
												v90 = (x_DWORD*)(v169 + 12);
												goto LABEL_247;
											}
											v91++;
											while (1)
											{
												BYTE1(v87) = *v86;
												v86 += v89[2];
												if (BYTE1(v87))
													* v88 = x_BYTE_F6EE0_tablesx[0x4000 + v87];
												v88 += v90[3];
												v89 += 4;
												v90 += 6;
												if (!--v91)
													break;
											LABEL_247:
												BYTE1(v87) = *v86;
												v86 += *v89;
												if (BYTE1(v87))
													* v88 = x_BYTE_F6EE0_tablesx[0x4000 + v87];
												v88 += *v90;
											}
											break;
										case 6:
											v92 = str_F2C20ar.dword0x00;
											v93 = (x_BYTE*)(*(x_DWORD*)(v155 + 4) + v121);
											v94 = (x_BYTE*)(*((x_DWORD*)v169 + 1) + v123);
											HIWORD(v95) = 0;
											v96 = (x_DWORD*)(v155 + 8);
											v97 = (x_DWORD*)(v169 + 12);
											do
											{
												BYTE1(v95) = *v93;
												v93 += *v96;
												if (BYTE1(v95))
												{
													LOBYTE(v95) = *v94;
													LOBYTE(v92) = x_BYTE_F6EE0_tablesx[0x4000 + v95];
													*v94 = x_BYTE_F6EE0_tablesx[v92];
												}
												v94 += *v97;
												v96 += 2;
												v97 += 3;
												v133--;
											} while (v133);
											break;
										case 7:
											v98 = str_F2C20ar.dword0x00;
											v99 = (x_BYTE*)(*(x_DWORD*)(v155 + 4) + v121);
											v100 = (x_BYTE*)(*((x_DWORD*)v169 + 1) + v123);
											HIWORD(v101) = 0;
											v102 = (x_DWORD*)(v155 + 8);
											v103 = (x_DWORD*)(v169 + 12);
											do
											{
												LOBYTE(v101) = *v99;
												v99 += *v102;
												if ((x_BYTE)v101)
												{
													BYTE1(v101) = *v100;
													LOBYTE(v98) = x_BYTE_F6EE0_tablesx[0x4000 + v101];
													*v100 = x_BYTE_F6EE0_tablesx[v98];
												}
												v100 += *v103;
												v102 += 2;
												v103 += 3;
												v133--;
											} while (v133);
											break;
										case 8:
											v104 = (char*)(*(x_DWORD*)(v155 + 4) + v121);
											v105 = str_F2C20ar.dword0x00;
											v106 = (x_BYTE*)(*((x_DWORD*)v169 + 1) + v123);
											v107 = (x_DWORD*)(8 * (v165[2] - v116) + &x_DWORD_E9C38_smalltit[36960]);
											v108 = (x_DWORD*)((char*)unk_F0E20x + 12 * *v165);
											v109 = v133 >> 1;
											if (!(v133 & 1))
											{
												v107 = (x_DWORD*)(v155 + 8);
												v108 = (x_DWORD*)(v169 + 12);
												goto LABEL_267;
											}
											v109++;
											while (1)
											{
												v111 = v104[0];
												v104 += v107[2];
												if (v111)
												{
													LOBYTE(v105) = *v106;
													*v106 = x_BYTE_F6EE0_tablesx[v105];
												}
												v106 += v108[3];
												v107 += 4;
												v108 += 6;
												if (!--v109)
													break;
											LABEL_267:
												v110 = *v104;
												v104 += *v107;
												if (v110)
												{
													LOBYTE(v105) = *v106;
													*v106 = x_BYTE_F6EE0_tablesx[v105];
												}
												v106 += *v108;
											}
											break;
										}
									}
								}
								str_F2C20ar.dword0x0a_actIdx += v135;
								v123 += str_F2C20ar.dword0x23;
								//myprintf("v123-10 %08X,%d\n", v123,i);
								v165 += 3;
								//LOWORD(v1) = i;
							}
						}
						break;
					case 7:
						//v1 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x09_realWidth >> 16;
						v156 = str_F2C20ar.dword0x27 * str_F2C20ar.dword0x09_realWidth >> 16;
						if (v156 <= 0)
							break;
						//v1 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x27;
						v159 = (str_F2C20ar.dword0x0c_realHeight << 16) / str_F2C20ar.dword0x27;
						if (v159 <= 0)
							break;
						//LOWORD(v1) = x_DWORD_F2C30;
						if (str_F2C20ar.dword0x04_screenY >= str_F2C20ar.dword0x26)
							break;
						v135 = (str_F2C20ar.dword0x06_height << 16) / v159;
						if (a1 == 1)
						{
							str_F2C20ar.dword0x0a_actIdx = 0;
						}
						else
						{
							str_F2C20ar.dword0x0a_actIdx = (v159 - 1) * v135;
							v135 = -v135;
						}
						v161 = str_F2C20ar.dword0x1b * str_F2C20ar.dword0x0c_realHeight / v159;
						v166 = (int*)(&x_DWORD_E9C38_smalltit[45920]);
						v158 = str_F2C20ar.dword0x04_screenY << 16;
						v114 = str_F2C20ar.dword0x1f * str_F2C20ar.dword0x04_screenY >> 16;
						v171 = str_F2C20ar.dword0x25 - str_F2C20ar.dword0x03_screenX - v114;
						if (v171 < str_F2C20ar.dword0x25)
						{
							//LOWORD(v1) = str_F2C20ar.dword0x25 - x_DWORD_F2C2C - v114;
							if (v171 < str_F2C20ar.dword0x21)
								break;
						}
						else
						{
							v152 = v171 - str_F2C20ar.dword0x25;
							//LOWORD(v1) = v171 - str_F2C20ar.dword0x25;
							v159 -= v171 - str_F2C20ar.dword0x25;
							if (v159 <= 0)
								break;
							str_F2C20ar.dword0x0a_actIdx += v152 * v135;
							v158 += v152 * v161;
							v171 = str_F2C20ar.dword0x25;
						}
						v123 = x_DWORD_DE560_ScreenWidth * (str_F2C20ar.dword0x25 - 1 - v171) + x_DWORD_DE558;
						//myprintf("v123-11 %08X", v123);
					LABEL_285:
						v142 = str_F2C20ar.dword0x25 - str_F2C20ar.dword0x21;
						if (v171 < str_F2C20ar.dword0x25)
						{
							if (v159 > v142)
								v159 = str_F2C20ar.dword0x25 - str_F2C20ar.dword0x21;
						}
						else if (v171 + v159 - str_F2C20ar.dword0x25 > v142)
						{
							//LOWORD(v1) = v142 - v171;
							v159 = v142 - v171 + str_F2C20ar.dword0x25;
							if (v159 <= 0)
								break;
						}
						//adress 223d83
						v116 = 9999999;
						for (jy = v159; jy; jy--)
						{
							v174 = v158 >> 16;
							if (v158 >> 16 < 0)
							{
								v175 = -v174;
								v166[0] = 0;
								v166[1] = v156 - v175;
								v166[2] = v175;
								if (v175 < v116)
									v116 = v175;
							}
							else
							{
								v166[0] = v174;
								v166[1] = v156;
								v166[2] = 0;
								v116 = 0;
							}
							if (v166[1] + v166[0] > str_F2C20ar.dword0x26)
								v166[1] = str_F2C20ar.dword0x26 - v166[0];
							v158 += v161;
							v166 += 3;
						}
						v143 = v171 + str_F2C20ar.dword0x1d - str_F2C20ar.dword0x25 + 1;
						if (v143 > 0)
						{
							v167 = (x_DWORD*)(12 * v143 + &x_DWORD_E9C38_smalltit[45920]);
							v119 = (x_DWORD*)str_F2C20ar.dword0x1a;
							for (k = v171 + str_F2C20ar.dword0x1d - str_F2C20ar.dword0x25 + 2; k; k--)
							{
								v167 -= 3;
								if (&x_DWORD_E9C38_smalltit[45920] > (Bit8u*)v167)
									break;
								v144 = v167[1] + v167[0] - v119[0];
								if (v144 > 0)
								{
									v167[1] -= v144;
									if (v167[1] < 0)
										v167[1] = 0;
								}
								v119--;
							}
						}
						if (v171 - v159 < 0)
						{
							v129 = v159 - v171;
							v168 = (x_DWORD*)(12 * v171 + &x_DWORD_E9C38_smalltit[45920]);
							v120 = (x_DWORD*)(&x_DWORD_E9C38_smalltit + 59360);
							v145 = v171 - v159 - str_F2C20ar.dword0x21;
							if (v145 < 0)
							{
								//LOWORD(v1) = v171 - v159 - str_F2C20ar.dword0x21;
								v159 = v171 - str_F2C20ar.dword0x21;
								if (v171 - str_F2C20ar.dword0x21 <= 0)
									break;
								v129 += v145;
							}
							v112 = v129;
							v130 = v129 - 1;
							if (v112 > 0)
							{
								while (v130)
								{
									v168 += 3;
									if (&x_DWORD_E9C38_smalltit[45920] <= (Bit8u*)v168)
									{
										v146 = *v120 - *v168;
										if (v146 > 0)
										{
											v168[0] = *v120;
											v168[1] -= v146;
											if (v168[1] < 0)
												v168[1] = 0;
											v168[2] += v146;
										}
									}
									v120++;
									v130--;
								}
							}
						}
						goto LABEL_172;
					}
				}
				if (a1 == 1)
				{
					if (!x_D41A0_BYTEARRAY_4_struct.byteindex_207
						&& str_F2C20ar.dword0x14x->byte_0x3F_63 == 3
						&& (!str_F2C20ar.dword0x14x->byte_0x40_64 || str_F2C20ar.dword0x14x->byte_0x40_64 == 1))
					{
						sub_2CB30(str_F2C20ar.dword0x14x, str_F2C20ar.dword0x04_screenY, (int16_t)str_F2C20ar.dword0x03_screenX, str_F2C20ar.dword0x09_realWidth);
					}
					if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
						sub_88740(
						str_F2C20ar.dword0x14x,
							(int16_t)(str_F2C20ar.dword0x04_screenY + (str_F2C20ar.dword0x09_realWidth >> 1)),
							(int16_t)(str_F2C20ar.dword0x03_screenX + (str_F2C20ar.dword0x0c_realHeight >> 1)));
					//LOWORD(v1) = str_F2C20ar.dword0x14;
					if (str_F2C20ar.dword0x14x->struct_byte_0xc_12_15.byte[3] & 0x40)
					{
						//v1 = str_F2C20ar.dword0x14;
						str_F2C20ar.dword0x14x->word_0x2A_42 |= 0x40u;
					}
				}
				return;
			}
		}
		str_F2C20ar.dword0x04_screenY -= str_F2C20ar.dword0x11 * str_F2C20ar.dword0x09_realWidth >> 17;
		str_F2C20ar.dword0x03_screenX -= -(str_F2C20ar.dword0x0d * str_F2C20ar.dword0x09_realWidth) >> 17;
		goto LABEL_126;
	}
	v138 = (str_F2C20ar.dword0x0c_realHeight + str_F2C20ar.dword0x09_realWidth) >> 2;
	if (a1 >= 1)
	{
		if (a1 <= 1)
		{
			str_F2C20ar.dword0x04_screenY += -(str_F2C20ar.dword0x0d * v138 >> 16) - v138;
			str_F2C20ar.dword0x03_screenX += -(str_F2C20ar.dword0x11 * v138 >> 16) - v138;
		}
		else if (a1 == 2)
		{
			str_F2C20ar.dword0x04_screenY += (str_F2C20ar.dword0x0d * v138 >> 16) - v138;
			str_F2C20ar.dword0x03_screenX += (str_F2C20ar.dword0x11 * v138 >> 16) - v138;
		}
	}
	//LOWORD(v1) = x_DWORD_DE564;
	if ((uint16_t)x_DWORD_DE564 > str_F2C20ar.dword0x04_screenY)
	{
		v136 = (str_F2C20ar.dword0x05 << 16) / str_F2C20ar.dword0x09_realWidth;
		if (-str_F2C20ar.dword0x04_screenY < 0 || str_F2C20ar.dword0x04_screenY == 0)
		{
			str_F2C20ar.dword0x0b = 0;
			if (str_F2C20ar.dword0x09_realWidth + str_F2C20ar.dword0x04_screenY - (uint16_t)x_DWORD_DE564 > 0)
				str_F2C20ar.dword0x09_realWidth -= str_F2C20ar.dword0x09_realWidth + str_F2C20ar.dword0x04_screenY - (uint16_t)x_DWORD_DE564;
		}
		else
		{
			//LOWORD(v1) = -(int16_t)x_DWORD_F2C30;
			str_F2C20ar.dword0x09_realWidth += str_F2C20ar.dword0x04_screenY;
			if (str_F2C20ar.dword0x09_realWidth <= 0)
				return;
			str_F2C20ar.dword0x0b = v136 * -str_F2C20ar.dword0x04_screenY;
			str_F2C20ar.dword0x04_screenY = 0;
			if ((uint16_t)x_DWORD_DE564 <= str_F2C20ar.dword0x09_realWidth)
				str_F2C20ar.dword0x09_realWidth = (uint16_t)x_DWORD_DE564;
		}
		//LOWORD(v1) = x_DWORD_DE568;
		if ((uint16_t)x_DWORD_DE568 > str_F2C20ar.dword0x03_screenX)
		{
			v134 = (str_F2C20ar.dword0x06_height << 16) / str_F2C20ar.dword0x0c_realHeight;
			if (-str_F2C20ar.dword0x03_screenX < 0 || str_F2C20ar.dword0x03_screenX == 0)
			{
				str_F2C20ar.dword0x0a_actIdx = 0;
				if (str_F2C20ar.dword0x0c_realHeight + str_F2C20ar.dword0x03_screenX - (uint16_t)x_DWORD_DE568 > 0)
					str_F2C20ar.dword0x0c_realHeight -= str_F2C20ar.dword0x0c_realHeight + str_F2C20ar.dword0x03_screenX - (uint16_t)x_DWORD_DE568;
			}
			else
			{
				//LOWORD(v1) = -(int16_t)x_DWORD_F2C2C;
				str_F2C20ar.dword0x0c_realHeight += str_F2C20ar.dword0x03_screenX;
				if (str_F2C20ar.dword0x0c_realHeight <= 0)
					return;
				str_F2C20ar.dword0x0a_actIdx = v134 * -str_F2C20ar.dword0x03_screenX;
				str_F2C20ar.dword0x03_screenX = 0;
				if ((uint16_t)x_DWORD_DE568 <= str_F2C20ar.dword0x0c_realHeight)
					str_F2C20ar.dword0x0c_realHeight = (uint16_t)x_DWORD_DE568;
			}
			v153 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[36960]);
			for (l = str_F2C20ar.dword0x09_realWidth; l; l--)
			{
				v153[1] = str_F2C20ar.dword0x0b >> 16;
				if ((x_DWORD*)(&x_DWORD_E9C38_smalltit[36960]) == v153)
					* v153 = 22;
				else
					*v153 = v153[1] - *(v153 - 1);
				str_F2C20ar.dword0x0b += v136;
				v153 += 2;
			}
			if (a1 == 1 && x_D41A0_BYTEARRAY_4_struct.byteindex_10)
				sub_88740(
				str_F2C20ar.dword0x14x,
					(int16_t)(str_F2C20ar.dword0x04_screenY + (str_F2C20ar.dword0x09_realWidth >> 1)),
					(int16_t)(str_F2C20ar.dword0x03_screenX + (str_F2C20ar.dword0x0c_realHeight >> 1)));
			//v1 = (int)(x_DWORD_F2C2C * x_DWORD_DE560_ScreenWidth + x_DWORD_F2C30 + x_DWORD_DE558);

			//               screen-Y                                            screen-X
			// FIXME: types
			// v122 = (int)(str_F2C20ar.dword0x03_screenX * x_DWORD_DE560_ScreenWidth + str_F2C20ar.dword0x04_screenY + x_DWORD_DE558);
			//height
			while (str_F2C20ar.dword0x0c_realHeight)
			{
				if ((unsigned int)str_F2C20ar.dword0x01_rotIdx <= 7)
				{
					switch (str_F2C20ar.dword0x01_rotIdx)//mirroring
					{
					case 0:
						//               width                  actual line                   base adress                 add index
						v2 = (char*)(str_F2C20ar.dword0x08_width * (str_F2C20ar.dword0x0a_actIdx >> 16) + str_F2C20ar.dword0x02_data + *(x_DWORD*)(x_DWORD_E9C38_smalltit + 36964));//sprite
						v3 = (x_DWORD*) & (x_DWORD_E9C38_smalltit[36960]);
						v4 = (x_BYTE*)v122;//screen
						//   parametres
						v5 = str_F2C20ar.dword0x09_realWidth >> 1;
						if (!(str_F2C20ar.dword0x09_realWidth & 1))//bit 1
						{
							v6 = v5 & 1;//bit 2
							v7 = str_F2C20ar.dword0x09_realWidth >> 2;//bits 3-8 -> 1-6
							if (v6)
							{
								v7++;
								v3 = (x_DWORD*)(x_DWORD_E9C38_smalltit + 36952);
								v4 = (x_BYTE*)(v122 - 2);
								goto LABEL_49;
							}
							v3 = (x_DWORD*)(x_DWORD_E9C38_smalltit + 36968);
							goto LABEL_45;
						}
						v8 = v5 + 2;
						v6 = v8 & 1;
						v7 = v8 >> 1;
						if (!v6)
						{
							v3 = (x_DWORD*)(x_DWORD_E9C38_smalltit + 36944);
							v4 = (x_BYTE*)(v122 - 3);
							goto LABEL_51;
						}
						v4 = (x_BYTE*)(v122 - 1);
						while (1)
						{
							v10 = v2[0];
							v2 += v3[2];
							if (v10)
								v4[1] = v10;
						LABEL_49:
							v11 = v2[0];
							v2 += v3[4];
							if (v11)
								v4[2] = v11;
						LABEL_51:
							v12 = v2[0];
							v2 += v3[6];
							if (v12)
								v4[3] = v12;
							v4 += 4;
							v3 += 8;
							if (!--v7)
								break;
						LABEL_45:
							v9 = v2[0];
							v2 += v3[0];
							if (v9)//if not transparent pixel
								*v4 = v9;
						}
						break;
					case 1:
						v13 = str_F2C20ar.dword0x00;
						v14 = (x_BYTE*)(str_F2C20ar.dword0x08_width * (str_F2C20ar.dword0x0a_actIdx >> 16) + str_F2C20ar.dword0x02_data + *(x_DWORD*)(x_DWORD_E9C38_smalltit + 36964));
						v15 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[36960]);
						v16 = (x_BYTE*)v122;
						v17 = str_F2C20ar.dword0x09_realWidth >> 1;
						if (!(str_F2C20ar.dword0x09_realWidth & 1))
						{
							v15 = (x_DWORD*)(x_DWORD_E9C38_smalltit + 36968);
							goto LABEL_58;
						}
						v17++;
						v16 = (x_BYTE*)(v122 - 1);
						while (1)
						{
							LOBYTE(v13) = *v14;
							v14 += v15[2];
							if ((x_BYTE)v13)
								v16[1] = x_BYTE_F6EE0_tablesx[v13];
							v16 += 2;
							v15 += 4;
							if (!--v17)
								break;
						LABEL_58:
							LOBYTE(v13) = *v14;
							v14 += *v15;
							if ((x_BYTE)v13)
								* v16 = x_BYTE_F6EE0_tablesx[v13];
						}
						break;
					case 2:
						v18 = (x_BYTE*)(str_F2C20ar.dword0x08_width * (str_F2C20ar.dword0x0a_actIdx >> 16) + str_F2C20ar.dword0x02_data + *(x_DWORD*)(x_DWORD_E9C38_smalltit + 36964));
						v19 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[36960]);
						v20 = (x_BYTE*)v122;
						HIWORD(v21) = 0;
						v22 = str_F2C20ar.dword0x09_realWidth >> 1;
						if (!(str_F2C20ar.dword0x09_realWidth & 1))
						{
							v19 = (x_DWORD*)(x_DWORD_E9C38_smalltit + 36968);
							goto LABEL_67;
						}
						v22++;
						v20 = (x_BYTE*)(v122 - 1);
						while (1)
						{
							HIBYTE(v21) = *v18;
							v18 += v19[2];
							if (HIBYTE(v21))
							{
								LOBYTE(v21) = v20[1];
								v20[1] = x_BYTE_F6EE0_tablesx[0x4000 + v21];
							}
							v20 += 2;
							v19 += 4;
							if (!--v22)
								break;
						LABEL_67:
							HIBYTE(v21) = *v18;//zde
							v18 += *v19;
							if (HIBYTE(v21))
							{
								LOBYTE(v21) = *v20;
								v20[0] = x_BYTE_F6EE0_tablesx[0x4000 + v21];
							}
						}
						break;
					case 3:
						v23 = (x_BYTE*)(str_F2C20ar.dword0x08_width * (str_F2C20ar.dword0x0a_actIdx >> 16) + str_F2C20ar.dword0x02_data + *(x_DWORD*)(x_DWORD_E9C38_smalltit + 36964));//from mask
						v24 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[36960]);//from image
						v25 = (x_BYTE*)v122;//to adress
						HIWORD(v26) = 0;
						v27 = str_F2C20ar.dword0x09_realWidth >> 1;
						if (!(str_F2C20ar.dword0x09_realWidth & 1))
						{
							v24 = (x_DWORD*)(x_DWORD_E9C38_smalltit + 36968);
							goto LABEL_76;
						}
						v27++;
						v25 = (x_BYTE*)(v122 - 1);
						while (1)
						{
							LOBYTE(v26) = *v23;
							v23 += v24[2];
							if ((x_BYTE)v26)
							{
								HIBYTE(v26) = v25[1];
								v25[1] = x_BYTE_F6EE0_tablesx[0x4000 + v26];
							}
							v25 += 2;
							v24 += 4;
							if (!--v27)
								break;
						LABEL_76:
							LOBYTE(v26) = *v23;
							v23 += *v24;
							if ((x_BYTE)v26)
							{
								HIBYTE(v26) = v25[0];
								v25[0] = x_BYTE_F6EE0_tablesx[0x4000 + v26];
							}
						}
						break;
					case 4:
						HIWORD(v31) = HIWORD(str_F2C20ar.dword0x07);
						v28 = (x_BYTE*)(str_F2C20ar.dword0x08_width * (str_F2C20ar.dword0x0a_actIdx >> 16) + str_F2C20ar.dword0x02_data + *(x_DWORD*)(x_DWORD_E9C38_smalltit + 36964));
						v29 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[36960]);
						v30 = (x_BYTE*)v122;
						HIBYTE(v31) = str_F2C20ar.dword0x07;
						v32 = str_F2C20ar.dword0x09_realWidth >> 1;
						if (!(str_F2C20ar.dword0x09_realWidth & 1))
						{
							v29 = (x_DWORD*)(x_DWORD_E9C38_smalltit + 36968);
							goto LABEL_85;
						}
						v32++;
						v30 = (x_BYTE*)(v122 - 1);
						while (1)
						{
							LOBYTE(v31) = *v28;
							v28 += v29[2];
							if ((x_BYTE)v31)
								v30[1] = x_BYTE_F6EE0_tablesx[0x4000 + v31];
							v30 += 2;
							v29 += 4;
							if (!--v32)
								break;
						LABEL_85:
							LOBYTE(v31) = *v28;
							v28 += *v29;
							if ((x_BYTE)v31)
								* v30 = x_BYTE_F6EE0_tablesx[0x4000 + v31];
						}
						break;
					case 5:
						v33 = str_F2C20ar.dword0x07;
						v34 = (x_BYTE*)(str_F2C20ar.dword0x08_width * (str_F2C20ar.dword0x0a_actIdx >> 16) + str_F2C20ar.dword0x02_data + *(x_DWORD*)(x_DWORD_E9C38_smalltit + 36964));
						v35 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[36960]);
						v36 = (x_BYTE*)v122;
						v37 = str_F2C20ar.dword0x09_realWidth >> 1;
						if (!(str_F2C20ar.dword0x09_realWidth & 1))
						{
							v35 = (x_DWORD*)(x_DWORD_E9C38_smalltit + 36968);
							goto LABEL_94;
						}
						v37++;
						v36 = (x_BYTE*)(v122 - 1);
						while (1)
						{
							BYTE1(v33) = *v34;
							v34 += v35[2];
							if (BYTE1(v33))
								v36[1] = x_BYTE_F6EE0_tablesx[0x4000 + v33];
							v36 += 2;
							v35 += 4;
							if (!--v37)
								break;
						LABEL_94:
							BYTE1(v33) = *v34;
							v34 += *v35;
							if (BYTE1(v33))
								* v36 = x_BYTE_F6EE0_tablesx[0x4000 + v33];
						}
						break;
					case 6:
						v38 = str_F2C20ar.dword0x00;
						v39 = (x_BYTE*)(str_F2C20ar.dword0x08_width * (str_F2C20ar.dword0x0a_actIdx >> 16) + str_F2C20ar.dword0x02_data + *(x_DWORD*)(x_DWORD_E9C38_smalltit + 36964));
						v40 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[36960]);
						v41 = (x_BYTE*)v122;
						HIWORD(v42) = 0;
						v43 = str_F2C20ar.dword0x09_realWidth >> 1;
						if (!(str_F2C20ar.dword0x09_realWidth & 1))
						{
							v40 = (x_DWORD*)(x_DWORD_E9C38_smalltit + 36968);
							goto LABEL_103;
						}
						v43++;
						v41 = (x_BYTE*)(v122 - 1);
						while (1)
						{
							BYTE1(v42) = *v39;
							v39 += v40[2];
							if (BYTE1(v42))
							{
								LOBYTE(v42) = v41[1];
								LOBYTE(v38) = x_BYTE_F6EE0_tablesx[0x4000 + v42];
								v41[1] = x_BYTE_F6EE0_tablesx[v38];
							}
							v41 += 2;
							v40 += 4;
							if (!--v43)
								break;
						LABEL_103:
							BYTE1(v42) = *v39;
							v39 += *v40;
							if (BYTE1(v42))
							{
								LOBYTE(v42) = *v41;
								LOBYTE(v38) = x_BYTE_F6EE0_tablesx[0x4000 + v42];
								*v41 = x_BYTE_F6EE0_tablesx[v38];
							}
						}
						break;
					case 7:
						v44 = str_F2C20ar.dword0x00;
						v45 = (x_BYTE*)(str_F2C20ar.dword0x08_width * (str_F2C20ar.dword0x0a_actIdx >> 16) + str_F2C20ar.dword0x02_data + *(x_DWORD*)(x_DWORD_E9C38_smalltit + 36964));
						v46 = (x_DWORD*)(&x_DWORD_E9C38_smalltit[36960]);
						v47 = (x_BYTE*)v122;
						HIWORD(v48) = 0;
						v49 = str_F2C20ar.dword0x09_realWidth >> 1;
						if (!(str_F2C20ar.dword0x09_realWidth & 1))
						{
							v46 = (x_DWORD*)(x_DWORD_E9C38_smalltit + 36968);
							goto LABEL_112;
						}
						v49++;
						v47 = (x_BYTE*)(v122 - 1);
						while (1)
						{
							LOBYTE(v48) = *v45;
							v45 += v46[2];
							if ((x_BYTE)v48)
							{
								BYTE1(v48) = v47[1];
								LOBYTE(v44) = x_BYTE_F6EE0_tablesx[0x4000 + v48];
								v47[1] = x_BYTE_F6EE0_tablesx[v44];
							}
							v47 += 2;
							v46 += 4;
							if (!--v49)
								break;
						LABEL_112:
							LOBYTE(v48) = *v45;
							v45 += *v46;
							if ((x_BYTE)v48)
							{
								BYTE1(v48) = *v47;
								LOBYTE(v44) = x_BYTE_F6EE0_tablesx[0x4000 + v48];
								*v47 = x_BYTE_F6EE0_tablesx[v44];
							}
						}
						break;
					}
				}
				str_F2C20ar.dword0x0a_actIdx += v134;
				//LOWORD(v1) = x_DWORD_DE560_ScreenWidth;
				v122 += x_DWORD_DE560_ScreenWidth;
				str_F2C20ar.dword0x0c_realHeight--;
			}
		}
	}
	//return v1;
}

int debugcounter_224959 = 0;
//----- (00043830) --------------------------------------------------------
void sub_43830_generate_level_map(unsigned int a1, type_str_2FECE* a2x)//224830
{
	//Bit8u* v2; // ebx
	//Bit32s v3; // ST0C_4
	//test_x_D41A0_BYTEARRAY_0();
	//v2 = a2;
	x_WORD_17B4E0 = a2x->word_0x2FEE5;
	//*(Bit32u*)(x_D41A0_BYTEARRAY_0 + 8) = *(Bit32u*)(a2 + 23);
	D41A0_BYTESTR_0.dword_0x8 = a2x->word_0x2FEE5;
	memset((void*)x_WORD_15B4E0_source, 0, 0x20000);
	//v3 = *(Bit16u*)(v2 + 35);
	sub_B5E70_decompress_terrain_map_level(x_WORD_17B4E0, a2x->word_0x2FEE9, a2x->word_0x2FEED, a2x->word_0x2FEF1);

	sub_44DB0_truncTerrainHeight();//225db0 //trunc and create

	memset((void*)x_WORD_15B4E0_source, 0, 0x20000);
	sub_44E40(a2x->word_0x2FEF5, a2x->word_0x2FEF9);//225e40 //add any fields

	sub_45AA0_setMax4Tiles();//226aa0

	sub_440D0(a2x->word_0x2FF01);//2250d0

	sub_45060(a2x->word_0x2FF05, a2x->word_0x2FF09);//226060

	sub_44320();//225320

	sub_45210(a2x->word_0x2FF05, a2x->word_0x2FF09);//226210

	sub_454F0(a2x->word_0x2FEFD, a2x->word_0x2FF11);//2264f0

	sub_45600(a2x->word_0x2FF0D);//226600

	sub_43FC0();//224fc0
	memset((void*)x_BYTE_10B4E0_terraintype, 0, 0x10000);
	sub_43970(a1);//224970 // smooth terrain
	sub_43EE0();//224ee0 // add rivers

	sub_44580();//225580 //set angle of terrain
	if (x_BYTE_D41B6)
		sub_43B40();//224b40 //change angle of terrain
	else
		sub_43D50();//224d50 //change angle of terrain


	sub_44D00();//225d00
}

//----- (00043970) --------------------------------------------------------
void sub_43970(Bit32u a1)//224970
{
	Bit16u v1; // bx
	//Bit32u result; // eax

	v1 = 0;
	do
	{
		//result = sub_439A0(a1, v1);
		x_BYTE_11B4E0_height[v1] = sub_439A0(a1, v1);
		v1++;
	} while (v1);
	//return result;
}

//----- (000439A0) --------------------------------------------------------
unsigned int sub_439A0(unsigned int a1, uint16_t a2)//2249a0
{
	uint16_t v2; // ax
	uint8_t v3; // dl
	uint8_t v4; // dh
	uint8_t v5; // ch
	uint8_t v6; // cl
	int v7; // ebx
	uint8_t v8; // cl
	int v9; // ebx
	uint8_t v10; // cl
	int v11; // ebx
	uint8_t v12; // cl
	int v13; // ebx
	uint8_t v14; // cl
	int v15; // ebx
	uint8_t v16; // cl
	int v17; // ebx
	uint8_t v18; // cl
	int v19; // ebx
	uint8_t v20; // al
	unsigned int v21; // ebx
	unsigned int v22; // ebx

	LOBYTE(v2) = a2;
	LOWORD(a1) = x_BYTE_11B4E0_height[a2];
	if (x_BYTE_13B4E0_angle[a2] & 7)
	{
		HIBYTE(v2) = HIBYTE(a2) - 1;
		v3 = x_BYTE_11B4E0_height[a2];
		v4 = v3;
		v5 = x_BYTE_11B4E0_height[a2];
		v6 = x_BYTE_11B4E0_height[v2];
		v7 = v6;
		if (v6 > v3)
			v3 = x_BYTE_11B4E0_height[v2];
		if (v6 < v4)
			v4 = x_BYTE_11B4E0_height[v2];
		LOBYTE(v2) = a2 + 1;
		v8 = x_BYTE_11B4E0_height[v2];
		v9 = v8 + v7;
		if (v8 > v3)
			v3 = x_BYTE_11B4E0_height[v2];
		if (v8 < v4)
			v4 = x_BYTE_11B4E0_height[v2];
		HIBYTE(v2) = HIBYTE(a2);
		v10 = x_BYTE_11B4E0_height[v2];
		v11 = v10 + v9;
		if (v10 > v3)
			v3 = x_BYTE_11B4E0_height[v2];
		if (v10 < v4)
			v4 = x_BYTE_11B4E0_height[v2];
		HIBYTE(v2) = HIBYTE(a2) + 1;
		v12 = x_BYTE_11B4E0_height[v2];
		v13 = v12 + v11;
		if (v12 > v3)
			v3 = x_BYTE_11B4E0_height[v2];
		if (v12 < v4)
			v4 = x_BYTE_11B4E0_height[v2];
		LOBYTE(v2) = a2;
		v14 = x_BYTE_11B4E0_height[v2];
		v15 = v14 + v13;
		if (v14 > v3)
			v3 = x_BYTE_11B4E0_height[v2];
		if (v14 < v4)
			v4 = x_BYTE_11B4E0_height[v2];
		LOBYTE(v2) = a2 - 1;
		v16 = x_BYTE_11B4E0_height[v2];
		v17 = v16 + v15;
		if (v16 > v3)
			v3 = x_BYTE_11B4E0_height[v2];
		if (v16 < v4)
			v4 = x_BYTE_11B4E0_height[v2];
		HIBYTE(v2) = HIBYTE(a2);
		v18 = x_BYTE_11B4E0_height[v2];
		v19 = v18 + v17;
		if (v18 > v3)
			v3 = x_BYTE_11B4E0_height[v2];
		if (v18 < v4)
			v4 = x_BYTE_11B4E0_height[v2];
		HIBYTE(v2) = HIBYTE(a2) - 1;
		v20 = x_BYTE_11B4E0_height[v2];
		v21 = v20 + v19;
		if (v20 > v3)
			v3 = v20;
		if (v20 < v4)
			v4 = v20;
		v22 = v21 >> 3;
		if ((uint8_t)(v5 - v4) <= 4u)
		{
			if ((uint8_t)(v3 - v5) <= 4u)
				return a1;
			if ((uint8_t)(v3 - v5) <= 0xAu)
				v22 = (v5 + v22) >> 1;
		}
		else if ((uint8_t)(v5 - v4) <= 0xAu)
		{
			return (v22 + v5) >> 1;
		}
		a1 = v22;
	}
	return a1;
}

//----- (00043B40) --------------------------------------------------------
void sub_43B40()//224b40
{
	Bit16u v0; // dx
	Bit8u v1; // eax
	Bit8u v2; // bl
	Bit8u v3; // bh
	Bit8u v4; // cl

	v0 = 0;
	do
	{
		v1 = x_BYTE_11B4E0_height[v0];
		if (v1 > x_BYTE_D41B7)
			v1 = x_BYTE_D41B7;
		v2 = x_BYTE_D41B7 - v1;
		x_BYTE_14B4E0[v0] = x_BYTE_D41B7 - v1;
		v3 = x_BYTE_11B4E0_height[v0];
		if (v2 > v3)
		{
			x_BYTE_13B4E0_angle[v0] &= 0xF7u;
		}
		else
		{
			v4 = x_BYTE_13B4E0_angle[v0] | 8;
			x_BYTE_14B4E0[v0] = v3 - 1;
			x_BYTE_13B4E0_angle[v0] = v4;
		}
		v0++;
	} while (v0);
	sub_43BB0();
}

//----- (00043BB0) --------------------------------------------------------
void sub_43BB0()//224bb0
{
	unsigned int v0; // esi
	uint16_t v1; // cx
	signed int v2; // ebx
	uint16_t v3; // bx
	int v4; // eax
	uint8_t v5; // dh
	char v6; // cl

	v0 = 37487429;
	v1 = 0;
	do
	{
		if (!(x_BYTE_13B4E0_angle[v1] & 8))
		{
			v0 = 9377 * v0 + 9439;
			v2 = v0 % 7 - 3 + (uint8_t)x_BYTE_14B4E0[v1];
			if (v2 < 0)
				v2 = 0;
			if (v2 > 254)
				LOBYTE(v2) = -2;
			x_BYTE_14B4E0[v1] = v2;
		}
		v1++;
	} while (v1);
	v3 = 0;
	do
	{
		v4 = v3;
		v5 = x_BYTE_11B4E0_height[v3];
		if ((uint8_t)x_BYTE_14B4E0[v3] > v5)
		{
			x_BYTE_13B4E0_angle[v3] &= 0xF7u;
		}
		else
		{
			v6 = x_BYTE_13B4E0_angle[v3] | 8;
			x_BYTE_14B4E0[v3] = v5 - 1;
			x_BYTE_13B4E0_angle[v3] = v6;
		}
		v3++;
	} while (v3);
}

//----- (00043C60) --------------------------------------------------------
void sub_43C60(uint8_t a1, char a2, int a3, int a4)//224c60
{
	unsigned int v4; // ecx
	int v5; // esi
	uint16_t v6; // bx
	int v7; // edi
	int v8; // ecx
	uint16_t v9; // bx
	int v10; // esi
	uint8_t v11; // dh

	v4 = 37487429;
	LOBYTE(v6) = a1;
	v5 = a3;
	HIBYTE(v6) = a2;
	while ((x_WORD)--v5 != -1)
	{
		v7 = a4;
		while ((x_WORD)--v7 != -1)
		{
			if (!(x_BYTE_13B4E0_angle[v6] & 8))
			{
				v4 = 9377 * v4 + 9439;
				x_BYTE_14B4E0[v6] += v4 % 7 - 3;
			}
			LOBYTE(v6) = v6 + 1;
		}
		v6 = __PAIR__(HIBYTE(v6), a1) + 256;
	}
	LOBYTE(v9) = a1;
	v8 = a3;
	HIBYTE(v9) = a2;
	while ((x_WORD)--v8 != -1)
	{
		v10 = a4;
		while ((x_WORD)--v10 != -1)
		{
			v11 = x_BYTE_11B4E0_height[v9];
			if ((uint8_t)x_BYTE_14B4E0[v9] > v11)
			{
				x_BYTE_13B4E0_angle[v9] &= 0xF7u;
			}
			else
			{
				x_BYTE_14B4E0[v9] = v11 - 1;
				x_BYTE_13B4E0_angle[v9] |= 8u;
			}
			LOBYTE(v9) = v9 + 1;
		}
		v9 = __PAIR__(HIBYTE(v9), a1) + 256;
	}
}

//----- (00043D50) --------------------------------------------------------
void sub_43D50()//224d50
{
	Bit16u index; // ax
	Bit16u v1; // dx
	//Bit16u v2; // bx
	//Bit16u v3; // bx
	//Bit16u v4; // bx
	//Bit16u v5; // bx
	//Bit16u v6; // bx
	Bit16u v7; // bx
	Bit16u v8; // dx
	Bit16u v9; // bx
	Bit16u v10; // bx

	index = 0;
	do
	{
		x_BYTE_13B4E0_angle[index] &= 0xF7u;
		if (!x_BYTE_11B4E0_height[index])
		{
			HIBYTE(index)--;
			v1 = index;
			LOBYTE(index)++;
			//v2 = index;
			LOBYTE(v1) = (x_BYTE_11B4E0_height[index] != 0) + (x_BYTE_11B4E0_height[v1] != 0);
			HIBYTE(index)++;			
			//v3 = index;
			LOBYTE(v1) = (x_BYTE_11B4E0_height[index] != 0) + v1;
			HIBYTE(index)++;			
			//v4 = index;
			LOBYTE(v1) = (x_BYTE_11B4E0_height[index] != 0) + v1;
			LOBYTE(index)--;			
			//v5 = index;
			LOBYTE(v1) = (x_BYTE_11B4E0_height[index] != 0) + v1;
			LOBYTE(index)--;			
			//v6 = index;
			LOBYTE(v1) = (x_BYTE_11B4E0_height[index] != 0) + v1;
			HIBYTE(index)--;			
			v7 = index;
			HIBYTE(index)--;
			LOBYTE(v1) = (x_BYTE_11B4E0_height[v7] != 0) + v1;
			LOBYTE(v7) = x_BYTE_11B4E0_height[index] != 0;
			LOBYTE(index)++;
			HIBYTE(index)++;
			if (!(LOBYTE(v7) + LOBYTE(v1)))
			{
				v8 = index;
				LOBYTE(index)--;
				v9 = index;
				HIBYTE(index)--;
				LOBYTE(v8) = (x_BYTE_10B4E0_terraintype[v9] != 0) + (x_BYTE_10B4E0_terraintype[v8] != 0);
				v10 = index;
				LOBYTE(index)++;
				LOBYTE(v8) = (x_BYTE_10B4E0_terraintype[index] != 0) + (x_BYTE_10B4E0_terraintype[v10] != 0) + v8;
				HIBYTE(index)++;
				if (!(x_BYTE)v8)
					x_BYTE_13B4E0_angle[index] |= 8u;
			}
		}
		index++;
	} while (index);
}

//----- (00043EE0) --------------------------------------------------------
void sub_43EE0()//224ee0
{
	uint16_t index; // ax
	uint16_t v1; // cx
	char v2; // dh
	uint8_t v3; // dl
	int v4; // ecx
	char v5; // bl
	char v6; // bh
	uint8_t v7; // cl
	char v8; // bh
	char v9; // bh
	uint16_t v10; // cx
	uint16_t v11; // cx
	uint16_t v12; // cx
	uint16_t v13; // cx

	index = 0;
	do
	{
		v1 = index;
		v2 = 0;
		LOBYTE(index)++;
		v3 = x_BYTE_11B4E0_height[v1];
		v4 = v1;
		LOWORD(v4) = index;
		v5 = 0;
		v6 = x_BYTE_13B4E0_angle[index];
		if (v6)
		{
			if (v6 == 4)
				v2 = 1;
		}
		else
		{
			v7 = x_BYTE_11B4E0_height[v4];
			v5 = 1;
			if (v7 < v3)
				v3 = v7;
		}
		HIBYTE(index)++;
		v8 = x_BYTE_13B4E0_angle[index];
		if (v8)
		{
			if (v8 == 4)
				v2++;
		}
		else
		{
			v5++;
			if (x_BYTE_11B4E0_height[index] < v3)
				v3 = x_BYTE_11B4E0_height[index];
		}
		LOBYTE(index)--;
		v9 = x_BYTE_13B4E0_angle[index];
		if (v9)
		{
			if (v9 == 4)
				v2++;
		}
		else
		{
			v5++;
			if (x_BYTE_11B4E0_height[index] < v3)
				v3 = x_BYTE_11B4E0_height[index];
		}
		HIBYTE(index)--;
		if (v2 && v5 && !v3)
		{
			v10 = index;
			LOBYTE(index)++;
			x_BYTE_11B4E0_height[v10] = 0;
			v11 = index;
			HIBYTE(index)++;
			x_BYTE_11B4E0_height[v11] = 0;
			v12 = index;
			LOBYTE(index)--;
			x_BYTE_11B4E0_height[v12] = 0;
			v13 = index;
			HIBYTE(index)--;
			x_BYTE_11B4E0_height[v13] = 0;
		}
		index++;
	} while (index);
}

//----- (00043FC0) --------------------------------------------------------
void sub_43FC0()//224fc0
{
	Bit16u index; // ax
	Bit16u v1; // dx
	char v2; // dh
	uint16_t v3; // bx
	uint16_t v4; // bx
	uint16_t v5; // bx
	uint16_t v6; // bx
	uint16_t v7; // bx
	char v8; // bl
	//uint16_t v9; // ax

	index = 0;
	do
	{
		HIBYTE(index)--;
		v1 = index;
		LOBYTE(index)++;
		v2 = x_BYTE_13B4E0_angle[v1];
		LOBYTE(v1) = v2 == x_BYTE_13B4E0_angle[index];
		HIBYTE(index)++;
		v3 = index;
		HIBYTE(index)++;
		LOBYTE(v1) = (v2 == x_BYTE_13B4E0_angle[v3]) + v1;
		v4 = index;
		LOBYTE(index)--;
		LOBYTE(v1) = (v2 == x_BYTE_13B4E0_angle[v4]) + v1;
		v5 = index;
		LOBYTE(index)--;
		LOBYTE(v1) = (v2 == x_BYTE_13B4E0_angle[v5]) + v1;
		v6 = index;
		HIBYTE(index)--;
		LOBYTE(v1) = (v2 == x_BYTE_13B4E0_angle[v6]) + v1;
		v7 = index;
		HIBYTE(index)--;
		v8 = (v2 == x_BYTE_13B4E0_angle[index]) + (v2 == x_BYTE_13B4E0_angle[v7]) + v1;
		LOBYTE(index)++;
		HIBYTE(index)++;
		if (v2)
		{
			if (v8 == 7)
				x_BYTE_13B4E0_angle[index] = v2;
		}
		index++;
	} while (index);
}

//----- (000440D0) --------------------------------------------------------
void sub_440D0(uint16_t a1)//2250d0
{
	uint16_t i; // ax
	uint8_t v2; // dh
	uint8_t v3; // dl
	//uint16_t v4; // ax
	//uint16_t v5; // ax
	int v6; // ebx
	char v7; // bl
	char v8; // dl
	char v9; // dh

	// fix if begin
	//v4 = 0;
	//v5 = 0;
	// end

	i = 0;
	do
	{
		if (x_BYTE_13B4E0_angle[i] == 5)
		{
			v2 = 0;
			v3 = 0xFFu;
			if (x_BYTE_11B4E0_height[i])
				v2 = x_BYTE_11B4E0_height[i];
			if (x_BYTE_11B4E0_height[i] < 0xFFu)
				v3 = x_BYTE_11B4E0_height[i];
			HIBYTE(i)--;
			if (v2 < x_BYTE_11B4E0_height[i])
				v2 = x_BYTE_11B4E0_height[i];
			if (v3 > x_BYTE_11B4E0_height[i])
				v3 = x_BYTE_11B4E0_height[i];
			LOBYTE(i)++;
			HIBYTE(i)++;
			if (v2 < x_BYTE_11B4E0_height[i])
				v2 = x_BYTE_11B4E0_height[i];
			if (v3 > x_BYTE_11B4E0_height[i])
				v3 = x_BYTE_11B4E0_height[i];
			LOBYTE(i)--;
			HIBYTE(i)++;
			if (v2 < x_BYTE_11B4E0_height[i])
				v2 = x_BYTE_11B4E0_height[i];
			if (v3 > x_BYTE_11B4E0_height[i])
				v3 = x_BYTE_11B4E0_height[i];
			LOBYTE(i)--;
			HIBYTE(i)--;
			if (v2 < x_BYTE_11B4E0_height[i])
				v2 = x_BYTE_11B4E0_height[i];
			if (v3 > x_BYTE_11B4E0_height[i])
				v3 = x_BYTE_11B4E0_height[i];
			v6 = v2 - v3;
			LOBYTE(i)++;
			if (v6 <= a1)
			{
				if (v6 == a1)
					x_BYTE_13B4E0_angle[i] = 4;
				else
					x_BYTE_13B4E0_angle[i] = 3;
			}
		}
		i++;
	} while (i);
	do
	{
		v7 = 0;
		v8 = 0;
		v9 = 0;
		if (x_BYTE_13B4E0_angle[i] == 3)
			v7 = 1;
		if (x_BYTE_13B4E0_angle[i] == 2)
			v8 = 1;
		if (x_BYTE_13B4E0_angle[i] == 5)
			v9 = 1;
		LOBYTE(i)++;
		if (x_BYTE_13B4E0_angle[i] == 3)
			v7++;
		if (x_BYTE_13B4E0_angle[i] == 2)
			v8++;
		if (x_BYTE_13B4E0_angle[i] == 5)
			v9++;
		HIBYTE(i)++;
		if (x_BYTE_13B4E0_angle[i] == 3)
			v7++;
		if (x_BYTE_13B4E0_angle[i] == 2)
			v8++;
		if (x_BYTE_13B4E0_angle[i] == 5)
			v9++;
		LOBYTE(i)--;
		if (x_BYTE_13B4E0_angle[i] == 3)
			v7++;
		if (x_BYTE_13B4E0_angle[i] == 2)
			v8++;
		if (x_BYTE_13B4E0_angle[i] == 5)
			v9++;
		HIBYTE(i)--;
		if (!v8 && v7 && v9)
		{
			if (x_BYTE_13B4E0_angle[i] == 3)
				x_BYTE_13B4E0_angle[i] = 4;
			LOBYTE(i)++;
			if (x_BYTE_13B4E0_angle[i] == 3)
				x_BYTE_13B4E0_angle[i] = 4;
			HIBYTE(i)++;
			if (x_BYTE_13B4E0_angle[i] == 3)
				x_BYTE_13B4E0_angle[i] = 4;
			LOBYTE(i)--;
			if (x_BYTE_13B4E0_angle[i] == 3)
				x_BYTE_13B4E0_angle[i] = 4;
			HIBYTE(i)--;
		}
		i++;
	} while (i);
	//  return result;
}

//----- (00044320) --------------------------------------------------------
void sub_44320()//225320
{
	Bit16u index; // ax
	char v1; // bl
	char v2; // dh
	char v3; // dl

	index = 0;
	do
	{
		v1 = 0;
		v2 = 0;
		v3 = 0;
		if (!x_BYTE_13B4E0_angle[index])
			v1 = 1;
		if (x_BYTE_13B4E0_angle[index] == 5)
			v3 = 1;
		if (x_BYTE_13B4E0_angle[index] == 3)
			v2 = 1;
		LOBYTE(index)++;
		if (!x_BYTE_13B4E0_angle[index])
			v1++;
		if (x_BYTE_13B4E0_angle[index] == 5)
			v3++;
		if (x_BYTE_13B4E0_angle[index] == 3)
			v2++;
		HIBYTE(index)++;
		if (!x_BYTE_13B4E0_angle[index])
			v1++;
		if (x_BYTE_13B4E0_angle[index] == 5)
			v3++;
		if (x_BYTE_13B4E0_angle[index] == 3)
			v2++;
		LOBYTE(index)--;
		if (!x_BYTE_13B4E0_angle[index])
			v1++;
		if (x_BYTE_13B4E0_angle[index] == 5)
			v3++;
		if (x_BYTE_13B4E0_angle[index] == 3)
			v2++;
		HIBYTE(index)--;
		if (v2 && v3)
		{
			if (x_BYTE_13B4E0_angle[index] == 5)
				x_BYTE_13B4E0_angle[index] = 4;
			LOBYTE(index)++;
			if (x_BYTE_13B4E0_angle[index] == 5)
				x_BYTE_13B4E0_angle[index] = 4;
			HIBYTE(index)++;
			if (x_BYTE_13B4E0_angle[index] == 5)
				x_BYTE_13B4E0_angle[index] = 4;
			LOBYTE(index)--;
			if (x_BYTE_13B4E0_angle[index] == 5)
				x_BYTE_13B4E0_angle[index] = 4;
			HIBYTE(index)--;
		}
		if (v2 && v1)
		{
			if (x_BYTE_13B4E0_angle[index] == 3)
				x_BYTE_13B4E0_angle[index] = 4;
			LOBYTE(index)++;
			if (x_BYTE_13B4E0_angle[index] == 3)
				x_BYTE_13B4E0_angle[index] = 4;
			HIBYTE(index)++;
			if (x_BYTE_13B4E0_angle[index] == 3)
				x_BYTE_13B4E0_angle[index] = 4;
			LOBYTE(index)--;
			if (x_BYTE_13B4E0_angle[index] == 3)
				x_BYTE_13B4E0_angle[index] = 4;
			HIBYTE(index)--;
		}
		if (v1 && v3)
		{
			if (x_BYTE_13B4E0_angle[index])
				x_BYTE_13B4E0_angle[index] = 4;
			LOBYTE(index)++;
			if (x_BYTE_13B4E0_angle[index])
				x_BYTE_13B4E0_angle[index] = 4;
			HIBYTE(index)++;
			if (x_BYTE_13B4E0_angle[index])
				x_BYTE_13B4E0_angle[index] = 4;
			LOBYTE(index)--;
			if (x_BYTE_13B4E0_angle[index])
				x_BYTE_13B4E0_angle[index] = 4;
			HIBYTE(index)--;
		}
		index++;
	} while (index);
}

//----- (00044580) --------------------------------------------------------
void sub_44580()//225580
{
	Bit8u* v0; // eax
	uint16_t v1; // bx
	uint16_t v2; // bx
	char v3; // al
	char v4; // dl
	char v5; // cl
	char v6; // ah
	int v7; // edi
	Bit8u* v8; // esi
	Bit8u v9; // dh
	Bit8u* v10; // esi
	char v11; // dh
	char v12; // al
	char v13; // dl
	char v14; // dh
	int v15; // ST00_4
	char v16; // ah
	Bit8u* v17; // esi
	char v18; // cl
	uint8_t v19; // dh
	Bit8u* v20; // esi
	char v21; // dh
	char v22; // al
	char v23; // ah
	char v24; // dh
	char v25; // dl
	int v26; // edi
	Bit8u* v27; // esi
	char v28; // cl
	uint8_t v29; // dh
	Bit8u* v30; // esi
	char v31; // dh
	char v32; // al
	char v33; // dl
	char v34; // dh
	int v35; // ST00_4
	char v36; // ah
	Bit8u* v37; // esi
	char v38; // cl
	uint8_t v39; // dh
	Bit8u* v40; // esi
	char v41; // dh
	int v42; // edi
	int v43; // esi
	char v44; // al
	Bit8u* v45; // esi
	char v46; // cl
	uint8_t v47; // dh
	Bit8u* v48; // esi
	char v49; // dh
	char v50; // al
	char v51; // dl
	char v52; // dh
	int v53; // edi
	int v54; // esi
	char v55; // ah
	Bit8u* v56; // esi
	char v57; // cl
	uint8_t v58; // dh
	Bit8u* v59; // esi
	char v60; // dh
	char v61; // al
	char v62; // ah
	char v63; // dh
	char v64; // dl
	int v65; // edi
	Bit8u* v66; // esiv
	char v67; // cl
	uint8_t v68; // dh
	Bit8u* v69; // esi
	Bit8u* v70; // eax
	Bit8u v71; // edx
	//char *v72; // esi
	int v72x;
	char i; // bl
	char j; // ch
	char k; // cl
	char l; // bh
	Bit8u* v77; // eax
	Bit16u v78; // cx
	//Bit16u v79; // eax
	char v80; // ST14_1
	//uint16_t v81; // ax
	char v82; // bh
	uint16_t v83; // ax
	int v84; // esi
	Bit8u v85; // al
	Bit8u v86; // bl
	Bit8u* v87; // edx
	Bit8s* v89; // [esp+8h] [ebp-10h]
	Bit8u* v90; // [esp+Ch] [ebp-Ch]

	v0 = x_DWORD_180628b_screen_buffer;
	v1 = 0;
	while (v1 < 0x961u)
	{
		v1++;
		v0[0] = 0;
		v0 += 25;
	}
	v2 = 0;
	v90 = x_DWORD_180628b_screen_buffer;
	v89 = unk_D47E0;
	while (v2 < 0x94u)
	{
		v3 = v89[0];
		if (v89[0] >= 0)
		{
			v4 = v89[1];
			if (v4 >= 0)
			{
				v5 = v89[2];
				if (v5 >= 0)
				{
					v6 = v89[3];
					if (v6 >= 0)
					{
						v7 = 49 * v4 + 7 * v5 + v6 + 343 * v3;
						v8 = v90 + 25 * v7;
						v9 = v8[0];
						if (v8[0] < 0xCu)
						{
							v8[0] = v9 + 1;
							v10 = &v8[v9];
							v10[13] = 0;
							v10[1] = v2;
						}
						v11 = v3;
						v12 = v4;
						v13 = v11;
						v14 = v6;
						v15 = 7 * v6;
						v16 = v5;
						v17 = v90 + 25 * (49 * v13 + v5 + v15 + 343 * v12);
						v18 = v14;
						v19 = v17[0];
						if (v17[0] < 0xCu)
						{
							v17[0] = v19 + 1;
							v20 = &v17[v19];
							v20[13] = 16;
							v20[1] = v2;
						}
						v21 = v12;
						v22 = v16;
						v23 = v21;
						v24 = v13;
						v25 = v18;
						v26 = 49 * v18 + v23 + 7 * v24 + 343 * v22;
						v27 = v90 + 25 * v26;
						v28 = v24;
						v29 = v27[0];
						if (v27[0] < 0xCu)
						{
							v27[0] = v29 + 1;
							v30 = &v27[v29];
							v30[13] = 48;
							v30[1] = v2;
						}
						v31 = v22;
						v32 = v25;
						v33 = v31;
						v34 = v23;
						v35 = 7 * v23;
						v36 = v28;
						v37 = v90 + 25 * (49 * v33 + v28 + v35 + 343 * v32);
						v38 = v34;
						v39 = *v37;
						if (*v37 < 0xCu)
						{
							*v37 = v39 + 1;
							v40 = &v37[v39];
							v40[13] = 32;
							v40[1] = v2;
						}
						v41 = v32;
						v42 = v32;
						v43 = 8 * v32;
						v44 = v38;
						v45 = v90 + 25 * (49 * v33 + v43 - v42 + v36 + 343 * v38);
						v46 = v41;
						v47 = v45[0];
						if (v45[0] < 0xCu)
						{
							v45[0] = v47 + 1;
							v48 = &v45[v47];
							v48[13] = 96;
							v48[1] = v2;
						}
						v49 = v44;
						v50 = v33;
						v51 = v49;
						v52 = v36;
						v53 = v36;
						v54 = 8 * v36;
						v55 = v46;
						v56 = v90 + 25 * (49 * v51 + v54 - v53 + v46 + 343 * v50);
						v57 = v52;
						v58 = v56[0];
						if (v56[0] < 0xCu)
						{
							v56[0] = v58 + 1;
							v59 = &v56[v58];
							v59[13] = 112;
							v59[1] = v2;
						}
						v60 = v50;
						v61 = v55;
						v62 = v60;
						v63 = v51;
						v64 = v57;
						v65 = 49 * v57 + 7 * v63 + v62 + 343 * v61;
						v66 = v90 + 25 * v65;
						v67 = v63;
						v68 = v66[0];
						if (v66[0] < 0xCu)
						{
							v66[0] = v68 + 1;
							v69 = &v66[v68];
							v69[13] = 80;
							v69[1] = v2;
						}
						v70 = &v90[25 * (343 * v64 + 7 * v62 + v67 + 49 * v61)];
						v71 = v70[0];
						if (v70[0] < 0xCu)
						{
							v70[0] = v71 + 1;
							//v71 = v71&0xff;
							v70[v71 + 13] = 64;
							v70[v71 + 1] = v2;
						}
					}
				}
			}
		}
		v2++;
		v89 += 4;
	}
	//v72 = x_BYTE_F2CD0x;//adress 225afd
	v72x = 0;
	for (i = 0; i < 7; i++)
	{
		for (j = 0; j < 7; j++)
		{
			for (k = 0; k < 7; k++)
			{
				for (l = 0; l < 7; l++)
				{
					v77 = &v90[25 * (49 * j + 7 * k + l + 343 * i)];
					if (v77[0])
					{
						x_BYTE_F2CD0x[v72x][0] = v77[1];
						x_BYTE_F2CD0x[v72x][1] = v77[13];
					}
					else
					{
						x_BYTE_F2CD0x[v72x][0] = 1;
						x_BYTE_F2CD0x[v72x][1] = 0;
					}
					//v72 += 2;
					v72x++;
				}
			}
		}
	}
	v78 = 0;//adress 225bbd
	do
	{
		//v79 = v78;
		if (!x_BYTE_10B4E0_terraintype[v78])
		{
			v80 = x_BYTE_13B4E0_angle[v78] & 7;
			LOBYTE(v78)++;			
			//v81 = v78;
			v82 = x_BYTE_13B4E0_angle[v78];
			HIBYTE(v78)++;			
			v83 = v78;
			LOBYTE(v78)--;
			v84 = 343 * v80 + 49 * (v82 & 7) + (x_BYTE_13B4E0_angle[v78] & 7) + 7 * (x_BYTE_13B4E0_angle[v83] & 7);
			v85 = v90[25 * v84];
			HIBYTE(v78)--;
			if (v85)
			{
				x_WORD_17B4E0 = 9377 * x_WORD_17B4E0 + 9439;
				v86 = x_WORD_17B4E0 % (v85 + 1);
				if (v86 >= v85)
					v86 = 0;
				v87 = (v86 + 25 * v84 + v90);
				//LOWORD(v79) = v78;
				x_BYTE_10B4E0_terraintype[v78] = v87[1];//problem is here!
				x_BYTE_13B4E0_angle[v78] = (x_BYTE_13B4E0_angle[v78] & 7) + v87[13];
			}
			else
			{
				//LOWORD(v79) = v78;
				x_BYTE_10B4E0_terraintype[v78] = 1;
			}
		}
		v78++;
	} while (v78);
}

int debugcounter_225d00 = 0;
//----- (00044D00) --------------------------------------------------------
void sub_44D00()//225d00
{
	uaxis_2d v0x; // cx
	//uaxis_2d v1x; // dx
	uaxis_2d indexx; // eax
	//uint16_t v3; // cx
	//uaxis_2d v4x; // et2
	char v5; // dl

	v0x.word = 0;
	x_WORD_17B4E0 = 0;
	do
	{
		//adress 225d0f
		if (debugcounter_225d00 >= 0xb03)
		{
			debugcounter_225d00++;
			debugcounter_225d00--;
		}
		debugcounter_225d00++;

		v0x._axis_2d.x++;
		//indexx._axis_2d.y = 0;
		v0x._axis_2d.y++;
		indexx.word = v0x.word;
		v0x._axis_2d.x -= 2;
		v0x._axis_2d.y -= 2;
		//v1x.word = v0x.word;
		
		indexx._axis_2d.x = x_BYTE_11B4E0_height[v0x.word] - x_BYTE_11B4E0_height[indexx.word] + 32;
		v0x._axis_2d.x++;
		v0x._axis_2d.y++;
		if (indexx._axis_2d.x == 32)
		{
			indexx.word = 9377 * x_WORD_17B4E0+ 9439;
			//LOWORD(index) += 9439;
			x_WORD_17B4E0 = indexx.word;
			//v4x.word = indexx.word;
			indexx._axis_2d.y = (x_WORD_17B4E0 / 9u) >> 8;
			indexx._axis_2d.x = x_WORD_17B4E0 % 9 + 28;
		}
		else if ((Bit8s)indexx._axis_2d.x >= 28)
		{
			if ((Bit8s)indexx._axis_2d.x > 40)
				indexx._axis_2d.x = (indexx._axis_2d.x & 7) + 40;
		}
		else
		{
			indexx._axis_2d.x = (indexx._axis_2d.x & 3) + 28;
		}		
		if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
		{
			//index = 32 - (index & 0xff);
			//v5 = (32 - (indexx._axis_2d.x)) + 32;
			v5 = (64 - indexx._axis_2d.x);
		}
		else
		{
			v5 = indexx._axis_2d.x;
		}
		//LOBYTE(index) = v5;
		x_BYTE_12B4E0_shading[v0x.word] = v5;
		v0x.word++;
	} while (v0x.word);
}

//----- (00044DB0) --------------------------------------------------------
void sub_44DB0_truncTerrainHeight()//225db0 // map to heightmap
{
	int16_t v0; // dx
	int16_t v1; // cx
	Bit16u v2; // bx
	int16_t v3; // ax
	int v4; // edx
	Bit32u x; // eax

	v0 = -32000;
	v1 = 32000;
	v2 = 0;
	do
	{
		v3 = x_WORD_15B4E0_source[v2];
		if (v3 > v0)
			v0 = x_WORD_15B4E0_source[v2];
		if (v3 < v1)
			v1 = x_WORD_15B4E0_source[v2];
		v2++;
	} while (v2);//find min and max height
	if (v0)
		v4 = 0xC40000 / v0;
	else
		v4 = 0;
	do
	{
		x = v4 * x_WORD_15B4E0_source[v2] >> 16;
		x_WORD_15B4E0_source[v2] = 0;
		if ((x & 0x8000u) != 0)//water level trunc
			x = 0;
		if (x > 196)//trunc max height
			x = 196;
		x_BYTE_11B4E0_height[v2] = x;
		v2++;
	} while (v2);
	//return result;
}

//----- (00044E40) --------------------------------------------------------
void sub_44E40(int a1, Bit8u a2)//225e40
{
	int v2; // edi
	Bit16u v3; // si
	signed int v4; // ecx
	Bit16u v5; // ax
	uaxis_2d v6x; // dx
	Bit16u v7; // eax
	Bit16u v8; // ebx
	//uint16_t i; // ax

	v2 = a1;
	v3 = 0;
	do
	{
		if (x_BYTE_11B4E0_height[v3])
			x_BYTE_13B4E0_angle[v3] = 5;
		else
			x_BYTE_13B4E0_angle[v3] = 0;
		v3++;
	} while (v3);
LABEL_12:
	if (v2 > 0)
	{
		v4 = 1000;
		while (1)
		{
			//v8 = -1;
			v5 = 9377 * x_WORD_17B4E0 + 9439;
			x_WORD_17B4E0 = v5;
			v6x.word = v5 % 0xffffu;
			v7 = v5 % 0xffffu;
			v8 = x_BYTE_11B4E0_height[v7]+0xff00;
			if (!--v4)
				break;
			if ((v8&0xff) > a2 && x_BYTE_13B4E0_angle[v7])
			{
				v2--;
				//adress 225eb1
				//eax e568 ebx ff6f ecx 3e6 edx e568
				sub_44EE0_smooth_tiles(/*v8,*/ v6x);
				goto LABEL_12;
			}
		}
	}
	do
	{
		//i = v3;
		x_BYTE_10B4E0_terraintype[v3++] = -1;
	} while (v3);
}

//----- (00044EE0) --------------------------------------------------------
void sub_44EE0_smooth_tiles(/*int a1,*/ uaxis_2d a2x)//225ee0
{
	uaxis_2d v2x; // eax
	Bit16u v3; // dx
	uint8_t v4; // dh
	//uaxis_2d v5x; // si
	//uaxis_2d v6x; // esi
	uint8_t v7; // dl
	Bit16u index; // ax

	//[*][*][*]
	//[*][X][*]
	//[*][*][*]


	uaxis_2d a1x;

	v2x.word = a2x.word;
	v3 = 0;
	do
		x_BYTE_10B4E0_terraintype[v3++] = 3;
	while (v3);//set all tiles to 3
	v4 = x_BYTE_11B4E0_height[a2x.word];
	do
	{
		//v5x.word = v2x.word;
		x_BYTE_10B4E0_terraintype[v2x.word] = 0;
		//BYTE1(v2)--;
		v2x._axis_2d.y--;

		//v6 = v5;
		//v6 = v2;
		v7 = 0xFFu;
		if (x_BYTE_10B4E0_terraintype[v2x.word] && x_BYTE_11B4E0_height[v2x.word] < 0xFFu)
		{
			v7 = x_BYTE_11B4E0_height[v2x.word];
			a1x.word = v2x.word;
		}
		//LOBYTE(v2)++;
		v2x._axis_2d.x++;
		if (x_BYTE_10B4E0_terraintype[v2x.word] && v7 > x_BYTE_11B4E0_height[v2x.word])
		{
			v7 = x_BYTE_11B4E0_height[v2x.word];
			a1x.word = v2x.word;
		}
		//BYTE1(v2)++;
		v2x._axis_2d.y++;
		if (x_BYTE_10B4E0_terraintype[v2x.word] && v7 > x_BYTE_11B4E0_height[v2x.word])
		{
			v7 = x_BYTE_11B4E0_height[v2x.word];
			a1x.word = v2x.word;
		}
		//BYTE1(v2)++;
		v2x._axis_2d.y++;
		if (x_BYTE_10B4E0_terraintype[v2x.word] && v7 > x_BYTE_11B4E0_height[v2x.word])
		{
			v7 = x_BYTE_11B4E0_height[v2x.word];
			a1x.word = v2x.word;
		}
		//LOBYTE(v2)--;
		v2x._axis_2d.x--;
		if (x_BYTE_10B4E0_terraintype[v2x.word] && v7 > x_BYTE_11B4E0_height[v2x.word])
		{
			v7 = x_BYTE_11B4E0_height[v2x.word];
			a1x.word = v2x.word;
		}
		//LOBYTE(v2)--;
		v2x._axis_2d.x--;
		if (x_BYTE_10B4E0_terraintype[v2x.word] && v7 > x_BYTE_11B4E0_height[v2x.word])
		{
			v7 = x_BYTE_11B4E0_height[v2x.word];
			a1x.word = v2x.word;
		}
		//BYTE1(v2)--;
		v2x._axis_2d.y--;
		if (x_BYTE_10B4E0_terraintype[v2x.word] && v7 > x_BYTE_11B4E0_height[v2x.word])
		{
			v7 = x_BYTE_11B4E0_height[v2x.word];
			a1x.word = v2x.word;
		}
		//BYTE1(v2)--;
		v2x._axis_2d.y--;
		if (x_BYTE_10B4E0_terraintype[v2x.word] && v7 > x_BYTE_11B4E0_height[v2x.word])
		{
			v7 = x_BYTE_11B4E0_height[v2x.word];
			a1x.word = v2x.word;
		}
		if (!x_BYTE_13B4E0_angle[a1x.word] || v7 == 0xFFu)
			break;
		if (v7 > v4)//if near tile is higger then central tile set central as near tile
			x_BYTE_11B4E0_height[a1x.word] = v4;
		v4 = x_BYTE_11B4E0_height[a1x.word];
		v2x.word = a1x.word;
	} while (v4);
	index = 0;
	do
	{
		if (!x_BYTE_10B4E0_terraintype[index])
			x_BYTE_13B4E0_angle[index] = 0;
		index++;
	} while (index);//delete type
}

//----- (00045060) --------------------------------------------------------
void sub_45060(Bit8u a1, Bit8u a2)//226060
{
	Bit16u v2; // dx
	Bit8u index; // al
	Bit8u v4; // ah
	//uint16_t v5; // dx

	qmemcpy(x_BYTE_10B4E0_terraintype, x_BYTE_13B4E0_angle, 0x10000);
	v2 = 0;
	do
	{
		index = 0;
		v4 = -1;
		if (x_BYTE_11B4E0_height[v2])
			index = x_BYTE_11B4E0_height[v2];
		if (x_BYTE_11B4E0_height[v2] < 0xFFu)
			v4 = x_BYTE_11B4E0_height[v2];
		HIBYTE(v2)--;
		if (index < x_BYTE_11B4E0_height[v2])
			index = x_BYTE_11B4E0_height[v2];
		if (v4 > x_BYTE_11B4E0_height[v2])
			v4 = x_BYTE_11B4E0_height[v2];
		LOBYTE(v2)++;
		if (index < x_BYTE_11B4E0_height[v2])
			index = x_BYTE_11B4E0_height[v2];
		if (v4 > x_BYTE_11B4E0_height[v2])
			v4 = x_BYTE_11B4E0_height[v2];
		HIBYTE(v2)++;
		if (index < x_BYTE_11B4E0_height[v2])
			index = x_BYTE_11B4E0_height[v2];
		if (v4 > x_BYTE_11B4E0_height[v2])
			v4 = x_BYTE_11B4E0_height[v2];
		HIBYTE(v2)++;
		if (index < x_BYTE_11B4E0_height[v2])
			index = x_BYTE_11B4E0_height[v2];
		if (v4 > x_BYTE_11B4E0_height[v2])
			v4 = x_BYTE_11B4E0_height[v2];
		LOBYTE(v2)--;
		if (index < x_BYTE_11B4E0_height[v2])
			index = x_BYTE_11B4E0_height[v2];
		if (v4 > x_BYTE_11B4E0_height[v2])
			v4 = x_BYTE_11B4E0_height[v2];
		LOBYTE(v2)--;
		if (index < x_BYTE_11B4E0_height[v2])
			index = x_BYTE_11B4E0_height[v2];
		if (v4 > x_BYTE_11B4E0_height[v2])
			v4 = x_BYTE_11B4E0_height[v2];
		HIBYTE(v2)--;
		if (index < x_BYTE_11B4E0_height[v2])
			index = x_BYTE_11B4E0_height[v2];
		if (v4 > x_BYTE_11B4E0_height[v2])
			v4 = x_BYTE_11B4E0_height[v2];
		HIBYTE(v2)--;
		if (index < x_BYTE_11B4E0_height[v2])
			index = x_BYTE_11B4E0_height[v2];
		if (v4 > x_BYTE_11B4E0_height[v2])
			v4 = x_BYTE_11B4E0_height[v2];
		LOBYTE(v2)++;
		HIBYTE(v2)++;
		if (index < a1 && index - v4 <= a2)
		{
			if (x_BYTE_13B4E0_angle[v2])
				x_BYTE_13B4E0_angle[v2] = 5;
		}
		v2++;
	} while (v2);
}

//----- (00045210) --------------------------------------------------------
void sub_45210(Bit8u a1, Bit8u a2)//226210
{
	Bit16u v2; // dx
	Bit16u v3; // eax
	char v4; // t1
	Bit8u v5; // bl
	Bit8u v6; // bh
	//uint16_t v7; // dx
	int v8; // ecx

	//fix
	v3 = 0;
	//fix

	qmemcpy(x_BYTE_10B4E0_terraintype, x_BYTE_13B4E0_angle, 0x10000);
	v2 = 0;
	do
	{
		BYTE1(v3) = 0xffu;
		v4 = x_BYTE_13B4E0_angle[v2];
		v5 = 0;
		v6 = 0;
		if (x_BYTE_11B4E0_height[v2] > 0u)
			LOBYTE(v3) = x_BYTE_11B4E0_height[v2];
		if (x_BYTE_11B4E0_height[v2] < 0xFFu)
			BYTE1(v3) = x_BYTE_11B4E0_height[v2];
		HIBYTE(v2)--;
		if (LOBYTE(v3) < x_BYTE_11B4E0_height[v2])
			LOBYTE(v3) = x_BYTE_11B4E0_height[v2];
		if (BYTE1(v3) > x_BYTE_11B4E0_height[v2])
			BYTE1(v3) = x_BYTE_11B4E0_height[v2];
		if (x_BYTE_13B4E0_angle[v2] == 5)
			v6 = 1;
		if (x_BYTE_13B4E0_angle[v2] == 2)
			v5 = 1;
		LOBYTE(v2)++;
		if (LOBYTE(v3) < x_BYTE_11B4E0_height[v2])
			LOBYTE(v3) = x_BYTE_11B4E0_height[v2];
		if (BYTE1(v3) > x_BYTE_11B4E0_height[v2])
			BYTE1(v3) = x_BYTE_11B4E0_height[v2];
		if (x_BYTE_13B4E0_angle[v2] == 5)
			v6++;
		if (x_BYTE_13B4E0_angle[v2] == 2)
			v5++;
		HIBYTE(v2)++;
		if (LOBYTE(v3) < x_BYTE_11B4E0_height[v2])
			LOBYTE(v3) = x_BYTE_11B4E0_height[v2];
		if (BYTE1(v3) > x_BYTE_11B4E0_height[v2])
			BYTE1(v3) = x_BYTE_11B4E0_height[v2];
		if (x_BYTE_13B4E0_angle[v2] == 5)
			v6++;
		if (x_BYTE_13B4E0_angle[v2] == 2)
			v5++;
		HIBYTE(v2)++;
		if (LOBYTE(v3) < x_BYTE_11B4E0_height[v2])
			LOBYTE(v3) = x_BYTE_11B4E0_height[v2];
		if (BYTE1(v3) > x_BYTE_11B4E0_height[v2])
			BYTE1(v3) = x_BYTE_11B4E0_height[v2];
		if (x_BYTE_13B4E0_angle[v2] == 5)
			v6++;
		if (x_BYTE_13B4E0_angle[v2] == 2)
			v5++;
		LOBYTE(v2)--;
		if (LOBYTE(v3) < x_BYTE_11B4E0_height[v2])
			LOBYTE(v3) = x_BYTE_11B4E0_height[v2];
		if (BYTE1(v3) > x_BYTE_11B4E0_height[v2])
			BYTE1(v3) = x_BYTE_11B4E0_height[v2];
		if (x_BYTE_13B4E0_angle[v2] == 5)
			v6++;
		if (x_BYTE_13B4E0_angle[v2] == 2)
			v5++;
		LOBYTE(v2)--;
		if (LOBYTE(v3) < x_BYTE_11B4E0_height[v2])
			LOBYTE(v3) = x_BYTE_11B4E0_height[v2];
		if (BYTE1(v3) > x_BYTE_11B4E0_height[v2])
			BYTE1(v3) = x_BYTE_11B4E0_height[v2];
		if (x_BYTE_13B4E0_angle[v2] == 5)
			v6++;
		if (x_BYTE_13B4E0_angle[v2] == 2)
			v5++;
		HIBYTE(v2)--;
		if (LOBYTE(v3) < x_BYTE_11B4E0_height[v2])
			LOBYTE(v3) = x_BYTE_11B4E0_height[v2];
		if (BYTE1(v3) > x_BYTE_11B4E0_height[v2])
			BYTE1(v3) = x_BYTE_11B4E0_height[v2];
		if (x_BYTE_13B4E0_angle[v2] == 5)
			v6++;
		if (x_BYTE_13B4E0_angle[v2] == 2)
			v5++;
		HIBYTE(v2)--;
		if (LOBYTE(v3) < x_BYTE_11B4E0_height[v2])
			LOBYTE(v3) = x_BYTE_11B4E0_height[v2];
		if (BYTE1(v3) > x_BYTE_11B4E0_height[v2])
			BYTE1(v3) = x_BYTE_11B4E0_height[v2];
		if (x_BYTE_13B4E0_angle[v2] == 5)
			v6++;
		if (x_BYTE_13B4E0_angle[v2] == 2)
			v5++;
		LOBYTE(v2)++;
		HIBYTE(v2)++;
		if (LOBYTE(v3) < a1)
		{
			v8 = LOBYTE(v3) - BYTE1(v3);
			LOBYTE(v3) = a2;
			if (v8 <= a2 && x_BYTE_13B4E0_angle[v2] == 5)
			{
				v3 = v6 + v5;
				if (v3 == 8)
					x_BYTE_13B4E0_angle[v2] = 2;
			}
		}
		v2++;
	} while (v2);
}

//----- (000454F0) --------------------------------------------------------
void sub_454F0(Bit8u a1, Bit8u a2)//2264f0
{
	Bit16u index; // ax
	Bit8u v3; // dh
	Bit8u v4; // dl
	//uint16_t v5; // ax
	//Bit16u v6; // ax

	// fix if begin
	//v5 = 0;
	//v6 = 0;
	// end

	index = 0;
	do
	{
		if (x_BYTE_11B4E0_height[index] > a1)
		{
			v3 = 0;
			v4 = -1;
			if (x_BYTE_11B4E0_height[index])
				v3 = x_BYTE_11B4E0_height[index];
			if (x_BYTE_11B4E0_height[index] < 0xFFu)
				v4 = x_BYTE_11B4E0_height[index];
			HIBYTE(index)--;
			if (v3 < x_BYTE_11B4E0_height[index])
				v3 = x_BYTE_11B4E0_height[index];
			if (v4 > x_BYTE_11B4E0_height[index])
				v4 = x_BYTE_11B4E0_height[index];
			LOBYTE(index)++;
			HIBYTE(index)++;
			if (v3 < x_BYTE_11B4E0_height[index])
				v3 = x_BYTE_11B4E0_height[index];
			if (v4 > x_BYTE_11B4E0_height[index])
				v4 = x_BYTE_11B4E0_height[index];
			HIBYTE(index)++;
			LOBYTE(index)--;
			if (v3 < x_BYTE_11B4E0_height[index])
				v3 = x_BYTE_11B4E0_height[index];
			if (v4 > x_BYTE_11B4E0_height[index])
				v4 = x_BYTE_11B4E0_height[index];
			LOBYTE(index)--;
			HIBYTE(index)--;
			if (v3 < x_BYTE_11B4E0_height[index])
				v3 = x_BYTE_11B4E0_height[index];
			if (v4 > x_BYTE_11B4E0_height[index])
				v4 = x_BYTE_11B4E0_height[index];
			LOBYTE(index)++;
			if (x_BYTE_13B4E0_angle[index])
			{
				if (v3 - v4 < a2)
					x_BYTE_13B4E0_angle[index] = 6;
			}
		}
		index++;
	} while (index);
}

//----- (00045600) --------------------------------------------------------
void sub_45600(Bit8u a1)//226600
{
	Bit16u index; // ax
	uint8_t v2; // dh
	uint8_t v3; // dl
	//uint16_t v4; // ax
	//uint16_t v5; // ax
	//uint16_t v6; // ax
	int16_t v7; // bx
	char v8; // dh
	char v9; // dl
	char v10; // t0
	char v11; // t0
	char v12; // t0
	char v13; // t0
	char v14; // t0
	char v15; // t0
	char v16; // t0
	char v17; // t0
	char v18; // t0
	char v19; // t0
	char v20; // t0
	char v21; // t0
	char v22; // t0
	char v23; // t0
	char v24; // t0
	char v25; // t0
	char v26; // t0
	char v27; // t0
	char v28; // t0
	char v29; // t0
	char v30; // t0
	char v31; // t0
	char v32; // t0
	char v33; // t0

	// fix if begin
	//v4 = 0;
	//v5 = 0;
	//v6 = 0;
	// end

	qmemcpy(x_BYTE_10B4E0_terraintype, x_BYTE_13B4E0_angle, 0x10000);
	index = 0;
	do
	{
		v2 = 0;
		v3 = 0xffu;
		if (x_BYTE_11B4E0_height[index])
			v2 = x_BYTE_11B4E0_height[index];
		if (x_BYTE_11B4E0_height[index] < 0xFFu)
			v3 = x_BYTE_11B4E0_height[index];
		HIBYTE(index)--;
		if (v2 < x_BYTE_11B4E0_height[index])
			v2 = x_BYTE_11B4E0_height[index];
		if (v3 > x_BYTE_11B4E0_height[index])
			v3 = x_BYTE_11B4E0_height[index];
		LOBYTE(index)++;
		HIBYTE(index)++;
		if (v2 < x_BYTE_11B4E0_height[index])
			v2 = x_BYTE_11B4E0_height[index];
		if (v3 > x_BYTE_11B4E0_height[index])
			v3 = x_BYTE_11B4E0_height[index];
		HIBYTE(index)++;
		LOBYTE(index)--;
		if (v2 < x_BYTE_11B4E0_height[index])
			v2 = x_BYTE_11B4E0_height[index];
		if (v3 > x_BYTE_11B4E0_height[index])
			v3 = x_BYTE_11B4E0_height[index];
		LOBYTE(index)--;
		HIBYTE(index)--;
		if (v2 < x_BYTE_11B4E0_height[index])
			v2 = x_BYTE_11B4E0_height[index];
		if (v3 > x_BYTE_11B4E0_height[index])
			v3 = x_BYTE_11B4E0_height[index];
		LOBYTE(index)++;
		if (x_BYTE_13B4E0_angle[index] && v2 - v3 >= a1)
			x_BYTE_13B4E0_angle[index] = 1;
		index++;
	} while (index);
	do
	{
		if (x_BYTE_13B4E0_angle[index] != 6)
			goto LABEL_100;
		v7 = 0;
		HIBYTE(index)--;
		v8 = 0;
		v9 = 0;
		if (x_BYTE_13B4E0_angle[index] == 3)
			HIBYTE(v7) = 1;
		if (x_BYTE_13B4E0_angle[index] == 2)
			v9 = 1;
		if (x_BYTE_13B4E0_angle[index] == 5)
			LOBYTE(v7) = 1;
		v10 = x_BYTE_13B4E0_angle[index];
		v11 = x_BYTE_13B4E0_angle[index];
		if (x_BYTE_13B4E0_angle[index] == 4)
			v8 = 1;
		v12 = x_BYTE_13B4E0_angle[index];
		LOBYTE(index)++;
		if (x_BYTE_13B4E0_angle[index] == 3)
			HIBYTE(v7)++;
		if (x_BYTE_13B4E0_angle[index] == 2)
			v9++;
		if (x_BYTE_13B4E0_angle[index] == 5)
			LOBYTE(v7)++;
		v13 = x_BYTE_13B4E0_angle[index];
		v14 = x_BYTE_13B4E0_angle[index];
		if (x_BYTE_13B4E0_angle[index] == 4)
			v8++;
		v15 = x_BYTE_13B4E0_angle[index];
		HIBYTE(index)++;
		if (x_BYTE_13B4E0_angle[index] == 3)
			HIBYTE(v7)++;
		if (x_BYTE_13B4E0_angle[index] == 2)
			v9++;
		if (x_BYTE_13B4E0_angle[index] == 5)
			LOBYTE(v7)++;
		v16 = x_BYTE_13B4E0_angle[index];
		v17 = x_BYTE_13B4E0_angle[index];
		if (x_BYTE_13B4E0_angle[index] == 4)
			v8++;
		v18 = x_BYTE_13B4E0_angle[index];
		HIBYTE(index)++;
		if (x_BYTE_13B4E0_angle[index] == 3)
			HIBYTE(v7)++;
		if (x_BYTE_13B4E0_angle[index] == 2)
			v9++;
		if (x_BYTE_13B4E0_angle[index] == 5)
			LOBYTE(v7)++;
		v19 = x_BYTE_13B4E0_angle[index];
		v20 = x_BYTE_13B4E0_angle[index];
		if (x_BYTE_13B4E0_angle[index] == 4)
			v8++;
		v21 = x_BYTE_13B4E0_angle[index];
		LOBYTE(index) = index - 1;
		if (x_BYTE_13B4E0_angle[index] == 3)
			HIBYTE(v7)++;
		if (x_BYTE_13B4E0_angle[index] == 2)
			v9++;
		if (x_BYTE_13B4E0_angle[index] == 5)
			LOBYTE(v7)++;
		v22 = x_BYTE_13B4E0_angle[index];
		v23 = x_BYTE_13B4E0_angle[index];
		if (x_BYTE_13B4E0_angle[index] == 4)
			v8++;
		v24 = x_BYTE_13B4E0_angle[index];
		LOBYTE(index)--;
		if (x_BYTE_13B4E0_angle[index] == 3)
			HIBYTE(v7)++;
		if (x_BYTE_13B4E0_angle[index] == 2)
			v9++;
		if (x_BYTE_13B4E0_angle[index] == 5)
			LOBYTE(v7)++;
		v25 = x_BYTE_13B4E0_angle[index];
		v26 = x_BYTE_13B4E0_angle[index];
		if (x_BYTE_13B4E0_angle[index] == 4)
			v8++;
		v27 = x_BYTE_13B4E0_angle[index];
		HIBYTE(index)--;
		if (x_BYTE_13B4E0_angle[index] == 3)
			HIBYTE(v7)++;
		if (x_BYTE_13B4E0_angle[index] == 2)
			v9++;
		if (x_BYTE_13B4E0_angle[index] == 5)
			LOBYTE(v7)++;
		v28 = x_BYTE_13B4E0_angle[index];
		v29 = x_BYTE_13B4E0_angle[index];
		if (x_BYTE_13B4E0_angle[index] == 4)
			v8++;
		v30 = x_BYTE_13B4E0_angle[index];
		HIBYTE(index)--;
		if (x_BYTE_13B4E0_angle[index] == 3)
			HIBYTE(v7)++;
		if (x_BYTE_13B4E0_angle[index] == 2)
			v9++;
		if (x_BYTE_13B4E0_angle[index] == 5)
			LOBYTE(v7)++;
		v31 = x_BYTE_13B4E0_angle[index];
		v32 = x_BYTE_13B4E0_angle[index];
		if (x_BYTE_13B4E0_angle[index] == 4)
			v8++;
		v33 = x_BYTE_13B4E0_angle[index];
		LOBYTE(index)++;
		HIBYTE(index)++;
		if (HIBYTE(v7))
		{
			if (v9 || LOBYTE(v7) || v8)
				goto LABEL_99;
		}
		else if (v9 || LOBYTE(v7) && v8)
		{
		LABEL_99:
			x_BYTE_13B4E0_angle[index] = 1;
			goto LABEL_100;
		}
	LABEL_100:
		index++;
	} while (index);
}

//----- (00045AA0) --------------------------------------------------------
void sub_45AA0_setMax4Tiles()//226aa0
{
	uaxis_2d indexx; // ax
	char v1; // dh
	//uint16_t v2; // cx
	uint8_t v3; // dl
	uint8_t v4; // bl
	//uint16_t v5; // cx
	//uint16_t v6; // cx
	//uint16_t v7; // cx
	//uint16_t v8; // cx
	char v9; // [esp+0h] [ebp-4h]


	//[*][*]
	//[*][*]

	do
	{
		indexx.word = 0;
		v9 = 0;
		do
		{
			v1 = 0;
			if (!x_BYTE_13B4E0_angle[indexx.word])
				v1 = 1;
			//v2 = index;			
			v3 = x_BYTE_11B4E0_height[indexx.word];
			v4 = x_BYTE_11B4E0_height[indexx.word];
			//LOBYTE(index)++;
			indexx._axis_2d.x++;
			if (!x_BYTE_13B4E0_angle[indexx.word])
				v1++;
			if (v3 > x_BYTE_11B4E0_height[indexx.word])
				v3 = x_BYTE_11B4E0_height[indexx.word];
			if (v4 < x_BYTE_11B4E0_height[indexx.word])
				v4 = x_BYTE_11B4E0_height[indexx.word];
			//HIBYTE(index)++;
			indexx._axis_2d.y++;
			if (!x_BYTE_13B4E0_angle[indexx.word])
				v1++;
			if (v3 > x_BYTE_11B4E0_height[indexx.word])
				v3 = x_BYTE_11B4E0_height[indexx.word];
			if (v4 < x_BYTE_11B4E0_height[indexx.word])
				v4 = x_BYTE_11B4E0_height[indexx.word];
			//LOBYTE(index)--;
			indexx._axis_2d.x--;
			if (!x_BYTE_13B4E0_angle[indexx.word])
				v1++;
			if (v3 > x_BYTE_11B4E0_height[indexx.word])
				v3 = x_BYTE_11B4E0_height[indexx.word];
			if (v4 < x_BYTE_11B4E0_height[indexx.word])
				v4 = x_BYTE_11B4E0_height[indexx.word];
			//HIBYTE(index)--;
			indexx._axis_2d.y--;
			if (v4 != v3 && v1 == 4)
			{
				v9 = 1;
				//v5 = index;
				x_BYTE_11B4E0_height[indexx.word] = v3;
				//LOBYTE(index)++;
				indexx._axis_2d.x++;
				//v6 = index;				
				x_BYTE_11B4E0_height[indexx.word] = v3;
				//HIBYTE(index)++;
				indexx._axis_2d.y++;
				//v7 = index;				
				x_BYTE_11B4E0_height[indexx.word] = v3;
				//LOBYTE(index)--;
				indexx._axis_2d.x--;
				//v8 = index;				
				x_BYTE_11B4E0_height[indexx.word] = v3;
				//HIBYTE(index)--;
				indexx._axis_2d.y--;
			}
			indexx.word++;
		} while (indexx.word);
	} while (v9);
}


//----- (00045BE0) --------------------------------------------------------
Bit8u sub_45BE0(Bit8u a1, Bit8u a2, uaxis_2d a3x)//226be0
{
	uaxis_2d v3x; // ax
	Bit8u v4; // bl
	Bit8u v5; // dh
	Bit8u v6; // bh
	Bit8u v7; // al
	Bit32u v8; // edi
	Bit8u result; // al

	//Bit8u a1=0;
	//Bit8u a2=0;

	v3x.word = a3x.word;
	v4 = 0xFFu;
	v5 = 0;
	if (x_BYTE_11B4E0_height[a3x.word])
	{
		v5 = x_BYTE_11B4E0_height[a3x.word];
		a1 = 0;
	}
	if (x_BYTE_11B4E0_height[a3x.word] < 0xFFu)
		v4 = x_BYTE_11B4E0_height[a3x.word];
	v3x._axis_2d.x++;
	if (x_BYTE_11B4E0_height[v3x.word] > v5)
	{
		v5 = x_BYTE_11B4E0_height[v3x.word];
		a1 = 1;
	}
	if (x_BYTE_11B4E0_height[v3x.word] < v4)
		v4 = x_BYTE_11B4E0_height[v3x.word];
	v3x._axis_2d.y++;
	if (x_BYTE_11B4E0_height[v3x.word] > v5)
	{
		v5 = x_BYTE_11B4E0_height[v3x.word];
		a1 = 2;
	}
	if (x_BYTE_11B4E0_height[v3x.word] < v4)
		v4 = x_BYTE_11B4E0_height[v3x.word];
	v3x._axis_2d.x--;
	if (x_BYTE_11B4E0_height[v3x.word] > v5)
	{
		v5 = x_BYTE_11B4E0_height[v3x.word];
		a1 = 3;
	}
	if (x_BYTE_11B4E0_height[v3x.word] < v4)
		v4 = x_BYTE_11B4E0_height[v3x.word];
	v3x._axis_2d.y--;
	v6 = 0;
	if (a1 && x_BYTE_11B4E0_height[v3x.word])
	{
		v6 = x_BYTE_11B4E0_height[v3x.word];
		a2 = 0;
	}
	v3x._axis_2d.x++;
	if (a1 != 1 && x_BYTE_11B4E0_height[v3x.word] > v6)
	{
		v6 = x_BYTE_11B4E0_height[v3x.word];
		a2 = 1;
	}
	v3x._axis_2d.y++;
	if (a1 != 2 && x_BYTE_11B4E0_height[v3x.word] > v6)
	{
		v6 = x_BYTE_11B4E0_height[v3x.word];
		a2 = 2;
	}
	v3x._axis_2d.x--;
	if (a1 != 3)
	{
		v7 = x_BYTE_11B4E0_height[v3x.word];
		if (v7 > v6)
		{
			a2 = 3;
			v6 = v7;
		}
	}
	v8 = 0;
	if (v5 - v4 <= 8)
		v8 = 1;
	if (v5 - v6 >= 8)
	{
		result = a1;
	LABEL_44:
		x_DWORD_D47DC = v8;
		return result;
	}
	if (a1 > 3u)
	{
		result = 0;
		goto LABEL_44;
	}
	switch (a1)
	{
	case 0:
		if (a2 != 1)
			goto LABEL_42;
		goto LABEL_36;
	case 1:
		if (a2 == 2)
			goto LABEL_38;
	LABEL_36:
		result = 4;
		x_DWORD_D47DC = v8;
		return result;
	case 2:
		if (a2 == 3)
			goto LABEL_40;
	LABEL_38:
		result = 5;
		x_DWORD_D47DC = v8;
		break;
	case 3:
		if (a2)
		{
		LABEL_40:
			result = 6;
			x_DWORD_D47DC = v8;
		}
		else
		{
		LABEL_42:
			result = 7;
			x_DWORD_D47DC = v8;
		}
		break;
	}
	return result;
}

//----- (00045DC0) --------------------------------------------------------
void sub_45DC0(Bit8u a1, Bit8u a2, uaxis_2d a3x, uint8_t a4)//226dc0
{
	uaxis_2d v4x; // bx
	uaxis_2d v5x; // eax
	char v6; // ch
	Bit8u* v7; // eax
	char v8; // al
	char v9; // ah
	uint8_t v10; // al
	char v11; // cl
	uint8_t v12; // dh
	uint8_t v13; // dh
	char v14; // cl
	uint8_t v15; // dh
	char v16; // cl
	uint8_t v17; // dh
	char v18; // bl
	uaxis_2d v19x; // ax
	char v20; // ch
	uaxis_2d v21x; // ax
	char v22; // dl
	uint8_t v24; // [esp+0h] [ebp-4h]

	v4x._axis_2d.y = a3x._axis_2d.y;
	v24 = 8 * ((a3x._axis_2d.y + a3x._axis_2d.x) & 1);
	if (a4 >= 8u)
	{
		switch (a4)
		{
		case 8u:
			x_BYTE_10B4E0_terraintype[a3x.word] = 8;
			break;
		case 9u:
			x_BYTE_10B4E0_terraintype[a3x.word] = 9;
			break;
		case 0xAu:
			v8 = sub_45BE0(a1, a2, a3x);
			v9 = v8;
			if (x_DWORD_D47DC)
				v9 = v8 + 8;
			v10 = v9;
			goto LABEL_28;
		case 0xBu:
			v10 = sub_45BE0(a1, a2, a3x) + 16;
			if (x_DWORD_D47DC)
				v10 += 8;
			goto LABEL_28;
		case 0xCu:
			v10 = sub_45BE0(a1, a2, a3x) + 32;
			if (x_DWORD_D47DC)
				v10 += 8;
			goto LABEL_28;
		case 0xDu:
			v10 = sub_45BE0(a1, a2, a3x) + 48;
			if (x_DWORD_D47DC)
				v10 += 8;
			goto LABEL_28;
		case 0xEu:
			v10 = sub_45BE0(a1, a2, a3x) + 64;
			if (x_DWORD_D47DC)
				v10 += 8;
		LABEL_28:
			v7 = &unk_D4A30[0x80] + 2 * v10;
			goto LABEL_29;
		case 0xFu:
			x_BYTE_10B4E0_terraintype[a3x.word] = 11;
			break;
		case 0x10u:
			v6 = x_BYTE_10B4E0_terraintype[a3x.word];
			if (v6 == 10 || v6 == 11 || v6 == 12)
				break;
			v7 = unk_D4A30 + 2 * sub_45BE0(a1, a2, a3x);
			goto LABEL_29;
		case 0x11u:
			v7 = &unk_D4A30[0x40] + 2 * sub_45BE0(a1, a2, a3x);
			goto LABEL_29;
		case 0x12u:
			v7 = &unk_D4A30[0x50] + 2 * (v24 + sub_45BE0(a1, a2, a3x));
			goto LABEL_29;
		case 0x13u:
			v7 = &unk_D4A30[0x50] + 2 * (sub_45BE0(a1, a2, a3x) + v24) + 16;
			goto LABEL_29;
		case 0x14u:
			v7 = &unk_D4A30[0x10] + 2 * sub_45BE0(a1, a2, a3x);
			goto LABEL_29;
		case 0x15u:
			v7 = &unk_D4A30[0x10] + 2 * sub_45BE0(a1, a2, a3x) + 16;
			goto LABEL_29;
		case 0x16u:
			v7 = &unk_D4A30[0x10] + 2 * sub_45BE0(a1, a2, a3x) + 32;
		LABEL_29:
			x_BYTE_10B4E0_terraintype[a3x.word] = v7[0];
			x_BYTE_13B4E0_angle[a3x.word] = x_BYTE_13B4E0_angle[a3x.word] & 0x8F | v7[1];
			break;
		default:
			break;
		}
		v11 = x_BYTE_13B4E0_angle[a3x.word] | 0x80;
		x_BYTE_13B4E0_angle[a3x.word] = v11;
		if (x_BYTE_D41B6)
		{
			v12 = x_BYTE_11B4E0_height[a3x.word];
			if (x_BYTE_14B4E0[a3x.word] > v12)
			{
				x_BYTE_13B4E0_angle[a3x.word] = v11 & 0xF7;
			}
			else
			{
				x_BYTE_13B4E0_angle[a3x.word] = v11 | 8;
				x_BYTE_14B4E0[a3x.word] = v12 - 1;
			}
			v4x._axis_2d.x = a3x._axis_2d.x + 1;
			v13 = x_BYTE_11B4E0_height[v4x.word];
			if (x_BYTE_14B4E0[v4x.word] > v13)
			{
				x_BYTE_13B4E0_angle[v4x.word] &= 0xF7u;
			}
			else
			{
				v14 = x_BYTE_13B4E0_angle[v4x.word] | 8;
				x_BYTE_14B4E0[v4x.word] = v13 - 1;
				x_BYTE_13B4E0_angle[v4x.word] = v14;
			}
			v4x._axis_2d.y = a3x._axis_2d.y + 1;
			v15 = x_BYTE_11B4E0_height[v4x.word];
			if (x_BYTE_14B4E0[v4x.word] > v15)
			{
				x_BYTE_13B4E0_angle[v4x.word] &= 0xF7u;
			}
			else
			{
				v16 = x_BYTE_13B4E0_angle[v4x.word] | 8;
				x_BYTE_14B4E0[v4x.word] = v15 - 1;
				x_BYTE_13B4E0_angle[v4x.word] = v16;
			}
			v4x._axis_2d.x = a3x._axis_2d.x;
			v5x.word = v4x.word;
			v17 = x_BYTE_11B4E0_height[v4x.word];
			if (x_BYTE_14B4E0[v4x.word] <= v17)
			{
				v18 = x_BYTE_13B4E0_angle[v4x.word] | 8;
				x_BYTE_14B4E0[v5x.word] = v17 - 1;
				x_BYTE_13B4E0_angle[v5x.word] = v18;
				return;
			}
		}
		else
		{
			v4x._axis_2d.x = a3x._axis_2d.x + 1;
			x_BYTE_13B4E0_angle[a3x.word] = v11 & 0xF7;
			v19x.word = v4x.word;
			v20 = x_BYTE_13B4E0_angle[v4x.word] & 0xF7;
			v4x._axis_2d.y = a3x._axis_2d.y + 1;
			x_BYTE_13B4E0_angle[v19x.word] = v20;
			v21x.word = v4x.word;
			v22 = x_BYTE_13B4E0_angle[v4x.word] & 0xF7;
			v4x._axis_2d.x = a3x._axis_2d.x;
			x_BYTE_13B4E0_angle[v21x.word] = v22;
			//v5x.word = v21x.word;
			v5x.word = v4x.word;//0xa9bc
		}
		x_BYTE_13B4E0_angle[v5x.word] &= 0xF7u;
		return;
	}
	x_BYTE_13B4E0_angle[a3x.word] = a4 | x_BYTE_13B4E0_angle[a3x.word] & 0xF0;
	/*LOBYTE(v5) = */sub_462A0(a3x, a3x);
	//return v5;
}

//----- (00046180) --------------------------------------------------------
uint16_t sub_46180(uint16_t a1, char a2)//227180
{
	//uint16_t v2; // ax
	uint16_t v3; // bx
	uint16_t v4; // bx
	uint16_t v5; // bx
	uint16_t result; // ax
	char v7; // bl
	char i; // bh
	uint16_t v9; // si
	int v10; // edx

	//HIBYTE(v2) = HIBYTE(a1);
	//LOBYTE(v2) = a1 - 1;
	HIBYTE(result) = HIBYTE(a1);
	LOBYTE(result) = a1 - 1;

	x_BYTE_10B4E0_terraintype[a1] = a2;
	//v3 = v2;
	v3 = result;
	HIBYTE(result) = HIBYTE(a1) - 1;
	x_BYTE_10B4E0_terraintype[v3] = a2;
	v4 = result;
	LOBYTE(result) = a1;
	x_BYTE_10B4E0_terraintype[v4] = a2;
	v5 = result;
	LOBYTE(result) = a1 - 1;
	x_BYTE_10B4E0_terraintype[v5] = a2;
	v7 = 3;
	do
	{
		for (i = 3; i; i--)
		{
			LOBYTE(result) = result + 1;
			++HIBYTE(result);
			LOWORD(v10) = result;
			LOBYTE(result) = result - 2;
			HIBYTE(result) -= 2;
			v9 = result;
			LOBYTE(result) = result + 1;
			LOBYTE(v10) = x_BYTE_11B4E0_height[v9] - x_BYTE_11B4E0_height[(uint16_t)v10] + 32;
			++HIBYTE(result);
			if ((char)v10 >= 28)
			{
				if ((char)v10 > 40)
					LOBYTE(v10) = (v10 & 7) + 40;
			}
			else
			{
				LOBYTE(v10) = (v10 & 3) + 28;
			}
			if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
				v10 = 32 - (char)v10 + 32;
			x_BYTE_12B4E0_shading[result] = v10;
			if (x_BYTE_D41B6 && (uint8_t)x_BYTE_14B4E0[result] <= x_BYTE_11B4E0_height[result])
			{
				x_BYTE_14B4E0[result] = x_BYTE_11B4E0_height[result] - 1;
				x_BYTE_13B4E0_angle[result] |= 8u;
			}
			else
			{
				x_BYTE_13B4E0_angle[result] &= 0xF7u;
			}
			LOBYTE(result) = result + 1;
		}
		LOBYTE(result) = result - 3;
		--v7;
		++HIBYTE(result);
	} while (v7);
	return result;
}

int counter_finding_sub_462A0=0;
int counter_finding_sub_462A0_2 = 0;

//----- (000462A0) --------------------------------------------------------
void sub_462A0(uaxis_2d a1x, uaxis_2d a2x)//2272a0
{
	uaxis_2d v2x; // cx
	bool v3; // zf
	uaxis_2d v4x; // eax
	Bit8u v4y;
	uaxis_2d v5x; // cx
	int v6; // edx
	//uint16_t v7; // ax
	int v8; // edx
	int v9; // ebx
	int v10; // eax
	int v11index; // edx
	char v12; // ST10_1
	uaxis_2d v13x; // cx
	char v14; // dh
	char j; // dl
	uaxis_2d v16x; // ax
	uaxis_2d v17x; // bx
	char v18; // al
	char v19; // bl
	//uint8_t v20; // bh
	char i; // [esp+0h] [ebp-14h]
	char v23; // [esp+4h] [ebp-10h]
	char v24; // [esp+4h] [ebp-10h]
	char v25; // [esp+8h] [ebp-Ch]
	char v26; // [esp+8h] [ebp-Ch]
	char v27; // [esp+8h] [ebp-Ch]
	char v28; // [esp+Ch] [ebp-8h]

	// fix if begin
	//v29 = 0;
	// end

	//LOBYTE(v4) = a2 - a1 + 1;
	v4x._axis_2d.x= a2x._axis_2d.x - a1x._axis_2d.x + 1;
	v2x.word = a1x.word;
	v25 = a2x._axis_2d.x - a1x._axis_2d.x + 1;
	//HIBYTE(v4) = HIBYTE(a2) - HIBYTE(a1) + 1;
	v4x._axis_2d.y = a2x._axis_2d.y - a1x._axis_2d.y + 1;
	v3 = v4x._axis_2d.y == 0;
	v23 = a2x._axis_2d.y - a1x._axis_2d.y + 1;
	while (v4x._axis_2d.y != 0)
	{
		//LOBYTE(v4) = a2 - a1 + 1;
		v4x._axis_2d.x = a2x._axis_2d.x - a1x._axis_2d.x + 1;
		while (v4x._axis_2d.x)
		{
			if (counter_finding_sub_462A0_2>=0x65ec)
			{
				counter_finding_sub_462A0_2++;
				counter_finding_sub_462A0_2--;
			}
			counter_finding_sub_462A0_2++;

			if ((Bit8s)x_BYTE_13B4E0_angle[v2x.word] >= 0)
				x_BYTE_10B4E0_terraintype[v2x.word] = 1;
			//LOBYTE(v2)--;
			v2x._axis_2d.x--;
			if ((Bit8s)x_BYTE_13B4E0_angle[v2x.word] >= 0)
				x_BYTE_10B4E0_terraintype[v2x.word] = 1;
			//HIBYTE(v2)--;
			v2x._axis_2d.y--;
			if ((Bit8s)x_BYTE_13B4E0_angle[v2x.word] >= 0)
				x_BYTE_10B4E0_terraintype[v2x.word] = 1;
			//LOBYTE(v2)++;
			v2x._axis_2d.x++;
			if ((Bit8s)x_BYTE_13B4E0_angle[v2x.word] >= 0)
				x_BYTE_10B4E0_terraintype[v2x.word] = 1;
			//HIBYTE(v2)++;
			//LOBYTE(v4)--;
			//LOBYTE(v2)++;
			v2x._axis_2d.y++;
			v4x._axis_2d.x--;
			v2x._axis_2d.x++;
		}
		//LOBYTE(v2) = v2 - v25;
		//HIBYTE(v2)++;
		//HIBYTE(v4)--;
		v2x._axis_2d.x-=v25;
		v2x._axis_2d.y++;
		v3 = --v4x._axis_2d.y == 0;
	}
	//LOBYTE(a1)--;
	//HIBYTE(a1)--;
	a1x._axis_2d.x--;
	a1x._axis_2d.y--;

	v24 = v23 + 1;
	v28 = v24;
	v5x.word = a1x.word;
	v26 = v25 + 1;
	while (v28)
	{
		//LOBYTE(v4) = v26;
		v4x._axis_2d.x=v26;
		for (i = v26; i; i--)
		{
			//debug
			if (counter_finding_sub_462A0 < 0xf1)
			{
				counter_finding_sub_462A0++;
				counter_finding_sub_462A0--;
			}
			counter_finding_sub_462A0++;
			//debug


			v4x.word = v5x.word;
			if (x_BYTE_10B4E0_terraintype[v5x.word] == 1)
			{
						
				v6 = 343 * (x_BYTE_13B4E0_angle[v4x.word] & 7);
				//LOBYTE(v5)++;		
				v5x._axis_2d.x++;
				//v7 = v5;
				v8 = 49 * (x_BYTE_13B4E0_angle[v5x.word] & 7) + v6;
				//HIBYTE(v5)++;
				v5x._axis_2d.y++;							
				v9 = x_BYTE_13B4E0_angle[v5x.word] & 7;
				//LOBYTE(v5)--;
				v5x._axis_2d.x--;
				v10 = x_BYTE_13B4E0_angle[v5x.word] & 7;
				//HIBYTE(v5)--;
				v5x._axis_2d.y--;
				v11index = v10 + 7 * v9 + v8;
				//LOBYTE(v10) = x_BYTE_F2CD0x[v11index][0];
				x_BYTE_10B4E0_terraintype[v5x.word] = x_BYTE_F2CD0x[v11index][0];
				if (x_BYTE_F2CD0x[v11index][0] >= 8u)
				{
					v4y = x_BYTE_F2CD0x[v11index][1] + (x_BYTE_13B4E0_angle[v5x.word] & 0x87);
				}
				else
				{
					v12 = x_BYTE_13B4E0_angle[v5x.word] & 0x87;
					x_WORD_17B4E0 = 9377 * x_WORD_17B4E0 + 9439;
					v4y = v12 + 16 * (x_WORD_17B4E0 % 7u);
				}
				x_BYTE_13B4E0_angle[v5x.word] = v4y;
			}
			//LOBYTE(v5)++;
			v5x._axis_2d.x++;
		}
		//LOBYTE(v5) -= v26;
		//HIBYTE(v5)++;
		v5x._axis_2d.x-=v26;
		v5x._axis_2d.y++;
		v28--;
	}
	v27 = v26 + 1;
	//v13 = v29;//fixed
	v13x.word = a1x.word;//fixed
	v14 = v24 + 1;
	if (v24 != -1)
	{
		do
		{
			for (j = v27; j; j--)
			{
				//LOBYTE(v13)++;
				//HIBYTE(v13)++;
				v13x._axis_2d.x++;
				v13x._axis_2d.y++;
				v16x.word = v13x.word;
				//LOBYTE(v13)-=2;
				//HIBYTE(v13)-=2;
				v13x._axis_2d.x-=2;
				v13x._axis_2d.y-=2;
				v17x.word = v13x.word;
				//LOBYTE(v13)++;
				v13x._axis_2d.x++;
				v18 = x_BYTE_11B4E0_height[v17x.word] - x_BYTE_11B4E0_height[v16x.word] + 32;
				//HIBYTE(v13)++;
				v13x._axis_2d.y++;
				if (v18 >= 28)
				{
					if (v18 > 40)
						v18 = (v18 & 7) + 40;
				}
				else
				{
					v18 = (v18 & 3) + 28;
				}
				if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
					v19 = 32 - v18 + 32;
				else
					v19 = v18;
				v4x.word = v13x.word;
				x_BYTE_12B4E0_shading[v13x.word] = v19;
				//v20 = x_BYTE_11B4E0_height[v13x.word];
				if (x_BYTE_D41B6 && (x_BYTE_14B4E0[v13x.word] <= x_BYTE_11B4E0_height[v13x.word]))
				{
					x_BYTE_14B4E0[v13x.word] = x_BYTE_11B4E0_height[v13x.word] - 1;
					x_BYTE_13B4E0_angle[v13x.word] |= 8u;
				}
				else
				{
					x_BYTE_13B4E0_angle[v13x.word] &= 0xF7u;
				}
				//LOBYTE(v13)++;
				v13x._axis_2d.x++;
			}
			//LOBYTE(v13) -= v27;
			v13x._axis_2d.x-=v27;
			v14--;
			//HIBYTE(v13)++;
			v13x._axis_2d.y++;
		} while (v14);
	}

	//return v4;
}

int debugcounter_227570 = 0;

//----- (00046570) --------------------------------------------------------
void sub_46570(uaxis_2d a1x, uaxis_2d a2x)//227570
{
	uaxis_2d v2x; // cx
	bool v3; // zf
	uaxis_2d v4x; // eax
	uaxis_2d v5x; // dx
	uaxis_2d v6x; // dx
	uaxis_2d v7x; // dx
	uaxis_2d v8x; // dx
	uaxis_2d v9x; // cx
	int v10; // edx
	//uaxis_2d v11x; // ax
	int v12; // edx
	int v13; // ebx
	int v14; // eax
	//int v15; // edx
	//char v16; // ST0C_1
	uaxis_2d v17x; // cx
	char v18; // dh
	char j; // dl
	uaxis_2d v20x; // ax
	uaxis_2d v21x; // bx
	char v22; // al
	char v23; // bl
	uint8_t v24; // bh
	char i; // [esp+0h] [ebp-14h]
	char v27; // [esp+4h] [ebp-10h]
	char v28; // [esp+4h] [ebp-10h]
	char v29; // [esp+8h] [ebp-Ch]
	char v30; // [esp+8h] [ebp-Ch]
	char v31; // [esp+8h] [ebp-Ch]
	char v32; // [esp+10h] [ebp-4h]
	//uint16_t v33; // [esp+24h] [ebp+10h]

	// fix if begin
	//v33 = a1;
	// end
	//00
	v4x._axis_2d.x = a2x._axis_2d.x - a1x._axis_2d.x + 1;
	v2x.word = a1x.word;
	v29 = a2x._axis_2d.x - a1x._axis_2d.x + 1;
	v4x._axis_2d.y = a2x._axis_2d.y - a1x._axis_2d.y + 1;
	v3 = v4x._axis_2d.y == 0;
	v27 = a2x._axis_2d.y - a1x._axis_2d.y + 1;

	//1-v27

	while (!v3)
	{
		v4x._axis_2d.x = a2x._axis_2d.x - a1x._axis_2d.x + 1;
		while (v4x._axis_2d.x)
		{
			v5x.word = v2x.word;
			v2x._axis_2d.x--;
			x_BYTE_10B4E0_terraintype[v5x.word] = 1;
			v6x.word = v2x.word;
			v2x._axis_2d.y--;
			x_BYTE_10B4E0_terraintype[v6x.word] = 1;
			v7x.word = v2x.word;
			v2x._axis_2d.x++;
			x_BYTE_10B4E0_terraintype[v7x.word] = 1;
			v8x.word = v2x.word;
			v4x._axis_2d.x--;
			v2x._axis_2d.y++;
			x_BYTE_10B4E0_terraintype[v8x.word] = 1;
			v2x._axis_2d.x++;
		}
		v2x._axis_2d.x -= v29;
		v2x._axis_2d.y++;
		v3 = --v4x._axis_2d.y == 0;
	}
	a1x._axis_2d.x--;
	a1x._axis_2d.y--;
	v28 = v27 + 1;
	v32 = v28;
	v9x.word = a1x.word;
	v30 = v29 + 1;
	//adress 2275eb
	while (v32)
	{
		v4x._axis_2d.x = v30;
		for (i = v30; i; i--)
		{			

			//v4x.word = v9x.word;
			if (x_BYTE_10B4E0_terraintype[v9x.word] == 1)
			{				
				v10 = 343 * (x_BYTE_13B4E0_angle[v9x.word] & 7);
				v9x._axis_2d.x++;
				//v11x.word = v9x.word;
				//v9x._axis_2d.y++;
				v12 = 49 * (x_BYTE_13B4E0_angle[v9x.word] & 7) + v10;
				v9x._axis_2d.y++;
				v13 = x_BYTE_13B4E0_angle[v9x.word] & 7;
				v9x._axis_2d.x--;
				v14 = x_BYTE_13B4E0_angle[v9x.word] & 7;
				v9x._axis_2d.y--;
				//v15 = 2 * (v14 + 7 * v13 + v12);
				//LOBYTE(v14) = x_BYTE_F2CD0x[v14 + 7 * v13 + v12][0];
				x_BYTE_10B4E0_terraintype[v9x.word] = x_BYTE_F2CD0x[v14 + 7 * v13 + v12][0];
				if (x_BYTE_10B4E0_terraintype[v9x.word] >= 8u)
				{
					x_BYTE_13B4E0_angle[v9x.word] = x_BYTE_F2CD0x[v14 + 7 * v13 + v12][1] + (x_BYTE_13B4E0_angle[v9x.word] & 0x87);
				}
				else
				{
					//v16 = x_BYTE_13B4E0_angle[v9x.word] & 0x87;
					x_WORD_17B4E0 = 9377 * x_WORD_17B4E0 + 9439;
					x_BYTE_13B4E0_angle[v9x.word] = (x_BYTE_13B4E0_angle[v9x.word] & 0x87) + 16 * ((uint16_t)x_WORD_17B4E0 % 7u);
				}
				//x_BYTE_13B4E0_angle[v9x.word] = v4x._axis_2d.x;
			}
			v9x._axis_2d.x++;
		}
		v9x._axis_2d.x -= v30;
		v9x._axis_2d.y++;
		v32--;
	}
	v31 = v30 + 1;//[ebp-10]
	v17x.word = a1x.word;
	v18 = v28 + 1;//problem 02, ale ma byt 03
	//v17=0xfefe
	//adress 227737
	if (v28 != -1)
	{
		do
		{
			for (j = v31; j; j--)
			{
				v17x._axis_2d.x++;
				v17x._axis_2d.y++;
				v20x.word = v17x.word;
				v17x._axis_2d.x -= 2;
				v17x._axis_2d.y -= 2;
				v21x.word = v17x.word;
				v17x._axis_2d.x++;
				v22 = x_BYTE_11B4E0_height[v21x.word] - x_BYTE_11B4E0_height[v20x.word] + 32;
				v17x._axis_2d.y++;
				if (v22 >= 28)
				{
					if (v22 > 40)
						v22 = (v22 & 7) + 40;
				}
				else
				{
					v22 = (v22 & 3) + 28;
				}
				if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
					v23 = 32 - v22 + 32;
				else
					v23 = v22;
				v4x.word = v17x.word;
				x_BYTE_12B4E0_shading[v17x.word] = v23;
				if (x_BYTE_D41B6 && (v24 = x_BYTE_11B4E0_height[v17x.word], (uint8_t)x_BYTE_14B4E0[v17x.word] <= v24))
				{
					x_BYTE_14B4E0[v17x.word] = v24 - 1;
					x_BYTE_13B4E0_angle[v17x.word] |= 8u;
				}
				else
				{
					x_BYTE_13B4E0_angle[v17x.word] &= 0xF7u;
				}
				v17x._axis_2d.x++;
			}
			v17x._axis_2d.x -= v31;
			v18--;
			v17x._axis_2d.y++;
		} while (v18);
	}
	//return v4;
}

//----- (00046820) --------------------------------------------------------
void sub_46820_simple_timer(HMDIDRIVER user)//227820
{
	x_DWORD_17DB54_game_turn2++;
	//return 0;
}

void write_pngs2()
{
	//Bit8u buffer[10000];
	char outname[512];

	for (int k = 0; k < 0x1F8u; k++)
	{
		if (x_DWORD_F66F0x[k]!=0)
		{
			Bit8u* actimg = (Bit8u*)*x_DWORD_F66F0x[k];
			int lenght = *(Bit16u*)(actimg + 0);
			int width = *(Bit16u*)(actimg + 2);
			int height = *(Bit16u*)(actimg + 4);

			//memcpy((Bit8u*)buffer, actimg + 6, lenght);
			if ((width > 0) && (width < 1024) && (width != 0xcdcd) && (height < 768))
			{

				sprintf(outname, "c:\\prenos\\remc2\\outimg\\test-%03d.bmp", k);
				write_posistruct_to_png(actimg + 6, width, height, outname);//test write
			}
		}
	}
	/*for (int k = 0; k < 0x1F8u; k++)
	{
		if ((Bit32u*)x_DWORD_F66F0[k] != 0)
		{
			Bit8u* actimg = (Bit8u*) * (Bit32u*)x_DWORD_F5F10[k];
			int lenght = *(Bit16u*)(actimg + 0);
			int width = *(Bit16u*)(actimg + 2);
			int height = *(Bit16u*)(actimg + 4);

			//memcpy((Bit8u*)buffer, actimg + 6, lenght);
			if ((width > 0) && (width < 1024) && (width != 0xcdcd) && (height < 768))
			{

				sprintf(outname, "c:\\prenos\\remc2\\outimg\\testB-%03d.png", k);
				write_posistruct_to_png(actimg + 6, width, height, outname);//test write
			}
		}
	}*/
}

bool mouseturnoff = false;

#ifdef AUTO_CHANGE_RES
int resindex_begin = 0;
//int resindex_end = -1;
#endif AUTO_CHANGE_RES

//----- (00046830) --------------------------------------------------------
void sub_46830_main_loop(/*Bit16s* a1, */signed int a2, uint16_t a3)//227830
{
	int v5; // edx
	uint16_t v6; // dx
	bool v7; // al
	uint8_t v9; // al
	uint8_t v10; // al
	type_x_WORD_E2970* v13; // eax
	v5 = 0;

	x_D41A0_BYTEARRAY_4_struct.setting_30 = 0;//2a51a4
	D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x004_2BE0_11234 = 0;

	while (1)
	{
		if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x004_2BE0_11234)
		{
			return;
		}
	  x_D41A0_BYTEARRAY_4_struct.setting_38545 &= 0x43u;
	  D41A0_BYTESTR_0.byte_0x36E0B &= 0xFEu;

		sub_76930_menus_and_intros(v5, 0/*a1*/);//set language, intro, menu, atd. //257930
		if (!D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x004_2BE0_11234)
		{
			v6 = x_D41A0_BYTEARRAY_4_struct.levelnumber_43w;
			v7 = v6 > 0x18u && v6 < 0x32u;
			sub_47FC0_load_screen(v7);//vga smaltitle
			sub_56A30_init_game_level(a3);

			#ifdef AUTO_CHANGE_RES
			resindex_begin = 0;
			#endif AUTO_CHANGE_RES
			
			sub_47160();

			while (!D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x004_2BE0_11234)
			{
				if (x_BYTE_E37FC_music && x_BYTE_E37FD && x_WORD_E3804)
				{
					switch (D41A0_BYTESTR_0.str_2FECE.byte_level_type) {
					case 0:
						D41A0_BYTESTR_0.dword_0x235 = 2;
						break;
					case 1:
						D41A0_BYTESTR_0.dword_0x235 = 1;
						break;
					case 2:
						D41A0_BYTESTR_0.dword_0x235 = 3;
						break;
					}
				}
				sub_6EDB0_set_mouse_position_by_res();
				sub_47320_in_game_loop(a2);
				sub_53CC0_close_movie();
				sub_8D8F0_sound_proc3_endsample();
				sub_8E020_sound_proc14_stopsequence();
				sub_86860_speak_Sound(x_WORD_1803EC);//get graphics parametres?
				sub_59BF0_sound_proc11_volume();
				sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);
				if (x_WORD_180660_VGA_type_resolution & 1)
				{
					v9 = sub_5BE80_test_pallette(*xadatapald0dat2.var28_begin_buffer, 0, 0, 0);
					sub_72883_clear_graphics_320(/*v9, */(void *)x_DWORD_180628b_screen_buffer, 0xC8u, v9);
				}
				else
				{
					v10 = sub_5BE80_test_pallette(*xadatapald0dat2.var28_begin_buffer, 0, 0, 0);
					// FIXME: types
					// a3 = (int)x_DWORD_180628b_screen_buffer;
					sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, v10);
				}
				if (x_WORD_180660_VGA_type_resolution & 1)
					sub_90478_VGA_Blit320();
				else
					sub_75200_VGA_Blit640(480);
				if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 2
					&& !(x_D41A0_BYTEARRAY_4_struct.setting_38545 & 4))
				{
					sub_6DB50(1, 0);
				}
				sub_713A0();
				if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 4)
				{
					sub_56D60(a3, 0);
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] = 4;
				}
				else if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 2)
				{
					sub_5C530();
					if (x_D41A0_BYTEARRAY_4_struct.setting_38545 & 0x20)
						sub_6E0D0();
				}
				else
				{
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] |= 8;
				}
				if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 0x10)
				{
					a3 = x_D41A0_BYTEARRAY_4_struct.levelnumber_43w;
					if (a3 >= 0x18u)
					{
						if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 2)
							sub_5C530();
						break;
					}
					if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 2)
					{
						v13 = sub_824B0(a3);
						if (v13)
						{
							count_begin++;//for debug

							x_D41A0_BYTEARRAY_4_struct.levelnumber_43w = v13->word_6;
							sub_47FC0_load_screen(1);
							sub_56A30_init_game_level(a3);
							sub_47160();
						}
					}
				}
				else if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 0xA)
				{
					break;//must be here
				}
			}
			x_WORD_E29D8 = 4;
		}
	}
}

//----- (00046B40) --------------------------------------------------------
void sub_46B40()//227b40
{
	//int v0; // kr00_4
	char v1; // al
	uint8_t v2; // al
	uint8_t v3; // al

	Bit16s v0_tempmousex = x_WORD_E3760_mouse.x;
	Bit16s v0_tempmousey = x_WORD_E3760_mouse.y;

  sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);
  sub_417A0_install_pal_and_mouse_minmax();
  memset((void*)*xadatapald0dat2.var28_begin_buffer, 0, 768);
  sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);
  /*if (x_DWORD_E9C3C)
  {
    sub_83E80_freemem4(x_DWORD_E9C3C);
    x_DWORD_E9C3C = 0;
  }
  */
  //fix
  if (pre_x_DWORD_E9C3C)
  {
    sub_83E80_freemem4(pre_x_DWORD_E9C3C);
    pre_x_DWORD_E9C3C = 0;
    x_DWORD_E9C3C = 0;
  }
  //fix
  sub_54600_mouse_reset();
  /*sub_6EBF0((Bit8u**)&*filearray_2aa18c);
  sub_6EBF0((Bit8u**)&*filearray_2aa18c[6]);
  sub_6EBF0((Bit8u**)&*filearray_2aa18c[24]);*/ // fix it
  sub_6EBF0(&filearray_2aa18c[filearrayindex_POINTERSDATTAB]);
  sub_6EBF0(&filearray_2aa18c[filearrayindex_MSPRD00DATTAB]);
  sub_6EBF0(&filearray_2aa18c[filearrayindex_BUILD00DATTAB]);
  //ea3dc - filearrayindex_MSPRD00DATTAB

  //d918c
  //d91bc
  //d91ec



  sub_47130();
  if (x_WORD_180660_VGA_type_resolution == 1)
  {
    sub_6EBF0(&filearray_2aa18c[filearrayindex_FONTS0DATTAB]);
    sub_90D3F_unload_file_array(psxadatamsprd00dat);
    x_WORD_180660_VGA_type_resolution = 8;

  }
  else
  {
    //fix
    //x_DWORD_EA3D4
    //filearray_2aa18c[filearrayindex_HFONT3DATTAB]._posistruct = x_DWORD_EA3D4;
    //fix
    sub_6EBF0(&filearray_2aa18c[filearrayindex_HFONT3DATTAB]);
    sub_90D3F_unload_file_array(psxadatahsprd00dat);
    x_WORD_180660_VGA_type_resolution = 1;
    
  }
  sub_47160();
  /*sub_6EB90(&*filearray_2aa18c[0]);
  sub_6EB90(&*filearray_2aa18c[24]);*/ // fix it
  sub_6EB90(&filearray_2aa18c[filearrayindex_POINTERSDATTAB]);
  sub_6EB90(&filearray_2aa18c[filearrayindex_BUILD00DATTAB]);

  memset((void*)*xadatapald0dat2.var28_begin_buffer, 0, 768);
  if (x_WORD_180660_VGA_type_resolution & 1)
  {
    v1 = sub_5BE80_test_pallette(*xadatapald0dat2.var28_begin_buffer, 0, 0, 0);
    sub_72883_clear_graphics_320((void *)x_DWORD_180628b_screen_buffer, 0xC8u, v1);
  }
  else
  {
    v2 = sub_5BE80_test_pallette(*xadatapald0dat2.var28_begin_buffer, 0, 0, 0);
    sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, v2);
  }
  memset((void*)*xadatapald0dat2.var28_begin_buffer, 0, 768);
  sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);
  if (x_WORD_180660_VGA_type_resolution & 1)
    sub_90D6E_VGA_set_video_mode_320x200_and_pallette(*xadatapald0dat2.var28_begin_buffer);
  else
    sub_90E07_VGA_set_video_mode_640x480_and_pallette(*xadatapald0dat2.var28_begin_buffer);
  sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);
  v3 = sub_5BE80_test_pallette(*xadatapald0dat2.var28_begin_buffer, 0, 0, 0);
  x_BYTE_EB3A8 = v3;
  if (x_WORD_180660_VGA_type_resolution & 1)
    sub_72883_clear_graphics_320((void *)x_DWORD_180628b_screen_buffer, 0xC8u, v3);
  else
    sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, v3);
  sub_8CEDF_install_mouse();
  sub_8CD27_set_cursor(*(*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct));
  x_D41A0_BYTEARRAY_4_struct.byteindex_51 = 2;
  if (x_WORD_180660_VGA_type_resolution == 1)
    x_BYTE_D419D_fonttype = 1;
  else
    x_BYTE_D419D_fonttype = 3;
  sub_5BDC0_set_mouse_position(v0_tempmousex, v0_tempmousey);
}

//----- (00046DD0) --------------------------------------------------------
void /*__fastcall*/ sub_46DD0_init_sound_and_music(/*int a1, int a2, char* a3*/)//227DD0
{
	int v4; // edx
	v4 = 0;

	// FIXME
	// TODO: Skip sound and music for the moment.
	//       Replace all the DOS-based sound stuff in the future.
	std::cerr << "FIXME: Sound disabled for the moment" << std::endl;
	sub_70910_print_string((char*)"FIXME: Sound disabled for the moment\0");
	x_BYTE_E37FD = 0;
	x_BYTE_E3799_sound_card = 0;
	x_BYTE_E37FC_music = 0;
	x_BYTE_E3798_sound_active2 = 0;
	return;

	sub_83CC0(20);
	if (!x_BYTE_D4B50)
	{
		x_BYTE_D4B50 = 1;
		if ((x_D41A0_BYTEARRAY_4_struct.setting_byte1_22) & 0x40)//fix it
		{
			sub_70910_print_string((char*)"Sound Disabled\0");
			x_BYTE_E37FD = 0;
			x_BYTE_E3799_sound_card = 0;
			x_BYTE_E37FC_music = 0;
			x_BYTE_E3798_sound_active2 = 0;
		}
		else
		{
			//&v8, sizeof(&v8)
			//v8 - 355204
		  //sprintf(sounddir, 512, "%s/%s", "/netherw", "sound");
			sprintf(printbuffer, "%s/%s", "/netherw", "sound");
			sub_90EA0(x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182 - 64, printbuffer);
			/*v3 = */sub_70910_print_string((char*)"Initialise Sound\0");
			sub_90FD0(/*v3*//*v3, v4, a3*/); //fix it sound off here!
			if (!x_WORD_E2A14_sound_activel)
				myprintf("ERROR: NOT ENOUGH MEMORY FOR SOUNDS\n");
			if ((x_D41A0_BYTEARRAY_4_struct.setting_byte4_25) & 0x40)//fix it
				sub_8EAD0_load_music(1);
		}
		if (x_BYTE_E3798_sound_active2 || x_BYTE_E37FC_music)
		{
			//x_DWORD_F42A4_sound_timer = sub_92600_AIL_register_timer(sub_46820_simple_timer);
			//sub_92930_AIL_set_timer_frequency(x_DWORD_F42A4_sound_timer, 0x78u);
			//sub_92BA0_AIL_start_timer(x_DWORD_F42A4_sound_timer);
			x_BYTE_D4B51 = 1;
		}
		else
		{
			sub_6FDA0();
		}
		//v5 = x_BYTE_E3798_sound_active2;
		if (!x_BYTE_E3798_sound_active2 && !x_BYTE_E37FC_music && x_BYTE_E2A28_speek)
		{
			sub_86860_speak_Sound(x_WORD_1803EC);
			sub_86BD0_freemem1();
			//v6 = x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0xBF;
			x_BYTE_E2A28_speek = x_BYTE_E3798_sound_active2;
			(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24) &= 0xBF;
		}
	}
	sub_83CC0(21);
}

//----- (00046F50) --------------------------------------------------------
void sub_46F50_sound_proc7()//227f50
{
	if (x_BYTE_D4B51)
		;// sub_92DC0_AIL_release_timer_handle(x_DWORD_F42A4_sound_timer);
	else
		sub_6FE20();
	sub_986E0();
}

//----- (00046F80) --------------------------------------------------------
void sub_46F80()//227f80
{
	uint8_t v0; // al
	char *v1; // esi
	int v2; // esi
	char *result; // eax
	int v4; // eax
	char *v5; // ebx
	unsigned int v6; // esi
	unsigned int v7; // esi
	int v8; // [esp+0h] [ebp-2h]
	int v9; // [esp+4h] [ebp+2h]
	int v10; // [esp+8h] [ebp+6h]
	int v11; // [esp+Ch] [ebp+Ah]
	int16_t v12; // [esp+10h] [ebp+Eh]
	//char v13; // [esp+40h] [ebp+3Eh]
	int v14; // [esp+80h] [ebp+7Eh]

	sub_47130();
	v0 = D41A0_BYTESTR_0.str_2FECE.byte_level_type;
	if (v0 >= 1u)
	{
		if (v0 <= 1u)
		{
			if (x_WORD_180660_VGA_type_resolution == 1)
			{
				strcpy(printbuffer, "data/mwebn0-0.dat");
				v1 = (char*)"data/mwebn0-0.tab";
			}
			else
			{
				strcpy(printbuffer, "data/hwebn0-0.dat");
				v1 = (char*)"data/hwebn0-0.tab";
			}
		}
		else
		{
			if (v0 != 2)
				goto LABEL_16;
			if (x_WORD_180660_VGA_type_resolution == 1)
			{
				strcpy(printbuffer, "data/mwebc0-0.dat");
				v1 = (char*)"data/mwebc0-0.tab";
			}
			else
			{
				strcpy(printbuffer, "data/hwebc0-0.dat");
				v1 = (char*)"data/hwebc0-0.tab";
			}
		}
		goto LABEL_15;
	}
	if (!v0)
	{
		if (x_WORD_180660_VGA_type_resolution == 1)
		{
			strcpy(printbuffer, "data/mwebd0-0.dat");
			v1 = (char*)"data/mwebd0-0.tab";
		}
		else
		{
			strcpy(printbuffer, "data/hwebd0-0.dat");
			v1 = (char*)"data/hwebd0-0.tab";
		}
	LABEL_15:
		v8 = *(x_DWORD *)v1;
		// FIXME: types
		// v2 = (int)(v1 + 4);
		v9 = *(x_DWORD *)v2;
		v2 += 4;
		v10 = *(x_DWORD *)v2;
		v2 += 4;
		v11 = *(x_DWORD *)v2;
		v12 = *(x_WORD *)(v2 + 4);
	}
LABEL_16:
	result = (char *)sub_53E60_readfile_and_decompress(printbuffer, &x_DWORD_180628b_screen_buffer);
	// FIXME: types
	// // if ((signed int)result > 0)
	// {
	// 	v4 = (int)(result + 8);
	// 	LOBYTE(v4) = v4 & 0xF8;
	// 	v14 = v4;
	// 	Bit8u* x = &x_DWORD_180628b_screen_buffer[v4];
	// 	result = (char *)sub_53E60_readfile_and_decompress((char*)&v8, &x); //fix it
	// 	v5 = result;
	// 	if ((signed int)result > 0)
	// 	{
	// 		// FIXME: types
	// 		// v6 = (unsigned int)&result[v14];
	// 		// FIXME: types
	// 		// result = (char *)malloc((int)&result[v14]);
	// 		x_DWORD_D4188 = (Bit8u*)result;
	// 		if (result)
	// 		{
	// 			qmemcpy(result, (void *)x_DWORD_180628b_screen_buffer, v6);
	// 			x_DWORD_D418C = &x_DWORD_D4188[v14];
	// 			// FIXME: types
	// 			// v7 = (unsigned int)&v5[(int)x_DWORD_D4188 + v14];
	// 			// FIXME: types
	// 			// x_DWORD_D4190 = (int)&v5[(int)x_DWORD_D4188 + v14];
	// 			if (x_WORD_180660_VGA_type_resolution & 1)
	// 				sub_98709_create_index_dattab_power((Bit8u*)x_DWORD_D4188 + v14, (Bit8u*)v7, (Bit8u*)x_DWORD_D4188, x_DWORD_D4188t_spritestr);
	// 			else
	// 				sub_9874D_create_index_dattab((Bit8u*)(x_DWORD_D4188 + v14), (Bit8u*)v7, (Bit8u*)x_DWORD_D4188, x_DWORD_D4188t_spritestr);
	// 		}
	// 	}
	// }
	//return result;
}

//----- (00047130) --------------------------------------------------------
void sub_47130()//228130
{
	if (x_DWORD_D4188)
	{
		sub_83E80_freemem4(x_DWORD_D4188);
		x_DWORD_D4188 = 0;
		x_DWORD_D418C = 0;
		x_DWORD_D4190 = 0;
	}
}




//----- (00047160) --------------------------------------------------------
void sub_47160()//228160
{
	MC2File msprtab = MC2File::data_msprd00_tab;
	MC2File hsprtab = MC2File::data_hsprd00_tab;
	if (D41A0_BYTESTR_0.str_2FECE.byte_level_type == MC2LevelType::Day)
	{
		sprintf(xadatamsprd00dat.path, "%s", file_handling->getFilePath(MC2File::data_msprd00_dat).c_str());
		sprintf(xadatamsprd00tab.path, "%s", file_handling->getFilePath(MC2File::data_msprd00_tab).c_str());
		sprintf(xadatahsprd00dat.path, "%s", file_handling->getFilePath(MC2File::data_hsprd00_dat).c_str());
		sprintf(xadatahsprd00tab.path, "%s", file_handling->getFilePath(MC2File::data_hsprd00_tab).c_str());
	}
	else if (D41A0_BYTESTR_0.str_2FECE.byte_level_type == MC2LevelType::Night)
	{
		sprintf(xadatamsprd00dat.path, "%s", file_handling->getFilePath(MC2File::data_msprn00_dat).c_str());
		sprintf(xadatamsprd00tab.path, "%s", file_handling->getFilePath(MC2File::data_msprn00_tab).c_str());
		sprintf(xadatahsprd00dat.path, "%s", file_handling->getFilePath(MC2File::data_hsprn00_dat).c_str());
		sprintf(xadatahsprd00tab.path, "%s", file_handling->getFilePath(MC2File::data_hsprn00_tab).c_str());
		msprtab = MC2File::data_msprn00_tab;
		hsprtab = MC2File::data_hsprn00_tab;
	}
	else if (D41A0_BYTESTR_0.str_2FECE.byte_level_type == MC2LevelType::Cave)
	{
		sprintf(xadatamsprd00dat.path, "%s", file_handling->getFilePath(MC2File::data_msprc00_dat).c_str());
		sprintf(xadatamsprd00tab.path, "%s", file_handling->getFilePath(MC2File::data_msprc00_tab).c_str());
		sprintf(xadatahsprd00dat.path, "%s", file_handling->getFilePath(MC2File::data_hsprc00_dat).c_str());
		sprintf(xadatahsprd00tab.path, "%s", file_handling->getFilePath(MC2File::data_hsprc00_tab).c_str());
		msprtab = MC2File::data_msprc00_tab;
		hsprtab = MC2File::data_hsprc00_tab;
	}

	memcpy(pstr[psxadatamsprd00dat].path, xadatamsprd00dat.path, strlen(xadatamsprd00dat.path));
	memcpy(pstr[psxadatamsprd00tab].path, xadatamsprd00tab.path, strlen(xadatamsprd00tab.path));
	memcpy(pstr[psxadatahsprd00dat].path, xadatahsprd00dat.path, strlen(xadatahsprd00dat.path));
	memcpy(pstr[psxadatahsprd00tab].path, xadatahsprd00tab.path, strlen(xadatahsprd00tab.path));

	// FIXME: replace BEGIN/END BUFFER markers
	MSPRD00TAB_BEGIN_BUFFER = const_cast<Bit8u*>(file_handling->getFileData(msprtab).data());
	MSPRD00TAB_END_BUFFER = const_cast<Bit8u*>(file_handling->getFileData(msprtab).data()) + file_handling->getFileData(msprtab).size();
	HSPRD00TAB_BEGIN_BUFFER = const_cast<Bit8u*>(file_handling->getFileData(hsprtab).data());
	HSPRD00TAB_END_BUFFER = const_cast<Bit8u*>(file_handling->getFileData(hsprtab).data()) + file_handling->getFileData(msprtab).size();

	if (x_WORD_180660_VGA_type_resolution == 1)
	{
		//sub_84250_load_file_array(psxadatamsprd00dat);

		filearray_2aa18c[filearrayindex_MSPRD00DATTAB] = { &MSPRD00TAB_BEGIN_BUFFER,&MSPRD00TAB_END_BUFFER,&MSPRD00DAT_BEGIN_BUFFER,&posistruct5 };

		if (pre_x_DWORD_E9C3C)
			sub_83E80_freemem4(pre_x_DWORD_E9C3C);
		pre_x_DWORD_E9C3C = (Bit8u*)malloc(3000000);
		x_DWORD_E9C3C = &pre_x_DWORD_E9C3C[200000];
		help_VGA_type_resolution = 1;
	}
	else
	{
		//sub_84250_load_file_array(psxadatahsprd00dat);//tady se to nahraje

		filearray_2aa18c[filearrayindex_MSPRD00DATTAB] = { &HSPRD00TAB_BEGIN_BUFFER,&HSPRD00TAB_END_BUFFER,&HSPRD00DAT_BEGIN_BUFFER,&posistruct5 };

		if (pre_x_DWORD_E9C3C)
			sub_83E80_freemem4(pre_x_DWORD_E9C3C);
		pre_x_DWORD_E9C3C = (Bit8u*)malloc(3000000);
		x_DWORD_E9C3C = &pre_x_DWORD_E9C3C[200000];
		sub_6EB90(&filearray_2aa18c[filearrayindex_HFONT3DATTAB]);//2aa1d4
		help_VGA_type_resolution = 8;
	}
	sub_6EB90(&filearray_2aa18c[filearrayindex_MSPRD00DATTAB]);//2aa1bc
	sub_46F80();//ok
}

int debug_first_run = 0;
int debugcounter_228320 = 0;

//----- (00047320) --------------------------------------------------------
void sub_47320_in_game_loop(signed int a1)//228320
{
	Bit32u v1; // ebx
	int v2; // esi
	unsigned int v3; // esi

	debugnextlevel++;

	x_D41A0_BYTEARRAY_4_struct.byteindex_51 = 0;
	v1 = 0;
	D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.word[1] = 0;
	while (1)
	{
		//debug
		#ifdef RIGHT_BUTTON
		if (debugafterload)
		{
			if (debug_first_run % 10 == 8)
			{
				if (!x_WORD_18074A_mouse_right2_button && !x_WORD_180744_mouse_right_button)//first cycle after press and ...
				{
					x_WORD_180746_mouse_left_button = 1;
				}
				x_WORD_18074C_mouse_left2_button = 1;
			}
			debug_first_run++;
		}
		#endif

		if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x004_2BE0_11234 || D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 8)
			break;
		v2 = x_DWORD_17DB54_game_turn2;//0xded

		sub_47560_draw_and_events_in_game(/*2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0, 2124 * D41A0_BYTESTR_0.word_0xc,*/ v1, a1, x_DWORD_17DB54_game_turn2);
		v3 = v2 + 5;
		/*while (v3 > x_DWORD_17DB54_game_turn2)
			;*/ // timer only for origin sound 
		if (v1 < 2)
		{
			sub_8E020_sound_proc14_stopsequence();
			if (v1 == 1)
				sub_8E160_sound_proc15_startsequence(D41A0_BYTESTR_0.dword_0x235, 0x7Fu);
			v1++;
		}
	}
	//return (int)result;
}

//----- (000473B0) --------------------------------------------------------
void sub_473B0()//2283b0
{
	//int result; // eax

	x_DWORD_EA3B4 = 0;
	//result = (uint8_t)x_BYTE_1806E4;
	x_WORD_F42AE = x_BYTE_1806E4;
	x_WORD_F42A8 = 64;
	//return result;
}

//----- (000473E0) --------------------------------------------------------
int sub_473E0()//2283e0
{
	char v0; // bl
	int16_t v1; // ax

	v0 = 0;
	if (x_DWORD_EA3B4)
		return x_DWORD_EA3B4;
	if (x_WORD_F42A8)
		--x_WORD_F42A8;
	if (!x_WORD_18074C_mouse_left2_button && !x_WORD_18074A_mouse_right2_button)
	{
		if (x_BYTE_180664[0x2a] || x_BYTE_180664[0x36])
		{
			if (x_BYTE_1806E4 < 0x36u)
			{
				if (x_BYTE_1806E4 != 0x2a)
					goto LABEL_24;
			}
			else if (x_BYTE_1806E4 > 0x36u
				&& (x_BYTE_1806E4 < 0x3Bu || x_BYTE_1806E4 > 0x3Fu && x_BYTE_1806E4 != 66))
			{
				goto LABEL_24;
			}
		}
		else if (x_BYTE_1806E4 < 0x3Bu)
		{
			if (x_BYTE_1806E4 != 19)
				goto LABEL_24;
		}
		else if (x_BYTE_1806E4 > 0x3Bu
			&& (x_BYTE_1806E4 < 0x3Fu || x_BYTE_1806E4 > 0x41u))
		{
		LABEL_24:
			HIBYTE(v1) = HIBYTE(x_WORD_F42A8);
			if (x_WORD_F42A8)
			{
				x_WORD_F42AE = x_BYTE_1806E4;
			}
			else
			{
				LOBYTE(v1) = x_BYTE_1806E4;
				if (v1 != x_WORD_F42AE)
					v0 = 1;
			}
			goto LABEL_28;
		}
		sub_473B0();
		goto LABEL_24;
	}
	v0 = 1;
LABEL_28:
	if (v0)
		x_DWORD_EA3B4 = 1;
	return x_DWORD_EA3B4;
}

int debugcountersave_47560 = 0;


void intervalsave(int index) {
	char outname[512];
	sprintf(outname,"-%d", index%5000);
	sub_55080(0, x_D41A0_BYTEARRAY_4_struct.levelnumber_43w, outname);
};


#ifdef TEST_BIG_SPRITES
const int max_sprites = 600;
const int max_sprites_frames = 30;
typedef struct {
	int count = -1;
	Bit8u* actdata;
	Bit8u* frames[max_sprites_frames];
} type_BIG_SPRITES_BUFFER;


type_BIG_SPRITES_BUFFER BIG_SPRITES_BUFFERx[max_sprites];
bool big_sprites_inited = false;
#endif
//----- (00047560) --------------------------------------------------------
void sub_47560_draw_and_events_in_game(/*Bit8u* a1, int a2, */Bit32u a3, signed int a4, int16_t a5)//228560
{
	Bit8u speed; // al
	signed int j; // ebx
	signed int i; // ebx
	//int v8; // eax

	sub_47760(/*a1, a2, (int)a3*/a3);//nothing draw
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1))
	{
		/*
#ifdef TEST_BIG_SPRITES
		animstate = 1 - animstate;
		for (int ianim = 0; ianim < 0x1F8u; ianim++)
		{
			//Bit8u* index2 = 10 * ianim + TMAPS00TAB_BEGIN_BUFFER;
			//Bit8u* index3 = sub_71E70(x_DWORD_E9C28_str, (uint16_t)(4 * ((unsigned int)(*(x_DWORD*)index2 + 13) >> 2)), ianim);

			//*(Bit8u **)index3 = BIG_SPRITES_BUFFER[animstate][ianim];
			if (x_DWORD_F66F0x[ianim] != NULL)
			{
				Bit8u* baseadr = *(Bit8u * *)x_DWORD_F66F0x[ianim];
				if (baseadr != NULL)
				{
					int animwidth = *(Bit16u*)(baseadr + 2);
					int animheight = *(Bit16u*)(baseadr + 4);
					if ((animwidth > 0) && (animheight > 0) && (animwidth < 1000) && (animheight < 1000))
						if (animstate == 0)
							memcpy(baseadr + 6, baseadr + 6 + (animwidth * animheight), (animwidth * animheight));
						else
							memcpy(baseadr + 6, baseadr + 6 + (animwidth * animheight) * 2, (animwidth * animheight));
				}
			}
		}
#else
*/
		sub_715B0();//nothing draw //animate sprites
	}
	sub_89D10_analyze_keys();//get keys

	//debug - ctrl
	/*
	if(debugcounter11>=1)
		LOBYTE(unk_18058Cstr.x_DWORD_18059C) = unk_18058Cstr.x_DWORD_18059C | 0x10;
	*/
	//debug

	//adress 22857e
	/*Bit8u origbyte20 = 0;
	Bit8u remakebyte20 = 0;
	int comp20 = compare_with_sequence_D41A0((char*)"0022857E", x_D41A0_BYTEARRAY_0, 0x356038, debugcounter11, 0x36e16, &origbyte20, &remakebyte20);
	*/

#ifdef AUTO_CHANGE_RES
	if (res640x480)
	{
		if (resindex_begin == 1)
		{
			x_BYTE_1806E4 = 0x13;
			resindex_begin++;
		}
		else
			if (resindex_begin == 2)
			{
				x_BYTE_1806E4 = 0;
				resindex_begin++;
			}
			else
				if (resindex_begin < 1)
					resindex_begin++;
	}
#endif AUTO_CHANGE_RES
	

	sub_17A00_mouse_and_keys_events(/*(Bit8u*)a3,*/ a4, a5);//fix it//nothing draw


	#ifdef INTERVAL_SAVE
	//save in interval
	int interval = 1;
	if (debugcountersave_47560 % interval == 0)
		intervalsave(debugcountersave_47560 / interval);	
	//save in interval
	#endif INTERVAL_SAVE
	debugcountersave_47560++;//only for debug

	//adress 228583
	sub_51BB0_game_events(/*(Bit8u*)a4*/);//nothing draw

	sub_848A0();//nothing draw

	//adress 22858d

	speed = x_D41A0_BYTEARRAY_4_struct.byteindex_178;
	if (speed == 0)
	{
		if (!speed)
			sub_57730();
	}
	else if (speed == 1)
	{
		for (i = 0; i < 4; i++)
			sub_57730();
	}
	else if (speed == 2)
	{
		for (j = 0; j < 8; j++)
			sub_57730();
	}
	//adress 2285d1
	/*Bit8u origbyte22 = 0;
	Bit8u remakebyte22 = 0;
	int comp22 = compare_with_sequence_D41A0((char*)"002285d1", x_D41A0_BYTEARRAY_0, 0x356038, debugcounter11, 0x36e16, &origbyte22, &remakebyte22);
	*/

	sub_84B80();//prepare lightting
	sub_58F00_game_objectives();//nothing draw
	sub_59820();//nothing draw
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1))
		sub_57570();//nothing draw
	sub_575C0();//nothing draw
	sub_6E150();//nothing draw
	/*if (debugcountersave_47560 > 1)
	{
		myprintf("");
	}*/
	sub_2BE30_draw_game_frame();
	//adress 2285ff
	//if (debugcountersave_47560 > -1) { debugtestscreen(); /*exit(0);*/ }

	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	//adress 2285e0
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
		sub_871F0();
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);

		for (int iii = 1; iii < 0x3E9; iii++)
			if (x_DWORD_EA3E4[iii]->word_0x16_22==iii)
				allert_error();

#ifdef DETECT_DWORD_A
		for (int jx = 1; jx < 50; jx++)
		{
			if (D41A0_BYTESTR_0.str_0x3664C[jx].byte_0)
			if (D41A0_BYTESTR_0.str_0x3664C[jx].dword_A < D41A0_BYTESTR_0.struct_0x6E8E || D41A0_BYTESTR_0.str_0x3664C[jx].dword_A >= &D41A0_BYTESTR_0.struct_0x6E8E[0x3e8])
				allert_error();
		}
#endif DETECT_DWORD_A

	if (debugafterload)
	{
		debugcounter_47560++;
	}

	x_D41A0_BYTEARRAY_4_struct.byteindex_196 = x_DWORD_17DB54_game_turn2 - x_D41A0_BYTEARRAY_4_struct.byteindex_196;
	sub_6FEC0();
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	//v8 = (int)x_D41A0_BYTEARRAY_4;
	x_D41A0_BYTEARRAY_4_struct.byteindex_196 = x_DWORD_17DB54_game_turn2;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_51 >= 3u)
		sub_40F80();
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
}

//----- (00047650) --------------------------------------------------------
void sub_47650(int a1/*, int a2*/)//228650
{
	uint8_t v2; // al
	signed int v3; // esi
	int v4; // edx
	signed int v5; // ebx
	int v6; // ecx
	int v7; // eax
	//int result; // eax

	int v8=0;

	qmemcpy((void *)*xadatapald0dat2.var28_begin_buffer, (void *)x_DWORD_EA3B8, 0x300u);
	v2 = D41A0_BYTESTR_0.str_2FECE.byte_level_type;
	if (v2==0)
		v8 = x_D41A0_BYTEARRAY_4_struct.byte_brightness_11;
	else if (v2 == 1)
	{
		v8 = x_D41A0_BYTEARRAY_4_struct.byte_brightness_12;
	}
	else if (v2 == 2)
	{
		v8 = x_D41A0_BYTEARRAY_4_struct.byte_brightness_13;
	}
	v3 = 0;
	v4 = 6 * v8;
	while (v3 < 256)
	{
		v5 = 0;
		while (v5 < 3)
		{
			v6 = v4 + *(*xadatapald0dat2.var28_begin_buffer + v5 + 3 * v3);
			if (v6 < 0)
				v6 = 0;
			if (v6 > 63)
				LOBYTE(v6) = 63;
			v7 = v5++ + 3 * v3;
			*(x_BYTE *)(*xadatapald0dat2.var28_begin_buffer + v7) = v6;
		}
		v3++;
	}
	//result = (int)x_D41A0_BYTEARRAY_4;
	x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 1;
	//return result;
}

//----- (00047760) --------------------------------------------------------
void sub_47760(/*int a1,*/Bit32u user/* int a2, int a3*/)//228760
{
	//x_BYTE *v3; // eax
	//uint8_t v4; // dl
	Bit8u* v5; // ST00_4
	//int v6; // edx
	uint8_t v7; // al
	char *v8; // ST00_4
	char *v9; // ST00_4
	char *v10; // ST00_4
	signed int v11; // eax
	int v12; // edx
	signed int v13; // eax
	//int v14; // ebx
	//int v15; // ebx
	int v16; // ebx
	signed int v17; // edx
	Bit8u* v18; // ebx
	int v19; // eax
	int v20; // ecx
	signed int v21; // eax
	int v22; // ebx
	signed int v23; // ebx
	int v24; // ecx
	int64_t v25; // rtt
	char v26; // al
	signed int v27; // eax
	int v28; // ebx

	//v3 = (x_BYTE *)x_D41A0_BYTEARRAY_4;
	//v4 = x_D41A0_BYTEARRAY_4_struct.byteindex_51;
	x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 0;
	switch (x_D41A0_BYTEARRAY_4_struct.byteindex_51)
	{
		case 0:
		case 1:
		//if (x_D41A0_BYTEARRAY_4_struct.byteindex_51 < 2u)
		{
			sub_480A0_set_clear_pallette(/*(int)v3, v4, user*/);
			//v3 = (x_BYTE *)x_D41A0_BYTEARRAY_4;
			x_D41A0_BYTEARRAY_4_struct.byteindex_51++;
			break;
		}
		case 2:
		//else if (x_D41A0_BYTEARRAY_4_struct.byteindex_51 <= 2u)
		{
			x_D41A0_BYTEARRAY_4_struct.byteindex_51++;
			v5 = *xadatapald0dat2.var28_begin_buffer;
			x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 1;
			memset((void*)v5, 0, 768);
			sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);
			//v6 = (int)x_D41A0_BYTEARRAY_0;
			v7 = D41A0_BYTESTR_0.str_2FECE.byte_level_type;
			if (v7 < 1u)
			{
				if (!v7)
				{
					sub_53E60_readfile_and_decompress("data/pald-0.dat", xadatapald0dat2.var28_begin_buffer);
					sub_53E60_readfile_and_decompress("data/clrd-0.dat", xadataclrd0dat.var28_begin_buffer);
				}
			}
			else if (v7 <= 1u)
			{
				if (D41A0_BYTESTR_0.str_2FECE.byte_0x2FED2 & 2)
					sub_53E60_readfile_and_decompress("data/palf-0.dat", xadatapald0dat2.var28_begin_buffer);
				else
					sub_53E60_readfile_and_decompress("data/paln-0.dat", xadatapald0dat2.var28_begin_buffer);
				sub_53E60_readfile_and_decompress("data/clrn-0.dat", xadataclrd0dat.var28_begin_buffer);
			}
			else if (v7 == 2)
			{
				sub_53E60_readfile_and_decompress("data/palc-0.dat", xadatapald0dat2.var28_begin_buffer);
				sub_53E60_readfile_and_decompress("data/clrc-0.dat", xadataclrd0dat.var28_begin_buffer);
			}
			qmemcpy((void *)x_DWORD_EA3B8, (void *)*xadatapald0dat2.var28_begin_buffer, 0x300u);
			sub_47650(768/*, v6*/);
			sub_90D27();
			x_BYTE_EB3A8 = (uint8_t)**xadataclrd0dat.var28_begin_buffer;
			/*LOBYTE(v3) = */sub_57640();
			break;
		}
		case 3:
		{
			switch (x_D41A0_BYTEARRAY_4_struct.byteindex_180)
			{
			case 1:
				v8 = (char *)*xadatapald0dat2.var28_begin_buffer;
				x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 1;
				if (sub_90B27_VGA_pal_fadein_fadeout((Bit8u*)v8, 4u, 1) == 4)
				{
					x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 0;
				}
				break;
			case 2:
				v11 = 1;
				while (v11 < 256)
				{
					x_DWORD_F42A0 = *(3 * v11 + *xadatapald0dat2.var28_begin_buffer) + 40;
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					x_BYTE_F3FA0ar[3 * v11] = x_DWORD_F42A0;
					x_DWORD_F42A0 = *(3 * v11 + *xadatapald0dat2.var28_begin_buffer + 1);
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					x_BYTE_F3FA0ar[0x01+3 * v11] = x_DWORD_F42A0;
					x_DWORD_F42A0 = *(3 * v11 + *xadatapald0dat2.var28_begin_buffer + 2);
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					v12 = 3 * v11++;
					x_BYTE_F3FA0ar[0x02+v12] = x_DWORD_F42A0;
				}
				sub_90D27();
				sub_41A90_VGA_pallette_install((uint8_t *)x_BYTE_F3FA0ar);
				//v3 = (x_BYTE *)x_D41A0_BYTEARRAY_4;
				x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 1;
				x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 1;
				break;
			case 3:
				v13 = 1;
				while (v13 < 256)
				{
					//v14 = x_D41A0_BYTEARRAY_4_struct.byteindex_184;
					x_DWORD_F42A0 = *(3 * v13 + *xadatapald0dat2.var28_begin_buffer);
					x_DWORD_F42A0 += -56 * x_D41A0_BYTEARRAY_4_struct.byteindex_184w >> 8;
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					x_BYTE_F3FA0ar[3 * v13] = x_DWORD_F42A0;
					x_DWORD_F42A0 = *(3 * v13 + *xadatapald0dat2.var28_begin_buffer + 1);
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					x_BYTE_F3FA0ar[0x01+3 * v13] = x_DWORD_F42A0;
					//v15 = x_D41A0_BYTEARRAY_4_struct.byteindex_184w;
					x_DWORD_F42A0 = *(3 * v13 + *xadatapald0dat2.var28_begin_buffer + 2);
					x_DWORD_F42A0 += -56 * x_D41A0_BYTEARRAY_4_struct.byteindex_184w >> 8;
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					v16 = 3 * v13++;
					x_BYTE_F3FA0ar[0x02+v16] = x_DWORD_F42A0;
				}
				sub_90D27();
				sub_41A90_VGA_pallette_install((uint8_t *)x_BYTE_F3FA0ar);
				//v3 = (x_BYTE *)x_D41A0_BYTEARRAY_4;
				x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 1;
				x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 1;
				break;
			case 4:
				v17 = 1;
				while (v17 < 256)
				{
					v18 = *xadatapald0dat2.var28_begin_buffer;
					v19 = 3 * v17;
					v20 = *(*xadatapald0dat2.var28_begin_buffer + 3 * v17 + 2);
					x_DWORD_F42A0 = 255;
					x_BYTE_F3FA0ar[v19] = *(x_BYTE *)(*xadatapald0dat2.var28_begin_buffer + 3 * v17);
					x_BYTE_F3FA0ar[0x01+v19] = *(x_BYTE *)(v18 + 3 * v17++ + 1);
					x_BYTE_F3FA0ar[0x02+v19] = 63;
				}
				sub_90D27();
				sub_41A90_VGA_pallette_install((uint8_t *)x_BYTE_F3FA0ar);
				//v3 = (x_BYTE *)x_D41A0_BYTEARRAY_4;
				x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 1;
				x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 1;
				break;
			case 5:
				memset((void*)*xadatapald0dat2.var28_begin_buffer, 0, 768);
				//v3 = (x_BYTE *)x_D41A0_BYTEARRAY_4;
				x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 10;
				x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 1;
				break;
			case 6:
				v21 = 1;
				while (v21 < 256)
				{
					x_DWORD_F42A0 = *(3 * v21 + *xadatapald0dat2.var28_begin_buffer + 2) + 48;
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					x_BYTE_F3FA0ar[3 * v21] = x_DWORD_F42A0;
					x_DWORD_F42A0 = *(3 * v21 + *xadatapald0dat2.var28_begin_buffer + 1) + 32;
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					x_BYTE_F3FA0ar[0x01+3 * v21] = x_DWORD_F42A0;
					x_DWORD_F42A0 = *(3 * v21 + *xadatapald0dat2.var28_begin_buffer + 2) + 32;
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					v22 = 3 * v21++;
					x_BYTE_F3FA0ar[0x02+v22] = x_DWORD_F42A0;
				}
				sub_90D27();
				sub_41A90_VGA_pallette_install((uint8_t *)x_BYTE_F3FA0ar);
				//v3 = (x_BYTE *)x_D41A0_BYTEARRAY_4;
				x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 1;
				x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 1;
				break;
			case 7:
				v23 = 1;
				while (v23 < 256)
				{
					v24 = 3 * v23;
					v25 = *(3 * v23 + *xadatapald0dat2.var28_begin_buffer)
						+ *(3 * v23 + *xadatapald0dat2.var28_begin_buffer + 1)
						+ *(3 * v23 + *xadatapald0dat2.var28_begin_buffer + 2);
					x_DWORD_F42A0 = (*(3 * v23 + *xadatapald0dat2.var28_begin_buffer)
						+ *(3 * v23 + *xadatapald0dat2.var28_begin_buffer + 1)
						+ *(3 * v23 + *xadatapald0dat2.var28_begin_buffer + 2))
						/ 3;
					v26 = v25 / 3;
					x_BYTE_F3FA0ar[v24] = v26;
					x_BYTE_F3FA0ar[0x01+v24] = v26;
					v23++;
					x_BYTE_F3FA0ar[0x02+v24] = v26;
				}
				sub_90D27();
				sub_41A90_VGA_pallette_install((uint8_t *)x_BYTE_F3FA0ar);
				//v3 = (x_BYTE *)x_D41A0_BYTEARRAY_4;
				x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 1;
				x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 1;
				break;
			case 8:
				v27 = 1;
				while (v27 < 256)
				{
					x_DWORD_F42A0 = *(3 * v27 + *xadatapald0dat2.var28_begin_buffer) + 48;
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					x_BYTE_F3FA0ar[3 * v27] = x_DWORD_F42A0;
					x_DWORD_F42A0 = *(3 * v27 + *xadatapald0dat2.var28_begin_buffer + 1) + 48;
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					x_BYTE_F3FA0ar[0x01+3 * v27] = x_DWORD_F42A0;
					x_DWORD_F42A0 = *(3 * v27 + *xadatapald0dat2.var28_begin_buffer + 2) + 48;
					if (x_DWORD_F42A0 < 0)
						x_DWORD_F42A0 = 0;
					if (x_DWORD_F42A0 > 63)
						x_DWORD_F42A0 = 63;
					v28 = 3 * v27++;
					x_BYTE_F3FA0ar[0x02+v28] = x_DWORD_F42A0;
				}
				sub_90D27();
				sub_41A90_VGA_pallette_install((uint8_t *)x_BYTE_F3FA0ar);
				x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 9;
				x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 1;
				break;
			case 9:
				v9 = (char *)*xadatapald0dat2.var28_begin_buffer;
				x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 1;
				if (sub_90B27_VGA_pal_fadein_fadeout((Bit8u*)v9, 0x10u, 1) == 16)
				{
					x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 0;
				}
				break;
			case 0xA:
				v10 = (char *)*xadatapald0dat2.var28_begin_buffer;
				x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 1;
				if (sub_90B27_VGA_pal_fadein_fadeout((Bit8u*)v10, 0x1Cu, 1) == 28)
				{
					x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 0;
				}
				break;
			default:
				return;
			}
			break;
		}
	}
	//return (char)v3;
}

//----- (00047FC0) --------------------------------------------------------
void sub_47FC0_load_screen(char a1)//228fc0
{
	//int result; // eax

	sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);

	//debug
	sub_90B27_VGA_pal_fadein_fadeout((Bit8u*)*xadatapald0dat2.var28_begin_buffer, 0x20u, 0);
	//debug

	if (a1)
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_smatitl2_dat).c_str(), &x_DWORD_E9C38_smalltit);
	else
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_smatitle_dat).c_str(), &x_DWORD_E9C38_smalltit);
	sub_85B20_copy_bitmap((x_BYTE *)x_DWORD_E9C38_smalltit, (x_WORD *)x_DWORD_180628b_screen_buffer, 0x190u);
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_90478_VGA_Blit320();
	else
		sub_75200_VGA_Blit640(480);
	if (a1)
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_smatitl2_pal).c_str(), xadatapald0dat2.var28_begin_buffer);
	else
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_smatitle_pal).c_str(), xadatapald0dat2.var28_begin_buffer);
	sub_90B27_VGA_pal_fadein_fadeout((Bit8u*)*xadatapald0dat2.var28_begin_buffer, 0x20u, 0);
	//result = (int)x_D41A0_BYTEARRAY_0;
	/*D41A0_BYTESTR_0.dword_0x23a = 1;//0x23a
	*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 574) = 0;//0x23e
	*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 578) = 0;//0x242*/
	D41A0_BYTESTR_0.dword_0x23a = 1;
	D41A0_BYTESTR_0.dword_0x23e = 0;
	D41A0_BYTESTR_0.dword_0x242 = 0;
	//return result;
}

//----- (000480A0) --------------------------------------------------------
void sub_480A0_set_clear_pallette(/*int a1, int a2, int a3*/)//2290a0
{
	long v3; // ebx
	unsigned int v4; // eax
	int v5; // edx

	// fix if begin
	v4 = 0;
	v5 = 0;
	// end

	v3 = j___clock();
	sub_98790(0x1F4u, 0);
	do
		v4 = j___clock() - v3;
	while (v4 < 0x32);
	sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);
	D41A0_BYTESTR_0.dword_0x23a = 0;
 	sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_pald0_dat).c_str(), xadatapald0dat2.var28_begin_buffer);
	sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_clrd0_dat).c_str(), xadataclrd0dat.var28_begin_buffer);
	sub_48120();
}

//----- (00048120) --------------------------------------------------------
void sub_48120()//229120
{
	uint8_t result; // al
	result = D41A0_BYTESTR_0.str_2FECE.byte_level_type;
	if (result >= 1u)
	{
		if (result <= 1u)//1
		{
			x_BYTE_E88E0x[0x0] = 0xA4;
			x_BYTE_E88E0x[0x1] = 0xAA;
			x_BYTE_E88E0x[0x3] = 0x77;
			x_BYTE_E88E0x[0x2] = 0x7B;
			x_BYTE_E88E0x[0x4] = 0x7D;
			x_BYTE_E88E0x[0x5] = 0x7B;
			x_BYTE_E88E0x[0x7] = 0xC6;
			x_BYTE_E88E0x[0x8] = 0x7B;
			x_BYTE_E88E0x[0x6] = 0xC0;
			x_BYTE_E88E0x[0xc] = 0x97;
			x_BYTE_E88E0x[0xf] = 0xD7;
			x_BYTE_E88E0x[0xb] = 0x7B;
			x_BYTE_E88E0x[0x10] = 0xDD;
			x_BYTE_E88E0x[0x9] = 0x58;
		}
		else
		{
			if (result != 2)
				return;
			x_BYTE_E88E0x[0x0] = 0xE0;
			x_BYTE_E88E0x[0x1] = 0x58;
			x_BYTE_E88E0x[0x3] = 0x77;
			x_BYTE_E88E0x[0x2] = 0x7B;
			x_BYTE_E88E0x[0x4] = 0x7D;
			x_BYTE_E88E0x[0x5] = 0x7B;
			x_BYTE_E88E0x[0x7] = 0xC6;
			x_BYTE_E88E0x[0x8] = 0x7B;
			x_BYTE_E88E0x[0x9] = 0x58;
			x_BYTE_E88E0x[0x6] = 0xC0;
			x_BYTE_E88E0x[0xc] = 0x97;
			x_BYTE_E88E0x[0xf] = 0xD7;
			x_BYTE_E88E0x[0xb] = 0x7B;
			x_BYTE_E88E0x[0x10] = 0xDD;
		}
		x_BYTE_E88E0x[0x13] = 0x62;
		x_BYTE_E88E0x[0xa] = 0x5D;
		x_BYTE_E88E0x[0x11] = 0x7B;
		x_BYTE_E88E0x[0xd] = 0x9D;
		x_BYTE_E88E0x[0xe] = 0x7B;
		x_BYTE_E88E0x[0x12] = 0x69;
		result = 0x7B;
		x_BYTE_E88E0x[0x14] = 0x7B;
		x_BYTE_E88E0x[0x15] = 0xC9;
		x_BYTE_E88E0x[0x17] = 0x7B;
		x_BYTE_E88E0x[0x16] = 0xCF;
		return;
	}
	if (!result)
	{
		x_BYTE_E88E0x[0x0] = 0x60;
		x_BYTE_E88E0x[0x1] = 0x64;
		x_BYTE_E88E0x[0x6] = 0x1C;
		x_BYTE_E88E0x[0x2] = 0x7B;
		x_BYTE_E88E0x[0x3] = 0x7B;
		x_BYTE_E88E0x[0x5] = 0x7B;
		x_BYTE_E88E0x[0x7] = 0x18;
		x_BYTE_E88E0x[0x8] = 0x7B;
		x_BYTE_E88E0x[0xd] = 0x97;
		result = 0xDB;
		x_BYTE_E88E0x[0x4] = 0x77;
		x_BYTE_E88E0x[0x9] = 0x5B;
		x_BYTE_E88E0x[0xb] = 0x7B;
		x_BYTE_E88E0x[0xf] = 0xDB;
		x_BYTE_E88E0x[0x15] = 0x3D;
		x_BYTE_E88E0x[0xa] = 0x57;
		x_BYTE_E88E0x[0xc] = 0x9A;
		x_BYTE_E88E0x[0xe] = 0x7B;
		x_BYTE_E88E0x[0x10] = 0xD8;
		x_BYTE_E88E0x[0x11] = 0x7B;
		x_BYTE_E88E0x[0x16] = 0x3A;
		x_BYTE_E88E0x[0x12] = 0x76;
		x_BYTE_E88E0x[0x13] = 0xA0;
		x_BYTE_E88E0x[0x17] = 0x7B;
		x_BYTE_E88E0x[0x14] = 0x7B;
	}
	//return result;
}


//----- (00048370) --------------------------------------------------------
int sub_48370(int16_t a1, int16_t a2, int16_t a3)//229370
{
	int result; // eax
	int v4; // ebx
	int v5; // edx

	LOWORD(result) = a2 - a1;
	v4 = (int16_t)(a2 - a1);
	v5 = a3 >> 1;
	if (v4 > v5)
		return (int16_t)(result - a3);
	if (v4 < -v5)
		LOWORD(result) = a3 + result;
	return (int16_t)result;
}

//----- (000483A0) --------------------------------------------------------
int sub_483A0(int16_t a1, int a2, char a3, char a4)//2293a0
{
	uint16_t v4; // ax
	int16_t v5; // bx
	uint16_t v6; // ax
	signed int v7; // ecx
	int result; // eax

	LOBYTE(v4) = a1;
	HIBYTE(v4) = a2;
	LOBYTE(v5) = x_BYTE_11B4E0_height[v4];
	LOBYTE(v6) = a3;
	v5 = (uint8_t)v5;
	HIBYTE(v6) = a4;
	v7 = x_BYTE_11B4E0_height[v6];
	if (v7 > (uint8_t)v5)
		LOBYTE(v5) = x_BYTE_11B4E0_height[v6];
	x_WORD_EB398ar.x = a1 << 8;
	result = a2 << 8;
	x_WORD_EB398ar.z = 32 * v5;
	x_WORD_EB398ar.y = (x_WORD)a2 << 8;
	return result;
}

//----- (00048400) --------------------------------------------------------
int sub_48400(int a1, int a2, int a3, int a4)//229400
{
	int v4; // eax
	int v5; // esi
	int v6; // ebx
	int result; // eax
	int v8; // ecx
	int v9; // eax
	int v10; // eax
	int v11; // edi
	int v12; // esi
	type_str_0x6E8E* v13x; // eax
	type_str_0x6E8E* v14x; // eax
	int v15; // ebx
	int v16; // edx
	int v17; // eax
	int v18; // edi
	int v19; // eax
	int v20; // esi
	int v21; // ecx
	type_str_0x6E8E* v22x; // eax
	int v23; // ebx
	type_str_0x6E8E* v24x; // eax
	int v25; // [esp+8h] [ebp-Ch]
	int i; // [esp+8h] [ebp-Ch]
	int v27; // [esp+Ch] [ebp-8h]
	int v28; // [esp+Ch] [ebp-8h]
	int v29; // [esp+10h] [ebp-4h]
	int v30; // [esp+10h] [ebp-4h]

	v4 = sub_48370(a1, a3, 256);
	v5 = v4;
	v6 = v4;
	result = sub_48370(a2, a4, 256);
	v8 = result;
	if (v5 || result)
	{
		if (v6 < 0)
		{
			v9 = a1;
			v6 = -v6;
			v8 = -v8;
			a1 = a3;
			a3 = v9;
			v10 = a2;
			a2 = a4;
			a4 = v10;
		}
		if (v6 <= abs(v8))
		{
			v17 = abs(v8 / 10);
			v18 = v17 + 1;
			v19 = v8 / (v17 + 1);
			v20 = v19;
			v21 = v8 - v18 * v19;
			v30 = v6 / v18;
			result = v18 * (v6 / v18);
			v28 = v21;
			for (i = v6 - result; v18; v28 = 0)
			{
				sub_483A0(a1, (uint16_t)a2, a3, a4);
				v22x = sub_4A190(&x_WORD_EB398ar, 10, 27);
				if (v20 >= 0)
				{
					v22x->byte_0x45_69 = 28;
					v23 = v20 + v28;
				}
				else
				{
					v22x->byte_0x45_69 = 27;
					v23 = -v20 - v28;
				}
				v22x->dword_0x10_16 = v23;
				sub_483A0(a1, (uint16_t)(v20 + v28 + a2), a3, a4);
				v18--;
				a2 += v20 + v28;
				v24x = sub_4A190(&x_WORD_EB398ar, 10, 27);
				v24x->byte_0x45_69 = 29;
				v24x->dword_0x10_16 = i + v30;
				result = 0;
				a1 += i + v30;
				i = 0;
			}
		}
		else
		{
			v11 = v6 / 10 + 1;
			v29 = v6 / v11;
			v12 = v8 / v11;
			result = v11 * (v8 / v11);
			v25 = v6 - v11 * (v6 / v11);
			v27 = v8 - result;
			if (v6 / 10 != -1)
			{
				do
				{
					sub_483A0(a1, (uint16_t)a2, a3, a4);
					v13x = sub_4A190(&x_WORD_EB398ar, 10, 27);
					v13x->byte_0x45_69 = 29;
					v13x->dword_0x10_16 = v25 + v29;
					a1 += v25 + v29;
					sub_483A0(a1, (uint16_t)a2, a3, a4);
					v14x = sub_4A190(&x_WORD_EB398ar, 10, 27);
					if (v12 >= 0)
					{
						v14x->byte_0x45_69 = 28;
						v15 = v12 + v27;
					}
					else
					{
						v14x->byte_0x45_69 = 27;
						v15 = -v12 - v27;
					}
					v14x->dword_0x10_16 = v15;
					v11--;
					result = v12 + v27;
					v25 = 0;
					v16 = v12 + v27 + a2;
					v27 = 0;
					a2 = v16;
				} while (v11);
			}
		}
	}
	return result;
}

//----- (00048690) --------------------------------------------------------
type_str_0x6E8E* sub_48690(Bit16s a1, Bit16s a2, Bit16s a3, Bit16s a4)//229690
{
	int v4; // eax
	int v5; // ebx
	int16_t v6; // si
	int v7; // eax
	int16_t v8; // bx
	int v9; // edi
	type_str_0x6E8E* v10x; // eax
	type_str_0x6E8E* resultx; // eax
	int v12; // [esp+0h] [ebp-14h]
	int v13; // [esp+4h] [ebp-10h]
	int16_t v14; // [esp+8h] [ebp-Ch]
	int16_t v15; // [esp+Ch] [ebp-8h]
	int v16; // [esp+10h] [ebp-4h]

	v4 = sub_48370(a1, a3, 256);
	v5 = v4;
	v13 = v4;
	v6 = 0;
	v7 = sub_48370(a2, a4, 256);
	if (v5)
	{
		v6 = -1;
		if (v5 > 0)
			v6 = 1;
	}
	v8 = 0;
	if (v7)
	{
		v8 = -1;
		if (v7 > 0)
			v8 = 1;
	}
	v16 = abs(v7);
	v9 = abs(v13);
	v12 = abs(v16 - v9);
	if (v9 <= v16)
	{
		v15 = v8;
		v14 = 0;
	}
	else
	{
		v9 = v16;
		v14 = v6;
		v15 = 0;
	}
	x_WORD_EB398ar.x = a1 << 8;
	x_WORD_EB398ar.y = a2 << 8;
	v10x = sub_4A190(&x_WORD_EB398ar, 10, 30);
	if (v10x)
	{
		v10x->dword_0x10_16 = v9;
		v10x->word_0x1C_28 = v6;
		v10x->word_0x1E_30 = v8;
	}
	x_WORD_EB398ar.x = ((x_WORD)v9 * v6 + a1) << 8;
	x_WORD_EB398ar.y = ((x_WORD)v9 * v8 + a2) << 8;
	resultx = sub_4A190(&x_WORD_EB398ar, 10, 30);
	if (resultx)
	{
		resultx->dword_0x10_16 = v12;
		resultx->word_0x1C_28 = v14;
		resultx->word_0x1E_30 = v15;
	}
	return resultx;
}

//----- (000487D0) --------------------------------------------------------
type_str_0x6E8E* sub_487D0(uint16_t a1, uint16_t a2, int16_t a3, int16_t a4, char a5)//2297d0
{
	int16_t v5; // si
	uint16_t v6; // bx
	type_str_0x6E8E* resultx; // eax
	axis_3d v8x; // [esp+0h] [ebp-10h]
	//int16_t v9; // [esp+2h] [ebp-Eh]
	//int16_t v10; // [esp+4h] [ebp-Ch]
	axis_3d v11x; // [esp+8h] [ebp-8h]
	//int16_t v12; // [esp+Ah] [ebp-6h]

	v8x.x = a1 << 8;
	v8x.y = a2 << 8;
	v8x.z = 32 * x_BYTE_11B4E0_height[256 * a2 + a1];
	v11x.x = a3 << 8;
	v11x.y = a4 << 8;
	v5 = sub_581E0_maybe_tan2(&v8x, &v11x);
	v6 = sub_58490_radix_3d_2(&v8x, &v11x);
	resultx = sub_4A190(&v8x, 10, 32);
	if (resultx)
	{
		resultx->word_0x1C_28 = v5;
		resultx->dword_0x8 = (signed int)v6 >> 8;
		resultx->byte_0x46_70 = a5;
	}
	return resultx;
}

//----- (00048880) --------------------------------------------------------
void sub_48880(uint16_t a1, uint16_t a2, int16_t a3, int16_t a4)//229880
{
	int16_t v4; // si
	uint16_t v5; // di
	type_str_0x6E8E* resultx; // eax
	//int v7; // ebx
	int v8; // ecx
	axis_3d v9x; // [esp+0h] [ebp-10h]
	//int16_t v10; // [esp+2h] [ebp-Eh]
	//int16_t v11; // [esp+4h] [ebp-Ch]
	axis_3d v12x; // [esp+8h] [ebp-8h]
	//int16_t v13; // [esp+Ah] [ebp-6h]

	v9x.x = a1 << 8;
	v9x.y = a2 << 8;
	v9x.z = 16 * x_BYTE_11B4E0_height[256 * a2 + a1];
	v12x.x = a3 << 8;
	v12x.y = a4 << 8;
	v4 = sub_581E0_maybe_tan2(&v9x, &v12x);
	v5 = sub_58490_radix_3d_2(&v9x, &v12x);
	resultx = sub_4A190(&v9x, 10, 51);
	//v7x = resultx;
	if (resultx)
	{
		v8 = resultx->word_0x82_130;
		resultx->word_0x1C_28 = v4;
		//result = (Bit8u*)(v5 / v8);
		resultx->dword_0x8 = (v5 / v8);
	}
	//return result;
}

int debugcounter_229930 = 0;
//Bit16u last_v8x = 0;
//Bit16u last_a1x = 0;
type_str_0x6E8E* sub_48930(int16_t a1, int16_t a2, int16_t a3, int16_t a4, char a5)//229930
{
	type_str_0x6E8E* result; // eax
	int16_t v6; // [esp+0h] [ebp-10h]
	int16_t v7; // [esp+2h] [ebp-Eh]
	axis_3d v8x; // [esp+8h] [ebp-8h]
	//int16_t v9; // [esp+Ah] [ebp-6h]
	//int16_t v10; // [esp+Ch] [ebp-4h]

	debugcounter_229930++;

	//fixed
	//v10=0;
	v8x.z = 0;// 0x52b0;
	//fixed
	
	v6 = a1 << 8;
	v7 = a2 << 8;
	v8x.x = a3 << 8;
	v8x.y = a4 << 8;

	//only for debugging
	/*switch (debugcounter_229930) {
	case 0x01:
	{
		last_v8x = 0x35;
		break;
	}
	case 0x04:
	{
		last_v8x = 0x00;
		break;
	}
	case 0x08:
	{
		last_v8x = 0x35;
		break;
	}
	case 0x1e:
	{
		last_v8x = 0x38;
		break;
	}
	case 0x24:
	{
		last_v8x = 0x35;
		break;
	}
	}
	v8x.z = last_v8x;*/
	/*v8x.z = 0x35;
	if ((v8x.x == 0xa500) && (v8x.y == 0x1600))
		v8x.z = 0x35;*/
	//only for debugging
	
	//result = sub_4A190(&v6, 10, 81);

	type_D4C52ar2* v3x; // eax
	//int resulty; // eax
	
	//v3 = *(int*)((char*)&dword_D4C56 + 18 * 10) + 14 * 81;
	//v3= (int)&x_DWORD_D4C52ar[*(Bit32u*)&x_DWORD_D4C52ar[4 + 18 * 10] + 81 * 14 - 0x2a5c52];
	//v3 = (int)& x_DWORD_D4C52ar[str_D4C48ar[10].dword_14 + 81 * 14 - 0x2a5c52];
	v3x = &str_D4C48ar[10].dword_14[81];
	//(str_D4C52ar[10]->dword_4)-0x2a5c52
	if (v3x->dword_10 && v3x->word_4/* *(int16_t*)(v3 + 4)*/ == 81)
	{
		axis_3d a1x;
		a1x.x = v6;
		a1x.y = v7;
		a1x.z = 0;
		//only for debugging
		/*switch (debugcounter_229930) {
		case 0x01:
		{
			last_a1x = 0x2b;
			break;		
		}
		case 0x04:
		{
			last_a1x = 0x51d4;
			break;
		}
		case 0x05:
		{
			last_a1x = 0x2b;
			break;
		}
		case 0x1b:
		{
			last_a1x = 0x38;
			break;
		}
		case 0x1e:
		{
			last_a1x = 0x35;
			break;
		}
		case 0x24:
		{
			last_a1x = 0x2b;
			break;
		}
		}
		a1x[2] = last_a1x;*/
		/*a1x[2] = 0x2b;
		if((v6==(Bit16s)0x9400)&& (v7 == (Bit16s)0x2100))a1x[2] = 0x2b;
		if ((v6 == (Bit16s)0xaf00) && (v7 == (Bit16s)0x0500))a1x[2] = 0x2b;
		if ((v6 == (Bit16s)0xd100) && (v7 == (Bit16s)0x2800))a1x[2] = 0x35;*/
		//only for debugging

		result = pre_sub_4A190_axis_3d(v3x->dword_6 /** (_DWORD*)(v3 + 6)*/, &a1x, 0); //(*(int(__cdecl * *)(int))(v3 + 6))(a1);
	}
	else
		result = 0;
	
	//result = pre_sub_4A190(v8x, (Bit16s*)& x_WORD_EB398ar, 81);

	//v8x = *(Bit32u*) & (x_DWORD_D4C52ar[(0x2a8b7a + v13 * 14 - 0x2a5c52)]);
	//v14x = pre_sub_4A190(v8x, (Bit16s*)& x_WORD_EB398ar, 1); //(*(int(**)(int))((char *)&off_D7B7A + 14 * v13))((int)x_WORD_EB398ar);
	
	if (result)
	{
		/* *(_DWORD*)(result + 154) = *(_DWORD*)&v8;
		*(_WORD*)(result + 158) = v10;
		*(_BYTE*)(result + 70) = a5;*/
		result->word_0x9A_154x = v8x;
		result->byte_0x46_70 = a5;
	}
	return result;
}

//----- (00048990) --------------------------------------------------------
int sub_48990(char a1, char a2, char a3, char a4)//229990
{
	uint16_t v4; // ax
	uint16_t v5; // dx
	unsigned int v6; // eax
	unsigned int v7; // ebx
	unsigned int v8; // ecx
	unsigned int v9; // ecx
	unsigned int v10; // ecx

	LOBYTE(v4) = a1;
	HIBYTE(v4) = a2;
	HIBYTE(v5) = a2;
	LOBYTE(v5) = a4 + a1;
	v6 = x_BYTE_11B4E0_height[v4];
	v7 = v6;
	v8 = x_BYTE_11B4E0_height[v5];
	if (v8 <= v6)
	{
		if (v8 < v6)
			v7 = x_BYTE_11B4E0_height[v5];
	}
	else
	{
		v6 = x_BYTE_11B4E0_height[v5];
	}
	HIBYTE(v5) = a3 + a2;
	v9 = x_BYTE_11B4E0_height[v5];
	if (v9 <= v6)
	{
		if (v9 < v7)
			v7 = x_BYTE_11B4E0_height[v5];
	}
	else
	{
		v6 = x_BYTE_11B4E0_height[v5];
	}
	LOBYTE(v5) = a1;
	v10 = x_BYTE_11B4E0_height[v5];
	if (v10 > v6)
		return v10 - v7;
	if (v10 < v7)
		v7 = x_BYTE_11B4E0_height[v5];
	return v6 - v7;
}

//----- (00048A20) --------------------------------------------------------
void sub_48A20(int a1, char a2, char a3, int a4, int a5, uint8_t a6)//229a20
{
	int v6; // eax
	int v7; // esi
	uaxis_2d v8x; // bx
	uaxis_2d v9x; // bx
	int v10; // eax
	int v11; // edi
	Bit8u v13; // [esp+0h] [ebp-8h]
	Bit8u v14; // [esp+1h] [ebp-7h]
	//int16_t v15; // [esp+2h] [ebp-6h]
	uaxis_2d v16x; // [esp+4h] [ebp-4h]
	uaxis_2d v17x; // [esp+4h] [ebp-4h]

	// fix if begin
	//v15 = 0;
	// end
	v6 = 0;

	v13 = a2 - a5;
	v14 = a3 - a4;
	HIWORD(v6) = v13 + (v14 << 8);//v15;//eax
	//esi=a1
	//[ebp-4]=HIWORD(v6)
	//ebx= HIWORD(v6)
	//HIBYTE(v16) = a3 - a4;
	//HIBYTE(v8) = a3 - a4;
	v16x._axis_2d.y= a3 - a4;
	v8x._axis_2d.y = a3 - a4;
	v7 = 2 * a4;
	//LOBYTE(v8) = a2 - a5 - a6;
	//LOBYTE(v16) = 2 * a5 + a2 - a5;
	v8x._axis_2d.x = a2 - a5 - a6;
	v16x._axis_2d.x = 2 * a5 + a2 - a5;
	//dh=a6
	//bl=v13
	while ((x_WORD)--v7 != -1)
	{
		LOWORD(a1) = a6;
		a1++;
		while ((x_WORD)--a1 != -1)
		{
			sub_48B90(v8x);
			sub_48B90(v16x);
			//LOBYTE(v8)++;
			//LOBYTE(v16)++;
			v8x._axis_2d.x++;
			v16x._axis_2d.x++;
		}
		//LOBYTE(v16) = 2 * a5 + v13;
		//LOBYTE(v8) = v13 - a6;
		v16x._axis_2d.x = 2 * a5 + v13;
		v8x._axis_2d.x = v13 - a6;
		//HIBYTE(v8)++;
		//HIBYTE(v16)++;
		v8x._axis_2d.y++;
		v16x._axis_2d.y++;
	}
	//LOBYTE(v9) = v13 - a6;
	//LOBYTE(v17) = v13 - a6;
	v9x._axis_2d.x = v13 - a6;
	v17x._axis_2d.x = v13 - a6;

	//HIBYTE(v9) = v14 - a6;
	//HIBYTE(v17) = 2 * a4 + v14;
	v9x._axis_2d.y = v14 - a6;
	v17x._axis_2d.y = 2 * a4 + v14;
	LOWORD(v6) = a6;
	v10 = 2 * v6;
	v11 = v10 + 2 * a5;
	while ((x_WORD)--v11 != -1)
	{
		LOWORD(v7) = a6;
		v7++;
		while ((x_WORD)--v7 != -1)
		{
			sub_48B90(v9x);
			sub_48B90(v17x);
			//HIBYTE(v9)++;
			//HIBYTE(v17)++;
			v9x._axis_2d.y++;
			v17x._axis_2d.y++;
		}
		LOBYTE(v10) = 2 * a4;
		//HIBYTE(v9) = v14 - a6;
		//LOBYTE(v9) = v9 + 1;
		v9x._axis_2d.y= v14 - a6;
		v9x._axis_2d.x++;
		BYTE1(v10) = 2 * a4 + v14;
		//HIBYTE(v17) = 2 * a4 + v14;
		//LOBYTE(v17) = v17 + 1;
		v17x._axis_2d.y = 2 * a4 + v14;
		v17x._axis_2d.x++;
	}
	//return v10;
}

//----- (00048B50) --------------------------------------------------------
void sub_48B50(uint8_t a1, char a2, int a3, int a4)//229b50
{
	int v4; // edi
	uaxis_2d v5x; // bx
	int v6; // esi
	//int16_t result; // ax

	//LOBYTE(v5) = a1;
	v5x._axis_2d.x = a1;
	v4 = a3;
	//HIBYTE(v5) = a2;
	v5x._axis_2d.y = a2;
	while ((x_WORD)--v4 != -1)
	{
		v6 = a4;
		while ((x_WORD)--v6 != -1)
		{
			/*result = */sub_48B90(v5x);
			//LOBYTE(v5) = v5 + 1;
			v5x._axis_2d.x++;
		}
		//v5 = __PAIR__(HIBYTE(v5), a1) + 256;
		v5x._axis_2d.y++;
		v5x._axis_2d.x = a1;
	}
	//return result;
}


Bit8u fix_10B4E0_terraintype(int index) {
	#ifdef FIX_sub_48B90
	if (index < 0)
		return 0;
	#endif
	return x_BYTE_10B4E0_terraintype[index];
};


int debugcounter_229b90 = 0;
//----- (00048B90) --------------------------------------------------------
void sub_48B90(uaxis_2d a1x)//229b90
{
	Bit16u i; // eax
	unsigned int v2; // ecx
	unsigned int v3; // ebx
	char v4; // dl
	char v5; // dh
	uint8_t v6; // dh
	char v7; // bl

	//LOWORD(i) = a1;
	v2 = 0;
	v3 = 0;
	if (x_BYTE_13B4E0_angle[a1x.word] & 7
		&& x_BYTE_11B4E0_height[a1x.word]
		&& (fix_10B4E0_terraintype(-0x101+ (int)a1x.word) <= 5u
			|| fix_10B4E0_terraintype(-0x101 + (int)a1x.word) > 0x22u)
		&& (fix_10B4E0_terraintype(-0x100 + (int)a1x.word) <= 5u
			|| fix_10B4E0_terraintype(-0x100 + (int)a1x.word) > 0x22u)
		&& (fix_10B4E0_terraintype(-0x1 + (int)a1x.word) <= 5u
			|| fix_10B4E0_terraintype(-0x1 + (int)a1x.word) > 0x22u)
		&& (fix_10B4E0_terraintype((int)a1x.word) <= 5u
			|| fix_10B4E0_terraintype((int)a1x.word) > 0x22u))
	{
		v4 = 3;
		for (i = a1x.word - 0x101; --v4 != -1; i += 0xfd)
		{
			v5 = 3;
			while (--v5 != -1)
			{
				if (fix_10B4E0_terraintype(i) <= 5u
					|| fix_10B4E0_terraintype(i) > 0x22u)
				{
					v3++;
					v2 += x_BYTE_11B4E0_height[i];
				}
				i++;
			}
		}
		if (v3)
		{
			//i = (uint16_t)a1x.word;
			x_BYTE_11B4E0_height[a1x.word] = v2 / v3;
			if (x_BYTE_D41B6)
			{
				v6 = x_BYTE_11B4E0_height[a1x.word];
				if (x_BYTE_14B4E0[a1x.word] > v6)
				{
					x_BYTE_13B4E0_angle[a1x.word] &= 0xF7u;
				}
				else
				{
					v7 = x_BYTE_13B4E0_angle[a1x.word] | 8;
					x_BYTE_14B4E0[a1x.word] = v6 - 1;
					x_BYTE_13B4E0_angle[a1x.word] = v7;
				}
			}
		}
	}
	//return i;
}

//----- (00048D20) --------------------------------------------------------
int16_t sub_48D20(int a1, uint16_t a2)//229d20
{
	unsigned int v2; // esi
	unsigned int v3; // ecx
	signed int v4; // eax
	int v5; // ebx
	uint8_t v6; // bl
	uint8_t v7; // dh
	char v9; // [esp+8h] [ebp-8h]
	char v10; // [esp+Ch] [ebp-4h]

	v2 = 0;
	v3 = 0;
	LOBYTE(v4) = x_BYTE_14B4E0[(uint16_t)a1];
	BYTE1(v4) = 3;
	v5 = a1 - 257;
	v9 = 3;
	while (--v9 != -1)
	{
		v10 = 3;
		while (1)
		{
			BYTE1(v4) = v10 - 1;
			v10 = BYTE1(v4);
			if (BYTE1(v4) == -1)
				break;
			v4 = abs((uint8_t)x_BYTE_14B4E0[(uint16_t)v5] - (uint8_t)x_BYTE_14B4E0[(uint16_t)a1]);
			if (v4 > a2)
			{
				v4 = (uint8_t)x_BYTE_14B4E0[(uint16_t)v5];
				++v3;
				v2 += v4;
			}
			++v5;
		}
		v5 += 253;
	}
	if (v3)
	{
		v6 = v2 / v3;
		v4 = (uint16_t)a1;
		v7 = x_BYTE_11B4E0_height[(uint16_t)a1];
		x_BYTE_14B4E0[(uint16_t)a1] = v6;
		if (v6 > v7)
		{
			x_BYTE_13B4E0_angle[(uint16_t)a1] &= 0xF7u;
		}
		else
		{
			x_BYTE_14B4E0[(uint16_t)a1] = v7 - 1;
			x_BYTE_13B4E0_angle[(uint16_t)a1] |= 8u;
		}
	}
	return v4;
}

//----- (00048DF0) --------------------------------------------------------
int16_t sub_48DF0(char a1, char a2, char a3, char a4)//229df0
{
	uint16_t v4; // ax
	uint16_t v5; // dx
	int v6; // eax
	uint16_t v7; // bx

	LOBYTE(v4) = a1;
	HIBYTE(v4) = a2;
	HIBYTE(v5) = a2;
	LOBYTE(v5) = a4 + a1;
	v6 = x_BYTE_11B4E0_height[v5] + x_BYTE_11B4E0_height[v4];
	HIBYTE(v5) = a3 + a2;
	v7 = v5;
	LOBYTE(v5) = a1;
	return (x_BYTE_11B4E0_height[v5] + (unsigned int)x_BYTE_11B4E0_height[v7] + v6) >> 2;
}

//----- (00048E60) --------------------------------------------------------
signed int sub_48E60(int16_t a1, int16_t a2, int16_t a3, uint16_t a4)//229e60
{
	// FIXME: types
	// return sub_48F20(a1, a2, a3, a4, (int)x_BYTE_11B4E0_height);
}

//----- (00048E90) --------------------------------------------------------
signed int sub_48E90(int16_t a1, int16_t a2, int16_t a3, uint16_t a4)//229e90
{
	// FIXME: types
	// return sub_48FD0(a1, a2, a3, a4, (int)x_BYTE_11B4E0_height);
}

//----- (00048EC0) --------------------------------------------------------
signed int sub_48EC0(int16_t a1, int16_t a2, int16_t a3, uint16_t a4)//229ec0
{
	// FIXME: types
	// return sub_48F20(a1, a2, a3, a4, (int)x_BYTE_14B4E0);
}

//----- (00048EF0) --------------------------------------------------------
signed int sub_48EF0(int16_t a1, int16_t a2, int16_t a3, uint16_t a4)//229ef0
{
	// FIXME: types
	// return sub_48FD0(a1, a2, a3, a4, (int)x_BYTE_14B4E0);
}

//----- (00048F20) --------------------------------------------------------
signed int sub_48F20(char a1, char a2, int16_t a3, uint16_t a4, int a5)//229f20
{
	signed int result; // eax
	uint16_t v6; // dx
	int v7; // esi
	int v8; // ebx
	signed int v9; // ebx
	int v10; // ebx
	signed int v11; // ebx

	LOBYTE(v6) = a1;
	result = 250;
	HIBYTE(v6) = a2;
	v7 = a4;
	if (a4)
	{
		do
		{
			LOBYTE(v8) = v6;
			if (result > *(uint8_t *)(a5 + v6))
				result = *(uint8_t *)(a5 + v6);
			HIBYTE(v8) = a3 + a2;
			v9 = *(uint8_t *)(a5 + (uint16_t)v8);
			if (v9 < result)
				result = v9;
			LOBYTE(v6)++;
			v7--;
		} while (v7);
		LOWORD(v7) = a3;
		if (a3)
			goto LABEL_9;
	}
	else
	{
		LOWORD(v7) = a3;
		while (v7)
		{
		LABEL_9:
			HIBYTE(v10) = HIBYTE(v6);
			if (result > *(uint8_t *)(a5 + v6))
				result = *(uint8_t *)(a5 + v6);
			LOBYTE(v10) = v6 - a4;
			v11 = *(uint8_t *)(a5 + (uint16_t)v10);
			if (v11 < result)
				result = v11;
			HIBYTE(v6)++;
			v7--;
		}
	}
	return result;
}

//----- (00048FD0) --------------------------------------------------------
signed int sub_48FD0(char a1, char a2, int16_t a3, uint16_t a4, int a5)//229fd0
{
	signed int result; // eax
	uint16_t v6; // dx
	int v7; // esi
	int v8; // ebx
	signed int v9; // ebx
	int v10; // ebx
	signed int v11; // ebx

	LOBYTE(v6) = a1;
	result = 0;
	HIBYTE(v6) = a2;
	v7 = a4;
	if (a4)
	{
		do
		{
			LOBYTE(v8) = v6;
			if (result < *(uint8_t *)(a5 + v6))
				result = *(uint8_t *)(a5 + v6);
			BYTE1(v8) = a3 + a2;
			v9 = *(uint8_t *)(a5 + (uint16_t)v8);
			if (v9 > result)
				result = v9;
			LOBYTE(v6) = v6 + 1;
			--v7;
		} while (v7);
		LOWORD(v7) = a3;
		if (a3)
			goto LABEL_9;
	}
	else
	{
		LOWORD(v7) = a3;
		while (v7)
		{
		LABEL_9:
			BYTE1(v10) = HIBYTE(v6);
			if (result < *(uint8_t *)(a5 + v6))
				result = *(uint8_t *)(a5 + v6);
			LOBYTE(v10) = v6 - a4;
			v11 = *(uint8_t *)(a5 + (uint16_t)v10);
			if (v11 > result)
				result = v11;
			++HIBYTE(v6);
			--v7;
		}
	}
	return result;
}

//----- (00049090) --------------------------------------------------------
void sub_49090(type_str_2FECE* a1x, type_str_0x30311* a2x)//22a090
{
	type_str_0x30311* v2x; // ebx
	uint16_t v3; // si
	int16_t v4; // di
	uint16_t v5; // dx
	int16_t v6; // dx
	uint16_t v7; // cx
	unsigned int v8; // eax
	int(*v9)(); // [esp+4h] [ebp-10h]
	uint16_t v10; // [esp+8h] [ebp-Ch]

	v2x = a2x;
	v3 = a2x->str_0x30311_subtype;
	v4 = a2x->str_0x30311_type;
	v9 = 0;
	if (a2x->str_0x30311_type == 10)
	{
		if (v3 < 0x1Fu)
		{
			if (v3 >= 0x1Cu)
			{
				if (v3 <= 0x1Cu)
				{
					v9 = (int(*)())sub_48400;
				}
				else if (v3 == 29)
				{
					v9 = (int(*)())sub_48690;
				}
			}
		}
		else if (v3 <= 0x1Fu)
		{
			v9 = (int(*)())sub_487D0;
		}
		else if (v3 >= 0x32u)
		{
			if (v3 <= 0x32u)
			{
				v9 = (int(*)())sub_48880;
			}
			else if (v3 == 80)
			{
				v9 = (int(*)())sub_48930;
			}
		}
	}
	if (v9)
	{
		while (1)
		{
			v5 = v2x->word_14;
			if (!v5)
				break;
			v2x = &a1x->array_0x30311[v5];
		}
		do
		{
			if (v4 != a2x->str_0x30311_type)
				break;
			if (v3 != a2x->str_0x30311_subtype)
				break;
			v6 = v2x->word_16;
			v2x->word_12 = 0;
			if (!v6)
				break;
			v7 = v2x->axis2d_4.y;
			v10 = v2x->axis2d_4.x;
			v8 = v2x->word_18;
			v2x = &a1x->array_0x30311[v2x->word_16];
			if (v3 >= 0x1Fu)
			{
				if (v3 <= 0x1Fu)
				{
					if (v8 <= 3)
					{
						switch (v8)
						{
						case 0u:
							v8 = 2;
							break;
						case 1u:
							v8 = 6;
							break;
						case 2u:
							v8 = 16;
							break;
						case 3u:
							v8 = 32;
							break;
						}
					}
				}
				else if (v3 == 80)
				{
					v8 = v2x->word_18 & 0xF | 16 * (v8 & 0xF);
				}
			}
			((void(*)(x_DWORD, x_DWORD, x_DWORD, x_DWORD, unsigned int))v9)(
				v10,
				v7,
				v2x->axis2d_4.x,
				v2x->axis2d_4.y,
				v8);
		} while (v2x);
	}
}

//----- (00049270) --------------------------------------------------------
//01 355248 385f06

int debugcounter_22a270 = 0;

void sub_49270_generate_level_features(type_str_2FECE* a1x)//22a270
{
	//debug
//x_WORD_15B4E0_source 32c4e0
//x_BYTE_11B4E0_height 2ec4e0
//x_BYTE_13B4E0_angle 30c4e0
//x_BYTE_10B4E0_terraintype 2dc4e0
//x_BYTE_12B4E0_shading 2fc4e0
	Bit8u origbyte = 0;
	Bit8u remakebyte = 0;
	sub_49830(a1x);
	//adress 22A27D
	sub_49290(a1x, 1);
}

//----- (00049290) --------------------------------------------------------
void sub_49290(type_str_2FECE* a1x, char a2)//22a290
{
	//Bit16u* i; // ebx
	int ix;
	//Bit16u v3; // ax
	///Bit16u* j; // ebx
	int jx;
	Bit16u v5; // cx
	//Bit16u v6; // ax
	//Bit16u* k; // ebx
	int kx;
	Bit16u v8; // dx
	//Bit16u v9; // ax
	//Bit16u* l; // ebx
	int lx;
	//Bit16u v11; // ax
	//Bit16u* m; // ebx
	int mx;
	Bit16u v13; // ax
	//Bit16u v14; // ax
	//Bit16u* n; // ebx
	int nx;
	//Bit16u v16; // ax
	//Bit16u* ii; // ebx
	int iix;
	//Bit16u v18; // ax

	//for (i = (Bit16u*)(a1 + 1111); (Bit8u*)i < a1 + 25091; i += 10)
	for (ix = 1; ix<0x4b0; ix++)
	{
		if (a1x->array_0x30311[ix].DisId == 0xffff && a1x->array_0x30311[ix].str_0x30311_type == 0x000a && a1x->array_0x30311[ix].str_0x30311_subtype == 0x52)
		{
			sub_49540(a1x, &a1x->array_0x30311[ix]);
			if (a2)
				a1x->array_0x30311[ix].str_0x30311_type = 0;
			/*else
				v3 = a1x->array_0x30311[ix].str_0x30311_type;
			a1x->array_0x30311[ix].str_0x30311_type = v3;*/
		}
	}
	sub_498A0();//adress 22a2de
	Bit8u origbyte = 0;
	Bit8u remakebyte = 0;

	//	compsize = compare_with_snapshot((char*)"0160-00256200-2", x_DWORD_180628b_screen_buffer, 0x3aa0a4, 640 * height, &origbyte, &remakebyte);//4c
	//for (j = (Bit16u*)(a1 + 1111); (Bit8u*)j < a1 + 25091; j += 10)
	for (jx = 1; jx < 0x4b0; jx++)
	{
		if (a1x->array_0x30311[jx].DisId == 0xffff && a1x->array_0x30311[jx].str_0x30311_type == 0x000a)
		{
			v5 = a1x->array_0x30311[jx].str_0x30311_subtype;
			if (v5 == 9
				|| v5 == 83
				|| v5 == 84
				|| v5 == 85
				|| v5 == 11
				|| v5 == 15
				|| v5 == 30
				|| v5 == 29
				|| v5 == 32
				|| v5 == 31
				|| v5 == 51
				|| v5 == 50
				|| v5 == 88)
			{
				sub_49540(a1x, &a1x->array_0x30311[jx]);//22a357
				if (a2)
					a1x->array_0x30311[jx].str_0x30311_type = 0;
				/*else
					v6 = a1x->array_0x30311[jx].str_0x30311_type;
				a1x->array_0x30311[jx].str_0x30311_type = v6;*/
			}
		}
	}
	origbyte = 0;
	remakebyte = 0;
	sub_498A0();//22a383
	//for (k = (Bit16u*)(a1 + 1111); (Bit8u*)k < a1 + 25091; k += 10)
	for (kx = 1; kx < 0x4b0; kx++) 
	{
		if (a1x->array_0x30311[kx].DisId == 0xffff && a1x->array_0x30311[kx].str_0x30311_type == 0x000a)
		{
			v8 = a1x->array_0x30311[kx].str_0x30311_subtype;
			if (v8 == 81 || v8 == 80)
			{
				sub_49540(a1x, &a1x->array_0x30311[kx]);
				if (a2)
					a1x->array_0x30311[kx].str_0x30311_type = 0;
				/*else
					v9 = a1x->array_0x30311[kx].str_0x30311_type;
				a1x->array_0x30311[kx].str_0x30311_type = v9;*/
			}
		}
	}
	sub_498A0();//adress 22a3d7
	//for (l = (Bit16u*)(a1 + 1111); (Bit8u*)l < a1 + 25091; l += 10)
	for (lx = 1; lx < 0x4b0; lx++)
	{
		if (a1x->array_0x30311[lx].DisId == 0xffff && a1x->array_0x30311[lx].str_0x30311_type == 0x000e && a1x->array_0x30311[lx].str_0x30311_subtype == 0x0002)
		{
			sub_49540(a1x, &a1x->array_0x30311[lx]);
			if (a2)
				a1x->array_0x30311[lx].str_0x30311_type = 0;
			/*else
				v11 = a1x->array_0x30311[lx].str_0x30311_type;
			a1x->array_0x30311[lx].str_0x30311_type = v11;*/
		}
	}
	sub_498A0();//22a422

	//for (m = (Bit16u*)(a1 + 1111); (Bit8u*)m < a1 + 25091; m += 10)
	for (mx = 1; mx < 0x4b0; mx++)
	{
		if (a1x->array_0x30311[mx].DisId == 0xffff && a1x->array_0x30311[mx].str_0x30311_type == 0x000a)
		{
			v13 = a1x->array_0x30311[mx].str_0x30311_subtype;
			if (v13 == 27 || v13 == 28)
			{
				sub_49540(a1x, &a1x->array_0x30311[mx]);
				if (a2)
					a1x->array_0x30311[mx].str_0x30311_type = 0;
				/*else
					v14 = a1x->array_0x30311[mx].str_0x30311_type;
				a1x->array_0x30311[mx].str_0x30311_type = v14;*/
			}
		}
	}
	sub_498A0();//adress 22a476
	//for (n = (Bit16u*)(a1 + 1111); (Bit8u*)n < a1 + 25091; n += 10)
	for (nx = 1; nx < 0x4b0; nx++)
	{
		if (a1x->array_0x30311[nx].DisId == 0xffff && a1x->array_0x30311[nx].str_0x30311_type == 0x000a && a1x->array_0x30311[nx].str_0x30311_subtype == 0x002d && x_WORD_D93C0_bldgprmbuffer[2+4 * a1x->array_0x30311[nx].word_14] & 0x10)
		{
			sub_49540(a1x, &a1x->array_0x30311[nx]);
			if (a2)
				a1x->array_0x30311[nx].str_0x30311_type = 0;
			/*else
				v16 = a1x->array_0x30311[nx].str_0x30311_type;
			a1x->array_0x30311[nx].str_0x30311_type = v16;*/
		}
	}
	sub_498A0();//adress 22a4d1
	
	//	compsize = compare_with_snapshot((char*)"0160-00256200-2", x_DWORD_180628b_screen_buffer, 0x3aa0a4, 640 * height, &origbyte, &remakebyte);//4c
	//for (ii = (Bit16u*)(a1 + 1111); (Bit8u*)ii < a1 + 25091; ii += 10)
	for (iix = 1; iix < 0x4b0; iix++) 
	{
		if (a1x->array_0x30311[iix].DisId == 0xffff && a1x->array_0x30311[iix].str_0x30311_type == 0x000a && a1x->array_0x30311[iix].str_0x30311_subtype == 0x002d && !(x_WORD_D93C0_bldgprmbuffer[2+4 * a1x->array_0x30311[iix].word_14] & 0x10))
		{
			sub_49540(a1x, &a1x->array_0x30311[iix]);
			if (a2)
				a1x->array_0x30311[iix].str_0x30311_type = 0;
			/*else
				v18 = a1x->array_0x30311[iix].str_0x30311_type;
			a1x->array_0x30311[iix].str_0x30311_type = v18;*/
		}
	}
	sub_498A0();//adress 22a52c
}

int debugcounter_22a540 = 0;

//----- (00049540) --------------------------------------------------------
void sub_49540(type_str_2FECE* a1x, type_str_0x30311* a2x)//22a540
{
	uint16_t v2; // ax
	int16_t v3; // ax
	uint16_t v4; // dx
	type_str_0x6E8E* v5x; // eax
	//int16_t v6; // ax
	//uint16_t v7; // dx
	type_str_0x6E8E* v8y; // eax//type_str_0x6E8E
	//Bit8u* v9; // esi
	uint16_t v10; // dx
	//char *v11; // eax
	int16_t v12; // ax
	uint16_t v13; // dx
	type_str_0x6E8E* v14x; // eax

	Bit32u v8x;

	if (a2x->str_0x30311_type < 0xAu)
		return;
	if (a2x->str_0x30311_type > 0xAu)
	{
		if (a2x->str_0x30311_type == 14 && a2x->str_0x30311_subtype == 2)
		{
			x_WORD_EB398ar.x = a2x->axis2d_4.x << 8;//adress 22a7b0
			x_WORD_EB398ar.y = a2x->axis2d_4.y << 8;
			v12 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
			v13 = a2x->str_0x30311_subtype;
			x_WORD_EB398ar.z = v12;

			v8x = *(Bit32u*)&(x_DWORD_D4C52ar[(0x2a8b7a + v13 * 14 - 0x2a5c52)]);
			if (v8x)
			{
				v14x = pre_sub_4A190_axis_3d(v8x, &x_WORD_EB398ar,1); //(*(int(**)(int))((char *)&off_D7B7A + 14 * v13))((int)x_WORD_EB398ar);
				if (v14x)
				{
					v14x->word_0x2C_44 = a2x->word_14;
					v14x->word_0x96_150 = a2x->word_18;
				}
			}
		}
		return;
	}
	v2 = a2x->str_0x30311_subtype;
	/*if (v2 < 0x2Du)
	{
		if (v2 < 0x1Cu || v2 > 0x1Du && v2 != 0x1Fu)
			goto LABEL_20;
	//LABEL_18:
		if (a2x->word_12)//only 1c,1d,1f
			sub_49090(a1x, a2x);
		return;
	}*/
	if ((v2 == 0x1Cu) || (v2 == 0x1Du) || (v2 == 0x1Fu)|| (v2 == 0x32u) || (v2 == 0x50u))
	{
		if (a2x->word_12)//only 1c,1d,1f, 32 and 50
			sub_49090(a1x, a2x);
		return;
	}
	//if (v2 <= 0x2Du)//only 2d
	if (v2 == 0x2Du)//only 2d
	{
		x_WORD_EB398ar.x = a2x->axis2d_4.x << 8;//adress 22a5af
		x_WORD_EB398ar.y = a2x->axis2d_4.y << 8;
		v3 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
		v4 = a2x->str_0x30311_subtype;
		x_WORD_EB398ar.z = v3;
		//v8x=*(Bit32u*)&(x_DWORD_D4C52ar[(0x2a797e + v4 * 14 - 0x2a5c52)]);
		v8x = *(Bit32u*) & (x_DWORD_D4C52ar[(0x2a797e + v4 * 14 - 0x2a5c52)]);
		if (v8x)
		{
			//debug create mana
			/*
			if (debugcounter_22a540 == 0)
			{
				v8x = 0x231080;
				/*x_WORD_EB398ar.x = 0;
				x_WORD_EB398ar.y = 0;
				x_WORD_EB398ar.z = 0;
			}
			debugcounter_22a540++;
			*/
			//debug
			v5x = pre_sub_4A190_axis_3d(v8x, &x_WORD_EB398ar,1);//(*(int(**)(int))((char *)&off_D697E + 14 * v4))((int)x_WORD_EB398ar);
			if (v5x)
				sub_49A30(v5x, a2x->word_14);
		}
		return;
	}
	//if (v2 >= 0x32u && (v2 <= 0x32u || v2 == 0x50u))
	/*if((v2==0x32)|| (v2 == 0x50))
	{
		if (a2x->word_12)
			sub_49090(a1x, a2x);
		return;
	}*/
//LABEL_20:
	x_WORD_EB398ar.x = a2x->axis2d_4.x << 8;
	x_WORD_EB398ar.y = a2x->axis2d_4.y << 8;
	//v6 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
	//v7 = a2x->str_0x30311_subtype;
	x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
	v8x = *(Bit32u*)&(x_DWORD_D4C52ar[(0x2a797e + a2x->str_0x30311_subtype * 14 - 0x2a5c52)]);
	if (v8x)
	{
		v8y= pre_sub_4A190_axis_3d(v8x, &x_WORD_EB398ar,1);
		//v8 = (*(Bit8u*(**)(int))((char *)&off_D697E + 14 * v7))((int)x_WORD_EB398ar);
		//v9 = v8;
		if (v8y)
		{
			v10 = a2x->str_0x30311_subtype;
			if (v10 < 0x52u)
			{
				if (v10 < 0xBu)
				{
					if (v10 != 9)
						return;
				}
				else if (v10 > 0xBu && v10 != 15)
				{
					return;
				}
				//v11 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * (uint8_t)sub_6E020(a2x->str_0x30311_subtype) + 2 + 26 * a2x->word_14];
				//v11 = SPELLS_BEGIN_BUFFER_str[(uint8_t)sub_6E020(a2x->str_0x30311_subtype)].subspell[a2x->word_14].dword_2;
				v8y->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[(uint8_t)sub_6E020(a2x->str_0x30311_subtype)].subspell[a2x->word_14].dword_2;
				if (a2x->str_0x30311_subtype == 9)
					v8y->dword_0x4 = SPELLS_BEGIN_BUFFER_str[(uint8_t)sub_6E020(a2x->str_0x30311_subtype)].subspell[a2x->word_14].byte_0x1A;
				else
					v8y->dword_0x8 = SPELLS_BEGIN_BUFFER_str[(uint8_t)sub_6E020(a2x->str_0x30311_subtype)].subspell[a2x->word_14].byte_0x1A;
				return;
			}
			if (v10 <= 0x52u)
			{
				v8y->byte_0x46_70 = a2x->word_18;
				v8y->byte_0x43_67 = a2x->word_14;
				v8y->byte_0x44_68 = a2x->word_16;
			}
			else if (v10 < 0x54u)
			{
				v8y->word_0x9A_154x.x = a2x->word_10;
			}
			else if (v10 <= 0x55u)
			{
				v8y->word_0x9A_154x.x = a2x->word_10;
				v8y->array_0x4C_76.z = a2x->word_18;
			}
			else if (v10 == 0x58u)
			{
				v8y->array_0x52_82.xshift = a2x->word_14;
				v8y->array_0x52_82.yshift = a2x->word_16;
			}
		}
	}
}

//----- (00049830) --------------------------------------------------------
void sub_49830(type_str_2FECE* a1x)//22a830 //set v1x->word_12
{
	//Bit16u* v1; // edx
	type_str_0x30311* v1x;
	//Bit8u* index; // eax
	uint16_t v3; // ax

	//v1 = (Bit16u*)(a1 + 1111);
	v1x = &a1x->array_0x30311[1];
	//index = a1 + 25091;
	//if (a1 + 1111 < a1 + 25091)
	{
		do
		{
			/*if (v1x->axis3d_4.z != -1 || v1x->str_0x30311_type != 10)
				goto LABEL_13;*/
			if (v1x->DisId == -1 && v1x->str_0x30311_type == 10)
			{
				v3 = v1x->str_0x30311_subtype;
				/*if (v3 < 0x1Fu)
				{
					if (v3 < 0x1Cu || v3 > 0x1Du)
						goto LABEL_13;
				}
				else if (v3 > 0x1Fu && (v3 < 0x32u || v3 > 0x32u && v3 != 0x50))
				{
					goto LABEL_13;
				}*/
				if((v3==0x1c)|| (v3 == 0x1d) || (v3 == 0x1f) || (v3 == 0x32) || (v3 == 0x50))
					v1x->word_12 = 1;
			}
		//LABEL_13:
			v1x++;
			//index = a1 + 25091;
		} while (v1x < &a1x->array_0x30311[0x4B0]);
	}
	//return result;
}

int debugcounter22a8a0 = 0;
int debugcounter22a8a0bb = 0;
//----- (000498A0) --------------------------------------------------------
void sub_498A0()//22a8a0
{
	//Bit8u* result; // eax
	signed int v1; // esi
	//type_str_0x6E8E* ix; // ebx
	int iy;
	Bit8u v3; // ah
	Bit8u v4; // al
	type_D4C52ar2* v5; // eax
	type_D4C52ar2* v6; // eax
	//void(*v7)(unsigned int); // [esp+0h] [ebp-8h]
	//void(*v8)(unsigned int, void(*)(unsigned int)); // [esp+4h] [ebp-4h]
	//Bit32u v7x;
	Bit32u v8x;
	// fix if begin
	//v7 = 0;
	//v8 = 0;
	// end

	Bit8u origbyte20 = 0;
	Bit8u remakebyte20 = 0;
	int comp20;


	/*
	Bit8u origbyte20 = 0;
	Bit8u remakebyte20 = 0;
	int comp20 = compare_with_sequence_D41A0((char*)"0022A8A0", (Bit8u*)&D41A0_BYTESTR_0, 0x356038, debugcounter22a8a0, 0x36e16, &origbyte20, &remakebyte20);
	debugcounter22a8a0++;
	*/
	
	//result = x_D41A0_BYTEARRAY_0;
	v1 = 1;
	//*(Bit32u*)(x_D41A0_BYTEARRAY_0 + 8) = 9377 * *(Bit32u*)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
	D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;
LABEL_2:
	if (v1)
	{
		v1 = 0;
		//for (ix = (type_str_0x6E8E*)&x_D41A0_BYTEARRAY_0[28470]; ; ix+=sizeof(type_str_0x6E8E))
		for(iy = 1;;iy++)
		{
			//result = x_D41A0_BYTEARRAY_0 + 196302;
			//if (&D41A0_BYTESTR_0.struct_0x6E8E[iy] >= D41A0_BYTESTR_0.str_2FECE.dword_2FECE)
			if(iy>=0x3e8)
				goto LABEL_2;
			v3 = D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x3F_63;
			if (v3)
				break;
		LABEL_37:
			;
		}
		if (v3 != 10)//22a8eb
		{
			if (v3 == 14)
			{
				if (D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x40_64 == 2 && !D41A0_BYTESTR_0.struct_0x6E8E[iy].dword_0x8)
				{
					//v6 = *(Bit32u*)(x_DWORD_D4C52ar + 18 * D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x3F_63) + 14 * D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x45_69;
					//v6 = str_D4C48ar[D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x3F_63].dword_10 + 14 * D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x45_69;
					v6 = &str_D4C48ar[D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x3F_63].dword_10[D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x45_69];					
					v1 = 1;
					/*v7 = *(void(**)(unsigned int))(v6 + 6);
					if (v7)
					{
						if (*(Bit32u*)(v6 + 10))
							v7((int)i);
					}*/
					/*v8x = *(Bit32u*)&(x_DWORD_D4C52ar[(v6 + 6 - 0x2a5c52)]);
					if (v8x && *(Bit32u*)&(x_DWORD_D4C52ar[(v6 + 10 - 0x2a5c52)]))
						pre_sub_4A190_0x6E8E(v8x, &D41A0_BYTESTR_0.struct_0x6E8E[iy],2);*/
					v8x = v6->dword_6;
					if (v8x && v6->dword_10)
					{
						pre_sub_4A190_0x6E8E(v8x, &D41A0_BYTESTR_0.struct_0x6E8E[iy], 2);
					}
				}
			}
			else
			{
				sub_57F10(&D41A0_BYTESTR_0.struct_0x6E8E[iy]);
			}
			goto LABEL_35;
		}
		v4 = D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x40_64;//22a8f1
		if (v4 < 0x1Bu)
		{
			if (v4 >= 0xBu)
			{
				if (v4 > 0xBu && v4 != 0xFu)
					goto LABEL_26;
				goto LABEL_23;
			}
			if (v4 == 9)
				goto LABEL_23;
		}
		else
		{
			if (v4 <= 0x20u)
				goto LABEL_23;
			if (v4 >= 0x32u)
			{
				if (v4 > 0x33u && (v4 < 0x50u || v4 > 0x55u && v4 != 88))
					goto LABEL_26;
			LABEL_23:
				//v5 = *(Bit32u*)(x_DWORD_D4C52ar + 18 * D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x3F_63) + 14 * D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x45_69;//ok
				v5 = &str_D4C48ar[D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x3F_63].dword_10[D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x45_69];//ok
				v1 = 1;//adress 22a93a
				//Bit8u x_DWORD_D4C52ar[0x5004] = { //2a5c52 -1d1000
				//xx211d50ar
				//v8 = *(void(**)(unsigned int, void(*)(unsigned int)))(v5 + 6);
				//v8x = *(Bit32u*)&(x_DWORD_D4C52ar[(v5 + 6 - 0x2a5c52)]);
				v8x=v5->dword_6;
				if (v8x && v5->dword_10)
					//v8((int)i, v7);
				{//adress 22a976
					pre_sub_4A190_0x6E8E(v8x, &D41A0_BYTESTR_0.struct_0x6E8E[iy],2);
				}
				goto LABEL_27;
			}
			if (v4 == 45)
			{
				if (D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x45_69 != 51)
				{
				LABEL_27:
					D41A0_BYTESTR_0.struct_0x6E8E[iy].byte_0x3E_62++;
				LABEL_35:
					if (D41A0_BYTESTR_0.struct_0x6E8E[iy].struct_byte_0xc_12_15.byte[1] & 4)
						sub_57F20(&D41A0_BYTESTR_0.struct_0x6E8E[iy]);
					goto LABEL_37;
				}
				goto LABEL_23;
			}
		}
	LABEL_26:
		sub_57F10(&D41A0_BYTESTR_0.struct_0x6E8E[iy]);
		goto LABEL_27;
	}
	//return (int)result;
}

//----- (00049A20) --------------------------------------------------------
void sub_49A20_remove_event(type_str_0x6E8E* a1x)//22aa20
{
	//int result; // eax

	//result = *(x_DWORD *)(a1 + 4);
	a1x->dword_0x8 = a1x->dword_0x4;
	//return a1x->dword_0x4;
}

//----- (00049A30) --------------------------------------------------------
void sub_49A30(type_str_0x6E8E* a1x, uint16_t a2)//22aa30
{
	posistruct v2; // eax
	int16_t v3; // dx
	//int v4; // eax
	char v5; // dl
	int v6; // edx
	uint16_t v8; // [esp+0h] [ebp-10h]
	uint16_t v9; // [esp+4h] [ebp-Ch]
	uint8_t v10; // [esp+8h] [ebp-8h]
	uint8_t v11; // [esp+Ch] [ebp-4h]

	v2 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a2];
	v8 = v2.height;
	v9 = v2.width;
	a1x->dword_0x10_16 = 2;
	v3 = x_WORD_180660_VGA_type_resolution;
	a1x->word_0x84_132 = v9 * v8 >> 4;
	if (v3 == 1)
	{
		v8 >>= 1;
		v9 >>= 1;
	}
	x_WORD_EB398ar = a1x->array_0x4C_76;
	x_WORD_EB398ar.x = a1x->array_0x4C_76.x >> 8 << 8;
	x_WORD_EB398ar.y = a1x->array_0x4C_76.y >> 8 << 8;
	sub_57CF0(a1x, &x_WORD_EB398ar);
	v10 = (a1x->array_0x4C_76.x >> 8) - ((signed int)v9 >> 1);
	v11 = (a1x->array_0x4C_76.y >> 8) - ((signed int)v8 >> 1);
	if ((v10 + v11) % 2)
	{
		x_WORD_EB398ar = a1x->array_0x4C_76;
		x_WORD_EB398ar.x += 256;
		sub_57CF0(a1x, &x_WORD_EB398ar);
		v10++;
	}
	sub_49EC0(a1x, a2);
	a1x->array_0x4C_76.z = 32 * sub_48DF0(v10, v11, v8, v9);
	a1x->byte_0x46_70 = a2;
	//LOWORD(v4) = a2;
	a1x->dword_0x8 = 30;
	a1x->word_0x2A_42 = *(Bit16u*)&x_WORD_D93C0_bldgprmbuffer[4 * a2];
	v5 = x_WORD_D93C0_bldgprmbuffer[2+1+4 * a2];
	a1x->byte_0x41_65 = 0;
	a1x->dword_0x90_144 = 0;
	a1x->byte_0x3D_61 = v5;
	if (!(x_WORD_D93C0_bldgprmbuffer[2+4 * a2] & 8))
	{
		v6 = a1x->dword_0x90_144;
		a1x->byte_0x38_56 |= 2u;
		if (v6 < 0)
			a1x->dword_0x90_144 = 0;
		if (a1x->dword_0x90_144 > 1000)
			a1x->dword_0x90_144 = 1000;
		//v4 = 1000 * a1x->word_0x2A_42 >> 7;
		a1x->dword_0x90_144 = 1000 * a1x->word_0x2A_42 >> 7;
	}
	if (a2 == 68)
	{
		D41A0_BYTESTR_0.word_0x3654A = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
	}
	//return v4;
}

//----- (00049C70) --------------------------------------------------------
void sub_49C70(type_str_0x6E8E* a1x)//22ac70
{
	//int result; // eax

	//result = *(x_DWORD *)(a1 + 4) >> 1;
	a1x->dword_0x90_144 = a1x->dword_0x4 >> 1;
	//return result;
}

//----- (00049C90) --------------------------------------------------------
void sub_49C90(type_str_0x6E8E* a1x, int16_t a2)//22ac90
{
	//char result; // al

	a1x->word_0x5A_90 = a2;
	a1x->byte_0x5C_92 = 0;
	//result = x_BYTE_D8A2E[(uint8_t)x_WORD_D951C[6+7 * a2]];
	a1x->byte_0x5D_93 = x_BYTE_D8A2E[(uint8_t)x_WORD_D951C[6 + 7 * a2]];
	//return result;
}

//----- (00049CD0) --------------------------------------------------------
void sub_49CD0(type_str_0x6E8E* a1x, int16_t a2)//22acd0
{
	int v2; // ebx
	//int result; // eax

	sub_49C90(a1x, a2);
	v2 = 7 * a2;
	a1x->array_0x52_82.aa = (Bit16u)x_WORD_D951C[4+v2] / 2;
	a1x->array_0x52_82.xshift = (Bit16u)x_WORD_D951C[3+v2] / 2;
	a1x->array_0x52_82.yshift = (Bit16u)x_WORD_D951C[3+v2] / 2;
	//result = (uint16_t)x_WORD_D9524[v2] / 2;
	a1x->array_0x52_82.dd = (Bit16u)x_WORD_D951C[4+v2] / 2;
	//return result;
}

//----- (00049D50) --------------------------------------------------------
void sub_49D50(type_str_0x6E8E* a1x, int16_t a2)//22ad50
{
	//int result; // eax

	a1x->word_0x5A_90 = a2;
	a1x->byte_0x5D_93 = x_BYTE_D8A2E[(uint8_t)x_WORD_D951C[6+7 * a2]];
	//result = (uint16_t)x_WORD_D951C[4+7 * a2] / 2;
	a1x->array_0x52_82.aa = (uint16_t)x_WORD_D951C[4 + 7 * a2] / 2;
	//return result;
}

//----- (00049DA0) --------------------------------------------------------
int sub_49DA0(type_str_0x6E8E* a1x, int16_t a2)//22ada0
{
	int v2; // ebx
	int result; // eax

	sub_49CD0(a1x, a2);
	v2 = 7 * a2;
	a1x->array_0x52_82.xshift = (Bit16u)x_WORD_D951C[3+v2] / 2;
	a1x->array_0x52_82.yshift = (Bit16u)x_WORD_D951C[3+v2] / 2;
	result = (Bit16u)x_WORD_D951C[4+v2] / 2;
	a1x->array_0x52_82.dd = result;
	return result;
}

//----- (00049E10) --------------------------------------------------------
void sub_49E10(type_str_0x6E8E* a1x, int16_t a2)//22ae10
{
	//int result; // eax
	int16_t v3; // cx
	int16_t v4; // si

	/*result = */sub_49CD0(a1x, a2);
	v3 = a1x->array_0x52_82.yshift;
	v4 = a1x->array_0x52_82.dd;
	a1x->array_0x52_82.xshift *= 2;
	a1x->array_0x52_82.yshift = 2 * v3;
	a1x->array_0x52_82.dd = 2 * v4;
	//return result;
}

//----- (00049EA0) --------------------------------------------------------
void sub_49EA0(type_str_0x6E8E* a1x, int16_t a2, int16_t a3)//22aea0
{
	//type_str_0x6E8E* resultx; // eax

	//resultx = a1x;
	a1x->array_0x52_82.xshift = a2;
	a1x->array_0x52_82.yshift = a2;
	a1x->array_0x52_82.dd = a3;
	//return resultx;
}

//----- (00049EC0) --------------------------------------------------------
void sub_49EC0(type_str_0x6E8E* a1x, int16_t a2)//22aec0 // get castle data
{
	posistruct v2; // eax
	unsigned int v3; // edx
	unsigned int v4; // eax
	//unsigned int index; // eax

	//v2 = **filearray_2aa18c[24] + 6 * a2;
	/*
	int filearrayindex_POINTERSDATTAB = 0;
int filearrayindex_FONTS0DATTAB = 1;
int filearrayindex_MSPRDDATTAB = 2;
int filearrayindex_ZERO1 = 3;
int filearrayindex_MSPRD00DATTAB = 4;
	*/
	//*(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[a2]
	//11-66
	v2 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[a2];
	/*switch (a2)
	{
	case 0x11:
		v2 = *filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct;
		break;
	default:
		mydelay(10000);
		exit(0);
	}*/
	v3 = v2.height;
	v4 = v2.width;
	if (x_WORD_180660_VGA_type_resolution == 1)
	{
		v3 >>= 1;
		v4 >>= 1;
	}
	a1x->array_0x52_82.xshift = ((v4 << 8) + 1280) >> 1;
	a1x->array_0x52_82.aa = 0;
	a1x->array_0x52_82.dd = 256;
	a1x->array_0x52_82.yshift = ((v3 << 8) + 1280) >> 1;
	//return result;
}

//----- (00049F30) --------------------------------------------------------
void sub_49F30()//22af30
{
	//Bit32u v3; // ebx

	//*(Bit32u*)(x_D41A0_BYTEARRAY_0 + 28466) = (Bit32u)unk_F42B0;
	D41A0_BYTESTR_0.struct_0x6E8E[0].dword_0xA4_164x = unk_F42B0x;
	//*(Bit32u*)(x_D41A0_BYTEARRAY_0 + 53) = (Bit32u)-1;
	D41A0_BYTESTR_0.dword_0x35 = -1;
	//*(Bit32u*)(x_D41A0_BYTEARRAY_0 + 4582) = (Bit32u)-1;
	D41A0_BYTESTR_0.dword_0x11e6 = -1;
	Bit32s index = 999;
	do
	{
		//v3 = *(Bit32u*)(x_D41A0_BYTEARRAY_0 + 53) + 1;
		//*(Bit32u*)(x_D41A0_BYTEARRAY_0 + 53) = *(Bit32u*)(x_D41A0_BYTEARRAY_0 + 53) + 1;
		D41A0_BYTESTR_0.dword_0x35++;
		//*(Bit32u*)(x_D41A0_BYTEARRAY_0 + 4 * (D41A0_BYTESTR_0.dword_0x35()) + 582) = (Bit32u)x_DWORD_EA3E4[index];
		D41A0_BYTESTR_0.pointers_0x246[D41A0_BYTESTR_0.dword_0x35] = x_DWORD_EA3E4[index];
		index--;
	} while (index > 0);
	//return result;
}

//----- (00049F90) --------------------------------------------------------
void sub_49F90()//22af90
{
	//type_str_0x6E8E* ix; // ebx
	int iy;
	//Bit8u* v1; // eax
	signed int v2; // ebx
	//signed int v3; // edx
	type_str_0x6E8E* indexx; // eax
	//Bit8u* v5; // eax
	//int v6; // ecx
	//Bit8u* v7; // ecx
	//Bit8u* v8; // eax
	//int v9; // esi
	//Bit8u* v10; // ecx

	//for (ix = x_DWORD_EA3E4[1]; ix < x_DWORD_EA3E4[0x3e8]; ix+=sizeof(type_str_0x6E8E))
	for(iy=1;iy< 0x3e8;iy++)
	{
		if (x_DWORD_EA3E4[iy]->byte_0x3F_63 && x_DWORD_EA3E4[iy]->struct_byte_0xc_12_15.byte[1] & 4)
			sub_57F20(x_DWORD_EA3E4[iy]);
	}
	//adress 22afc0
	//v1 = x_D41A0_BYTEARRAY_0;
	//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 53) = -1;
	D41A0_BYTESTR_0.dword_0x35=-1;
	v2 = 999;
	D41A0_BYTESTR_0.dword_0x11e6 = -1;
	do
	{
		//v3 = v2;
		indexx = x_DWORD_EA3E4[v2];
		if (indexx->byte_0x3F_63)
		{
			if (indexx->struct_byte_0xc_12_15.byte[2] & 2)
			{
				//v8 = x_D41A0_BYTEARRAY_0;
				//v9 = *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 4582) + 1;
				D41A0_BYTESTR_0.dword_0x11e6++;
				//v10 = x_D41A0_BYTEARRAY_0 + 4 * (D41A0_BYTESTR_0.dword_0x11e6);
				//index = x_DWORD_EA3E4[v3];
				D41A0_BYTESTR_0.dword_0x11EA[D41A0_BYTESTR_0.dword_0x11e6] = x_DWORD_EA3E4[v2];
			}
		}
		else
		{
			//v5 = x_D41A0_BYTEARRAY_0;
			//v6 = *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 53) + 1;
			//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 53) = *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 53) + 1;
			D41A0_BYTESTR_0.dword_0x35++;
			//v7 = x_D41A0_BYTEARRAY_0 + 4 * (D41A0_BYTESTR_0.dword_0x35());
			//index = x_DWORD_EA3E4[v3];
			//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 4 * (D41A0_BYTESTR_0.dword_0x35()) + 582) = (Bit32s)x_DWORD_EA3E4[v3];
			D41A0_BYTESTR_0.pointers_0x246[D41A0_BYTESTR_0.dword_0x35] = x_DWORD_EA3E4[v2];
		}
		v2--;
	} while (v2 > 0);
//	return result;
}

//----- (0004A050) --------------------------------------------------------
type_str_0x6E8E* sub_4A050_new_event()//22b050
{
	Bit32s v0; // edx
	type_str_0x6E8E* v1x; // ebx
	//int v2; // eax
	//int v3; // eax
	//int v4; // ecx
	//int v5; // eax
	//int v6; // edx
	//Bit8u* result; // eax

	v0 = D41A0_BYTESTR_0.dword_0x35;
	if (D41A0_BYTESTR_0.dword_0x35 >= 0)
	{
		//v1 = (Bit8u*)*(Bit32u*)(x_D41A0_BYTEARRAY_0 + 4 * D41A0_BYTESTR_0.dword_0x35() + 582);
		//v1x = D41A0_BYTESTR_0.pointers_0x246[D41A0_BYTESTR_0.dword_0x35];
		//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 53) = v0 - 1;
		D41A0_BYTESTR_0.dword_0x35--;
	//LABEL_5:
		memset(D41A0_BYTESTR_0.pointers_0x246[v0], 0, sizeof(type_str_0x6E8E));
		//v4 = (int)x_D41A0_BYTEARRAY_4;
		//v5 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
		//v5 = D41A0_BYTESTR_0.pointers_0x246[D41A0_BYTESTR_0.dword_0x35] - D41A0_BYTESTR_0.struct_0x6E8E;
		D41A0_BYTESTR_0.pointers_0x246[v0]->dword_0x4 = 300;
		D41A0_BYTESTR_0.pointers_0x246[v0]->struct_byte_0xc_12_15.dword = 8;
		D41A0_BYTESTR_0.pointers_0x246[v0]->word_0x82_130 = 16;
		D41A0_BYTESTR_0.pointers_0x246[v0]->word_0x2A_42 = 100;
		D41A0_BYTESTR_0.pointers_0x246[v0]->word_0x1A_26 = D41A0_BYTESTR_0.pointers_0x246[v0] - D41A0_BYTESTR_0.struct_0x6E8E;
		//v6 = *(Bit32u*)(x_D41A0_BYTEARRAY_0 + 8);
		//v6 = D41A0_BYTESTR_0.dword_0x8;
		D41A0_BYTESTR_0.pointers_0x246[v0]->byte_0x41_65 = -1;
		D41A0_BYTESTR_0.pointers_0x246[v0]->byte_0x42_66 = -1;
		D41A0_BYTESTR_0.pointers_0x246[v0]->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7d6];
		D41A0_BYTESTR_0.pointers_0x246[v0]->dword_0xA4_164x = unk_F42B0x;
		D41A0_BYTESTR_0.pointers_0x246[v0]->byte_0x43_67 = 10;
		D41A0_BYTESTR_0.pointers_0x246[v0]->byte_0x39_57 = -6;
		//LOWORD(v6) = D41A0_BYTESTR_0.pointers_0x246[D41A0_BYTESTR_0.dword_0x35] - D41A0_BYTESTR_0.struct_0x6E8E + D41A0_BYTESTR_0.dword_0x8;
		D41A0_BYTESTR_0.pointers_0x246[v0]->byte_0x3E_62 = D41A0_BYTESTR_0.pointers_0x246[v0] - D41A0_BYTESTR_0.struct_0x6E8E;
		//result = v1;
		D41A0_BYTESTR_0.pointers_0x246[v0]->word_0x14_20 = D41A0_BYTESTR_0.pointers_0x246[v0] - D41A0_BYTESTR_0.struct_0x6E8E + D41A0_BYTESTR_0.dword_0x8;//this is it line
		return D41A0_BYTESTR_0.pointers_0x246[v0];
	}	
	if (D41A0_BYTESTR_0.dword_0x11e6 >= 0)
	{
		memset(x_D41A0_BYTEARRAY_4_struct.bytearray_38403x, 0, 116);
		//v2 = (int)x_D41A0_BYTEARRAY_4;
		x_D41A0_BYTEARRAY_4_struct.dword_38523 = 0;
		x_D41A0_BYTEARRAY_4_struct.dword_38527 = 0;
		x_D41A0_BYTEARRAY_4_struct.dword_38519 = 0;
		x_D41A0_BYTEARRAY_4_struct.dword_38531 = 0;
		x_D41A0_BYTEARRAY_4_struct.dword_38535 = 0;		
		v1x = D41A0_BYTESTR_0.dword_0x11EA[D41A0_BYTESTR_0.dword_0x11e6];
		sub_57E50(v1x);
		//v3 = (int)x_D41A0_BYTEARRAY_0;
		v1x->byte_0x3F_63 = 0;
		D41A0_BYTESTR_0.dword_0x11e6--;
		//goto LABEL_5;

		memset(v1x, 0, sizeof(type_str_0x6E8E));
		//v4 = (int)x_D41A0_BYTEARRAY_4;
		//v5 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
		//v5 = D41A0_BYTESTR_0.pointers_0x246[D41A0_BYTESTR_0.dword_0x35] - D41A0_BYTESTR_0.struct_0x6E8E;
		v1x->dword_0x4 = 300;
		v1x->struct_byte_0xc_12_15.dword = 8;
		v1x->word_0x82_130 = 16;
		v1x->word_0x2A_42 = 100;
		v1x->word_0x1A_26 = v1x - D41A0_BYTESTR_0.struct_0x6E8E;
		//v6 = *(Bit32u*)(x_D41A0_BYTEARRAY_0 + 8);
		//v6 = D41A0_BYTESTR_0.dword_0x8;
		v1x->byte_0x41_65 = -1;
		v1x->byte_0x42_66 = -1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7d6];
		v1x->dword_0xA4_164x = unk_F42B0x;
		v1x->byte_0x43_67 = 10;
		v1x->byte_0x39_57 = -6;
		//LOWORD(v6) = D41A0_BYTESTR_0.pointers_0x246[D41A0_BYTESTR_0.dword_0x35] - D41A0_BYTESTR_0.struct_0x6E8E + D41A0_BYTESTR_0.dword_0x8;
		v1x->byte_0x3E_62 = v1x - D41A0_BYTESTR_0.struct_0x6E8E;
		//result = v1;
		v1x->word_0x14_20 = v1x - D41A0_BYTESTR_0.struct_0x6E8E + D41A0_BYTESTR_0.dword_0x8;//this is it line
		return v1x;
	}
	return 0;
}

type_str_0x6E8E* fix_it_4A190() {
	myprintf("fix it");
	allert_error();
	return 0;
};

Bit8u testarray[0x260000];//for debug
bool test_pre_sub_4a190_firstrun=true;//for debug

int debugcounter_4a190 = 0;
void test_pre_sub_4a190(Bit32u adress)//for debug
{
	if (test_pre_sub_4a190_firstrun) {
		//testarray = new Bit8u(0x260000);
		test_pre_sub_4a190_firstrun = false;
		for (int64_t i = 0; i < 0x260000; i++)
			testarray[i] = 0;
	}
	if (testarray[adress] < 0xff)
	{
		if (testarray[adress] == 0)
		{
			myprintf("%d - new procedure:%08X\n", debugcounter_4a190,adress);
		}
		//else
			//myprintf("%d - new instance:%08X, %d\n", debugcounter_4a190,adress, testarray[adress]);
		testarray[adress]++;
		if (debugcounter_4a190 > 0x3c4)
		{
			debugcounter_4a190++;
			debugcounter_4a190--;
		}
		debugcounter_4a190++;
	}
}

type_str_0x6E8E* pre_sub_4A190_axis_3d(Bit32u adress, axis_3d* a1_axis3d, int type)//pre 22b190
{
	switch (adress)
	{
	/*case 0x22b810: {
		return sub_4A810_get_0x35plus();
		break;
	}*/
	case 0x22b820: {// 1 instance in level 1
		return sub_4A820(a1_axis3d);
		break;
	}
	case 0x22b840: {
		return sub_4A840(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22b860: {
		return sub_4A860(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22b880: {
		return sub_4A880(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22b8a0: {
		return sub_4A8A0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22b8c0: {
		return sub_4A8C0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22b8e0: {
		return sub_4A8E0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22b900: {
		return sub_4A900(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22b920: {
		return sub_4A920(a1_axis3d);
		break;
	}
	case 0x22b9c0: {
		return sub_4A9C0(a1_axis3d);
		break;
	}
	case 0x22ba40: {
		return sub_4AA40(a1_axis3d);//castle create
		break;
	}
	case 0x22bba0: {
		return sub_4ABA0(a1_axis3d);
		break;
	}
	case 0x22bc40: {
		return sub_4AC40(a1_axis3d);
		break;
	}
	case 0x22bd70: {
		return sub_4AD70(a1_axis3d);
		break;
	}
	case 0x22bdf0: {// 1 instance in level 3
		return sub_4ADF0(a1_axis3d);
		break;
	}
	case 0x22be80: {
		return sub_4AE80(a1_axis3d);
		break;
	}
	case 0x22bf00: {
		return sub_4AF00(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22bf70: {
		return sub_4AF70(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22bfe0: {
		return sub_4AFE0(a1_axis3d);
		break;
	}
	case 0x22c0f0: {
		return sub_4B0F0(a1_axis3d);
		break;
	}
	case 0x22c120: {
		return sub_4B120(a1_axis3d);
		break;
	}
	/*case 0x22c150: {
		return sub_4B150(a1_axis3d, 0, 0, 0);//fix
		break;
	}*/
	case 0x22c240: {
		return sub_4B240(a1_axis3d);
		break;
	}
	case 0x22c490: {// 1 instance in level 33
		return sub_4B490(a1_axis3d);
		break;
	}
	case 0x22c590: {
		return sub_4B590(a1_axis3d);
		break;
	}
	case 0x22c6f0: {
		return sub_4B6F0(a1_axis3d);
		break;
	}
	case 0x22ca10: {//get scroll1 //create archers
		return sub_4BA10(a1_axis3d);
		break;
	}
	case 0x22cbb0: {
		return sub_4BBB0(a1_axis3d);
		break;
	}
	case 0x22cd00: {
		return sub_4BD00(a1_axis3d);
		break;
	}
	case 0x22cdf0: {
		return sub_4BDF0(a1_axis3d);
		break;
	}
	case 0x22cf40: {// 1 instance in level 28
		return sub_4BF40(a1_axis3d);
		break;
	}
	case 0x22d0b0: {
		return sub_4C0B0(a1_axis3d);
		break;
	}
	case 0x22d1e0: {
		return sub_4C1E0(a1_axis3d);
		break;
	}
	case 0x22d310: {
		return sub_4C310(a1_axis3d);
		break;
	}
	case 0x22d460: {
		return sub_4C460(a1_axis3d);
		break;
	}
	case 0x22d590: {
		return sub_4C590(a1_axis3d);
		break;
	}
	case 0x22d6b0: {
		return sub_4C6B0(a1_axis3d);
		break;
	}
	case 0x22d7f0: {
		return sub_4C7F0(a1_axis3d);
		break;
	}
	case 0x22d8f0: {
		return sub_4C8F0(a1_axis3d);
		break;
	}
	case 0x22da00: {
		return sub_4CA00(a1_axis3d);
		break;
	}
	/*case 0x22db60: {
		sub_4CB60((type_str_0x6E8E*)a1);
		return fix_it_4A190();
		break;
	}*/
	case 0x22dbf0: {
		return sub_4CBF0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22dcf0: {
		return sub_4CCF0(a1_axis3d);
		break;
	}
	case 0x22de00: {
		return sub_4CE00(a1_axis3d);
		break;
	}
	case 0x22df00: {
		return sub_4CF00(a1_axis3d);
		break;
	}
	case 0x22e000: {
		return sub_4D000(a1_axis3d);
		break;
	}
	case 0x22e1d0: {
		return sub_4D1D0(a1_axis3d);
		break;
	}
	case 0x22e2e0: {
		return sub_4D2E0(a1_axis3d);//summon spell fire 
		break;
	}
	case 0x22e380: {
		return sub_4D380(a1_axis3d);
		break;
	}
	case 0x22e3b0: {
		return sub_4D3B0(a1_axis3d);//cast spell posses
		break;
	}
	case 0x22e470: {
		return sub_4D470(a1_axis3d);
		break;
	}
	case 0x22e500: {
		return sub_4D500(a1_axis3d);
		break;
	}
	case 0x22e590: {
		return sub_4D590(a1_axis3d);
		break;
	}
	case 0x22e620: {
		return sub_4D620(a1_axis3d);
		break;
	}
	case 0x22e6b0: {
		return sub_4D6B0(a1_axis3d);
		break;
	}
	case 0x22e740: {
		return sub_4D740(a1_axis3d);
		break;
	}
	case 0x22e7d0: {
		return sub_4D7D0(a1_axis3d);
		break;
	}
	case 0x22e860: {
		return sub_4D860(a1_axis3d);
		break;
	}
	case 0x22e900: {
		return sub_4D900(a1_axis3d);//castle cast
		break;
	}
	case 0x22e990: {
		return sub_4D990(a1_axis3d);
		break;
	}
	case 0x22ea20: {
		return sub_4DA20(a1_axis3d);
		break;
	}
	case 0x22eab0: {
		return sub_4DAB0(a1_axis3d);
		break;
	}
	case 0x22ebc0: {
		return sub_4DBC0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22ec40: {
		return sub_4DC40(a1_axis3d);
		break;
	}
	case 0x22ecc0: {
		return sub_4DCC0(a1_axis3d);
		break;
	}
	case 0x22ed50: {
		return sub_4DD50(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22edd0: {
		return sub_4DDD0(a1_axis3d);
		break;
	}
	case 0x22eea0: {
		return sub_4DEA0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22ef30: {
		return sub_4DF30(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22efc0: {
		return sub_4DFC0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22f050: {
		return sub_4E050(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22f0f0: {
		return sub_4E0F0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22f180: {
		return sub_4E180(a1_axis3d);
		break;
	}
	case 0x22f210: {
		return sub_4E210(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22f2a0: {
		return sub_4E2A0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22f320: {
		return sub_4E320(a1_axis3d);
		break;
	}
	case 0x22f3b0: {// 1 instance in level 8
		return sub_4E3B0(a1_axis3d);
		break;
	}
	case 0x22f430: {
		return sub_4E430(a1_axis3d);
		break;
	}
	case 0x22f490: {
		return sub_4E490(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22f500: {
		return sub_4E500(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22f570: {
		return sub_4E570(a1_axis3d);//begin of water splash
		break;
	}
	case 0x22f5f0: {
		return sub_4E5F0(a1_axis3d);
		break;
	}
	case 0x22f6a0: {
		return sub_4E6A0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22f750: {
		return sub_4E750();
		break;
	}
	case 0x22f760: {
		return sub_4E760(a1_axis3d);
		break;
	}
	case 0x22f7d0: {
		return sub_4E7D0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x22f840: {
		return sub_4E840(a1_axis3d);
		break;
	}
	case 0x22f8c0: {
		return sub_4E8C0(a1_axis3d);//posses spell drop1
		break;
	}
	case 0x22f950: {
		return sub_4E950(a1_axis3d);		
		break;
	}
	case 0x22f9e0: {
		return sub_4E9E0(a1_axis3d);
		break;
	}
	case 0x22fa20: {
		return sub_4EA20(a1_axis3d);
		break;
	}
	case 0x22fa60: {
		return sub_4EA60(a1_axis3d);
		break;
	}
	/*case 0x22faa0: {
		sub_4EAA0(a1_axis3d, 0, 0, 0, 0);//fix it
		return fix_it_4A190();
		break;
	}*/
	case 0x22fb50: {//in quest point
		return sub_4EB50(a1_axis3d);
		break;
	}
	case 0x22fc10: {// 1 instance in level 9
		return sub_4EC10(a1_axis3d);
		break;
	}
	case 0x22fcd0: {
		return sub_4ECD0(a1_axis3d);
		break;
	}
	case 0x22fd70: {
		return sub_4ED70(a1_axis3d);

		break;
	}
	case 0x22fdc0: {
		return sub_4EDC0(a1_axis3d);
		break;
	}
	case 0x22fed0: {
		return sub_4EED0(a1_axis3d);
		break;
	}
	case 0x22ff30: {
		return sub_4EF30(a1_axis3d);
		break;
	}
	case 0x22ff90: {
		return sub_4EF90(a1_axis3d);
		break;
	}
	case 0x230040: {
		return sub_4F040(a1_axis3d);
		break;
	}
	/*case 0x230c10: {
		return sub_4F1C0((type_str_0x6E8E*)a1);
		break;
	}*/
	case 0x2302a0: {
		return sub_4F2A0(a1_axis3d);
		break;
	}
	/*case 0x230440: {
		return sub_4F440((type_str_0x6E8E*)a1);
		break;
	}*/
	case 0x2305f0: {
		return sub_4F5F0(a1_axis3d);
		break;
	}
	case 0x2306a0: {
		return sub_4F6A0(a1_axis3d);
		break;
	}
	case 0x230720: {
		return sub_4F720(a1_axis3d);
		break;
	}
	case 0x2307a0: {
		return sub_4F7A0(a1_axis3d);
		break;
	}
	case 0x230800: {
		return sub_4F800(a1_axis3d);
		break;
	}
	case 0x230860: {
		return sub_4F860(a1_axis3d);
		break;
	}
	case 0x2308b0: {
		return sub_4F8B0(a1_axis3d);
		break;
	}
	case 0x230900: {
		return sub_4F900(a1_axis3d);
		break;
	}
	case 0x230950: {
		return sub_4F950(a1_axis3d);
		break;
	}
	case 0x2309a0: {//2 instances in level 1
		return sub_4F9A0(a1_axis3d);
		break;
	}
	case 0x230a00: {
		return sub_4FA00(a1_axis3d);
		break;
	}
	case 0x230a60: {
		return sub_4FA60(a1_axis3d);
		break;
	}
	case 0x230ac0: {
		return sub_4FAC0(a1_axis3d);
		break;
	}
	case 0x230b20: {
		return sub_4FB20(a1_axis3d);
		break;
	}
	case 0x230b80: {
		return sub_4FB80(a1_axis3d);
		break;
	}
	case 0x230be0: {
		return sub_4FBE0(a1_axis3d);
		break;
	}
	case 0x230c30: {
		return sub_4FC30(a1_axis3d);
		break;
	}
	case 0x230ca0: {
		return sub_4FCA0(a1_axis3d);
		break;
	}
	case 0x230cd0: {
		return sub_4FCD0(a1_axis3d);
		break;
	}
	case 0x230d00: {
		return sub_4FD00(a1_axis3d);
		break;
	}
	case 0x230d70: {
		return sub_4FD70(a1_axis3d);
		break;
	}
	case 0x230de0: {
		return sub_4FDE0(a1_axis3d);
		break;
	}
	case 0x230e40: {
		return sub_4FE40(a1_axis3d);
		break;
	}
	case 0x230f20: {
		return sub_4FF20();
		break;
	}
	case 0x230f30: {
		return sub_4FF30(a1_axis3d);
		break;
	}
	case 0x230fb0: {
		return sub_4FFB0(a1_axis3d);
		break;
	}
	case 0x231020: {
		return sub_50020(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x231080: {//creating mana sphere
		return sub_50080(a1_axis3d);
		break;
	}
	case 0x2310a0: {
		return sub_500A0(a1_axis3d);
		break;
	}
	case 0x2310c0: {
		return sub_500C0(a1_axis3d, 0);//fix it
		break;
	}
	case 0x231130: {
		return sub_50130(a1_axis3d);
		break;
	}
	case 0x2311d0: {
		return sub_501D0(a1_axis3d);
		break;
	}
	case 0x231250: {//47 instances in level 1
		return sub_50250(a1_axis3d);
		break;
	}
	case 0x2312b0: {//cast castleII
		return sub_502B0(a1_axis3d);
		break;
	}
	case 0x231320: {
		return sub_50320(a1_axis3d);
		break;
	}
	case 0x231370: {//arrow1
		return sub_50370(a1_axis3d);
		break;
	}
	case 0x2313d0: {
		return sub_503D0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x231430: {
		return sub_50430(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x2314b0: {
		return sub_504B0(a1_axis3d);
		break;
	}
	case 0x231500: {
		return sub_50500(a1_axis3d);
		break;
	}
	case 0x2315a0: {
		return sub_505A0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x2315e0: {
		return sub_505E0(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x231640: {
		return sub_50640(a1_axis3d);
		break;
	}
	case 0x2316e0: {
		return sub_506E0(a1_axis3d);
		break;
	}
	case 0x231780: {
		return sub_50780(a1_axis3d);
		break;
	}
	case 0x2317c0: {
		return sub_507C0(a1_axis3d);
		break;
	}
	case 0x231800: {
		return sub_50800();
		break;
	}
	case 0x231840: {
		return sub_50840(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x2318e0: {
		return sub_508E0_castle_defend_create(a1_axis3d);
		break;
	}
	case 0x231960: {
		return sub_50960(a1_axis3d);
		break;
	}
	case 0x231a20: {
		return sub_50A20(a1_axis3d);
		break;
	}
	/*case 0x231a90: {
		return sub_50A90(a1_axis3d, 0, 0);//fix it
		break;
	}*/
	case 0x231ae0: {// 1 instance in level 21
		return sub_50AE0(a1_axis3d);
		break;
	}
	case 0x231b00: {// 1 instance in level 1
		return sub_50B00(a1_axis3d);
		break;
	}
	case 0x231b20: {
		return sub_50B20(a1_axis3d);
		break;
	}
	case 0x231b40: {
		return sub_50B40(a1_axis3d);
		break;
	}
	case 0x231b60: {// 1 instance in level 1
		return sub_50B60(a1_axis3d);
		break;
	}
	case 0x231b80: {
		return sub_50B80(a1_axis3d);
		break;
	}
	case 0x231c10: {
		return sub_50C10(a1_axis3d);
		break;
	}
	case 0x231c30: {
		return sub_50C30(a1_axis3d);
		break;
	}
	case 0x231c50: {
		return sub_50C50(a1_axis3d);
		break;
	}
	case 0x231c70: {
		return sub_50C70(a1_axis3d);
		break;
	}
	case 0x231c90: {
		return sub_50C90(a1_axis3d);
		break;
	}
	case 0x231cb0: {//get scroll2
		return sub_50CB0(a1_axis3d);
		break;
	}
	case 0x231cd0: {
		return sub_50CD0(a1_axis3d);
		break;
	}
	case 0x231cf0: {
		return sub_50CF0(a1_axis3d);
		break;
	}
	case 0x231d10: {
		return sub_50D10(a1_axis3d);
		break;
	}
	case 0x231d30: {
		return sub_50D30(a1_axis3d);
		break;
	}
	case 0x231d50: {
		return sub_50D50(a1_axis3d);
		break;
	}
	case 0x231d70: {
		return sub_50D70(a1_axis3d);
		break;
	}
	case 0x231d90: {
		return sub_50D90(a1_axis3d);
		break;
	}
	case 0x231db0: {
		return sub_50DB0(a1_axis3d);
		break;
	}
	case 0x231dd0: {
		return sub_50DD0(a1_axis3d);
		break;
	}
	case 0x231df0: {
		return sub_50DF0(a1_axis3d);
		break;
	}
	case 0x231e10: {
		return sub_50E10(a1_axis3d);
		break;
	}
	case 0x231e30: {
		return sub_50E30(a1_axis3d);
		break;
	}
	case 0x231e50: {
		return sub_50E50(a1_axis3d);
		break;
	}
	case 0x231e70: {
		return sub_50E70(a1_axis3d);
		break;
	}
	case 0x231e90: {
		return sub_50E90(a1_axis3d);
		break;
	}
	case 0x231eb0: {
		return sub_50EB0(a1_axis3d);
		break;
	}
	case 0x231ed0: {
		return sub_50ED0(a1_axis3d);
		break;
	}
	case 0x231ef0: {
		return sub_50EF0(a1_axis3d);
		break;
	}
	case 0x231f10: {
		return sub_50F10(a1_axis3d);
		break;
	}
	case 0x231f30: {
		return sub_50F30(a1_axis3d);
		break;
	}
	case 0x231f50: {
		return sub_50F50(a1_axis3d);
		break;
	}
	case 0x231f70: {
		return sub_50F70(a1_axis3d);
		break;
	}
	case 0x231f90: {
		return sub_50F90(a1_axis3d);
		break;
	}
	case 0x231fb0: {
		return sub_50FB0(a1_axis3d);
		break;
	}
	case 0x231fd0: {
		return sub_50FD0(a1_axis3d);
		break;
	}
	case 0x231ff0: {
		return sub_50FF0(a1_axis3d);
		break;
	}
	/*case 0x232120: {
		return sub_51120(a1_axis3d, 0, 0);//fix it
		break;
	}*/
	case 0x2321a0: {
		return sub_511A0(a1_axis3d);
		break;
	}
	case 0x2321c0: {
		return sub_511C0(a1_axis3d);
		break;
	}
	case 0x2321e0: {
		return sub_511E0(a1_axis3d);
		break;
	}
	case 0x232200: {
		return sub_51200(a1_axis3d);
		break;
	}
	case 0x232220: {
		return sub_51220(a1_axis3d);
		break;
	}
	case 0x232240: {
		return sub_51240(a1_axis3d);
		break;
	}
	case 0x232260: {
		return sub_51260(a1_axis3d);
		break;
	}
	case 0x232280: {
		return sub_51280(a1_axis3d);
		break;
	}
	case 0x2322a0: {
		return sub_512A0(a1_axis3d);
		break;
	}
	case 0x2322c0: {
		return sub_512C0(a1_axis3d);
		break;
	}
	case 0x2322e0: {
		return sub_512E0(a1_axis3d);
		break;
	}
	case 0x232300: {
		return sub_51300(a1_axis3d);
		break;
	}
	case 0x232320: {
		return sub_51320(a1_axis3d);
		break;
	}
	case 0x232340: {
		return sub_51340(a1_axis3d);
		break;
	}
	case 0x232360: {
		return sub_51360(a1_axis3d);
		break;
	}
	case 0x232380: {
		return sub_51380(a1_axis3d);
		break;
	}
	case 0x2323a0: {
		return sub_513A0(a1_axis3d);
		break;
	}
	case 0x2323c0: {
		return sub_513C0(a1_axis3d);
		break;
	}
	case 0x2323e0: {
		return sub_513E0(a1_axis3d);
		break;
	}
	case 0x232400: {
		return sub_51400(a1_axis3d);
		break;
	}
	case 0x232420: {
		return sub_51420(a1_axis3d);
		break;
	}
	case 0x232440: {
		return sub_51440(a1_axis3d);
		break;
	}
	case 0x232460: {
		return sub_51460(a1_axis3d);
		break;
	}
	case 0x232480: {
		return sub_51480(a1_axis3d);
		break;
	}
	case 0x2324a0: {
		return sub_514A0(a1_axis3d);
		break;
	}
	case 0x2324c0: {
		return sub_514C0(a1_axis3d);
		break;
	}
	/*case 0x2324e0: {
		return sub_514E0(a1_axis3d, 0, 0, 0);//fix it
		break;
	}*/
	case 0x232530: {
		return sub_51530(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x232570: {
		return sub_51570(a1_axis3d);
		break;
	}
	case 0x2325c0: {
		return sub_515C0(a1_axis3d);
		break;
	}
	case 0x232610: {
		return sub_51610(a1_axis3d);
		break;
	}
	case 0x232660: {
		return sub_51660(a1_axis3d);
		break;
	}
	case 0x2326c0: {
		return sub_516C0(a1_axis3d);
		break;
	}
	case 0x232730: {
		return sub_51730(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	case 0x232790: {
		return sub_51790(a1_axis3d);
		break;
	}
	case 0x232800: {
		return sub_51800(a1_axis3d);
		break;
	}
	case 0x232a00: {
		return sub_51A00(a1_axis3d);
		//return fix_it_4A190();
		break;
	}
	}
	//bad end
	int yy = 0;
	int xx = 157 / yy;
	mydelay(10000);
	exit(1);
	//bad end
	return 0;
}
void pre_sub_4A190_0x6E8E(Bit32u adress, type_str_0x6E8E* a1_6E8E,int type)//pre 22b190
{

#ifndef RELEASE_GAME
	test_pre_sub_4a190(adress);//for debug
#endif
	switch (adress)
	{
// FIXME: types
	// // 	case 0x1f3910: {
	// 		sub_12910(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f3a70: {
	// 		sub_12A70(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f3e70: {
	// 		sub_12E70(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f3ff0: {
	// 		sub_12FF0(a1_6E8E);
	// 		break;	
	// 	}
	// 	case 0x1f4100: {
	// 		sub_13100(a1_6E8E);
	// 		break;
	// 	}

	// 	case 0x1f41f0: {
	// 		sub_131F0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f4270: {
	// 		sub_13270(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f43b0: {
	// 		sub_133B0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f45c0: {
	// 		sub_135C0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f4710: {
	// 		sub_13710(a1_6E8E);
	// 		break;
	// 	}

	// 	case 0x1f4830: {
	// 		sub_13830(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f4850: {
	// 		sub_13850(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f4870: {
	// 		sub_13870(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f4890: {
	// 		sub_13890(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f4b00: {
	// 		sub_13B00(a1_6E8E);
	// 		break;
	// 	}

	// 	case 0x1f4c50: {
	// 		sub_13C50(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f4ce0: {
	// 		sub_13CE0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f4dc0: {
	// 		sub_13DC0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f4e40: {
	// 		sub_13E40(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f5030: {
	// 		sub_14030(a1_6E8E);
	// 		break;
	// 	}

	// 	case 0x1f5250: {
	// 		sub_14250(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f5530: {
	// 		sub_14530(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f5630: {
	// 		sub_14630(a1_6E8E);
	// 		break;
	// 	}
	// 	/*case 0x1f56c0: {
	// 		sub_146C0(a1_6E8E,0);
	// 		break;
	// 	}*/
	// 	case 0x1f56f0: {
	// 		sub_146F0(a1_6E8E);
	// 		break;
	// 	}

	// 	case 0x1f58e0: {
	// 		sub_148E0(a1_6E8E);
	// 		break;
	// 	}
	// 	/*case 0x1f5b10: {
	// 		sub_14B10(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1f5bd0: {
	// 		sub_14BD0(a1_6E8E,0);
	// 		break;
	// 	}*/
	// 	case 0x1f5c40: {
	// 		sub_14C40(a1_6E8E);
	// 		break;
	// 	}
	// 	/*case 0x1f5c60: {
	// 		sub_14C60(a1_6E8E,0);
	// 		break;
	// 	}*/

	// 	case 0x1f5c90: {
	// 		sub_14C90(a1_6E8E,0,0,0);
	// 		break;
	// 	}
	// 	case 0x1f5e10: {
	// 		sub_14E10(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1f6170: {
	// 		sub_15170(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1f65e0: {
	// 		sub_155E0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f66f0: {
	// 		sub_156F0(a1_6E8E,0);
	// 		break;
	// 	}

	// 	case 0x1f6730: {
	// 		sub_15730(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1f6760: {
	// 		sub_15760(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1f6790: {
	// 		sub_15790(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f6910: {
	// 		sub_15910(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f69e0: {
	// 		sub_159E0();			 
	// 		break;
	// 	}

	// 	case 0x1f6cb0: {
	// 		sub_15CB0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f6d20: {
	// 		sub_15D20(a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1f6d40: {
	// 		sub_15D40((short)a1_6E8E,0,0);
	// 		break;
	// 	}
	// 	case 0x1f6e60: {
	// 		sub_15E60(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f6ee0: {
	// 		sub_15EE0();
	// 		break;
	// 	}

	// 	case 0x1f6f20: {
	// 		sub_15F20(a1_6E8E,0,0);
	// 		break;
	// 	}
	// 	case 0x1f6fc0: {
	// 		sub_15FC0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f71a0: {
	// 		sub_161A0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f74b0: {
	// 		sub_164B0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1f7580: {
	// 		sub_16580(a1_6E8E);
	// 		break;
	// 	}

	// 	case 0x1f7730: {
	// 		sub_16730(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1f79c0: {
	// 		sub_169C0(a1_6E8E);
	// 		break;
	// 	}
	// 	/*case 0x1f7ca0: {
	// 		sub_16CA0(a1_6E8E,0,0);
	// 		break;
	// 	}*/
	// 	/*case 0x1f7e70: {
	// 		sub_16E70((Bit8u*)a1_6E8E,0);
	// 		break;
	// 	}*/
	// 	case 0x1f7fc0: {
	// 		sub_16FC0(a1_6E8E,0);
	// 		break;
	// 	}

	// 	case 0x1f8060: {
	// 		sub_16730(a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1f8190: {
	// 		sub_169C0(a1_6E8E);			 
	// 		break;
	// 	}
	// 	/*case 0x1f8a00: {
	// 		sub_16CA0(a1_6E8E,0,0);			 
	// 		break;
	// 	}*/
	// 	/*case 0x1f9aa0: {
	// 		sub_16E70((Bit8u*)a1_6E8E,0);			 
	// 		break;
	// 	}*/
	// 	case 0x1f9b30: {
	// 		sub_16FC0(a1_6E8E,0);			 
	// 		break;
	// 	}

	// 	case 0x1f9bb0: {
	// 		sub_18BB0();			 
	// 		break;
	// 	}
	// 	case 0x1f9da0: {
	// 		sub_18DA0(a1_6E8E,0,0);
	// 		break;
	// 	}
	// 	case 0x1f9f80: {
	// 		sub_18F80(a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fa1b0: {
	// 		sub_191B0((short)a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1fa760: {
	// 		sub_19760_set_message((const char*)a1_6E8E,0,0);			 
	// 		break;
	// 	}

	// 	case 0x1fa7f0: {
	// 		sub_197F0();			 
	// 		break;
	// 	}
	// 	case 0x1faa50: {
	// 		sub_19A50();			 
	// 		break;
	// 	}
	// 	case 0x1faab0: {
	// 		sub_19AB0();			 
	// 		break;
	// 	}
	// 	case 0x1faca0: {
	// 		sub_19CA0_sound_proc5((unsigned char)a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fad60: {
	// 		sub_19D60((int)a1_6E8E/*,0*/);			 
	// 		break;
	// 	}

	// 	case 0x1fae00: {
	// 		sub_19E00();			 
	// 		break;
	// 	}
	// 	case 0x1fb030: {
	// 		sub_1A030();			 
	// 		break;
	// 	}
	// 	case 0x1fb070: {
	// 		sub_1A070((int)a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1fb280: {
	// 		sub_1A280();			 
	// 		break;
	// 	}
	// 	case 0x1fb4a0: {
	// 		sub_1A4A0();
	// 		break;
	// 	}

	// 	case 0x1fb5b0: {
	// 		sub_1A5B0_getLangStrings((int)a1_6E8E,0,0);
	// 		break;
	// 	}
	// 	case 0x1fb7a0: {
	// 		sub_1A7A0_fly_asistant();			 
	// 		break;
	// 	}
	// 	case 0x1fb8a0: {
	// 		sub_1A8A0();			 
	// 		break;
	// 	}
	// 	case 0x1fb970: {
	// 		sub_1A970_change_game_settings((char)a1_6E8E,0,0);			 
	// 		break;
	// 	}
	// 	case 0x1fc280: {
	// 		sub_1B280_run_intro_events((Bit8u*)a1_6E8E);			 
	// 		break;
	// 	}

	
	// 	case 0x1fc2e6: {
	// 		sub_loc_1B2E6();			 
	// 		break;
	// 	}
	// 	case 0x1fc2f7: {
	// 		sub_loc_1B2F7((Bit8u*)a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fc316: {
	// 		sub_loc_1B316((Bit8u)a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fc334: {
	// 		sub_loc_1B334((Bit8u*)a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fc352: {
	// 		sub_loc_1B352((Bit8u*)a1_6E8E);			 
	// 		break;
	// 	}


	// 	case 0x1fc36c: {
	// 		sub_loc_1B36C();			 
	// 		break;
	// 	}
	// 	case 0x1fc37d: {
	// 		sub_loc_1B37D((Bit8u*)a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fc398: {
	// 		sub_loc_1B398((Bit8u*)a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fc3c9: {
	// 		sub_loc_1B3C9((Bit8u*)a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fc413: {
	// 		sub_loc_1B413();			 
	// 		break;
	// 	}


	// 	case 0x1fc424: {
	// 		sub_loc_1B424((Bit16u)a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1fc450: {
	// 		sub_loc_1B450();			 
	// 		break;
	// 	}
	// 	case 0x1fc461: {
	// 		sub_loc_1B461((Bit16u)a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1fc4a0: {
	// 		sub_loc_1B4A0((Bit16u)a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1fc4df: {
	// 		sub_loc_1B4DF((Bit16u)a1_6E8E,0);			 
	// 		break;
	// 	}


	// 	case 0x1fc51e: {
	// 		sub_loc_1B51E((Bit8u*)a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fc54a: {
	// 		sub_loc_1B54A((Bit16u)a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1fc589: {
	// 		sub_loc_1B589();			 
	// 		break;
	// 	}
	// 	case 0x1fc5a7: {
	// 		sub_loc_1B5A7();			 
	// 		break;
	// 	}
	// 	case 0x1fc5bc: {
	// 		sub_loc_1B5BC((int)a1_6E8E);			 
	// 		break;
	// 	}

	// 	case 0x1fc5cb: {
	// 		sub_loc_1B5CB();			 
	// 		break;
	// 	}
	// 	case 0x1fc5f0: {
	// 		sub_1B5F0();
	// 		break;
	// 	}
	// 	case 0x1fc6b0: {
	// 		sub_1B6B0(a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fc7a0: {
	// 		sub_1B7A0_tile_compare((axis_3d*)a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1fc830: {
	// 		sub_1B830((axis_3d*)a1_6E8E);
	// 		break;
	// 	}



	// 	case 0x1fc8c0: {
	// 		sub_1B8C0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1fcd90: {
	// 		sub_1BD90(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1fcf90: {
	// 		sub_1BF90(a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1fd310: {
	// 		sub_1C310(a1_6E8E,0,0);
	// 		break;
	// 	}
	// 	case 0x1fd560: {
	// 		sub_1C560(a1_6E8E,0);			 
	// 		break;
	// 	}


	// 	case 0x1fd890: {
	// 		sub_1C890(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1fd930: {
	// 		sub_1C930(a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fd980: {
	// 		sub_1C980(a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1fdc20: {
	// 		sub_1CC20(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1fdce0: {
	// 		sub_1CCE0(a1_6E8E,0);
	// 		break;
	// 	}


	// 	case 0x1fdda0: {
	// 		sub_1CDA0(a1_6E8E, 0);
	// 		break;
	// 	}
	// 	case 0x1fde80: {
	// 		sub_1CE80(a1_6E8E, 0);
	// 		break;
	// 	}
	// 	case 0x1fded0: {
	// 		sub_1CED0(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1fdf20: {
	// 		sub_1CF20(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1fe0e0: {
	// 		sub_1D0E0(a1_6E8E,0);
	// 		break;
	// 	}


	// 	case 0x1fe1a0: {
	// 		sub_1D1A0(a1_6E8E, 0);
	// 		break;
	// 	}
	// 	case 0x1fe260: {
	// 		sub_1D260(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1fe460: {
	// 		sub_1D460(a1_6E8E,0);
	// 		break;
	// 	}
	// 	case 0x1fe5d0: {
	// 		sub_1D5D0(a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1fe700: {
	// 		sub_1D700(a1_6E8E, 0);			 
	// 		break;
	// 	}



	// 	case 0x1fe7c0: {
	// 		sub_1D7C0(a1_6E8E, 0);			 
	// 		break;
	// 	}
	// 	case 0x1fe880: {
	// 		sub_1D880(a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1fe8a0: {
	// 		sub_1D8A0(a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1fe8c0: {
	// 		sub_1D8C0(a1_6E8E,0);			 
	// 		break;
	// 	}
	// 	case 0x1febf0: {
	// 		sub_1DBF0(a1_6E8E, 0);			 
	// 		break;
	// 	}


	// 	case 0x1feda0: {
	// 		sub_1DDA0(a1_6E8E, 0);			 
	// 		break;
	// 	}
	// 	case 0x1ff000: {
	// 		sub_1E000(a1_6E8E, 0);			 
	// 		break;
	// 	}
	// 	case 0x1ff020: {
	// 		sub_1E020(a1_6E8E, 0);			 
	// 		break;
	// 	}
	// 	case 0x1ff040: {
	// 		sub_1E040(a1_6E8E, 0);			 
	// 		break;
	// 	}
	// 	case 0x1ff1c0: {
	// 		sub_1E1C0(a1_6E8E, 0);			 
	// 		break;
	// 	}


	// 	case 0x1ff320: {
	// 		sub_1E320(a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1ff3e0: {
	// 		sub_1E3E0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1ff4d0: {
	// 		sub_1E4D0(a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1ff580: {
	// 		sub_1E580(a1_6E8E, 0);			 
	// 		break;
	// 	}
	// 	case 0x1ff700: {
	// 		sub_1E700(a1_6E8E, 0);			 
	// 		break;
	// 	}


	// 	case 0x1ff9c0: {
	// 		sub_1E9C0(a1_6E8E, 0);			 
	// 		break;
	// 	}
	// 	case 0x1ffd30: {
	// 		sub_1ED30(a1_6E8E, 0);
	// 		break;
	// 	}
	// 	case 0x1ffee0: {
	// 		sub_1EEE0(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1fff20: {
	// 		sub_1EF20(a1_6E8E);			 
	// 		break;
	// 	}
	// 	case 0x1fff40: {
	// 		sub_1EF40(a1_6E8E);
	// 		break;
	// 	}


	// 	case 0x1fff70: {
	// 		sub_1EF70(a1_6E8E);
	// 		break;
	// 	}
	// 	case 0x1fffd0: {
	// 		sub_1EFD0(a1_6E8E);
	// 		break;
	// 	}




	// case 0x200000: {
	// 	sub_1F000(a1_6E8E);
	// 	break;
	// }
	// case 0x200020: {
	// 	sub_1F020(a1_6E8E);
	// 	break;
	// }
	// case 0x200040: {
	// 	sub_1F040(a1_6E8E);
	// 	break;
	// }
	// case 0x2000c0: {
	// 	sub_1F0C0(a1_6E8E);
	// 	break;
	// }
	// case 0x200300: {
	// 	sub_1F300(a1_6E8E);
	// 	break;
	// }

	// case 0x200340: {
	// 	sub_1F340(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2003c0: {
	// 	sub_1F3C0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200440: {
	// 	sub_1F440(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200470: {
	// 	sub_1F470(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2004f0: {//begin of goat kill
	// 	sub_1F4F0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x200510: {//end of goat kill
	// 	sub_1F510(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200530: {
	// 	sub_1F530(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2005b0: {
	// 	sub_1F5B0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200630: {
	// 	sub_1F630(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200660: {
	// 	sub_1F660(a1_6E8E);		 
	// 	break;
	// }

	// case 0x2006d0: {
	// 	sub_1F6D0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200800: {
	// 	sub_1F800(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200830: {//maybe bee dead
	// 	sub_1F830(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200850: {
	// 	sub_1F850(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2008a0: {
	// 	sub_1F8A0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x200950: {
	// 	sub_1F950(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200970: {
	// 	sub_1F970(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200990: {
	// 	sub_1F990(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2009e0: {
	// 	sub_1F9E0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200a00: {
	// 	sub_1FA00(a1_6E8E);		 
	// 	break;
	// }


	// case 0x200a20: {
	// 	sub_1FA20(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200a50: {
	// 	sub_1FA50(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200a70: {
	// 	sub_1FA70(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200aa0: {
	// 	sub_1FAA0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x200f40: {//get scroll5-help
	// 	sub_1FF40(a1_6E8E);		 
	// 	break;
	// }


	// case 0x200fe0: {
	// 	sub_1FFE0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201010: {
	// 	sub_20010(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201040: {
	// 	sub_20040(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201060: {
	// 	sub_20060(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2010f0: {
	// 	sub_200F0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x201140: {//get scroll3
	// 	sub_20140(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201370: {
	// 	sub_20370(a1_6E8E);
	// 	break;
	// }
	// case 0x2013d0: {
	// 	sub_203D0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201940: {
	// 	sub_20940(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201c50: {
	// 	sub_20C50(a1_6E8E);		 
	// 	break;
	// }


	// case 0x201e50: {
	// 	sub_20E50(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201e80: {
	// 	sub_20E80(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201ea0: {
	// 	sub_20EA0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201ec0: {
	// 	sub_20EC0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201f20: {
	// 	sub_20F20(a1_6E8E);		 
	// 	break;
	// }


	// case 0x201f60: {
	// 	sub_20F60(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201f80: {
	// 	sub_20F80(a1_6E8E);		 
	// 	break;
	// }
	// case 0x201fc0: {
	// 	sub_20FC0(a1_6E8E);		 
	// 	break;
	// }


	// case 0x202030: {
	// 	sub_21030(a1_6E8E);		 
	// 	break;
	// }
	// case 0x202490: {
	// 	sub_21490(a1_6E8E);
	// 	break;
	// }
	// case 0x202850: {
	// 	sub_21850(a1_6E8E);
		 
	// 	break;
	// }
	// case 0x202ab0: {
	// 	sub_21AB0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x202f60: {
	// 	sub_21F60(a1_6E8E);
	// 	break;
	// }
	// case 0x203190: {
	// 	sub_22190(a1_6E8E);
	// 	break;
	// }
	// case 0x2031f0: {
	// 	sub_221F0(a1_6E8E,0);
	// 	break;
	// }
	// case 0x203270: {
	// 	sub_22270(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2032b0: {
	// 	sub_222B0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2033e0: {
	// 	sub_223E0();		 
	// 	break;
	// }
	// case 0x203490: {
	// 	sub_22490(a1_6E8E);		 
	// 	break;
	// }
	// case 0x203530: {
	// 	sub_22530(a1_6E8E);
	// 	break;
	// }
	// case 0x203540: {
	// 	sub_22540(a1_6E8E);
	// 	break;
	// }
	// case 0x203550: {
	// 	sub_22550(a1_6E8E);
	// 	break;
	// }
	// case 0x203560: {
	// 	sub_22560(a1_6E8E);		 
	// 	break;
	// }
	// case 0x203580: {
	// 	sub_22580(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2035a0: {
	// 	sub_225A0(a1_6E8E);
	// 	break;
	// }
	// case 0x2035b0: {
	// 	sub_225B0(a1_6E8E);
	// 	break;
	// }
	// case 0x203640: {
	// 	sub_22640((axis_3d*)a1_6E8E,0,0,0);
	// 	break;
	// }
	// /*case 0x2036d0: {
	// 	sub_226D0((unsigned short)a1_6E8E,0,0);
	// 	break;
	// }*/
	// case 0x203760: {
	// 	sub_22760(a1_6E8E);
	// 	break;
	// }
	// case 0x203c80: {
	// 	sub_22C80(a1_6E8E);
	// 	break;
	// }
	// case 0x203e60: {
	// 	sub_22E60(a1_6E8E);
	// 	break;
	// }
	// case 0x204020: {
	// 	sub_23020(a1_6E8E);
	// 	break;
	// }
	// case 0x2041e0: {
	// 	sub_231E0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204200: {
	// 	sub_23200(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204260: {
	// 	sub_23260(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2042a0: {
	// 	sub_232A0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2042c0: {
	// 	sub_232C0();
	// 	break;
	// }
	// case 0x204320: {
	// 	sub_23320(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204340: {
	// 	sub_23340(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204640: {
	// 	sub_23640(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204660: {
	// 	sub_23660(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204680: {//mana posses
	// 	sub_23680(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2046f0: {
	// 	sub_236F0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204710: {
	// 	sub_23710(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204750: {
	// 	sub_23750(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204790: {
	// 	sub_23790(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2047b0: {
	// 	sub_237B0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204ac0: {
	// 	sub_23AC0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204ae0: {
	// 	sub_23AE0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204b00: {
	// 	sub_23B00(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204b30: {
	// 	sub_23B30(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204b90: {//kill human with bag
	// 	sub_23B90(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204bd0: {
	// 	sub_23BD0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204c20: {
	// 	sub_23C20(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204c40: {
	// 	sub_23C40(a1_6E8E);		 
	// 	break;
	// }
	// case 0x204e60: {
	// 	sub_23E60(a1_6E8E);		 
	// 	break;
	// }

	// case 0x2050a0: {
	// 	sub_240A0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2050c0: {
	// 	sub_240C0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2050e0: {
	// 	sub_240E0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205100: {
	// 	sub_24100(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205150: {
	// 	sub_24150(a1_6E8E);		 
	// 	break;
	// }

	// case 0x205190: {
	// 	sub_24190(a1_6E8E);		 
	// }
	// case 0x205400: {
	// 	sub_24400(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205420: {
	// 	sub_24420(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205440: {
	// 	sub_24440(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205510: {
	// 	sub_24510(a1_6E8E);
	// 	break;
	// }


	// case 0x2057d0: {
	// 	sub_247D0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2057f0: {
	// 	sub_247F0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205810: {
	// 	sub_24810(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205840: {
	// 	sub_24840(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205860: {
	// 	sub_24860(a1_6E8E);		 
	// 	break;
	// }

	// case 0x2058c0: {
	// 	sub_248C0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205930: {
	// 	sub_24930(a1_6E8E);
	// 	break;
	// }
	// case 0x205d40: {
	// 	sub_24D40(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205da0: {
	// 	sub_24DA0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205dc0: {
	// 	sub_24DC0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x205df0: {
	// 	sub_24DF0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x205e20: {
	// 	sub_24E20(a1_6E8E);
	// 	break;
	// }
	// case 0x206050: {
	// 	sub_25050(a1_6E8E);
	// 	break;
	// }
	// case 0x2060b0: {
	// 	sub_250B0(a1_6E8E);
	// 	break;
	// }
	// case 0x206280: {
	// 	sub_25280(/*a1_6E8E,*/a1_6E8E);
	// 	break;
	// }

	// case 0x2062a0: {
	// 	sub_252A0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2062c0: {
	// 	sub_252C0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2062e0: {
	// 	sub_252E0(a1_6E8E);
	// 	break;
	// }
	// case 0x2063b0: {
	// 	sub_253B0(a1_6E8E,0,0);
	// 	break;
	// }
	// case 0x2064e0: {
	// 	sub_254E0(a1_6E8E,0,0);
	// 	break;
	// }


	// case 0x206550: {
	// 	sub_25550(a1_6E8E);		 
	// 	break;
	// }
	// case 0x206590: {
	// 	sub_25590(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2065c0: {
	// 	sub_255C0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x206610: {
	// 	sub_25610(a1_6E8E);		 
	// 	break;
	// }
	// case 0x206cd0: {
	// 	sub_25CD0(a1_6E8E);		 
	// 	break;
	// }


	// case 0x206d00: {
	// 	sub_25D00(a1_6E8E);		 
	// 	break;
	// }
	// case 0x206d20: {
	// 	sub_25D20(a1_6E8E);		 
	// 	break;
	// }
	// case 0x206d50: {
	// 	sub_25D50(a1_6E8E);		 
	// 	break;
	// }
	// case 0x206d80: {
	// 	sub_25D80(a1_6E8E);		 
	// 	break;
	// }
	// case 0x206de0: {
	// 	sub_25DE0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x206e40: {
	// 	sub_25E40(a1_6E8E);		 
	// 	break;
	// }
	// case 0x206f70: {
	// 	sub_25F70(a1_6E8E);		 
	// 	break;
	// }
	// case 0x206fd0: {
	// 	sub_25FD0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x206ff0: {
	// 	sub_25FF0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x207020: {
	// 	sub_26020(a1_6E8E);		 
	// 	break;
	// }


	// case 0x207050: {
	// 	sub_26050(a1_6E8E);		 
	// 	break;
	// }
	// case 0x207070: {
	// 	sub_26070(a1_6E8E);
	// 	break;
	// }
	// case 0x207220: {
	// 	sub_26220(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2073c0: {
	// 	sub_263C0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2073e0: {
	// 	sub_263E0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x207400: {
	// 	sub_26400(a1_6E8E);		 
	// 	break;
	// }
	// case 0x207470: {
	// 	sub_26470(a1_6E8E);		 
	// 	break;
	// }
	// case 0x207500: {
	// 	sub_26500(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2075a0: {
	// 	sub_265A0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x207830: {
	// 	sub_26830(a1_6E8E);
	// 	break;
	// }


	// case 0x2078f0: {
	// 	sub_268F0 (a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x207930: {
	// 	sub_26930(a1_6E8E);
	// 	break;
	// }
	// case 0x207960: {
	// 	sub_26960(a1_6E8E);		 
	// 	break;
	// }
	// case 0x207990: {
	// 	sub_26990(a1_6E8E);		 
	// 	break;
	// }
	// case 0x207aa0: {
	// 	sub_26AA0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x207bd0: {
	// 	sub_26BD0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x207ca0: {
	// 	sub_26CA0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x207cc0: {
	// 	sub_26CC0(a1_6E8E);
	// 	break;
	// }
	// case 0x207d20: {
	// 	sub_26D20(a1_6E8E);		 
	// 	break;
	// }
	// case 0x207f10: {
	// 	sub_26F10(a1_6E8E);
	// 	break;
	// }
	// case 0x207ff0: {
	// 	sub_26FF0(a1_6E8E);
	// 	break;
	// }

	// case 0x208120: {
	// 	sub_27120(a1_6E8E);
	// 	break;
	// }
	// case 0x2081d0: {
	// 	sub_271D0(a1_6E8E);
	// 	break;
	// }
	// case 0x2082c0: {
	// 	sub_272C0(a1_6E8E);
	// 	break;
	// }
	// case 0x208470: {
	// 	sub_27470(a1_6E8E,0);
	// 	break;
	// }
	// case 0x208590: {
	// 	sub_27590(a1_6E8E);
	// 	break;
	// }

	// case 0x208610: {
	// 	sub_27610(a1_6E8E);
	// 	break;
	// }
	// case 0x2086e0: {
	// 	sub_276E0(a1_6E8E);
	// 	break;
	// }
	// case 0x208720: {
	// 	sub_27720(a1_6E8E,0);
	// 	break;
	// }
	// case 0x208880: {
	// 	sub_27880(a1_6E8E);
	// 	break;
	// }
	// case 0x208930: {
	// 	sub_27930(a1_6E8E);
	// 	break;
	// }


	// case 0x208950: {
	// 	sub_27950(a1_6E8E);
	// 	break;
	// }
	// case 0x208b20: {
	// 	sub_27B20(a1_6E8E);
	// 	break;
	// }

	// case 0x208c10: {
	// 	sub_27C10(a1_6E8E);
	// 	break;
	// }
	// case 0x208e00: {
	// 	sub_27E00(a1_6E8E);
	// 	break;
	// }
	// case 0x208fa0: {
	// 	sub_27FA0(a1_6E8E);
	// 	break;
	// }
	// case 0x208fc0: {
	// 	sub_27FC0(a1_6E8E);
	// 	break;
	// }
	// case 0x208fe0: {
	// 	sub_27FE0(a1_6E8E,0,0,0);
	// 	break;
	// }




	// case 0x209000: {
	// 	sub_28000(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209060: {
	// 	sub_28060(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209110: {
	// 	sub_28110(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2092d0: {
	// 	sub_282D0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209390: {
	// 	sub_28390(a1_6E8E,0);		 
	// 	break;
	// }


	// case 0x209420: {
	// 	sub_28420(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209470: {
	// 	sub_28470(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209490: {
	// 	sub_28490(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209500: {
	// 	sub_28500(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209570: {
	// 	sub_28570(a1_6E8E);		 
	// 	break;
	// }

	// case 0x2095d0: {
	// 	sub_285D0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2095f0: {
	// 	sub_285F0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209610: {
	// 	sub_28610(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209630: {
	// 	sub_28630(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209660: {
	// 	sub_28660(a1_6E8E);		 
	// 	break;
	// }

	// case 0x209690: {
	// 	sub_28690(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2097b0: {
	// 	sub_287B0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209860: {
	// 	sub_28860(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209c30: {
	// 	sub_28C30(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209c60: {
	// 	sub_28C60(a1_6E8E);		 
	// 	break;
	// }

	// case 0x209cc0: {
	// 	sub_28CC0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209ce0: {
	// 	sub_28CE0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209ec0: {
	// 	sub_28EC0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209f50: {
	// 	sub_28F50(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209f90: {
	// 	sub_28F90(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209fc0: {
	// 	sub_28FC0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x209ff0: {
	// 	sub_28FF0(a1_6E8E);		 
	// 	break;
	// }


	// case 0x20a300: {
	// 	sub_29300(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20a330: {
	// 	sub_29330(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20a350: {
	// 	sub_29350(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20a380: {
	// 	sub_29380(a1_6E8E);		 
	// 	break; 
	// }
	// case 0x20a3b0: {
	// 	sub_293B0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x20a3d0: {
	// 	sub_293D0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20a400: {
	// 	sub_29400(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20a670: {
	// 	sub_29670(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20a710: {
	// 	sub_29710(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20a890: {
	// 	sub_29890(a1_6E8E);		 
	// 	break;
	// }


	// case 0x20a8b0: {
	// 	sub_298B0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20a8d0: {
	// 	sub_298D0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20a930: {
	// 	sub_29930(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20aa90: {
	// 	sub_29A90(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20b340: {
	// 	sub_2A340(a1_6E8E);		 
	// 	break;
	// }


	// case 0x20b5b0: {
	// 	sub_2A5B0(a1_6E8E,0,0);		 
	// 	break;
	// }
	// case 0x20b660: {
	// 	sub_2A660(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x20b6b0: {
	// 	sub_2A6B0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20b6f0: {
	// 	sub_2A6F0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20b7b0: {
	// 	sub_2A7B0(a1_6E8E);		 
	// 	break;
	// }


	// case 0x20b7f0: {
	// 	sub_2A7F0(a1_6E8E,0,0);		 
	// 	break;
	// }
	// case 0x20b940: {
	// 	sub_2A940(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x20b9f0: {
	// 	sub_2A9F0(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x20ba90: {
	// 	sub_2AA90(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x20bc50: {
	// 	sub_2AC50(a1_6E8E);		 
	// 	break;
	// }


	// case 0x20bd40: {
	// 	sub_2AD40(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20be30: {
	// 	sub_2AE30(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20be80: {
	// 	sub_2AE80(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20bed0: {
	// 	sub_2AED0(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x20bf10: {
	// 	sub_2AF10(a1_6E8E,0);		 
	// 	break;
	// }

	// case 0x20c1d0: {
	// 	sub_2B1D0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20c200: {
	// 	sub_2B200(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20c260: {
	// 	sub_2B260(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20c750: {
	// 	sub_2B750(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20c760: {
	// 	sub_2B760(a1_6E8E);		 
	// 	break;
	// }

	// case 0x20c780: {
	// 	sub_2B780(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20c7b0: {
	// 	sub_2B7B0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20c7e0: {
	// 	sub_2B7E0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20c840: {
	// 	sub_2B840(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20c860: {
	// 	sub_2B860(a1_6E8E,0);		 
	// 	break;
	// }


	// case 0x20c9a0: {
	// 	sub_2B9A0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x20ca50: {
	// 	sub_2BA50(a1_6E8E,0);		 
	// 	break;
	// }
	/*case 0x20cb40: {
		sub_2BB40_draw_bitmap((Bit16s)a1,0,(posistruct)0);
		 
		break;
	}*/
	/*case 0x20cbb0: {
		sub_2BBB0((short)a1,0, (posistruct)0);
		 
		break;
	}*/

// FIXME: types
	// // case 0x20cc10: {
	// 	sub_2BC10_draw_text((char*)a1_6E8E,0,0,0);		 
	// 	break;
	// }
	// case 0x20cc80: {
	// 	sub_2BC80((Bit16u)a1_6E8E,0,0,0,0);		 
	// 	break;
	// }



	// case 0x211be0: {
	// 	sub_30BE0((Bit32s*)a1_6E8E,0);
	// 	break;
	// }
	// case 0x211d50: {
	// 	sub_30D50(a1_6E8E);		 
	// 	break;
	// }
	// case 0x211f60: {
	// 	sub_30F60(a1_6E8E);		 
	// 	break;
	// }
	// case 0x212100: {
	// 	sub_31100(a1_6E8E);		 
	// 	break;
	// }
	// case 0x212120: {
	// 	sub_31120(a1_6E8E);		 
	// 	break;
	// }


	// case 0x2121e0: {
	// 	sub_311E0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x212760: {
	// 	sub_31760(a1_6E8E);
	// 	break;
	// }
	// case 0x212870: {
	// 	sub_31870(a1_6E8E);		 
	// 	break;
	// }
	// case 0x212890: {
	// 	sub_31890(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2128b0: {//end of water splash
	// 	sub_318B0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x212920: {
	// 	sub_31920(a1_6E8E);
	// 	break;
	// }
	// case 0x212940: {
	// 	sub_31940(a1_6E8E);		 
	// 	break;
	// }
	// case 0x212e90: {
	// 	sub_31E90(a1_6E8E);		 
	// 	break;
	// }
	// case 0x212f00: {
	// 	sub_31F00(a1_6E8E,0,0);		 
	// 	break;
	// }
	// case 0x212fb0: {
	// 	sub_31FB0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x2130e0: {
	// 	sub_320E0(a1_6E8E);//posses spell drop
	// 	//debug
	// 	//sub_4AA40(a1);//castle create
	// 	//sub_5FA70(a1);//castle create2		
	// 	//debug		 
	// 	break;
	// }
	// case 0x213120: {
	// 	sub_32120(a1_6E8E);		 
	// 	break;
	// }
	// case 0x213160: {//in quest point3
	// 	sub_32160(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2132a0: {
	// 	sub_322A0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2133e0: {//in quest point2
	// 	sub_323E0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x213400: {
	// 	sub_32400(a1_6E8E);		 
	// 	break;
	// }
	// case 0x213420: {
	// 	sub_32420(a1_6E8E);		 
	// 	break;
	// }
	// case 0x213520: {
	// 	sub_32520__wcpp_1_unwind_leave__69(a1_6E8E);		 
	// 	break;
	// }
	// case 0x213530: {
	// 	sub_32530(a1_6E8E);		 
	// 	break;
	// }
	// case 0x213600: {
	// 	sub_32600(a1_6E8E);		 
	// 	break;
	// }
	// case 0x213880: {
	// 	sub_32880(a1_6E8E);		 
	// 	break;
	// }

	// case 0x213a70: {
	// 	sub_32A70(a1_6E8E);		 
	// 	break;
	// }
	// case 0x213cf0: {
	// 	sub_32CF0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x213f40: {
	// 	sub_32F40(a1_6E8E);
	// 	break;
	// }
	// case 0x214110: {
	// 	sub_33110(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2141a0: {
	// 	sub_331A0(a1_6E8E);
	// 	break;
	// }

	// case 0x214340: {
	// 	sub_33340(a1_6E8E);		 
	// 	break;
	// }
	// case 0x214710: {
	// 	sub_33710(a1_6E8E);		 
	// 	break;
	// }
	// case 0x214810: {
	// 	sub_33810(a1_6E8E,0);
	// 	break;
	// }
	// case 0x2148d0: {
	// 	sub_338D0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2149b0: {
	// 	sub_339B0(a1_6E8E);
	// 	break;
	// }


	// case 0x214ad0: {
	// 	sub_33AD0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x214b20: {
	// 	sub_33B20(a1_6E8E);		 
	// 	break;
	// }
	// case 0x214c00: {
	// 	sub_33C00(a1_6E8E);		 
	// 	break;
	// }
	// case 0x214c70: {
	// 	sub_33C70(a1_6E8E);		 
	// 	break;
	// }
	// case 0x214d40: {
	// 	sub_33D40(a1_6E8E);		 
	// 	break;
	// }



	// case 0x214d80: {
	// 	sub_33D80(a1_6E8E);		 
	// 	break;
	// }
	// case 0x214e20: {
	// 	sub_33E20(a1_6E8E);		 
	// 	break;
	// }
	// case 0x214e80: {
	// 	sub_33E80(a1_6E8E);		 
	// 	break;
	// }
	// case 0x214f70: {
	// 	sub_33F70((int)a1_6E8E);
	// 	break;
	// }
	// case 0x215000: {
	// 	sub_34000(a1_6E8E);
	// 	break;
	// }


	// case 0x215110: {
	// 	sub_34110(a1_6E8E);
	// 	break;
	// }
	// case 0x215210: {
	// 	sub_34210(a1_6E8E);
	// 	break;
	// }
	// case 0x215330: {
	// 	sub_34330(a1_6E8E);
	// 	break;
	// }
	// case 0x215350: {
	// 	sub_34350(a1_6E8E);
	// 	break;
	// }
	// case 0x215390: {
	// 	sub_34390(a1_6E8E);
	// 	break;
	// }
	// case 0x2153c0: {
	// 	sub_343C0(a1_6E8E);
	// 	break;
	// }




	// case 0x2153f0: {//2 instances in level 1
	// 	sub_343F0(a1_6E8E);
	// 	break;
	// }

	// case 0x215480: {
	// 	sub_34480(a1_6E8E);
	// 	break;
	// }
	// case 0x2154a0: {
	// 	sub_344A0(a1_6E8E);
	// 	break;
	// }
	// case 0x215520: {
	// 	sub_34520(a1_6E8E);
	// 	break;
	// }
	// case 0x215540: {
	// 	sub_34540(a1_6E8E);
	// 	break;
	// }
	// case 0x215910: {
	// 	sub_34910(a1_6E8E);
	// 	break;
	// }

	// case 0x215b00: {
	// 	sub_34B00((char)a1_6E8E,0,0,0);
	// 	break;
	// }
	// case 0x215c40: {
	// 	sub_34C40(a1_6E8E);
	// 	break;
	// }
	// case 0x215ee0: {
	// 	sub_34EE0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2162a0: {
	// 	sub_352A0(a1_6E8E);
	// 	break;
	// }
	// case 0x2162c0: {
	// 	sub_352C0(a1_6E8E);
	// 	break;
	// }

	// case 0x216390: {
	// 	sub_35390(a1_6E8E);		 
	// 	break;
	// }
	// case 0x216530: {
	// 	sub_35530(a1_6E8E);
		 
	// 	break;
	// }
	// case 0x216600: {
	// 	sub_35600(a1_6E8E);
	// 	break;
	// }
	// case 0x216640: {//lighting II
	// 	sub_35640(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2167c0: {
	// 	sub_357C0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x216940: {//end of mana sphere making(move sphere)
	// 	sub_35940(a1_6E8E);		 
	// 	break;
	// }
	// case 0x216FB0: {
	// 	sub_35FB0(a1_6E8E);
	// 	break;
	// }
	// case 0x217680: {
	// 	sub_36680(a1_6E8E);
	// 	break;
	// }
	// case 0x217770: {
	// 	sub_36770(a1_6E8E);		 
	// 	break;
	// }


	// case 0x217850: {
	// 	sub_36850(a1_6E8E);		 
	// 	break;
	// }
	// case 0x217920: {
	// 	sub_36920(a1_6E8E);
	// 	break;
	// }
	// case 0x2179f0: {
	// 	sub_369F0((int)a1_6E8E);
	// 	break;
	// }
	// case 0x217a50: {
	// 	sub_36A50((int)a1_6E8E);
	// 	break;
	// }
	// case 0x217ae0: {//enemy dead
	// 	sub_36AE0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x217ba0: {
	// 	sub_36BA0(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x217d50: {
	// 	sub_36D50(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x217f30: {
	// 	sub_36F30(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x217fc0: {
	// 	sub_36FC0(a1_6E8E);
	// 	break;
	// }
	// case 0x218240: {//255 instances in level 1
	// 	sub_37240(a1_6E8E);		 
	// 	break;
	// }

	// case 0x218740: {
	// 	sub_37740(a1_6E8E);
	// 	break;
	// }
	// case 0x2187a0: {
	// 	sub_377A0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2187f0: {
	// 	sub_377F0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x218bc0: {
	// 	sub_37BC0_modify_terrain(a1_6E8E);		 
	// 	break;
	// }
	// case 0x219270: {
	// 	sub_38270(a1_6E8E);		 
	// 	break;
	// }

	// case 0x219330: {
	// 	sub_38330(a1_6E8E);
	// 	break;
	// }
	// case 0x2195c0: {
	// 	sub_385C0_remove_castle_stage(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2199f0: {//cast castleII 2
	// 	sub_389F0(a1_6E8E);
	// 	break;
	// }
	// case 0x219b00: {
	// 	sub_38B00(a1_6E8E);
	// 	break;
	// }


	// case 0x219b90: {
	// 	sub_38B90(a1_6E8E);
	// 	break;
	// }
	// case 0x219d80: {
	// 	sub_38D80(a1_6E8E);
	// 	break;
	// }
	// case 0x219e20: {
	// 	sub_38E20(a1_6E8E);
	// 	break;
	// }
	// case 0x219e40: {
	// 	sub_38E40(a1_6E8E);
	// 	break;
	// }
	// case 0x219e70: {
	// 	sub_38E70(a1_6E8E);
	// 	break;
	// }



	// case 0x219f70: {
	// 	sub_38F70(a1_6E8E);
	// 	break;
	// }
	// case 0x21a040: {
	// 	sub_39040(a1_6E8E);		 
	// 	break;
	// }
	// case 0x21a6a0: {
	// 	sub_396A0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x21a6d0: {
	// 	sub_396D0(a1_6E8E);
	// 	break;
	// }
	// case 0x21ab60: {
	// 	sub_39B60(a1_6E8E);		 
	// 	break;
	// }


	// case 0x21ae40: {
	// 	sub_39E40(a1_6E8E);
	// 	break;
	// }
	// case 0x21afa0: {
	// 	sub_39FA0(a1_6E8E,0);
	// 	break;
	// }
	// case 0x21b909: {
	// 	sub_3A090(a1_6E8E);		 
	// 	break;
	// }
	// case 0x21b200: {
	// 	sub_3A200(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x21b2d0: {
	// 	sub_3A2D0(a1_6E8E);		 
	// 	break;
	// }


	// case 0x21b5b0: {
	// 	sub_3A5B0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x21b630: {
	// 	sub_3A630(a1_6E8E);		 
	// 	break;
	// }
	// case 0x21b650: {
	// 	sub_3A650(a1_6E8E);
	// 	break;
	// }
	// case 0x21b7f0: {
	// 	sub_3A7F0(a1_6E8E);
	// 	break;
	// }
	// case 0x21b8b0: {
	// 	sub_3A8B0(a1_6E8E);
	// 	break;
	// }

	// case 0x21bf00: {
	// 	sub_3AF00_castle_defend_event(a1_6E8E);		 
	// 	break;
	// }


	// case 0x232bb0: {
	// 	sub_51BB0_game_events(/*a1*/);		 
	// 	break;
	// }
	// case 0x233d70: {
	// 	sub_52D70((unsigned short)a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x233e90: {
	// 	sub_52E90((type_str_0x2BDE*)a1_6E8E,0,0);		 
	// 	break;
	// }
	// case 0x234120: {
	// 	sub_53120();		 
	// 	break;
	// }
	// case 0x234160: {
	// 	sub_53160();		 
	// 	break;
	// }
	// case 0x2343b0: {
	// 	sub_533B0_decompress_levels((short)a1_6E8E,0);
	// 	break;
	// }
	// case 0x234590: {
	// 	sub_53590((type_str_2FECE*)a1_6E8E);		 
	// 	break;
	// }



	// 			   /*
	// 			   char sub_595C0(int16_t a1)//23a5c0
	// 			   char sub_59610(Bit8u** a1, int16_t a2)//23a610
	// 			   char sub_596C0(x_WORD *a1, int16_t a2)//23a6c0
	// 			   void sub_59760(Bit8u* a1, Bit8u* a2)//23a760
	// 			   void sub_59820()//23a820

	// 			   int sub_59A50_sound_proc8()//23aa50
	// 			   void sub_59AF0_sound_proc9()//23aaf0
	// 			   void sub_59B50_sound_proc10(HMDIDRIVER user)//23ab50
	// 			   void sub_59BF0_sound_proc11_volume()//23abf0
	// 			   */

	// case 0x23ac40: {
	// 	sub_59C40_getTerrtoZ(a1_6E8E);
	// 	break;
	// }
	// case 0x23ac60: {
	// 	sub_59C60(a1_6E8E);
	// 	break;
	// }
	// case 0x23ac80: {
	// 	sub_59C80(a1_6E8E);
	// 	break;
	// }
	// case 0x23adc0: {
	// 	sub_59DC0(a1_6E8E);
	// 	break;
	// }
	// case 0x23af60: {
	// 	sub_59F60(a1_6E8E);		 
	// 	break;
	// }

	// case 0x23c070: {
	// 	sub_5B070(a1_6E8E);		 
	// 	break;
	// }
	// case 0x23c100: {
	// 	sub_5B100(a1_6E8E);		 
	// 	break;
	// }


	// case 0x23f010: {
	// 	sub_5E010(a1_6E8E);		 
	// 	break;
	// }
	// case 0x23f310: {
	// 	sub_5E310_multiplayer_test_die(a1_6E8E);//enemy player die		 
	// 	break;
	// }
	// case 0x23f660: {
	// 	sub_5E660(a1_6E8E);
	// 	break;
	// }
	// case 0x23f6c0: {
	// 	sub_5E6C0(a1_6E8E);
	// 	break;
	// }


	// case 0x23f7c0: {
	// 	sub_5E7C0_multiplayer_test_banished(a1_6E8E);		 
	// 	break;
	// }
	// case 0x23f8c0: {
	// 	sub_5E8C0_endGameSeq(a1_6E8E);
	// 	break;
	// }
	// case 0x23ff70: {
	// 	sub_5EF70(a1_6E8E);
	// 	break;
	// }
	// case 0x23ffa0: {
	// 	sub_5EFA0(a1_6E8E);
	// 	break;
	// }

	// case 0x240380: {
	// 	sub_5F380(a1_6E8E);		 
	// 	break;
	// }
	// case 0x240660: {
	// 	sub_5F660(a1_6E8E,0,0);
	// 	break;
	// }
	// case 0x2407b0: {
	// 	sub_5F7B0(a1_6E8E,0,0);
	// 	break;
	// }
	// case 0x2407e0: {
	// 	sub_5F7E0(a1_6E8E,0);
	// 	break;
	// }
	// case 0x240810: {
	// 	sub_5F810(a1_6E8E,0,0);
	// 	break;
	// }


	// case 0x240890: {
	// 	sub_5F890(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x2408f0: {
	// 	sub_5F8F0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x240a70: {
	// 	sub_5FA70(a1_6E8E);//castle create2		 
	// 	break;
	// }
	// case 0x240bd0: {
	// 	sub_5FBD0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x240c40: {
	// 	sub_5FC40(a1_6E8E);
	// 	break;
	// }

	// case 0x240ca0: {
	// 	sub_5FCA0_destroy_castle_level(a1_6E8E);
	// 	break;
	// }
	// case 0x240d00: {
	// 	sub_5FD00(a1_6E8E);		 
	// 	break;
	// }
	// case 0x240f50: {
	// 	 sub_5FF50(a1_6E8E);
	// 	break;
	// }
	// case 0x241400: {
	// 	sub_60400((short)a1_6E8E,0,0);
	// 	break;
	// }
	// case 0x241480: {
	// 	sub_60480(a1_6E8E);		 
	// 	break;
	// }


	// case 0x2415e0: {
	// 	sub_605E0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x241780: {
	// 	sub_60780(a1_6E8E,0,0,0);
	// 	break;
	// }
	// case 0x241810: {
	// 	sub_60810(a1_6E8E);
	// 	break;
	// }
	// case 0x2419e0: {
	// 	sub_609E0(a1_6E8E);
	// 	break;
	// }
	// case 0x241ab0: {
	// 	sub_60AB0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x241d50: {
	// 	sub_60D50((axis_3d*)a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x241ea0: {
	// 	sub_60EA0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x241f00: {
	// 	sub_60F00();		 
	// 	break;
	// }
	// case 0x242000: {
	// 	sub_61000(a1_6E8E);
	// 	break;
	// }
	// case 0x242050: {
	// 	sub_61050(a1_6E8E);
	// 	break;
	// }

	// case 0x2423d0: {
	// 	sub_613D0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x242620: {
	// 	sub_61620(a1_6E8E,0);
	// 	break;
	// }
	// case 0x2426d0: {
	// 	sub_616D0((int)a1_6E8E);
	// 	break;
	// }
	// case 0x242790: {
	// 	sub_61790((int)a1_6E8E);
	// 	break;
	// }
	// case 0x242810: {
	// 	sub_61810(a1_6E8E,0);
	// 	break;
	// }


	// case 0x242880: {
	// 	sub_61880_draw_minimap_entites((int)a1_6E8E,0, 0, 0, 0, 0, 0, 0);		 
	// 	break;
	// }
	// case 0x242a00: {
	// 	sub_61A00_draw_minimap_entites_b((int)a1_6E8E,0, 0, 0, 0, 0, 0, 0);		 
	// 	break;
	// }
	// case 0x2437f0: {
	// 	sub_627F0_draw_minimap_entites_a((int)a1_6E8E,0, 0, 0, 0, 0, 0, 0);		 
	// 	break;
	// }
	// case 0x244570: {
	// 	sub_63570(a1_6E8E,0);
	// 	break;
	// }
	// case 0x244600: {
	// 	sub_63600_draw_minimap((int)a1_6E8E,0,0, 0, 0, 0, 0, 0,0,0);		 
	// 	break;
	// }

	// case 0x244670: {
	// 	sub_63670_draw_minimap_a((int)a1_6E8E,0,0, 0, 0, 0, 0, 0,0,0);		 
	// 	break;
	// }
	// case 0x244c90: {
	// 	sub_63C90_draw_minimap_b((int)a1_6E8E,0,0, 0, 0, 0, 0, 0,0,0);		 
	// 	break;
	// }
	// case 0x2454f0: {
	// 	sub_644F0_draw_minimap_marks((int)a1_6E8E,0,0, 0, 0, 0, 0, 0);		 
	// 	break;
	// }
	// case 0x245ce0: {
	// 	sub_64CE0_draw_follow_rectangle((v51x_struct*)a1_6E8E);
	// 	break;
	// }
	// case 0x245e20: {
	// 	sub_64E20(a1_6E8E);
	// 	break;
	// }

	// case 0x245f60: {
	// 	sub_64F60(a1_6E8E);
	// 	break;
	// }
	// case 0x245ff0: {
	// 	sub_64FF0(a1_6E8E);
	// 	break;
	// }
	// case 0x246040: {
	// 	sub_65040(a1_6E8E);
	// 	break;
	// }
	// case 0x246080: {
	// 	sub_65080(a1_6E8E);
	// 	break;
	// }	
	// case 0x246110: {
	// 	sub_65110(a1_6E8E);
	// 	break;
	// }


	// case 0x2461b0: {
	// 	sub_651B0(a1_6E8E);
	// 	break;
	// }
	// case 0x246240: {
	// 	sub_65240(a1_6E8E);
	// 	break;
	// }
	// case 0x246280: {
	// 	sub_65280(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2462a0: {
	// 	sub_652A0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2462c0: {
	// 	sub_652C0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x2464b0: {
	// 	sub_654B0(a1_6E8E);
	// 	break;
	// }
	// case 0x246580: {
	// 	sub_65580(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2465a0: {
	// 	sub_655A0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2465c0: {
	// 	sub_655C0(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x246610: {
	// 	sub_65610(a1_6E8E,0);		 
	// 	break;
	// }


	// case 0x2466d0: {
	// 	sub_656D0(a1_6E8E,0);
	// 	break;
	// }
	// case 0x246780: {
	// 	sub_65780(a1_6E8E,0,0);		 
	// 	break;
	// }
	// case 0x246820: {
	// 	sub_65820(a1_6E8E);
	// 	break;
	// }
	// case 0x246b30: {
	// 	sub_65B30(a1_6E8E);//fly fire projectile		 
	// 	break;
	// }
	// case 0x246b50: {
	// 	sub_65B50(a1_6E8E);		 
	// 	break;
	// }
	// case 0x246c20: {
	// 	sub_65C20(a1_6E8E);
	// 	break;
	// }
	// case 0x246f60: {
	// 	sub_65F60(a1_6E8E);//fly possess projectile		 
	// 	break;
	// }

	// case 0x247160: {
	// 	sub_66160(a1_6E8E);
	// 	break;
	// }
	// case 0x247180: {
	// 	sub_66180(a1_6E8E);		 
	// 	break;	
	// }
	// case 0x247250: {
	// 	sub_66250(a1_6E8E);
	// 	break;
	// }
	// case 0x247280: {
	// 	sub_66280(a1_6E8E);
	// 	break;
	// }
	// case 0x2472a0: {
	// 	sub_662A0(a1_6E8E);
	// 	break;
	// }
	// case 0x2472c0: {
	// 	sub_662C0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x2472e0: {
	// 	sub_662E0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x247610: {
	// 	sub_66610(a1_6E8E);		 
	// 	break;
	// }
	// case 0x247750: {
	// 	sub_66750(a1_6E8E);		 
	// 	break;
	// }
	// case 0x247b30: {
	// 	sub_66B30(a1_6E8E);//castle fly projectile		 
	// 	break;
	// }
	// case 0x247d00: {
	// 	sub_66D00(a1_6E8E);
	// 	break;
	// }
	// case 0x247fb0: {
	// 	sub_66FB0(a1_6E8E);
	// 	break;
	// }
	// case 0x247fd0: {//lighting II
	// 	sub_66FD0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x2482e0: {//arrow2
	// 	sub_672E0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x248410: {
	// 	sub_67410(a1_6E8E);		 
	// 	break;
	// }
	// case 0x248430: {
	// 	sub_67430(a1_6E8E);		 
	// 	break;
	// }
	// case 0x248450: {
	// 	sub_67450(a1_6E8E);		 
	// 	break;
	// }
	// case 0x248470: {
	// 	sub_67470(a1_6E8E);		 
	// 	break;
	// }



	// case 0x2484c0: {
	// 	sub_674C0(a1_6E8E);//possess mana ii		 
	// 	break;
	// }
	// case 0x2486f0: {
	// 	sub_676F0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x248740: {
	// 	sub_67740(a1_6E8E);		 
	// 	break;
	// }
	// case 0x248760: {
	// 	sub_67760(a1_6E8E);		 
	// 	break;
	// }
	// case 0x248780: {
	// 	sub_67780(a1_6E8E);		 
	// 	break;
	// }


	// case 0x2487a0: {
	// 	sub_677A0(a1_6E8E);		 
	// 	break;
	// 			   }
	// case 0x2487d0: {
	// 	sub_677D0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x248800: {
	// 	sub_67800(a1_6E8E);		 
	// 	break;
	// }
	// case 0x248890: {
	// 	sub_67890(a1_6E8E);		 
	// 	break;
	// }
	// case 0x2488e0: {
	// 	sub_678E0(a1_6E8E);		 
	// 	break;
	// }


	// case 0x248910: {
	// 	sub_67910(a1_6E8E);		 
	// 	break;
	// }
	// case 0x248940: {
	// 	sub_67940(a1_6E8E);		 
	// 	break;
	// }
	// case 0x248960: {
	// 	sub_67960(a1_6E8E/*,0*/);		 
	// 	break;
	// }
	// case 0x248cb0: {
	// 	sub_67CB0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x249490: {
	// 	sub_68490(a1_6E8E,0,0,0);		 
	// 	break;
	// }


	// case 0x2495d0: {
	// 	sub_685D0(a1_6E8E,0,0,0);		 
	// 	break;
	// }
	// case 0x2496d0: {
	// 	sub_686D0(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x249740: {
	// 	sub_68740(a1_6E8E,0,0,0);		 
	// 	break;
	// }
	// case 0x249940: {
	// 	sub_68940(a1_6E8E);		 
	// 	break;
	// }
	// case 0x249ac0: {
	// 	sub_68AC0(a1_6E8E,0);		 
	// 	break;
	// }


	// case 0x249bd0: {
	// 	sub_68BD0(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x249bf0: {
	// 	sub_68BF0();		 
	// 	break;
	// }
	// case 0x249c70: {
	// 	sub_68C70(a1_6E8E);		 
	// 	break;
	// }
	// case 0x249d50: {
	// 	sub_68D50(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x249de0: {
	// 	sub_68DE0(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x249e50: {
	// 	sub_68E50(a1_6E8E,0,0);		 
	// 	break;
	// }

	// case 0x249f00: {
	// 	sub_68FF0(a1_6E8E,0,0);
	// 	break;
	// }
	// case 0x24a250: {
	// 	sub_69250(a1_6E8E);
	// 	break;
	// }
	// case 0x24a2a0: {
	// 	sub_692A0(a1_6E8E);
	// 	break;
	// }
	// case 0x24a2c0: {
	// 	sub_692C0(a1_6E8E);
	// 	break;
	// }
	// case 0x24a300: {
	// 	sub_69300(a1_6E8E,0);		 
	// 	break;
	// }


	// case 0x24a3f0: {
	// 	sub_693F0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24a600: {
	// 	sub_69600(a1_6E8E);
	// 	break;
	// }
	// case 0x24a620: {
	// 	sub_69620(a1_6E8E);
	// 	break;
	// }
	// case 0x24a640: {
	// 	sub_69640(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24a900: {
	// 	sub_69900(a1_6E8E,0);		 
	// 	break;
	// }


	// case 0x24aa70: {
	// 	sub_69A70(a1_6E8E);
	// 	break;
	// }
	// case 0x24aa90: {
	// 	sub_69A90(a1_6E8E);
	// 	break;
	// }
	// case 0x24aab0: {//get scroll6
	// 	sub_69AB0(a1_6E8E);
	// 	break;
	// }
	// case 0x24ad70: {
	// 	sub_69D70(a1_6E8E);
	// 	break;
	// }
	// case 0x24ad90: {
	// 	sub_69D90(a1_6E8E);
	// 	break;
	// }


	// case 0x24adb0: {
	// 	sub_69DB0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24aff0: {
	// 	sub_69FF0(a1_6E8E);
	// 	break;
	// }




	// case 0x24b010: {
	// 	sub_6A010(a1_6E8E);
	// 	break;
	// }
	// case 0x24b030: {
	// 	sub_6A030(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24b2c0: {
	// 	sub_6A2C0(a1_6E8E);
	// 	break;
	// }
	// case 0x24b2e0: {
	// 	sub_6A2E0(a1_6E8E);
	// 	break;
	// }
	// case 0x24b300: {
	// 	sub_6A300(a1_6E8E);		 
	// 	break;
	// }


	// case 0x24b440: {
	// 	sub_6A440(a1_6E8E);
	// 	break;
	// }
	// case 0x24b460: {
	// 	sub_6A460(a1_6E8E);
	// 	break;
	// }
	// case 0x24b480: {
	// 	sub_6A480(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24b580: {
	// 	sub_6A580(a1_6E8E);
	// 	break;
	// }
	// case 0x24b5a0: {
	// 	sub_6A5A0(a1_6E8E);
	// 	break;
	// }

	// case 0x24b5c0: {
	// 	sub_6A5C0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24b9c0: {
	// 	 sub_6A9C0(a1_6E8E);
	// 	break;
	// }
	// case 0x24b9e0: {
	// 	sub_6A9E0(a1_6E8E);
	// 	break;
	// }
	// case 0x24ba00: {
	// 	sub_6AA00(a1_6E8E);
	// 	break;
	// }
	// case 0x24bac0: {
	// 	sub_6AAC0(a1_6E8E);
	// 	break;
	// }

	// case 0x24bae0: {
	// 	sub_6AAE0(a1_6E8E);
	// 	break;
	// }
	// case 0x24bb00: {
	// 	sub_6AB00(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24bd00: {
	// 	sub_6AD00(a1_6E8E);
	// 	break;
	// }
	// case 0x24bd20: {
	// 	sub_6AD20(a1_6E8E);
	// 	break;
	// }
	// case 0x24bd60: {
	// 	sub_6AD60(a1_6E8E);		 
	// 	break;
	// }

	// case 0x24c180: {
	// 	sub_6B180(a1_6E8E);
	// 	break;
	// }
	// case 0x24c1a0: {
	// 	sub_6B1A0(a1_6E8E);
	// 	break;
	// }
	// case 0x24c1c0: {
	// 	sub_6B1C0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24c2d0: {
	// 	sub_6B2D0(a1_6E8E);
	// 	break;
	// }
	// case 0x24c2f0: {
	// 	sub_6B2F0(a1_6E8E);
	// 	break;
	// }


	// case 0x24c310: {
	// 	sub_6B310(a1_6E8E);
	// 	break;
	// }
	// case 0x24c3a0: {
	// 	sub_6B3A0(a1_6E8E);
	// 	break;
	// }
	// case 0x24c3c0: {
	// 	sub_6B3C0(a1_6E8E);
	// 	break;
	// }
	// case 0x24c3e0: {
	// 	sub_6B3E0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24c5d0: {
	// 	sub_6B5D0(a1_6E8E);
	// 	break;
	// }


	// case 0x24c5f0: {
	// 	sub_6B5F0(a1_6E8E);
	// 	break;
	// }
	// case 0x24c610: {
	// 	sub_6B610(a1_6E8E);
	// 	break;
	// }
	// case 0x24c830: {
	// 	sub_6B830(a1_6E8E);
	// 	break;
	// }
	// case 0x24c850: {
	// 	sub_6B850(a1_6E8E);
	// 	break;
	// }
	// case 0x24c870: {
	// 	sub_6B870(a1_6E8E);		 
	// 	break;
	// }


	// case 0x24ca70: {
	// 	sub_6BA70(a1_6E8E);
	// 	break;
	// }
	// case 0x24ca90: {
	// 	sub_6BA90(a1_6E8E);
	// 	break;
	// }
	// case 0x24cab0: {
	// 	sub_6BAB0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24ccb0: {
	// 	sub_6BCB0(a1_6E8E);
	// 	break;
	// }
	// case 0x24ccd0: {
	// 	sub_6BCD0(a1_6E8E);
	// 	break;
	// }


	// case 0x24ccf0: {
	// 	sub_6BCF0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24cef0: {
	// 	sub_6BEF0(a1_6E8E);
	// 	break;
	// }
	// case 0x24cf10: {
	// 	sub_6BF10(a1_6E8E);
	// 	break;
	// }
	// case 0x24cf30: {
	// 	sub_6BF30(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24d130: {
	// 	sub_6C130(a1_6E8E);
	// 	break;
	// }

	// case 0x24d150: {
	// 	sub_6C150(a1_6E8E);
	// 	break;
	// }
	// case 0x24d170: {
	// 	sub_6C170(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24d3a0: {
	// 	sub_6C3A0(a1_6E8E);
	// 	break;
	// }
	// case 0x24d3c0: {
	// 	sub_6C3C0(a1_6E8E);
	// 	break;
	// }
	// case 0x24d3e0: {
	// 	sub_6C3E0(a1_6E8E);		 
	// 	break;
	// }


	// case 0x24d5e0: {
	// 	sub_6C5E0(a1_6E8E);
	// 	break;
	// }
	// case 0x24d600: {
	// 	sub_6C600(a1_6E8E);
	// 	break;
	// }
	// case 0x24d620: {
	// 	sub_6C620(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24d830: {
	// 	sub_6C830(a1_6E8E);
	// 	break;
	// }
	// case 0x24d850: {
	// 	sub_6C850(a1_6E8E);
	// 	break;
	// }


	// case 0x24d870: {
	// 	sub_6C870(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24da80: {
	// 	sub_6CA80(a1_6E8E);
	// 	break;
	// }
	// case 0x24daa0: {
	// 	sub_6CAA0(a1_6E8E);
	// 	break;
	// }
	// case 0x24dac0: {
	// 	sub_6CAC0(a1_6E8E);		 
	// 	break;
	// }
	// case 0x24dce0: {
	// 	sub_6CCE0(a1_6E8E);
	// 	break;
	// }

	// case 0x24dd00: {
	// 	sub_6CD00(a1_6E8E);
	// 	break;
	// }
	// case 0x24dd20: {
	// 	sub_6CD20(a1_6E8E);
		 
	// 	break;
	// }
	// case 0x24df60: {
	// 	sub_6CF60(a1_6E8E);
	// 	break;
	// }
	// case 0x24df80: {
	// 	sub_6CF80(a1_6E8E);
	// 	break;
	// }
	// case 0x24dfa0: {
	// 	sub_6CFA0(a1_6E8E);		 
	// 	break;
	// }

	// case 0x24e1c0: {
	// 	sub_6D1C0(a1_6E8E);
	// 	break;
	// }
	// case 0x24e1e0: {
	// 	sub_6D1E0(a1_6E8E);
	// 	break;
	// }
	// case 0x24e200: {
	// 	sub_6D200((type_str_0x2BDE*)a1_6E8E);		 
	// 	break;
	// }
	// case 0x24e420: {
	// 	sub_6D420_mouse_to_spell((short)a1_6E8E,0);
	// 	break;
	// }
	// case 0x24e4c0: {
	// 	sub_6D4C0((type_str_611*)a1_6E8E);
	// 	break;
	// }

	// /*case 0x24e4f0: {
	// 	 sub_6D4F0((Bit8u*)a1,0);
	// 	break;
	// }*/
	// case 0x24e5e0: {
	// 	sub_6D5E0(a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x24e710: {
	// 	sub_6D710(a1_6E8E,0,0);
	// 	break;
	// }
	// case 0x24e830: {
	// 	sub_6D830(a1_6E8E,0);
	// 	break;
	// }
	// case 0x24e880: {
	// 	sub_6D880(a1_6E8E);		 
	// 	break;
	// }


	// case 0x24e8b0: {
	// 	sub_6D8B0((unsigned short)a1_6E8E,0,0);		 
	// 	break;
	// }
	// case 0x24e9c0: {
	// 	sub_6D9C0((type_str_611*)a1_6E8E,0,0,0,0);		 
	// 	break;
	// }
	// case 0x24ead0: {
	// 	sub_6DAD0((type_str_611*)a1_6E8E,0,0);		 
	// 	break;
	// }
	// case 0x24eb50: {
	// 	sub_6DB50((char)a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x24ebd0: {
	// 	sub_6DBD0();		 
	// 	break;
	// }

	// case 0x24ec40: {
	// 	sub_6DC40_improve_ability((unsigned char)a1_6E8E);		 
	// 	break;
	// }
	// case 0x24eca0: {
	// 	sub_6DCA0(a1_6E8E,0,0,0,0,0);
	// 	break;
	// }
	// case 0x24f020: {
	// 	sub_6E020((unsigned short)a1_6E8E);
	// 	break;
	// }
	// case 0x24f090: {
	// 	sub_6E090((type_str_611*)a1_6E8E,0);		 
	// 	break;
	// }
	// case 0x24f0d0: {
	// 	sub_6E0D0();		 
	// 	break;
	// }

	// case 0x24f150: {
	// 	sub_6E150();		 
	// 	break;
	// }
	// case 0x24f450: {
	// 	sub_6E450_distance_sound((short)a1_6E8E,0,0);		 
	// 	break;
	// }
	// case 0x24fa90: {
	// 	sub_6EA90((int)a1_6E8E,0);
	// 	break;
	// }
	// case 0x24fab0: {
	// 	sub_6EAB0((int)a1_6E8E,0,0);		 
	// 	break;
	// }
	// case 0x24fb90: {
	// 	sub_6EB90((filearray_struct*)a1_6E8E);		 
	// 	break;
	// }


	// case 0x24FBF0: {
	// 	sub_6EBF0((filearray_struct*)a1_6E8E);		 
	// 	break;
	// }
	case 0x24FDB0: {
		sub_6EDB0_set_mouse_position_by_res();		 
		break;
	}
	case 0x24fde0: {
		// FIXME: types
		// sub_6EDE0_set_mouse_position2((short)a1_6E8E,0);		 
		break;
	}
	case 0x24ff10: {
		// FIXME: types
		// sub_6EF10_set_mouse_minmax((short)a1_6E8E,0,0,0);		 
		break;
	}




	case 0x250030: {
		sub_6F030(a1_6E8E);
		break;
	}
	case 0x250070: {
		sub_6F070(a1_6E8E);
		break;
	}
	case 0x2500b0: {
		sub_6F0B0(a1_6E8E);
		break;
	}
	case 0x250100: {
		sub_6F100(a1_6E8E);
		break;
	}
	case 0x250150: {
		sub_6F150(a1_6E8E);
		break;
	}

	case 0x2501c0: {
		sub_6F1C0(a1_6E8E);
		break;
	}
	case 0x2502b0: {
		sub_6F2B0(a1_6E8E);		 
		break;
	}
	case 0x250300: {
		sub_6F300(a1_6E8E,0);
		break;
	}
	case 0x250420: {
		sub_6F420(a1_6E8E);
		break;
	}
	case 0x250440: {
		sub_6F440(a1_6E8E);
		break;
	}

	case 0x250460: {
		sub_6F460(a1_6E8E);
		break;
	}
	case 0x250480: {
		sub_6F480(a1_6E8E);
		break;
	}
	case 0x2504a0: {//get scroll4
		sub_6F4A0(a1_6E8E);
		break;
	}
	case 0x2504c0: {
		sub_6F4C0(a1_6E8E);
		break;
	}
	case 0x2504e0: {
		sub_6F4E0(a1_6E8E);
		break;
	}

	case 0x250500: {
		sub_6F500(a1_6E8E);
		break;
	}
	case 0x250520: {
		sub_6F520(a1_6E8E);
		break;
	}
	case 0x250540: {
		sub_6F540(a1_6E8E);
		break;
	}
	case 0x250560: {
		sub_6F560(a1_6E8E);
		break;
	}
	case 0x250580: {
		sub_6F580(a1_6E8E);
		break;
	}

	case 0x2505a0: {
		sub_6F5A0(a1_6E8E);
		break;
	}
	case 0x2505c0: {
		sub_6F5C0(a1_6E8E);
		break;
	}
	case 0x2505e0: {
		sub_6F5E0(a1_6E8E);
		break;
	}
	case 0x250600: {
		sub_6F600(a1_6E8E);
		break;
	}
	case 0x250620: {
		sub_6F620(a1_6E8E);
		break;
	}

	case 0x250640: {
		sub_6F640(a1_6E8E);
		break;
	}
	case 0x250660: {
		sub_6F660(a1_6E8E);
		break;
	}
	case 0x250680: {
		sub_6F680(a1_6E8E);
		break;
	}
	case 0x2506a0: {
		sub_6F6A0(a1_6E8E);
		break;
	}
	case 0x2506c0: {
		sub_6F6C0(a1_6E8E);
		break;
	}

	case 0x2506e0: {
		sub_6F6E0(a1_6E8E);
		break;
	}
	case 0x250700: {
		sub_6F700(a1_6E8E);
		break;
	}
	case 0x250720: {
		sub_6F720(a1_6E8E);
		break;
	}
	case 0x250740: {
		sub_6F740(a1_6E8E);
		break;
	}
	case 0x250760: {
		sub_6F760(a1_6E8E);
		break;
	}

	case 0x250780: {
		sub_6F780(a1_6E8E);
		break;
	}
	case 0x2507a0: {
		sub_6F7A0(a1_6E8E);
		break;
	}
	case 0x2507c0: {
		sub_6F7C0(a1_6E8E);
		break;
	}
	case 0x2507e0: {
		sub_6F7E0(a1_6E8E);
		break;
	}
	case 0x250850: {
		sub_6F850(a1_6E8E,0);
		break;
	}
	case 0x2508e0: {
		sub_6F8E0(a1_6E8E,0);
		break;
	}
	default: {
		// bad end
			int yy = 0;
		int xx = 157 / yy;
		mydelay(10000);
		exit(1);
		//bad end
	}

	}
	//return 0;
}


//----- (0004A190) --------------------------------------------------------
type_str_0x6E8E* sub_4A190(axis_3d* a1x, int a2, int a3)//22b190
{
	type_D4C52ar2* v3; // eax
	type_str_0x6E8E* resultx; // eax

	/*index = &x_DWORD_D4C56[18 * a1[0]];
	if (!*(Bit32u*)&x_DWORD_D4C56[(*(Bit32u*)index - 0x2a5c56) + 14 * a1[1] + 10])*/

	//v3 = *(Bit32u*)&x_DWORD_D4C56[(*(Bit32u*)&x_DWORD_D4C56[18 * a2] - 0x2a5c56) + 14 * a3];
	//v3 = *(Bit32u*)&x_DWORD_D4C52ar[4 + 18 * a2] + 14 * a3;
	v3 = &str_D4C48ar[a2].dword_14[a3];
	/*if (*(Bit32u*)&x_DWORD_D4C52ar[4+v3 - 0x2a5c56 + 10] && *(Bit16u*)&x_DWORD_D4C52ar[v3 - 0x2a5c52 + 4] == a3)
		resultx = pre_sub_4A190_axis_3d(*(Bit32u*)&x_DWORD_D4C52ar[v3 - 0x2a5c52 + 6],a1x,2);///(*(int(**)(Bit8u*))(v3 + 6))(a1);
	else
		resultx = 0;*/
	if(v3->dword_10 && v3->word_4==a3)
		resultx = pre_sub_4A190_axis_3d(v3->dword_6,a1x, 2);
	else
		resultx = 0;
	return resultx;
}
int debugcounter_0022B25D = 0;
//----- (0004A1E0) --------------------------------------------------------
void sub_4A1E0(int a1, char a2)//22b1e0
{
	//Bit8u* v2; // ebx
	//uint16_t *v3; // ebx
	int v3x;
	uint16_t v4; // ST04_2
	uint16_t v5; // ST00_2
	//Bit8u* ix; // ebx
	int iy;
	uint16_t v7; // ax
	//int result; // eax

	if (!a1)
	{
		//v2 = D41A0_BYTESTR_0.array_0x364D6;
		//*(x_DWORD *)(v2 - 4) = 0;
		D41A0_BYTESTR_0.str_0x364D2.dword_0x364D2 = 0;
		memset(D41A0_BYTESTR_0.str_0x364D2.dword_0x364D6, 0, 104);

		x_BYTE_F5538.fill(0);
		v3x = 1;
		//v3 = &D41A0_BYTESTR_0.str_2FECE.array_0x30311[1].str_0x30311_type;
		//while ((Bit8u*)v3 < &x_D41A0_BYTEARRAY_0[221393])
		while(v3x< 0x4b0)
		{
			//adress 22b21a

			v4 = D41A0_BYTESTR_0.str_2FECE.array_0x30311[v3x].str_0x30311_subtype;
			v5 = D41A0_BYTESTR_0.str_2FECE.array_0x30311[v3x].str_0x30311_type;
			//v3 += 10;
			v3x++;
			sub_716C0(v5, v4, 0xFFFFu);
		}
		sub_71780();
	}
	sub_49F90();
	sub_122C0(a1);//adress 22b257


	//for (ix = &x_D41A0_BYTEARRAY_0[197413]; ix < &x_D41A0_BYTEARRAY_0[221393]; ix += 20)
	for (iy = 1; iy < 0x4b0; iy++)
	{
		//adress 22b26e
		if (D41A0_BYTESTR_0.str_2FECE.array_0x30311[iy].str_0x30311_type && D41A0_BYTESTR_0.str_2FECE.array_0x30311[iy].DisId == a1)
		{//adress 22b278
			sub_4A310(&D41A0_BYTESTR_0.str_2FECE.array_0x30311[iy]);
			if (D41A0_BYTESTR_0.str_2FECE.array_0x30311[iy].str_0x30311_type == 5)
			{
				v7 = D41A0_BYTESTR_0.str_2FECE.array_0x30311[iy].str_0x30311_subtype;
				if (v7 < 0xCu || v7 > 0xFu && v7 != 22)
					D41A0_BYTESTR_0.str_0x364D2.dword_0x364D2++;
			}
			if (a2)
				D41A0_BYTESTR_0.str_2FECE.array_0x30311[iy].str_0x30311_type = 0;
		}
	}
	sub_12870();
	//result = (int)x_D41A0_BYTEARRAY_0;	
	D41A0_BYTESTR_0.dword_0x11e6 = -1;
//	return result;
}

int debugcounter_22b310=0;

//----- (0004A310) --------------------------------------------------------
void sub_4A310(type_str_0x30311* a1x)//22b310
{
	//Bit8u* indexy; // eax
	type_str_0x6E8E* indexx; // eax
	type_str_0x6E8E* v2x; // edx
	type_str_0x6E8E* v3x; // ebx
	Bit8u v4; // al
	int v5; // eax
	int16_t v6; // di
	//Bit8u* v7; // edx
	Bit8u v8; // al
	int v9; // eax
	Bit8u v10; // al
	axis_3d v11x; // [esp+0h] [ebp-8h]
	//int16_t v12; // [esp+2h] [ebp-6h]
	//int16_t v13; // [esp+4h] [ebp-4h]
	//Bit32u posxy;

	//indexy = &x_DWORD_D4C52ar[4+18 * a1x->str_0x30311_type];
	//indexy = &str_D4C48ar[a1x->str_0x30311_type].dword_14;
	//*(Bit32u*)&x_DWORD_D4C56[(*(Bit32u*)index - 0x2a5c56)+14* a1[1]+10]
	//if (!*(Bit32u*)&x_DWORD_D4C52ar[(str_D4C48ar[a1x->str_0x30311_type].dword_14 - 0x2a5c52) + 14 * a1x->str_0x30311_subtype + 10])//14*a1[1]+10
	if (!str_D4C48ar[a1x->str_0x30311_type].dword_14[a1x->str_0x30311_subtype].dword_10)
		return/* index*/;
	v11x.x = (a1x->axis2d_4.x << 8) + 128;
	v11x.y = (a1x->axis2d_4.y << 8) + 128;
	//posxy = v11 + (v12 << 16);
	v11x.z = sub_10C40_getTerrainAlt(&v11x);//tady to chce pridat jeste 5012 804d80da5012
	indexx = sub_4A190(&v11x, a1x->str_0x30311_type, a1x->str_0x30311_subtype);
	v2x = indexx;
	v3x = indexx;
	if (!indexx)
		return/* index*/;
	switch (indexx->byte_0x3F_63)
	{
	case 5:
		if (indexx->byte_0x40_64 == 22)
		{
			indexx->byte_0x46_70 = a1x->word_14&0xff;
			sub_4CB60(indexx);
		}
		sub_12100(a1x, v3x, v3x->byte_0x40_64 == 9);
		sub_58DA0(a1x, v3x);
		return;
	case 0xA:
		v4 = indexx->byte_0x40_64;
		if (v4 < 0x22u)
		{
			if (v4 < 0xBu)
			{
				if (v4 < 4u)
				{
					sub_58DA0(a1x, v3x);
					return;
				}
				if (v4 <= 4u)
				{
					v2x->word_0x1A_26 = a1x->word_12;
					sub_49EA0(v2x, a1x->word_10 << 8, a1x->word_10 << 8);
					sub_49A20_remove_event(v3x);
					sub_58DA0(a1x, v3x);
					return;
				}
				if (v4 != 9)
				{
					sub_58DA0(a1x, v3x);
					return;
				}
			}
			else if (v4 > 0xBu)
			{
				if (v4 < 0x11u)
				{
					if (v4 != 15)
					{
						sub_58DA0(a1x, v3x);
						return;
					}
				}
				else if (v4 > 0x11u && v4 != 22)
				{
					sub_58DA0(a1x, v3x);
					return;
				}
			}
		}
		else
		{
			if (v4 <= 0x22u)
			{
				v2x->word_0x9A_154x.x = (a1x->word_16 << 8) + 128;
				v2x->word_0x9A_154x.y = (a1x->word_14 << 8) + 128;
				sub_58DA0(a1x, v3x);
				return;
			}
			if (v4 < 0x43u)
			{
				if (v4 < 0x36u)
				{
					if (v4 == 45)
					{
						sub_49A30(v2x, a1x->word_14);
						v3x->byte_0x41_65 = a1x->word_16;
					}
					/*index = */sub_58DA0(a1x, v3x);
				}
				else if (v4 <= 0x36u)
				{
					v3x->dword_0x10_16 = (a1x->word_12 << 8) * (a1x->word_12 << 8);
					v5 = 8 * a1x->word_12 + 16;
					v3x->dword_0x4 = v5;
					if (v5 < 128)
						v3x->dword_0x4 = 128;
					sub_49A20_remove_event(v3x);
					/*index = */sub_58DA0(a1x, v3x);
				}
				else
				{
					if (v4 < 0x3Du)
					{
						sub_58DA0(a1x, v3x);
						return;
					}
					if (v4 <= 0x3Eu)
						goto LABEL_49;
					/*index = */sub_58DA0(a1x, v3x);
				}
				return;
			}
			if (v4 > 0x43u)
			{
				if (v4 >= 0x53u)
				{
					if (v4 <= 0x53u)
					{
						v2x->word_0x9A_154x.x = a1x->word_10;
						/*index = */sub_58DA0(a1x, v3x);
					}
					else
					{
						if (v4 <= 0x55u)
						{
							v6 = v2x->array_0x4C_76.y;
							v2x->array_0x4C_76.x -= 128;
							v2x->array_0x4C_76.y = v6 - 128;
							v2x->word_0x9A_154x.x = a1x->word_10;
							v2x->array_0x4C_76.z = a1x->word_18;
						}
						/*index = */sub_58DA0(a1x, v3x);
					}
					return;
				}
				if (v4 != 71)
				{
					sub_58DA0(a1x, v3x);
					return;
				}
			}
		}
		//v7 = &(*xadataspellsdat.var28_begin_buffer)[80 * (uint16_t)sub_6E020(v3x->byte_0x40_64) + 2 + 26 * a1x->word_14];
		//v3x->word_0x2A_42 = *(x_WORD *)v7;
		v3x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[(uint16_t)sub_6E020(v3x->byte_0x40_64)].subspell[a1x->word_14].dword_2;
		v8 = v3x->byte_0x40_64;
		if (v8 >= 0x11u)
		{
			if (v8 <= 0x11u)
			{
				v9 = SPELLS_BEGIN_BUFFER_str[(uint16_t)sub_6E020(v3x->byte_0x40_64)].subspell[a1x->word_14].byte_0x1A;
			}
			else
			{
				if (v8 >= 0x43u)
				{
					if (v8 > 0x43u && v8 != 71)
					{
						sub_58DA0(a1x, v3x);
					}
				LABEL_65:
					v9 = SPELLS_BEGIN_BUFFER_str[(uint16_t)sub_6E020(v3x->byte_0x40_64)].subspell[a1x->word_14].byte_0x1A;
				LABEL_69:
					v3x->dword_0x8 = v9;
					sub_58DA0(a1x, v3x);
					return;
				}
				if (v8 != 22)
				{
					sub_58DA0(a1x, v3x);
					return;
				}
				v9 = 8 * SPELLS_BEGIN_BUFFER_str[(uint16_t)sub_6E020(v3x->byte_0x40_64)].subspell[a1x->word_14].byte_0x1A;
			}
			v3x->dword_0x4 = v9;
			goto LABEL_69;
		}
		if (v8 >= 0xBu)
		{
			if (v8 > 0xBu && v8 != 15)
			{
				sub_58DA0(a1x, v3x);
				return;
			}
			goto LABEL_65;
		}
		if (v8 != 9)
		{
			sub_58DA0(a1x, v3x);
			return;
		}
		v3x->dword_0x4 = SPELLS_BEGIN_BUFFER_str[(uint16_t)sub_6E020(v3x->byte_0x40_64)].subspell[a1x->word_14].byte_0x1A;
		sub_58DA0(a1x, v3x);
		return;
	case 0xB:
		indexx->word_0x1A_26 = a1x->word_12;
		if (indexx->byte_0x40_64 == 32)
			indexx->byte_0x46_70 = a1x->word_14;
		else
			sub_49EA0(indexx, a1x->word_10 << 8, 4096);
		sub_49A20_remove_event(v3x);
		v3x->struct_byte_0xc_12_15.byte[0] |= 1u;
		sub_58DA0(a1x, v3x);
		return;
	case 0xC:
	case 0xF:
		indexx->byte_0x45_69 += a1x->word_12;
		if (a1x->word_12 < 3u)
		{
			sub_58DA0(a1x, v3x);
			return;
		}
		indexx->byte_0x45_69 = 253;
		sub_58DA0(a1x, indexx);
		return;
	case 0xE:
		v10 = indexx->byte_0x40_64;
		if (v10 < 1u)
		{
			sub_58DA0(a1x, v3x);
			return;
		}
		if (v10 <= 1u)
		{
		LABEL_49:
			v2x->byte_0x46_70 = a1x->word_14;
			v2x->dword_0x10_16 = a1x->word_16;
			/*index = */sub_58DA0(a1x, v3x);
		}
		else
		{
			if (v10 == 2)
			{
				v2x->word_0x2C_44 = a1x->word_14;
				v2x->word_0x96_150 = a1x->word_18;
				sub_58DA0(a1x, v3x);
				return;
			}
			/*index = */sub_58DA0(a1x, v3x);
		}
		return;
	default:
	{
		sub_58DA0(a1x, v3x);
		return;
	}
	}
}

//----- (0004A810) --------------------------------------------------------
int sub_4A810_get_0x35plus()//22b810
{
	//return *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 53) + 1;
	return D41A0_BYTESTR_0.dword_0x35 + 1;
}

//----- (0004A820) --------------------------------------------------------
type_str_0x6E8E* sub_4A820(axis_3d* a1)//22b820
{
	//Bit8u* v1; // edi
	//int result; // eax

	//v1 = x_D41A0_BYTEARRAY_0 + 9058;
	//result = 0;
	//*(Bit32s*)(x_D41A0_BYTEARRAY_0 + 9058) = *(Bit32s*)a1;
	//*(Bit16s*)(x_D41A0_BYTEARRAY_0 + 9058 + 4) = *(Bit16s*)(a1 + 4);

	D41A0_BYTESTR_0.array_0x2362[0] = *a1;
	//set_x_D41A0_BYTEARRAY_0_0x2366(0, *(Bit16s*)(a1 + 4));

	return 0;
}

//----- (0004A840) --------------------------------------------------------
type_str_0x6E8E* sub_4A840(axis_3d* a1)//22b840
{
	//axis_3d* v1; // edi
	//int result; // eax

	/*v1 = &*/D41A0_BYTESTR_0.array_0x2362[1]=*a1;
	//result = 0;
	/**(x_DWORD *)v1 = *(x_DWORD *)a1;
	*(x_WORD *)(v1 + 4) = *(x_WORD *)(a1 + 4);*/
	//return result;
	return 0;
}

//----- (0004A860) --------------------------------------------------------
type_str_0x6E8E* sub_4A860(axis_3d* a1)//22b860
{
	//Bit8u* v1; // edi
	//int result; // eax

	//v1 = x_D41A0_BYTEARRAY_0 + 9070;
	//result = 0;
	D41A0_BYTESTR_0.array_0x2362[2] = *a1;
	//*(x_DWORD *)v1 = *(x_DWORD *)a1;
	//*(x_WORD *)(v1 + 4) = *(x_WORD *)(a1 + 4);
	return 0;
}

//----- (0004A880) --------------------------------------------------------
type_str_0x6E8E* sub_4A880(axis_3d* a1)//22b880
{
	D41A0_BYTESTR_0.array_0x2362[3] = *a1;
	/*Bit8u* v1; // edi
	int result; // eax

	v1 = x_D41A0_BYTEARRAY_0 + 9076;
	result = 0;
	*(x_DWORD *)v1 = *(x_DWORD *)a1;
	*(x_WORD *)(v1 + 4) = *(x_WORD *)(a1 + 4);*/
	return 0;
}

//----- (0004A8A0) --------------------------------------------------------
type_str_0x6E8E* sub_4A8A0(axis_3d* a1)//22b8a0
{
	D41A0_BYTESTR_0.array_0x2362[4] = *a1;
	/*Bit8u* v1; // edi
	int result; // eax

	v1 = x_D41A0_BYTEARRAY_0 + 9082;
	result = 0;
	*(x_DWORD *)v1 = *(x_DWORD *)a1;
	*(x_WORD *)(v1 + 4) = *(x_WORD *)(a1 + 4);
	return result;*/
	return 0;
}

//----- (0004A8C0) --------------------------------------------------------
type_str_0x6E8E* sub_4A8C0(axis_3d* a1)//22b8c0
{
	D41A0_BYTESTR_0.array_0x2362[5] = *a1;
	/*Bit8u* v1; // edi
	int result; // eax

	v1 = x_D41A0_BYTEARRAY_0 + 9088;
	result = 0;
	*(x_DWORD *)v1 = *(x_DWORD *)a1;
	*(x_WORD *)(v1 + 4) = *(x_WORD *)(a1 + 4);
	return result;*/
	return 0;
}

//----- (0004A8E0) --------------------------------------------------------
type_str_0x6E8E* sub_4A8E0(axis_3d* a1)//22b8e0
{
	D41A0_BYTESTR_0.array_0x2362[6] = *a1;
	/*Bit8u* v1; // edi
	int result; // eax

	v1 = x_D41A0_BYTEARRAY_0 + 9094;
	result = 0;
	*(x_DWORD *)v1 = *(x_DWORD *)a1;
	*(x_WORD *)(v1 + 4) = *(x_WORD *)(a1 + 4);
	return result;*/
	return 0;
}

//----- (0004A900) --------------------------------------------------------
type_str_0x6E8E* sub_4A900(axis_3d* a1)//22b900
{
	D41A0_BYTESTR_0.array_0x2362[7] = *a1;
	/*Bit8u* v1; // edi
	int result; // eax

	v1 = x_D41A0_BYTEARRAY_0 + 9100;
	result = 0;
	*(x_DWORD *)v1 = *(x_DWORD *)a1;
	*(x_WORD *)(v1 + 4) = *(x_WORD *)(a1 + 4);
	return result;*/
	return 0;
}

//----- (0004A920) --------------------------------------------------------
type_str_0x6E8E* sub_4A920(axis_3d* a1x)//22b920 - add player 0
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // esi
	//int v3; // ecx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 0;
		v1x->byte_0x3F_63 = 3;
		//v3 = (int)x_D41A0_BYTEARRAY_0;
		v1x->byte_0x40_64 = 0;
		v1x->dword_0x4 = 10000;
		v1x->word_0x84_132 = 80;
		v1x->byte_0x38_56 = 29;
		v1x->word_0x1A_26 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;		
		if (D41A0_BYTESTR_0.str_2FECE.byte_level_type == 2)
			v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xdd0];
		else
			v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x8c4];
		sub_57D70_actualize_event(v1x, a1x);
		sub_49CD0(v1x, 44);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004A9C0) --------------------------------------------------------
type_str_0x6E8E* sub_4A9C0(axis_3d* a1x)//22b9c0 //Other player spawn?
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//int v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 1;
		v1x->byte_0x3F_63 = 3;
		//v3 = (int)x_D41A0_BYTEARRAY_0;
		v1x->byte_0x40_64 = 1;
		v1x->dword_0x4 = 10000;
		v1x->word_0x84_132 = 80;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x8e6];
		v1x->byte_0x38_56 = 29;
		v1x->word_0x1A_26 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49CD0(v1x, 44);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004AA40) --------------------------------------------------------
type_str_0x6E8E* sub_4AA40(axis_3d* a1x)//22ba40 //Spawn Scenery Bad Stone
{
	type_str_0x6E8E* resultx; // eax
	type_str_0x6E8E* v2x; // ebx
	//int v3; // edx
	uint16_t v4; // ax
	uint16_t v5; // cx
	axis_3d v6ar; // [esp+0h] [ebp-Ch]
	//int16_t v7; // [esp+4h] [ebp-8h]
	int v8; // [esp+8h] [ebp-4h]

	x_WORD_EB398ar = *a1x;
	resultx = sub_4A050_new_event();
	v2x = resultx;
	if (resultx)
	{
		resultx->byte_0x45_69 = 5;
		resultx->byte_0x3F_63 = 3;
		resultx->byte_0x40_64 = 2;
		resultx->dword_0x4 = 40000;
		resultx->dword_0x10_16 = 0;
		resultx->byte_0x38_56 = 33;
		v6ar = x_WORD_EB398ar;
		v6ar.x >>= 8;
		v6ar.y >>= 8;
		v6ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
		if ((v6ar.x + v6ar.y) % 2)
			v6ar.x++;
		v6ar.x <<= 8;
		v6ar.y <<= 8;
		//v3 = **filearray_2aa18c[24];
		//HIBYTE(v4) = 0;
		v2x->word_0x9A_154x = v6ar;
		v4 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[1].width;
		v5 = (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[1].height;
		if (x_WORD_180660_VGA_type_resolution == 1)
		{
			v5 >>= 1;
			v4 >>= 1;
		}
		v8 = (v6ar.x >> 8) - v4 / 2;
		v2x->word_0x9A_154x.z = 32 * sub_48E60((v6ar.x >> 8) - v4 / 2, (v6ar.y >> 8) - v5 / 2, v4, v5);
		sub_57D70_actualize_event(v2x, &v6ar);
		sub_49A20_remove_event(v2x);
		sub_49CD0(v2x, 177);
		resultx = v2x;
	}
	return resultx;
}

//----- (0004ABA0) --------------------------------------------------------
type_str_0x6E8E* sub_4ABA0(axis_3d* a1x)//22bba0 //Spawn Creature 3?
{
	type_str_0x6E8E* resultx; // eax
	//x_WORD *v2; // ebx
	//int v3; // esi

	resultx = sub_4A050_new_event();
	//v2 = (x_WORD *)result;
	//v3 = result;
	if (resultx)
	{
		resultx->byte_0x45_69 = 7;
		resultx->byte_0x3F_63 = 3;
		resultx->byte_0x40_64 = 3;
		resultx->dword_0x4 = 10000;
		resultx->word_0x82_130 = 48;
		resultx->dword_0x8C_140 = 10000;
		resultx->dword_0x90_144 = 0;
		resultx->byte_0x38_56 = 1;
		resultx->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x908];
		sub_57D70_actualize_event(resultx, a1x);
		sub_49A20_remove_event(resultx);
		sub_49CD0(resultx, 169);
		if (x_BYTE_D41B6)
			sub_49EA0(resultx, 256, 768);
		//result = v3;
	}
	return resultx;
}

//----- (0004AC40) --------------------------------------------------------
type_str_0x6E8E* sub_4AC40(axis_3d* a1x)//22bc40 Spawn ??
{
	type_str_0x6E8E* resultx; // eax
	type_str_0x6E8E* v2x; // ebx
	uint16_t v3; // ax
	int v4; // eax
	axis_3d v5x; // [esp+0h] [ebp-Ch]
	//int16_t v6; // [esp+4h] [ebp-8h]
	type_str_0x6E8E* v7x; // [esp+8h] [ebp-4h]

	resultx = sub_4A050_new_event();
	v2x = resultx;
	v7x = resultx;
	if (resultx)
	{
		resultx->byte_0x45_69 = 0;
		resultx->byte_0x3F_63 = 2;
		resultx->byte_0x40_64 = 0;
		resultx->dword_0x10_16 = (resultx - D41A0_BYTESTR_0.struct_0x6E8E) % 11;
		resultx->word_0x14_20 = 9377 * resultx->word_0x14_20 + 9439;
		v3 = resultx->word_0x14_20;
		v2x->byte_0x38_56 = 1;
		v2x->dword_0x8 = v3 % 0x1388u + 2500;
		v5x = *a1x;
		v2x->word_0x14_20 = 9377 * v2x->word_0x14_20 + 9439;
		v5x.x += (v2x->word_0x14_20 & 0x3F) - 32;
		v2x->word_0x14_20 = 9377 * v2x->word_0x14_20 + 9439;
		v5x.y += (v2x->word_0x14_20 & 0x3F) - 32;
		sub_57D70_actualize_event(v2x, &v5x);
		sub_49A20_remove_event(v2x);
		v2x->word_0x14_20 = 9377 * v2x->word_0x14_20 + 9439;
		v4 = v2x->word_0x14_20 & 1;
		if (v4)
		{
			if (v4 == 1)
				sub_49DA0(v2x, 84);
		}
		else
		{
			sub_49DA0(v2x, 83);
		}
		resultx = v7x;
	}
	return resultx;
}

//----- (0004AD70) --------------------------------------------------------
type_str_0x6E8E* sub_4AD70(axis_3d* a1x)//22bd70 //Spawn ??
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//int v3; // ecx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 11;
		v1x->byte_0x45_69 = 3;
		v1x->byte_0x3F_63 = 2;
		v1x->byte_0x40_64 = 1;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49DA0(v1x, 79);
	}
	return v1x;
}

//----- (0004ADF0) --------------------------------------------------------
type_str_0x6E8E* sub_4ADF0(axis_3d* a1x)//22bdf0 - add scenery Dolmen(Similar as Obelisk)
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//int v3; // ecx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 11;
		v1x->byte_0x45_69 = 6;
		v1x->byte_0x3F_63 = 2;
		v1x->byte_0x40_64 = 2;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49DA0(v1x, 39);
		sub_49EA0(v1x, 1024, 1024);
	}
	return v1x;
}

//----- (0004AE80) --------------------------------------------------------
type_str_0x6E8E* sub_4AE80(axis_3d* a1x)//22be80 // Spawn Creture 3
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//int v3; // ecx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 11;
		v1x->byte_0x45_69 = 9;
		v1x->byte_0x3F_63 = 2;
		v1x->byte_0x40_64 = 3;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49DA0(v1x, 270);
	}
	return v1x;
}

//----- (0004AF00) --------------------------------------------------------
type_str_0x6E8E* sub_4AF00(axis_3d* a1x)//22bf00 // Spawn 4??
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//int v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		//v3 = (int)x_D41A0_BYTEARRAY_0;
		v1x->byte_0x45_69 = 12;
		v1x->byte_0x3F_63 = 2;
		v1x->byte_0x40_64 = 4;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 11;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49DA0(v1x, 48);
	}
	return v1x;
}

//----- (0004AF70) --------------------------------------------------------
type_str_0x6E8E* sub_4AF70(axis_3d* a1x)//22bf70 //Spawn 5??
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//int v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		//v3 = (int)x_D41A0_BYTEARRAY_0;
		v1x->byte_0x45_69 = 15;
		v1x->byte_0x3F_63 = 2;
		v1x->byte_0x40_64 = 5;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 11;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49DA0(v1x, 48);
	}
	return v1x;
}

//----- (0004AFE0) --------------------------------------------------------
type_str_0x6E8E* sub_4AFE0(axis_3d* a1x)//22bfe0 //Spawn Creture Bee
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // ebx
	//int16_t v3; // dx
	uint16_t v4; // ax
	axis_3d v6x; // [esp+0h] [ebp-8h]
	//int16_t v7; // [esp+4h] [ebp-4h]

	if (D41A0_BYTESTR_0.str_2FECE.byte_level_type != 2)
		return 0;
	v1x = sub_4A050_new_event();
	v2x = v1x;
	if (!v1x)
		return 0;
	v1x->byte_0x45_69 = 18;
	v1x->byte_0x3F_63 = 2;
	//v3 = v1x->word_0x14_20;
	v1x->byte_0x40_64 = 6;
	v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
	v4 = v1x->word_0x14_20;
	v2x->byte_0x38_56 = 1;
	v2x->dword_0x4 = v4 % 0x50u + 100;
	v6x = *a1x;
	//LOBYTE(v3) = -95 * v2x->word_0x14_20 - 33;
	v2x->word_0x14_20 = 9377 * v2x->word_0x14_20 + 9439;
	v6x.x += (v2x->word_0x14_20 & 0x3F) - 32;
	v2x->word_0x14_20 = 9377 * v2x->word_0x14_20 + 9439;
	v6x.y += (v2x->word_0x14_20 & 0x3F) - 32;
	sub_57D70_actualize_event(v2x, &v6x);
	sub_49A20_remove_event(v2x);
	v2x->word_0x14_20 = 9377 * v2x->word_0x14_20 + 9439;
	sub_49DA0(v2x, (v2x->word_0x14_20 & 3) + 324);
	return v2x;
}

//----- (0004B0F0) --------------------------------------------------------
type_str_0x6E8E* sub_4B0F0(axis_3d* a1x)//22c0f0
{
	type_str_0x6E8E* resultx; // eax

	if (D41A0_BYTESTR_0.str_2FECE.byte_level_type == 2)
		resultx = 0;
	else
		resultx = sub_4B150(a1x, 7, 20, 322);
	return resultx;
}

//----- (0004B120) --------------------------------------------------------
type_str_0x6E8E* sub_4B120(axis_3d* a1x)//22c120
{
	type_str_0x6E8E* resultx; // eax

	if (D41A0_BYTESTR_0.str_2FECE.byte_level_type == 2)
		resultx = 0;
	else
		resultx = sub_4B150(a1x, 8, 21, 323);
	return resultx;
}

//----- (0004B150) --------------------------------------------------------
type_str_0x6E8E* sub_4B150(axis_3d* a1x, char a2, char a3, int16_t a4)//22c150
{
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // ebx
	//int16_t v6; // dx
	uint16_t v7; // ax
	axis_3d v9x; // [esp+0h] [ebp-8h]
	//int16_t v10; // [esp+4h] [ebp-4h]

	v4x = sub_4A050_new_event();
	v5x = v4x;
	if (v4x)
	{
		v4x->byte_0x45_69 = a3;
		//v6 = v4x->word_0x14_20;
		v4x->byte_0x40_64 = a2;
		v4x->word_0x14_20 = 9377 * v4x->word_0x14_20 + 9439;
		v7 = v4x->word_0x14_20;
		v5x->byte_0x3F_63 = 2;
		v5x->byte_0x38_56 = 1;
		v5x->byte_0x46_70 = 0;
		v5x->word_0x2C_44 = -128;
		v5x->word_0x82_130 = 0;
		v5x->dword_0x4 = v7 % 0x7D0u + 400;
		v9x = *a1x;
		v5x->word_0x14_20 = 9377 * v5x->word_0x14_20 + 9439;
		v9x.x += (v5x->word_0x14_20 & 0x3F) - 32;
		//LOBYTE(v6) = -95 * v5x->word_0x14_20 - 33;
		v5x->word_0x14_20 = 9377 * v5x->word_0x14_20 + 9439;
		v9x.y += (v5x->word_0x14_20 & 0x3F) - 32;
		sub_57D70_actualize_event(v5x, &v9x);
		sub_49A20_remove_event(v5x);
		sub_49DA0(v5x, a4);
	}
	return v5x;
}

//----- (0004B240) --------------------------------------------------------
type_str_0x6E8E* sub_4B240(axis_3d* a1x)//22c240
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // ebx
	//int v3; // eax
	//int16_t v4; // dx
	//int v5; // ecx
	//Bit8u* v6; // edx
	Bit8s v6y;
	Bit8s v6z;
	//int v7; // eax
	type_str_0x6E8E* v8x; // eax
	type_str_0x6E8E* v9x; // ebx
	//int v10; // edx
	//int v10index = 0;
	type_str_0x6E8E* v12x; // [esp+0h] [ebp-10h]
	type_str_0x6E8E* v13x; // [esp+4h] [ebp-Ch]
	type_str_0x6E8E* v14x; // [esp+8h] [ebp-8h]
	signed int v15; // [esp+Ch] [ebp-4h]

	if (sub_4A810_get_0x35plus() < 16)
		return 0;
	v1x = sub_4A050_new_event();
	v2x = v1x;
	v12x = v1x;
	if (!v1x)
		return 0;
	v1x->byte_0x45_69 = 1;
	v1x->byte_0x3F_63 = 5;
	v1x->byte_0x40_64 = 0;
	v1x->word_0x84_132 = 80;
	v1x->word_0x86_134 = 16;
	v1x->word_0x82_130 = 30;
	v1x->dword_0x4 = 4000;
	v1x->dword_0x90_144 = 4500;
	//v3 = v1x->dword_0x90_144;
	v2x->dword_0x8C_140 = v1x->dword_0x90_144;
	//v4 = v2x->word_0x14_20;
	v2x->dword_0x90_144 = v1x->dword_0x90_144 / 2;
	v2x->word_0x14_20 = 9377 * v2x->word_0x14_20 + 9439;
	//LOWORD(v3) = (v2x->word_0x14_20 & 0x7FF) - 1;
	v2x->word_0x20_32 = (v2x->word_0x14_20 & 0x7FF) - 1;
	v2x->word_0x1C_28 = (v2x->word_0x14_20 & 0x7FF) - 1;
	//v5 = (int)x_D41A0_BYTEARRAY_0;
	v2x->word_0x1E_30 = v2x->word_0x20_32;
	v2x->word_0x22_34 = 0;
	v2x->word_0x36_54 = 96;
	v2x->byte_0x38_56 = 1;
	//v7 = v2x->byte_0x40_64;
	v2x->dword_0x10_16 = (v2x - D41A0_BYTESTR_0.struct_0x6E8E) % 100;
	v6y = D41A0_BYTESTR_0.array_0x10[v2x->byte_0x40_64]++;	
	v2x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x96e];
	v2x->byte_0x3E_62 = v6y;
	//LOWORD(v5) = *(x_WORD *)(*(x_DWORD *)(v2 + 160) + 26);
	v6z = (int16_t)v2x->byte_0x3E_62 % v2x->dword_0xA0_160x->word_160_0x1a_26;
	v2x->byte_0x41_65 = 3;
	v2x->word_0x2C_44 = 0;
	v2x->byte_0x46_70 = 0;
	v14x = v2x;
	v2x->byte_0x3D_61 = 0;
	v15 = 0;
	v2x->byte_0x39_57 = v2x->dword_0xA0_160x->word_160_0x1a_26 - v6z + 4;
	while (v15 <= 15)
	{
		v8x = sub_4A050_new_event();
		v9x = v8x;
		v13x = v8x;
		if (v8x)
		{
			qmemcpy(v8x, v12x, 0xA8u);
			v8x->word_0x32_50 = v14x-D41A0_BYTESTR_0.struct_0x6E8E;
			v14x->word_0x34_52 = v8x - D41A0_BYTESTR_0.struct_0x6E8E;
			v8x->word_0x34_52 = 0;
			v8x->byte_0x45_69 = 232;
			v12x->dword_0x90_144 = (v12x->dword_0x8C_140 - (__CFSHL__(v12x->dword_0x8C_140 >> 31, 5) + 32 * (v12x->dword_0x8C_140 >> 31))) >> 5;
			v8x->byte_0x3E_62 = v15;
			sub_49CD0(v8x, v15 + 19);
			v9x->word_0x36_54 = v9x->array_0x52_82.xshift;
			sub_57D70_actualize_event(v9x, a1x);
			sub_49A20_remove_event(v9x);
		}
		v14x = v13x;
		++v15;
	}
	sub_57D70_actualize_event(v12x, a1x);
	sub_49A20_remove_event(v12x);
	sub_49CD0(v12x, 40);
	return v12x;
}

//----- (0004B490) --------------------------------------------------------
type_str_0x6E8E* sub_4B490(axis_3d* a1x)//22c490 - add creature Vulture(sup?)
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//Bit8u* v3; // ecx
	//int v4; // edx
	//Bit8u* v5; // ecx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 9;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 1;
		v1x->word_0x84_132 = 54;
		v1x->word_0x86_134 = 18;
		v1x->dword_0x4 = 600;
		v1x->word_0x82_130 = v1x->word_0x86_134;
		sub_49C70(v1x);
		v1x->word_0x20_32 = 0;
		v1x->word_0x1C_28 = v1x->word_0x20_32;
		//v3 = x_D41A0_BYTEARRAY_0;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 100;
		//v4 = *(char *)(v1 + 64);
		v1x->word_0x22_34 = 0;
		//v5 = v4 + x_D41A0_BYTEARRAY_0;
		v1x->byte_0x38_56 = 1;
		//LOBYTE(v4) = (*(x_BYTE *)(*(char *)(v1 + 64) + x_D41A0_BYTEARRAY_0 + 16))++;
		//D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xd04];
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		v1x->byte_0x39_57 = v1x->dword_0xA0_160x->word_160_0x1a_26 + 1;
		v1x->byte_0x41_65 = 3;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 238);
	}
	return v1x;
}

//----- (0004B590) --------------------------------------------------------
type_str_0x6E8E* sub_4B590(axis_3d* a1x)//22c590
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // ebx
	int v3; // edx
	//int16_t v4; // ax
	//int v5; // ecx
	//Bit8u* v6; // edx
	//int v7; // edx
	int v8; // ecx

	if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
		return 0;
	v1x = sub_4A050_new_event();
	v2x = v1x;
	if (!v1x)
		return 0;
	v1x->byte_0x45_69 = 17;
	v1x->byte_0x3F_63 = 5;
	v1x->byte_0x40_64 = 2;
	v1x->word_0x84_132 = 64;
	v3 = v1x->word_0x84_132;
	v1x->word_0x86_134 = 30;
	v1x->dword_0x4 = 3000;
	v1x->word_0x82_130 = v3 / 2;
	sub_49C70(v1x);
	v2x->word_0x14_20 = 9377 * v2x->word_0x14_20 + 9439;
	//v4 = (v2x->word_0x14_20 & 0x7FF) - 1;
	v2x->word_0x20_32 = (v2x->word_0x14_20 & 0x7FF) - 1;
	v2x->word_0x1C_28 = (v2x->word_0x14_20 & 0x7FF) - 1;
	//v5 = (int)x_D41A0_BYTEARRAY_0;
	v2x->word_0x1E_30 = v2x->word_0x20_32;
	v2x->word_0x22_34 = 0;
	v2x->word_0x2A_42 = 200;
	v2x->byte_0x41_65 = 3;
	v2x->byte_0x42_66 = 0;
	v2x->dword_0x10_16 = (v2x - D41A0_BYTESTR_0.struct_0x6E8E) % 100;
	//v7 = v1x->byte_0x40_64;
	v2x->byte_0x38_56 = 1;
	//LOBYTE(v4) = (*(x_BYTE *)(x_D41A0_BYTEARRAY_0 + v7 + 16))++;
	v2x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x9b2];
	v2x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
	v8 = v2x->dword_0xA0_160x->word_160_0x1a_26
		- v2x->byte_0x3E_62 % v2x->dword_0xA0_160x->word_160_0x1a_26;
	v2x->byte_0x41_65 = 3;
	v2x->byte_0x39_57 = v8 + 4;
	sub_57D70_actualize_event(v2x, a1x);
	sub_49A20_remove_event(v2x);
	sub_49CD0(v2x, 3);
	sub_49EA0(v2x, 128, 128);
	return v2x;
}

//----- (0004B6F0) --------------------------------------------------------
type_str_0x6E8E* sub_4B6F0(axis_3d* a1x)//22c6f0
{
	type_str_0x6E8E* resultx; // eax
	type_str_0x6E8E* v2x; // ebx
	//int64_t v3; // rax
	//int v4; // ecx
	type_str_0x6E8E* v5x; // eax
	type_str_0x6E8E* v6x; // ebx
	//int v7; // edx
	uint16_t v8; // ax
	type_str_0x6E8E* v9x; // [esp+0h] [ebp-10h]
	type_str_0x6E8E* v10x; // [esp+4h] [ebp-Ch]
	type_str_0x6E8E* v11x; // [esp+8h] [ebp-8h]
	signed int v12; // [esp+Ch] [ebp-4h]

	resultx = sub_4A050_new_event();
	v2x = resultx;
	v9x = resultx;
	if (resultx)
	{
		resultx->byte_0x45_69 = 25;
		resultx->byte_0x3F_63 = 5;
		resultx->byte_0x40_64 = 3;
		resultx->word_0x84_132 = 64;
		resultx->word_0x86_134 = 16;
		resultx->word_0x82_130 = 30;
		resultx->dword_0x4 = 9000;
		sub_49C70(resultx);
		//v3 = v2x->dword_0x90_144;
		v2x->dword_0x8C_140 = v2x->dword_0x90_144;
		//LODWORD(v3) = ((signed int)v3 - HIDWORD(v3)) >> 1;
		//WORD2(v3) = *(x_WORD *)(v2 + 20);
		v2x->dword_0x90_144 = v2x->dword_0x90_144/2;
		v2x->word_0x14_20 = 9377 * v2x->word_0x14_20 + 9439;
		//LOWORD(v3) = (v2x->word_0x14_20 & 0x7FF) - 1;
		v2x->word_0x20_32 = (v2x->word_0x14_20 & 0x7FF) - 1;
		v2x->word_0x1C_28 = (v2x->word_0x14_20 & 0x7FF) - 1;
		//v4 = (int)x_D41A0_BYTEARRAY_0;
		v2x->word_0x1E_30 = v2x->word_0x20_32;
		v2x->word_0x22_34 = 0;
		v2x->word_0x36_54 = 96;
		v2x->byte_0x38_56 = 1;
		//LODWORD(v3) = v2x->byte_0x40_64;
		v2x->dword_0x10_16 = (v2x - D41A0_BYTESTR_0.struct_0x6E8E) % 100;
		//BYTE4(v3) = (*(x_BYTE *)(x_D41A0_BYTEARRAY_0 + v2x->byte_0x40_64 + 16))++;
		v2x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x9d4];
		v2x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v2x->byte_0x40_64]++;
		//LOWORD(v4) = *(x_WORD *)(*(x_DWORD *)(v2 + 160) + 26);
		//WORD2(v3) = (int16_t)v2x->byte_0x3E_62 % *(x_WORD *)(v2x->dword_0xA0_160 + 26);
		v11x = v2x;
		v2x->byte_0x41_65 = 3;
		v12 = 0;
		v2x->byte_0x39_57 = v2x->dword_0xA0_160x->word_160_0x1a_26 - ((int16_t)v2x->byte_0x3E_62 % v2x->dword_0xA0_160x->word_160_0x1a_26) + 4;
		while (v12 <= 15)
		{
			v5x = sub_4A050_new_event();
			v6x = v5x;
			v10x = v5x;
			if (v5x)
			{
				qmemcpy(v5x, v9x, 0xA8u);
				v5x->word_0x32_50 = v11x - D41A0_BYTESTR_0.struct_0x6E8E;
				v11x->word_0x34_52 = v5x - D41A0_BYTESTR_0.struct_0x6E8E;
				v5x->word_0x34_52 = 0;
				v5x->byte_0x45_69 = 232;
				v5x->dword_0x90_144 = (v9x->dword_0x8C_140
					- (__CFSHL__(v9x->dword_0x8C_140 >> 31, 5)
						+ 32 * (v9x->dword_0x8C_140 >> 31))) >> 5;
				v5x->byte_0x3E_62 = v12;
				sub_49CD0(v5x, v12 + 89);
				v6x->array_0x52_82.xshift = 65 * (uint16_t)x_WORD_D951C[3+7 * (v12 + 89)] / 100;
				v6x->array_0x52_82.yshift = 65 * (uint16_t)x_WORD_D951C[3+7 * (v12 + 89)] / 100;
				v6x->array_0x52_82.dd = 65 * (uint16_t)x_WORD_D951C[4+7 * (v12 + 89)] / 100;
				v8 = v6x->array_0x52_82.xshift;
				v6x->word_0x36_54 = v8;
				if (!v12)
					v6x->word_0x36_54 = 125 * v8 / 100;
				sub_57D70_actualize_event(v10x, a1x);
				sub_49A20_remove_event(v10x);
			}
			v11x = v10x;
			v12++;
		}
		sub_57D70_actualize_event(v9x, a1x);
		sub_49A20_remove_event(v9x);
		sub_49CD0(v9x, 88);
		v9x->array_0x52_82.xshift = 60 * (uint16_t)x_WORD_D951C[0x26b] / 100;
		v9x->array_0x52_82.yshift = 60 * (uint16_t)x_WORD_D951C[0x26b] / 100;
		v9x->array_0x52_82.dd = 60 * (uint16_t)x_WORD_D951C[0x26c] / 100;
		resultx = v9x;
	}
	return resultx;
}

//----- (0004BA10) --------------------------------------------------------
type_str_0x6E8E* sub_4BA10(axis_3d* a1x)//22ca10
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // ebx
	//int16_t v3; // dx
	//Bit8u* v4; // ecx
	//int v5; // edx
	//Bit8u* v6; // ecx
	int v7; // ecx

	v1x = sub_4A050_new_event();
	v2x = v1x;
	if (v1x)
	{
		v1x->byte_0x45_69 = 33;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 4;
		v1x->word_0x84_132 = 30;
		v1x->word_0x86_134 = 0;
		v1x->dword_0x4 = 1000;
		v1x->word_0x82_130 = v1x->word_0x84_132;
		sub_49C70(v1x);
		v2x->word_0x14_20 = 9377 * v2x->word_0x14_20 + 9439;
		//v3 = (v2x->word_0x14_20 & 0x7FF) - 1;
		v2x->word_0x20_32 = (v2x->word_0x14_20 & 0x7FF) - 1;
		v2x->word_0x1C_28 = (v2x->word_0x14_20 & 0x7FF) - 1;
		//v4 = x_D41A0_BYTEARRAY_0;
		v2x->word_0x1E_30 = v2x->word_0x20_32;
		v2x->word_0x22_34 = 0;
		v2x->dword_0x10_16 = (v2x - D41A0_BYTESTR_0.struct_0x6E8E) % 100;
		//v5 = v2x->byte_0x40_64;
		v2x->word_0x2A_42 = 500;
		//v6 = v2x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
		v2x->byte_0x38_56 = 1;
		//LOBYTE(v5) = (*(x_BYTE *)(v2x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
		v2x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x9f6];
		v2x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v2x->byte_0x40_64]++;
		v7 = v2x->dword_0xA0_160x->word_160_0x1a_26
			- v2x->byte_0x3E_62 % v2x->dword_0xA0_160x->word_160_0x1a_26;
		v2x->byte_0x41_65 = 3;
		v2x->byte_0x39_57 = v7 + 4;
		sub_57D70_actualize_event(v2x, a1x);
		sub_49A20_remove_event(v2x);
		sub_49CD0(v2x, 0);
		sub_49EA0(v2x, 128, 256);
	}
	return v2x;
}

//----- (0004BBB0) --------------------------------------------------------
type_str_0x6E8E* sub_4BBB0(axis_3d* a1x)//22cbb0
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // ebx
	int16_t v3; // ax
	uint16_t v4; // ax
	int16_t v5; // dx
	//int v6; // edx
	//int v7; // eax
	//Bit8u* v8; // eax
	int v9; // esi

	v1x = sub_4A050_new_event();
	v2x = v1x;
	if (v1x)
	{
		v1x->byte_0x45_69 = 72;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 9;
		v1x->word_0x84_132 = 20;
		v1x->word_0x86_134 = 0;
		v3 = v1x->word_0x84_132;
		v2x->dword_0x4 = 1000;
		v2x->word_0x82_130 = v3;
		sub_49C70(v2x);
		v2x->word_0x14_20 = 9377 * v2x->word_0x14_20 + 9439;
		v4 = v2x->word_0x14_20;
		v2x->word_0x22_34 = 0;
		v5 = v4 % 0x832u - 1;
		v2x->word_0x20_32 = v5;
		v2x->word_0x1C_28 = v5;
		v2x->word_0x1E_30 = v2x->word_0x20_32;
		//v6 = (int)x_D41A0_BYTEARRAY_0;
		//v7 = v2x->byte_0x40_64;
		v2x->word_0x2A_42 = 500;
		//v8 = x_D41A0_BYTEARRAY_0 + v7;
		v2x->byte_0x38_56 = 1;
		//LOBYTE(v6) = (*(x_BYTE *)(v8 + 16))++;
		v2x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xaa0];
		v2x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v2x->byte_0x40_64]++;
		v9 = v2x->dword_0xA0_160x->word_160_0x1a_26
			- v2x->byte_0x3E_62 % v2x->dword_0xA0_160x->word_160_0x1a_26;
		v2x->byte_0x41_65 = 3;
		v2x->dword_0x10_16 = 16;
		v2x->byte_0x39_57 = v9 + 4;
		sub_57D70_actualize_event(v2x, a1x);
		v2x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&v2x->array_0x4C_76);
		sub_49A20_remove_event(v2x);
		sub_49CD0(v2x, 220);
		sub_49EA0(v2x, 128, 128);
		if (sub_102D0(v2x, &v2x->array_0x4C_76, 1))
		{
			sub_57F20(v2x);
			v2x = 0;
		}
	}
	return v2x;
}

//----- (0004BD00) --------------------------------------------------------
type_str_0x6E8E* sub_4BD00(axis_3d* a1x)//22cd00
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // ebx
	//int v3; // eax
	//int v4; // edx
	//Bit8u* v5; // eax	
	if (!(D41A0_BYTESTR_0.str_2FECE.byte_0x2FED2 & 2))
		return 0;
	v1x = sub_4A050_new_event();
	v2x = v1x;
	if (!v1x)
		return 0;
	v1x->byte_0x45_69 = 80;
	v1x->byte_0x3F_63 = 5;
	v1x->byte_0x40_64 = 10;
	v1x->dword_0x4 = 300000;
	sub_49C70(v1x);
	v2x->struct_byte_0xc_12_15.dword |= 0x48800001u;
	//v3 = (int)x_D41A0_BYTEARRAY_0;
	//v4 = v2x->byte_0x40_64;
	v2x->word_0x2A_42 = 0;
	//v5 = v2x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
	v2x->byte_0x38_56 = 1;
	//LOBYTE(v4) = (*(x_BYTE *)(v2x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
	v2x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xe4e];
	v2x->byte_0x39_57 = 64;
	v2x->byte_0x41_65 = 3;
	v2x->dword_0x10_16 = 0;
	v2x->byte_0x46_70 = 0;
	v2x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v2x->byte_0x40_64]++;
	sub_57D70_actualize_event(v2x, a1x);
	v2x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&v2x->array_0x4C_76);
	sub_49A20_remove_event(v2x);
	sub_49C90(v2x, 341);
	v2x->array_0x52_82.aa = 512;
	sub_49EA0(v2x, 1024, 1280);
	return v2x;
}

//----- (0004BDF0) --------------------------------------------------------
type_str_0x6E8E* sub_4BDF0(axis_3d* a1x)//22cdf0
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // ebx
	//int16_t v3; // cx
	//int16_t v4; // dx
	//int16_t v5; // dx
	//Bit8u* v6; // ecx
	//int v7; // edx
	//Bit8u* v8; // edx
	//char v9; // al

	v1x = sub_4A050_new_event();
	v2x = v1x;
	if (v1x)
	{
		v1x->word_0x86_134 = 24;
		//v3 = v1x->word_0x14_20;
		v1x->word_0x82_130 = v1x->word_0x86_134;
		v1x->byte_0x45_69 = 97;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 12;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = v1x->word_0x14_20;
		v1x->word_0x84_132 = 54;
		v1x->dword_0x4 = 1000;
		//v5 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v6 = x_D41A0_BYTEARRAY_0;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		v1x->dword_0x90_144 = 0;
		v1x->word_0x22_34 = 0;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 100;
		//v7 = v1x->byte_0x40_64;
		v1x->word_0x2A_42 = 500;
		//v8 = x_D41A0_BYTEARRAY_0 + v1x->byte_0x40_64;
		v1x->byte_0x38_56 = 1;
		//v9 = (*(x_BYTE *)(x_D41A0_BYTEARRAY_0 + v1x->byte_0x40_64 + 16))++;
		v2x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xd6a];
		v2x->byte_0x39_57 = 64;
		v2x->byte_0x41_65 = 3;
		v2x->dword_0x10_16 = 2;
		v2x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		sub_57D70_actualize_event(v2x, a1x);
		sub_49A20_remove_event(v2x);
		sub_49CD0(v2x, 221);
		sub_49EA0(v2x, 128, 128);
	}
	return v2x;
}

//----- (0004BF40) --------------------------------------------------------
type_str_0x6E8E* sub_4BF40(axis_3d* a1x)//22cf40 - add creature Townie
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//x_WORD *v3; // esi
	//int16_t v4; // dx
	//int16_t v5; // ax
	//Bit8u* v6; // ecx
	//Bit8u* v7; // edx
	//int v8; // edx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	//v3 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 105;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 13;
		v1x->word_0x84_132 = 54;
		v1x->word_0x86_134 = 18;
		//v4 = v1x->word_0x14_20;
		v1x->word_0x82_130 = v1x->word_0x86_134;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v5 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v6 = x_D41A0_BYTEARRAY_0;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		v1x->dword_0x4 = 1000;
		v1x->dword_0x90_144 = 0;
		v1x->word_0x22_34 = 0;
		v1x->word_0x2A_42 = 500;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 100;
		//v8 = *(char *)(v1 + 64);
		v1x->byte_0x38_56 = 1;
		//LOBYTE(v5) = (*(x_BYTE *)(x_D41A0_BYTEARRAY_0 + v8 + 16))++;

		/*
		plus_x_D41A0_BYTEARRAY_0_0x10(*(char *)(v1 + 64));
		*(x_DWORD *)(v1 + 160) = (x_DWORD)&unk_D7BD6[0xd04];
		*(x_BYTE *)(v1 + 62) = get_x_D41A0_BYTEARRAY_0_0x10(*(char *)(v1 + 64));
		*/
		//D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xd48];
		v1x->byte_0x39_57 = 64;
		v1x->byte_0x41_65 = 3;
		v1x->dword_0x10_16 = 2;
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		switch (v1x->word_0x14_20 % 9u)
		{
		case 0u:
		case 1u:
		case 2u:
			sub_49CD0(v1x, 242);
			break;
		case 3u:
		case 4u:
		case 5u:
			sub_49CD0(v1x, 271);
			break;
		case 6u:
		case 7u:
			sub_49CD0(v1x, 241);
			break;
		case 8u:
			sub_49CD0(v1x, 239);
			break;
		default:
			break;
		}
		sub_49EA0(v1x, 128, 128);
	}
	return v1x;
}

//----- (0004C0B0) --------------------------------------------------------
type_str_0x6E8E* sub_4C0B0(axis_3d* a1x)//22d0b0
{
	type_str_0x6E8E* v1x; // eax
	//type_str_0x6E8E* v2x; // ebx
	//int16_t v3; // cx
	//int16_t v4; // dx
	//int16_t v5; // dx
	//Bit8u* v6; // ecx
	//int v7; // edx
	//Bit8u* v8; // edx
	//char v9; // al

	v1x = sub_4A050_new_event();
	//v2x = v1x;
	if (v1x)
	{
		v1x->word_0x86_134 = 18;
		//v3 = v1x->word_0x14_20;
		v1x->word_0x82_130 = v1x->word_0x86_134;
		v1x->byte_0x45_69 = 113;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 14;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = v1x->word_0x14_20;
		v1x->word_0x84_132 = 54;
		v1x->dword_0x4 = 1000;
		//v5 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v6 = x_D41A0_BYTEARRAY_0;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		v1x->dword_0x90_144 = 0;
		v1x->word_0x22_34 = 0;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 100;
		//v7 = v1x->byte_0x40_64;
		v1x->word_0x2A_42 = 500;
		//v8 = x_D41A0_BYTEARRAY_0 + v1x->byte_0x40_64;
		v1x->byte_0x38_56 = 1;
		//v9 = (*(x_BYTE *)(x_D41A0_BYTEARRAY_0 + v1x->byte_0x40_64 + 16))++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xd48];
		v1x->byte_0x39_57 = 64;
		v1x->byte_0x41_65 = 3;
		v1x->dword_0x10_16 = 2;
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 219);
		sub_49EA0(v1x, 128, 128);
	}
	return v1x;
}

//----- (0004C1E0) --------------------------------------------------------
type_str_0x6E8E* sub_4C1E0(axis_3d* a1x)//22d1e0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//Bit8u* v3; // ecx
	//int v4; // edx
	//Bit8u* v5; // ecx
	//char v6; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 121;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 15;
		v1x->word_0x84_132 = 30;
		v1x->word_0x86_134 = 0;
		v1x->dword_0x4 = 1000;
		v1x->word_0x20_32 = 0;
		v1x->word_0x82_130 = v1x->word_0x84_132;
		v1x->word_0x1C_28 = v1x->word_0x20_32;
		//v3 = x_D41A0_BYTEARRAY_0;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		v1x->dword_0x90_144 = 0;
		v1x->word_0x22_34 = 0;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 100;
		//v4 = v1x->byte_0x40_64;
		v1x->word_0x2A_42 = 500;
		//v5 = v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
		v1x->byte_0x38_56 = 1;
		//LOBYTE(v4) = (*(x_BYTE *)(v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xb06];
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		//LOWORD(v5) = *(x_WORD *)(v1x->dword_0xA0_160 + 26);
		//LOWORD(v4) = (int16_t)v1x->byte_0x3E_62 % *(x_WORD *)(v1x->dword_0xA0_160 + 26);
		v1x->byte_0x41_65 = 3;
		//v6 = v1x->struct_byte_0xc_12_15.dbyte3_4.byte1 | 2;
		v1x->byte_0x39_57 = (Bit8u)(v1x->dword_0xA0_160x->word_160_0x1a_26 - ((int16_t)v1x->byte_0x3E_62 % v1x->dword_0xA0_160x->word_160_0x1a_26) + 4);
		v1x->struct_byte_0xc_12_15.byte[2] |= 2;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 0);
		sub_49EA0(v1x, 128, 128);
	}
	return v1x;
}

//----- (0004C310) --------------------------------------------------------
type_str_0x6E8E* sub_4C310(axis_3d* a1x)//22d310
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // ax
	//int16_t v4; // ax
	//Bit8u* v5; // ecx
	//Bit8u* v6; // edx
	//int v7; // eax
	//Bit8u* v8; // ecx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 129;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 16;
		v1x->word_0x84_132 = 60;
		v1x->word_0x86_134 = 20;
		//v3 = v1x->word_0x84_132;
		v1x->dword_0x4 = 60000;
		v1x->word_0x82_130 = v1x->word_0x84_132;
		sub_49C70(v1x);
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v5 = x_D41A0_BYTEARRAY_0;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		v1x->word_0x22_34 = 0;
		v1x->word_0x2A_42 = 500;
		//v7 = v1x->byte_0x40_64;
		v1x->byte_0x38_56 = 1;
		//v8 = v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 100;
		//LOBYTE(v7) = (*(x_BYTE *)(v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xb28];
		v1x->byte_0x39_57 = 64;
		v1x->byte_0x41_65 = 3;
		v1x->dword_0x10_16 = 0;
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 207);
		v1x->array_0x52_82.aa = (5 * (uint16_t)*(Bit16s*)& x_BYTE_D9F50[0x126]
			- (__CFSHL__(5 * (uint16_t)*(Bit16s*)& x_BYTE_D9F50[0x126] >> 31, 3)
				+ 8 * (5 * (uint16_t)*(Bit16s*)& x_BYTE_D9F50[0x126] >> 31))) >> 3;
		sub_49EA0(v1x, 128, 128);
	}
	return v1x;
}

//----- (0004C460) --------------------------------------------------------
type_str_0x6E8E* sub_4C460(axis_3d* a1x)//22d460
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//Bit8u* v4; // ecx
	//int v5; // edx
	//Bit8u* v6; // edx
	//char v7; // al

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 137;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 17;
		v1x->word_0x84_132 = 68;
		v1x->word_0x86_134 = 20;
		v1x->dword_0x4 = 10000;
		v1x->word_0x82_130 = v1x->word_0x84_132;
		sub_49C70(v1x);
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v3 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v4 = x_D41A0_BYTEARRAY_0;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		v1x->word_0x22_34 = 0;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 100;
		//v5 = v1x->byte_0x40_64;
		v1x->word_0x2A_42 = 350;
		//v6 = x_D41A0_BYTEARRAY_0 + v1x->byte_0x40_64;
		v1x->byte_0x38_56 = 1;
		//v7 = (*(x_BYTE *)(x_D41A0_BYTEARRAY_0 + v1x->byte_0x40_64 + 16))++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xb4a];
		v1x->byte_0x39_57 = 64;
		v1x->byte_0x41_65 = 3;
		v1x->dword_0x10_16 = 0;
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 285);
		sub_49EA0(v1x, 128, 128);
	}
	return v1x;
}

//----- (0004C590) --------------------------------------------------------
type_str_0x6E8E* sub_4C590(axis_3d* a1x)//22d590
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//Bit8u* v4; // ecx
	//int v5; // edx
	//Bit8u* v6; // edx
	//char v7; // al

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = -109;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 18;
		v1x->word_0x84_132 = 10;
		v1x->word_0x86_134 = 6;
		v1x->dword_0x4 = 36000;
		v1x->word_0x82_130 = v1x->word_0x84_132;
		sub_49C70(v1x);
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v3 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v4 = x_D41A0_BYTEARRAY_0;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		v1x->word_0x22_34 = 0;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 100;
		//v5 = v1x->byte_0x40_64;
		v1x->word_0x2A_42 = 500;
		//v6 = x_D41A0_BYTEARRAY_0 + v1x->byte_0x40_64;
		v1x->byte_0x38_56 = 1;
		//v7 = (*(x_BYTE *)(x_D41A0_BYTEARRAY_0 + v1x->byte_0x40_64 + 16))++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xb6c];
		v1x->byte_0x39_57 = 64;
		v1x->byte_0x41_65 = 3;
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		v1x->dword_0x10_16 = 100;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 286);
		sub_49EA0(v1x, 512, 512);
	}
	return v1x;
}

//----- (0004C6B0) --------------------------------------------------------
type_str_0x6E8E* sub_4C6B0(axis_3d* a1x)//22d6b0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//Bit8u* v4; // ecx
	//int v5; // edx
	//Bit8u* v6; // ecx
	//int v7; // ecx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 0x99;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 19;
		v1x->word_0x84_132 = 76;
		v1x->word_0x86_134 = 8;
		v1x->dword_0x4 = 600;
		v1x->word_0x82_130 = v1x->word_0x84_132;
		sub_49C70(v1x);
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v3 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v4 = x_D41A0_BYTEARRAY_0;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		v1x->word_0x22_34 = 0;
		v1x->word_0x2A_42 = 300;
		v1x->byte_0x41_65 = 3;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 100;
		//v5 = v1x->byte_0x40_64;
		v1x->byte_0x42_66 = 0;
		//v6 = v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
		v1x->byte_0x38_56 = 1;
		//LOBYTE(v5) = (*(x_BYTE *)(v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xbb0];
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		//v7 = *(int16_t *)(v1x->dword_0xA0_160 + 26) - v1x->byte_0x3E_62 % *(int16_t *)(v1x->dword_0xA0_160 + 26);
		v1x->byte_0x41_65 = 3;
		v1x->byte_0x39_57 = v1x->dword_0xA0_160x->word_160_0x1a_26 - v1x->byte_0x3E_62 % v1x->dword_0xA0_160x->word_160_0x1a_26 + 4;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 287);
		sub_49EA0(v1x, 85, 51);
	}
	return v1x;
}

//----- (0004C7F0) --------------------------------------------------------
type_str_0x6E8E* sub_4C7F0(axis_3d* a1x)//22d7f0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int v4; // eax
	//int v5; // edx
	//Bit8u* v6; // edx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = -95;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 20;
		v1x->word_0x84_132 = 32;
		v1x->word_0x86_134 = 20;
		v1x->dword_0x4 = 5500;
		v1x->word_0x82_130 = v1x->word_0x84_132;
		sub_49C70(v1x);
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v3 = v1x->word_0x14_20 & 0x7FF;
		v1x->word_0x22_34 = 0;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v4 = v1x->byte_0x40_64;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		//v5 = (int)x_D41A0_BYTEARRAY_0;
		v1x->word_0x2A_42 = 100;
		//v6 = v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
		v1x->byte_0x38_56 = 1;
		//LOBYTE(v4) = (*(x_BYTE *)(v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xbd2];
		v1x->byte_0x39_57 = 64;
		v1x->byte_0x41_65 = 3;
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 288);
		sub_49EA0(v1x, 384, 512);
	}
	return v1x;
}

//----- (0004C8F0) --------------------------------------------------------
type_str_0x6E8E* sub_4C8F0(axis_3d* a1x)//22d8f0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // cx
	//int16_t v4; // dx
	//int16_t v5; // dx
	//int v6; // eax
	//int v7; // edx
	//int v8; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1x;
	if (v1x)
	{
		//v3 = v1x->word_0x14_20;
		v1x->word_0x82_130 = v1x->word_0x86_134;
		v1x->byte_0x45_69 = 169;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 21;
		v1x->word_0x84_132 = 96;
		v1x->dword_0x4 = 1000;
		v1x->dword_0x90_144 = 1000;
		v1x->word_0x22_34 = 0;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = v1x->word_0x14_20;
		v1x->word_0x2A_42 = 400;
		v1x->byte_0x38_56 = 1;
		//v5 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		//v6 = v1x->byte_0x40_64;
		//v7 = v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
		//LOBYTE(v6) = *(x_BYTE *)(v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16);
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;//fixed
		//D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xcc0];
		v1x->byte_0x39_57 = 64;
		v1x->byte_0x41_65 = 3;
		v1x->byte_0x46_70 = 0;
		v1x->word_0x2C_44 = 0;
		v1x->byte_0x44_68 = 0;
		v1x->byte_0x43_67 = 0;
		//v1x->byte_0x3E_62 = v6;
		sub_57D70_actualize_event(v1x, a1x);
		//v8 = sub_49A20_remove_event(v1x);
		sub_49A20_remove_event(v1x);
		sub_26500(/*sub_49A20_remove_event(v1x),*/ v1x);
		sub_268F0(v1x, 1u);
		sub_49EA0(v1x, 128, 128);
	}
	return v1x;
}

//----- (0004CA00) --------------------------------------------------------
type_str_0x6E8E* sub_4CA00(axis_3d* a1x)//22da00
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int16_t v4; // ax
	//int v5; // ecx
	//int v6; // eax
	//Bit8u* v7; // ecx
	//int16_t v8; // dx

	if (sub_4A810_get_0x35plus() < 15)
		return 0;
	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (!v1x)
		return 0;
	v1x->byte_0x45_69 = 176;
	v1x->byte_0x3F_63 = 5;
	v1x->byte_0x40_64 = 22;
	v1x->word_0x84_132 = 128;
	v1x->word_0x86_134 = 16;
	//v3 = v1x->word_0x14_20;
	v1x->word_0x82_130 = v1x->word_0x86_134;
	v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
	//v4 = (v1x->word_0x14_20 & 0x7FF) - 1;
	v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
	v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
	//v5 = v1x->byte_0x40_64;
	v1x->word_0x1E_30 = v1x->word_0x20_32;
	//v6 = (int)x_D41A0_BYTEARRAY_0;
	v1x->dword_0x4 = 2000;
	//v7 = x_D41A0_BYTEARRAY_0 + v5;
	v1x->word_0x22_34 = 0;
	//LOBYTE(v3) = (*(x_BYTE *)(x_D41A0_BYTEARRAY_0 + v1x->byte_0x40_64 + 16))++;
	v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xbf4];
	v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
	//LOWORD(v7) = *(x_WORD *)(*(x_DWORD *)(v2 + 160) + 26);
	//v8 = (int16_t)v1x->byte_0x3E_62 % *(x_WORD *)(v1x->dword_0xA0_160 + 26);
	v1x->byte_0x41_65 = 3;
	v1x->byte_0x38_56 = 3;
	v1x->word_0x94_148 = 0;
	v1x->array_0x52_82.aa = 0;
	v1x->byte_0x5C_92 = 0;
	v1x->word_0x2C_44 = 11;
	v1x->word_0x2A_42 = 0;
	v1x->word_0x36_54 = 0;
	v1x->word_0x96_150 = 1024;
	v1x->word_0x24_36 = 0;
	v1x->byte_0x46_70 = 15;
	v1x->byte_0x39_57 = v1x->dword_0xA0_160x->word_160_0x1a_26 - (int16_t)v1x->byte_0x3E_62 % v1x->dword_0xA0_160x->word_160_0x1a_26 + 4;
	x_WORD_EB398ar = *a1x;
	x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar) + 384;
	sub_57D70_actualize_event(v1x, &x_WORD_EB398ar);
	sub_49C70(v1x);
	sub_49A20_remove_event(v1x);
	return v1x;
}

//----- (0004CB60) --------------------------------------------------------
void sub_4CB60(type_str_0x6E8E* a1x)//22db60
{
	signed int v1; // ebx
	int16_t v2; // di
	int v3; // eax
	type_str_0x6E8E* v5x; // [esp+0h] [ebp-8h]
	type_str_0x6E8E* v6x; // [esp+4h] [ebp-4h]

	v1 = 1;
	v5x = a1x;
	while (v1 <= a1x->byte_0x46_70 / 2)
	{
		v2 = 0;
		while (v2 < 2)
		{
			v6x = sub_4A050_new_event();
			if (v6x)
			{
				if (v2)
					v3 = -(int16_t)v1;
				else
					LOWORD(v3) = v1;
				sub_274C0(a1x, v6x, v5x, v3);
			}
			v2++;
			v5x = v6x;
		}
		v1++;
	}
	sub_27590(/*v1x, */a1x);
	sub_27610(/*v1x, */a1x);
	sub_276E0(a1x);
}

//----- (0004CBF0) --------------------------------------------------------
type_str_0x6E8E* sub_4CBF0(axis_3d* a1x)//22dbf0
{
	type_str_0x6E8E* v1x; // eax
	//int v2; // ebx
	//int16_t v3; // dx
	//int16_t v4; // ax
	//int16_t v5; // ax
	//int v6; // edx
	//Bit8u* v7; // eax
	//Bit8u* v8; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 184;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 23;
		v1x->word_0x84_132 = 24;
		v1x->word_0x86_134 = 14;
		//v3 = v1x->word_0x14_20;
		v1x->word_0x82_130 = v1x->word_0x84_132;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = v1x->word_0x14_20;
		v1x->dword_0x4 = 10000;
		v1x->dword_0x90_144 = 100;
		//v5 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v6 = v1x->byte_0x40_64;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v7 = x_D41A0_BYTEARRAY_0;
		v1x->word_0x2A_42 = 500;
		//v8 = v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
		v1x->byte_0x38_56 = 1;
		//LOBYTE(v6) = (*(x_BYTE *)(v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xc16];
		v1x->byte_0x39_57 = 64;
		v1x->byte_0x41_65 = 3;
		v1x->word_0x2C_44 = 0x2000;
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		v1x->dword_0x4 = v1x->dword_0x90_144;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 289);
		sub_49EA0(v1x, 384, 384);
	}
	return v1x;
}

//----- (0004CCF0) --------------------------------------------------------
type_str_0x6E8E* sub_4CCF0(axis_3d* a1x)//22dcf0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // ax
	//int16_t v4; // ax
	//int v5; // edx
	//int v6; // eax
	//Bit8u* v7; // eax

	if (D41A0_BYTESTR_0.str_2FECE.byte_level_type != 2)
		return 0;
	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (!v1x)
		return 0;
	v1x->byte_0x45_69 = 193;
	v1x->byte_0x3F_63 = 5;
	v1x->byte_0x40_64 = 24;
	v1x->byte_0x46_70 = 0;
	v1x->word_0x84_132 = 80;
	v1x->word_0x86_134 = 24;
	//v3 = v1x->word_0x86_134;
	v1x->dword_0x4 = 16000;
	v1x->word_0x82_130 = v1x->word_0x86_134;
	sub_49C70(v1x);
	v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
	//v4 = v1x->word_0x14_20 & 0x7FF;
	v1x->word_0x22_34 = 0;
	v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
	v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
	//v5 = v1x->byte_0x40_64;
	v1x->word_0x1E_30 = v1x->word_0x20_32;
	//v6 = (int)x_D41A0_BYTEARRAY_0;
	v1x->word_0x2A_42 = 1500;
	//v7 = v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
	v1x->byte_0x38_56 = 1;
	//LOBYTE(v5) = (*(x_BYTE *)(v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
	v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
	v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xd8c];
	v1x->byte_0x39_57 = 64;
	v1x->byte_0x41_65 = 3;
	sub_57D70_actualize_event(v1x, a1x);
	sub_49A20_remove_event(v1x);
	sub_49CD0(v1x, 335);
	sub_49EA0(v1x, 256, 640);
	return v1x;
}

//----- (0004CE00) --------------------------------------------------------
type_str_0x6E8E* sub_4CE00(axis_3d* a1x)//22de00
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int v4; // eax
	//int v5; // edx
	//Bit8u* v6; // edx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 201;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 25;
		v1x->byte_0x46_70 = 0;
		v1x->word_0x84_132 = 60;
		v1x->word_0x86_134 = 20;
		v1x->dword_0x4 = 7500;
		v1x->word_0x82_130 = v1x->word_0x84_132;
		sub_49C70(v1x);
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v3 = v1x->word_0x14_20 & 0x7FF;
		v1x->word_0x22_34 = 0;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF)-1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v4 = v1x->byte_0x40_64;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		//v5 = (int)x_D41A0_BYTEARRAY_0;
		v1x->word_0x2A_42 = 300;
		//v6 = v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
		v1x->byte_0x38_56 = 1;
		//LOBYTE(v4) = (*(x_BYTE *)(v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xc38];
		v1x->byte_0x39_57 = 64;
		v1x->byte_0x41_65 = 3;
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 290);
		sub_49EA0(v1x, 384, 384);
	}
	return v1x;
}

//----- (0004CF00) --------------------------------------------------------
type_str_0x6E8E* sub_4CF00(axis_3d* a1x)//22df00
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int v4; // eax
	//int v5; // edx
	//Bit8u* v6; // edx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 209;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 26;
		v1x->word_0x84_132 = 25;
		v1x->word_0x86_134 = 25;
		v1x->dword_0x4 = 4400;
		v1x->word_0x82_130 = v1x->word_0x86_134;
		sub_49C70(v1x);
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v3 = v1x->word_0x14_20 & 0x7FF;
		v1x->word_0x22_34 = 0;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF)-1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v4 = v1x->byte_0x40_64;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		//v5 = (int)x_D41A0_BYTEARRAY_0;
		v1x->word_0x2A_42 = 300;
		//v6 = v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0;
		v1x->byte_0x38_56 = 1;
		//LOBYTE(v4) = (*(x_BYTE *)(v1x->byte_0x40_64 + x_D41A0_BYTEARRAY_0 + 16))++;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xd26];
		v1x->byte_0x39_57 = 64;
		v1x->byte_0x41_65 = 3;
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 318);
		sub_49EA0(v1x, 256, 384);
		sub_293D0(v1x);
	}
	return v1x;
}

//----- (0004D000) --------------------------------------------------------
type_str_0x6E8E* sub_4D000(/*Bit8u* a1,*/ axis_3d* a2x)//22e000
{
	type_str_0x6E8E* v2x; // eax
	type_str_0x6E8E* v3x; // ebx
	int v4; // edi
	type_str_0x6E8E* v5x; // eax
	//int64_t v6; // rtt
	type_str_0x6E8E* v7x; // eax
	type_str_0x6E8E* v8x; // ebx
	int v9; // eax
	type_str_0x6E8E* v11x; // [esp+0h] [ebp-14h]
	signed int i; // [esp+4h] [ebp-10h]
	type_str_0x6E8E* v13x; // [esp+8h] [ebp-Ch]
	type_str_0x6E8E* v14x; // [esp+8h] [ebp-Ch]
	signed int v15; // [esp+Ch] [ebp-8h]
	char v16; // [esp+10h] [ebp-4h]

	type_str_0x6E8E* a1x;

	//fix
	a1x = 0;
	//fix

	v16 = 0;
	if (D41A0_BYTESTR_0.str_2FECE.byte_level_type == 2)
	{
		v16 = 1;
	}
	else
	{
		if (sub_4A810_get_0x35plus() >= 51)
		{
			v2x = sub_4A050_new_event();
			v3x = v2x;
			a1x = v2x;
			if (v2x)
			{
				v2x->byte_0x45_69 = 0xd9;
				v2x->byte_0x3F_63 = 5;
				v2x->byte_0x40_64 = 27;
				sub_57D70_actualize_event(v2x, a2x);
				v13x = v3x;
				v15 = 0;
				v4=v3x-D41A0_BYTESTR_0.struct_0x6E8E;
				while (v15 < 5 && !v16)
				{
					v5x = sub_4A050_new_event();
					v11x = v5x;
					if (v5x)
					{
						v5x->byte_0x45_69 = 0xe9;
						v5x->byte_0x3F_63 = 5;
						v5x->byte_0x40_64 = 27;
						v5x->byte_0x3B_59 = v15;
						v5x->word_0x1A_26 = v4;
						v5x->word_0x32_50 = v4;
						v13x->word_0x34_52 = v5x - D41A0_BYTESTR_0.struct_0x6E8E;
						v14x = v5x;
						v5x->word_0x34_52 = 0;
						sub_57D70_actualize_event(v5x, a2x);
						for (i = 0; i < 9 && !v16; i++)
						{
							v7x = sub_4A050_new_event();
							v8x = v7x;
							v11x = v7x;
							if (v7x)
							{
								v7x->byte_0x45_69 = 234;
								v7x->byte_0x3F_63 = 5;
								v7x->byte_0x40_64 = 27;
								v7x->byte_0x3B_59 = v15;
								v9 = v7x-D41A0_BYTESTR_0.struct_0x6E8E;
								v8x->word_0x1A_26 = v4;
								v8x->word_0x32_50 = v4;
								v14x->word_0x34_52 = v9;
								v8x->word_0x34_52 = 0;
								sub_57D70_actualize_event(v8x, a2x);
							}
							else
							{
								v16 = 1;
							}
							v14x = v11x;
						}
					}
					else
					{
						v16 = 1;
					}
					v13x = v11x;
					v15++;
				}
			}
		}
		if (!a1x || v16)
		{
			sub_2AE80(a1x);
		}
		else
		{
			sub_2AC50(a1x);
			sub_2AD40(a1x);
			sub_2AE30(a1x);
		}
	}
	if (v16)
		a1x = 0;
	return a1x;
}

//----- (0004D1D0) --------------------------------------------------------
type_str_0x6E8E* sub_4D1D0(axis_3d* a1x)//22e1d0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int16_t v4; // ax
	//int v5; // edx
	//int v6; // eax
	//Bit8u* v7; // edx
	//char v8; // cl
	//int v9; // ecx
	//int v10; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 225;
		v1x->byte_0x3F_63 = 5;
		v1x->byte_0x40_64 = 28;
		v1x->word_0x84_132 = 120;
		v1x->word_0x86_134 = 64;
		v1x->dword_0x4 = 8000;
		sub_49C70(v1x);
		//v3 = v1x->word_0x14_20;
		v1x->struct_byte_0xc_12_15.byte[3] |= 8u;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = word_0x14_20 & 0x7FF;
		v1x->word_0x22_34 = 0;
		v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
		v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
		//v5 = v1x->byte_0x40_64;
		v1x->word_0x1E_30 = v1x->word_0x20_32;
		//v6 = (int)x_D41A0_BYTEARRAY_0;
		v1x->word_0x2A_42 = 2000;
		//v7 = x_D41A0_BYTEARRAY_0 + v1x->byte_0x40_64;
		v1x->byte_0x38_56 = 1;
		//v8 = (*(x_BYTE *)(x_D41A0_BYTEARRAY_0 + v1x->byte_0x40_64 + 16))++;
		v1x->byte_0x3E_62 = D41A0_BYTESTR_0.array_0x10[v1x->byte_0x40_64]++;
		//v9 = v1x->word_0x86_134;
		//v10 = (v1x->word_0x84_132 - v1x->word_0x86_134) / 2;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0xC5A];
		v1x->byte_0x39_57 = 64;
		v1x->byte_0x41_65 = 3;
		v1x->word_0x82_130 = v1x->word_0x86_134 + (v1x->word_0x84_132 - v1x->word_0x86_134) / 2;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 292);
		sub_49EA0(v1x, 85, 42);
	}
	return v1x;
}

//----- (0004D2E0) --------------------------------------------------------
type_str_0x6E8E* sub_4D2E0(axis_3d* a1x)//22e2e0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 0;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 0;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x880];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 340);
		sub_847D0(v1x, 128, 1, 0);
	}
	return v1x;
}

//----- (0004D380) --------------------------------------------------------
type_str_0x6E8E* sub_4D380(axis_3d* a1x)//22e380
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_4D2E0(a1x);
	if (resultx)
	{
		resultx->byte_0x45_69 = 29;
		resultx->byte_0x40_64 = 28;
	}
	return resultx;
}

//----- (0004D3B0) --------------------------------------------------------
type_str_0x6E8E* sub_4D3B0(axis_3d* a1x)//22e3b0
{
	type_str_0x6E8E* resultx; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	resultx = sub_4A050_new_event();
	//v2x = resultx;
	if (resultx)
	{
		resultx->byte_0x45_69 = 1;
		resultx->byte_0x3F_63 = 9;
		resultx->byte_0x40_64 = 1;
		resultx->word_0x82_130 = 384;
		resultx->word_0x84_132 = 384;
		//v3 = 4096 / resultx->word_0x82_130;
		resultx->dword_0x90_144 = 50;
		resultx->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x81a];
		resultx->dword_0x4 = 4096 / resultx->word_0x82_130;
		//BYTE1(v3) = resultx->struct_byte_0xc_12_15.dbyte1_2.byte1;
		resultx->byte_0x41_65 = 10;
		resultx->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(resultx, a1x);
		sub_49A20_remove_event(resultx);
		sub_49CD0(resultx, 209);
		sub_49EA0(resultx, 2 * resultx->array_0x52_82.xshift, 5 * resultx->array_0x52_82.dd / 2);
		//result = v2;
	}
	return resultx;
}

//----- (0004D470) --------------------------------------------------------
type_str_0x6E8E* sub_4D470(axis_3d* a1x)//22e470
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 2;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 2;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 211);
	}
	return v1x;
}

//----- (0004D500) --------------------------------------------------------
type_str_0x6E8E* sub_4D500(axis_3d* a1x)//22e500
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 3;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 3;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7F8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 76);
	}
	return v1x;
}

//----- (0004D590) --------------------------------------------------------
type_str_0x6E8E* sub_4D590(axis_3d* a1x)//22e590
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 4;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 4;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7F8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 210);
	}
	return v1x;
}

//----- (0004D620) --------------------------------------------------------
type_str_0x6E8E* sub_4D620(axis_3d* a1x)//22e620
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 5;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 5;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 211);
	}
	return v1x;
}

//----- (0004D6B0) --------------------------------------------------------
type_str_0x6E8E* sub_4D6B0(axis_3d* a1x)//22e6b0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 6;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 6;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 212);
	}
	return v1x;
}

//----- (0004D740) --------------------------------------------------------
type_str_0x6E8E* sub_4D740(axis_3d* a1x)//22e740
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 7;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 7;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 213);
	}
	return v1x;
}

//----- (0004D7D0) --------------------------------------------------------
type_str_0x6E8E* sub_4D7D0(axis_3d* a1x)//22e7d0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 8;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 8;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x85e];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 214);
	}
	return v1x;
}

//----- (0004D860) --------------------------------------------------------
type_str_0x6E8E* sub_4D860(axis_3d* a1x)//22e860
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 9;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 9;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 3584 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 3584 / v1x->word_0x82_130;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x85e];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 216);
		sub_847D0(v1x, 128, 9, 0);
	}
	return v1x;
}

//----- (0004D900) --------------------------------------------------------
type_str_0x6E8E* sub_4D900(axis_3d* a1x)//22e900
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 10;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 10;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 18);
	}
	return v1x;
}

//----- (0004D990) --------------------------------------------------------
type_str_0x6E8E* sub_4D990(axis_3d* a1x)//22e990
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 11;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 11;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 281);
	}
	return v1x;
}

//----- (0004DA20) --------------------------------------------------------
type_str_0x6E8E* sub_4DA20(axis_3d* a1x)//22ea20
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 12;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 12;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 2048 / v1x->word_0x82_130;
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 2048 / v1x->word_0x82_130;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 216);
	}
	return v1x;
}

//----- (0004DAB0) --------------------------------------------------------
type_str_0x6E8E* sub_4DAB0(axis_3d* a1x)//22eab0
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 13;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 13;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		v1x->dword_0x4 = 5120 / v1x->word_0x82_130;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49E10(v1x, 195);
	}
	return v1x;
}

//----- (0004DBC0) --------------------------------------------------------
type_str_0x6E8E* sub_4DBC0(axis_3d* a1x)//22ebc0
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 15;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 14;
		v1x->word_0x82_130 = 128;
		v1x->word_0x84_132 = 128;
		v1x->dword_0x4 = 4096 / v1x->word_0x82_130;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 196);
	}
	return v1x;
}

//----- (0004DC40) --------------------------------------------------------
type_str_0x6E8E* sub_4DC40(axis_3d* a1x)//22ec40
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 21;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 20;
		v1x->word_0x82_130 = 394;
		v1x->word_0x84_132 = v1x->word_0x82_130;
		v1x->dword_0x4 = 7680 / v1x->word_0x82_130;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 196);
	}
	return v1x;
}

//----- (0004DCC0) --------------------------------------------------------
type_str_0x6E8E* sub_4DCC0(axis_3d* a1x)//22ecc0
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 22;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 21;
		v1x->word_0x82_130 = 394;
		v1x->word_0x84_132 = v1x->word_0x82_130;
		v1x->dword_0x4 = 7680 / v1x->word_0x82_130;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 319);
		sub_49EA0(v1x, 256, 512);
	}
	return v1x;
}

//----- (0004DD50) --------------------------------------------------------
type_str_0x6E8E* sub_4DD50(axis_3d* a1x)//22ed50
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->dword_0x4 = 80;
		v1x->byte_0x45_69 = 16;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 15;
		v1x->word_0x82_130 = 128;
		v1x->word_0x84_132 = 128;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 215);
	}
	return v1x;
}

//----- (0004DDD0) --------------------------------------------------------
type_str_0x6E8E* sub_4DDD0(axis_3d* a1x)//22edd0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 18;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 17;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 4096 / *(int16_t *)(v1 + 130);
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 4096 / v1x->word_0x82_130;
		//BYTE1(v3) = *(x_BYTE *)(v1 + 12);
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x81a];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 209);
		sub_49EA0(v1x, 2 * v1x->array_0x52_82.xshift, 2 * v1x->array_0x52_82.dd);
	}
	return v1x;
}

//----- (0004DEA0) --------------------------------------------------------
type_str_0x6E8E* sub_4DEA0(axis_3d* a1x)//22eea0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 23;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 22;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / *(int16_t *)(v1 + 130);
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = *(x_BYTE *)(v1 + 12);
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 211);
	}
	return v1x;
}

//----- (0004DF30) --------------------------------------------------------
type_str_0x6E8E* sub_4DF30(axis_3d* a1x)//22ef30
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 28;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 27;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / *(int16_t *)(v1 + 130);
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = *(x_BYTE *)(v1 + 12);
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 215);
	}
	return v1x;
}

//----- (0004DFC0) --------------------------------------------------------
type_str_0x6E8E* sub_4DFC0(axis_3d* a1x)//22efc0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//Bit8u* v3; // esi
	//int v4; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	//v3 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 24;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 23;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v4 = 0x2000 / *(int16_t *)(v1 + 130);
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v4) = *(x_BYTE *)(v1 + 12);
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 211);
	}
	return v1x;
}

//----- (0004E050) --------------------------------------------------------
type_str_0x6E8E* sub_4E050(axis_3d* a1x)//22f050
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax
	//char v4; // dl

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 25;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 24;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / *(int16_t *)(v1 + 130);
		v1x->dword_0x90_144 = 50;
		//v4 = *(x_BYTE *)(v1 + 12);
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		//BYTE1(v3) = *(x_BYTE *)(v1 + 4);
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->dword_0x4 = v1x->dword_0x4 & 0xFC;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 281);
	}
	return v1x;
}

//----- (0004E0F0) --------------------------------------------------------
type_str_0x6E8E* sub_4E0F0(axis_3d* a1x)//22f0f0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 26;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 25;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 4096 / *(int16_t *)(v1 + 130);
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 4096 / v1x->word_0x82_130;
		//BYTE1(v3) = *(x_BYTE *)(v1 + 12);
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x81a];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 321);
	}
	return v1x;
}

//----- (0004E180) --------------------------------------------------------
type_str_0x6E8E* sub_4E180(axis_3d* a1x)//22f180
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 27;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 26;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / *(int16_t *)(v1 + 130);
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = *(x_BYTE *)(v1 + 12);
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 320);
	}
	return v1x;
}

//----- (0004E210) --------------------------------------------------------
type_str_0x6E8E* sub_4E210(axis_3d* a1x)//22f210
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 31;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 30;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		//v3 = 0x2000 / *(int16_t *)(v1 + 130);
		v1x->dword_0x90_144 = 50;
		v1x->dword_0x4 = 0x2000 / v1x->word_0x82_130;
		//BYTE1(v3) = *(x_BYTE *)(v1 + 12);
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 211);
	}
	return v1x;
}

//----- (0004E2A0) --------------------------------------------------------
type_str_0x6E8E* sub_4E2A0(axis_3d* a1x)//22f2a0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 30;
		v1x->byte_0x3F_63 = 9;
		v1x->byte_0x40_64 = 29;
		v1x->word_0x82_130 = 384;
		v1x->word_0x84_132 = 384;
		v1x->dword_0x4 = 10;
		//v3 = *(x_BYTE *)(v1 + 12);
		v1x->dword_0x90_144 = 50;
		v1x->dword_0xA0_160x = (type_str_160*)&unk_D7BD6[0x7f8];
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 66);
	}
	return v1x;
}

//----- (0004E320) --------------------------------------------------------
int debugcounter = 0;
type_str_0x6E8E* sub_4E320(axis_3d* a1x)//22f320
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//int v3; // edx
	if (debugcounter >= 0x09)
	{
		//myprintf("i:%d,", debugcounter);
	}
	debugcounter++;
	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->dword_0x4 = 8;
		v1x->byte_0x45_69 = 0;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 0;
		v1x->word_0x2A_42 = 400;
		//v3 = *(x_DWORD *)(v1 + 12);
		v1x->byte_0x38_56 = 0;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 7);//problem
		sub_49EA0(v1x, 128, 128);
		sub_847D0(v1x, 128, 7, 1);
	}
	return v1x;
}

//----- (0004E3B0) --------------------------------------------------------
type_str_0x6E8E* sub_4E3B0(axis_3d* a1x)//22f3b0 - add effect Big explosion
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//int v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 1;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 1;
		v1x->dword_0x4 = 1;
		//v3 = *(x_DWORD *)(v1 + 12);
		v1x->word_0x2A_42 = 400;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 41);
		sub_847D0(v1x, 128, 7, 1);
	}
	return v1x;
}

//----- (0004E430) --------------------------------------------------------
type_str_0x6E8E* sub_4E430(axis_3d* a1x)//22f430
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//unsigned int v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 8;
		v1x->byte_0x45_69 = 2;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 2;
		v1x->array_0x4C_76 = *a1x;
		//v3 = *(x_DWORD *)(v1 + 12) & 0xFFFDFFF6;
		v1x->dword_0x10_16 = 0;
		v1x->struct_byte_0xc_12_15.dword = v1x->struct_byte_0xc_12_15.dword & 0xFFFDFFF6 | 0x20001;
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004E490) --------------------------------------------------------
type_str_0x6E8E* sub_4E490(axis_3d* a1x)//22f490
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // edx
	//char v4; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 7;
		v1x->byte_0x45_69 = 3;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 3;
		//v3 = *(x_DWORD *)(v1 + 12);
		v1x->word_0x2A_42 = 0;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		//v4 = *(x_BYTE *)(v1 + 14) | 2;
		v1x->dword_0x10_16 = 0;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 36);
	}
	return v1x;
}

//----- (0004E500) --------------------------------------------------------
type_str_0x6E8E* sub_4E500(axis_3d* a1x)//22f500
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 100;
		v1x->byte_0x45_69 = 4;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 4;
		//v3 = *(x_DWORD *)(v1 + 12);
		v1x->word_0x2A_42 = 0;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2u;
		v1x->dword_0x10_16 = 0;
		v1x->array_0x4C_76 = *a1x;
		v1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&v1x->array_0x4C_76);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004E570) --------------------------------------------------------
type_str_0x6E8E* sub_4E570(axis_3d* a1x)//22f570
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // edx
	//char v4; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 8;
		v1x->byte_0x45_69 = 5;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 5;
		//v3 = *(x_DWORD *)(v1 + 12);
		v1x->word_0x2A_42 = 0;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		//v4 = *(x_BYTE *)(v1 + 14) | 2;
		v1x->dword_0x10_16 = 0;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2;
		sub_57D70_actualize_event(v1x, a1x);
		v1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&v1x->array_0x4C_76);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 244);
	}
	return v1x;
}

//----- (0004E5F0) --------------------------------------------------------
type_str_0x6E8E* sub_4E5F0(axis_3d* a1x)//22f5f0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 6;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 6;
		v1x->word_0x2A_42 = 50;
		v1x->dword_0x4 = 240;
		//v3 = *(x_DWORD *)(v1 + 12);
		v1x->word_0x2C_44 = 0;
		v1x->struct_byte_0xc_12_15.dword &=  0xFFFDFFF7;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2u;
		sub_57D70_actualize_event(v1x, a1x);
		v1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 228);
		sub_49EA0(v1x, 272, 1536);
		v1x->dword_0x10_16 = 0;
		sub_847D0(v1x, 80, 11, 1);
	}
	return v1x;
}

//----- (0004E6A0) --------------------------------------------------------
type_str_0x6E8E* sub_4E6A0(axis_3d* a1x)//22f6a0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 7;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 7;
		//v3 = *(x_DWORD *)(v1 + 12);
		v1x->dword_0x4 = 12;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		//LOWORD(v3) = *(x_WORD *)(v1 + 20);
		v1x->struct_byte_0xc_12_15.byte[2] |= 2u;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//LOWORD(v3) = *(x_WORD *)(v1 + 20) % 0x14u;
		v1x->byte_0x41_65 = 10;
		v1x->byte_0x42_66 = 7;
		v1x->word_0x82_130 = (v1x->word_0x14_20 % 0x14u) + 20;
		sub_57D70_actualize_event(v1x, a1x);
		v1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(a1x);
		sub_49DA0(v1x, 78);
		sub_49A20_remove_event(v1x);
		v1x->struct_byte_0xc_12_15.byte[0] |= 1u;
	}
	return v1x;
}

type_str_0x6E8E* sub_4E750()//22f750
{
	return 0;
}

//----- (0004E760) --------------------------------------------------------
type_str_0x6E8E* sub_4E760(axis_3d* a1x)//22f760
{
	type_str_0x6E8E* v1x; // eax
	//int v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 9;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 9;
		v1x->dword_0x4 = 11;
		v1x->dword_0x8 = 17;
		v1x->array_0x4C_76 = *a1x;
		v1x->word_0x2A_42 = 2000;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_49EA0(v1x, 7, 0x4000);
		D41A0_BYTESTR_0.byte_0x36E03 = 0;
	}
	return v1x;
}

//----- (0004E7D0) --------------------------------------------------------
type_str_0x6E8E* sub_4E7D0(axis_3d* a1x)//22f7d0
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//int v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 10;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 10;
		v1x->dword_0x4 = 1;
		v1x->array_0x4C_76 = *a1x;
		//v3 = *(x_DWORD *)(v1 + 12);
		v1x->word_0x2A_42 = 100;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2u;
		sub_49A20_remove_event(v1x);
		sub_49EA0(v1x, 128, 128);
	}
	return v1x;
}

//----- (0004E840) --------------------------------------------------------
type_str_0x6E8E* sub_4E840(axis_3d* a1x)//22f840
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // edx
	//char v4; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 11;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 11;
		v1x->dword_0x4 = 40;
		v1x->array_0x4C_76 = *a1x;
		//v3 = *(x_DWORD *)(v1 + 12);
		v1x->word_0x2A_42 = 200;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		//v4 = *(x_BYTE *)(v1 + 14) | 2;
		v1x->word_0x26_38 = 11;
		v1x->struct_byte_0xc_12_15.byte[2] |=2;
		sub_49A20_remove_event(v1x);
		sub_49EA0(v1x, 2304, 0x2000);
	}
	return v1x;
}

//----- (0004E8C0) --------------------------------------------------------
type_str_0x6E8E* sub_4E8C0(axis_3d* a1x)//22f8c0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 12;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 12;
		v1x->dword_0x4 = 8;
		v1x->array_0x4C_76 = *a1x;
		v1x->word_0x2A_42 = 64000;
		v1x->struct_byte_0xc_12_15.byte[0] = v1x->struct_byte_0xc_12_15.byte[0] & 0xF6 | 1;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 41);
		v1x->struct_byte_0xc_12_15.byte[0] |= 1u;
		sub_49EA0(v1x, 512, 512);
	}
	return v1x;
}

//----- (0004E950) --------------------------------------------------------
type_str_0x6E8E* sub_4E950(axis_3d* a1x)//22f950
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 77;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 70;
		v1x->dword_0x4 = 8;
		v1x->array_0x4C_76 = *a1x;
		v1x->word_0x2A_42 = 64000;
		v1x->struct_byte_0xc_12_15.byte[0] = v1x->struct_byte_0xc_12_15.byte[0] & 0xF6 | 1;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 41);
		v1x->struct_byte_0xc_12_15.byte[0] |= 1u;
		sub_49EA0(v1x, 512, 512);
	}
	return v1x;
}

//----- (0004E9E0) --------------------------------------------------------
type_str_0x6E8E* sub_4E9E0(axis_3d* a1x)//22f9e0
{
	//Bit8u* v1; // eax

	//v1 = x_D41A0_BYTEARRAY_0;
	//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) = 9377 * *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
	D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;
	return sub_4EAA0(a1x, 13, 13, 67, D41A0_BYTESTR_0.dword_0x8 % 0x17u + 17);
}

//----- (0004EA20) --------------------------------------------------------
type_str_0x6E8E* sub_4EA20(axis_3d* a1x)//22fa20
{
	//Bit8u* v1; // eax

	//v1 = x_D41A0_BYTEARRAY_0;
	//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) = 9377 * *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
	D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;
	return sub_4EAA0(a1x, 14, 14, 9, D41A0_BYTESTR_0.dword_0x8 % 0x21u + 28);
}

//----- (0004EA60) --------------------------------------------------------
type_str_0x6E8E* sub_4EA60(axis_3d* a1x)//22fa60
{
	//Bit8u* v1; // eax

	//v1 = x_D41A0_BYTEARRAY_0;
	//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) = 9377 * *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
	D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;
	return sub_4EAA0(a1x, 87, 94, 67, D41A0_BYTESTR_0.dword_0x8 % 0x17u + 17);
}

//----- (0004EAA0) --------------------------------------------------------
type_str_0x6E8E* sub_4EAA0(axis_3d* a1x, char a2, char a3, int16_t a4, int a5)//22faa0
{
	type_str_0x6E8E* v5x; // eax
	//Bit8u* v6; // ebx
	//unsigned int v7; // edx
	//uint64_t v8; // rt2
	//char v9; // ah

	v5x = sub_4A050_new_event();
	//v6 = v5;
	if (v5x)
	{
		//v7 = *(x_DWORD *)(v5 + 12) & 0xFFFDFFF7;
		v5x->byte_0x45_69 = a3;
		v5x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		v5x->byte_0x40_64 = a2;
		//LOWORD(v7) = *(x_WORD *)(v5 + 20);
		v5x->dword_0x4 = a5;
		v5x->word_0x14_20 = 9377 * v5x->word_0x14_20 + 9439;//mybe must fix
		//v8 = *(uint16_t *)(v5 + 20);
		v5x->byte_0x3F_63 = 10;
		v5x->word_0x86_134 = 30;
		v5x->byte_0x41_65 = 10;
		v5x->byte_0x42_66 = a2;
		//v9 = *(x_BYTE *)(v5 + 14);
		v5x->word_0x82_130 = v5x->word_0x14_20 % 0x35 + 51;
		v5x->struct_byte_0xc_12_15.byte[2] |= 2;
		sub_57D70_actualize_event(v5x, a1x);
		sub_49DA0(v5x, a4);
		sub_49A20_remove_event(v5x);
	}
	return v5x;
}

//----- (0004EB50) --------------------------------------------------------
type_str_0x6E8E* sub_4EB50(axis_3d* a1x)//22fb50
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int16_t v4; // cx
	//char v5; // ah

	if (sub_4A810_get_0x35plus() < 32)
		return 0;
	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (!v1x)
		return 0;
	v1x->byte_0x45_69 = 64;
	v1x->byte_0x3F_63 = 10;
	//v3 = v1x->word_0x14_20;
	v1x->byte_0x40_64 = 59;
	v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
	//v4 = v1x->word_0x14_20;
	//v5 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1 & 0xF6;
	v1x->dword_0x4 = v1x->word_0x14_20 % 0x64u + 800;
	v1x->struct_byte_0xc_12_15.byte[0] = (v1x->struct_byte_0xc_12_15.byte[0] & 0xF6) | 1;
	v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
	v1x->word_0x82_130 = v1x->word_0x14_20 % 0x11u;
	v1x->array_0x4C_76 = *a1x;
	sub_49A20_remove_event(v1x);
	return v1x;
}

//----- (0004EC10) --------------------------------------------------------
type_str_0x6E8E* sub_4EC10(axis_3d* a1x)//22fc10- add effect ??
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int16_t v4; // cx
	//char v5; // ah

	if (sub_4A810_get_0x35plus() < 32)
		return 0;
	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (!v1x)
		return 0;
	v1x->byte_0x45_69 = 65;
	v1x->byte_0x3F_63 = 10;
	//v3 = v1x->word_0x14_20;
	v1x->byte_0x40_64 = 60;
	v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
	//v4 = v1x->word_0x14_20;
	//v5 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1 & 0xF6;
	v1x->dword_0x4 = v1x->word_0x14_20 % 0x64u + 800;
	v1x->struct_byte_0xc_12_15.byte[0] = (v1x->struct_byte_0xc_12_15.byte[0] & 0xF6) | 1;
	v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
	v1x->word_0x82_130 = v1x->word_0x14_20 % 0x11u;
	v1x->array_0x4C_76 = *a1x;
	sub_49A20_remove_event(v1x);
	return v1x;
}

//----- (0004ECD0) --------------------------------------------------------
type_str_0x6E8E* sub_4ECD0(axis_3d* a1x)//22fcd0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int16_t v4; // ax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 15;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 15;
		v1x->dword_0x4 = 128;
		v1x->word_0x82_130 = 256;
		//v3 = *(x_WORD *)(v1 + 20);
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		v1x->word_0x2A_42 = 100;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = *(x_WORD *)(v1 + 20);
		v1x->dword_0x10_16 = 0;
		v1x->word_0x1C_28 = v1x->word_0x14_20 & 0x7FF;
		v1x->array_0x4C_76 = *a1x;
		sub_49A20_remove_event(v1x);
		sub_49EA0(v1x, 1024, 0x4000);
	}
	return v1x;
}

//----- (0004ED70) --------------------------------------------------------
type_str_0x6E8E* sub_4ED70(axis_3d* a1x)//22fd70
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 17;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 17;
		v1x->array_0x4C_76 = *a1x;
		v1x->dword_0x4 = 10;
		v1x->word_0x2A_42 = 3000;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004EDC0) --------------------------------------------------------
type_str_0x6E8E* sub_4EDC0(axis_3d* a1x)//22fdc0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	Bit16u v3x; // edx
	//int16_t v4; // ax
	//int16_t v5; // ax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 16;
		v1x->byte_0x3F_63 = 10;
		//v3 = *(x_DWORD *)(v1 + 12);
		v1x->byte_0x40_64 = 16;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		//LOWORD(v3) = v1x->word_0x14_20;
		v1x->word_0x2A_42 = 200;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = 9377 * v1x->word_0x14_20;
		v1x->dword_0x4 = v1x->word_0x14_20 % 0x64u + 100;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		v3x = v1x->word_0x14_20 % 0x32u;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v5 = v1x->word_0x14_20;
		v1x->word_0x2C_44 = 256;
		v1x->word_0x1C_28 = v1x->word_0x14_20 & 0x7FF;
		//HIBYTE(v5) = v1x->struct_byte_0xc_12_15.dbyte3_4.byte1;
		v1x->word_0x82_130 = v3x + 52;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2;
		sub_57D70_actualize_event(v1x, a1x);
		v1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(a1x) + 64;
		sub_57FA0(&v1x->word_0x9A_154x, v1x->word_0x1C_28, 0, v1x->word_0x82_130);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 210);
	}
	return v1x;
}

//----- (0004EED0) --------------------------------------------------------
type_str_0x6E8E* sub_4EED0(axis_3d* a1x)//22fed0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 18;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 18;
		v1x->word_0x2A_42 = 200;
		//v3 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0x10_16 = 0;
		v1x->dword_0x4 = 10000;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		v1x->array_0x4C_76 = *a1x;
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004EF30) --------------------------------------------------------
type_str_0x6E8E* sub_4EF30(axis_3d* a1x)//22ff30
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 98;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 91;
		v1x->word_0x2A_42 = 200;
		//v3 = *(x_BYTE *)(v1 + 12);
		v1x->dword_0x10_16 = 0;
		//v3 &= 0xF6u;
		v1x->dword_0x4 = 10000;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF6u;
		v1x->struct_byte_0xc_12_15.byte[0] |= 1;
		v1x->array_0x4C_76 = *a1x;
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004EF90) --------------------------------------------------------
type_str_0x6E8E* sub_4EF90(axis_3d* a1x)//22ff90
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 19;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 19;
		v1x->word_0x2A_42 = 200;
		//v3 = *(x_DWORD *)(v1 + 12);
		v1x->dword_0x4 = 240;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2u;
		sub_57D70_actualize_event(v1x, a1x);
		v1x->struct_byte_0xc_12_15.byte[0] |= 1u;
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 228);
		sub_49EA0(v1x, 512, 512);
	}
	return v1x;
}

//----- (0004F040) --------------------------------------------------------
type_str_0x6E8E* sub_4F040(axis_3d* a1x)//230040
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int16_t v4; // ax
	//int16_t v5; // ax
	type_str_0x6E8E* v6x; // eax
	//Bit8u* v7; // ecx
	type_str_0x6E8E* v9x; // [esp+0h] [ebp-10h]
	type_str_0x6E8E* v10x; // [esp+4h] [ebp-Ch]
	//x_WORD *v11; // [esp+8h] [ebp-8h]
	signed int i; // [esp+Ch] [ebp-4h]

	if (sub_4A810_get_0x35plus() < 12)
		return 0;
	v1x = sub_4A050_new_event();
	//v2 = v1;
	//v11 = (x_WORD *)v1;
	if (!v1x)
		return 0;
	v1x->byte_0x45_69 = 22;
	v1x->byte_0x3F_63 = 10;
	v1x->byte_0x40_64 = 22;
	v1x->word_0x2C_44 = 0;
	v1x->word_0x2E_46 = 1;
	v1x->byte_0x3C_60 = 0;
	v1x->word_0x84_132 = 20;
	v1x->word_0x86_134 = 10;
	v1x->word_0x82_130 = 50;
	v1x->dword_0x4 = 500;
	v1x->word_0x2A_42 = 1000;
	//v3 = v1x->word_0x14_20;
	v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
	v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
	//v4 = v1x->word_0x14_20;
	v1x->word_0x22_34 = 0;
	v1x->byte_0x38_56 = 1;
	//v5 = (v1x->word_0x14_20 & 0x7FF) - 1;
	v1x->word_0x20_32 = (v1x->word_0x14_20 & 0x7FF) - 1;
	v1x->word_0x1C_28 = (v1x->word_0x14_20 & 0x7FF) - 1;
	v10x = v1x;
	v1x->word_0x1E_30 = v1x->word_0x20_32;
	sub_49A20_remove_event(v1x);
	for (i = 0; i < 11; i++)
	{
		v6x = sub_4A050_new_event();
		v9x = v6x;
		if (v6x)
		{
			qmemcpy(v6x, v1x, 0xA8u);
			v6x->byte_0x40_64 = 75;
			v6x->byte_0x45_69 = 82;
			v6x->word_0x2C_44 = i + 1;
			v6x->word_0x32_50 = v10x - D41A0_BYTESTR_0.struct_0x6E8E;
			v10x->word_0x34_52 = v6x - D41A0_BYTESTR_0.struct_0x6E8E;
			v6x->word_0x34_52 = 0;
			v6x->byte_0x3E_62 = i;
			sub_57D70_actualize_event(v6x, a1x);
		}
		v10x = v9x;
	}
	sub_57D70_actualize_event(v1x, a1x);
	sub_4F1C0(v1x);
	return v1x;
}

//----- (0004F1C0) --------------------------------------------------------
uint16_t sub_4F1C0(type_str_0x6E8E* a1x)//230c10
{
	type_str_0x6E8E* v1x; // ebx
	int v2; // esi
	uint16_t result; // ax
	int v4; // ecx
	uint16_t v5; // di
	int v6; // ST0C_4
	int v7; // edi
	uint16_t i; // [esp+4h] [ebp-8h]

	v1x = a1x;
	v2 = 0;
	result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	for (i = result; v1x > x_DWORD_EA3E4[0]; v1x = x_DWORD_EA3E4[result])
	{
		v4 = v1x->word_0x2C_44 + 293;
		v5 = x_WORD_D951C[4+7 * v4];
		v6 = 550 * v5 / 1000;
		v7 = 450 * v5 / 1000;
		sub_49CD0(v1x, v4);
		sub_49EA0(v1x, v6, v7);
		v1x->array_0x4C_76.z = v2 + i;
		result = v1x->word_0x34_52;
		v1x->word_0x36_54 = v2;
		v2 += 2 * v7;
	}
	return result;
}

//----- (0004F2A0) --------------------------------------------------------
type_str_0x6E8E* sub_4F2A0(axis_3d* a1x)//2302a0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // ah
	type_str_0x6E8E* v4x; // eax
	//Bit8u* v5; // ecx
	//Bit8u* v7; // [esp+0h] [ebp-10h]
	type_str_0x6E8E* v8x; // [esp+4h] [ebp-Ch]
	signed int i; // [esp+8h] [ebp-8h]
	//Bit8u* v10; // [esp+Ch] [ebp-4h]

	//fix
	v8x = 0;
	v1x = 0;
	//fix

	//v10 = 0;
	if (sub_4A810_get_0x35plus() >= 26)
	{
		v1x = sub_4A050_new_event();
		//v2 = v1;
		//v10 = v1;
		if (v1x)
		{
			v1x->byte_0x45_69 = 83;
			v1x->byte_0x3F_63 = 10;
			v1x->byte_0x40_64 = 76;
			v1x->dword_0x4 = 80;
			v1x->word_0x2A_42 = 70;
			v1x->word_0x82_130 = 40;
			v1x->word_0x86_134 = 192;
			v1x->word_0x84_132 = 480;
			v1x->word_0x82_130 = 40;
			//v3 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
			v1x->byte_0x38_56 = 1;
			v1x->byte_0x43_67 = 0;
			v1x->byte_0x44_68 = 0;
			v1x->word_0x2C_44 = 0;
			v1x->byte_0x3D_61 = 0;
			v8x = v1x;
			v1x->struct_byte_0xc_12_15.byte[0] &= 0xf6;
			v1x->struct_byte_0xc_12_15.byte[0] |= 1;
			sub_49A20_remove_event(v1x);
			for (i = 0; i < 25; i++)
			{
				v4x = sub_4A050_new_event();
				//v7 = v4;
				if (v4x)
				{
					qmemcpy(v4x, v1x, sizeof(type_str_0x6E8E));
					v4x->byte_0x40_64 = 77;
					v4x->byte_0x45_69 = 84;
					v4x->word_0x32_50 = v8x - D41A0_BYTESTR_0.struct_0x6E8E;
					v8x->word_0x34_52 = v4x - D41A0_BYTESTR_0.struct_0x6E8E;
					v4x->byte_0x3E_62 = i;
					v4x->byte_0x43_67 = i / 5;
					v4x->word_0x34_52 = 0;
					v4x->byte_0x44_68 = i % 5;
					sub_57D70_actualize_event(v4x, a1x);
				}
				v8x = v4x;
			}
			sub_57D70_actualize_event(v1x, a1x);
			sub_49EA0(v1x, 640, 640);
			sub_4F440(v1x);
		}
	}
	return v1x;
}

//----- (0004F440) --------------------------------------------------------
int16_t sub_4F440(type_str_0x6E8E* a1x)//230440
{
	uint16_t v1; // ax
	int v2; // eax
	//char v3; // ah
	char v4; // dl
	//char v5; // cl
	int16_t v6; // ax
	int v7; // edx
	int v8; // edx
	int16_t v9; // dx
	int16_t v10; // cx
	int16_t v11; // dx
	int16_t v12; // dx
	type_str_0x6E8E* v13x; // ebx

	v1 = a1x->word_0x86_134;
	a1x->byte_0x3D_61 = 18;
	a1x->word_0x2C_44 = v1;
	a1x->word_0x1C_28 = 0;
	v2 = v1;
	LOWORD(v2) = a1x->word_0x34_52;
	a1x->word_0x1E_30 = 0;
	while (1)
	{
		v13x = x_DWORD_EA3E4[v2];
		if (v13x <= x_DWORD_EA3E4[0])
			return v2;
		//v3 = v13x->struct_byte_0xc_12_15.byte[0] & 0xFE;
		v4 = v13x->byte_0x44_68;
		v13x->struct_byte_0xc_12_15.byte[0] &= 0xFE;
		if (v4)
		{
			//v5 = v13x->struct_byte_0xc_12_15.dbyte1_2.byte1 & 0xF7;
			v13x->struct_byte_0xc_12_15.byte[2] |= 0x80u;
			v13x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		}
		else
		{
			v13x->struct_byte_0xc_12_15.byte[0] |= 8;
		}
		v13x->word_0x14_20 = 9377 * v13x->word_0x14_20 + 9439;
		v6 = (v13x->word_0x14_20 & 0x3F) + 84;
		v7 = v13x->byte_0x43_67;
		switch ((x_BYTE)v7)
		{
		case 0:
			LOWORD(v7) = v13x->byte_0x44_68;
			v13x->word_0x1E_30 = 0;
			v13x->word_0x22_34 = 0;
			v8 = 512 - 96 * v7;
			v13x->word_0x20_32 = v6;
			BYTE1(v8) &= 7u;
			v13x->word_0x1C_28 = v8;
			break;
		case 1:
			v9 = 96 * v13x->byte_0x44_68;
			v10 = 512;
			v13x->word_0x1C_28 = 512;
			goto LABEL_11;
		case 2:
			v11 = v13x->byte_0x44_68;
			v13x->word_0x1C_28 = 0;
			v13x->word_0x20_32 = 0;
			v12 = -96 * v11;
			goto LABEL_12;
		case 3:
			v9 = 96 * v13x->byte_0x44_68;
			v10 = 256;
			v13x->word_0x1C_28 = 256;
			goto LABEL_11;
		case 4:
			v9 = 96 * v13x->byte_0x44_68;
			v10 = 768;
			v13x->word_0x1C_28 = 768;
		LABEL_11:
			v13x->word_0x20_32 = 0;
			v12 = v10 - v9;
		LABEL_12:
			v13x->word_0x22_34 = v6;
			HIBYTE(v12) &= 7u;
			v13x->word_0x1E_30 = v12;
			break;
		default:
			break;
		}
		x_WORD_EB398ar = a1x->array_0x4C_76;
		sub_57FA0(&x_WORD_EB398ar, v13x->word_0x1C_28, v13x->word_0x1E_30, a1x->word_0x2C_44);
		sub_57CF0(v13x, &x_WORD_EB398ar);
		sub_49CD0(v13x, 340);
		sub_847D0(v13x, 128, 1, 0);
		v2 = v13x->word_0x34_52;
	}
}

//----- (0004F5F0) --------------------------------------------------------
type_str_0x6E8E* sub_4F5F0(axis_3d* a1x)//2305f0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 8;
		v1x->byte_0x45_69 = 23;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 23;
		//v3 = struct_byte_0xc_12_15.dbyte1_2.byte1
		v1x->word_0x2A_42 = 25;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 7);
		sub_49EA0(v1x, 200, 200);
		v1x->struct_byte_0xc_12_15.byte[0] |= 1u;
		sub_847D0(v1x, 128, 9, 0);
	}
	return v1x;
}

//----- (0004F6A0) --------------------------------------------------------
type_str_0x6E8E* sub_4F6A0(axis_3d* a1x)//2306a0
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 25;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 25;
		v1x->dword_0x4 = 8;
		v1x->array_0x4C_76 = *a1x;
		v1x->word_0x2A_42 = 2000;
		v1x->struct_byte_0xc_12_15.byte[0] = v1x->struct_byte_0xc_12_15.byte[0] & 0xF6 | 1;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49EA0(v1x, 512, 512);
	}
	return v1x;
}

//----- (0004F720) --------------------------------------------------------
type_str_0x6E8E* sub_4F720(axis_3d* a1x)//230720
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 26;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 26;
		v1x->dword_0x4 = 8;
		v1x->array_0x4C_76 = *a1x;
		v1x->word_0x2A_42 = 200;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 213);
		sub_49EA0(v1x, 512, 512);
	}
	return v1x;
}

//----- (0004F7A0) --------------------------------------------------------
type_str_0x6E8E* sub_4F7A0(axis_3d* a1x)//2307a0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 2;
		v1x->byte_0x45_69 = 27;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 27;
		v1x->word_0x2A_42 = (a1x->z >> 5) + 48;
		//v3 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0x10_16 = 10;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004F800) --------------------------------------------------------
type_str_0x6E8E* sub_4F800(axis_3d* a1x)//230800
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 0;
		v1x->byte_0x45_69 = 30;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 28;
		v1x->array_0x4C_76 = *a1x;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004F860) --------------------------------------------------------
type_str_0x6E8E* sub_4F860(axis_3d* a1x)//230860
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 52;
		v1x->byte_0x45_69 = 66;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 61;
		v1x->struct_byte_0xc_12_15.byte[0] = v1x->struct_byte_0xc_12_15.byte[0] & 0xF6 | 1;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004F8B0) --------------------------------------------------------
type_str_0x6E8E* sub_4F8B0(axis_3d* a1x)//2308b0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 52;
		v1x->byte_0x45_69 = 67;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 62;
		v1x->struct_byte_0xc_12_15.byte[0] = v1x->struct_byte_0xc_12_15.byte[0] & 0xF6 | 1;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004F900) --------------------------------------------------------
type_str_0x6E8E* sub_4F900(axis_3d* a1x)//230900
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 1;
		v1x->byte_0x45_69 = 68;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 63;
		v1x->struct_byte_0xc_12_15.byte[0] = v1x->struct_byte_0xc_12_15.byte[0] & 0xF6 | 1;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004F950) --------------------------------------------------------
type_str_0x6E8E* sub_4F950(axis_3d* a1x)//230950
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 1;
		v1x->byte_0x45_69 = 69;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 64;
		v1x->struct_byte_0xc_12_15.byte[0] = v1x->struct_byte_0xc_12_15.byte[0] & 0xF6 | 1;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004F9A0) --------------------------------------------------------
type_str_0x6E8E* sub_4F9A0(axis_3d* a1x)//2309a0 - summon effect black smoke
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 0;
		v1x->byte_0x45_69 = 32;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 30;
		v1x->array_0x4C_76 = *a1x;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004FA00) --------------------------------------------------------
type_str_0x6E8E* sub_4FA00(axis_3d* a1x)//230a00
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 0;
		v1x->byte_0x45_69 = 31;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 29;
		v1x->array_0x4C_76 = *a1x;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004FA60) --------------------------------------------------------
type_str_0x6E8E* sub_4FA60(axis_3d* a1x)//230a60
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 0;
		v1x->byte_0x45_69 = 34;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 32;
		v1x->array_0x4C_76 = *a1x;
		//v3 = struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->word_0x82_130 = 256;
		v1x->byte_0x46_70 = 2;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004FAC0) --------------------------------------------------------
type_str_0x6E8E* sub_4FAC0(axis_3d* a1x)//230ac0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 0;
		v1x->byte_0x45_69 = 33;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 31;
		v1x->array_0x4C_76 = *a1x;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004FB20) --------------------------------------------------------
type_str_0x6E8E* sub_4FB20(axis_3d* a1x)//230b20
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // dl

	if (!x_BYTE_D41B6)
		return 0;
	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (!v1x)
		return 0;
	v1x->dword_0x4 = 0;
	v1x->byte_0x45_69 = 88;
	v1x->byte_0x3F_63 = 10;
	v1x->byte_0x40_64 = 81;
	v1x->array_0x4C_76 = *a1x;
	v1x->word_0x82_130 = 256;
	//v3 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
	v1x->byte_0x46_70 = 2;
	v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
	sub_49A20_remove_event(v1x);
	return v1x;
}

//----- (0004FB80) --------------------------------------------------------
type_str_0x6E8E* sub_4FB80(axis_3d* a1x)//230b80
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	if (!x_BYTE_D41B6)
		return 0;
	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (!v1x)
		return 0;
	v1x->dword_0x4 = 0;
	v1x->byte_0x45_69 = 87;
	v1x->byte_0x3F_63 = 10;
	v1x->byte_0x40_64 = 80;
	v1x->array_0x4C_76 = *a1x;
	v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
	sub_57D70_actualize_event(v1x, a1x);
	sub_49A20_remove_event(v1x);
	return v1x;
}

//----- (0004FBE0) --------------------------------------------------------
type_str_0x6E8E* sub_4FBE0(axis_3d* a1x)//230be0
{
	type_str_0x6E8E* resultx; // eax

	if (!x_BYTE_D41B6)
		return 0;
	resultx = sub_4A050_new_event();
	if (!resultx)
		return 0;
	resultx->dword_0x4 = 0;
	resultx->byte_0x45_69 = 89;
	resultx->byte_0x3F_63 = 10;
	resultx->byte_0x40_64 = 82;
	resultx->array_0x4C_76 = *a1x;
	resultx->byte_0x46_70 = 2;
	resultx->byte_0x43_67 = 3;
	resultx->byte_0x44_68 = 3;
	return resultx;
}

//----- (0004FC30) --------------------------------------------------------
type_str_0x6E8E* sub_4FC30(axis_3d* a1x)//230c30
{
	type_str_0x6E8E* resultx; // eax
	//char v2; // dl

	if (!x_BYTE_D41B6)
		return 0;
	resultx = sub_4A050_new_event();
	if (!resultx)
		return 0;
	resultx->dword_0x8 = 16;
	resultx->byte_0x45_69 = 90;
	resultx->byte_0x3F_63 = 10;
	resultx->byte_0x40_64 = 83;
	resultx->array_0x4C_76 = *a1x;
	resultx->byte_0x46_70 = 0;
	resultx->word_0x9A_154x.x = 2;
	//v2 = resultx->struct_byte_0xc_12_15.dbyte1_2.byte1;
	resultx->word_0x9A_154x.z = 0;
	//v2 |= 1u;
	resultx->struct_byte_0xc_12_15.byte[0] |= 1u;
	resultx->array_0x4C_76.z = 0;
	resultx->struct_byte_0xc_12_15.byte[0] &= 0xF7;
	return resultx;
}

//----- (0004FCA0) --------------------------------------------------------
type_str_0x6E8E* sub_4FCA0(axis_3d* a1x)//230ca0
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_4FD00(a1x);
	if (resultx)
	{
		resultx->byte_0x45_69 = 91;
		resultx->byte_0x40_64 = 84;
	}
	return resultx;
}

//----- (0004FCD0) --------------------------------------------------------
type_str_0x6E8E* sub_4FCD0(axis_3d* a1x)//230cd0
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_4FD00(a1x);
	if (resultx)
	{
		resultx->byte_0x45_69 = 92;
		resultx->byte_0x40_64 = 85;
	}
	return resultx;
}

//----- (0004FD00) --------------------------------------------------------
type_str_0x6E8E* sub_4FD00(axis_3d* a1x)//230d00
{
	type_str_0x6E8E* v1x; // edx
	//Bit8u* v2; // eax
	//char v3; // bl

	v1x = 0;
	if (x_BYTE_D41B6)
	{
		v1x = sub_4A050_new_event();
		//v1 = v2;
		if (v1x)
		{
			v1x->dword_0x8 = 16;
			v1x->byte_0x3F_63 = 10;
			v1x->array_0x4C_76 = *a1x;
			v1x->byte_0x46_70 = 0;
			v1x->word_0x9A_154x.x = 2;
			//v3 = struct_byte_0xc_12_15.dbyte1_2.byte1;
			v1x->word_0x9A_154x.z = 0;
			//v3 |= 1u;
			v1x->struct_byte_0xc_12_15.byte[0] |= 1u;
			v1x->array_0x4C_76.z = 0;
			v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		}
	}
	return v1x;
}

//----- (0004FD70) --------------------------------------------------------
type_str_0x6E8E* sub_4FD70(axis_3d* a1x)//230d70
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 0;
		v1x->byte_0x45_69 = 55;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 51;
		v1x->array_0x4C_76 = *a1x;
		//v3 = struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0x10_16 = 256;
		v1x->word_0x82_130 = 1024;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_49EA0(v1x, 768, 768);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004FDE0) --------------------------------------------------------
type_str_0x6E8E* sub_4FDE0(axis_3d* a1x)//230de0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 0;
		v1x->byte_0x45_69 = 54;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 50;
		v1x->array_0x4C_76 = *a1x;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (0004FE40) --------------------------------------------------------
type_str_0x6E8E* sub_4FE40(axis_3d* a1x)//230e40
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 36;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 34;
		v1x->dword_0x4 = 0;
		v1x->byte_0x41_65 = 3;
		v1x->byte_0x42_66 = -1;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		v1x->array_0x4C_76 = *a1x;
		sub_49CD0(v1x, 223);
		sub_49EA0(v1x, 256, 256);
		sub_49A20_remove_event(v1x);
		sub_57D70_actualize_event(v1x, a1x);
		v1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&v1x->array_0x4C_76) + 640;
		v1x->word_0x9A_154x = v1x->array_0x4C_76;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		sub_57FA0(&v1x->word_0x9A_154x, v1x->word_0x14_20 & 0x7FF, 0, -32768);
	}
	return v1x;
}

//----- (0004FF20) --------------------------------------------------------
type_str_0x6E8E* sub_4FF20()//230f20
{
	return sub_4A050_new_event();
}

//----- (0004FF30) --------------------------------------------------------
type_str_0x6E8E* sub_4FF30(axis_3d* a1x)//230f30
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 38;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 36;
		v1x->dword_0x4 = 8;
		v1x->array_0x4C_76 = *a1x;
		v1x->word_0x2A_42 = 64000;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 41);
		sub_49EA0(v1x, 512, 512);
	}
	return v1x;
}

//----- (0004FFB0) --------------------------------------------------------
type_str_0x6E8E* sub_4FFB0(axis_3d* a1x)//230fb0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // ah

	v1x = sub_4A050_new_event();
	//v2 = (Bit8u*)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 40;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 38;
		//v3 = v1[12] & 0xF7;
		v1x->dword_0x4 = 32;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 272);
		sub_49EA0(v1x, 512, 512);
	}
	return v1x;
}

//----- (00050020) --------------------------------------------------------
type_str_0x6E8E* sub_50020(axis_3d* a1x)//231020
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 35;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 33;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		v1x->array_0x4C_76 = *a1x;
		sub_49A20_remove_event(v1x);
		sub_49EA0(v1x, 512, 512);
	}
	return v1x;
}

//----- (00050080) --------------------------------------------------------
type_str_0x6E8E* sub_50080(axis_3d* a1x)//231080
{
	return sub_500C0(a1x, 512);
}

//----- (000500A0) --------------------------------------------------------
type_str_0x6E8E* sub_500A0(axis_3d* a1x)//2310a0
{
	return sub_500C0(a1x, 2560);
}

//----- (000500C0) --------------------------------------------------------
type_str_0x6E8E* sub_500C0(axis_3d* a1x, int16_t a2)//2310c0
{
	type_str_0x6E8E* resultx; // eax
	//Bit8u* v3; // ebx

	resultx = sub_4A050_new_event();
	//v3 = resultx;
	if (resultx)
	{
		resultx->byte_0x45_69 = 41;
		resultx->byte_0x3F_63 = 10;
		resultx->byte_0x40_64 = 39;
		resultx->byte_0x41_65 = 10;
		resultx->byte_0x42_66 = 39;
		resultx->word_0x2C_44 = 128;
		resultx->word_0x82_130 = 32;
		resultx->byte_0x38_56 = 3;
		resultx->byte_0x39_57 = 128;
		resultx->byte_0x3A_58 = 0;
		resultx->dword_0x90_144 = a2;
		sub_57D70_actualize_event(resultx, a1x);
		sub_49A20_remove_event(resultx);
		sub_36920(resultx);
		//result = v3;
	}
	return resultx;
}

//----- (00050130) --------------------------------------------------------
type_str_0x6E8E* sub_50130(axis_3d* a1x)//231130
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//uint64_t v4; // rtt
	//char v5; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 62;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 57;
		v1x->byte_0x41_65 = 10;
		v1x->byte_0x42_66 = 57;
		//v3 = v1x->word_0x14_20;
		v1x->word_0x2C_44 = 128;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = v1x->word_0x14_20;
		v1x->word_0x82_130 = 0;
		v1x->byte_0x38_56 = 3;
		v1x->byte_0x39_57 = -128;
		v1x->byte_0x3A_58 = 0;
		v1x->byte_0x43_67 = 10;
		v1x->dword_0x90_144 = v1x->word_0x14_20 % 0x7D0;
		//v5 = v1x->struct_byte_0xc_12_15.dbyte3_4.byte1;
		v1x->byte_0x44_68 = 1;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_36920(v1x/*, v1x*/);
	}
	return v1x;
}

//----- (000501D0) --------------------------------------------------------
type_str_0x6E8E* sub_501D0(axis_3d* a1x)//2311d0
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//Bit8u* v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		//v3 = x_D41A0_BYTEARRAY_0;
		v1x->byte_0x45_69 = 42;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 40;
		v1x->dword_0x10_16 = (v1x-D41A0_BYTESTR_0.struct_0x6E8E) % 11;
		v1x->byte_0x38_56 = 2;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49DA0(v1x, 65);
	}
	return v1x;
}

//----- (00050250) --------------------------------------------------------
type_str_0x6E8E* sub_50250(axis_3d* a1x)//231250 - add effect ?? no in INF
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->dword_0x4 = 30;
		v1x->byte_0x45_69 = 51;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 45;
		v1x->word_0x2A_42 = 100;
		v1x->dword_0x10_16 = 4;
		v1x->struct_byte_0xc_12_15.byte[0] = 9;
		v1x->byte_0x38_56 = 33;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49CD0(v1x, 177);
	}
	return v1x;
}

//----- (000502B0) --------------------------------------------------------
type_str_0x6E8E* sub_502B0(axis_3d* a1x)//2312b0
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 45;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 43;
		v1x->dword_0x4 = 8;
		v1x->word_0x2A_42 = 64000;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 41);
		sub_49EA0(v1x, 512, 512);
	}
	return v1x;
}

//----- (00050320) --------------------------------------------------------
type_str_0x6E8E* sub_50320(axis_3d* a1x)//231320
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 43;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 41;
		v1x->dword_0x4 = 0;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		v1x->array_0x4C_76 = *a1x;
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (00050370) --------------------------------------------------------
type_str_0x6E8E* sub_50370(axis_3d* a1x)//231370
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 44;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 42;
		v1x->dword_0x4 = 0;
		//v3 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1 & 0xF6;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF6;
		v1x->struct_byte_0xc_12_15.byte[0] |= 1;
		v1x->array_0x4C_76 = *a1x;
		v1x->byte_0x3B_59 = 1;
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (000503D0) --------------------------------------------------------
type_str_0x6E8E* sub_503D0(axis_3d* a1x)//2313d0
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 46;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 44;
		v1x->dword_0x4 = 500;
		v1x->word_0x2A_42 = 500;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 8);
	}
	return v1x;
}

//----- (00050430) --------------------------------------------------------
type_str_0x6E8E* sub_50430(axis_3d* a1x)//231430
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 56;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 52;
		v1x->dword_0x4 = 100000;
		v1x->word_0x2A_42 = 500;
		v1x->dword_0x10_16 = 600;
		v1x->dword_0x90_144 = 500;
		v1x->dword_0x8C_140 = 2000;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 205);
	}
	return v1x;
}

//----- (000504B0) --------------------------------------------------------
type_str_0x6E8E* sub_504B0(axis_3d* a1x)//2314b0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 58;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 53;
		v1x->array_0x4C_76 = *a1x;
		v1x->dword_0x4 = 6;
		v1x->word_0x2A_42 = 3000;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		sub_49A20_remove_event(v1x);
	}
	return v1x;
}

//----- (00050500) --------------------------------------------------------
type_str_0x6E8E* sub_50500(axis_3d* a1x)//231500
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int16_t v4; // ax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 59;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 54;
		v1x->dword_0x4 = 128;
		v1x->word_0x82_130 = 256;
		//v3 = v1x->word_0x14_20;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		v1x->word_0x2A_42 = 100;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = v1x->word_0x14_20;
		v1x->dword_0x10_16 = 12845056;
		v1x->word_0x1C_28 = v1x->word_0x14_20 & 0x7FF;
		v1x->array_0x4C_76 = *a1x;
		v1x->struct_byte_0xc_12_15.byte[0] |= 1u;
		sub_49A20_remove_event(v1x);
		sub_49EA0(v1x, 1024, 0x4000);
	}
	return v1x;
}

//----- (000505A0) --------------------------------------------------------
type_str_0x6E8E* sub_505A0(axis_3d* a1x)//2315a0
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_505E0(a1x);
	if (resultx)
	{
		resultx->byte_0x40_64 = 68;
		resultx->byte_0x45_69 = 75;
	}
	return resultx;
}

//----- (000505E0) --------------------------------------------------------
type_str_0x6E8E* sub_505E0(axis_3d* a1x)//2315e0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x3F_63 = 10;
		v1x->word_0x82_130 = 64;
		v1x->dword_0x10_16 = 12845056;
		v1x->array_0x4C_76 = *a1x;
		v1x->struct_byte_0xc_12_15.byte[0] = v1x->struct_byte_0xc_12_15.byte[0] & 0xF6 | 1;
		sub_49EA0(v1x, 256, 256);
	}
	return v1x;
}

//----- (00050640) --------------------------------------------------------
type_str_0x6E8E* sub_50640(axis_3d* a1x)//231640
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int16_t v4; // ax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 60;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 55;
		v1x->dword_0x4 = 19;
		v1x->word_0x82_130 = 256;
		//v3 = v1x->word_0x14_20;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		v1x->word_0x2A_42 = 100;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = v1x->word_0x14_20;
		v1x->dword_0x10_16 = 32;
		v1x->word_0x1C_28 = v1x->word_0x14_20 & 0x7FF;
		v1x->array_0x4C_76 = *a1x;
		v1x->struct_byte_0xc_12_15.byte[0] |= 1u;
		sub_49A20_remove_event(v1x);
		sub_49EA0(v1x, 1024, 0x4000);
	}
	return v1x;
}

//----- (000506E0) --------------------------------------------------------
type_str_0x6E8E* sub_506E0(axis_3d* a1x)//2316e0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int16_t v3; // dx
	//int16_t v4; // ax

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 61;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 56;
		v1x->dword_0x4 = 128;
		v1x->word_0x82_130 = 256;
		//v3 = *(x_WORD *)(v1 + 20);
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7u;
		v1x->word_0x2A_42 = 100;
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		//v4 = *(x_WORD *)(v1 + 20);
		v1x->dword_0x10_16 = 0;
		v1x->word_0x1C_28 = v1x->word_0x14_20 & 0x7FF;
		v1x->array_0x4C_76 = *a1x;
		v1x->struct_byte_0xc_12_15.byte[0] |= 1u;
		sub_49A20_remove_event(v1x);
		sub_49EA0(v1x, 1024, 0x4000);
	}
	return v1x;
}

//----- (00050780) --------------------------------------------------------
type_str_0x6E8E* sub_50780(axis_3d* a1x)//231780
{
	type_str_0x6E8E* resultx; // eax
	//char v2; // dl

	resultx = sub_4A050_new_event();
	if (resultx)
	{
		resultx->byte_0x45_69 = 70;
		//v2 = resultx->struct_byte_0xc_12_15.dbyte1_2.byte1;
		resultx->byte_0x3F_63 = 10;
		resultx->struct_byte_0xc_12_15.byte[0] &= 0xF6u;
		//resultx->struct_byte_0xc_12_15.dbyte1_2.byte1 = v2;
		resultx->byte_0x40_64 = 65;
		resultx->struct_byte_0xc_12_15.byte[0] |= 1;
		resultx->array_0x4C_76 = *a1x;
	}
	return resultx;
}

//----- (000507C0) --------------------------------------------------------
type_str_0x6E8E* sub_507C0(axis_3d* a1x)//2317c0
{
	type_str_0x6E8E* resultx; // eax
	//char v2; // dl

	resultx = sub_4A050_new_event();
	if (resultx)
	{
		resultx->byte_0x45_69 = 71;
		//v2 = resultx->struct_byte_0xc_12_15.byte[0];
		resultx->byte_0x3F_63 = 10;
		//v2 &= 0xF6u;
		resultx->struct_byte_0xc_12_15.byte[0] &= 0xF6u;
		resultx->byte_0x40_64 = 66;
		resultx->struct_byte_0xc_12_15.byte[0] |= 1;
		resultx->array_0x4C_76 = *a1x;
		resultx->word_0x2A_42 = 200;
	}
	return resultx;
}

//----- (00050800) --------------------------------------------------------
type_str_0x6E8E* sub_50800()//231800
{
	type_str_0x6E8E* resultx; // eax
	//char v1; // bl

	resultx = sub_4A050_new_event();
	if (resultx)
	{
		resultx->byte_0x45_69 = 81;
		//v1 = resultx->struct_byte_0xc_12_15.dbyte1_2.byte1;
		resultx->byte_0x3F_63 = 10;
		resultx->struct_byte_0xc_12_15.byte[0] &= 0xF6u;
		//resultx->struct_byte_0xc_12_15.dbyte1_2.byte1 = v1;
		resultx->byte_0x40_64 = 74;
		resultx->struct_byte_0xc_12_15.byte[0] |= 1;
	}
	return resultx;
}

//----- (00050840) --------------------------------------------------------
type_str_0x6E8E* sub_50840(axis_3d* a1x)//231840
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//Bit8u* v3; // edx

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	if (v1x)
	{
		v1x->dword_0x4 = 1000;
		v1x->byte_0x45_69 = 85;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 78;
		v1x->array_0x4C_76 = *a1x;
		v1x->struct_byte_0xc_12_15.byte[0] |= 8u;
		v1x->word_0x2A_42 = 0;
		v1x->byte_0x46_70 = 0;
		v1x->word_0x36_54 = -1;
		v1x->byte_0x3D_61 = 1;
		v1x->byte_0x43_67 = 1;
		v1x->byte_0x44_68 = 0;
		v1x->word_0x32_50 = v1x-D41A0_BYTESTR_0.struct_0x6E8E;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 66);
	}
	return v1x;
}

//----- (000508E0) --------------------------------------------------------
type_str_0x6E8E* sub_508E0_castle_defend_create(axis_3d* a1x)//2318e0
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 100000;
		v1x->byte_0x45_69 = 86;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 79;
		v1x->array_0x4C_76 = *a1x;
		//v3 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->byte_0x46_70 = 0;
		v1x->byte_0x43_67 = 0;
		v1x->word_0x2C_44 = 0;
		v1x->byte_0x3D_61 = 1;
		v1x->word_0x36_54 = 0;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49A20_remove_event(v1x);
		sub_49CD0(v1x, 66);
	}
	return v1x;
}

//----- (00050960) --------------------------------------------------------
type_str_0x6E8E* sub_50960(axis_3d* a1x)//231960
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//int v3; // eax
	//int v4; // edx
	//int16_t v5; // ax
	//int16_t v6; // dx

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->dword_0x4 = 9;
		//v3 = v1x->dword_0x4;
		v1x->byte_0x45_69 = 93;
		//v4 = v1x->struct_byte_0xc_12_15;
		v1x->byte_0x3F_63 = 10;
		v1x->dword_0x8 = v1x->dword_0x4;
		v1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
		//BYTE1(v3) = v1x->struct_byte_0xc_12_15.dbyte3_4.byte1;
		v1x->byte_0x40_64 = 86;
		v1x->struct_byte_0xc_12_15.byte[2] |= 2;
		sub_57D70_actualize_event(v1x, a1x);
		//v5 = sub_10C40_getTerrainAlt(v1x->array_0x4C_76);
		//v6 = v1x->word_0x14_20;
		v1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&v1x->array_0x4C_76);
		v1x->word_0x14_20 = 9377 * v1x->word_0x14_20 + 9439;
		sub_49CD0(v1x, v1x->word_0x14_20 % 3u + 332);
		if (!(sub_104A0(&v1x->array_0x4C_76) & 1))
		{
			sub_57F20(v1x);
			v1x = 0;
		}
	}
	return v1x;
}

//----- (00050A20) --------------------------------------------------------
type_str_0x6E8E* sub_50A20(axis_3d* a1x)//231a20
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // dl

	if (D41A0_BYTESTR_0.str_2FECE.byte_level_type != 2)
		return 0;
	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (!v1x)
		return 0;
	//v3 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1 & 0xF6;
	v1x->struct_byte_0xc_12_15.byte[0] &= 0xF6;
	v1x->byte_0x45_69 = 96;
	v1x->struct_byte_0xc_12_15.byte[0] |= 1;
	v1x->byte_0x3F_63 = 10;
	v1x->byte_0x40_64 = 89;
	v1x->dword_0x8 = 40;
	sub_57D70_actualize_event(v1x, a1x);
	return v1x;
}

//----- (00050A90) --------------------------------------------------------
type_str_0x6E8E* sub_50A90(axis_3d* a1x, char a2, char a3)//231a90 - add spell
{
	type_str_0x6E8E* v3x; // eax
	//Bit8u* v4; // ebx
	//char v5; // dl

	v3x = sub_4A050_new_event();
	//v4 = v3;
	if (v3x)
	{
		v3x->byte_0x3F_63 = 11;
		v3x->byte_0x40_64 = a2;
		v3x->byte_0x45_69 = a3;
		v3x->struct_byte_0xc_12_15.byte[0] &= 0xF6u;
		//v5 = v3x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v3x->dword_0x10_16 = 0;
		v3x->struct_byte_0xc_12_15.byte[0] |= 1;
		v3x->array_0x4C_76 = *a1x;
		sub_49A20_remove_event(v3x);
	}
	return v3x;
}

//----- (00050AE0) --------------------------------------------------------
type_str_0x6E8E* sub_50AE0(axis_3d* a1x)//231ae0
{
	return sub_50A90(a1x, 0, 0);
}

//----- (00050B00) --------------------------------------------------------
type_str_0x6E8E* sub_50B00(axis_3d* a1x)//231b00
{
	return sub_50A90(a1x, 1, 1);
}

//----- (00050B20) --------------------------------------------------------
type_str_0x6E8E* sub_50B20(axis_3d* a1x)//231b20
{
	return sub_50A90(a1x, 2, 2);
}

//----- (00050B40) --------------------------------------------------------
type_str_0x6E8E* sub_50B40(axis_3d* a1x)//231b40
{
	return sub_50A90(a1x, 3, 3);
}

//----- (00050B60) --------------------------------------------------------
type_str_0x6E8E* sub_50B60(axis_3d* a1x)//231b60
{
	return sub_50A90(a1x, 4, 4);
}

//----- (00050B80) --------------------------------------------------------
type_str_0x6E8E* sub_50B80(axis_3d* a1x)//231b80
{
	return sub_50A90(a1x, 32, 32);
}

//----- (00050C10) --------------------------------------------------------
type_str_0x6E8E* sub_50C10(axis_3d* a1x)//231c10
{
	return sub_50A90(a1x, 12, 12);
}

//----- (00050C30) --------------------------------------------------------
type_str_0x6E8E* sub_50C30(axis_3d* a1x)//231c30
{
	return sub_50A90(a1x, 13, 13);
}

//----- (00050C50) --------------------------------------------------------
type_str_0x6E8E* sub_50C50(axis_3d* a1x)//231c50
{
	return sub_50A90(a1x, 14, 14);
}

//----- (00050C70) --------------------------------------------------------
type_str_0x6E8E* sub_50C70(axis_3d* a1x)//231c70
{
	return sub_50A90(a1x, 15, 15);
}

//----- (00050C90) --------------------------------------------------------
type_str_0x6E8E* sub_50C90(axis_3d* a1x)//231c90
{
	return sub_50A90(a1x, 16, 16);
}

//----- (00050CB0) --------------------------------------------------------
type_str_0x6E8E* sub_50CB0(axis_3d* a1x)//231cb0
{
	return sub_50A90(a1x, 17, 17);
}

//----- (00050CD0) --------------------------------------------------------
type_str_0x6E8E* sub_50CD0(axis_3d* a1x)//231cd0
{
	return sub_50A90(a1x, 18, 18);
}

//----- (00050CF0) --------------------------------------------------------
type_str_0x6E8E* sub_50CF0(axis_3d* a1x)//231cf0
{
	return sub_50A90(a1x, 19, 19);
}

//----- (00050D10) --------------------------------------------------------
type_str_0x6E8E* sub_50D10(axis_3d* a1x)//231d10
{
	return sub_50A90(a1x, 20, 20);
}

//----- (00050D30) --------------------------------------------------------
type_str_0x6E8E* sub_50D30(axis_3d* a1x)//231d30
{
	return sub_50A90(a1x, 21, 21);
}

//----- (00050D50) --------------------------------------------------------
type_str_0x6E8E* sub_50D50(axis_3d* a1x)//231d50
{
	return sub_50A90(a1x, 22, 22);
}

//----- (00050D70) --------------------------------------------------------
type_str_0x6E8E* sub_50D70(axis_3d* a1x)//231d70
{
	return sub_50A90(a1x, 23, 23);
}

//----- (00050D90) --------------------------------------------------------
type_str_0x6E8E* sub_50D90(axis_3d* a1x)//231d90
{
	return sub_50A90(a1x, 24, 24);
}

//----- (00050DB0) --------------------------------------------------------
type_str_0x6E8E* sub_50DB0(axis_3d* a1x)//231db0
{
	return sub_50A90(a1x, 25, 25);
}

//----- (00050DD0) --------------------------------------------------------
type_str_0x6E8E* sub_50DD0(axis_3d* a1x)//231dd0
{
	return sub_50A90(a1x, 26, 26);
}

//----- (00050DF0) --------------------------------------------------------
type_str_0x6E8E* sub_50DF0(axis_3d* a1x)//231df0
{
	return sub_50A90(a1x, 27, 27);
}

//----- (00050E10) --------------------------------------------------------
type_str_0x6E8E* sub_50E10(axis_3d* a1x)//231e10
{
	return sub_50A90(a1x, 28, 28);
}

//----- (00050E30) --------------------------------------------------------
type_str_0x6E8E* sub_50E30(axis_3d* a1x)//231e30
{
	return sub_50A90(a1x, 29, 29);
}

//----- (00050E50) --------------------------------------------------------
type_str_0x6E8E* sub_50E50(axis_3d* a1x)//231e50
{
	return sub_50A90(a1x, 33, 33);
}

//----- (00050E70) --------------------------------------------------------
type_str_0x6E8E* sub_50E70(axis_3d* a1x)//231e70
{
	return sub_50A90(a1x, 34, 34);
}

//----- (00050E90) --------------------------------------------------------
type_str_0x6E8E* sub_50E90(axis_3d* a1x)//231e90
{
	return sub_50A90(a1x, 35, 35);
}

//----- (00050EB0) --------------------------------------------------------
type_str_0x6E8E* sub_50EB0(axis_3d* a1x)//231eb0
{
	return sub_50A90(a1x, 36, 36);
}

//----- (00050ED0) --------------------------------------------------------
type_str_0x6E8E* sub_50ED0(axis_3d* a1x)//231ed0
{
	return sub_50A90(a1x, 37, 37);
}

//----- (00050EF0) --------------------------------------------------------
type_str_0x6E8E* sub_50EF0(axis_3d* a1x)//231ef0
{
	return sub_50A90(a1x, 38, 38);
}

//----- (00050F10) --------------------------------------------------------
type_str_0x6E8E* sub_50F10(axis_3d* a1x)//231f10
{
	return sub_50A90(a1x, 39, 39);
}

//----- (00050F30) --------------------------------------------------------
type_str_0x6E8E* sub_50F30(axis_3d* a1x)//231f30
{
	return sub_50A90(a1x, 40, 40);
}

//----- (00050F50) --------------------------------------------------------
type_str_0x6E8E* sub_50F50(axis_3d* a1x)//231f50
{
	return sub_50A90(a1x, 41, 41);
}

//----- (00050F70) --------------------------------------------------------
type_str_0x6E8E* sub_50F70(axis_3d* a1x)//231f70
{
	return sub_50A90(a1x, 42, 42);
}

//----- (00050F90) --------------------------------------------------------
type_str_0x6E8E* sub_50F90(axis_3d* a1x)//231f90
{
	return sub_50A90(a1x, 43, 43);
}

//----- (00050FB0) --------------------------------------------------------
type_str_0x6E8E* sub_50FB0(axis_3d* a1x)//231fb0
{
	return sub_50A90(a1x, 44, 44);
}

//----- (00050FD0) --------------------------------------------------------
type_str_0x6E8E* sub_50FD0(axis_3d* a1x)//231fd0
{
	return sub_50A90(a1x, 30, 30);
}

//----- (00050FF0) --------------------------------------------------------
type_str_0x6E8E* sub_50FF0(axis_3d* a1x)//231ff0
{
	type_str_0x6E8E* v1x; // edx
	//Bit8u* v2; // eax
	//char v3; // cl

	v1x = 0;
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10) && !(x_D41A0_BYTEARRAY_4_struct.setting_38545 & 8))
	{
		v1x = sub_50A90(a1x, 31, 31);
		if (v1x)
		{
			//v2 = x_D41A0_BYTEARRAY_0;
			//v3 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 224779);			
			D41A0_BYTESTR_0.byte_0x36E02 = 1;
			D41A0_BYTESTR_0.byte_0x36E0B |= 1;
		}
	}
	return v1x;
}

//----- (00051120) --------------------------------------------------------
type_str_0x6E8E* sub_51120(axis_3d* a1x, char a2, char a3)//232120 - add any
{
	type_str_0x6E8E* v3x; // eax
	//Bit8u* v4; // ebx
	//Bit8u* result; // esi
	//char v6; // ah

	v3x = sub_4A050_new_event();
	//v4 = v3;
	//result = v3;
	if (v3x)
	{
		v3x->byte_0x3F_63 = 15;
		v3x->dword_0x4 = 0;
		v3x->byte_0x40_64 = a2;//zde
		v3x->byte_0x45_69 = a3;
		//v6 = *(x_BYTE *)(v3 + 12);
		v3x->dword_0x8 = 0;
		v3x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		sub_57D70_actualize_event(v3x, a1x);
		sub_49CD0(v3x, 77);
		sub_49EA0(v3x, 768, 1280);
		sub_49A20_remove_event(v3x);
		sub_6D5E0(v3x, 0);
	}
	return v3x;
}

//----- (000511A0) --------------------------------------------------------
type_str_0x6E8E* sub_511A0(axis_3d* a1x)//2321a0
{
	return sub_51120(a1x, 0, 0);
}

//----- (000511C0) --------------------------------------------------------
type_str_0x6E8E* sub_511C0(axis_3d* a1x)//2321c0
{
	return sub_51120(a1x, 1, 3);
}

//----- (000511E0) --------------------------------------------------------
type_str_0x6E8E* sub_511E0(axis_3d* a1x)//2321e0
{
	return sub_51120(a1x, 2, 6);//add scroll to map - castle1
}

//----- (00051200) --------------------------------------------------------
type_str_0x6E8E* sub_51200(axis_3d* a1x)//232200
{
	return sub_51120(a1x, 3, 9);
}

//----- (00051220) --------------------------------------------------------
type_str_0x6E8E* sub_51220(axis_3d* a1x)//232220
{
	return sub_51120(a1x, 4, 12);
}

//----- (00051240) --------------------------------------------------------
type_str_0x6E8E* sub_51240(axis_3d* a1x)//232240
{
	return sub_51120(a1x, 5, 15);
}

//----- (00051260) --------------------------------------------------------
type_str_0x6E8E* sub_51260(axis_3d* a1x)//232260
{
	return sub_51120(a1x, 6, 18);
}

//----- (00051280) --------------------------------------------------------
type_str_0x6E8E* sub_51280(axis_3d* a1x)//232280
{
	return sub_51120(a1x, 7, 21);
}

//----- (000512A0) --------------------------------------------------------
type_str_0x6E8E* sub_512A0(axis_3d* a1x)//2322a0
{
	return sub_51120(a1x, 8, 24);
}

//----- (000512C0) --------------------------------------------------------
type_str_0x6E8E* sub_512C0(axis_3d* a1x)//2322c0
{
	return sub_51120(a1x, 9, 27);
}

//----- (000512E0) --------------------------------------------------------
type_str_0x6E8E* sub_512E0(axis_3d* a1x)//2322e0
{
	return sub_51120(a1x, 10, 30);
}

//----- (00051300) --------------------------------------------------------
type_str_0x6E8E* sub_51300(axis_3d* a1x)//232300
{
	return sub_51120(a1x, 11, 33);
}

//----- (00051320) --------------------------------------------------------
type_str_0x6E8E* sub_51320(axis_3d* a1x)//232320
{
	return sub_51120(a1x, 12, 36);
}

//----- (00051340) --------------------------------------------------------
type_str_0x6E8E* sub_51340(axis_3d* a1x)//232340
{
	return sub_51120(a1x, 13, 39);
}

//----- (00051360) --------------------------------------------------------
type_str_0x6E8E* sub_51360(axis_3d* a1x)//232360
{
	return sub_51120(a1x, 14, 42);
}

//----- (00051380) --------------------------------------------------------
type_str_0x6E8E* sub_51380(axis_3d* a1x)//232380
{
	return sub_51120(a1x, 15, 45);
}

//----- (000513A0) --------------------------------------------------------
type_str_0x6E8E* sub_513A0(axis_3d* a1x)//2323a0
{
	return sub_51120(a1x, 16, 48);
}

//----- (000513C0) --------------------------------------------------------
type_str_0x6E8E* sub_513C0(axis_3d* a1x)//2323c0
{
	return sub_51120(a1x, 17, 51);
}

//----- (000513E0) --------------------------------------------------------
type_str_0x6E8E* sub_513E0(axis_3d* a1x)//2323e0
{
	return sub_51120(a1x, 18, 54);
}

//----- (00051400) --------------------------------------------------------
type_str_0x6E8E* sub_51400(axis_3d* a1x)//232400
{
	return sub_51120(a1x, 19, 57);
}

//----- (00051420) --------------------------------------------------------
type_str_0x6E8E* sub_51420(axis_3d* a1x)//232420
{
	return sub_51120(a1x, 20, 60);
}

//----- (00051440) --------------------------------------------------------
type_str_0x6E8E* sub_51440(axis_3d* a1x)//232440
{
	return sub_51120(a1x, 21, 63);
}

//----- (00051460) --------------------------------------------------------
type_str_0x6E8E* sub_51460(axis_3d* a1x)//232460
{
	return sub_51120(a1x, 22, 66);
}

//----- (00051480) --------------------------------------------------------
type_str_0x6E8E* sub_51480(axis_3d* a1x)//232480
{
	return sub_51120(a1x, 23, 69);
}

//----- (000514A0) --------------------------------------------------------
type_str_0x6E8E* sub_514A0(axis_3d* a1x)//2324a0
{
	return sub_51120(a1x, 24, 72);
}

//----- (000514C0) --------------------------------------------------------
type_str_0x6E8E* sub_514C0(axis_3d* a1x)//2324c0
{
	return sub_51120(a1x, 25, 75);
}

//----- (000514E0) --------------------------------------------------------
type_str_0x6E8E* sub_514E0(axis_3d* a1x, char a2, char a3, int16_t a4)//2324e0
{
	type_str_0x6E8E* v4x; // ebx

	v4x = sub_4A050_new_event();
	if (v4x)
	{
		v4x->byte_0x3F_63 = 14;
		v4x->byte_0x46_70 = 0;
		v4x->byte_0x45_69 = a3;
		v4x->byte_0x40_64 = a2;
		sub_57D70_actualize_event(v4x, a1x);
		sub_49A20_remove_event(v4x);
		sub_49DA0(v4x, a4);
	}
	return v4x;
}

//----- (00051530) --------------------------------------------------------
type_str_0x6E8E* sub_51530(axis_3d* a1x)//232530
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx

	v1x = sub_514E0(a1x, 0, 0, 77);
	//v2 = v1;
	if (v1x)
		sub_49EA0(v1x, 384, 384);
	return v1x;
}

//----- (00051570) --------------------------------------------------------
type_str_0x6E8E* sub_51570(axis_3d* a1x)//232570
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_514E0(a1x, 3, 8, 338);
	if (resultx)
	{
		D41A0_BYTESTR_0.word_0x36DFE = resultx - D41A0_BYTESTR_0.struct_0x6E8E;
		resultx->struct_byte_0xc_12_15.byte[0] |= 1u;
	}
	return resultx;
}

//----- (000515C0) --------------------------------------------------------
type_str_0x6E8E* sub_515C0(axis_3d* a1x)//2325c0
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_514E0(a1x, 4, 9, 339);
	if (resultx)
	{
		D41A0_BYTESTR_0.word_0x36DFC = resultx - D41A0_BYTESTR_0.struct_0x6E8E;
		resultx->struct_byte_0xc_12_15.byte[0] |= 1u;
	}
	return resultx;
}

//----- (00051610) --------------------------------------------------------
type_str_0x6E8E* sub_51610(axis_3d* a1x)//232610
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//x_WORD *v3; // esi

	v1x = sub_514E0(a1x, 5, 10, 280);
	//v2 = v1;
	//v3 = v1;
	if (v1x)
	{
		sub_49EA0(v1x, 768, 1280);
		if (x_D41A0_BYTEARRAY_4_struct.setting_38545 & 4)
			v1x->struct_byte_0xc_12_15.byte[0] |= 1u;
	}
	return v1x;
}

//----- (00051660) --------------------------------------------------------
type_str_0x6E8E* sub_51660(axis_3d* a1x)//232660
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // dl

	v1x = sub_4A050_new_event();
	//v2 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 6;
		//v3 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->byte_0x3F_63 = 14;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF6u;
		//v1x->struct_byte_0xc_12_15.dbyte1_2.byte1 = v3;
		v1x->byte_0x40_64 = 1;
		v1x->struct_byte_0xc_12_15.byte[0] |= 1;
		v1x->dword_0x4 = 0;
		v1x->dword_0x8 = 0;
		v1x->word_0x2A_42 = 0;
		sub_57D70_actualize_event(v1x, a1x);
	}
	return v1x;
}

//----- (000516C0) --------------------------------------------------------
type_str_0x6E8E* sub_516C0(axis_3d* a1x)//2326c0
{
	type_str_0x6E8E* v1x; // ebx
	//Bit8u* v2; // eax
	//char v3; // dl

	v1x = 0;
	if (x_BYTE_D41B6)
	{
		v1x = sub_4A050_new_event();
		//v1 = v2;
		if (v1x)
		{
			v1x->byte_0x45_69 = 7;
			v1x->byte_0x3F_63 = 14;
			//v3 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
			v1x->byte_0x40_64 = 2;
			v1x->struct_byte_0xc_12_15.byte[0] &= 0xF6u;
			//v1x->struct_byte_0xc_12_15.dbyte1_2.byte1 = v3;
			v1x->dword_0x8 = 0;
			v1x->struct_byte_0xc_12_15.byte[0] |= 1;
			v1x->word_0x2A_42 = 0;
			v1x->word_0x2C_44 = 0;
			v1x->word_0x96_150 = 0;
			sub_57D70_actualize_event(v1x, a1x);
		}
	}
	return v1x;
}

//----- (00051730) --------------------------------------------------------
type_str_0x6E8E* sub_51730(axis_3d* a1x)//232730
{
	type_str_0x6E8E* v1x; // eax
	//x_WORD *v2; // ebx
	//Bit8u* v3; // esi

	v1x = sub_4A050_new_event();
	//v2 = (x_WORD *)v1;
	//v3 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 72;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 67;
		v1x->struct_byte_0xc_12_15.byte[0] = v1x->struct_byte_0xc_12_15.byte[0] & 0xF6 | 1;
		v1x->dword_0x8 = 120;
		v1x->word_0x2A_42 = 20000;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49EA0(v1x, 4352, 4352);
	}
	return v1x;
}

//----- (00051790) --------------------------------------------------------
type_str_0x6E8E* sub_51790(axis_3d* a1x)//232790
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//Bit8u* v3; // esi
	//char v4; // ah

	v1x = sub_4A050_new_event();
	//v2 = v1;
	//v3 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 78;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 71;
		//v4 = v1x->struct_byte_0xc_12_15.dbyte1_2.byte1;
		v1x->dword_0x8 = 120;
		v1x->word_0x2A_42 = 20000;
		v1x->struct_byte_0xc_12_15.byte[0] = v1x->struct_byte_0xc_12_15.byte[0] & 0xF6 | 1;
		v1x->byte_0x46_70 = 0;
		v1x->dword_0x4 = v1x->dword_0x8;
		sub_57D70_actualize_event(v1x, a1x);
		sub_49EA0(v1x, 1280, 2048);
	}
	return v1x;
}

//----- (00051800) --------------------------------------------------------
type_str_0x6E8E* sub_51800(axis_3d* a1x)//232800
{
	int v1; // ebx
	type_str_0x6E8E* v2x; // eax
	//char v3; // dl
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // ebx
	//int v6; // edx
	//int v7; // eax
	type_str_0x6E8E* v9x; // [esp+0h] [ebp-10h]
	type_str_0x6E8E* v10x; // [esp+4h] [ebp-Ch]
	type_str_0x6E8E* v11x; // [esp+8h] [ebp-8h]
	int16_t v12; // [esp+Ch] [ebp-4h]

	v11x = 0;
	v1 = x_D41A0_BYTEARRAY_4_struct.byteindex_224;
	if (sub_4A810_get_0x35plus() >= v1)
	{
		v2x = sub_4A050_new_event();
		v11x = v2x;
		if (v2x)
		{
			v2x->byte_0x45_69 = 79;
			v2x->byte_0x3F_63 = 10;
			v2x->byte_0x40_64 = 72;
			//v3 = v2x->struct_byte_0xc_12_15.dbyte1_2.byte1;
			v2x->dword_0x4 = 16;
			v2x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
			v10x = v2x;
			v2x->dword_0x8 = v2x->dword_0x4;
			v12 = 1;
			v2x->byte_0x3E_62 = 0;
			while (x_D41A0_BYTEARRAY_4_struct.byteindex_224 > v12)
			{
				v4x = sub_4A050_new_event();
				v5x = v4x;
				v9x = v4x;
				if (v4x)
				{
					qmemcpy(v4x, v11x, sizeof(type_str_0x6E8E));
					v4x->word_0x32_50 = v10x-D41A0_BYTESTR_0.struct_0x6E8E;
					v10x->word_0x34_52 = v4x - D41A0_BYTESTR_0.struct_0x6E8E;
					v4x->word_0x34_52 = 0;
					v4x->byte_0x3E_62 = v12;
					//v7 = (int)x_D41A0_BYTEARRAY_4;
					x_WORD_EB398ar = *a1x;
					sub_57FA0(&x_WORD_EB398ar, v12 * (2048 / x_D41A0_BYTEARRAY_4_struct.byteindex_224), 0, 512);
					x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
					sub_57D70_actualize_event(v5x, &x_WORD_EB398ar);
					sub_49EA0(v5x, 128, 256);
					sub_49CD0(v5x, 220);
				}
				v10x = v9x;
				v12++;
			}
			x_WORD_EB398ar = *a1x;
			sub_57FA0(&x_WORD_EB398ar, 0, 0, 512);
			x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
			sub_57D70_actualize_event(v11x, &x_WORD_EB398ar);
			sub_49EA0(v11x, 128, 256);
			sub_49CD0(v11x, 220);
		}
	}
	return v11x;
}

//----- (00051A00) --------------------------------------------------------
type_str_0x6E8E* sub_51A00(axis_3d* a1x)//232a00
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // ebx
	//char v3; // ah
	//Bit8u* v5; // [esp+0h] [ebp-4h]

	v1x = sub_4A050_new_event();
	//v2 = v1;
	//v5 = v1;
	if (v1x)
	{
		v1x->byte_0x45_69 = 80;
		v1x->byte_0x3F_63 = 10;
		v1x->byte_0x40_64 = 73;
		//v3 = v1[12] & 0xF7;
		v1x->dword_0x8 = 16;
		v1x->struct_byte_0xc_12_15.byte[0] &= 0xF7;
		v1x->dword_0x4 = v1x->dword_0x8;
		x_WORD_EB398ar = *a1x;
		x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
		sub_57D70_actualize_event(v1x, &x_WORD_EB398ar);
		sub_49EA0(v1x, 128, 256);
		sub_49CD0(v1x, 220);
	}
	return v1x;
}

int debugcounter6=0;
int debugcounter_233d56 = 0;
//----- (00051BB0) --------------------------------------------------------
void sub_51BB0_game_events(/*Bit8u* a1*/)//232bb0
{
	char v1; // al
	uint16_t v3; // dx
	int v2x;
	int v4x;
	char *v5; // esi
	char *v6; // edi
	int16_t v15; // bx
	char v16; // cl
	int v17; // eax
	int v18x;
	char* v20; // esi
	char* v21; // edi
	int16_t v24; // ST08_2
	int16_t v25; // ST08_2
	char *v26; // esi
	char *v27; // edi
	int16_t v30; // ax
	int v32; // edx
	char v35; // al
	char v36; // dl
	const char *v37; // edi
	unsigned int v38; // kr04_4
	const char *v39; // edi
	unsigned int v40; // kr08_4
	char *v41; // esi
	char *v42; // edi
	char *v45; // edi
	char *v46; // esi
	bool v51; // zf
	char *v52; // esi
	char *v53; // edi
	int16_t i; // ax
	uint16_t v59; // si
	int v62; // esi
	type_str_0x6E8E* v63x; // eax
	int16_t n; // ax
	type_str_0x6E8E* iix; // eax
	type_str_0x6E8E* v68x; // eax
	type_str_0x6E8E* kx; // eax
	type_str_0x6E8E* lx; // eax
	type_str_0x6E8E* mx; // eax
	int16_t v74; // ax
	int v75; // edx
	int16_t v78; // cx
	type_str_611* v79x; // eax
	int v82; // esi
	char *v83; // edi
	char *v84; // esi
	uint8_t v91; // cl
	char v93; // al
	char v95; // dl
	type_str_0x6E8E* v96x; // eax
	type_str_0x6E8E* v98x; // eax
	int v100x;
	int v102x;
	type_str_0x6E8E* v103x; // esi
	int v104; // esi
	const char *v106; // [esp-4h] [ebp-120h]
	uint8_t v108; // [esp+1h] [ebp-11Bh]
	uint8_t v109; // [esp+2h] [ebp-11Ah]
	uint8_t v110; // [esp+3h] [ebp-119h]
	uint8_t v111; // [esp+4h] [ebp-118h]
	int v112; // [esp+100h] [ebp-1Ch]
	type_str_0x6E8E* v113x; // [esp+104h] [ebp-18h]
	int v114x;
	int v115; // [esp+10Ch] [ebp-10h]
	unsigned int v116; // [esp+110h] [ebp-Ch]
	char v117; // [esp+114h] [ebp-8h]
	char v118; // [esp+118h] [ebp-4h]

	// fix if begin
	v108 = 0;
	v109 = 0;
	v110 = 0;
	v111 = 0;
	// end

	if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
	{
		sub_74374();
		sub_7438A((Bit8u*)D41A0_BYTESTR_0.array_0x6E3E, 0xAu);
		v1 = 0;
		v2x = 0;
		v3 = 0;
		v4x = 0;
		while (1)
		{
			//v9 = (int)x_D41A0_BYTEARRAY_0;
			if (v3 >= D41A0_BYTESTR_0.word_0xe)
				break;
			if (D41A0_BYTESTR_0.array_0x6E3E[v2x].str_0x6E3E_byte0 == 1)
			{
				D41A0_BYTESTR_0.array_0x2BDE[v4x].byte_0x006_2BE4_11236 = 1;
				if (v3 == D41A0_BYTESTR_0.word_0xc && (x_D41A0_BYTEARRAY_4_struct.player_name_57ar))
				{
					v5 = (x_D41A0_BYTEARRAY_4_struct.player_name_57ar);
					v6 = D41A0_BYTESTR_0.array_0x2BDE[v4x].array_0x39f_2BFA_12157;//wizard name 
					strcpy(v6,v5);
					/*do
					{
						v7 = *v5;
						*v6 = *v5;
						if (!v7)
							break;
						v8 = v5[1];
						v5 += 2;
						v6[1] = v8;
						v6 += 2;
					} while (v8);*/
					//a1 = v4 + 927;//wizard name
				}
				v1 = 1;
			}
			//v2 += 10;
			v2x++;
			//v4 += 2124;
			v4x++;
			v3++;
		}
		if (v1)
			sub_7438A((Bit8u*)D41A0_BYTESTR_0.array_0x2BDE, 0x84Cu);
	}
	D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248++;
	x_D41A0_BYTEARRAY_4_struct.byteindex_26++;//232c9e
	x_D41A0_BYTEARRAY_4_struct.setting_30++;// = v12 + 1;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_38400)
		x_D41A0_BYTEARRAY_4_struct.byteindex_38400--;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_38401)
		x_D41A0_BYTEARRAY_4_struct.byteindex_38401--;
	v15 = 1;
	while (v15 < 16)
	{
		v16 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248 / (unsigned int)v15 & 1;
		v17 = v15++;
		x_D41A0_BYTEARRAY_4_struct.byteindex_121[v17] = v16;//fix it - find size of this array
	}
	v114x = 0;
	v18x = 0;
	v116 = 0;
	while (1)
	{
		if ((uint16_t)v116 >= D41A0_BYTESTR_0.word_0xe)
			return;		
		v113x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x00a_2BE4_11240];
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x20)
		{
			sub_53A40(&D41A0_BYTESTR_0.array_0x6E3E[v114x]);
		}
		switch (D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte0)
		{
		case 1:
			//v19 = (int)x_D41A0_BYTEARRAY_4;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x006_2BE4_11236 = 1;
			if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
				&& (uint16_t)v116 == D41A0_BYTESTR_0.word_0xc
				&& *x_D41A0_BYTEARRAY_4_struct.player_name_57ar)
			{
				v20 = x_D41A0_BYTEARRAY_4_struct.player_name_57ar;
				v21 = D41A0_BYTESTR_0.array_0x2BDE[v18x].array_0x39f_2BFA_12157;//wizard name
				strcpy(v21, v20);
				/*do
				{
					v22 = *v20;
					*v21 = *v20;
					if (!v22)
						break;
					v23 = v20[1];
					v20 += 2;
					v21[1] = v23;
					v21 += 2;
				} while (v23);*/
				//a1 = v18 + 927;//wizard name
			}
			goto LABEL_33;
		case 2:
			sub_53120();
			if (D41A0_BYTESTR_0.word_0xc == (uint16_t)v116)
				D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x004_2BE0_11234 = 1;
			if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
				sub_5E660(v113x);
			sub_7373D(v116);
			D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x006_2BE4_11236 = 0;
			goto LABEL_215;
		case 3:
			goto LABEL_33;
		case 4:
			D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x005_2BE0_11235 ^= D41A0_BYTESTR_0.array_0x2BDE[v18x].dw_w_b_0_2BDE_11230.byte[1];
			goto LABEL_215;
		case 6:			
			if (D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte5 & 0x40)
				v113x->dword_0xA4_164x->str_611.byte_0x458_1112 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
			if (D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte5 < 0 && !D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x846_2BDE)
				D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x846_2BDE = 1;
			goto LABEL_215;
		case 7:
			if (D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x00e_2BDE_11244 + D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1 >= 0
				&& D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1 + D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x00e_2BDE_11244 < D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x010_2BDE_11246 - 1)
			{
				D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x00e_2BDE_11244 += D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
			}
			goto LABEL_215;
		case 8:
			D41A0_BYTESTR_0.array_0x2BDE[v18x].struct_0x1d1_2BDE_11695[0].rotation__2BDE_11701.dd += D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
			goto LABEL_215;
		case 0xC:
			x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 = (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 | 0x22) & 0xFB;
			goto LABEL_215;
		case 0xD:
			x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 = (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 | 0x24) & 0xFD;
			goto LABEL_215;
		case 0xF:
			if (v113x->dword_0xA4_164x->word_0x3A_58)
				goto LABEL_33;
			if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
				goto LABEL_56;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].dw_w_b_0_2BDE_11230.byte[2] |= 0xCu;
		LABEL_33://adress 232dc5
			sub_5C950(&D41A0_BYTESTR_0.array_0x2BDE[v18x], v113x);
			sub_6EDB0_set_mouse_position_by_res();
			sub_548F0(&D41A0_BYTESTR_0.array_0x2BDE[v18x]);
			sub_52E90(&D41A0_BYTESTR_0.array_0x2BDE[v18x], 0, 0);
			goto LABEL_215;
		case 0x10:
			if (D41A0_BYTESTR_0.byte_0x36DEA_fly_asistant && (uint16_t)v116 == D41A0_BYTESTR_0.word_0xc)
			{
				//v33 = v114;
				D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte3 = 0;
				D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte4 = 0;
				sub_6EDB0_set_mouse_position_by_res();
			}
			sub_52E90(&D41A0_BYTESTR_0.array_0x2BDE[v18x], 3, 1);
			//v34 = x_D41A0_BYTEARRAY_0;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E2_2BE4_12224 = 0;
			if ((uint16_t)v116 == D41A0_BYTESTR_0.word_0xc)
			{				
				v35 = D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E0_2BE4_12222;
				sub_54960();
			}
			goto LABEL_215;
		case 0x11:
			v36 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
			if (v36 == 8)
			{					
				v37 = D41A0_BYTESTR_0.array_0x2BDE[v18x].names_81[D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E0_2BE4_12222];
				v38 = strlen(v37) + 1;
				//a1 = (Bit8u*)&v37[v38];
				if (v38 != 1)
				{
					D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E2_2BE4_12224--;
					D41A0_BYTESTR_0.array_0x2BDE[v18x].names_81[D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E0_2BE4_12222][v38 - 2] = 0;
					//*(x_BYTE *)(v38 - 1 + v18 + 48 * D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E0_2BE4_12222 + 80) = 0;
				}
			}
			else if (v36)
			{
				v39 = D41A0_BYTESTR_0.array_0x2BDE[v18x].names_81[D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E0_2BE4_12222];
				v40 = strlen(v39) + 1;
				//a1 = (Bit8u*)&v39[v40];
				if (v40 - 1 < 0x2B)
				{
					if (!D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E2_2BE4_12224)
						D41A0_BYTESTR_0.array_0x2BDE[v18x].names_81[D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E0_2BE4_12222][0] = 0;
					D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E2_2BE4_12224++;
					sprintf(printbuffer, "%c", D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1);
					v41 = printbuffer;
					v106 = D41A0_BYTESTR_0.array_0x2BDE[v18x].names_81[D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E0_2BE4_12222];
					v42 = (char *)&v106[strlen(v106)];
					strcpy(v42,v41);
					/*do
					{
						v43 = *v41;
						*v42 = *v41;
						if (!v43)
							break;
						v44 = v41[1];
						v41 += 2;
						v42[1] = v44;
						v42 += 2;
					} while (v44);*/
					//a1 = (Bit8u*)v106;
				}
			}
			goto LABEL_215;
		case 0x12:
			sub_52E90(&D41A0_BYTESTR_0.array_0x2BDE[v18x], 0, 1);
			goto LABEL_215;
		case 0x13:
			goto LABEL_82;
		case 0x14:
			if (D41A0_BYTESTR_0.byte_0x36DEA_fly_asistant && (uint16_t)v116 == D41A0_BYTESTR_0.word_0xc)
			{
				switch (D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1)
				{
				case 3:
				case 5:
				case 8:
				case 9:
				case 0xA:
				case 0xB:
				case 0xC:
				case 0xD:
				case 0xE:
					//v56 = (int)v114;
					D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte3 = 0;
					D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte4 = 0;
					sub_6EDB0_set_mouse_position_by_res();
					break;
				default:
					break;
				}
			}
			sub_52E90(&D41A0_BYTESTR_0.array_0x2BDE[v18x], D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1, 1);
			goto LABEL_215;
		case 0x17:
			if (D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2 != -1)
			{
				for (i = 0; i < 26; i++)
				{
					//v58 = i + v113x->dword_0xA4_164;
					if (v113x->dword_0xA4_164x->str_611.array_0x39B_923x.byte[i] == D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2)
						v113x->dword_0xA4_164x->str_611.array_0x39B_923x.byte[i] = -1;
				}
				v113x->dword_0xA4_164x->str_611.array_0x39B_923x.byte[D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1] = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2;
				sub_6E450_distance_sound(0, D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x007_2BE4_11237, 14);
			}
			goto LABEL_215;
		case 0x19:
		case 0x1A:
			v59 = 0;
			//for (j = x_D41A0_BYTEARRAY_0; v59 < *(x_WORD *)(x_D41A0_BYTEARRAY_0 + 14); j = x_D41A0_BYTEARRAY_0)
			for (; v59 < D41A0_BYTESTR_0.word_0xe;)
			{
				//v61 = D41A0_BYTESTR_0.array_0x2BDE[v59]; // 2124 * v59 + j;				
				if (D41A0_BYTESTR_0.array_0x2BDE[v59].byte_0x006_2BE4_11236)
				{
					D41A0_BYTESTR_0.array_0x2BDE[v59].byte_0x004_2BE0_11234 = 1;
					sub_7373D(v59);
				}
				v59++;
			}
			goto LABEL_215;
		case 0x1B:
			sub_53120();
			v24 = v116;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].dw_w_b_0_2BDE_11230.word[1] = 10;
			sub_7373D(v24);
			goto LABEL_215;
		case 0x1C:
			v25 = v116;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].dw_w_b_0_2BDE_11230.word[1] = 12;
			sub_7373D(v25);
			goto LABEL_215;
		case 0x1D://banished
		LABEL_56:
			v26 = x_DWORD_E9C4C_langindexbuffer[283];//has been banished from the realm.
			v27 = D41A0_BYTESTR_0.array_0x2BDE[v18x].array_0x01c_2BFA_11258;
			strcpy(v27,v26);
			/*do
			{
				v28 = *v26;
				*v27 = *v26;
				if (!v28)
					break;
				v29 = v26[1];
				v26 += 2;
				v27[1] = v29;
				v27 += 2;
			} while (v29);*/
			//HIWORD(a1) = (unsigned int)(v18 + 28) >> 16;			
			D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x04f_2C2D_11309 = 1;
			v30 = v116;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x04d_2C2B_11307 = 100;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].dw_w_b_0_2BDE_11230.word[1] = 8;
			sub_7373D(v30);
			//v31 = (int)x_D41A0_BYTEARRAY_4;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x006_2BE4_11236 = 0;
			if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
				sub_5E660(v113x);
			//LOWORD(a1) = x_D41A0_BYTEARRAY_4_struct.levelnumber_43;
			x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 &= 0xD9u;
			if (x_D41A0_BYTEARRAY_4_struct.levelnumber_43w > 0x18u)
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] |= 0x10u;
			goto LABEL_215;
		case 0x1E://cheat
			sub_53120();
			switch (D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1)
			{
			case 1:
				v112 = 0;
				break;
			case 2:
				v68x = sub_4A190(&v113x->array_0x4C_76, 10, 39);
				if (v68x)
				{
					//v69 = x_D41A0_BYTEARRAY_0;
					v68x->dword_0x90_144 = 100000;
					v68x->word_0x94_148 = v113x - D41A0_BYTESTR_0.struct_0x6E8E;
				}
				v113x->dword_0x90_144 = v113x->dword_0x8C_140;
				sub_52D70(v116, (char*)".. CHEAT: more mana");
				goto LABEL_215;
			case 3:
				for (kx = x_D41A0_BYTEARRAY_4_struct.dword_38519; kx > x_DWORD_EA3E4[0]; kx = kx->next_0)
				{
					if (kx->word_0x1A_26 != v113x->word_0x1A_26)
					{
						//v71 = kx->byte_0x40_64;
						if (!kx->byte_0x40_64 || kx->byte_0x40_64 == 1)
							kx->dword_0x8 = -1;
					}
				}
				sub_52D70(v116, (char*)".. CHEAT: destroy all players");
				goto LABEL_215;
			case 4:
				for (lx = x_D41A0_BYTEARRAY_4_struct.dword_38519; lx > x_DWORD_EA3E4[0]; lx = lx->next_0)
				{
					if (lx->word_0x1A_26 != v113x->word_0x1A_26 && lx->byte_0x40_64 == 2)
						lx->dword_0x8 = -1;
				}
				sub_52D70(v116, (char*)".. CHEAT: destroy all castles");
				goto LABEL_215;
			case 5:
				for (mx = x_D41A0_BYTEARRAY_4_struct.dword_38519; mx > x_DWORD_EA3E4[0]; mx = mx->next_0)
				{
					if (mx->word_0x1A_26 != v113x->word_0x1A_26 && mx->byte_0x40_64 == 3)
						mx->dword_0x8 = -1;
				}
				sub_52D70(v116, (char*)".. CHEAT: destroy all balloons");
				goto LABEL_215;
			case 6:
				v113x->dword_0x8 = v113x->dword_0x4;
				sub_52D70(v116, (char*)".. CHEAT: heal");
				goto LABEL_215;
			case 7:
				sub_1B5F0();
				sub_52D70(v116, (char*)".. CHEAT: Kill all creatures");
				goto LABEL_215;
			case 8:
				v74 = 0;
				while (v74 < 26)
				{
					v75 = x_BYTE_D94FF_spell_index[v74++];
					v113x->dword_0xA4_164x->str_611.array_0x2CB_715x.dword[v75] += 100;
				}
				sub_6DB50(0, 0);
				sub_52D70(v116, (char*)".. CHEAT: More Spell Experience Points");
				goto LABEL_215;
			case 9:
				//v76 = x_D41A0_BYTEARRAY_4_struct.setting_byte3_24;
				if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x20)
				{
					x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 &= 0xDF;
					sub_52D70(v116, (char*)".. CHEAT: Free Spell Usage OFF");
				}
				else
				{
					x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 |= 0x20;
					sub_52D70(v116, (char*)".. CHEAT: Free Spell Usage ON");
				}
				goto LABEL_215;
			case 0xA:
				//v77 = x_D41A0_BYTEARRAY_4_struct.setting_byte4_25;
				if (x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 & 1)
					x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 &= 0xFE;
				else
					x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 |= 1;
				if (x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 & 1)
					sub_52D70(v116, (char*)".. CHEAT: Invincability ON");
				else
					sub_52D70(v116, (char*)".. CHEAT: Invincability OFF");
				goto LABEL_215;
			default:
				goto LABEL_215;
			}
			break;
		case 0x1F:
		case 0x20:
			if (D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1 != -1)
			{
				sub_6E450_distance_sound(0, D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x007_2BE4_11237, 14);
				sub_87C10();
				v78 = x_BYTE_D94FF_spell_index[D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1];
				v79x = &v113x->dword_0xA4_164x->str_611;
				v79x->array_0x437_1079x.byte[x_BYTE_D94FF_spell_index[D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1]] = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2;
				if (D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte0 >= 0x1Fu)
				{
					if (D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte0 <= 0x1Fu)
					{
						//v80 = (int)v114;
						v79x->word_0x451_1105 = v78;
						v79x->byte_0x455_1109 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2;
						x_D41A0_BYTEARRAY_4_struct.byteindex_38400 = 8;
					}
					else if (D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte0 == 32)
					{
						//v81 = (int)v114;
						v79x->word_0x453_1107 = v78;
						v79x->byte_0x456_1110 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2;
						x_D41A0_BYTEARRAY_4_struct.byteindex_38401 = 8;
					}
				}
				v82 = v78;
				//a1 = x_DWORD_EA3E4[*(int16_t *)(v79 + 2 * v78 + 208)];
				sub_6D5E0(x_DWORD_EA3E4[v79x->array_0x333_819x.word[v78]], D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2);
				sub_6D830(x_DWORD_EA3E4[v79x->array_0x333_819x.word[v78]], D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2);
				if ((uint16_t)v116 == D41A0_BYTESTR_0.word_0xc)
				{
					v83 = D41A0_BYTESTR_0.array_0x2BDE[v18x].array_0x01c_2BFA_11258;
					//v84 = x_DWORD_E9C4C_langindexbuffer[*(Bit16s*)& SPELLS_BEGIN_BUFFER_DA818[0x16+2*40 * v82] + /*2*13 * */D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2];
					v84 = x_DWORD_E9C4C_langindexbuffer[SPELLS_BEGIN_BUFFER_str[v82].subspell[D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2].word_0x16x];
					strcpy(v83,v84);
					/*do
					{
						v85 = v84[0];
						v83[0] = v84[0];
						if (!v85)
							break;
						v83[1] = v84[1];
						v84 += 2;
						//v83[1] = v86;
						v83 += 2;
					} while (v86);*/


					//a1 = v18 + 28;
					D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x04d_2C2B_11307 = 20;
					D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x04f_2C2D_11309 = 3;
				}
				if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 4)
				{
					//v87 = D41A0_BYTESTR_0.word_0xc;
					if ((uint16_t)v116 == D41A0_BYTESTR_0.word_0xc)
					{						
						sub_6D200(&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc]);
						sub_473B0();
					}
				}
			}
			goto LABEL_215;
		case 0x23:
			v93 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E2_2BE4_12224 = 0;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E0_2BE4_12222 = v93;
			goto LABEL_215;
		case 0x24:
			D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E1_2BE4_12223 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
			goto LABEL_215;
		case 0x25:
			if (D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E1_2BE4_12223 == 3)
				D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E3_2BE4_12225 ^= 1 << D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
			goto LABEL_215;
		case 0x26:
			v113x->dword_0xA4_164x->str_611.array_0x3B5_949x.byte[D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1] = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2;
			sub_6E450_distance_sound(0, D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x007_2BE4_11237, 14);
			goto LABEL_215;
		case 0x27:
			//v94 = (int)v114;
			D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte3 = 0;
			v95 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
			D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte4 = 0;
			if (v95)
			{
				v96x = v113x;
				v113x->word_0x82_130 = 0;
				v96x->dword_0xA4_164x->word_0xc_12 = 0;
				//LOWORD(a1) = *(x_WORD *)(*(x_DWORD *)(v113 + 164) + 825);
				if (v113x->dword_0xA4_164x->str_611.array_0x333_819x.word[3])
					x_DWORD_EA3E4[v113x->dword_0xA4_164x->str_611.array_0x333_819x.word[3]]->word_0x2E_46 = 0;
			}
			if (D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x007_2BE4_11237 == D41A0_BYTESTR_0.word_0xc)
				sub_6EDB0_set_mouse_position_by_res();
			goto LABEL_215;
		case 0x28:
			if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 4)
			{
				//v88 = v113x->dword_0xA4_164;
				v113x->dword_0xA4_164x->str_611.byte_0x458_1112 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
				v113x->dword_0xA4_164x->str_611.byte_0x457_1111 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte2;
				//v89 = D41A0_BYTESTR_0.word_0xc;
				if ((uint16_t)v116 == D41A0_BYTESTR_0.word_0xc)
				{
					sub_6D200(&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc]);
					sub_473B0();
				}
			}
			goto LABEL_215;
		case 0x29:
			if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 4)
			{
				//v90 = v113x->dword_0xA4_164;
				v91 = x_BYTE_D94FF_spell_index[v113x->dword_0xA4_164x->str_611.byte_0x458_1112];
				//v90 += 611;
				v113x->dword_0xA4_164x->str_611.byte_0x459_1113 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
				v113x->dword_0xA4_164x->str_611.array_0x437_1079x.byte[v91] = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
				//v92 = D41A0_BYTESTR_0.word_0xc;
				if ((uint16_t)v116 == D41A0_BYTESTR_0.word_0xc)
				{
					sub_6D200(&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc]);
					sub_473B0();
				}
			}
			goto LABEL_215;
		case 0x2A:
			//v97 = v113x->dword_0xA4_164;
			//a1 = x_DWORD_EA3E4[0];
			v98x = x_DWORD_EA3E4[v113x->dword_0xA4_164x->word_0x3A_58];
			if (v98x > x_DWORD_EA3E4[0])
			{
				if (v98x->dword_0x10_16 == 1)
					v113x->dword_0xA4_164x->byte_0x1BE_446 = 1;
				v98x->dword_0x8 = -1;
			}
			goto LABEL_215;
		case 0x2B:			
			D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E0_2BE4_12222 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte1;
		LABEL_82:
			v45 = printbuffer;
			v46 = D41A0_BYTESTR_0.array_0x2BDE[v18x].names_81[D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E0_2BE4_12222];
			strcpy(v45,v46);
			/*do
			{
				v47 = *v46;
				*v45 = *v46;
				if (!v47)
					break;
				v48 = v46[1];
				v46 += 2;
				v45[1] = v48;
				v45 += 2;
			} while (v48);*/
			//a1 = (Bit8u*)printbuffer;
			v118 = 0;
			if (printbuffer[0])
			{
				v118 = 1;
				if (x_toupper(printbuffer[0]) == 87
					&& x_toupper(v108) == 73
					&& x_toupper(v109) == 78
					&& x_toupper(v110) == 68
					&& x_toupper(v111) == 89)
				{
					if ((uint16_t)v116 == D41A0_BYTESTR_0.word_0xc)
						x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 |= 0x80u;
				}
				else
				{
					v117 = 0;
					//v49 = D41A0_BYTESTR_0.word_0xc;
					if ((uint16_t)v116 == D41A0_BYTESTR_0.word_0xc)
					{
					LABEL_98:
						v117 = 1;
					}
					else
					{
						//v50 = 2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0;
						switch (D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E1_2BE4_12223)
						{
						case 0:
							v51 = sub_61810(v113x, x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]) == 0;
							goto LABEL_97;
						case 1:
							//a1 = v113;
							v51 = sub_61620(v113x, x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]) == 0;
						LABEL_97:
							if (!v51)
								goto LABEL_98;
							break;
						case 2:
							goto LABEL_98;
						case 3:												
							if ((1 << D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.word_0x38_56) & D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E3_2BE4_12225)
								goto LABEL_98;
							break;
						default:
							break;
						}
					}
					if (printbuffer[0])
					{
						v52 = printbuffer;
						v53 = D41A0_BYTESTR_0.array_0x2BDE[v18x].array_0x01c_2BFA_11258;
						strcpy(v53,v52);
						/*do
						{
							v54 = *v52;
							*v53 = *v52;
							if (!v54)
								break;
							v55 = v52[1];
							v52 += 2;
							v53[1] = v55;
							v53 += 2;
						} while (v55);*/
						//a1 = v18 + 28;
						D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x04d_2C2B_11307 = 200;
						D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x04f_2C2D_11309 = 2;
					}
				}
			}
			sub_52E90(&D41A0_BYTESTR_0.array_0x2BDE[v18x], 0, v118);
			goto LABEL_215;
		case 0x2C:			
			v32 = D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E0_2BE4_12222;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x3E2_2BE4_12224 = 0;
			D41A0_BYTESTR_0.array_0x2BDE[v18x].names_81[v32][0] = 0;
			sub_6E450_distance_sound(0, D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x007_2BE4_11237, 14);
			goto LABEL_215;
		default:
			goto LABEL_215;
		}
		do
		{
			v62 = 2 * v112;
			if (!v113x->dword_0xA4_164x->str_611.array_0x333_819x.word[v112])
			{
				//adress 23354c
				v63x = pre_sub_4A190_axis_3d(0x2321a0 +14 * v112, &v113x->array_0x4C_76,2);//v63 = (Bit8u*)(*(int(**)(Bit8u*))((char *)&off_D781E + 14 * v112))(v113 + 76);
				//v14 = pre_sub_4A190(v8x, (Bit8u*)x_WORD_EB398ar); //(*(int(**)(int))((char *)&off_D7B7A + 14 * v13))((int)x_WORD_EB398ar);

				if (v63x)
				{
					v63x->struct_byte_0xc_12_15.byte[0] |= 1u;
					v115 = 168;
					v63x->dword_0x88_136 = 0;
					v63x->word_0x28_40 = v113x - D41A0_BYTESTR_0.struct_0x6E8E;
					v113x->dword_0xA4_164x->str_611.array_0x333_819x.word[v62] = v63x - D41A0_BYTESTR_0.struct_0x6E8E;
					for (n = 0; n < 10; ++n)
					{
						//v66 = v113x->dword_0xA4_164 + n;
						if (v113x->dword_0xA4_164x->str_611.array_0x39B_923x.byte[n] == -1)
						{
							v113x->dword_0xA4_164x->str_611.array_0x39B_923x.byte[n] = v112;
							break;
						}
					}
				}
			}
			v112++;
		} while (v112 < 26);
		for (iix = x_DWORD_EA3E4[1]; iix < x_DWORD_EA3E4[0x3e8]; iix++)
		{
			if (iix->byte_0x3F_63 == 11)
				iix->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
		}
		sub_52D70(v116, (char*)".. CHEAT: access all spells");
	LABEL_215://233c76
		v100x = 2 * D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte3 - v113x->dword_0xA4_164x->word_0x155_341;
		v113x->dword_0xA4_164x->word_0x4_4 = (v100x - (my_sign32(v100x) << 2) + my_sign32(v100x)) >> 2;
		v102x = 2 * D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte4 - v113x->dword_0xA4_164x->word_0x157_343;
		v102x = (v102x - (my_sign32(v102x) << 2) + my_sign32(v102x)) >> 2;
		v113x->dword_0xA4_164x->word_0x6_6 = v102x;//fix - test it
		v113x->dword_0xA4_164x->dword_0x0_0 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_byte5;
		v113x->dword_0xA4_164x->word_0x18_24_next_entity = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_word6;
		v113x->dword_0xA4_164x->word_0x1A_26 = D41A0_BYTESTR_0.array_0x6E3E[v114x].str_0x6E3E_word8;
		v103x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[v18x].word_0x00a_2BE4_11240];
		sub_57B20(&D41A0_BYTESTR_0.array_0x2BDE[v18x], v103x);		
		if (D41A0_BYTESTR_0.array_0x2BDE[v18x].byte_0x846_2BDE)
			sub_55C60(/*(int)a1, (int)v103,*/ &D41A0_BYTESTR_0.array_0x2BDE[v18x]);
		v18x++;
		v104 = v116 + 1;
		memset(&D41A0_BYTESTR_0.array_0x6E3E[v114x], 0, 10);
		v116 = v104;
		v114x++;
	}
}

//----- (00052D70) --------------------------------------------------------
void sub_52D70(uint16_t a1, char *a2)//233d70
{
	char *v2; // esi
	char *v4; // edi

	v2 = a2;
	v4 = D41A0_BYTESTR_0.array_0x2BDE[a1].array_0x01c_2BFA_11258;
	strcpy(v4,v2);
	D41A0_BYTESTR_0.array_0x2BDE[a1].word_0x04d_2C2B_11307 = 100;
	D41A0_BYTESTR_0.array_0x2BDE[a1].word_0x04f_2C2D_11309 = 1;
}

//----- (00052E90) --------------------------------------------------------
void sub_52E90(type_str_0x2BDE* a1x, signed int a2, char a3)//233e90
{
	uint16_t v4; // ax
	int16_t v5; // ax
	uint16_t v8; // [esp+0h] [ebp-4h]

	v4 = a1x->byte_0x3DF_2BE4_12221;
	a1x->byte_0x3DF_2BE4_12221 = a2;
	v8 = v4;
	if (a1x->word_0x007_2BE4_11237 != D41A0_BYTESTR_0.word_0xc)
	{
		sub_53120();
		return;
	}
	x_D41A0_BYTEARRAY_4_struct.byte_38544 = v4;
	sub_87C10();
	if ((x_WORD)a2)
	{
		sub_41AF0();
	}
	else if (v8)
	{
		sub_41B60();
	}
	if ((x_WORD)a2 && ((uint16_t)a2 < 6u || (uint16_t)a2 > 7u))
	{
		if (unk_18058Cstr.x_WORD_1805C2_joystick == 7 || unk_18058Cstr.x_WORD_1805C2_joystick == 1 || unk_18058Cstr.x_WORD_1805C2_joystick == 2)
			sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[x_BYTE_D419E]); // fix it
	}
	else if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
	{
		if (unk_18058Cstr.x_WORD_1805C2_joystick != 7 && unk_18058Cstr.x_WORD_1805C2_joystick != 1 && unk_18058Cstr.x_WORD_1805C2_joystick != 2)
			sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]);
		else
			sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[x_BYTE_D419E]); // fix it
	}
	else
	{
		sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]);
	}
	switch ((x_WORD)a2)
	{
	case 3:
	case 7:
	case 9:
	case 0xA:
	case 0xB:
	case 0xC:
	case 0xD:
	case 0xE:
		D41A0_BYTESTR_0.byte_0x36E04 = 0;
		break;
	default:
		break;
	}
	switch (v8)
	{
	case 0u:
	case 6u:
		if ((x_WORD)a2 == v8 && !(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1))
			sub_548B0(a1x);
		break;
	case 3u:
	case 5u:
	case 8u:
	case 9u:
	case 0xAu:
	case 0xBu:
	case 0xCu:
	case 0xDu:
	case 0xEu:
		sub_548B0(a1x);
		sub_473B0();
		break;
	default:
		break;
	}
	switch ((x_WORD)a2)
	{
	case 0:
	case 6:
		if ((x_WORD)a2 == v8 && x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
		{
			sub_6EDB0_set_mouse_position_by_res();
			goto LABEL_31;
		}
		break;
	case 3:
	case 5:
	case 8:
	LABEL_31:
		sub_548F0(a1x);
		break;
	case 9:
	case 0xB:
		sub_1A280();
		v5 = sub_1A4A0();
		//v6 = (int)x_D41A0_BYTEARRAY_4;
		x_D41A0_BYTEARRAY_4_struct.byteindex_225 = 1;
		x_D41A0_BYTEARRAY_4_struct.byteindex_186 = v5;
		sub_548F0(a1x);
		break;
	case 0xA:
	case 0xC:
		sub_548F0(a1x);
		sub_19D60(a2/*, a1x*/);
		break;
	case 0xD:
	case 0xE:
		sub_548F0(a1x);
		sub_1A030();
		break;
	default:
		break;
	}
	if ((uint16_t)a2 >= 5u)
	{
		if ((uint16_t)a2 > 5u)
		{
			if ((x_WORD)a2 != 8)
				goto LABEL_40;
			a3 = 0;
		}
		a1x->dword_0x3E6_2BE4_12228.str_611.byte_0x457_1111 = 0;
		sub_6D200(a1x);
		sub_473B0();
	}
LABEL_40:
	if (v8 >= 5u && (v8 <= 5u || v8 == 8))
		a3 = 0;
	switch ((x_WORD)a2)
	{
	case 6:
	case 7:
	case 8:
	case 0xB:
	case 0xC:
	case 0xE:
		sub_2CA60(384, 0, 256, 400);
		break;
	default:
		sub_2CA90(D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D);
		break;
	}
	if (a3)
		sub_6E450_distance_sound(0, a1x->word_0x007_2BE4_11237, 14);
	sub_53120();
}

//----- (00053120) --------------------------------------------------------
void sub_53120()//234120
{
	if (!(x_D41A0_BYTEARRAY_4_struct.byteindex_26 & 7))
	{
		if ((x_D41A0_BYTEARRAY_4_struct.byteindex_52 & 3) == 1)
		{
			if (!sub_10010())
			{
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x004_2BE0_11234 = 2;
			}
		}
	}
}

int debugcounter_234160 = 0;
//----- (00053160) --------------------------------------------------------
void sub_53160()//234160
{
	int16_t v3; // ax
	int16_t v4; // dx
	char* v6; // edi
	char* v7; // esi
	uint16_t v12; // [esp+8h] [ebp-8h]
	char v13; // [esp+Ch] [ebp-4h]
	int v0index;
	int v11index;

	v13 = 1;
	v12 = 0;
	v0index = 0;
	v11index = 0;
	do
	{
		D41A0_BYTESTR_0.array_0x6E3E[v11index].str_0x6E3E_byte0 = 0;
		D41A0_BYTESTR_0.array_0x6E3E[v11index].str_0x6E3E_byte1 = 0;
		D41A0_BYTESTR_0.array_0x6E3E[v11index].str_0x6E3E_byte2 = 0;
		D41A0_BYTESTR_0.array_0x6E3E[v11index].str_0x6E3E_byte3 = 0;
		D41A0_BYTESTR_0.array_0x6E3E[v11index].str_0x6E3E_byte4 = 0;
		D41A0_BYTESTR_0.array_0x6E3E[v11index].str_0x6E3E_byte5 = 0;
		D41A0_BYTESTR_0.array_0x6E3E[v11index].str_0x6E3E_word6 = 0;
		D41A0_BYTESTR_0.array_0x6E3E[v11index].str_0x6E3E_word8 = 0;

		x_D41A0_BYTEARRAY_4_struct.byteindex_256ar=D41A0_BYTESTR_0.array_0x2BDE[v0index];
		clean_x_D41A0_BYTEARRAY_0_0x2BDE(v0index);
		D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x3E9_1001x =x_D41A0_BYTEARRAY_4_struct.byteindex_256ar.dword_0x3E6_2BE4_12228.str_611.array_0x3E9_1001x;
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
			v13 = 0;
		if (v13)
			sub_549A0(&D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611, &x_D41A0_BYTEARRAY_4_struct.byteindex_256ar.dword_0x3E6_2BE4_12228.str_611);
		D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x018_2BDE_11254= x_D41A0_BYTEARRAY_4_struct.byteindex_256ar.dword_0x018_2BDE_11254;
		D41A0_BYTESTR_0.array_0x6E3E[v0index].str_0x6E3E_byte0 = 1;
		D41A0_BYTESTR_0.array_0x2BDE[v0index].word_0x007_2BE4_11237 = v12;
		if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10) && v12 != D41A0_BYTESTR_0.word_0xc)
			D41A0_BYTESTR_0.array_0x2BDE[v0index].byte_0x009_2BE4_11239 = 1;
		D41A0_BYTESTR_0.array_0x2BDE[v0index].word_0x010_2BDE_11246 = 32;
		D41A0_BYTESTR_0.array_0x2BDE[v0index].struct_0x1d1_2BDE_11695[0].rotation__2BDE_11701.dd = 128;
		v3 = D41A0_BYTESTR_0.array_0x2BDE[v0index].word_0x010_2BDE_11246;
		D41A0_BYTESTR_0.array_0x2BDE[v0index].byte_0x3E1_2BE4_12223 = 2;
		v4 = 0;
		D41A0_BYTESTR_0.array_0x2BDE[v0index].word_0x00e_2BDE_11244 = v3 - 1;
		while (v4 < D41A0_BYTESTR_0.array_0x2BDE[v0index].word_0x010_2BDE_11246)
		{
			v4++;
			D41A0_BYTESTR_0.array_0x2BDE[v0index].struct_0x1d1_2BDE_11695[v4].axis_2BDE_11695 = D41A0_BYTESTR_0.array_0x2BDE[v0index].struct_0x1d1_2BDE_11695[0].axis_2BDE_11695;
			D41A0_BYTESTR_0.array_0x2BDE[v0index].struct_0x1d1_2BDE_11695[v4].rotation__2BDE_11701.dd = D41A0_BYTESTR_0.array_0x2BDE[v0index].struct_0x1d1_2BDE_11695[0].rotation__2BDE_11701.dd;
		}
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
			D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.byte_0x1C0_448 = x_BYTE_E131C[v12];
		v6 = (char*)D41A0_BYTESTR_0.array_0x2BDE[v0index].array_0x39f_2BFA_12157;
		v7 = (char*)off_D93A0_wizards_names2[sub_61790(v12)];
		strcpy(v6, v7);		
		strcpy(D41A0_BYTESTR_0.array_0x2BDE[v0index].array_0x39f_2BFA_12157, v7);
		sub_54A50(v12, v0index);
		v0index++;
		v11index++;
		v12++;
	} while (v12 < 8u);
}

//----- (000533B0) --------------------------------------------------------
char sub_533B0_decompress_levels(int16_t a1, type_str_2FECE* a2x)//2343b0
{
	Bit8u* v2; // edi
	FILE* levelsdatfile; // ebx
	FILE* levelstabfile; // esi
	int *v6; // eax
	int v7; // edi
	int v9; // [esp+40h] [ebp-4h]

	v2 = (Bit8u*)x_DWORD_E9C38_smalltit;
	if (a1 < 1000)
	{
		levelsdatfile = sub_98817_open(file_handling->getFilePath(MC2File::clevels_levels_dat).c_str(), 512);
		if (levelsdatfile == NULL)
		{
			levelsdatfile = sub_98817_open(file_handling->getFilePath(MC2File::levels_levels_dat).c_str(), 512);
			if (levelsdatfile == NULL)
				return 0;
		}
		levelstabfile = sub_98817_open(file_handling->getFilePath(MC2File::clevels_levels_tab).c_str(), 512);
		if (levelstabfile == NULL)
		{
			levelstabfile = sub_98817_open(file_handling->getFilePath(MC2File::levels_levels_tab).c_str(), 512);
			if (levelstabfile == NULL)
			{
				sub_98882_close(levelsdatfile);
				return 0;
			}
		}
		sub_988A7_read(levelstabfile, v2, 4000);
		v6 = (int *)(v2 + 4 * a1);
		v7 = v6[0];
		v9 = v6[1] - v6[0];
		sub_98882_close(levelstabfile);
		if (x_filelength(levelsdatfile))
		{
			sub_9891E_seek(levelsdatfile, v7, 0);
			sub_988A7_read(levelsdatfile, (Bit8u*)x_DWORD_E9C38_smalltit, v9);
			if (sub_9894C_decompress((Bit8u*)x_DWORD_E9C38_smalltit, (Bit8u*)x_DWORD_E9C38_smalltit) < 0)
			{
				myprintf("ERROR decompressing levels.dat\n");
				return 0;
			}
			qmemcpy(a2x, (type_str_2FECE*)(const void *)x_DWORD_E9C38_smalltit, sizeof(type_str_2FECE)/*0x6604u*/);
			memset((type_str_2FECE*)x_DWORD_E9C38_smalltit, 0, sizeof(type_str_2FECE)/*0x6604u*/);
		}
		sub_98882_close(levelsdatfile);
		sub_56C00_sound_proc2(a2x);
		sub_53590(a2x);
	}
	return 1;
}

//----- (00053590) --------------------------------------------------------
void sub_53590(type_str_2FECE* a1x)//234590
{
	D41A0_BYTESTR_0.dword_0x4 = a1x->word_2FED0; //*(uint16_t*)(a1 + 2);
}

//----- (00053770) --------------------------------------------------------
char sub_53770_test_open_moviegam(Bit16u gamnumber)//234770
{
	FILE* gamxfile; // eax
	sprintf(printbuffer, "%s/gam%05d.dat", "movie", gamnumber);
	gamxfile = sub_98817_open(printbuffer, 512);
	if (gamxfile == NULL)
		return 0;
	sub_98882_close(gamxfile);
	return 1;
}

//----- (00053950) --------------------------------------------------------
char sub_53950_test_open_moviemap(Bit16u mapnumeber)//234950
{
	FILE* mapxfile; // eax
	sprintf(printbuffer, "%s/MAP%05d.DAT", "MOVIE", mapnumeber);
	mapxfile = sub_98817_open(printbuffer, 512);
	if (mapxfile == NULL)
		return 0;
	sub_98882_close(mapxfile);
	return 1;
}

//----- (000539A0) --------------------------------------------------------
void sub_539A0_load_bldgprm()//2349a0
{
	FILE* bldgprmfile = sub_98817_open(file_handling->getFilePath(MC2File::data_bldgprm_dat).c_str(), 512);
	if (bldgprmfile >= 0)
	{
		sub_988A7_read(bldgprmfile, x_WORD_D93C0_bldgprmbuffer, 304);
		sub_98882_close(bldgprmfile);
	}
}

//----- (00053A40) --------------------------------------------------------
void sub_53A40(type_str_0x6E3E* a1x)//234a40
{
	char v1; // ah
	char v5; // al
	char v7; // dh
	char v12; // ch
	char v15; // [esp+40h] [ebp-8h]
	char v16; // [esp+44h] [ebp-4h]

	v1 = x_D41A0_BYTEARRAY_4_struct.setting_byte1_22;
	if (v1 & 4)
	{
		v15 = 0;		
		if (!x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35 && !((a1x - &D41A0_BYTESTR_0.array_0x6E3E[0]) / sizeof(type_str_0x6E3E)))
		{
			sprintf(printbuffer, "%s/mvi%05d.dat", "movie", x_D41A0_BYTEARRAY_4_struct.moviemvinumber_byte4_39);
			x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35 = sub_98817_open(printbuffer, 512);
			if (x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35 == NULL || !sub_54D30(x_D41A0_BYTEARRAY_4_struct.moviemvinumber_byte4_39))
				v15 = 1;
			if (v15)
			{
				v5 = x_D41A0_BYTEARRAY_4_struct.setting_byte1_22;
				x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35 = 0;
				x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 = v5 & 0xFB;
			}
			else
			{
				sub_53C70();
			}
		}
		if (v15)
			goto LABEL_21;
		if (!x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35)
			goto LABEL_21;
		if (a1x->str_0x6E3E_byte0 != 2 && sub_988A7_read(x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35, (Bit8u*)a1x, 10) == 10)
		{
			v7 = a1x->str_0x6E3E_byte0;
			if (a1x->str_0x6E3E_byte0 == 13)
			{
				a1x->str_0x6E3E_byte0 = 0;
				goto LABEL_21;
			}
			if (v7 != 2 && v7 != 29 && !sub_473E0())
				goto LABEL_21;
		}
		v15 = 1;
	LABEL_21:
		if (v15)
		{
			sub_53CC0_close_movie();
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] = 8;
			sub_53CA0();
			a1x->str_0x6E3E_byte0 = 0;
		}
		return;
	}
	if (v1 & 2)
	{
		v16 = 0;
		if (!x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35 && !((a1x - &D41A0_BYTESTR_0.array_0x6E3E[0]) / sizeof(type_str_0x6E3E)))
		{
      std::string movienum = std::to_string(x_D41A0_BYTEARRAY_4_struct.moviemvinumber_byte4_39);
      std::filesystem::path path_moviedat = gamepath / "MOVIE" / (std::string(5-movienum.length(), '0') + movienum);
			x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35 = sub_98817_open(path_moviedat.c_str(), 546);
			if (x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35 == NULL || !sub_54F00(x_D41A0_BYTEARRAY_4_struct.moviemvinumber_byte4_39))
				v16 = 1;
			if (v16)
			{
				v12 = x_D41A0_BYTEARRAY_4_struct.setting_byte1_22;
				x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35 = 0;
				x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 = v12 & 0xFD;
			}
			else
			{
				sub_53C70();
			}
		}
		if (!v16)
		{
			if (x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35)
			{
				if (sub_98CAA_write(x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35, (Bit8u*)a1x, 10) != 10)
					sub_53CC0_close_movie();
				if (a1x->str_0x6E3E_byte0 == 12)
					a1x->str_0x6E3E_byte0 = 0;
			}
		}
	}
}

//----- (00053C70) --------------------------------------------------------
void sub_53C70()//234c70
{
	x_D41A0_BYTEARRAY_4_struct.byteindex_26 = 0;
	x_D41A0_BYTEARRAY_4_struct.setting_30 = 0;
	x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 |= 0x1208000;
}

//----- (00053CA0) --------------------------------------------------------
void sub_53CA0()//234ca0
{
	x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 &= 0xFEDF7FFF;
}

//----- (00053CC0) --------------------------------------------------------
void sub_53CC0_close_movie()//234cc0
{
	if (x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35)
	{
		sub_98882_close(x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35);
		x_D41A0_BYTEARRAY_4_struct.moviemvidatfile_byte4_35 = 0;
		x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 &= 0xD9;
	}
}

//----- (00053E60) --------------------------------------------------------
int sub_53E60_readfile_and_decompress(const char* path, Bit8u** a2)//234E60
{
	x_DWORD result; // eax
	FILE* file; // ebx
	Bit32u v4; // esi
	file = sub_98817_open((char*)path, 0x200);//234E72 - 279817
	// FIXME: types
	// result = (x_DWORD)file;
	if (result != NULL)
	{
		v4 = x_filelength(file);//234E82 - 2798DA
		sub_988A7_read(file, *a2, v4);//234E8F - 2798A7
		sub_98882_close(file);//234E98 - 279882
		result = (x_DWORD)sub_9894C_decompress(*a2, *a2);//234ea2 - 27994c
		if (result >= 0)
		{
			if (!result)
				result = v4;
		}
		else
		{
			myprintf("ERROR decompressing %s\n");
			result = -2;
		}
	}
	return result;
}

//----- (00053EF0) --------------------------------------------------------
bool sub_53EF0_fileexist(const char* path, const char* path2)//234ef0//fix a2
{
	FILE* testfile1; // eax
	FILE* testfile2; // eax
	bool result = false; // [esp+0h] [ebp-4h]
	testfile1 = sub_98817_open(path, 512);
	testfile2 = sub_98817_open(path2, 512);
	if (testfile1 == NULL || testfile2 == NULL)
		result = true;
	if (testfile1 != NULL)
		sub_98882_close(testfile1);
	if (testfile2 != NULL)
		sub_98882_close(testfile2);
	return result;
}

//----- (00054200) --------------------------------------------------------
char sub_54200_create_user_directories()//235200
{
	bool no_error = true;
	Bit8s v0h; // bx

	readbuffer[0] = 0x0;

	printbuffer[0] = 0;
	outtext((char*)"Checking Setup Version ..");//23521B - 29EBED
	sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::cdata_version_dat).c_str(), &readbuffer);//235260 - 234E60
	if (readbuffer[0] != 60)
		v0h = 1;
	outtext((char*)"\n");//235277 - 29EBED

	auto copyfile = [](auto& from, auto& to) -> bool {
		return std::filesystem::copy_file(from, to, std::filesystem::copy_options::overwrite_existing );
	};

	if (v0h || sub_53EF0_fileexist(file_handling->getFilePath(MC2File::cdata_tmaps00_dat).c_str(), file_handling->getFilePath(MC2File::data_tmaps00_dat).c_str()))
	{
		x_BYTE_D41AD_skip_screen = 0;//fix can not exit from setup
		//fix it - whne file not exist
		outtext((char*)"Creating Setup Directories: TMAPS0-0 ..");//2352E4 -29EBED
		x_DWORD_F4720 = gettextposition();//2352EC - 29E953
		no_error &= copyfile(file_handling->getFilePath(MC2File::cdata_tmaps00_dat), file_handling->getFilePath(MC2File::data_tmaps00_dat));
		no_error &= copyfile(file_handling->getFilePath(MC2File::cdata_tmaps00_tab), file_handling->getFilePath(MC2File::data_tmaps00_tab));
		outtext((char*)"\n");//235343 - 29EBED
	}
	if (no_error)
	{
  	if (v0h || sub_53EF0_fileexist(file_handling->getFilePath(MC2File::cdata_tmaps10_dat).c_str(), file_handling->getFilePath(MC2File::data_tmaps10_dat).c_str()))
		{
			//fix it - whne file not exist
			outtext((char*)"Creating Setup Directories: TMAPS1-0 ..");
			x_DWORD_F4720 = gettextposition();
			no_error &= copyfile(file_handling->getFilePath(MC2File::cdata_tmaps10_dat), file_handling->getFilePath(MC2File::data_tmaps10_dat));
			no_error &= copyfile(file_handling->getFilePath(MC2File::cdata_tmaps10_tab), file_handling->getFilePath(MC2File::data_tmaps10_tab));
			outtext((char*)"\n");
		}
	}
	if (no_error)
	{
  	if (v0h || sub_53EF0_fileexist(file_handling->getFilePath(MC2File::cdata_tmaps20_dat).c_str(), file_handling->getFilePath(MC2File::data_tmaps20_dat).c_str()))
		{
			//fix it - whne file not exist
			outtext((char*)"Creating Setup Directories: TMAPS2-0 ..");
			x_DWORD_F4720 = gettextposition();
			no_error &= copyfile(file_handling->getFilePath(MC2File::cdata_tmaps20_dat), file_handling->getFilePath(MC2File::data_tmaps20_dat));
			no_error &= copyfile(file_handling->getFilePath(MC2File::cdata_tmaps20_tab), file_handling->getFilePath(MC2File::data_tmaps20_tab));
			outtext((char*)"\n");
		}
	}
	if (no_error && !((x_D41A0_BYTEARRAY_4_struct.setting_byte1_22) & 8)) // TODO: test it
	{
		outtext((char*)"Setting Up Levels ..");
		x_DWORD_F4720 = gettextposition();
		if (!std::filesystem::exists(file_handling->getFilePath(MC2File::levels_levels_dat))) {
			// TODO: check if LEVELS.* always has to be copied (looks like this was the case in the original)
			no_error &= copyfile(file_handling->getFilePath(MC2File::clevels_levels_dat), file_handling->getFilePath(MC2File::levels_levels_dat));
			no_error &= copyfile(file_handling->getFilePath(MC2File::clevels_levels_tab), file_handling->getFilePath(MC2File::levels_levels_tab));
		}
		outtext((char*)"\n");
	}
	if (no_error && v0h)
	{
		readbuffer[0] = 60;
		sub_98C48_open_nwrite_close(file_handling->getFilePath(MC2File::cdata_version_dat).c_str(), readbuffer, 4);
	}

	return no_error;
}

//----- (00054600) --------------------------------------------------------
void sub_54600_mouse_reset()////235600 mouse reset
{
	int16_t v2; // [esp+1Ch] [ebp-1Ch]

	v2 = 0;
	x_DWORD_E3768 = 0;
}

Bit8u BigTextureBuffer[128 * 128 * 160];
//----- (00054630) --------------------------------------------------------
void sub_54630_load_psxblock(Bit16u TextSize)//235630
{
	switch (TextSize)
	{
	case 16:
	{
		sub_84250_load_file_array(psxadatablock16dat);
		break;
	}
	case 32: {
		sub_84250_load_file_array(psxadatablock32dat);//psxadatablock32dat=~2a9e74
		break;
	}
	case 128:
	{
		break;
	}
	}
}

//----- (00054660) --------------------------------------------------------
void sub_54660_read_and_decompress_sky_and_blocks(MC2LevelType GraphicsType, Bit8u GraphicsSize)//235660
{
	switch (GraphicsType)
	{
	case 0://basic graphics
	{
		switch (GraphicsSize)
		{
		case 16:
		{
			sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_block16_dat).c_str(), &BLOCK32DAT_BEGIN_BUFFER);//2bac2c
			break;
		}
		case 32:
		{
			sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_block32_dat).c_str(), &BLOCK32DAT_BEGIN_BUFFER);//2bac2c
			break;
		}
		case 128:
		{
			//AdvReadfile("biggraphics/block128.data",BigTextureBuffer);//advance graphics
			//AdvReadfile(bigtexturepath, BigTextureBuffer);//advance graphics			
			ReadGraphicsfile(file_handling->getFilePath(MC2File::data_block128_dat).c_str(), BigTextureBuffer);//advance graphics
			break;
		}
		}
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_skyd00_dat).c_str(), &off_D41A8_sky);//2a51a8
		/*result = */sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_tmaps00_tab).c_str(), &TMAPS00TAB_BEGIN_BUFFER);//2c7ed0
    	file_handling->setCurrentTMapsFile(MC2CurrentTMapsFile::TMaps00);
		break;
	}
	case 1://? and night
	{
		switch (GraphicsSize)
		{
		case 16:
		{
			if (D41A0_BYTESTR_0.str_2FECE.byte_0x2FED2 & 2)
				sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_bl16f00_dat).c_str(), &BLOCK32DAT_BEGIN_BUFFER);//2bac2c
			else
				sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_bl16n00_dat).c_str(), &BLOCK32DAT_BEGIN_BUFFER);//2bac2c
			break;
		}
		case 32:
		{
			if (D41A0_BYTESTR_0.str_2FECE.byte_0x2FED2 & 2)
				sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_bl32f00_dat).c_str(), &BLOCK32DAT_BEGIN_BUFFER);//2bac2c
			else
				sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_bl32n00_dat).c_str(), &BLOCK32DAT_BEGIN_BUFFER);//2bac2c
			break;
		}
		case 128:
		{
			if (D41A0_BYTESTR_0.str_2FECE.byte_0x2FED2 & 2)
				//AdvReadfile("biggraphics/bl128f0-0.data", BigTextureBuffer);//advance graphics
				ReadGraphicsfile(file_handling->getFilePath(MC2File::data_bl128f00_dat).c_str(), BigTextureBuffer);//advance graphics
			else
				//AdvReadfile("biggraphics/bl128n0-0.data", BigTextureBuffer);//advance graphics
				ReadGraphicsfile(file_handling->getFilePath(MC2File::data_bl128n00_dat).c_str(), BigTextureBuffer);//advance graphics
			break;
		}
		}
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_skyn00_dat).c_str(), &off_D41A8_sky);//2a51a8
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_tmaps10_tab).c_str(), &TMAPS00TAB_BEGIN_BUFFER);//2c7ed0
    	file_handling->setCurrentTMapsFile(MC2CurrentTMapsFile::TMaps10);
		break;
	}
	case 2://cave
	{
		switch (GraphicsSize)
		{
		case 16:
		{
			sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_bl16c00_dat).c_str(), &BLOCK32DAT_BEGIN_BUFFER);//2bac2c
			break;
		}
		case 32:
		{
			sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_bl32c00_dat).c_str(), &BLOCK32DAT_BEGIN_BUFFER);//2bac2c
			break;
		}
		case 128:
		{
			//AdvReadfile("biggraphics/bl128c0-0.data",BigTextureBuffer);//advance graphics
			ReadGraphicsfile(file_handling->getFilePath(MC2File::data_bl128c00_dat).c_str(), BigTextureBuffer);//advance graphics
			break;
		}
		}
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_tmaps20_tab).c_str(), &TMAPS00TAB_BEGIN_BUFFER);//2c7ed0
    	file_handling->setCurrentTMapsFile(MC2CurrentTMapsFile::TMaps20);
		break;
	}
	}
}

//----- (00054800) --------------------------------------------------------
void sub_54800_read_and_decompress_tables(MC2LevelType level_type)//235800
{
	if (level_type == 0)
	{
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_tablesd_dat).c_str(), &x_BYTE_F6EE0_tablesx_pre);//2c7ee0
		x_WORD_D4B7E = 0;
		x_WORD_D4B7C = 254;
	}
	else if (level_type == 1)
	{
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_tablesn_dat).c_str(), &x_BYTE_F6EE0_tablesx_pre);
		x_WORD_D4B7E = 255;
		x_WORD_D4B7C = 0;
	}
	else if (level_type == 2)
	{
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_tablesc_dat).c_str(), &x_BYTE_F6EE0_tablesx_pre);
		x_WORD_D4B7C = 254;
		x_WORD_D4B7E = 255;
	}
}

//----- (000548B0) --------------------------------------------------------
void sub_548B0(type_str_0x2BDE* a1x)//2358b0
{
	if (a1x->word_0x007_2BE4_11237 == D41A0_BYTESTR_0.word_0xc)
		sub_5BDC0_set_mouse_position(a1x->dword_0x3E6_2BE4_12228.position_backup_20.x, a1x->dword_0x3E6_2BE4_12228.position_backup_20.y);
}

//----- (000548F0) --------------------------------------------------------
void sub_548F0(type_str_0x2BDE* a1x)//2358f0
{
	if (a1x->word_0x007_2BE4_11237 == D41A0_BYTESTR_0.word_0xc)
	{
		if (unk_18058Cstr.x_WORD_1805C2_joystick != 7 && unk_18058Cstr.x_WORD_1805C2_joystick != 1 && unk_18058Cstr.x_WORD_1805C2_joystick != 2)
		{
			a1x->dword_0x3E6_2BE4_12228.position_backup_20.x = unk_18058Cstr.x_DWORD_1805B0_mouse.x;
			a1x->dword_0x3E6_2BE4_12228.position_backup_20.y = unk_18058Cstr.x_DWORD_1805B0_mouse.y;
		}
		else
		{
			a1x->dword_0x3E6_2BE4_12228.position_backup_20 = x_WORD_E3760_mouse;
		}
	}
}

//----- (00054960) --------------------------------------------------------
void sub_54960()//235960
{
	Bit16s v0; // ax

	if (x_WORD_180660_VGA_type_resolution & 1)
		v0 = 400;
	else
		v0 = 480;
	/*return */sub_5BDC0_set_mouse_position(426, v0 - 72 + 17);
}

//----- (000549A0) --------------------------------------------------------
void sub_549A0(type_str_611* a1x, type_str_611* a2x)//2359a0
{
	a1x->array_0x3E9_1001x = a2x->array_0x3E9_1001x;
	a1x->array_0x263_611x = a2x->array_0x263_611x;
	a1x->array_0x41D_1053z = a2x->array_0x41D_1053z;
	a1x->array_0x3B5_949x = a2x->array_0x3B5_949x;
	a1x->array_0x437_1079x = a2x->array_0x437_1079x;
}

int debugcounter_235a50 = 0;
//----- (00054A50) --------------------------------------------------------
void sub_54A50(uint16_t a1, int v0index/*Bit8u* a2*/)//235a50
{
	signed int i; // eax
	uint16_t v4; // cx
	signed int v5; // esi
	int result; // eax
	char v8; // bl
	bool v10; // zf
	signed int v12; // [esp+1Ch] [ebp-14h]
	int v15; // [esp+28h] [ebp-8h]
	signed int v16; // [esp+2Ch] [ebp-4h]

	for (i = 0; i < 26; i++)
	{
		D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x437_1079x.byte[i] = 0;
		D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[i] = 0;
		D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x403_1027x.byte[i] = 0;
	}
	
	D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.word_0x451_1105 = -1;
	D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.word_0x453_1107 = -1;
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
		v4 = 0;
	else
		v4 = a1;
	v5 = 0;
	v15 = 0;
	do
	{
		result = x_BYTE_D94FF_spell_index[v5];
		if (D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x360FBx[result] > 2u)
			D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x360FBx[result] = 2;
		if (D41A0_BYTESTR_0.array_0x2BDE[v0index].byte_0x009_2BE4_11239 == 1)
		{
			D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x41D_1053z.byte[result] = D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x360FBx[result];
		}
		else if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 8 || x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
		{
			v12 = D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x360FBx[result];
			if (D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x41D_1053z.byte[result] < v12)
			{
				v16 = D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x360FBx[result];
				if (v12 < 0)
					v16 = 0;
				if (v16 > 2)
					v16 = 2;
				D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x41D_1053z.byte[result] = v16;
				D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x263_611x.dword[result] = SPELLS_BEGIN_BUFFER_str[result].subspell[v16].dword_0x12 + 1;
			}
		}
		D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x39B_923x.byte[v5] = -1;
		v8 = 0;
		if (D41A0_BYTESTR_0.array_0x2BDE[v0index].byte_0x009_2BE4_11239 == 1)
		{
			D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x3CF_975x.byte[result] = D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x36115x[result];//  *(x_BYTE*)(result + 110 * v4 + x_D41A0_BYTEARRAY_0 + 221461);
			if (!D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x360E1x[result])
				goto LABEL_37;
			v10 = D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x3CF_975x.byte[result]==0;
			goto LABEL_35;
		}
		if (D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x36115x[result])
			goto LABEL_37;
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
		{
			if (!D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x360E1x[result])
				goto LABEL_37;
			v10 = D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x36115x[result] == 0;
		LABEL_35:
			if (!v10)
				goto LABEL_37;
			goto LABEL_36;
		}
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 >= 0 && x_D41A0_BYTEARRAY_4_struct.levelnumber_43w)
		{
			if (!D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x3E9_1001x.byte[result])
				goto LABEL_37;
		LABEL_36:
			v8 = 1;
			goto LABEL_37;
		}
		if (D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x3E9_1001x.byte[result])
			goto LABEL_36;
		if (D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x360E1x[result])
		{
			if (!D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v4].byte_0x36115x[result])
				goto LABEL_36;
		}
	LABEL_37:
		if (v8)//adress 235cc3
		{
			D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[result] = 1;
			D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x3E9_1001x.byte[result] = 1;
			if(D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.word_0x451_1105==-1)
			{
				D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.word_0x451_1105 = result;
			}
			else if (D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.word_0x453_1107 == -1)
			{
				D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.word_0x453_1107 = result;
			}
			result = v15 + 1;
			D41A0_BYTESTR_0.array_0x2BDE[v0index].dword_0x3E6_2BE4_12228.str_611.array_0x39B_923x.byte[v15] = v15;
			v15++;
		}
		v5++;
	} while (v5 < 26);
}

//----- (00054D30) --------------------------------------------------------
char sub_54D30(int16_t a1)//235d30 //in game load
{
	FILE* savedfile; // eax
	char result; // al
	type_str_0x21AA v8; // [esp+80h] [ebp+4Ah]
	type_str_0x21AE v9; // [esp+84h] [ebp+4Eh]
	type_str_0x21B2 v10; // [esp+88h] [ebp+52h]
	type_str_0x21B6 v11; // [esp+8Ch] [ebp+56h]
	int v12; // [esp+90h] [ebp+5Ah]
	int v13; // [esp+94h] [ebp+5Eh]
	int v14; // [esp+98h] [ebp+62h]
	int v15; // [esp+9Ch] [ebp+66h]
	type_str_0x218A v16; // [esp+A0h] [ebp+6Ah]
	type_str_0x218E v17; // [esp+A4h] [ebp+6Eh]
	type_str_0x2192 v18; // [esp+A8h] [ebp+72h]
	type_str_0x2196 v19; // [esp+ACh] [ebp+76h]
	char v20; // [esp+B0h] [ebp+7Ah]

	v20 = 1;
	v16 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A;// *(x_DWORD*)(x_D41A0_BYTEARRAY_0 + 8586);
	v17 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E;
	v18 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x2192;// *(x_DWORD*)(x_D41A0_BYTEARRAY_0 + 8594);
	v19 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196;
	v12 = D41A0_BYTESTR_0.dword_0x219A;
	v13 = D41A0_BYTESTR_0.dword_0x219E;
	v14 = D41A0_BYTESTR_0.dword_0x21A2;
	v15 = D41A0_BYTESTR_0.dword_0x21A6;
	v8 = D41A0_BYTESTR_0.str_0x21AA;
	v9 = D41A0_BYTESTR_0.str_0x21AE;
	v10 = D41A0_BYTESTR_0.str_0x21B2;
	v11 = D41A0_BYTESTR_0.str_0x21B6;
	sprintf(printbuffer, "%s/%s%03d.dat", "movie", "SMAP", a1);
	savedfile = sub_98817_open(printbuffer, 512);
	//v2 = moviesmapfile;
	if (savedfile >= 0)
	{
		sub_988A7_read(savedfile, (Bit8u*)x_BYTE_10B4E0_terraintype, 0x10000);
		sub_988A7_read(savedfile, (Bit8u*)x_BYTE_11B4E0_height, 0x10000);
		sub_988A7_read(savedfile, (Bit8u*)x_BYTE_12B4E0_shading, 0x10000);
		sub_988A7_read(savedfile, (Bit8u*)x_BYTE_13B4E0_angle, 0x10000);
		sub_988A7_read(savedfile, (Bit8u*)x_BYTE_14B4E0, 0x10000);
		sub_988A7_read(savedfile, (Bit8u*)x_WORD_15B4E0_source, 0x20000);
		sub_988A7_read(savedfile, (Bit8u*)x_BYTE_F2CD0x, 4802);
		sub_98882_close(savedfile);
	}
	sprintf(printbuffer, "%s/%s%03d.dat", "movie", "SLEV", a1);
	
	Bit8u* D41A0_pointer;
	D41A0_pointer = (Bit8u*)&D41A0_BYTESTR_0;
	sub_53E60_readfile_and_decompress(printbuffer, &D41A0_pointer);
	
	sub_55100(2);
	sub_57680_FixPointersAfterLoad();
	sub_49F90();
	D41A0_BYTESTR_0.dword_0x11e6 = -1;
	sub_71990();
	sub_473B0();
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A = v16;
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E = v17;
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x2192 = v18;
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196 = v19;
	D41A0_BYTESTR_0.dword_0x219A = v12;
	D41A0_BYTESTR_0.dword_0x219E = v13;
	D41A0_BYTESTR_0.dword_0x21A2 = v14;
	D41A0_BYTESTR_0.dword_0x21A6 = v15;
	D41A0_BYTESTR_0.str_0x21AA=v8;
	D41A0_BYTESTR_0.str_0x21AE=v9;
	D41A0_BYTESTR_0.str_0x21B2=v10;
	D41A0_BYTESTR_0.str_0x21B6=v11;
	result = v20;

	return result;
}

//----- (00054F00) --------------------------------------------------------
char sub_54F00(int16_t a1)//235f00 //in game save
{
	//Bit8u* v1; // ST0C_4
	FILE* file; // eax
	//FILE* v3; // ebx
	//char v5; // [esp+0h] [ebp-6h]
	char v6; // [esp+80h] [ebp+7Ah]

	v6 = 1;
	sub_71930();
	sub_55100(1);
	sprintf(printbuffer, "%s/%s%03d.dat", "movie", "SLEV", a1);
	//v1 = (Bit8u*)x_D41A0_BYTEARRAY_0;
	// FIXME: types
	// D41A0_BYTESTR_0.dword_0x36DF6 = (Bit32u)&unk_D7BD6[0x7d6];
	
	sub_98C48_open_nwrite_close(printbuffer, (Bit8u*)&D41A0_BYTESTR_0, 224791);

	sprintf(printbuffer, "%s/%s%03d.dat", "movie", "SMAP", a1);
	file = sub_98817_open(printbuffer, 546);
	//v3 = v2;
	if (file !=NULL)
	{
		sub_98CAA_write(file, (Bit8u*)x_BYTE_10B4E0_terraintype, 0x10000);
		sub_98CAA_write(file, (Bit8u*)x_BYTE_11B4E0_height, 0x10000);
		sub_98CAA_write(file, (Bit8u*)x_BYTE_12B4E0_shading, 0x10000);
		sub_98CAA_write(file, (Bit8u*)x_BYTE_13B4E0_angle, 0x10000);
		sub_98CAA_write(file, (Bit8u*)x_BYTE_14B4E0, 0x10000);
		sub_98CAA_write(file, (Bit8u*)x_WORD_15B4E0_source, 0x20000);
		sub_98CAA_write(file, (Bit8u*)x_BYTE_F2CD0x, 4802);
		sub_98882_close(file);
	}
	sub_55100(2);
	sub_49F90();
	D41A0_BYTESTR_0.dword_0x11e6 = -1;
	return v6;
}

//----- (00055080) --------------------------------------------------------
char sub_55080(uint8_t a1, int LevelNumber,char* filenameindex)//236080 //filenameindex added for debugging
{
	char v2; // bl

	v2 = 0;
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
	{
		sub_71930();
		sub_55100(1);
		v2 = sub_55250(a1, filenameindex);
		if (v2)
		{
			/*//fix
			for (int iy = 0; iy < 50; iy++)
			{
				D41A0_BYTESTR_0.str_0x3664C[iy].dword_A = NULL;
			}
			//fix*/
			v2 = sub_55320_InGameSave(a1, filenameindex);
			if (v2)
				v2 = sub_55450(a1, LevelNumber, filenameindex);
		}
		sub_55100(2);
		sub_49F90();
		D41A0_BYTESTR_0.dword_0x11e6 = -1;
	}
	return v2;
}
int debugcounter_236100 = 0;
//----- (00055100) --------------------------------------------------------
void sub_55100(char a1)//236100
{
	//int v1; // edi
	signed int v2; // eax
	int v3; // edx
	signed int v4; // ebx
	int v5; // esi
	//Bit8u* v6; // eax
	uint8_t v7; // cl
	signed int i; // ebx
	uint8_t v9; // al
	//Bit8u* v10; // eax
	type_str_0x6E8E* v11; // ecx
	//Bit8u* result; // eax
	signed int j; // ebx

	//v1 = (int)x_D41A0_BYTEARRAY_0;
	if (a1 == 1)
		v2 = -1;
	else
		v2 = 1;

	//fix !!!!
	//allert_error();
	// FIXME: types
	// v3 = v2* (Bit32u)D41A0_BYTESTR_0.struct_0x6E8E;
	//D41A0_BYTESTR_0.struct_0x6E8E[59]
	v4 = 0;
	// FIXME: types
	// v5 = v2* (Bit32u)D41A0_BYTESTR_0.str_2FECE.array_0x30311;
	//fix

	while (v4 < D41A0_BYTESTR_0.byte_0x36E01)
	{
		if (D41A0_BYTESTR_0.struct_0x3654C[v4].str_36552_un.dword)
		{
			v7 = D41A0_BYTESTR_0.struct_0x3654C[v4].str_3654C_byte0;
			if ((v7 < 5)&& (v7 > 0))
			{
				// FIXME: types
				// // if (!(D41A0_BYTESTR_0.struct_0x3654C[v4].str_3654D_byte1 & 1))
				// {
				// 	if ((v7 == 1) || (v7 == 2) || (v7 == 4))
				// 		D41A0_BYTESTR_0.struct_0x3654C[v4].str_36552_un.ptr0x30311 = (type_str_0x30311*)((Bit32u)D41A0_BYTESTR_0.struct_0x3654C[v4].str_36552_un.ptr0x30311 + (Bit32u)v5);
				// }
				// else
				// 	D41A0_BYTESTR_0.struct_0x3654C[v4].str_36552_un.ptr0x6E8E = (type_str_0x6E8E*)((Bit32u)D41A0_BYTESTR_0.struct_0x3654C[v4].str_36552_un.ptr0x6E8E + (Bit32u)v3);				
			}
		}
		v4++;
	}
	//2361fc
	for (i = 1; ; ++i)
	{
		//result = x_D41A0_BYTEARRAY_0;
		if (i > D41A0_BYTESTR_0.byte_0x36E00)
			break;
		v9 = D41A0_BYTESTR_0.array_0x365F4[i].str_0x3647A_byte_0;
		if (v9 >= 3u && (v9 <= 5u || v9 >= 8u && v9 <= 9u))
		{
			//v10 = x_D41A0_BYTEARRAY_0 + 8 * i;			
			if (!(D41A0_BYTESTR_0.array_0x365F4[i].str_0x3647A_byte_1 & 2))
			{
				//v11 = D41A0_BYTESTR_0.array_0x365F4[i].str_0x3647C_4.pointer_0x6E8E;
				//if (D41A0_BYTESTR_0.array_0x365F4[i].str_0x3647C_4.pointer_0x6E8E >= x_DWORD_EA3E4[0] && D41A0_BYTESTR_0.array_0x365F4[i].str_0x3647C_4.pointer_0x6E8E < x_DWORD_EA3E4[0x3e8])
				// FIXME: types
				// D41A0_BYTESTR_0.array_0x365F4[i].str_0x3647C_4.pointer_0x6E8E = (type_str_0x6E8E*)((Bit32u)D41A0_BYTESTR_0.array_0x365F4[i].str_0x3647C_4.pointer_0x6E8E+ (Bit32u)v3);
			}
		}
	}

	for (j = 1; j < 50; j++)
	{
		// FIXME: types
		// // if (D41A0_BYTESTR_0.str_0x3664C[j].byte_0)
		// 	D41A0_BYTESTR_0.str_0x3664C[j].dword_A = (type_str_0x6E8E*)((Bit32u)D41A0_BYTESTR_0.str_0x3664C[j].dword_A + (Bit32u)v3);//0x36656
	}
}

//----- (00055250) --------------------------------------------------------
char sub_55250(uint8_t a1, char* filenameindex)//236250 //in game save
{
	char v1; // bl
	int v4; // edi
	int v5; // edx
	long v6; // eax

	v5 = 0;

	//fix for saving
	for (int indexx = 1; x_DWORD_EA3E4[indexx] < x_DWORD_EA3E4[0x3e8]; indexx++)
		//if (memory_readable(x_DWORD_EA3E4[indexx]->dword_0xA4_164x,4))
	{
		if (x_DWORD_EA3E4[indexx]->dword_0xA4_164x == unk_F42B0x)//0x014F82E8//0x2c75e28-(Bit32u)&D41A0_BYTESTR_0
			x_DWORD_EA3E4[indexx]->dword_0xA4_164x = (type_str_164*)0x2c75e28;
	}
	//fix for saving

	v1 = 0;
	sprintf(printbuffer, "%c:%s/%s/%s%d%s.dat", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", "save", "SLEV", a1 + 1, filenameindex);
	// FIXME: types
	// D41A0_BYTESTR_0.dword_0x36DF6 = (x_DWORD)&unk_D7BD6[0x7d6];
	v4= D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393;
	v6 = j___clock();
	D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393 = v6 - D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393;
	
	if (sub_98C48_open_nwrite_close(printbuffer, (Bit8u*)&D41A0_BYTESTR_0, 224791) == 224791)
		v1 = 1;

	D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393 = v4;

	for (int indexx = 1; x_DWORD_EA3E4[indexx] < x_DWORD_EA3E4[0x3e8]; indexx++)
	{
		// FIXME: types
		// // if ((Bit32u)x_DWORD_EA3E4[indexx]->dword_0xA4_164x == 0x2c75e28)//0x014F82E8//0x2c75e28-(Bit32u)&D41A0_BYTESTR_0
		// 	x_DWORD_EA3E4[indexx]->dword_0xA4_164x = unk_F42B0x;
	}

	return v1;
}

//----- (00055320) --------------------------------------------------------
bool sub_55320_InGameSave(uint8_t a1, char* filenameindex)//236320 //file index added for develop
{
	FILE* savesmapfile; // eax
	size_t writedsize; // [esp+40h] [ebp-8h]

	#ifdef DEBUG_LOADSAVE
		debug_printf("InGameSave-begin\n");
	#endif //DEBUG_START

	sprintf(printbuffer, "%c:%s/%s/%s%d%s.dat", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", "save", "SMAP", a1 + 1, filenameindex);
	savesmapfile = sub_98817_open(printbuffer, 546);
	if (savesmapfile >= 0)
	{
		sub_98CAA_write(savesmapfile, (Bit8u*)x_BYTE_10B4E0_terraintype, 0x10000);
		sub_98CAA_write(savesmapfile, (Bit8u*)x_BYTE_11B4E0_height, 0x10000);
		sub_98CAA_write(savesmapfile, (Bit8u*)x_BYTE_12B4E0_shading, 0x10000);
		sub_98CAA_write(savesmapfile, (Bit8u*)x_BYTE_13B4E0_angle, 0x10000);
		sub_98CAA_write(savesmapfile, (Bit8u*)x_BYTE_14B4E0, 0x10000);
		sub_98CAA_write(savesmapfile, (Bit8u*)x_WORD_15B4E0_source, 0x20000);
		writedsize = sub_98CAA_write(savesmapfile, (Bit8u*)x_BYTE_F2CD0x, 4802) != 4802;
		sub_98882_close(savesmapfile);
		//v6 = v5 == 0;
	}
#ifdef DEBUG_LOADSAVE
		debug_printf("InGameSave-end-%d\n", writedsize);
#endif //DEBUG_START
		return (writedsize == 0);
}

//----- (00055450) --------------------------------------------------------
char sub_55450(uint8_t a1, int a2, char* filenameindex)//236450 //fileindex added for developing
{
	char v2; // bl
	//char v4; // [esp+0h] [ebp-48h]
	int v5[2]; // [esp+40h] [ebp-8h]
	//int v6; // [esp+44h] [ebp-4h]

	v5[1] = a2;
	v5[0] = 15;
	v2 = 0;
	sprintf(printbuffer, "%c:%s/%s/%s%d%s.dat", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", "save", "SVER", a1 + 1, filenameindex);
	if (sub_98C48_open_nwrite_close(printbuffer, (Bit8u*)v5, 8) == 8)
		v2 = 1;
	return v2;
}

//----- (000555D0) --------------------------------------------------------
char sub_555D0(Bit8u fileindex, int levelindex)//2365d0
{
	char v2; // bl
	int v9; // [esp+0h] [ebp-34h]
	int v10; // [esp+4h] [ebp-30h]
	int v11; // [esp+8h] [ebp-2Ch]
	int v12; // [esp+Ch] [ebp-28h]
	type_str_0x218A v13; // [esp+10h] [ebp-24h]
	type_str_0x218E v14; // [esp+14h] [ebp-20h]
	type_str_0x2192 v15; // [esp+18h] [ebp-1Ch]
	type_str_0x2196 v16; // [esp+1Ch] [ebp-18h]
	type_str_0x21AA v17; // [esp+20h] [ebp-14h]
	type_str_0x21AE v18; // [esp+24h] [ebp-10h]
	type_str_0x21B2 v19; // [esp+28h] [ebp-Ch]
	type_str_0x21B6 v20; // [esp+2Ch] [ebp-8h]

	v2 = 0;
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
	{
		v13 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A;
		v14 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E;
		v15 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x2192;
		v16 = D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196;
		v9 = D41A0_BYTESTR_0.dword_0x219A;
		v10 = D41A0_BYTESTR_0.dword_0x219E;
		v11 = D41A0_BYTESTR_0.dword_0x21A2;
		v12 = D41A0_BYTESTR_0.dword_0x21A6;
		v17 = D41A0_BYTESTR_0.str_0x21AA;
		v18 = D41A0_BYTESTR_0.str_0x21AE;
		v19 = D41A0_BYTESTR_0.str_0x21B2;
		v20 = D41A0_BYTESTR_0.str_0x21B6;
		v2 = sub_55750_TestSaveFile(fileindex, levelindex);

		if (v2)
		{
			v2 = sub_558E0_InGameLoad(fileindex);
			if (v2)
			{
				qmemcpy(
					&x_D41A0_BYTEARRAY_4_struct.byteindex_256ar,
					&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc],
					0x84Cu);
				v2 = sub_55A10(fileindex);
				if (v2)
				{
					sub_55100(2);
					sub_57680_FixPointersAfterLoad();
					sub_549A0(&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.str_611, &x_D41A0_BYTEARRAY_4_struct.byteindex_256ar.dword_0x3E6_2BE4_12228.str_611);
					sub_49F90();
					D41A0_BYTESTR_0.dword_0x11e6 = -1;
					sub_55AB0(D41A0_BYTESTR_0.word_0xc, &D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc]);
					sub_71990();
					sub_473B0();
				}
			}
		}
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A=v13;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E=v14;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x2192=v15;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196=v16;
		D41A0_BYTESTR_0.dword_0x219A=v9;
		D41A0_BYTESTR_0.dword_0x219E=v10;
		D41A0_BYTESTR_0.dword_0x21A2=v11;
		D41A0_BYTESTR_0.dword_0x21A6=v12;
		D41A0_BYTESTR_0.str_0x21AA=v17;
		D41A0_BYTESTR_0.str_0x21AE=v18;
		D41A0_BYTESTR_0.str_0x21B2=v19;
		D41A0_BYTESTR_0.str_0x21B6=v20;
	}
	return v2;
}

//----- (00055750) --------------------------------------------------------
Bit8u sub_55750_TestSaveFile(Bit8u fileindex, int levelindex)//236750 //load in game
{
	FILE* saveslevfile; // eax
	int v4; // eax
	bool v5; // bl
	Bit32u filesize2; // edi
	FILE* savesmapfile; // eax
	Bit32u filesize; // esi
	Bit8u result; // [esp+50h] [ebp-4h]

	result = 0;
	sprintf(printbuffer, "%c:%s/%s/%s%d.dat", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", "save", "SVER", fileindex + 1);
	if (sub_53E60_readfile_and_decompress(printbuffer, &readbuffer) == 8 && *(Bit32u*)&readbuffer[4] == levelindex && *(Bit32u*)&readbuffer[0] == 0xf)
	{
		sprintf(printbuffer, "%c:%s/%s/%s%d.dat", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", "save", "SLEV", fileindex + 1);
		saveslevfile = sub_98817_open(printbuffer, 512);
		//v3 = saveslevfile;
		if (saveslevfile >= 0)
		{
			v4 = sub_988A7_read(saveslevfile, readbuffer, 8);
			v5 = v4 != 8;
			if (v4 == 8 && *(Bit32u*)&readbuffer[4] != D41A0_BYTESTR_0.dword_0x4)
				v5 = 1;
			filesize2 = x_filelength(saveslevfile);
			sub_98882_close(saveslevfile);
			if (filesize2 == 224791 && !v5)
			{
				sprintf(printbuffer, "%c:%s/%s/%s%d.dat", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", "save", "SMAP", fileindex + 1);
				savesmapfile = sub_98817_open(printbuffer, 512);
				//v8 = v7;
				if (savesmapfile >= 0)
				{
					filesize = x_filelength(savesmapfile);
					sub_98882_close(savesmapfile);
					if (filesize == 0x712C2)
						result = 1;
				}
			}
		}
	}
	return result;
}

//----- (000558E0) --------------------------------------------------------
bool sub_558E0_InGameLoad(Bit8u fileindex)//2368e0
{
	FILE* loadfile; // eax
	int truesize =0; // [esp+40h] [ebp-8h]

	#ifdef DEBUG_LOADSAVE
		debug_printf("InGameLoad-begin\n");
	#endif //DEBUG_START

	//fix 
	x_D41A0_BYTEARRAY_4_struct.dword_38519 = x_DWORD_EA3E4[1];
	//fix
	
	debugafterload = 1;
	x_D41A0_BYTEARRAY_4_struct.setting_30 = 0x3d;//fix same run after load
	x_WORD_17B4E0=0x21ed;//fix random variable for debugging

	//v6 = 0;
	sprintf(printbuffer, "%c:%s/%s/%s%d.dat", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", "save", "SMAP", fileindex + 1);
	loadfile = sub_98817_open(printbuffer, 512);
	//v2 = v1;
	if (loadfile >= 0)
	{
		sub_988A7_read(loadfile, (Bit8u*)x_BYTE_10B4E0_terraintype, 0x10000);
		sub_988A7_read(loadfile, (Bit8u*)x_BYTE_11B4E0_height, 0x10000);
		sub_988A7_read(loadfile, (Bit8u*)x_BYTE_12B4E0_shading, 0x10000);
		sub_988A7_read(loadfile, (Bit8u*)x_BYTE_13B4E0_angle, 0x10000);
		sub_988A7_read(loadfile, (Bit8u*)x_BYTE_14B4E0, 0x10000);
		sub_988A7_read(loadfile, (Bit8u*)x_WORD_15B4E0_source, 0x20000);
		truesize = sub_988A7_read(loadfile, (Bit8u*)x_BYTE_F2CD0x, 4802) == 4802;
		sub_98882_close(loadfile);
		
	
		//v6 = v5 == 0;
		if (truesize) { 
			#ifdef DEBUG_LOADSAVE
						debug_printf("InGameLoad-end-ok\n");
			#endif //DEBUG_START
			return 1; 
		}
	}
	#ifdef DEBUG_LOADSAVE
		debug_printf("InGameLoad-end-error\n");
	#endif //DEBUG_START
	return 0;
}

//----- (00055A10) --------------------------------------------------------
char sub_55A10(uint8_t a1)//236a10
{
	char v1; // bl
	int v2; // edx

	v2 = 0;

	v1 = 0;
	sprintf(printbuffer, "%c:%s/%s/%s%d.dat", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", "save", "SLEV", a1 + 1);
	Bit8u* D41A0_pointer;
	D41A0_pointer= (Bit8u*)&D41A0_BYTESTR_0;
	if (sub_53E60_readfile_and_decompress(printbuffer, &D41A0_pointer) == 224791)
	{
		D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393 = j___clock() - D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393;
		v1 = 1;
	}

	return v1;
}

//----- (00055AB0) --------------------------------------------------------
void sub_55AB0(int a1, type_str_0x2BDE* a2x)//236ab0
{
	type_str_0x6E8E* resultx; // eax
	signed int v3; // esi
	type_str_0x6E8E* v4x; // edi
	int v5; // edx
	//Bit8u* v6; // ST0C_4
	//int v7; // edx
	type_str_0x6E8E* v8x; // ST08_4
	int v9; // edx
	int v10; // edx
	//int v11; // [esp+4h] [ebp-8h]

	//fix
	resultx = 0;
	//fix

	//result = (Bit8u*)*(uint16_t *)(a2 + 10);
	v3 = 0;
	v4x = x_DWORD_EA3E4[a2x->word_0x00a_2BE4_11240];
	while (v3 < 26)
	{
		v5 = x_BYTE_D94FF_spell_index[v3];
		//result = a2 + v5;
		if (a2x->dword_0x3E6_2BE4_12228.str_611.array_0x3E9_1001x.byte[v5] || a2x->dword_0x3E6_2BE4_12228.str_611.array_0x403_1027x.byte[v5])
		{
			//result = 2 * v5;
			//v11 = a2 + 2 * v5;			
			if (!a2x->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[v5])
			{
				resultx = sub_4A190(&v4x->array_0x4C_76, 15, v5);
				if (resultx)
				{
					a2x->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[v5] = resultx - D41A0_BYTESTR_0.struct_0x6E8E;
					resultx->word_0x28_40 = v4x - D41A0_BYTESTR_0.struct_0x6E8E;
					resultx->struct_byte_0xc_12_15.byte[0] |= 1u;					
					/*LOBYTE(result) = */sub_6D5E0(resultx, a2x->dword_0x3E6_2BE4_12228.str_611.array_0x437_1079x.byte[v5]);
				}
			}
		}
		else
		{
			//v7 = a2 + 2 * v5;
			//LOWORD(result) = *(x_WORD *)(v7 + 1817);
			if (a2x->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[v5])
			{
				v8x = x_DWORD_EA3E4[a2x->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[v5]];
				a2x->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[v5] = 0;
				/*result = */sub_57F20(v8x);
			}
		}
		v3++;
	}	
	v9 = a2x->dword_0x3E6_2BE4_12228.str_611.word_0x451_1105;
	if (v9 != -1 && !a2x->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[v9])
		a2x->dword_0x3E6_2BE4_12228.str_611.word_0x451_1105 = -1;
	v10 = a2x->dword_0x3E6_2BE4_12228.str_611.word_0x453_1107;
	if (v10 != -1 && !a2x->dword_0x3E6_2BE4_12228.str_611.array_0x333_819x.word[v10])
		a2x->dword_0x3E6_2BE4_12228.str_611.word_0x453_1107 = -1;
	//return result;
}

//----- (00055C00) --------------------------------------------------------
char sub_55C00(int16_t a1)//236c00
{
	return sub_55750_TestSaveFile(0, a1);
}

//----- (00055C60) --------------------------------------------------------
void sub_55C60(/*int a1, int a2, */type_str_0x2BDE* a3x)//236c60
{
	int v4; // eax
	int16_t v5; // ax
	char v7; // cl
	int16_t v9; // ax
	uint8_t v10; // ch
	char v11; // dl
	int16_t v12; // ax
	int16_t v13; // dx
	signed int v14; // [esp+0h] [ebp-4h]

	v14 = 0;
	int a1 = 0;
	int a2 = 0;

	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1))
	{
		v4 = abs(a3x->dword_0x3E6_2BE4_12228.word_0x155_341);
		if ((uint8_t)(a3x->byte_0x846_2BDE - 1) <= 6u)
			//JUMPOUT(__CS__, (int*) *(&off_55C38 + (uint8_t)(*(x_BYTE *)(a3 + 2118) - 1)));
			switch ((uint8_t)(a3x->byte_0x846_2BDE - 1)) {
			case 0: //loc_55CB2
			case 1: {//loc_55CB2
				a2 = 1;
				a1 = -2;
				v14 = 1024;
				break;
			}
			case 2: {//loc_55CEB
				a2 = 1;
				v14 = v4 + 2048;
				a1 = 1;
				break;
			}	
			case 3: {//loc_55CC3
				a2 = 1;
				a1 = -2;
				v14 = v4 + 2116;
				break;
			}
			case 4: {//loc_55CF7
				a2 = -1;
				a1 = 3;
				v14 = v4 + 2048;
				break;
			}
			case 5: {//loc_55CD7
				a2 = -1;
				a1 = -4;
				v14 = v4 + 2013;
				break;
			}
			case 6: {//loc_55D03
				a2 = 1;
				a1 = 5;
				v14 = v4 + 2048;
				break;
			}
			}
		if (a3x->byte_0x846_2BDE == 1)
		{
			if (a3x->dword_0x3E6_2BE4_12228.word_0x155_341 >= 0)
				a3x->byte_0x847_2BDE = 1;
			else
				a3x->byte_0x847_2BDE = -1;
			v5 = abs(a3x->dword_0x3E6_2BE4_12228.word_0x155_341);
			a3x->word_0x84A_2BDE = 91;
			//v6 = (int)x_D41A0_BYTEARRAY_4;
			v7 = a3x->byte_0x846_2BDE;
			a3x->word_0x848_2BDE = v5;
			//v8 = x_WORD_E3760_mouse.x;
			a3x->byte_0x846_2BDE = v7 + 1;
			x_D41A0_BYTEARRAY_4_struct.byteindex_220 = x_WORD_E3760_mouse.x;
			sub_55EB0(a3x->word_0x00a_2BE4_11240);
		}
		a3x->word_0x848_2BDE += a2 * a3x->word_0x84A_2BDE;
		if (a1)
		{
			v9 = (short)(a1 + a3x->word_0x84A_2BDE);
			a3x->word_0x84A_2BDE = v9;
			if (v9 < 11)
				a3x->word_0x84A_2BDE = 11;
			if (a3x->word_0x84A_2BDE > 68)
				a3x->word_0x84A_2BDE = 68;
		}
		if (a2 > 0 && a3x->word_0x848_2BDE >= v14 || a2 < 0 && a3x->word_0x848_2BDE <= v14)
		{
			v10 = a3x->byte_0x846_2BDE + 1;
			a3x->byte_0x846_2BDE = v10;
			if (v10 > 3u)
				a3x->word_0x84A_2BDE >>= 1;
		}
		if (a3x->byte_0x846_2BDE >= 4u)
		{
			if (abs(x_WORD_E3760_mouse.x - x_D41A0_BYTEARRAY_4_struct.byteindex_220) > 16)
				a3x->byte_0x846_2BDE = 8;
			x_D41A0_BYTEARRAY_4_struct.byteindex_220 = x_WORD_E3760_mouse.x;
		}
		v11 = a3x->byte_0x846_2BDE;
		a3x->dword_0x3E6_2BE4_12228.word_0x4_4 = 0;
		if (v11 == 8)
		{
			/*result = */sub_55EB0(a3x->word_0x00a_2BE4_11240);
			a3x->byte_0x846_2BDE = 0;
		}
		else
		{
			v12 = a3x->word_0x848_2BDE * a3x->byte_0x847_2BDE;
			HIBYTE(v12) &= 7u;
			v13 = v12;
			//result = *(uint16_t *)(a3 + 16) - 1;
			//*(x_WORD *)(a3 + 14 * (a3x->word_0x010_2BDE_11246 - 1) + 489) = v13;
			a3x->struct_0x1d1_2BDE_11695[a3x->word_0x010_2BDE_11246].rotation__2BDE_11701.aa=v13;
		}
	}
	//return result;
}

//----- (00055EB0) --------------------------------------------------------
void sub_55EB0(int16_t a1)//236eb0
{
	unsigned int index; // eax
	type_str_0x6E8E* ix; // edx

	index = 0;
	do
	{
		if (index < 0xC)
		{
			if (index == 1)
				goto LABEL_13;
		}
		else if (index <= 0xF || index >= 0x16 && index <= 0x17)
		{
			goto LABEL_13;
		}
		for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[index]; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (ix->word_0x96_150 == a1)
				ix->word_0x96_150 = 0;
		}
	LABEL_13:
		index++;
	} while ((signed int)index < 29);
	//return result;
}

void (*null_vector)() {

};

void write_pngs()
{
	Bit8u buffer[10000];
	char outname[512];

	for (int k = 0; k < 100; k++)
	{
		posistruct actposistruct = xy_DWORD_17DED4_spritestr[k];
		if (actposistruct.width > 0)
		{

			for (int i = 0; i < 10000; i++) {
				buffer[i] = 0xff;
			}

			//posistruct actposistruct = *filearray_2aa18c[0]._posistruct[1];		

			Bit8u* temp_screen = x_DWORD_180628b_screen_buffer;
			int temp_screen_x = x_DWORD_18062C_resolution_x;

			x_DWORD_18062C_resolution_x = actposistruct.width;
			x_DWORD_180628b_screen_buffer = buffer;

			sub_8F935_bitmap_draw_final(actposistruct.width, actposistruct.height, 0, 0, actposistruct.data, 0, 0);

			x_DWORD_180628b_screen_buffer = temp_screen;
			x_DWORD_18062C_resolution_x = temp_screen_x;

			sprintf(outname, "c:\\prenos\\remc2\\outimg\\test-%d.png", k);
			write_posistruct_to_png(buffer, actposistruct.width, actposistruct.height, outname);//test write
		}
	}
}


//----- (00055F70) --------------------------------------------------------
int sub_main(int argc, char **argv, char **envp)//236F70
{
	begin_plugin();

	*xadataclrd0dat.var28_begin_buffer = (Bit8u*)malloc(4096);//fix it

	signed int v3; // edi
	uint16_t v4; // si

	//fix it
	v3 = 0;
	v4 = 0;
	//fix it

	// init
	file_handling = std::make_unique<FileHandling>();
	readini(file_handling->getExePath() /  "config.ini");
	// get env for gamepath
	if (auto path = std::getenv("MAGICCARPET2_GAMEPATH"))
		gamepath = path;
	file_handling->setGamePath(gamepath);
	file_handling->initDirsAndFiles();

	VGA_Init();

	initposistruct();

	sub_56210_process_command_line(argc, argv);//236FD4 - 237210
	//-init 0x2a51a4 je nekde tu
#ifdef COPY_SKIP_CONFIG
	x_BYTE_D41AD_skip_screen = config_skip_screen;
#endif COPY_SKIP_CONFIG
 	sub_5B8D0_initialize();//236FDC - 23C8D0//rozdil 1E1000
	
	sub_46830_main_loop(/*0, */v3, v4);//227830
	sub_5BC20();//23CC20 //remove devices?
	sub_56730_clean_memory();//237730
	return 0;
}

//----- (00056210) --------------------------------------------------------
void sub_56210_process_command_line(int argc, char** argv)//237210
{
	Bit32s x_DWORD_355208;//3551CE+3A DWORD
	x_BYTE x_BYTE_355234_hardisknumber;//harddrive//3551CE+66 BYTE
	x_BYTE x_BYTE_35520C;//3551CE+3e BYTE
	x_BYTE x_BYTE_355210_level;//3551CE+42 BYTE
	x_BYTE x_BYTE_355230;//3551CE+62 BYTE
	x_BYTE x_BYTE_355218;//3551CE+4a BYTE
	x_BYTE x_BYTE_355244_spellsedit;//aSpellsedit//3551CE+76 BYTE
	x_BYTE x_BYTE_355240_load_set_level;//3551CE+72 BYTE
	x_BYTE x_BYTE_35522C_nocd;//nocd//3551CE+5e BYTE
	x_BYTE x_BYTE_355224_showversion;//Showversion//3551CE+56 BYTE
	x_BYTE x_BYTE_355228_showversion2;//Showversion2//3551CE+5a BYTE
	x_BYTE x_BYTE_355214;//3551CE+46 BYTE
	x_BYTE x_BYTE_35521C_cc;//3551CE+4e BYTE
	x_BYTE x_BYTE_35523C_detectoff;//Detectoff//3551CE+6e BYTE
	x_BYTE x_BYTE_355220_langcheck;//Langcheck//3551CE+52 BYTE
	x_BYTE x_BYTE_355238_music2;//aMusic2//3551CE+6a BYTE

	Bit8u argnumber; // ebx
	char arg0; // dl
	char* v4; // edi
	char* v5; // esi
	//char v6; // al
	//char v7; // al
	//uint8_t v8; // al
	//int v9; // ebx
	//char* v10; // esi
	//int result; // eax
	char actarg[512]="\0"; // [esp+0h] [ebp-46h]
	//int v13; // [esp+80h] [ebp+3Ah]
	//char v14; // [esp+84h] [ebp+3Eh]
	//uint8_t v15; // [esp+88h] [ebp+42h]
	//char v16; // [esp+8Ch] [ebp+46h]
	//char v17; // [esp+90h] [ebp+4Ah]
	//char v18; // [esp+94h] [ebp+4Eh]
	//char v19; // [esp+98h] [ebp+52h]
	//char v20; // [esp+9Ch] [ebp+56h]
	//char v21; // [esp+A0h] [ebp+5Ah]
	//char v22; // [esp+A4h] [ebp+5Eh]
	//char v23; // [esp+A8h] [ebp+62h]
	//uint8_t v24; // [esp+ACh] [ebp+66h]
	//char v25; // [esp+B0h] [ebp+6Ah]
	//char v26; // [esp+B4h] [ebp+6Eh]
	//char v27; // [esp+B8h] [ebp+72h]
	//char v28; // [esp+BCh] [ebp+76h]
	//fix it:
	argnumber = 1;
	x_DWORD_355208/* v13*/ = -1;//3551CE+3A DWORD //355208
	x_BYTE_355234_hardisknumber/*v24*/ = 'C';//harddrive//3551CE+66 BYTE
	x_BYTE_35520C/*v14*/ = 0;//3551CE+3e BYTE
	x_BYTE_355210_level/*v15*/ = 0;//3551CE+42 BYTE
	x_BYTE_355230/*v23*/ = 0;//3551CE+62 BYTE
	x_BYTE_355218/*v17*/ = 0;//3551CE+4a BYTE
	x_BYTE_355244_spellsedit/*v28*/ = 0;//aSpellsedit//3551CE+76 BYTE
	x_BYTE_355240_load_set_level/*v27*/ = 0;//3551CE+72 BYTE
	x_BYTE_35522C_nocd/*v22*/ = 0;//nocd//3551CE+5e BYTE
	x_BYTE_355224_showversion/*v20*/ = 0;//Showversion//3551CE+56 BYTE
	x_BYTE_355228_showversion2/*v21*/ = 0;//Showversion2//3551CE+5a BYTE
	x_BYTE_355214/*v16*/ = 0;//3551CE+46 BYTE
	x_BYTE_35521C_cc/*v18*/ = 0;//3551CE+4e BYTE
	x_BYTE_35523C_detectoff/*v26*/ = 0;//Detectoff//3551CE+6e BYTE
	x_BYTE_355220_langcheck/*v19*/ = 0;//Langcheck//3551CE+52 BYTE
	x_BYTE_355238_music2/*v25*/ = 0;//aMusic2//3551CE+6a BYTE
	sub_89B60_aplicate_setting(7u);
	while (argnumber < argc)
	{
		arg0 = argv[argnumber][0];// **(x_BYTE **)((int)argv + 4 * v2);
		if (arg0 == '-' || arg0 == '/')
		{
			v4 = actarg;
			v5 = argv[argnumber] + 1;//(char *)(*(x_DWORD *)((int)argv + 4 * v2) + 1);
			strcpy(v4, v5);
			/*do
			{
				//v6 = v5[0];
				v4[0] = v5[0];
				if (!v4[0])
					break;
				//v7 = v5[1];
				v5 += 2;
				v4[1] = v7;
				v4 += 2;
			} while (v7);*/
		}
		if (_stricmp("network", (char*)actarg))
		{
			if (!_stricmp("editor", (char*)actarg))
			{
				config_EDITOR = true;
			}
			else
			if (!_stricmp("testlevel", (char*)actarg))
			{
				config_LOAD_EDITED_LEVEL = true;
			}
			else

			if (!_stricmp("level", (char*)actarg))
			{
				x_BYTE_355210_level = atoi(argv[++argnumber]/* *(char**)((int)argv + 4 * ++v2)*/);//2372C4 - 279F5D
				x_BYTE_D419C_level_num = x_BYTE_355210_level;
				x_BYTE_355240_load_set_level = 1;
			}
			else if (!_stricmp("harddrive", (char*)actarg))
			{
				x_BYTE_355234_hardisknumber = x_toupper(argv[++argnumber][0]);//**(x_BYTE **)((int)argv + 4 * ++v2);
				//x_BYTE_355234_hardisknumber = x_toupper(x_BYTE_355234_hardisknumber);
			  //x_BYTE_355234_hardisknumber = v8;
				if (x_BYTE_355234_hardisknumber < 'A' || x_BYTE_355234_hardisknumber > 'Z')
					x_BYTE_355234_hardisknumber = 'C';
			}
			else if (!_stricmp("skipscreens", (char*)actarg))
			{
				x_BYTE_D41AD_skip_screen = 1;
			}
			else if (!_stricmp("nocd", (char*)actarg))
			{
				x_BYTE_35522C_nocd = 1;
			}
			else if (!_stricmp("showversion", (char*)actarg))
			{
				x_BYTE_355224_showversion = 1;
			}
			else if (!_stricmp("showversion2", (char*)actarg))
			{
				x_BYTE_355228_showversion2 = 1;
			}
			else if (!_stricmp("detectoff", (char*)actarg))
			{
				x_BYTE_35523C_detectoff = 1;
			}
			else if (!_stricmp("langcheck", (char*)actarg))
			{
				x_BYTE_355220_langcheck = 1;
			}
			else if (!_stricmp("vio", (char*)actarg))
			{
				//v9 = argnumber + 1;
				//v10 = argv[argnumber + 1];//*(x_DWORD *)((int)argv + 4 * v9);

				unk_18058Cstr.x_WORD_1805C4_vio1_analog_joy = atoi(argv[argnumber + 1]);
				argnumber += 2;
				unk_18058Cstr.x_WORD_1805C6_vio2_analog_joy = atoi(argv[argnumber]/* *(char**)((int)argv + 4 * v2)*/);
				sub_89B60_aplicate_setting(1u);
			}
			else if (!_stricmp("extern", (char*)actarg))
			{
				x_DWORD_E36C4 = atoi(argv[++argnumber]/* *(char **)((int)argv + 4 * ++v2)*/);
				myprintf("External ctrl at %ul\n");
				sub_89B60_aplicate_setting(6u);
			}
			else if (!_stricmp("VFX1", (char*)actarg))
			{
				sub_89B60_aplicate_setting(2u);
			}
			else if (!_stricmp("cc", (char*)actarg))
			{
				x_BYTE_35521C_cc = atoi(argv[++argnumber]/* *(char**)((int)argv + 4 * ++v2)*/);
			}
			else if (!_stricmp("spellsedit", (char*)actarg))
			{
				x_BYTE_355244_spellsedit = 1;
			}
			else if (!_stricmp("music2", (char*)actarg))
			{
				x_BYTE_355238_music2 = 1;
			}
		}
		argnumber++;
	}
	if (!x_BYTE_35522C_nocd)//if cd
		sub_86A00_some_allocs();//fix it -not at now
	//x_D41A0_BYTEARRAY_0 = (Bit8u*)malloc(0x36e17);//2A51A0
	/*if (!x_D41A0_BYTEARRAY_0)
	{
		myprintf("ERROR: CANT ALLOC CARPET MEMORY.");
		exit(-1);
	}*/

	/*x_D41A0_BYTEARRAY_4 = (Bit8u*)malloc(0x9693);
	if (!x_D41A0_BYTEARRAY_4)
	{
		sub_83E80_freemem4(x_D41A0_BYTEARRAY_0);
		myprintf("ERROR: CANT ALLOC TAPE MEMORY.");
		exit(-1);
	}*/

	/*memset((void*)x_D41A0_BYTEARRAY_0[0], 0, 224791);
	memset((void*)x_DWORD_D41A4, 0, 38547);*/
	memset((void*)&D41A0_BYTESTR_0, 0, sizeof(D41A0_BYTESTR_0));
	//clean_x_D41A0_BYTEARRAY_0();
	
	//memset((void*)x_D41A0_BYTEARRAY_4, 0, 0x9693);

	if (x_BYTE_35520C)
	{
		x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 |= 0x8;
		x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 |= 0x8;
	}
	if (x_BYTE_355230)
		x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 |= 2u;
	if (x_BYTE_355218)
		x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 |= 8u;
	if (x_BYTE_355244_spellsedit)
		x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 |= 0x10u;
	if (!x_BYTE_35522C_nocd && x_BYTE_E2A28_speek)
		x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 |= 0x40u;
	if (x_BYTE_355240_load_set_level)
		x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 |= 0x80u;
	if (x_BYTE_355214)
		x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 |= 2u;
	if (x_BYTE_355224_showversion)
		x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 |= 8u;
	if (x_BYTE_355220_langcheck)
		x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 |= 0x10u;
	if (x_BYTE_355238_music2)
		x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 |= 0x40u;
	if (x_BYTE_35523C_detectoff)
		x_BYTE_E379B = 1;
	//result = x_D41A0_BYTEARRAY_4;
	x_D41A0_BYTEARRAY_4_struct.levelnumber_43w = x_BYTE_355210_level;
	x_D41A0_BYTEARRAY_4_struct.setting_45w = x_DWORD_355208;
	x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182 = x_BYTE_355234_hardisknumber;
	if (x_BYTE_35521C_cc)
		x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 = (x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 | 4) & 0xFD;
	if (x_BYTE_355228_showversion2)
	{
		sub_70890_print_header();
		sub_5BC20();
		exit(1);
	}
	//return (int)x_D41A0_BYTEARRAY_4;
}

//----- (00056730) --------------------------------------------------------
int sub_56730_clean_memory()//237730
{
	return sub_8B5A0();
}

//----- (000567C0) --------------------------------------------------------
void sub_567C0()//2377c0 // clean level
{
	memset(D41A0_BYTESTR_0.array_0x10, 0, 29);
	D41A0_BYTESTR_0.dword_0x2d = 0;
	D41A0_BYTESTR_0.word_0x31 = 0;
	D41A0_BYTESTR_0.word_0x33 = 0;
	D41A0_BYTESTR_0.dword_0x35=0;
	D41A0_BYTESTR_0.byte_0x239 = 0;
	memset(&D41A0_BYTESTR_0.str_0x364D2, 0, sizeof(D41A0_BYTESTR_0.str_0x364D2));
	memset(&D41A0_BYTESTR_0.array_0x2362, 0, sizeof(D41A0_BYTESTR_0.array_0x2362));
	memset(D41A0_BYTESTR_0.struct_0x6E8E, 0, 168000);

	memset((void*)(&x_D41A0_BYTEARRAY_4_struct.byteindex_51), 0, 1);
	memset((void*)(x_D41A0_BYTEARRAY_4_struct.byteindex_121), 0, 16);
	memset((void*)(&x_D41A0_BYTEARRAY_4_struct.byteindex_178), 0, 1);
	memset((void*)(&x_D41A0_BYTEARRAY_4_struct.byteindex_180), 0, 1);
	memset((void*)(x_D41A0_BYTEARRAY_4_struct.byteindex_242ar), 0, 14);
	memset((void*)(x_D41A0_BYTEARRAY_4_struct.bytearray_38403x), 0, 116);
	memset((void*)(&x_D41A0_BYTEARRAY_4_struct.dword_38519), 0, 4);
	memset((void*)(&x_D41A0_BYTEARRAY_4_struct.dword_38523), 0, 4);
	memset((void*)(&x_D41A0_BYTEARRAY_4_struct.dword_38527), 0, 4);
	memset((void*)(&x_D41A0_BYTEARRAY_4_struct.dword_38531), 0, 4);
	memset((void*)(&x_D41A0_BYTEARRAY_4_struct.dword_38535), 0, 4);
	memset((void*)x_WORD_15B4E0_source, 0, 0x20000);
	memset((void*)x_BYTE_10B4E0_terraintype, 0, 0x10000);
	memset((void*)x_BYTE_11B4E0_height, 0, 0x10000);
	memset((void*)x_BYTE_12B4E0_shading, 0, 0x10000);
	memset((void*)x_BYTE_13B4E0_angle, 0, 0x10000);
	memset((void*)x_DWORD_E9C38_smalltit, 0, 0xfa00);
	x_D41A0_BYTEARRAY_4_struct.setting_30 = 0;
	x_D41A0_BYTEARRAY_4_struct.byteindex_26 = 0;
	x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 &= 0xFFFE3FFF;
}

int debugcounter_237a30 = 0;

//----- (00056A30) --------------------------------------------------------
void sub_56A30_init_game_level(unsigned int a1)//237a30
{
	char temp_x_BYTE_E3799_sound_card; // bl

#ifdef MOUSE_OFF
	mouseturnoff = true;
#endif

#ifdef SET_LEVEL
	x_D41A0_BYTEARRAY_4_struct.levelnumber_43 = 1;
#endif

	sub_6EB90(&filearray_2aa18c[filearrayindex_BUILD00DATTAB]);//24fb90 adress 0x23ca2e

	temp_x_BYTE_E3799_sound_card = x_BYTE_E3799_sound_card;
	x_BYTE_E3799_sound_card = 0;
	sub_567C0();
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 8))
	{
		sub_70910_print_string((char*)"Load Level\0");
		sub_533B0_decompress_levels(x_D41A0_BYTEARRAY_4_struct.levelnumber_43w, &D41A0_BYTESTR_0.str_2FECE);
	}
	sub_54660_read_and_decompress_sky_and_blocks(D41A0_BYTESTR_0.str_2FECE.byte_level_type, x_BYTE_D41B5_texture_size);//235660
	sub_54800_read_and_decompress_tables(D41A0_BYTESTR_0.str_2FECE.byte_level_type);//235800

	//if exist editor generated level
#ifdef LOAD_EDITED_LEVEL
	if (config_LOAD_EDITED_LEVEL) {
		char path2[512];
		FixDir(path2, (char*)"editor\\testsave.sav");
		FILE* file = fopen(path2, "rb");
		if (file)
			fread(&D41A0_BYTESTR_0.str_2FECE, sizeof(D41A0_BYTESTR_0.str_2FECE), 1, file);
		fclose;
	}
#endif LOAD_EDITED_LEVEL
	//if exist editor generated level
	
	//237ab3
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
		//*(x_WORD *)(x_D41A0_BYTEARRAY_0 + 14) = *(x_WORD *)(x_D41A0_BYTEARRAY_0 + 196311);
		D41A0_BYTESTR_0.word_0xe=D41A0_BYTESTR_0.str_2FECE.word_0x2FED7;
	sub_70910_print_string((char*)"Generate map\0");
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 4))
		sub_43830_generate_level_map(a1, &D41A0_BYTESTR_0.str_2FECE);
	sub_49F30();//prepare events pointers

	//237B05
	
	sub_70910_print_string((char*)"Generate features\0");
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 4))
		sub_49270_generate_level_features(&D41A0_BYTESTR_0.str_2FECE);
	sub_70910_print_string((char*)"Initialise Models\0");
	memset(&x_WORD_EB398ar, 0, 6);
	sub_49F90();

	//adress 237B55

	D41A0_BYTESTR_0.dword_0x11e6 = -1;	
	sub_71A70_setTmaps(D41A0_BYTESTR_0.str_2FECE.byte_level_type);
	//adress 237b75
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 4))
	{
		sub_58940(/*&x_D41A0_BYTEARRAY_0[196302]*/);
		sub_11EE0(/*&x_D41A0_BYTEARRAY_0[196302]*/);
		sub_84790();
	}
	//adress 237BB0

	#ifdef SET_OBJECTIVE
		D41A0_BYTESTR_0.struct_0x3659C[0].array_0x3659C_byte[0 + 3] = 2;
		D41A0_BYTESTR_0.struct_0x3659C[0].array_0x3659C_byte[1 + 3] = 2;
		D41A0_BYTESTR_0.struct_0x3659C[0].array_0x3659C_byte[2 + 3] = 2;
		D41A0_BYTESTR_0.struct_0x3659C[0].array_0x3659C_byte[3 + 3] = 2;
		//D41A0_BYTESTR_0.struct_0x3659C[0].array_0x3659C_byte[4 + 3] = 2;
		D41A0_BYTESTR_0.struct_0x3659C[0].array_0x3659C_byte[1] = 4;
		//D41A0_BYTESTR_0.struct_0x3654C[0].str_3654E_word2 = 40;
		//D41A0_BYTESTR_0.struct_0x3654C[0].str_36550_word4 = 40;
	#endif


	sub_4A1E0(0, 1);
	//adress 237bb9
	x_BYTE_E3799_sound_card = temp_x_BYTE_E3799_sound_card;
	sub_53160();
	//adress 237bc7
	//adress 237beb

	sub_60F00();

	//fix
	//x_WORD_180660_VGA_type_resolution = saved_x_WORD_180660_VGA_type_resolution;
	//fix

}

//----- (00056C00) --------------------------------------------------------
void sub_56C00_sound_proc2(type_str_2FECE* a1x)//237c00
{
	uint8_t v1; // al
	//int v2; // eax
	char v3; // cl
	//int result; // eax

	x_BYTE_D41B6 = 0;
	//SPELLS_BEGIN_BUFFER_DA818[0x15a] = 19;
	SPELLS_BEGIN_BUFFER_str[4].subspell[0].byte_0x1A = 19;
	//*(Bit16s*)& SPELLS_BEGIN_BUFFER_DA818[0x606] = 0xf5;
	SPELLS_BEGIN_BUFFER_str[19].subspell[0].word_0x16x = 0xf5;
	//*(Bit16s*)& SPELLS_BEGIN_BUFFER_DA818[0x156] = 0xc7;
	SPELLS_BEGIN_BUFFER_str[4].subspell[0].word_0x16x = 0xc7;
	v1 = a1x->byte_level_type;// *(x_BYTE*)(a1 + 6);
	//SPELLS_BEGIN_BUFFER_DA818[0x60a] = 19;
	SPELLS_BEGIN_BUFFER_str[19].subspell[0].byte_0x1A = 19;
	if (v1 < 1u)
	{
		if (!v1)
		{
			//SPELLS_BEGIN_BUFFER_DA818[0x15a] = 2;
			SPELLS_BEGIN_BUFFER_str[4].subspell[0].byte_0x1A = 2;
			//*(Bit16s*)& SPELLS_BEGIN_BUFFER_DA818[0x156] = 198;
			SPELLS_BEGIN_BUFFER_str[4].subspell[0].word_0x16x = 198;
			//SPELLS_BEGIN_BUFFER_DA818[0x60a] = 2;
			SPELLS_BEGIN_BUFFER_str[19].subspell[0].byte_0x1A = 2;
			//*(Bit8u*)& SPELLS_BEGIN_BUFFER_DA818[0x606] = 244;
			SPELLS_BEGIN_BUFFER_str[19].subspell[0].word_0x16x = 244;
			D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.transparency_0x2198 = 0;
			sub_84300_load_sound(0);
			x_BYTE_D419E = 1;
		}
	}
	else if (v1 <= 1u)
	{
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.transparency_0x2198 = 0;
		sub_84300_load_sound(1u);
		x_BYTE_D419E = 9;
	}
	else if (v1 == 2)
	{
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.transparency_0x2198 = 1;
		x_BYTE_D41B6 = 1;
		x_BYTE_D41B7 = a1x->byte_0x2FED3;// *(x_BYTE*)(a1 + 5);
		sub_84300_load_sound(2u);
		x_BYTE_D419E = 10;
	}
	sub_5C0A0();
	//v2 = (int)x_D41A0_BYTEARRAY_0;
	D41A0_BYTESTR_0.byte_0x36E02 = 1;
	D41A0_BYTESTR_0.word_0x36DFE = 0;
	D41A0_BYTESTR_0.word_0x36DFC = 0;
	D41A0_BYTESTR_0.str_0x21AE.xxxx_0x21B1 = 0;
	v3 = D41A0_BYTESTR_0.byte_0x36E0B;
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.xxxx_0x2191 = 0;
	D41A0_BYTESTR_0.byte_0x36E0B = v3 & 0xFC;
	//result = (int)x_D41A0_BYTEARRAY_4;
	x_D41A0_BYTEARRAY_4_struct.byte_38546 = 0;
	if (x_WORD_180660_VGA_type_resolution == 1)
		x_BYTE_D419D_fonttype = 1;
	else
		x_BYTE_D419D_fonttype = 3;
	//return result;
}

//----- (00056D60) --------------------------------------------------------
void sub_56D60(unsigned int a1, char a2)//237d60
{
	char v2; // bl
	//Bit8u* v3; // ST08_4
	//Bit8u* v4; // eax
	type_str_0x6E8E* v5x; // ST08_4

	v2 = x_BYTE_E3799_sound_card;
	x_BYTE_E3799_sound_card = 0;
	sub_567C0();
	sub_533B0_decompress_levels(x_D41A0_BYTEARRAY_4_struct.levelnumber_43w, &D41A0_BYTESTR_0.str_2FECE);
	if (a2)
	{
		sub_54660_read_and_decompress_sky_and_blocks(D41A0_BYTESTR_0.str_2FECE.byte_level_type, x_BYTE_D41B5_texture_size);
		sub_54800_read_and_decompress_tables(D41A0_BYTESTR_0.str_2FECE.byte_level_type);
	}
	//v3 = x_D41A0_BYTEARRAY_0 + 196302;
	D41A0_BYTESTR_0.word_0xe = D41A0_BYTESTR_0.str_2FECE.word_0x2FED7;
	sub_43830_generate_level_map(a1, &D41A0_BYTESTR_0.str_2FECE);
	sub_49F30();
	sub_49270_generate_level_features(&D41A0_BYTESTR_0.str_2FECE);
	memset(&x_WORD_EB398ar, 0, 6);
	sub_49F90();
	//v4 = x_D41A0_BYTEARRAY_0;
	D41A0_BYTESTR_0.dword_0x11e6 = -1;
	if (a2)
		sub_71A70_setTmaps(D41A0_BYTESTR_0.str_2FECE.byte_level_type);
	sub_58940(/*&x_D41A0_BYTEARRAY_0[196302]*/);
	sub_11EE0(/*&x_D41A0_BYTEARRAY_0[196302]*/);
	sub_84790();
	sub_4A1E0(0, 1);
	x_BYTE_E3799_sound_card = v2;
	sub_53160();
	v5x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	sub_60F00();
}

//----- (00056EE0) --------------------------------------------------------
bool sub_56EE0(uaxis_2d a1x)//237ee0
{
	char v1; // al

	v1 = x_BYTE_13B4E0_angle[a1x.word] & 7;
	return v1 != 5 && v1 != 2 && v1 != 3;
}

int debugcounter_237f10 = 0;
//----- (00056F10) --------------------------------------------------------
char sub_56F10(int16_t a1, int16_t a2, int16_t a3, char a4)//237f10
{
	int16_t v4; // bx
	char v5; // dh
	int v6; // edx
	uaxis_2d v7x; // eax
	char v8; // dl
	uaxis_2d v9x; // bx
	char v11; // [esp+0h] [ebp-8h]
	uaxis_2d v12x; // [esp+4h] [ebp-4h]

	//LOBYTE(v12) = a1;
	//HIBYTE(v12) = a2;
	v12x._axis_2d.x = a1;
	v12x._axis_2d.y = a2;
	v11 = 0;
	v4 = a3 + x_BYTE_11B4E0_height[v12x.word];
	if (v4 > 200)
	{
		v4 = 200;
		if (!a1 && !a2)
			v11 = 1;
	}
	if (v4 < 0)
	{
		v4 = 0;
		if (!a1 && !a2)
			v11 = 1;
	}
	if (a4 && (x_BYTE_13B4E0_angle[v12x.word]&0x80))
		return 1;
	v5 = x_BYTE_D41B6;
	x_BYTE_11B4E0_height[v12x.word] = v4;
	if (v5)
	{
		v6 = (uint8_t)x_BYTE_14B4E0[v12x.word] - a3;
		if (v6 >= 255)
			x_BYTE_14B4E0[v12x.word] = -1;
		else
			x_BYTE_14B4E0[v12x.word] = v6;
	}
	if (v4)
	{
		v7x.word = v12x.word;
		v8 = x_BYTE_13B4E0_angle[v12x.word] & 0xF8 | 1;
	}
	else
	{
		//LOBYTE(v9) = a1 - 1;
		//HIBYTE(v9) = a2 - 1;
		v9x._axis_2d.x= a1 - 1;
		v9x._axis_2d.y = a2 - 1;
		if (!sub_56EE0(v9x))
			goto LABEL_28;
		//LOBYTE(v9) = v9 + 1;
		v9x._axis_2d.x++;
		if (!sub_56EE0(v9x))
			goto LABEL_28;
		//LOBYTE(v9) = v9 + 1;
		v9x._axis_2d.x++;
		if (!sub_56EE0(v9x))
			goto LABEL_28;
		//HIBYTE(v9) = a2;
		v9x._axis_2d.y=a2;
		if (!sub_56EE0(v9x))
			goto LABEL_28;
		//LOBYTE(v9) = v9 - 2;
		v9x._axis_2d.x-=2;
		if (!sub_56EE0(v9x))
			goto LABEL_28;
		//HIBYTE(v9) = a2 + 1;
		v9x._axis_2d.y=a2+1;
		if (!sub_56EE0(v9x))
			goto LABEL_28;
		//LOBYTE(v9) = v9 + 1;
		v9x._axis_2d.x++;
		if (!sub_56EE0(v9x))
			goto LABEL_28;
		//LOBYTE(v9) = v9 + 1;
		v9x._axis_2d.x++;
		if (!sub_56EE0(v9x))
			goto LABEL_28;
		v7x.word = v12x.word;
		v8 = x_BYTE_13B4E0_angle[v12x.word] & 0xF0;
	}
	x_BYTE_13B4E0_angle[v7x.word] = v8;
LABEL_28:
	if (a4)
	{
		sub_462A0(v12x, v12x);
	}
	else
		sub_46570(v12x, v12x);
	return v11;
}
int debugcounter_2380f0 = 0;
int debugcounter_2380f0_2 = 0;
//----- (000570F0) --------------------------------------------------------
char sub_570F0(int16_t a1, int16_t a2, int16_t a3, char a4, char a5, char a6)//2380f0
{
	uaxis_2d v6x; // bx
	char v8; // [esp+0h] [ebp-8h]
	uaxis_2d v9x; // [esp+4h] [ebp-4h]


	//LOBYTE(v9) = a1;
	//HIBYTE(v9) = a2;
	v9x._axis_2d.x = a1;
	v9x._axis_2d.y = a2;
	v8 = 0;
	if (a3 > 255)
	{
		a3 = 255;
		if (!a1 && !a2)
			v8 = 1;
	}
	if (a3 < 0)
	{
		a3 = 0;
		if (!a1 && !a2)
			v8 = 1;
	}
	if (a4 && x_BYTE_13B4E0_angle[v9x.word] < 0)
		return 1;
	x_BYTE_11B4E0_height[v9x.word] = a3;
	if (a5 || sub_57450(x_BYTE_10B4E0_terraintype[v9x.word]))
		x_BYTE_13B4E0_angle[v9x.word] = x_BYTE_13B4E0_angle[v9x.word] & 0xF8 | 1;
	if (!a3)
	{
		if (!a6)
			goto LABEL_32;
		//LOBYTE(v6) = a1 - 1;
		//HIBYTE(v6) = a2 - 1;
		v6x._axis_2d.x = a1-1;
		v6x._axis_2d.y = a2-1;
		if (sub_56EE0(v6x))
		{
			//LOBYTE(v6) = v6 + 1;
			v6x._axis_2d.x++;
			if (sub_56EE0(v6x))
			{
				//LOBYTE(v6) = v6 + 1;
				v6x._axis_2d.x++;
				if (sub_56EE0(v6x))
				{
					//HIBYTE(v6) = a2;
					v6x._axis_2d.y = a2;
					if (sub_56EE0(v6x))
					{
						//LOBYTE(v6) = v6 - 2;
						v6x._axis_2d.x-=2;
						if (sub_56EE0(v6x))
						{
							//HIBYTE(v6) = a2 + 1;
							v6x._axis_2d.y = a2+1;
							if (sub_56EE0(v6x))
							{
								//LOBYTE(v6) = v6 + 1;
								v6x._axis_2d.x++;
								if (sub_56EE0(v6x))
								{
									//LOBYTE(v6) = v6 + 1;
									v6x._axis_2d.x++;
									if (sub_56EE0(v6x))
										LABEL_32:
									x_BYTE_13B4E0_angle[v9x.word] &= 0xF0u;
								}
							}
						}
					}
				}
			}
		}
	}
	if (a4)
	{
		sub_462A0(v9x, v9x);
	}
	else
		sub_46570(v9x, v9x);
	return v8;
}

//----- (000572C0) --------------------------------------------------------
char sub_572C0(type_str_0x6E8E* a1x, int16_t a2, int16_t a3, int16_t a4, char a5)//2382c0
{
	Bit16s v5; // ebx
	int v6; // esi
	int v7; // edi
	int v8; // ebx
	int v10; // [esp+0h] [ebp-8h]
	int v11; // [esp+4h] [ebp-4h]

	v5 = a3;
	v6 = ((Bit16s)a1x->array_0x4C_76.x + 128) >> 8;
	v7 = ((Bit16s)a1x->array_0x4C_76.y + 128) >> 8;
	/*if (a3 > (a1x->array_0x52_82.xshift - (__CFSHL__(a1x->array_0x52_82.xshift >> 31, 8) + (a1x->array_0x52_82.xshift >> 31 << 8))) >> 8)
		v5 = (a1x->array_0x52_82.xshift - (__CFSHL__(a1x->array_0x52_82.xshift >> 31, 8) + (a1x->array_0x52_82.xshift >> 31 << 8))) >> 8;
	*/
	if (a3 > (a1x->array_0x52_82.xshift - (my_sign32(a1x->array_0x52_82.xshift) << 8) + my_sign32(a1x->array_0x52_82.xshift)) >> 8)
		v5 = (a1x->array_0x52_82.xshift - (my_sign32(a1x->array_0x52_82.xshift) << 8) + my_sign32(a1x->array_0x52_82.xshift)) >> 8;

	v8 = sub_10080(a2, v5);
	if (!v8)
		return 0;
	do
	{
		if (sub_10130(v8, &v11, &v10) != 1)
		{
			sub_10100(v8);
			return 0;
		}
	} while (!sub_56F10(v6 + v11, v7 + v10, a4, a5));
	sub_10100(v8);
	return 1;
}

//----- (00057390) --------------------------------------------------------
void sub_57390(uaxis_2d a1x, Bit16u a2)//238390
{
	//Bit8u index; // al
	int i; // ebx
	char v4; // ah
	//Bit8u* v5; // ebx

	//index = a1;
	for (i = x_WORD_15B4E0_source[a1x.word];x_DWORD_EA3E4[i] != x_DWORD_EA3E4[0]; i = x_DWORD_EA3E4[i]->word_0x16_22)
	{
		//v5 = x_DWORD_EA3E4[i];
		/*if (v5 == x_DWORD_EA3E4[0])
			break;*/
		//index = a2;
		if (x_DWORD_EA3E4[i]->word_0x1A_26 != a2)
		{
			//index = x_DWORD_EA3E4[i][63];			
			if (x_DWORD_EA3E4[i]->byte_0x3F_63 == 2)
			{
				sub_57F10(x_DWORD_EA3E4[i]);
				continue;
			}
			if (x_DWORD_EA3E4[i]->byte_0x3F_63 == 5)
			{
				v4 = 1;
				//index = x_DWORD_EA3E4[i][64];
				if (x_DWORD_EA3E4[i]->byte_0x40_64 < 0x10u)
				{
					if (x_DWORD_EA3E4[i]->byte_0x40_64 < 8u)
					{
						if (x_DWORD_EA3E4[i]->byte_0x40_64 != 6)
							goto LABEL_25;
					}
					else if (x_DWORD_EA3E4[i]->byte_0x40_64 > 8u && x_DWORD_EA3E4[i]->byte_0x40_64 != 10)
					{
						goto LABEL_25;
					}
				}
				else if (x_DWORD_EA3E4[i]->byte_0x40_64 > 0x10u)
				{
					if (x_DWORD_EA3E4[i]->byte_0x40_64 < 0x19u)
					{
						if (x_DWORD_EA3E4[i]->byte_0x40_64 < 0x16u || x_DWORD_EA3E4[i]->byte_0x40_64 > 0x17u)
							goto LABEL_25;
					}
					else if (x_DWORD_EA3E4[i]->byte_0x40_64 <= 0x19u)
					{
						if (x_DWORD_EA3E4[i]->byte_0x45_69 != -56)
							goto LABEL_25;
					}
					else if (x_DWORD_EA3E4[i]->byte_0x40_64 != 27)
					{
					LABEL_25:
						if (v4)
						{
							x_DWORD_EA3E4[i]->dword_0x8 = -1;
							x_DWORD_EA3E4[i]->word_0x24_36 = a2;
							x_DWORD_EA3E4[i]->word_0x26_38 = a2;
						}
						continue;
					}
				}
				v4 = 0;
				goto LABEL_25;
			}
		}
	}
	//return result;
}

//----- (00057450) --------------------------------------------------------
char sub_57450(Bit8u a1)//238450
{
	if (a1 < 0x53u)
	{
		if (a1 < 0x25u)
		{
			if (a1)
				return 0;
		}
		else if (a1 > 0x26u)
		{
			if (a1 >= 0x2Cu)
			{
				if (a1 > 0x2Fu && a1 != 81)
					return 0;
				return 1;
			}
			return 0;
		}
		return 1;
	}
	if (a1 <= 0x53u)
		return 1;
	if (a1 < 0x6Du)
	{
		if (a1 >= 0x68u)
		{
			if (a1 > 0x69u)
				return 0;
			return 1;
		}
		return 0;
	}
	if (a1 <= 0x6Du)
		return 1;
	if (a1 >= 0x72u)
	{
		if (a1 > 0x72u && a1 != 116)
			return 0;
		return 1;
	}
	return 0;
}

//----- (000574A0) --------------------------------------------------------
void sub_574A0()//2384a0
{
	type_str_0x30311* indexx; // eax
	type_str_611* v1x; // ebx
	int v2; // edx

	//index = (x_WORD *)x_D41A0_BYTEARRAY_4;
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
	{
		memset(D41A0_BYTESTR_0.str_0x364D2.dword_0x364D6, 0, 104);
		indexx = &D41A0_BYTESTR_0.str_2FECE.array_0x30311[1];
		v1x = &x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]->dword_0xA4_164x->str_611;
		while (indexx < (type_str_0x30311*)&D41A0_BYTESTR_0.str_2FECE.next_0x360D1)
		{
			if (indexx->str_0x30311_type == 15)
			{
				v2 = indexx->str_0x30311_subtype;
				if (!v1x->array_0x333_819x.word[v2] && !v1x->array_0x3E9_1001x.byte[v2])
					D41A0_BYTESTR_0.str_0x364D2.dword_0x364D6[v2]++;
			}
			indexx++;//= 10;
		}
	}
	//return result;
}

//----- (00057570) --------------------------------------------------------
void sub_57570()//238570
{
	//int result; // eax
	//int v1; // edx
	//char v2; // ch

	//result = (int)x_D41A0_BYTEARRAY_4;
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 & 1))
	{
		//result = (int)x_D41A0_BYTEARRAY_0;
		//v1 = D41A0_BYTESTR_0.word_0xc;
		if (D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[0])
		{
			//result = 2124 * v1 + (int)x_D41A0_BYTEARRAY_0;
			//v2 = x_D41A0_BYTEARRAY_0[2124 * D41A0_BYTESTR_0.word_0xc + 11232];
			if (!(D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 0x10))
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] | 2;
		}
	}
	//return result;
}

//----- (000575C0) --------------------------------------------------------
void sub_575C0()//2385c0
{
	if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 8)
	{
		if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 4)
		{
			if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10) && (x_D41A0_BYTEARRAY_4_struct.setting_38545 & 0x80))
			{
				if (sub_555D0(1u, x_D41A0_BYTEARRAY_4_struct.levelnumber_43w))
				{
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] &= 0xF7u;
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] &= 0xFBu;
				}
			}
		}
	}
}

//----- (00057640) --------------------------------------------------------
void sub_57640()//238640
{
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10) && !(x_D41A0_BYTEARRAY_4_struct.setting_38545 & 0x80))
	{
		if (sub_55080(1u, x_D41A0_BYTEARRAY_4_struct.levelnumber_43w,(char*)""))
		{
			x_D41A0_BYTEARRAY_4_struct.setting_38545 |= 0x80u;
		}
	}
}


//type_str_164 ffftype_str_164;

//----- (00057680) --------------------------------------------------------
void sub_57680_FixPointersAfterLoad()//238680
{
	//signed int v0; // edx
	//int v1; // ebx
	//type_str_0x6E8E* v2x; // ecx
	//type_str_0x6E8E* indexx; // eax
	//Bit32s i; // edx

	D41A0_BYTESTR_0.str_0x3664C[0].dword_A = 0;

	
	//memset(&ffftype_str_164, -1, sizeof(ffftype_str_164));
	for (int indexx = 1; x_DWORD_EA3E4[indexx] < x_DWORD_EA3E4[0x3e8]; indexx++)
		//if (memory_readable(x_DWORD_EA3E4[indexx]->dword_0xA4_164x,4))
		{
			// FIXME: types
			// // if ((Bit32u)x_DWORD_EA3E4[indexx]->dword_0xA4_164x == 0x2c75e28)//0x014F82E8//0x2c75e28-(Bit32u)&D41A0_BYTESTR_0
			// 	x_DWORD_EA3E4[indexx]->dword_0xA4_164x = unk_F42B0x;
		}

	for(int v0=0;v0 < D41A0_BYTESTR_0.word_0xe;v0++)
	{
		//v1 = (int)x_D41A0_BYTEARRAY_0 + 11230 + 2124 * v0;
		//v2x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[v0].word_0x00a_2BE4_11240];
		//v2x->dword_0xA4_164 = (Bit32u)(x_D41A0_BYTEARRAY_0 + 11230 + 2124 * v0 + 998);
		x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[v0].word_0x00a_2BE4_11240]->dword_0xA4_164x = &D41A0_BYTESTR_0.array_0x2BDE[v0].dword_0x3E6_2BE4_12228;
	}
	/*indexx = x_DWORD_EA3E4[1];
	//for (i = &unk_D7BD6[0x7d6] - D41A0_BYTESTR_0.dword_0x36DF6; indexx < x_DWORD_EA3E4[0x3e8]; indexx+=sizeof(type_str_0x6E8E))
	
	for (i = (Bit32u)&unk_D7BD6[0x7d6] - D41A0_BYTESTR_0.dword_0x36DF6; indexx < x_DWORD_EA3E4[0x3e8]; indexx++)
	{
		if (indexx->byte_0x3F_63)
			indexx->dword_0xA0_160x = (type_str_160*)((Bit32u)indexx->dword_0xA0_160x+i);
	}*/

	// FIXME: types
	// // for(int indexx=1; x_DWORD_EA3E4[indexx] < x_DWORD_EA3E4[0x3e8]; indexx++)
	// 	if (x_DWORD_EA3E4[indexx]->byte_0x3F_63)
	// 		x_DWORD_EA3E4[indexx]->dword_0xA0_160x = (type_str_160*)((Bit32u)x_DWORD_EA3E4[indexx]->dword_0xA0_160x - D41A0_BYTESTR_0.dword_0x36DF6 + &unk_D7BD6[0x7d6]);
	//return result;
}

int debugcounter_238730 = 0;
int debugcounter28 = 0;
int debugcounter29 = 0;
int debugcounter31x = 0;
//----- (00057730) --------------------------------------------------------
void sub_57730()//238730
{
	type_str_0x6E8E* ix; // ebx
	//int v1; // eax
	type_str_0x6E8E* v2x; // esi
	type_str_0x6E8E* v3x; // ecx
	type_str_0x6E8E* v4x; // edx
	type_str_0x6E8E* jx; // eax
	char v6; // bl
	uint8_t v7; // bl
	bool v8; // zf
	//int v9; // ebx
	//type_str_0x6E8E* v10x; // edi
	//uint8_t v11; // bl
	//type_str_0x6E8E* v12x; // ebx
	uint8_t v13; // bl
	//char result; // al
	signed int k; // esi
	type_str_0x6E8E* lx; // ebx
	//int v17; // ST08_4
	type_str_0x6E8E* mx; // ebx
	char v19; // cl
	type_D4C52ar2* v20; // eax
	int16_t v21; // si
	type_str_0x6E8E* v22x[29]; // [esp+0h] [ebp-7Ch]
	type_str_0x6E8E* v23x; // [esp+74h] [ebp-8h]
	type_str_0x6E8E* v24x; // [esp+78h] [ebp-4h]

	//blit and fade and other

	//*(Bit32s*)(x_D41A0_BYTEARRAY_0 + 8) = 9377 * *(Bit32s*)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
	D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;

	for (ix = x_DWORD_EA3E4[1]; ix < x_DWORD_EA3E4[0x3e8]; ix++)
	{
		//adress 238756
		if (ix->byte_0x3F_63 && ix->struct_byte_0xc_12_15.byte[1] & 4)
			sub_57F20(ix);
	}
	memset(v22x, 0, 116);//adress 238779
	memset(x_D41A0_BYTEARRAY_4_struct.bytearray_38403x, 0, 116);
	//v1 = (int)x_D41A0_BYTEARRAY_4;
	v2x = 0;
	x_D41A0_BYTEARRAY_4_struct.dword_38523 = 0;
	v24x = 0;
	x_D41A0_BYTEARRAY_4_struct.dword_38527 = 0;
	v23x = 0;
	x_D41A0_BYTEARRAY_4_struct.dword_38519 = 0;
	x_D41A0_BYTEARRAY_4_struct.dword_38531 = 0;
	v3x = 0;
	x_D41A0_BYTEARRAY_4_struct.dword_38535 = 0;
	v4x = 0;
	for (jx = x_DWORD_EA3E4[1]; jx < x_DWORD_EA3E4[0x3e8]; jx++)
	{
		//adress 2387d9
		/*if ((j - x_DWORD_EA3E4[1]) / 168 > 0x3e0)
		{
			Bit8u origbyte28 = 0;
			Bit8u remakebyte28 = 0;
			int comp28 = compare_with_sequence_D41A0((char*)"002387D9", x_D41A0_BYTEARRAY_0, 0x356038, debugcounter28, 0x36e16, &origbyte28, &remakebyte28);
			if (comp28 < 0x36e16) {
				myprintf("stop");
			}
		}*/
		debugcounter28++;
		
		v6 = jx->byte_0x3F_63;
		if (v6)
		{
			switch (v6)
			{
			case 3:
				if (jx->dword_0x8 >= 0)
				{
					if (v3x)
						v3x->next_0 = jx;
					else
						x_D41A0_BYTEARRAY_4_struct.dword_38519 = jx;
					//v12x = x_DWORD_EA3E4[0];
					v3x = jx;
					jx->next_0 = x_DWORD_EA3E4[0];
					continue;
				}
				continue;
			case 5:
				if (jx->dword_0x8 < 0)
					continue;
				v7 = jx->byte_0x45_69;
				if (v7 < 0xE8u)
				{
					v8 = v7 == 0xb4u;
				}
				else
				{
					if (v7 <= 0xE8u)
						continue;
					v8 = v7 == 0xeau;
				}
				if (!v8)
				{
					//v9 = jx->byte_0x40_64;
					//v10x = v22x[jx->byte_0x40_64];
					if (v22x[jx->byte_0x40_64])
						v22x[jx->byte_0x40_64]->next_0 = jx;
					else
						x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[jx->byte_0x40_64] = jx;
					jx->next_0 = x_DWORD_EA3E4[0];
					v22x[jx->byte_0x40_64] = jx;
				}
				continue;
			case 9:
				if (v23x)
					v23x->next_0 = jx;
				else
					x_D41A0_BYTEARRAY_4_struct.dword_38531 = jx;
				//v12x = x_DWORD_EA3E4[0];
				v23x = jx;
				jx->next_0 = x_DWORD_EA3E4[0];
				continue;
			case 10:
				//v11 = jx->byte_0x40_64;
				if (jx->byte_0x40_64 < 0x2Du)
				{
					if (jx->byte_0x40_64 < 0x27u)
						continue;
					if (jx->byte_0x40_64 <= 0x28u)
						goto LABEL_32;
					if (jx->byte_0x40_64 != 42)
						continue;
				LABEL_40:
					if (v4x)
						v4x->next_0 = jx;
					else
						x_D41A0_BYTEARRAY_4_struct.dword_38535 = jx;
					jx->next_0 = x_DWORD_EA3E4[0];
					v4x = jx;
					continue;
				}
				if (jx->byte_0x40_64 <= 0x2Du)
				{
					if (v24x)
						v24x->next_0 = jx;
					else
						x_D41A0_BYTEARRAY_4_struct.dword_38527 = jx;
					//v12x = x_DWORD_EA3E4[0];
					v24x = jx;
					jx->next_0 = x_DWORD_EA3E4[0];
					continue;
				}
				if (jx->byte_0x40_64 < 0x43u)
				{
					if (jx->byte_0x40_64 != 57)
						continue;
				LABEL_32:
					if (v2x)
						v2x->next_0 = jx;
					else
						x_D41A0_BYTEARRAY_4_struct.dword_38523 = jx;
					//v12x = x_DWORD_EA3E4[0];
					v2x = jx;
				//LABEL_60:
					jx->next_0 = x_DWORD_EA3E4[0];
					continue;
				}
				if (jx->byte_0x40_64 <= 0x43u || jx->byte_0x40_64 == 78)
					goto LABEL_40;
				break;
			case 11:
				v13 = jx->byte_0x40_64;
				if (v13 >= 0xCu && (v13 <= 0xCu || v13 == 31))
				{
					if (v4x)
						v4x->next_0 = jx;
					else
						x_D41A0_BYTEARRAY_4_struct.dword_38535 = jx;
					jx->next_0 = x_DWORD_EA3E4[0];
					v4x = jx;
				}
				continue;
			default:
				continue;
			}
		}
	}
	//result = (char)x_D41A0_BYTEARRAY_4;
	//adress 23899a
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1))
	{
		sub_12780();
		for (k = 0; k < 29; k++)
		{
			for (lx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[k]; lx > x_DWORD_EA3E4[0]; lx = lx->next_0)
			{
				if (lx->byte_0x48_72 || lx->byte_0x49_73)
					sub_12500(lx);
			}
		}
		if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
			sub_68BF0();
		sub_159E0();//adress 2389f6
		if (x_BYTE_D41B6)
			sub_58630();
		//fix it - maybe v19= //v17 = x_DWORD_EA3E4[*(uint16_t *)(2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0 + 11240)];
		sub_60F00();
		for (mx = x_DWORD_EA3E4[1]; mx < x_DWORD_EA3E4[0x3e8]; mx++)
		{
			//zde sbirat informace
			//if (debugcounter29 >= 0x1f6a)
			if (debugcounter29 >= 0x1b83)
			{

				//myprintf("i:%d,", debugcounter29);
				mx++;
				mx--;
			}
			//adress 238a3d
			//!!!! 
			//361f7e-168//35cf6e 0x7a nebo 0x7b nebo 0x79
			/*if (m == x_DWORD_EA3E4[1] + 168 * 0x79)
				myprintf("xxx");*/
				//!!!!
			//if ((m - x_DWORD_EA3E4[1]) / 168 > 0x3e0)

			v19 = mx->byte_0x3F_63;
			if (v19)
			{
				//v20 = &x_DWORD_D4C52ar[14 * mx->byte_0x45_69 + *(Bit32u*)(x_DWORD_D4C52ar + 18 * v19)-0x2a5c52];
				//v20 = &x_DWORD_D4C52ar[14 * mx->byte_0x45_69 + str_D4C48ar[v19].dword_10 - 0x2a5c52];
				v20=&str_D4C48ar[v19].dword_10[mx->byte_0x45_69];
				if (mx->byte_0x45_69 == v20->word_4)
				{
					if (v20->dword_10)
					{

						//adress 238a8a zacina na 35cf6e 363bb6 =6c48/168=165=a5
						pre_sub_4A190_0x6E8E(v20->dword_6, mx,2);
						//(*(void(**)(Bit8u*))(v20 + 6))((Bit8u*)(m));
						mx->byte_0x3E_62++;
					}
				}
				else
				{
					sub_57F10(mx);
				}
			}
		}
		sub_585D0();
		//result = (int)x_D41A0_BYTEARRAY_0;
		v21 = D41A0_BYTESTR_0.word_0x3654A;
		if (v21)
			sub_21F60(x_DWORD_EA3E4[v21]);
	}
	//return result;
}


int debugcounter_238b2f = 0;
//----- (00057B20) --------------------------------------------------------
void sub_57B20(type_str_0x2BDE* a1x, type_str_0x6E8E* a2x)//238b20 //copy position and rotation
{
	//int16_t v2; // t1
	//int v3; // edi
	int v4; // ecx

#ifdef ROTATE_PLAYER
	a2x->word_0x1C_28 = 0x900;
#endif

	#ifdef MOVE_PLAYER
	if (debugcounter_238b2f == 10)
	{
		a2x->array_0x4C_76.x = 0x8c07;
		a2x->array_0x4C_76.y = 0xb427;
	}
	/*if (debugcounter_238b2f == 10) {
		a2x->array_0x4C_76.x = 0x7249;
		a2x->array_0x4C_76.y = 0xd491;
	}else
	if (debugcounter_238b2f == 351) {
		//a2x->array_0x4C_76.x = 0xbedc+656;
		//a2x->array_0x4C_76.y = 0xd541+1200;
		//a2x->word_0x82_130 = 0x50;
		//a2x->array_0x52_82.aa = 64;
	}
	else*/
	/*	if (debugcounter_238b2f == 10) {
			//a2x->array_0x4C_76.x = 0xbedc + 356;
			//a2x->array_0x4C_76.y = 0xd541 - 1200;
			a2x->word_0x82_130 = 0x300;
			//a2x->array_0x52_82.aa = 64;
		}
		if (debugcounter_238b2f == 200) {
			//a2x->array_0x4C_76.x = 0xbedc + 356;
			//a2x->array_0x4C_76.y = 0xd541 - 1200;
			a2x->word_0x1C_28 = -0x10;
			a2x->word_0x82_130 = 0x200;
			//a2x->array_0x52_82.aa = 64;
		}
		if(debugcounter_238b2f>250)
			if (debugcounter_238b2f % 50 == 0)
			{
				a2x->word_0x1C_28 -= 0x10;
				a2x->word_0x82_130 = 0x200;
			}
		//a2x->array_0x4C_76.x = 0x2876;
		//a2x->array_0x4C_76.y = 0x2c75;*/
		/*if (debugcounter_238b2f < 10) {
			a2x->array_0x4C_76.x = 0x73a0;
			a2x->array_0x4C_76.y = 0xd5e6;
		}
		else {
			a2x->array_0x4C_76.x = 0xc1aa;
			a2x->array_0x4C_76.y = 0xd542;
		}*/
		debugcounter_238b2f++;
	#endif

	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1))
	{
		a1x->struct_0x1d1_2BDE_11695[a1x->word_0x010_2BDE_11246].axis_2BDE_11695.x = a2x->array_0x4C_76.x;
		a1x->struct_0x1d1_2BDE_11695[a1x->word_0x010_2BDE_11246].axis_2BDE_11695.y = a2x->array_0x4C_76.y;
		sub_10C40_getTerrainAlt(&a2x->array_0x4C_76);
		//v2 = a2x->array_0x4C_76.z;
		a1x->struct_0x1d1_2BDE_11695[a1x->word_0x010_2BDE_11246].axis_2BDE_11695.z = a2x->array_0x4C_76.z;

		a1x->struct_0x1d1_2BDE_11695[a1x->word_0x010_2BDE_11246].rotation__2BDE_11701.aa = a2x->word_0x1C_28;
		a1x->struct_0x1d1_2BDE_11695[a1x->word_0x010_2BDE_11246].rotation__2BDE_11701.dd = a1x->struct_0x1d1_2BDE_11695[0].rotation__2BDE_11701.dd;
		a1x->struct_0x1d1_2BDE_11695[a1x->word_0x010_2BDE_11246].rotation__2BDE_11701.yshift = a2x->dword_0xA4_164x->word_0x155_341;
		//if(mouseturnoff)*(x_WORD *)(14 * (*(uint16_t *)(a1 + 16) - 1) + a1 + 489) = 6;//testdebug
		//v3 = a2x->dword_0xA4_164;
		v4 = a2x->dword_0xA4_164x->word_0x1E_30;
		/*a1x->struct_0x1d1_2BDE_11695[a1x->word_0x010_2BDE_11246].rotation__2BDE_11701.bb = a2x->dword_0xA4_164x->word_0x157_343 / 2
			+ x_D41A0_BYTEARRAY_4_struct.byteindex_121[1]
			* (uint16_t)((signed int)(v4 - (__CFSHL__((uint64_t)a2x->dword_0xA4_164x->word_0x1E_30 >> 32, 4) + 16 * ((uint64_t)a2x->dword_0xA4_164x->word_0x1E_30 >> 32))) >> 4)
			- ((v4 - (__CFSHL__(v4 >> 31, 3) + 8 * (v4 >> 31))) >> 3);
			*/
		a1x->struct_0x1d1_2BDE_11695[a1x->word_0x010_2BDE_11246].rotation__2BDE_11701.xshift = a2x->dword_0xA4_164x->word_0x157_343 / 2
			+ x_D41A0_BYTEARRAY_4_struct.byteindex_121[1]
			* ((v4 - (my_sign32(v4) << 4) + my_sign32(v4)) >> 4)
			- ((v4 - (my_sign32(v4) << 3) + my_sign32(v4)) >> 3);

		//my_sign32(a2x->dword_0xA4_164x->word_0x1E_30)
		a1x->struct_0x1d1_2BDE_11695[a1x->word_0x010_2BDE_11246].rotation__2BDE_11701.aa += a2x->dword_0xA4_164x->word_0x18_24_next_entity;
		a1x->struct_0x1d1_2BDE_11695[a1x->word_0x010_2BDE_11246].rotation__2BDE_11701.xshift += a2x->dword_0xA4_164x->word_0x1A_26;
	}
	//return 1;
}

//----- (00057CF0) --------------------------------------------------------
void sub_57CF0(type_str_0x6E8E* a1x, axis_3d* a2x)//238cf0
{
	//signed int result; // eax
	//if (a1x->array_0x4C_76.x>>8 == a2x->x>>8 && a1x->array_0x4C_76.y >> 8 == a2x->y >> 8)
	if (((a1x->array_0x4C_76.x & 0xff00) == (a2x->x & 0xff00)) && ((a1x->array_0x4C_76.y & 0xff00) == (a2x->y & 0xff00)))
	{
		//result = 0;
		a1x->array_0x4C_76 = *a2x;
	}
	else
	{
		sub_57E50(a1x);
		sub_57D70_actualize_event(a1x, a2x);
		//result = 1;
	}
	//return result;
}

//----- (00057D40) --------------------------------------------------------
signed int sub_57D40(type_str_0x6E8E* a1x, axis_3d* a2x)//238d40
{
	sub_57E50(a1x);
	sub_57D70_actualize_event(a1x, a2x);
	return 1;
}

//int debugcounter2;

//----- (00057D70) --------------------------------------------------------
void sub_57D70_actualize_event(type_str_0x6E8E* a1x, axis_3d* a2x)//238d70 // register object on axis
{
	//uint16_t v2; // di
	//int result; // eax
	uaxis_2d v2;
	if (!(a1x->struct_byte_0xc_12_15.byte[0] & 4))
	{
		a1x->word_0x18_24_next_entity = 0;
		v2._axis_2d.x = (a2x->x >> 8);
		v2._axis_2d.y = (a2x->y >> 8);
		//v2 = x_WORD_15B4E0_source[((a2x->y>>8) << 8) + (a2x->x >> 8)];
		a1x->word_0x16_22 = x_WORD_15B4E0_source[v2.word];//find old entity
		if (a1x->word_0x16_22)//if is entity set old entity next entity index to new entity
			D41A0_BYTESTR_0.struct_0x6E8E[a1x->word_0x16_22].word_0x18_24_next_entity = a1x - D41A0_BYTESTR_0.struct_0x6E8E;
		//result = (a2[3] << 8) + a2[1];
		x_WORD_15B4E0_source[v2.word] = a1x - D41A0_BYTESTR_0.struct_0x6E8E;//set new entity as actual source
		a1x->array_0x4C_76 = *a2x;//set new position
		a1x->struct_byte_0xc_12_15.byte[0] |= 4u;
	}
//	return result;
}

//----- (00057E50) --------------------------------------------------------
void sub_57E50(type_str_0x6E8E* a1x)//238e50
{
	//int16_t result; // ax
	//uint16_t v2; // cx

	if (a1x->struct_byte_0xc_12_15.byte[0] & 4)
	{
		if (a1x->word_0x18_24_next_entity)
		{
			//result = *(x_WORD *)(a1 + 22);
			D41A0_BYTESTR_0.struct_0x6E8E[a1x->word_0x18_24_next_entity].word_0x16_22 = a1x->word_0x16_22;
		}
		else
		{
			//result = *(x_WORD *)(a1 + 22);
			x_WORD_15B4E0_source[(a1x->array_0x4C_76.x>>8) + ((a1x->array_0x4C_76.y >> 8) << 8)] = a1x->word_0x16_22;
		}
		//v2 = a1x->word_0x16_22;
		if (a1x->word_0x16_22)
		{
			//result = *(x_WORD *)(a1 + 24);
			D41A0_BYTESTR_0.struct_0x6E8E[a1x->word_0x16_22].word_0x18_24_next_entity = a1x->word_0x18_24_next_entity;
		}
		a1x->struct_byte_0xc_12_15.byte[0] &= 0xFBu;
	}
	//return result;
}

//----- (00057F10) --------------------------------------------------------
void sub_57F10(type_str_0x6E8E* a1x)//238f10
{
	//int result; // eax

	//result = a1;
	a1x->struct_byte_0xc_12_15.byte[1] |= 4u;
	//return result;
}

int debugcounter29x = 0;

//----- (00057F20) --------------------------------------------------------
void sub_57F20(type_str_0x6E8E* a1x)//238f20
{
	Bit32s v1; // edx
	signed int v2; // ecx
	//type_str_0x6E8E** v3; // eax
	int v3x;
	//Bit8u* v4; // edx
	//Bit8u* result; // eax
	//int v6; // edx

	/*Bit8u origbyte20 = 0;
	Bit8u remakebyte20 = 0;
	//int debugcounter11 = 0;
	int comp20 = compare_with_sequence_D41A0((char*)"00238F20", (Bit8u*)&D41A0_BYTESTR_0, 0x356038, debugcounter29x, 0x36e16, &origbyte20, &remakebyte20);


	if (debugcounter29x >= 0x02)
	{
		//myprintf("i:%d,", debugcounter29x);
	}
	debugcounter29x++;*/

	sub_57E50(a1x);
	if (a1x->struct_byte_0xc_12_15.byte[2] & 2)
	{
		v1 = 0;
		v2 = 0;
		//v3 = D41A0_BYTESTR_0.dword_0x11EA;
		v3x = 0;
		while (v1 <= D41A0_BYTESTR_0.dword_0x11e6)
		{
			if (a1x == D41A0_BYTESTR_0.dword_0x11EA[v3x])
			{
				v2 = 1;
				break;
			}
			//v3++;
			v3x++;
			v1++;
		}
		if (v2)
		{
			//v4 = x_D41A0_BYTEARRAY_0;			
			D41A0_BYTESTR_0.dword_0x11EA[v3x] = D41A0_BYTESTR_0.dword_0x11EA[D41A0_BYTESTR_0.dword_0x11e6];
			D41A0_BYTESTR_0.dword_0x11e6--;
		}
	}
	//result = x_D41A0_BYTEARRAY_0;
	a1x->byte_0x3F_63 = 0;
	//v6 = *(x_DWORD *)(result + 53) + 1;
	//*(x_DWORD *)(result + 53) = v6;
	//plus_x_D41A0_BYTEARRAY_0_0x35();
	D41A0_BYTESTR_0.dword_0x35++;
	//*(x_DWORD *)(result + 4 * D41A0_BYTESTR_0.dword_0x35() + 582) = (int)a1;
	//set_x_D41A0_BYTEARRAY_0_0x246(D41A0_BYTESTR_0.dword_0x35(), a1x);
	D41A0_BYTESTR_0.pointers_0x246[D41A0_BYTESTR_0.dword_0x35] = a1x;
	//return result;
	//return 1;
}

//----- (00057FA0) --------------------------------------------------------
void sub_57FA0(axis_3d* a1, uint16_t a2, int16_t a3, int16_t a4)//238fa0 // move player
{
	axis_3d* result; // eax
	uint16_t v5; // bx
	Bit16s v6; // edx

	result = a1;
	v5 = a3;
	v6 = a4;
	if (a4)
	{
		v5 &= 0x7ffu;
		a2 &= 0x7ffu;
		if (v5)
		{
			a1->z -= (int)(a4 * x_DWORD_DB750[v5]) >> 16;//change z axis
			v6 = (int)(a4 * x_DWORD_DB750[0x200+v5]) >> 16;
		}
		//change x and y axis
		a1->x += (int)(v6 * x_DWORD_DB750[a2]) >> 16;
		a1->y -= (int)(v6 * x_DWORD_DB750[0x200+a2]) >> 16;
	}
	//return result;
}

//----- (00058030) --------------------------------------------------------
void sub_58030(axis_3d* a1x, axis_3d* a2)//239030
{
	axis_3d* result; // eax
	uaxis_2d v3x; // dx
	uint8_t v4; // bl
	uint8_t v5; // bl
	uint8_t v6; // bl

	result = a2;
	v3x._axis_2d.x = a1x->x >> 8;
	v3x._axis_2d.y = a1x->y >> 8;
	v4 = x_BYTE_11B4E0_height[v3x.word];
	a2->x = v4;
	//LOBYTE(v3) = v3 + 1;
	v3x._axis_2d.x++;
	a2->y = v4;
	a2->x -= x_BYTE_11B4E0_height[v3x.word];
	v5 = x_BYTE_11B4E0_height[v3x.word];
	//++HIBYTE(v3);
	v3x._axis_2d.y++;
	result->y += v5;
	a2->x -= x_BYTE_11B4E0_height[v3x.word];
	v6 = x_BYTE_11B4E0_height[v3x.word];
	//LOBYTE(v3) = v3 - 1;
	v3x._axis_2d.x--;
	result->y -= v6;
	result->x += x_BYTE_11B4E0_height[v3x.word];
	a2->y -= x_BYTE_11B4E0_height[v3x.word];
	//return result;
}

//----- (000580E0) --------------------------------------------------------
int sub_580E0(axis_3d* a1x, signed int a2, int a3, int a4, int16_t a5)//2390e0
{
	signed int result; // eax

	result = 0;
	if (a1x->z > a2)
	{
		result = 1;
		a1x->z += a5;
	}
	if ((Bit16s)a1x->z <= a2 + a3)
	{
		result = 3;
		a1x->z = a3 + a2;
	}
	return result;
}

//----- (000581E0) --------------------------------------------------------
int16_t sub_581E0_maybe_tan2(axis_3d* a1, axis_3d* a2)//2391E0
{
	//354f10->35f418 +2->35012a .. 012a
	//354f14->354f20 +2->350168 .. 0168
	//0168-18a=3e
	//354f10->35f418->ec0141 .. 0141
	//354f14->354f20->012a018d .. 018d
	//18d-141=4c

	//ebx=a1 //141
	//edx=a2 //1d8
	//ax edx+2

	return sub_72633_maybe_tan(a2->x - a1->x, a2->y - a1->y);//253633
	//rozdil1- 4c rozdil2 - 3e
}

//----- (00058210) --------------------------------------------------------
int16_t sub_58210_radix_tan(axis_3d* a1, axis_3d* a2)//239210
{
	int16_t v2; // ax

	v2 = sub_58490_radix_3d_2(a1, a2);//
	return sub_72633_maybe_tan(a1->z - a2->z, -v2);
}

//----- (000582B0) --------------------------------------------------------
int sub_582B0(int16_t a1, int16_t a2)//2392b0
{
	int result; // eax

	result = abs((a1 & 0x7FF) - (a2 & 0x7FF));
	if ((uint16_t)result > 0x400u)
		result = 2048 - result;
	return result;
}

//----- (000582F0) --------------------------------------------------------
int sub_582F0(int a1, int16_t a2)//2392f0
{
	int v2; // edx
	int v3; // ebx

	v2 = a1;
	BYTE1(v2) &= 7u;
	v3 = (a2 & 0x7FF) - (uint16_t)v2;
	if ((a2 & 0x7FF) == (uint16_t)v2)
		return v2 ^ (uint16_t)v2;
	if (abs(v3) > 1024)
	{
		if (v3 >= 0)
			v3 -= 2048;
		else
			v3 += 2048;
	}
	if (v3)
	{
		if (v3 > 0)
			return 1;
		v3 = -1;
	}
	return v3;
}

//----- (00058350) --------------------------------------------------------
int sub_58350(uint16_t a1, int16_t a2, int a3, uint16_t a4)//239350
{
	int v4; // ebx
	int v5; // esi
	int v6; // eax

	if (a1 == a2)
		return 0;
	v4 = sub_582B0(a1, a2);
	v5 = sub_582F0(a1, a2);
	v6 = v4;
	if ((int16_t)v4 > (signed int)a4)
		v6 = a4;
	return v5 * v6;
}

//----- (000583B0) --------------------------------------------------------
int sub_583B0(axis_3d* a1, axis_3d* a2)//2393b0
{
	int v2; // ebx
	int v3; // eax

	v2 = abs(a2->x - a1->x);
	v3 = abs(a2->y - a1->y);
	if (v2 < v3)
		v2 = v3;
	return v2;
}

//----- (000583F0) --------------------------------------------------------
Bit32u sub_583F0_distance_3d(axis_3d* a1, axis_3d* a2)//2393f0
{
	return sub_7277A_radix_3d(
		(Bit16s)(a2->y - a1->y) * (Bit16s)(a2->y - a1->y)
		+ (Bit16s)(a2->x - a1->x) * (Bit16s)(a2->x - a1->x)
		+ (Bit16s)(a2->z - a1->z) * (Bit16s)(a2->z - a1->z));
}

//----- (00058440) --------------------------------------------------------
int sub_58440(axis_3d* a1, axis_3d* a2)//239440
{
	return (int16_t)(a2->y - a1->y) * (int16_t)(a2->y - a1->y)
		+ (int16_t)(a2->x - a1->x) * (int16_t)(a2->x - a1->x)
		+ (int16_t)(a2->z - a1->z) * (int16_t)(a2->z - a1->z);
}

//----- (00058490) --------------------------------------------------------
unsigned int sub_58490_radix_3d_2(axis_3d* a1, axis_3d* a2)//239490
{
	return sub_7277A_radix_3d(
		(int16_t)(a2->x - a1->x) * (int16_t)(a2->x - a1->x)
		+ (int16_t)(a2->y - a1->y) * (int16_t)(a2->y - a1->y));
}

//----- (000584D0) --------------------------------------------------------
int sub_584D0_SQdistX_SQdistY(axis_3d* a1, axis_3d* a2)//2394d0
{
	return (int16_t)(a2->x - a1->x) * (int16_t)(a2->x - a1->x)
		+ (int16_t)(a2->y - a1->y) * (int16_t)(a2->y - a1->y);
}

//----- (000585A0) --------------------------------------------------------
void sub_585A0(type_str_0x6E8E* a1x)//2395a0
{
	//signed int result; // eax

	if (a1x->byte_0x5C_92 >= a1x->byte_0x5D_93)
		return/* 1*/;
	//result = 0;
	a1x->byte_0x5C_92++;
	//return result;
}

//----- (000585D0) --------------------------------------------------------
void sub_585D0()//2395d0
{
	int v0; // esi
	type_str_0x6E8E* ix; // ebx
	int16_t v2; // ax

	v0 = *(Bit16u*)&(unk_D7BD6[0x8d0]);
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (!ix->byte_0x40_64)
		{
			v2 = sub_10C40_getTerrainAlt(&ix->array_0x4C_76);
			if (ix->array_0x4C_76.z < v2 + v0)
				ix->array_0x4C_76.z = v0 + v2;
		}
	}
}

//----- (00058630) --------------------------------------------------------
void sub_58630()//239630
{
	char v0; // bl
	unsigned int v1; // edx
	//int v2; // eax
	//unsigned int v3; // eax
	Bit8u v3x;
	type_str_0x6E8E* v4x; // eax
	uaxis_2d v5x; // cx
	//int v6; // ebx
	//unsigned int v7; // eax
	//unsigned int v8; // edx
	//int v9; // eax
	signed int v10; // esi
	signed int v11; // edi
	char v12; // ah
	uaxis_2d v13x; // bx
	axis_3d v15x; // [esp+0h] [ebp-10h]
	//int16_t v16; // [esp+4h] [ebp-Ch]
	int v17; // [esp+8h] [ebp-8h]
	uaxis_2d v18x; // [esp+Ch] [ebp-4h]

	v0 = 0;
	v1 = 0;
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
	{
		//v2 = (int)x_D41A0_BYTEARRAY_0;
		//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) = 9377 * *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
		D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;
		v1 = D41A0_BYTESTR_0.dword_0x8 % D41A0_BYTESTR_0.word_0xe;
	}
	else if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248 & 7)
		//D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc]+18
	{
		goto LABEL_5;
	}
	v0 = 1;
LABEL_5:
	//v3 = 2124 * v1 + (int)x_D41A0_BYTEARRAY_0 + 11230;
	if (!D41A0_BYTESTR_0.array_0x2BDE[v1].byte_0x006_2BE4_11236)
		v0 = 0;
	if (v0)
	{
		v4x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[v1].word_0x00a_2BE4_11240];
		v15x = v4x->array_0x4C_76;
		sub_57FA0(&v15x, v4x->word_0x1C_28, 0, 2560);
		//LOBYTE(v5) = (uint16_t)(v15x.x + 128) >> 8;
		//v6 = (int)x_D41A0_BYTEARRAY_0;
		//HIBYTE(v5) = (uint16_t)(v15x.y + 128) >> 8;
		v5x._axis_2d.x = (uint16_t)(v15x.x + 128) >> 8;
		v5x._axis_2d.y = (uint16_t)(v15x.y + 128) >> 8;
		//v7 = 9377 * *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
		//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) = v7;
		D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;
		//v8 = D41A0_BYTESTR_0.dword_0x8 % 0x14;
		//v9 = 9377 * *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8);
		v17 = D41A0_BYTESTR_0.dword_0x8 % 0x14;
		//v3 = v9 + 9439;
		D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;
		//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) = v3;
		//LOBYTE(v5) = v5 - 10;
		//HIBYTE(v5) -= 10;
		v5x._axis_2d.x -= 10;
		v5x._axis_2d.y -= 10;
		//LOWORD(v18) = v5;
		v18x.word = v5x.word;
		v10 = D41A0_BYTESTR_0.dword_0x8 % 0x14;
		v18x._axis_2d.y = D41A0_BYTESTR_0.dword_0x8 % 0x14 + v5x._axis_2d.y;
		v3x = 0;
		while (v10 < 20 && !v3x)
		{
			v11 = v17;
			v13x._axis_2d.y = v18x._axis_2d.y;
			v12 = v17;
			v17 = 0;
			v13x._axis_2d.x = v12 + v18x._axis_2d.x;
			while (v11 < 20 && !v3x)
			{
				if (!x_BYTE_10B4E0_terraintype[v13x.word] && !(x_BYTE_13B4E0_angle[v13x.word] & 8))
				{
					v15x.x = v13x._axis_2d.x << 8;
					v15x.y = v13x._axis_2d.y << 8;
					sub_4A190(&v15x, 10, 86);
					v3x = 1;
				}
				v11 += 11;
				v13x._axis_2d.x += 11;
			}
			v10++;
			v18x._axis_2d.y++;
		}
	}
	//return v3;
}

//----- (00058940) --------------------------------------------------------
void sub_58940(/*Bit8u* a1*/)//239940 //init games objectives
{
	//type_str_3659C* v1; // ST00_4
	//Bit8u* v2; // esi
	//Bit8u* v3; // ecx
	//int result; // eax
	//Bit8u* v5; // edx
	//Bit8u* v6; // edi
	//int16_t v7; // dx
	//Bit8u* v8; // edi
	//Bit8u* v9; // edi
	//int v10; // ST0C_4
	//int v11; // ebx
	//Bit8u* v12; // [esp+Ch] [ebp-8h]

	type_str_2FECE* a1x = &D41A0_BYTESTR_0.str_2FECE;
	//v1 = D41A0_BYTESTR_0.struct_0x3659C;
	D41A0_BYTESTR_0.byte_0x36E01 = 0;
	memset(D41A0_BYTESTR_0.struct_0x3659C, 0, 88);
	memset(D41A0_BYTESTR_0.struct_0x3654C, 0, 80);
	//v2 = x_D41A0_BYTEARRAY_0;
	//v3 = x_D41A0_BYTEARRAY_4;	
	D41A0_BYTESTR_0.str_2FECE.word_0x2FED5 = 0;
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
	{
		D41A0_BYTESTR_0.byte_0x36E01 = 1;
		//x_D41A0_BYTEARRAY_0[222540] = 8;
		D41A0_BYTESTR_0.struct_0x3654C[0].str_3654C_byte0 = 8;
		//result = 0;
		//while (result < 8)
		for (int result = 0; result < 8; result++)
		{
			//v11 = 11 * (int16_t)result++;
			//x_D41A0_BYTEARRAY_0[0x3659F + v11] = 1;
			D41A0_BYTESTR_0.struct_0x3659C[result].array_0x3659C_byte[3] = 1;
		}
		//x_D41A0_BYTEARRAY_0 = v2;
	}
	else
	{
		//int result = 0;
		//do
		for (int result = 0; result < 8; result++)
		{
			//if (*(char *)(7 * (int16_t)result + a1 + 25972) != -1)//36442			
			if (a1x->str_0x36442[result].byte_0 != -1)
			{
				switch (D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_3654C_byte0)
				{
				case 1:
				case 2:
				case 4:
				case 6:
				case 7:
				case 9:
					//v5 = a1 + 7 * (int16_t)result;
					if (!a1x->str_0x36442[result].word_1)
						a1x->str_0x36442[result].byte_0 = -1;
					break;
				default:
					break;
				}
			}
			//v6 = a1 + 7 * (int16_t)result;
			if (a1x->str_0x36442[result].byte_0 != -1)
			{
				D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_3654C_byte0 = a1x->str_0x36442[result].byte_0;
				//v7 = 0;
				//while (v7 < 8)
				for(int v7=0;v7<8;v7++)
				{
					//v8 = &x_D41A0_BYTEARRAY_0[11 * v7];					
					D41A0_BYTESTR_0.struct_0x3659C[v7].array_0x3659C_byte[D41A0_BYTESTR_0.byte_0x36E01+3] = 1;
					//v7++;
				}
				//v9 = &x_D41A0_BYTEARRAY_0[10 * x_D41A0_BYTEARRAY_0[224769]];
				//v12 = &x_D41A0_BYTEARRAY_0[10 * x_D41A0_BYTEARRAY_0[224769]];
				switch (D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_3654C_byte0)
				{
				case 0:
					goto LABEL_17;
				case 1:
				case 2:
				case 6:					
					D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_36552_un.ptr16u =	&a1x->array_0x30311[a1x->str_0x36442[result].word_1].str_0x30311_type
						/*
						20
						* *(uint16_t *)(7 * (int16_t)result + a1 + 25973)
						+ (int)a1
						+ 1091*/;
					break;
				case 4:
					//v10 = (int)a1 + 7 * (int16_t)result;
					D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_36552_un.ptr16u = &a1x->array_0x30311[a1x->str_0x36442[result].word_1].str_0x30311_type;
					D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_3654E_axis.x = a1x->str_0x36442[result]._axis_2d.x << 8;//25975
					D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_3654E_axis.y = a1x->str_0x36442[result]._axis_2d.y << 8;//25977
					break;
				case 5:
					D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_3654E_axis.x = a1x->str_0x36442[result]._axis_2d.x << 8;
					D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_3654E_axis.y = a1x->str_0x36442[result]._axis_2d.y << 8;
				LABEL_17:
					D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_36552_un.dword = a1x->str_0x36442[result].word_1;//25973
					break;
				case 7:
					D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_36552_un.dword = a1x->array_0x30311[a1x->str_0x36442[result].word_1].str_0x30311_subtype
						/**(uint16_t *)(a1
						+ 20
						* a1x->str_0x36443[result].word_0
						+ 1093)*/;
					break;
				case 8:
					break;
				case 9:
					D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_36552_un.dword = a1x->array_0x30311[a1x->str_0x36442[result].word_1].word_14
						/**(uint16_t *)(a1
						+ 20
						* a1x->str_0x36443[result].word_0
						+ 1105)*/;
					break;
				default:
					D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.byte_0x36E01].str_36552_un.dword = a1x->str_0x36442[result].word_1 - 1;
					break;
				}
				D41A0_BYTESTR_0.byte_0x36E01++;
			}
			//result++;
		}// while ((int16_t)result < 8);
		//x_D41A0_BYTEARRAY_0 = v2;
	}
	//return result;
}

//----- (00058DA0) --------------------------------------------------------
void sub_58DA0(type_str_0x30311* a1x, type_str_0x6E8E* a2x)//239da0
{
	//int16_t i; // bx
	//Bit8u* v3; // esi
	//Bit8u* v4; // eax
	//char v5; // dl
	//char v6; // al
	//Bit8u* v7; // eax
	//char v8; // dl
	//char v9; // dh
	//int result; // eax

	for (int i = 0;i< D41A0_BYTESTR_0.byte_0x36E01; i++)
	{
		/*result = D41A0_BYTESTR_0.byte_0x36E01;
		if (i >= (int16_t)result)
			break;*/
		//v3 = x_D41A0_BYTEARRAY_0 + 10 * i;
		switch (D41A0_BYTESTR_0.struct_0x3654C[i].str_3654C_byte0)
		{
		case 1:
		case 2:
		case 4:
			//v4 = x_D41A0_BYTEARRAY_0 + 10 * i;
			if (a1x == D41A0_BYTESTR_0.struct_0x3654C[i].str_36552_un.ptr0x30311)
			{
				//v5 = D41A0_BYTESTR_0.struct_0x3654C[i].str_3654D_byte1;
				D41A0_BYTESTR_0.struct_0x3654C[i].str_36552_un.ptr0x6E8E = a2x;
				D41A0_BYTESTR_0.struct_0x3654C[i].str_3654D_byte1 |= 1;
			}
			break;
		case 3:
			if (a2x->byte_0x3F_63 == 3)
			{
				//v6 = a2x->byte_0x40_64;
				if (!a2x->byte_0x40_64 || a2x->byte_0x40_64 == 1)
				{
					//v7 = 10 * i + x_D41A0_BYTEARRAY_0;
					if (a2x->dword_0xA4_164x->word_0x38_56 == D41A0_BYTESTR_0.struct_0x3654C[i].str_36552_un.dword)
					{
						//v8 = D41A0_BYTESTR_0.struct_0x3654C[i].str_3654D_byte1;
						D41A0_BYTESTR_0.struct_0x3654C[i].str_36552_un.ptr0x6E8E = a2x;
						D41A0_BYTESTR_0.struct_0x3654C[i].str_3654D_byte1 |= 1;
					}
				}
			}
			break;
		case 6:
			if (a1x == D41A0_BYTESTR_0.struct_0x3654C[i].str_36552_un.ptr0x30311)
			{
				//v9 = D41A0_BYTESTR_0.struct_0x3654C[i].str_3654D_byte1;
				D41A0_BYTESTR_0.struct_0x3654C[i].str_36552_un.dword = a2x - D41A0_BYTESTR_0.struct_0x6E8E;
				D41A0_BYTESTR_0.struct_0x3654C[i].str_3654D_byte1 |= 1;
			}
			break;
		default:
			continue;
		}
	}
	return;
}

int debugcounter_sub_58F00 = 0;

//----- (00058F00) --------------------------------------------------------
void sub_58F00_game_objectives()//239f00
{
	//Bit8u* v0; // esi
	int v0x;
	//int result; // eax
	//char v2; // dh
	int16_t v3; // bx
	int16_t v4; // cx
	//int v5; // eax
	type_str_164* v6x; // eax
	//int v7; // edi
	type_str_0x6E8E* v8x; // edx
	int16_t j; // ax
	int16_t i; // ax
	int64_t v11; // rax
	int64_t v12; // rax
	int16_t v13; // dx
	int16_t v14; // ax
	int16_t k; // bx
	//Bit8u* v16; // edx
	type_str_0x6E8E* v17x; // [esp+4h] [ebp-44h]
	int v18; // [esp+1Ch] [ebp-2Ch]
	//int v19; // [esp+24h] [ebp-24h]
	int v20; // [esp+28h] [ebp-20h]
	//int v21; // [esp+30h] [ebp-18h]
	int16_t v22; // [esp+34h] [ebp-14h]
	int16_t v23; // [esp+38h] [ebp-10h]
	int v24; // [esp+3Ch] [ebp-Ch]
	char v25; // [esp+40h] [ebp-8h]
	uint8_t v26; // [esp+44h] [ebp-4h]

	debugcounter_sub_58F00++;
	if (0xb == debugcounter_sub_58F00)
	{
		debugcounter_sub_58F00++;
		debugcounter_sub_58F00--;
	}

	if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
		v22 = D41A0_BYTESTR_0.word_0xe;
	else
		v22 = 1;
	v24 = 0;
	//v0 = &x_D41A0_BYTEARRAY_0[0x3659C];//D41A0_BYTESTR_0.struct_0x3659C[0]
	v0x = 0;
	//result = 0;
	if (v22 > 0)
	{
		do
		{
			//v2 = D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[2];
			if (D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[2])//objective pause
			{
				D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[2]--;// = v2 - 1;
			}
			else if (!D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[0])
			{
				v3 = 0;
				v4 = 0;
				v23 = 0;
				v17x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
				while (v3 < D41A0_BYTESTR_0.byte_0x36E01)
				{
					//v19 = 10 * v3;
					//v5 = (10 * v3) + (int)x_D41A0_BYTEARRAY_0;
					//v21 = (int)&v0[v3];
					if (D41A0_BYTESTR_0.struct_0x3654C[v3].str_3654D_byte1 & 2)
					{
						D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] = 2;
						v4 = 1;
						D41A0_BYTESTR_0.struct_0x3654C[v3].str_3654D_byte1 &= 0xFDu;
					}
					else if (D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] == 1)
					{
						switch (D41A0_BYTESTR_0.struct_0x3654C[v3].str_3654C_byte0)
						{
						case 0://adress 239FE8 // minimal count of mana?
							v6x = v17x->dword_0xA4_164x;
							if (v17x->dword_0xA4_164x->word_0x3A_58)
							{//adress 239Ffc
								v18 = *(Bit32u*)&x_D41A0_BYTEARRAY_4_struct.byteindex_242ar[4];
								if (v18 > 0)
								{//23a02d
									//v7 = (int)x_D41A0_BYTEARRAY_0;
									if ((unsigned int)(100 * (v6x->dword_0x13C_316 + x_DWORD_EA3E4[v6x->word_0x3A_58]->dword_0x90_144) / v18)
										>= D41A0_BYTESTR_0.struct_0x3654C[v3].str_36552_un.dword)
									{
										D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] = 2;
										v4 = 1;										
										D41A0_BYTESTR_0.str_2FECE.word_0x2FED5 = 0;
									}
								}
							}
							if (!D41A0_BYTESTR_0.str_2FECE.word_0x2FED5 && v3 == D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[1] && !v4)//D41A0_BYTESTR_0.struct_0x3659C[v0x].str_3659D_byte1
								D41A0_BYTESTR_0.str_2FECE.word_0x2FED5 = D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[1]].str_36552_un.dword
								/*
								*(x_WORD *)(x_D41A0_BYTEARRAY_0
									+ 10 * (uint8_t)v0[1]
									+ 222546)*/;
							break;
						case 1:
							if (D41A0_BYTESTR_0.struct_0x3654C[v3].str_3654D_byte1 & 1
								&& D41A0_BYTESTR_0.struct_0x3654C[v3].str_36552_un.ptr0x6E8E->dword_0x8 <= -1)
							{
								v4 = 1;
								D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] = 2;
							}
							break;
						case 2:
							if (D41A0_BYTESTR_0.struct_0x3654C[v3].str_3654D_byte1 & 1
								&& D41A0_BYTESTR_0.struct_0x3654C[v3].str_36552_un.ptr0x6E8E->dword_0x8 <= -1
								&& !(D41A0_BYTESTR_0.struct_0x3654C[v3].str_36552_un.ptr0x6E8E->byte_0x3D_61))
							{
								v4 = 1;
								D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] = 2;
							}
							break;
						case 3:
							if (!D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.struct_0x3654C[v3].str_36552_un.ptr0x6E8E->dword_0xA4_164x->word_0x38_56].byte_0x006_2BE4_11236)
							{
								v4 = 1;
								D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] = 2;
							}
							break;
						case 4:
							if (D41A0_BYTESTR_0.struct_0x3654C[v3].str_3654D_byte1 & 1)
							{
								v20 = D41A0_BYTESTR_0.struct_0x3654C[v3].str_36552_un.dword;
								if (v17x == x_DWORD_EA3E4[*(uint16_t *)(v20 + 40)])
								{
									v11 = D41A0_BYTESTR_0.struct_0x3654C[v3].str_3654E_axis.x - (signed int)*(int16_t *)(v20 + 76);
									if ((signed int)((HIDWORD(v11) ^ v11) - HIDWORD(v11)) <= 768										
										&& abs(D41A0_BYTESTR_0.struct_0x3654C[v3].str_3654E_axis.y - *(int16_t *)(v20 + 78)) <= 768)
									{
										v4 = 1;
										D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] = 2;
									}
								}
							}
							break;
						case 5:							
							if (v3 == D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[1])
							{								
								v12 = D41A0_BYTESTR_0.struct_0x3654C[v3].str_3654E_axis.x - (Bit16s)v17x->array_0x4C_76.x;
								if ((signed int)((HIDWORD(v12) ^ v12) - HIDWORD(v12)) <= 768
									&& abs(D41A0_BYTESTR_0.struct_0x3654C[v3].str_3654E_axis.y - (Bit16s)v17x->array_0x4C_76.y) <= 768)
								{
									v4 = 1;
									D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] = 2;//archieve point
								}
							}
							break;
						case 6:
							if (v3 == D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[1] && D41A0_BYTESTR_0.struct_0x3654C[v3].str_3654D_byte1 & 1)
							{
								v13 = 0;
								while (D41A0_BYTESTR_0.array_0x2BDE[v24].dword_0x3E6_2BE4_12228.str_0x1AC_428.word_2BDE_12658[v13] != D41A0_BYTESTR_0.struct_0x3654C[v3].str_36552_un.dword)
								{
									if (++v13 >= 8)
										goto LABEL_72;
								}
								v4 = 1;
								D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] = 2;
							}
							break;
						case 7:
							if (v3 == D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[1] && !x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[D41A0_BYTESTR_0.struct_0x3654C[v3].str_36552_un.dword])
							{
								v4 = 1;
								D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] = 2;//killed creatures
							}
							break;
						case 8:
							if (v3 == D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[1])
							{
								v4 = 1;
								for (i = 0; i < D41A0_BYTESTR_0.word_0xe; i++)
								{									
									if (i != (x_WORD)v24 && D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x006_2BE4_11236)
									{
										v4 = 0;
										break;
									}
								}
								if (v4)
									D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] = 2;
							}
							break;
						case 9:
							if (v3 == D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[1] && !(x_D41A0_BYTEARRAY_4_struct.byteindex_26 & 0xF))
							{
								v8x = x_D41A0_BYTEARRAY_4_struct.dword_38527;
								v25 = 0;
								while (v8x > x_DWORD_EA3E4[0] && !v25)
								{
									v26 = 0;
									for (j = D41A0_BYTESTR_0.struct_0x3654C[v3].str_36552_un.dword;
										j && !v25 && v26 < 8u;
										j = x_WORD_D93C0_bldgprmbuffer[2+1+4 * j])
									{
										if (j == v8x->byte_0x46_70)
											v25 = 1;
										v26++;
									}
									v8x = v8x->next_0;
								}
								if (!v25)
								{
									v4 = 1;
									D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[v3+3] = 2;
								}
							}
							break;
						default:
							break;
						}
					}
				LABEL_72:
					if (v4 && v3 == D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[1])
						v23 = 1;
					v3++;
				}
				if (v4)
				{
					sub_88B20();
					v14 = 1;
					for (k = 0; k < D41A0_BYTESTR_0.byte_0x36E01; k++)
					{
						if (D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[k+3] == 1)
						{
							v14 = 0;
							D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[1] = k;
							break;
						}
					}
					D41A0_BYTESTR_0.struct_0x3659C[v0x].array_0x3659C_byte[0] = v14;
					if (v23 || v14)
					{
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10 && (x_WORD)v24 != D41A0_BYTESTR_0.word_0xc)
						{
							D41A0_BYTESTR_0.array_0x2BDE[v24].word_0x04d_2C2B_11307 = 60;
							D41A0_BYTESTR_0.array_0x2BDE[v24].word_0x04f_2C2D_11309 = 4;							
							if (v14)
								sprintf(D41A0_BYTESTR_0.array_0x2BDE[v24].array_0x01c_2BFA_11258, (char *)x_DWORD_E9C4C_langindexbuffer[431]);//Has Completed All Objectives.
							else
								sprintf(D41A0_BYTESTR_0.array_0x2BDE[v24].array_0x01c_2BFA_11258, (char *)x_DWORD_E9C4C_langindexbuffer[430]);//Has Completed Objective.
						}
						if ((x_WORD)v24 == D41A0_BYTESTR_0.word_0xc)
							D41A0_BYTESTR_0.byte_0x36E02 = 1;
					}
				}
			}
			//v0 += 11;
			v0x++;
			v24++;
			//result = ++v24;
		} while ((int16_t)v24 < v22);
	}
	//return result;
}

//----- (000595C0) --------------------------------------------------------
char sub_595C0(int16_t a1)//23a5c0
{
	char result; // al
	//Bit8u* v2; // ebx

	result = -1;
	if (D41A0_BYTESTR_0.byte_0x36E0B & 1)
		return -3;
	//v2 = &x_D41A0_BYTEARRAY_0[0x3659C + 11 * a1];
	if (!D41A0_BYTESTR_0.struct_0x3659C[a1].array_0x3659C_byte[0])
		result = D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a1].array_0x3659C_byte[1]].str_3654C_byte0;
	return result;
}

//----- (00059610) --------------------------------------------------------
char sub_59610(type_str_0x6E8E** a1y, int16_t a2)//23a610
{
	//int v2; // eax
	//Bit8u* v3; // ecx
	//Bit8u* v4; // ebx
	char v5; // dl
	//uint8_t v6; // dh
	//int v7; // eax
	//Bit8u* v8; // ebx
	//uint8_t v9; // al
	//Bit8u* v10; // eax
	//Bit8u* v11; // eax

	//v2 = 11 * a2;
	//v3 = x_D41A0_BYTEARRAY_0;
	//v4 = &x_D41A0_BYTEARRAY_0[0x3659C];
	*a1y = 0;
	v5 = 0;
	//v6 = D41A0_BYTESTR_0.struct_0x3659C[a2].str_3659D_byte1;
	if (D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[0])
		return v5;
	//v7 = 10 * v6;
	//v8 = x_D41A0_BYTEARRAY_0 + 10 * v6;
	//v9 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + 10 * v6 + 222540);
	if(D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_3654C_byte0 < 4u)
	{
		if (D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_3654C_byte0 < 1u || D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_3654C_byte0 > 2u)
			return v5;
	}
	else if (D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_3654C_byte0 > 4u)
	{
		if (D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_3654C_byte0 == 6 && D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_3654D_byte1 & 1)
		{
			//v11 = x_DWORD_EA3E4[*(x_DWORD *)(v8 + 222546)];
			v5 = 1;
			*a1y = x_DWORD_EA3E4[D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_36552_un.dword];
		    return v5;
		}
		return v5;
	}
	//v10 = x_D41A0_BYTEARRAY_0 + 10 * v6;
	if (D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_3654D_byte1 & 1)
	{
		//v11 = (Bit8u*)*(x_DWORD *)(v10 + 222546);
	//LABEL_12:
		v5 = 1;
		*a1y = D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_36552_un.ptr0x6E8E;
	}
	return v5;
}

//----- (000596C0) --------------------------------------------------------
char sub_596C0(axis_3d* a1, int16_t a2)//23a6c0
{
	//Bit8u* v2; // ebx
	//Bit8u* v3; // ecx
	char v4; // dl
	//int v5; // eax
	//Bit8u* v6; // edi
	//uint8_t v7; // al

	//v2 = x_D41A0_BYTEARRAY_0;
	a1->x = -1;
	a1->y = -1;
	//v3 = &x_D41A0_BYTEARRAY_0[11 * a2 + 0x3659C];
	a1->z = -1;
	v4 = 0;
	if (!D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[0])
	{
		//v5 = 10 * D41A0_BYTESTR_0.struct_0x3659C[a2].str_3659D_byte1;
		//v6 = x_D41A0_BYTEARRAY_0 + v5;
		//v7 = *(x_BYTE *)(x_D41A0_BYTEARRAY_0 + v5 + 222540);
		if (D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_3654C_byte0 >= 4u && D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_3654C_byte0 <= 5u)
		{			
			a1->x = D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_3654E_axis.x;
			v4 = 1;
			a1->y = D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[a2].array_0x3659C_byte[1]].str_3654E_axis.y;
		}
	}
	return v4;
}

//----- (00059760) --------------------------------------------------------
void sub_59760(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//23a760
{
	//int result; // eax
	signed int v3; // esi
	signed int v4; // ecx
	//Bit8u* i; // ebx
	int ix;
	int j; // edx
	//Bit8u* v7; // eax

	//result = (int)x_D41A0_BYTEARRAY_4;
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
		v3 = D41A0_BYTESTR_0.word_0xe;
	else
		v3 = 1;
	v4 = 0;
	//for (i = &x_D41A0_BYTEARRAY_0[0x3659C]; v4 < v3; i += 11)
	for (ix = 0; v4 < v3; ix++)
	{		
		if (!D41A0_BYTESTR_0.struct_0x3659C[ix].array_0x3659C_byte[0])
		{
			for (j = 0; ; j++)
			{
				//result = D41A0_BYTESTR_0.byte_0x36E01;
				if (j >= D41A0_BYTESTR_0.byte_0x36E01)
					break;
				//if (i[j + 3] == 1)
				if(D41A0_BYTESTR_0.struct_0x3659C[ix].array_0x3659C_byte[j+3]==1)
				{
					//v7 = x_D41A0_BYTEARRAY_0 + 10 * j;					
					if (D41A0_BYTESTR_0.struct_0x3654C[j].str_3654C_byte0 == 2 && D41A0_BYTESTR_0.struct_0x3654C[j].str_36552_un.ptr0x6E8E == a1x)
					{
						if (D41A0_BYTESTR_0.struct_0x3654C[j].str_3654D_byte1 & 1)
							D41A0_BYTESTR_0.struct_0x3654C[j].str_36552_un.ptr0x6E8E = a2x;
					}
				}
			}
		}
		v4++;
	}
	//return result;
}

//----- (00059820) --------------------------------------------------------
void sub_59820()//23a820
{
	char v0; // dl
	//int v1; // ebx
	//Bit8u* v2; // eax
	uint8_t v3; // ch
	char v4; // cl
	//int v5; // ebx
	//uint16_t v6; // dx
	//Bit8u* v7; // eax
	Bit8u v8; // bx
	uint8_t v9; // al
	char v10; // cl
	int v11; // ebx

	v0 = D41A0_BYTESTR_0.byte_0x36E04;
	if (v0)
	{
		D41A0_BYTESTR_0.byte_0x36E04 = v0 - 1;
		if (v0 == 1)
			sub_88BA0();
	}
	if (x_D41A0_BYTEARRAY_4_struct.setting_38545 & 0x40 && sub_86180(x_WORD_1803EC) == 256)
		sub_59AF0_sound_proc9();
	//v1 = (int)x_D41A0_BYTEARRAY_4;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_51 >= 3u)
	{
		//v2 = x_D41A0_BYTEARRAY_0;
		v3 = D41A0_BYTESTR_0.byte_0x36E02;
		if (v3)
		{
			if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
			{
			LABEL_38:
				D41A0_BYTESTR_0.byte_0x36E02 = 0;
				return;
			}
			if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x40)
			{
				if (v3 < 7u)
				{
					if (v3 == 1)
					{
						D41A0_BYTESTR_0.byte_0x36E02++;
						return;
					}
					goto LABEL_32;
				}
				if (v3 > 7u)
				{
					if (v3 > 8u)
					{
						if (v3 != -56)
						{
						LABEL_32:
							D41A0_BYTESTR_0.byte_0x36E02++;
							return;
						}
						goto LABEL_38;
					}					
					v4 = D41A0_BYTESTR_0.byte_0x36E0B;
					D41A0_BYTESTR_0.byte_0x36E02 = v3 + 1;
					if (v4 & 1)
					{
						x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 8;						
						sub_86F20(D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E4_2BE4_12226);
						sub_59A50_sound_proc8();
						return;
					}
					//v5 = D41A0_BYTESTR_0.word_0xc;
					if (D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[1])
						sub_6E450_distance_sound(D41A0_BYTESTR_0.word_0xc, -1, 61);
					//v6 = x_D41A0_BYTEARRAY_4_struct.levelnumber_43;
					if (x_D41A0_BYTEARRAY_4_struct.levelnumber_43w >= 0x1Eu && x_D41A0_BYTEARRAY_4_struct.levelnumber_43w <= 0x22u)
					{
						if (!D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[0])
						{
							v9 = 4;
							v8 = 0;
							goto LABEL_30;
						}
						v8 = 10;
					}
					else
					{
						//v7 = &x_D41A0_BYTEARRAY_0[11 * D41A0_BYTESTR_0.word_0xc];
						v8 = x_D41A0_BYTEARRAY_4_struct.levelnumber_43w;
						if (!D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[0])
						{
							v9 = D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[1] + 1;
						LABEL_30:
							x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 8;
							sub_86EB0(v8, v9, 1);
							sub_59A50_sound_proc8();
							return;
						}
					}
					v9 = 9;
					goto LABEL_30;
				}
				D41A0_BYTESTR_0.byte_0x36E02 = 8;
				x_D41A0_BYTEARRAY_4_struct.byteindex_180 = 8;
				goto LABEL_36;
			}
			D41A0_BYTESTR_0.byte_0x36E02 = 0;
			v10 = D41A0_BYTESTR_0.byte_0x36E0B;
			D41A0_BYTESTR_0.byte_0x36E04 = -56;
			if (v10 & 1)
			{
			LABEL_36:
				sub_6E450_distance_sound(D41A0_BYTESTR_0.word_0xc, -1, 41);
				return;
			}
			v11 = D41A0_BYTESTR_0.word_0xc;
			if (D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[1])
				sub_6E450_distance_sound(v11, -1, 61);
		}
	}
}

//----- (00059A50) --------------------------------------------------------
int sub_59A50_sound_proc8()//23aa50
{
	int result; // eax

	if (x_BYTE_D4B7A == 1)
	{
		//sub_92DC0_AIL_release_timer_handle(x_DWORD_F4940);
		x_BYTE_D4B7A = 0;
	}
	sub_8E470_sound_proc17_volume(x_D41A0_BYTEARRAY_4_struct.wordindex_6 / 3);
	x_BYTE_D4B78 = x_D41A0_BYTEARRAY_4_struct.wordindex_6 / 3;
	sub_8E410_sound_proc16_xmidivolume((x_D41A0_BYTEARRAY_4_struct.wordindex_8 / 3));
	result = x_D41A0_BYTEARRAY_4_struct.wordindex_8 / 3;
	x_BYTE_D4B79 = x_D41A0_BYTEARRAY_4_struct.wordindex_8 / 3;
	x_D41A0_BYTEARRAY_4_struct.setting_38545 |= 0x40u;
	return result;
}

//----- (00059AF0) --------------------------------------------------------
void sub_59AF0_sound_proc9()//23aaf0
{
	//int result; // eax

	sub_86860_speak_Sound(x_WORD_1803EC);
	//x_DWORD_F4940 = sub_92600_AIL_register_timer(sub_59B50_sound_proc10);
	//sub_92930_AIL_set_timer_frequency(x_DWORD_F4940, 0x78u);
	//sub_92BA0_AIL_start_timer(x_DWORD_F4940);
	x_BYTE_D4B7A = 1;
	//result = (int)x_D41A0_BYTEARRAY_4;
	x_D41A0_BYTEARRAY_4_struct.setting_38545 &= 0xBFu;
	//return result;
}

//----- (00059B50) --------------------------------------------------------
void sub_59B50_sound_proc10(HMDIDRIVER user)//23ab50
{
	int16_t v0; // bx
	int16_t v1; // dx

	v0 = x_D41A0_BYTEARRAY_4_struct.wordindex_6;
	if ((uint8_t)x_BYTE_D4B78 != v0
		|| (HIBYTE(v1) = HIBYTE(v0), LOBYTE(v1) = x_BYTE_D4B79, v1 != x_D41A0_BYTEARRAY_4_struct.wordindex_8))
	{
		if ((int16_t)(uint8_t)x_BYTE_D4B78 < x_D41A0_BYTEARRAY_4_struct.wordindex_6)
			sub_8E470_sound_proc17_volume((uint8_t)++x_BYTE_D4B78);
		if ((int16_t)(uint8_t)x_BYTE_D4B79 < x_D41A0_BYTEARRAY_4_struct.wordindex_8)
			sub_8E410_sound_proc16_xmidivolume(++x_BYTE_D4B79);
	}
	else
	{
		x_BYTE_D4B7A = 0;
		//sub_92DC0_AIL_release_timer_handle(x_DWORD_F4940);
	}
}

//----- (00059BF0) --------------------------------------------------------
void sub_59BF0_sound_proc11_volume()//23abf0
{
	if (x_BYTE_D4B7A == 1)
	{
		//sub_92DC0_AIL_release_timer_handle(x_DWORD_F4940);
		x_BYTE_D4B7A = 0;
	}
	sub_8E470_sound_proc17_volume(x_D41A0_BYTEARRAY_4_struct.wordindex_6);
	sub_8E410_sound_proc16_xmidivolume(x_D41A0_BYTEARRAY_4_struct.wordindex_8);
}

//----- (00059C40) --------------------------------------------------------
void sub_59C40_getTerrtoZ(type_str_0x6E8E* a1x)//23ac40
{
	//int result; // eax

	//result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	//return result;
}

//----- (00059C60) --------------------------------------------------------
int sub_59C60(type_str_0x6E8E* a1x)//23ac60
{
	int result; // eax

	result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	a1x->array_0x4C_76.z = result;
	return result;
}

//----- (00059C80) --------------------------------------------------------
int sub_59C80(type_str_0x6E8E* a1x)//23ac80
{
	//int result; // eax
	//int v2; // ebx
	type_str_0x6E8E* ix; // ebx
	int v4; // edi
	int v5; // eax

	if (x_D41A0_BYTEARRAY_4_struct.setting_38545 & 4)
	{
		a1x->struct_byte_0xc_12_15.byte[0] |= 1u;
		sub_57F10(a1x);
	}
	else
	{
		a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		//v2 = (int)x_D41A0_BYTEARRAY_4;
		//*(x_WORD *)(a1 + 80) = result;
		for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (!ix->byte_0x40_64 && ix->dword_0x8 >= 0)
			{
				//result = sub_106C0(i, a1);
				if (sub_106C0(ix, a1x))
				{
					v4 = ix->dword_0xA4_164x->word_0x38_56;
					if (v4 == D41A0_BYTESTR_0.word_0xc)
					{
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
							v5 = 50;
						else
							v5 = 4;
						sub_6E090(&ix->dword_0xA4_164x->str_611, v5);
						sub_6E450_distance_sound(v4, -1, 63);
						if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
							sub_6DBD0();
						else
							sub_6DB50(0, 1);
					}
					sub_57F10(a1x);
				}
			}
		}
	}
	//return result;
	return 1;
}

int debugcounter_23adc0 = 0;

//----- (00059DC0) --------------------------------------------------------
char sub_59DC0(type_str_0x6E8E* a1x)//23adc0
{
	type_str_0x6E8E* v1x; // eax
	int16_t v2; // dx
	int16_t v3; // si
	type_str_0x6E8E* v4x; // eax
	int16_t v5; // ST0C_2
	int16_t v6; // ST08_2
	int16_t v7; // ax
	int16_t v8; // ax
	axis_3d v10x; // [esp+0h] [ebp-Ch]
	//int16_t v11; // [esp+4h] [ebp-8h]
	char v12; // [esp+8h] [ebp-4h]

	if (debugcounter_23adc0 >= 5)
	{
		debugcounter_23adc0++;
		debugcounter_23adc0--;
	}
	debugcounter_23adc0++;

	v12 = 0;
	v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
	if (v1x->dword_0x8 < 0 || v1x->struct_byte_0xc_12_15.byte[1] & 4)
		return 1;
	if (a1x->dword_0x10_16 <= 5)
	{
		x_WORD_EB398ar = v1x->array_0x4C_76;
		a1x->word_0x1C_28 = v1x->word_0x1C_28;
		v2 = a1x->dword_0x10_16;
		v3 = v1x->word_0x1E_30;
		a1x->word_0x1E_30 = v3;
		sub_57FA0(&x_WORD_EB398ar, v1x->word_0x1C_28, v3 - 16 * v2, 384);
		sub_57CF0(a1x, &x_WORD_EB398ar);
		goto LABEL_10;
	}
	v4x = x_DWORD_EA3E4[a1x->word_0x26_38];
	if (v4x->dword_0x8 < 0 || v4x->struct_byte_0xc_12_15.byte[1] & 4)
	{
		v12 = 1;
		goto LABEL_10;
	}
	v10x = v4x->array_0x4C_76;
	sub_57FA0(&v10x, v4x->word_0x1C_28, 0, 384);
	x_WORD_EB398ar = a1x->array_0x4C_76;
	v5 = 32 * (a1x->dword_0x10_16 - 5);
	v6 = sub_58210_radix_tan(&a1x->array_0x4C_76, &v10x);
	v7 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v10x);
	sub_57FA0(&x_WORD_EB398ar, v7, v6, v5);
	sub_57CF0(a1x, &x_WORD_EB398ar);
	v8 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	if (a1x->array_0x4C_76.z >= v8 + 64)
	{
	LABEL_10:
		a1x->dword_0x10_16++;
		return v12;
	}
	a1x->array_0x4C_76.z = v8;
	v12 = 1;
	a1x->dword_0x10_16++;
	return v12;
}

//----- (00059F60) --------------------------------------------------------
void sub_59F60(type_str_0x6E8E* a1x)//23af60
{
	unsigned int v1; // eax
	//uaxis_2d v2x; // eax
	char v3; // al
	uaxis_2d v4x; // bx
	uaxis_2d v5x; // cx
	signed int v6; // eax
	uaxis_2d v7x; // bx
	uaxis_2d v8x; // cx
	signed int v9; // edx
	uaxis_2d v10x; // di
	int v11; // eax
	uaxis_2d v12x; // bx
	signed int v13; // edx
	uaxis_2d v14x; // cx
	uaxis_2d v15x; // di
	int v16; // edi
	uaxis_2d v17x; // bx
	uaxis_2d v18x; // cx
	uint8_t v19; // dh
	signed int v20; // edx
	uaxis_2d v21x; // bx
	uaxis_2d v22x; // ax
	uaxis_2d v23x; // cx
	char v24; // al
	//uaxis_2d v25x; // bx
	char v26; // cl
	uaxis_2d v27x; // ax
	int v28; // eax
	uaxis_2d v29x; // bx
	signed int v30; // edx
	uaxis_2d v31x; // cx
	uaxis_2d v32x; // di
	uaxis_2d v33x; // bx
	uaxis_2d v34x; // cx
	uaxis_2d v35x; // ax
	uaxis_2d v36x; // bx
	signed int v37; // eax
	signed int v38; // edx
	uaxis_2d v39x; // cx
	uaxis_2d v40x; // di
	uaxis_2d v41x; // bx
	signed int v42; // eax
	int v43; // edx
	uaxis_2d v44x; // cx
	uaxis_2d v45x; // di
	uaxis_2d v46x; // bx
	signed int v47; // edi
	uaxis_2d v48x; // cx
	uint8_t v49; // dh
	signed int v50; // edx
	uaxis_2d v51x; // bx
	uaxis_2d v52x; // ax
	uaxis_2d v53x; // cx
	char v54; // al
	char v55; // cl
	uaxis_2d v56x; // ax
	signed int v57; // eax
	uaxis_2d v58x; // bx
	int v59; // edx
	uaxis_2d v60x; // cx
	uaxis_2d v61x; // di
	char v62; // al
	int v63; // eax
	uaxis_2d v64x; // bx
	uaxis_2d v65x; // cx
	signed int v66; // edx
	uaxis_2d v67x; // di
	int v68; // edx
	uaxis_2d v69x; // bx
	signed int v70; // eax
	uaxis_2d v71x; // cx
	uaxis_2d v72x; // di
	int v73; // edx
	uaxis_2d jx; // bx
	signed int v75; // eax
	uaxis_2d v76x; // cx
	uaxis_2d v77x; // di
	uaxis_2d v78x; // bx
	signed int v79; // edx
	int v80; // eax
	uaxis_2d v81x; // cx
	uaxis_2d v82x; // di
	signed int v83; // edx
	uaxis_2d v84x; // bx
	int v85; // eax
	uaxis_2d v86x; // cx
	uaxis_2d v87x; // di
	signed int v88; // edx
	uaxis_2d v89x; // bx
	int v90; // eax
	uaxis_2d v91x; // cx
	uaxis_2d v92x; // di
	char v93; // al
	int v94; // eax
	uaxis_2d v95x; // ebx
	uaxis_2d v96x; // dx
	char v97; // cl
	uaxis_2d v98x; // dx
	int v99; // edx
	uaxis_2d kx; // bx
	uint8_t v101; // ch
	uint8_t v102; // ch
	int v103; // eax
	uaxis_2d v104x; // ebx
	uaxis_2d v105x; // dx
	char v106; // cl
	uaxis_2d v107x; // ebx
	uaxis_2d v108x; // dx
	int v109; // edx
	uaxis_2d v110x; // ebx
	uint8_t v111; // ch
	uaxis_2d v112x; // ebx
	uint8_t v113; // ch
	char v114; // al
	signed int v115; // edx
	uaxis_2d lx; // bx
	uaxis_2d v117x; // ax
	uaxis_2d v118x; // cx
	char v119; // al
	uaxis_2d v120x; // bx
	char v121; // cl
	uaxis_2d v122x; // ax
	uaxis_2d v123x; // bx
	signed int v124; // edx
	uaxis_2d v125x; // ax
	uaxis_2d v126x; // cx
	char v127; // al
	uaxis_2d v128x; // bx
	char v129; // cl
	uaxis_2d v130x; // ax
	//Bit8u* v131; // edx
	char v132; // al
	int v133; // edx
	uaxis_2d mx; // bx
	uaxis_2d v135x; // ax
	int v136; // ecx
	int v137; // edi
	int v138; // ecx
	int v139; // edx
	uaxis_2d v140x; // ebx
	int v141; // ecx
	int v142; // edi
	uaxis_2d v143x; // ebx
	int v144; // ecx
	int16_t v145; // di
	char v146; // al
	int v147; // edx
	uaxis_2d v148x; // bx
	uaxis_2d v149x; // ax
	uaxis_2d v150x; // di
	uaxis_2d v151x; // di
	uaxis_2d v152x; // di
	char v153; // ch
	char v154; // cl
	uaxis_2d v155x; // di
	char v156; // ah
	int v157; // edx
	uaxis_2d v158x; // bx
	uint8_t v159; // ch
	uint8_t v160; // ch
	uint8_t v161; // ch
	uint8_t v162; // ch
	int v163; // edx
	uaxis_2d v164x; // bx
	uaxis_2d v165x; // bx
	uaxis_2d v166x; // ax
	char v167; // dh
	uaxis_2d v168x; // ax
	char v169; // cl
	signed int v170; // eax
	uaxis_2d v171x; // cx
	uaxis_2d v172x; // di
	int v173; // edx
	uaxis_2d v174x; // ebx
	uaxis_2d v175x; // ax
	uaxis_2d v176x; // ebx
	uaxis_2d v177x; // di
	uaxis_2d v178x; // di
	uaxis_2d v179x; // di
	char v180; // ch
	char v181; // cl
	uaxis_2d v182x; // di
	char v183; // ah
	int v184; // edx
	uaxis_2d v185x; // ebx
	uaxis_2d v186x; // ebx
	uint8_t v187; // ch
	uaxis_2d v188x; // ebx
	uint8_t v189; // ch
	uaxis_2d v190x; // ebx
	uint8_t v191; // ch
	uaxis_2d v192x; // ebx
	uint8_t v193; // ch
	signed int v194; // eax
	uaxis_2d v195x; // bx
	uaxis_2d v196x; // bx
	uaxis_2d v197x; // ax
	uaxis_2d v198x; // edx
	uaxis_2d v199x; // cx
	uaxis_2d v200x; // di
	signed int v201; // [esp+4h] [ebp-1Ch]
	int v202; // [esp+8h] [ebp-18h]
	signed int v203; // [esp+Ch] [ebp-14h]
	int i; // [esp+10h] [ebp-10h]
	signed int v205; // [esp+14h] [ebp-Ch]
	int v206; // [esp+18h] [ebp-8h]
	uaxis_2d v207x; // [esp+1Ch] [ebp-4h]
	uaxis_2d v208x; // [esp+1Ch] [ebp-4h]

	v1 = a1x->dword_0x8;
	if (v1 < 1)
	{
		if (!v1)
		{
			/*LOBYTE(v208) = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
			v2 = (a1x->array_0x4C_76.y + 128) >> 8;
			HIBYTE(v208) = (uint16_t)(a1x->array_0x4C_76.y + 128) >> 8;
			BYTE1(v2) = a1x->byte_0x46_70;*/
			v208x._axis_2d.x= (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
			v208x._axis_2d.y = (uint16_t)(a1x->array_0x4C_76.y + 128) >> 8;
			a1x->dword_0x10_16++;
			if (a1x->byte_0x46_70)
				//HIBYTE(v208) = v2 - 1;
				v208x._axis_2d.y--;
			else
				v208x._axis_2d.x--;
			v3 = a1x->byte_0x46_70;
			if (v3)
			{
				if (v3 == 1)
				{
					v33x.word = v208x.word;
					v201 = 0;
					do
					{
						v34x.word = v33x.word;
						for (i = 0; i < a1x->dword_0x10_16; i++)
						{
							if (x_BYTE_10B4E0_terraintype[v34x.word] != 8
								/*|| (LOBYTE(v35) = v33,
									HIBYTE(v35) = HIBYTE(v34) + 1,*/
									|| (v35x._axis_2d.x = v33x._axis_2d.x,
										v35x._axis_2d.y = v34x._axis_2d.y+1,
									abs(x_BYTE_11B4E0_height[v34x.word] - x_BYTE_11B4E0_height[v35x.word]) > 30))
							{
								x_BYTE_11B4E0_height[v34x.word] += 48;
							}
							//HIBYTE(v34)++;
							v34x._axis_2d.y++;
						}
						v33x.word--;
						v201++;
					} while (v201 < 2);
					v36x.word = v208x.word;//23b26c
					v37 = 0;
					while (v37 < 3)
					{
						v38 = -1;
						v39x.word = v36x.word - 256;
						while (v38 < a1x->dword_0x10_16)
						{
							v40x.word = v39x.word;
							v38++;
							//HIBYTE(v39)++;
							v39x._axis_2d.y++;
							x_BYTE_10B4E0_terraintype[v40x.word] = 8;
							x_BYTE_13B4E0_angle[v40x.word] = 1;
						}
						v37++;
						v36x.word--;
					}
					if (x_BYTE_D41B6)//23b2a9
					{
						v46x.word = v208x.word + 1;
						v47 = 0;
						while (v47 < 4)
						{
							v202 = -1;
							v48x.word = v46x.word - 256;
							while (a1x->dword_0x10_16 + 1 > v202)
							{
								v49 = x_BYTE_11B4E0_height[v48x.word];
								if ((uint8_t)x_BYTE_14B4E0[v48x.word] > v49)
								{
									x_BYTE_13B4E0_angle[v48x.word] &= 0xF7u;
								}
								else
								{
									x_BYTE_14B4E0[v48x.word] = v49 - 1;
									x_BYTE_13B4E0_angle[v48x.word] |= 8u;
								}
								//HIBYTE(v48)++;
								v48x._axis_2d.y++;
								v202++;
							}
							v47++;
							//v46--;
							v46x._axis_2d.x--;
						}
					}
					else
					{
						v41x.word = v208x.word + 1;
						v42 = 0;
						while (v42 < 4)
						{
							v43 = -1;
							v44x.word = v41x.word - 256;
							while (v43 < a1x->dword_0x10_16 + 1)
							{
								v45x.word = v44x.word;
								v43++;
								//HIBYTE(v44)++;
								v44x._axis_2d.y++;
								x_BYTE_13B4E0_angle[v45x.word] &= 0xF7u;
							}
							v42++;
							v41x.word--;
						}
					}
					v50 = -1;//23b33d
					//v51x.word = v208x.word - 256;
					v51x.word = v208x.word - 256;
					while (v50 < a1x->dword_0x10_16)
					{
						//LOBYTE(v51) = v51 + 1;
						//HIBYTE(v51)++;
						v51x._axis_2d.x++;
						v51x._axis_2d.y++;
						v52x.word = v51x.word;
						//LOBYTE(v51) = v51 - 2;
						//HIBYTE(v51) -= 2;
						v51x._axis_2d.x-=2;
						v51x._axis_2d.y -= 2;
						v53x.word = v51x.word;
						//LOBYTE(v51) = v51 + 1;
						v51x._axis_2d.x++;
						v54 = x_BYTE_11B4E0_height[v53x.word] - x_BYTE_11B4E0_height[v52x.word] + 32;
						//HIBYTE(v51)++;
						v51x._axis_2d.y++;
						if (v54 >= 28)
						{
							if (v54 > 40)
								v54 = (v54 & 7) + 40;
						}
						else
						{
							v54 = (v54 & 3) + 28;
						}
						if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
							v55 = 32 - v54 + 32;
						else
							v55 = v54;
						v56x.word = v51x.word;
						v50++;
						//HIBYTE(v51)++;
						v51x._axis_2d.y++;
						x_BYTE_12B4E0_shading[v56x.word] = v55;
					}
					v57 = -3;
					v58x.word = v208x.word - 3;
					while (v57 < 6)
					{
						v59 = -3;
						v60x.word = v58x.word - 768;
						while (v59 < a1x->dword_0x10_16 + 3)
						{
							v61x.word = v60x.word;
							v59++;
							//HIBYTE(v60)++;
							v60x._axis_2d.y++;
							x_BYTE_13B4E0_angle[v61x.word] |= 0x80u;
						}
						v57++;
						v58x.word++;
					}
				}
				a1x->word_0x2A_42 = 48;
				a1x->dword_0x8 = 3;
			}
			else
			{
				v206 = 0;
				v4x.word = v208x.word;
				while (v206 < a1x->dword_0x10_16)
				{
					v205 = 0;
					v5x.word = v4x.word;
					while (v205 < 2)
					{
						if (x_BYTE_10B4E0_terraintype[v5x.word] != 8
							|| abs(x_BYTE_11B4E0_height[v5x.word] - x_BYTE_11B4E0_height[v5x.word+1]) > 30)
						{
							x_BYTE_11B4E0_height[v5x.word] += 48;
						}
						//HIBYTE(v5)--;
						v5x._axis_2d.y--;
						v205++;
					}
					//v4++;
					v4x.word++;
					v206++;
				}
				v6 = -1;
				v7x.word = v208x.word - 1;
				while (v6 < a1x->dword_0x10_16)
				{
					v8x.word = v7x.word;
					v9 = 0;
					while (v9 < 3)
					{
						v10x.word = v8x.word;
						v9++;
						//HIBYTE(v8)--;
						v8x._axis_2d.y--;
						x_BYTE_10B4E0_terraintype[v10x.word] = 8;
						x_BYTE_13B4E0_angle[v10x.word] = 1;
					}
					v6++;
					//v7++;
					v7x.word++;
				}
				if (x_BYTE_D41B6)//092	
				{
					v16 = -1;
					v17x.word = v208x.word - 1;
					while (v16 < a1x->dword_0x10_16 + 1)
					{
						v203 = 0;
						v18x.word = v17x.word + 256;
						while (v203 < 4)
						{
							v19 = x_BYTE_11B4E0_height[v18x.word];
							if ((uint8_t)x_BYTE_14B4E0[v18x.word] > v19)
							{
								x_BYTE_13B4E0_angle[v18x.word] &= 0xF7u;
							}
							else
							{
								x_BYTE_14B4E0[v18x.word] = v19 - 1;
								x_BYTE_13B4E0_angle[v18x.word] |= 8u;
							}
							//HIBYTE(v18)--;
							v18x._axis_2d.y--;
							v203++;
						}
						v16++;
						v17x.word++;
					}
				}
				else
				{
					v11 = -1;
					v12x.word = v208x.word - 1;
					while (v11 < a1x->dword_0x10_16 + 1)
					{
						v13 = 0;
						v14x.word = v12x.word + 256;
						while (v13 < 4)
						{
							v15x.word = v14x.word;
							v13++;
							//HIBYTE(v14)--;
							v14x._axis_2d.y--;
							x_BYTE_13B4E0_angle[v15x.word] &= 0xF7u;
						}
						v11++;
						v12x.word++;
					}
				}
				v20 = -1;
				v21x.word = v208x.word - 1;//12c
				while (v20 < a1x->dword_0x10_16)//23b194
				{
					//LOBYTE(v21)++;
					//HIBYTE(v21)++;
					v21x._axis_2d.x++;
					v21x._axis_2d.y++;
					v22x.word = v21x.word;
					//LOBYTE(v21) -= 2;
					//HIBYTE(v21) -= 2;
					v21x._axis_2d.x-=2;
					v21x._axis_2d.y-=2;
					v23x.word = v21x.word;
					//LOBYTE(v21)++;
					v21x._axis_2d.x++;
					v24 = x_BYTE_11B4E0_height[v23x.word] - x_BYTE_11B4E0_height[v22x.word] + 32;
					//HIBYTE(v25) = HIBYTE(v21) + 1;
					//v25x._axis_2d.y= v21x._axis_2d.y+1;
					v21x._axis_2d.y++;
					if (v24 >= 28)
					{
						if (v24 > 40)
							v24 = (v24 & 7) + 40;
					}
					else
					{
						v24 = (v24 & 3) + 28;
					}
					if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
						v26 = 32 - v24 + 32;
					else
						v26 = v24;
					v27x.word = v21x.word;
					v20++;
					v21x.word = v21x.word + 1;
					x_BYTE_12B4E0_shading[v27x.word] = v26;
				}
				v28 = -3;
				v29x.word = v208x.word - 3;
				while (v28 < a1x->dword_0x10_16 + 3)
				{
					v30 = -3;
					v31x.word = v29x.word + 768;
					while (v30 < 6)
					{
						v32x.word = v31x.word;
						v30++;
						//HIBYTE(v31)--;
						v31x._axis_2d.y--;
						x_BYTE_13B4E0_angle[v32x.word] |= 0x80u;
					}
					v28++;
					v29x.word++;
				}
				a1x->word_0x2A_42 = 48;
				a1x->dword_0x8 = 3;
			}
		}
		return;
	}
	if (v1 <= 1)
	{
		if (a1x->word_0x2A_42 < 0x30u)
		{
			sub_6E450_distance_sound(a1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 47);
			v207x._axis_2d.x = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
			if (a1x->byte_0x46_70)
			{
				v207x._axis_2d.y = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - 1;
			}
			else
			{
				v207x._axis_2d.y = (uint16_t)(a1x->array_0x4C_76.y + 128) >> 8;
				v207x.word--;
			}
			if (!a1x->word_0x2A_42)
			{
				v62 = a1x->byte_0x46_70;
				if (v62)
				{
					if (v62 == 1)
					{
						v78x.word = v207x.word;
						v79 = 0;
						while (v79 < 3)
						{
							v80 = 2;
							v81x.word = v78x.word + 512;
							while (v80 < a1x->dword_0x10_16 - 3)
							{
								v82x.word = v81x.word;
								v80++;
								//HIBYTE(v81)++;
								v81x._axis_2d.y++;
								x_BYTE_10B4E0_terraintype[v82x.word] = 8;
								x_BYTE_13B4E0_angle[v82x.word] = 1;
							}
							v79++;
							v78x.word--;
						}
						if (!x_BYTE_D41B6)
						{
							v83 = 0;
							v84x.word = v207x.word + 1;
							while (v83 < 4)
							{
								v85 = 2;
								v86x.word = v84x.word + 512;
								while (v85 < a1x->dword_0x10_16 - 2)
								{
									v87x.word = v86x.word;
									v85++;
									//HIBYTE(v86)++;
									v86x._axis_2d.y++;
									x_BYTE_13B4E0_angle[v87x.word] &= 0xF7u;
								}
								v83++;
								v84x.word--;
							}
						}
						v88 = -3;
						v89x.word = v207x.word - 3;
						while (v88 < 6)
						{
							v90 = -3;
							v91x.word = v89x.word - 768;
							while (v90 < a1x->dword_0x10_16 + 3)
							{
								v92x.word = v91x.word;
								v90++;
								//HIBYTE(v91)++;
								v91x._axis_2d.y++;
								x_BYTE_13B4E0_angle[v92x.word] |= 0x80u;
							}
							v88++;
							v89x.word++;
						}
					}
				}
				else
				{
					v63 = 2;
					v64x.word = v207x.word + 2;
					while (v63 < a1x->dword_0x10_16 - 3)
					{
						v65x.word = v64x.word;
						v66 = 0;
						while (v66 < 3)
						{
							v67x.word = v65x.word;
							v66++;
							//HIBYTE(v65)--;
							v65x._axis_2d.y--;
							x_BYTE_10B4E0_terraintype[v67x.word] = 8;
							x_BYTE_13B4E0_angle[v67x.word] = 1;
						}
						v63++;
						v64x.word++;
					}
					if (!x_BYTE_D41B6)
					{
						v68 = 2;
						v69x.word = v207x.word + 2;
						while (v68 < a1x->dword_0x10_16 - 2)
						{
							v70 = 0;
							v71x.word = v69x.word + 256;
							while (v70 < 4)
							{
								v72x.word = v71x.word;
								v70++;
								//HIBYTE(v71)--;
								v71x._axis_2d.y--;
								x_BYTE_13B4E0_angle[v72x.word] &= 0xF7u;
							}
							v68++;
							v69x.word++;
						}
					}
					v73 = -3;
					for (jx.word = v207x.word - 3; v73 < a1x->dword_0x10_16 + 3; jx.word++)
					{
						v75 = -3;
						v76x.word = jx.word + 768;
						while (v75 < 6)
						{
							v77x.word = v76x.word;
							v75++;
							//HIBYTE(v76)--;
							v76x._axis_2d.y--;
							x_BYTE_13B4E0_angle[v77x.word] |= 0x80u;
						}
						v73++;
					}
				}
			}
			a1x->word_0x2A_42++;
			v93 = a1x->byte_0x46_70;
			if (v93)
			{
				if (v93 == 1)
				{
					v104x.word = v207x.word;
					v103 = 3;
					//BYTE1(v104) += 3;
					v104x._axis_2d.y += 3;
					while (v103 < a1x->dword_0x10_16 - 3)
					{
						v105x.word = v104x.word;
						v106 = x_BYTE_11B4E0_height[v104x.word] + 1;
						v107x.word = v104x.word - 1;
						x_BYTE_11B4E0_height[v105x.word] = v106;
						v108x.word = v107x.word;
						++v103;
						v104x.word = v107x.word + 1;
						//++BYTE1(v104);
						v104x._axis_2d.y++;
						++x_BYTE_11B4E0_height[v108x.word];
					}
					if (x_BYTE_D41B6)
					{
						v110x.word = v207x.word;
						v109 = 3;
						//BYTE1(v110) += 3;
						v110x._axis_2d.y += 3;
						while (v109 < a1x->dword_0x10_16 - 3)
						{
							v111 = x_BYTE_11B4E0_height[v110x.word];
							if ((uint8_t)x_BYTE_14B4E0[v110x.word] > v111)
							{
								x_BYTE_13B4E0_angle[v110x.word] &= 0xF7u;
							}
							else
							{
								x_BYTE_14B4E0[v110x.word] = v111 - 1;
								x_BYTE_13B4E0_angle[v110x.word] |= 8u;
							}
							v112x.word = v110x.word - 1;
							v113 = x_BYTE_11B4E0_height[v112x.word];
							if ((uint8_t)x_BYTE_14B4E0[v112x.word] > v113)
							{
								x_BYTE_13B4E0_angle[v112x.word] &= 0xF7u;
							}
							else
							{
								x_BYTE_14B4E0[v112x.word] = v113 - 1;
								x_BYTE_13B4E0_angle[v112x.word] |= 8u;
							}
							v110x.word = v112x.word + 1;
							v109++;
							//BYTE1(v110)++;
							v110x._axis_2d.y++;
						}
					}
				}
			}
			else
			{
				v94 = 3;
				v95x.word = v207x.word + 3;
				while (v94 < a1x->dword_0x10_16 - 3)
				{
					v96x.word = v95x.word;
					v97 = x_BYTE_11B4E0_height[v95x.word] + 1;
					//HIBYTE(v95)--;
					v95x._axis_2d.y--;
					x_BYTE_11B4E0_height[v96x.word] = v97;
					v98x.word = v95x.word;
					v94++;
					//HIBYTE(v95)++;
					v95x._axis_2d.y++;
					v95x.word++;
					x_BYTE_11B4E0_height[v98x.word]++;
				}
				if (x_BYTE_D41B6)
				{
					v99 = 3;
					for (kx.word = v207x.word + 3; v99 < a1x->dword_0x10_16 - 3; kx.word++)
					{
						v101 = x_BYTE_11B4E0_height[kx.word];
						if ((uint8_t)x_BYTE_14B4E0[kx.word] > v101)
						{
							x_BYTE_13B4E0_angle[kx.word] &= 0xF7u;
						}
						else
						{
							x_BYTE_14B4E0[kx.word] = v101 - 1;
							x_BYTE_13B4E0_angle[kx.word] |= 8u;
						}
						//HIBYTE(k)--;
						kx._axis_2d.y--;
						v102 = x_BYTE_11B4E0_height[kx.word];
						if ((uint8_t)x_BYTE_14B4E0[kx.word] > v102)
						{
							x_BYTE_13B4E0_angle[kx.word] &= 0xF7u;
						}
						else
						{
							x_BYTE_14B4E0[kx.word] = v102 - 1;
							x_BYTE_13B4E0_angle[kx.word] |= 8u;
						}
						//HIBYTE(k)++;
						kx._axis_2d.y++;
						v99++;
					}
				}
			}
			if (a1x->word_0x2A_42 >= 0x30u)
			{
				v114 = a1x->byte_0x46_70;
				if (v114)
				{
					if (v114 == 1)
					{
						v123x.word = v207x.word;
						v124 = 0;
						do
						{
							//LOBYTE(v123) = v123 + 1;							
							//++HIBYTE(v123);
							v123x._axis_2d.x++;
							v123x._axis_2d.y++;
							v125x.word = v123x.word;
							//LOBYTE(v123) = v123 - 2;
							//HIBYTE(v123) -= 2;
							v123x._axis_2d.x-=2;
							v123x._axis_2d.y-=2;
							v126x.word = v123x.word;
							//LOBYTE(v123) = v123 + 1;
							v123x._axis_2d.x++;
							v127 = x_BYTE_11B4E0_height[v126x.word] - x_BYTE_11B4E0_height[v125x.word] + 32;
							//HIBYTE(v128) = HIBYTE(v123) + 1;
							v128x._axis_2d.y= v123x._axis_2d.y +1;
							if (v127 >= 28)
							{
								if (v127 > 40)
									v127 = (v127 & 7) + 40;
							}
							else
							{
								v127 = (v127 & 3) + 28;
							}
							if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
								v129 = 32 - v127 + 32;
							else
								v129 = v127;
							v130x.word = v128x.word;
							v124++;
							//v123 = v128 + 1;
							v123x.word = v128x.word + 1;
							x_BYTE_12B4E0_shading[v130x.word] = v129;
						} while (v124 < 3);
					}
				}
				else
				{
					v115 = -1;
					for (lx.word = v207x.word - 1; v115 < a1x->dword_0x10_16; x_BYTE_12B4E0_shading[v122x.word] = v121)
					{
						//LOBYTE(l) = l + 1;
						//++HIBYTE(l);
						lx._axis_2d.x++;
						lx._axis_2d.y++;
						v117x.word = lx.word;
						//LOBYTE(l) = l - 2;
						//HIBYTE(l) -= 2;
						lx._axis_2d.x-=2;
						lx._axis_2d.y-=2;
						v118x.word = lx.word;
						//LOBYTE(l) = l + 1;
						lx._axis_2d.x++;
						v119 = x_BYTE_11B4E0_height[v118x.word] - x_BYTE_11B4E0_height[v117x.word] + 32;
						//HIBYTE(v120) = HIBYTE(l) + 1;
						v120x._axis_2d.y = lx._axis_2d.y+1;
						if (v119 >= 28)
						{
							if (v119 > 40)
								v119 = (v119 & 7) + 40;
						}
						else
						{
							v119 = (v119 & 3) + 28;
						}
						if (D41A0_BYTESTR_0.str_2FECE.byte_level_type)
							v121 = 32 - v119 + 32;
						else
							v121 = v119;
						v122x.word = v120x.word;
						v115++;
						lx.word = v120x.word + 1;
					}
				}
			}
			return;
		}
		a1x->dword_0x8 = 3;
	LABEL_292:
		sub_6EAB0(a1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 47);
		return;
	}
	if (v1 != 2)
		return;
	if (!a1x->word_0x2A_42)
	{
		a1x->dword_0x8 = 4;
		goto LABEL_292;
	}
	sub_6E450_distance_sound(a1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 47);
	v207x._axis_2d.x = (uint16_t)(a1x->array_0x4C_76.x + 128) >> 8;
	if (a1x->byte_0x46_70)
	{
		v207x._axis_2d.y = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - 1;
	}
	else
	{
		v207x._axis_2d.y = (uint16_t)(a1x->array_0x4C_76.y + 128) >> 8;
		v207x.word--;
	}
	v132 = a1x->byte_0x46_70;
	if (v132)
	{
		if (v132 == 1)
		{
			v140x.word = v207x.word;
			v139 = 3;
			//BYTE1(v140) += 3;
			v140x._axis_2d.y += 3;
			while (v139 < a1x->dword_0x10_16 - 3)
			{
				v141 = x_BYTE_11B4E0_height[v140x.word];
				v142 = (x_BYTE_11B4E0_height[v140x.word - 2]
					+ x_BYTE_11B4E0_height[v140x.word + 1]) >> 1;
				if (v142 < v141)
					x_BYTE_11B4E0_height[v140x.word] = v141 - 1;
				v143x.word = v140x.word - 1;
				v144 = x_BYTE_11B4E0_height[v143x.word];
				if (v142 < v144)
					x_BYTE_11B4E0_height[v143x.word] = v144 - 1;
				v140x.word = v143x.word + 1;
				++v139;
				//++BYTE1(v140);
				v140x._axis_2d.y++;
			}
		}
	}
	else
	{
		v133 = 3;
		for (mx.word = v207x.word + 3; v133 < a1x->dword_0x10_16 - 3; ++mx.word)
		{
			v135x.word = mx.word + 256;
			//HIBYTE(v135) = HIBYTE(m) - 2;
			v135x._axis_2d.y = mx._axis_2d.y - 2;
			v136 = x_BYTE_11B4E0_height[mx.word];
			v137 = (x_BYTE_11B4E0_height[v135x.word] + x_BYTE_11B4E0_height[mx.word + 256]) >> 1;
			if (v137 < v136)
				x_BYTE_11B4E0_height[mx.word] = v136 - 1;
			//--HIBYTE(m);
			mx._axis_2d.y--;
			v138 = x_BYTE_11B4E0_height[mx.word];
			if (v137 < v138)
				x_BYTE_11B4E0_height[mx.word] = v138 - 1;
			//++HIBYTE(m);
			mx._axis_2d.y++;
			++v133;
		}
	}
	v145 = a1x->word_0x2A_42 - 1;
	a1x->word_0x2A_42 = v145;
	if (!v145)
	{
		v146 = a1x->byte_0x46_70;
		if (v146)
		{
			if (v146 != 1)
				return;
			v174x.word = v207x.word;
			v173 = 3;
			//BYTE1(v174) += 3;
			v174x._axis_2d.y += 3;
			while (v173 < a1x->dword_0x10_16 - 4)
			{
				v175x.word = v174x.word + 2;
				if (x_BYTE_10B4E0_terraintype[v174x.word + 2] == 8)
					v175x._axis_2d.y += a1x->dword_0x10_16 >> 1;
				v176x.word = v174x.word + 1;
				v177x.word = v176x.word;
				x_BYTE_10B4E0_terraintype[v176x.word] = x_BYTE_10B4E0_terraintype[v175x.word];
				x_BYTE_13B4E0_angle[v176x.word] = x_BYTE_13B4E0_angle[v175x.word];
				x_BYTE_12B4E0_shading[v176x.word--] = 32;
				x_BYTE_13B4E0_angle[v177x.word] |= 0x80u;
				v178x.word = v176x.word;
				x_BYTE_10B4E0_terraintype[v176x.word] = x_BYTE_10B4E0_terraintype[v175x.word];
				x_BYTE_13B4E0_angle[v176x.word] = x_BYTE_13B4E0_angle[v175x.word];
				x_BYTE_12B4E0_shading[v176x.word--] = 32;
				x_BYTE_13B4E0_angle[v178x.word] |= 0x80u;
				v179x.word = v176x.word;
				x_BYTE_10B4E0_terraintype[v176x.word] = x_BYTE_10B4E0_terraintype[v175x.word];
				x_BYTE_13B4E0_angle[v176x.word] = x_BYTE_13B4E0_angle[v175x.word];
				x_BYTE_12B4E0_shading[v176x.word] = 32;
				v180 = x_BYTE_13B4E0_angle[v176x.word--] | 0x80;
				x_BYTE_13B4E0_angle[v179x.word] = v180;
				v181 = x_BYTE_10B4E0_terraintype[v175x.word];
				v182x.word = v176x.word;
				++v173;
				x_BYTE_13B4E0_angle[v176x.word] = x_BYTE_13B4E0_angle[v175x.word];
				//v174 = v176 + 2;
				v174x.word = v176x.word + 2;
				x_BYTE_12B4E0_shading[v182x.word] = 32;
				v183 = x_BYTE_13B4E0_angle[v182x.word];
				x_BYTE_10B4E0_terraintype[v182x.word] = v181;
				//++BYTE1(v174);
				v174x._axis_2d.y++;
				x_BYTE_13B4E0_angle[v182x.word] = v183 | 0x80;
			}
			if (x_BYTE_D41B6)
			{
				v185x.word = v207x.word;
				v184 = 3;
				//BYTE1(v185) += 3;
				v185x._axis_2d.y+=3;
				if (a1x->dword_0x10_16 - 4 > 3)
				{
					do
					{
						v186x.word = v185x.word + 1;
						v187 = x_BYTE_11B4E0_height[v186x.word];
						if ((uint8_t)x_BYTE_14B4E0[v186x.word] > v187)
						{
							x_BYTE_13B4E0_angle[v186x.word] &= 0xF7u;
						}
						else
						{
							x_BYTE_14B4E0[v186x.word] = v187 - 1;
							x_BYTE_13B4E0_angle[v186x.word] |= 8u;
						}
						v188x.word = v186x.word - 1;
						v189 = x_BYTE_11B4E0_height[v188x.word];
						if ((uint8_t)x_BYTE_14B4E0[v188x.word] > v189)
						{
							x_BYTE_13B4E0_angle[v188x.word] &= 0xF7u;
						}
						else
						{
							x_BYTE_14B4E0[v188x.word] = v189 - 1;
							x_BYTE_13B4E0_angle[v188x.word] |= 8u;
						}
						v190x.word = v188x.word - 1;
						v191 = x_BYTE_11B4E0_height[v190x.word];
						if ((uint8_t)x_BYTE_14B4E0[v190x.word] > v191)
						{
							x_BYTE_13B4E0_angle[v190x.word] &= 0xF7u;
						}
						else
						{
							x_BYTE_14B4E0[v190x.word] = v191 - 1;
							x_BYTE_13B4E0_angle[v190x.word] |= 8u;
						}
						v192x.word = v190x.word - 1;
						v193 = x_BYTE_11B4E0_height[v192x.word];
						if ((uint8_t)x_BYTE_14B4E0[v192x.word] > v193)
						{
							x_BYTE_13B4E0_angle[v192x.word] &= 0xF7u;
						}
						else
						{
							x_BYTE_14B4E0[v192x.word] = v193 - 1;
							x_BYTE_13B4E0_angle[v192x.word] |= 8u;
						}
						v185x.word = v192x.word + 2;
						++v184;
						//++BYTE1(v185);
						v185x._axis_2d.y++;
					} while (v184 < a1x->dword_0x10_16 - 4);
					v194 = -3;
					v195x.word = v207x.word - 3;
					goto LABEL_286;
				}
			}
			else
			{
				v196x.word = v207x.word + 768;
				x_BYTE_13B4E0_angle[v196x.word + 1] &= 0xF7u;
				x_BYTE_13B4E0_angle[v196x.word] &= 0xF7u;
				v197x.word = v207x.word + 767;
				x_BYTE_13B4E0_angle[v197x.word] = x_BYTE_13B4E0_angle[v207x.word + 767] & 0xF7;
				x_BYTE_13B4E0_angle[v197x.word - 1] &= 0xF7u;
			}
			v194 = -3;
			v195x.word = v207x.word - 3;
			do
			{
			LABEL_286:
				v198x.word = -3;
				v199x.word = v195x.word - 768;
				while (v198x.word < a1x->dword_0x10_16 + 3)
				{
					v200x.word = v199x.word;
					++v198x.word;
					//++HIBYTE(v199);
					v199x._axis_2d.y++;
					x_BYTE_13B4E0_angle[v200x.word] |= 0x80u;
				}
				++v194;
				//++v195;
				v195x._axis_2d.y++;
			} while (v194 < 6);
			return;
		}
		v147 = 3;
		v148x.word = v207x.word + 3;
		while (v147 < a1x->dword_0x10_16 - 4)
		{
			v149x.word = v148x.word + 512;
			if (x_BYTE_10B4E0_terraintype[v148x.word + 512] == 8)
				v149x.word += a1x->dword_0x10_16 >> 1;
			//++HIBYTE(v148);
			v148x._axis_2d.y++;
			v150x.word = v148x.word;
			x_BYTE_10B4E0_terraintype[v148x.word] = x_BYTE_10B4E0_terraintype[v149x.word];
			x_BYTE_13B4E0_angle[v148x.word] = x_BYTE_13B4E0_angle[v149x.word];
			x_BYTE_12B4E0_shading[v148x.word] = 32;
			//--HIBYTE(v148);
			v148x._axis_2d.y--;
			x_BYTE_13B4E0_angle[v150x.word] |= 0x80u;
			v151x.word = v148x.word;
			x_BYTE_10B4E0_terraintype[v148x.word] = x_BYTE_10B4E0_terraintype[v149x.word];
			x_BYTE_13B4E0_angle[v148x.word] = x_BYTE_13B4E0_angle[v149x.word];
			x_BYTE_12B4E0_shading[v148x.word] = 32;
			//--HIBYTE(v148);
			v148x._axis_2d.y--;
			x_BYTE_13B4E0_angle[v151x.word] |= 0x80u;
			v152x.word = v148x.word;
			x_BYTE_10B4E0_terraintype[v148x.word] = x_BYTE_10B4E0_terraintype[v149x.word];
			x_BYTE_13B4E0_angle[v148x.word] = x_BYTE_13B4E0_angle[v149x.word];
			x_BYTE_12B4E0_shading[v148x.word] = 32;
			v153 = x_BYTE_13B4E0_angle[v148x.word] | 0x80;
			//--HIBYTE(v148);
			v148x._axis_2d.y--;
			x_BYTE_13B4E0_angle[v152x.word] = v153;
			v154 = x_BYTE_10B4E0_terraintype[v149x.word];
			v155x.word = v148x.word;
			++v147;
			x_BYTE_13B4E0_angle[v148x.word] = x_BYTE_13B4E0_angle[v149x.word];
			//HIBYTE(v148) += 2;
			v148x._axis_2d.y+=2;
			x_BYTE_12B4E0_shading[v155x.word] = 32;
			v156 = x_BYTE_13B4E0_angle[v155x.word];
			x_BYTE_10B4E0_terraintype[v155x.word] = v154;
			++v148x.word;
			x_BYTE_13B4E0_angle[v155x.word] = v156 | 0x80;
		}
		if (x_BYTE_D41B6)
		{
			v157 = 3;
			v158x.word = v207x.word + 3;
			if (a1x->dword_0x10_16 - 4 > 3)
			{
				do
				{
					//++HIBYTE(v158);
					v158x._axis_2d.y++;
					v159 = x_BYTE_11B4E0_height[v158x.word];
					if ((uint8_t)x_BYTE_14B4E0[v158x.word] > v159)
					{
						x_BYTE_13B4E0_angle[v158x.word] &= 0xF7u;
					}
					else
					{
						x_BYTE_14B4E0[v158x.word] = v159 - 1;
						x_BYTE_13B4E0_angle[v158x.word] |= 8u;
					}
					//--HIBYTE(v158);
					v158x._axis_2d.y--;
					v160 = x_BYTE_11B4E0_height[v158x.word];
					if ((uint8_t)x_BYTE_14B4E0[v158x.word] > v160)
					{
						x_BYTE_13B4E0_angle[v158x.word] &= 0xF7u;
					}
					else
					{
						x_BYTE_14B4E0[v158x.word] = v160 - 1;
						x_BYTE_13B4E0_angle[v158x.word] |= 8u;
					}
					//--HIBYTE(v158);
					v158x._axis_2d.y--;
					v161 = x_BYTE_11B4E0_height[v158x.word];
					if ((uint8_t)x_BYTE_14B4E0[v158x.word] > v161)
					{
						x_BYTE_13B4E0_angle[v158x.word] &= 0xF7u;
					}
					else
					{
						x_BYTE_14B4E0[v158x.word] = v161 - 1;
						x_BYTE_13B4E0_angle[v158x.word] |= 8u;
					}
					//--HIBYTE(v158);
					v158x._axis_2d.y--;
					v162 = x_BYTE_11B4E0_height[v158x.word];
					if ((uint8_t)x_BYTE_14B4E0[v158x.word] > v162)
					{
						x_BYTE_13B4E0_angle[v158x.word] &= 0xF7u;
					}
					else
					{
						x_BYTE_14B4E0[v158x.word] = v162 - 1;
						x_BYTE_13B4E0_angle[v158x.word] |= 8u;
					}
					//HIBYTE(v158) += 2;
					v158x._axis_2d.y+=2;
					++v157;
					++v158x.word;
				} while (v157 < a1x->dword_0x10_16 - 4);
				v163 = -3;
				v164x.word = v207x.word - 3;
				goto LABEL_261;
			}
		}
		else
		{
			v165x.word = v207x.word + 259;
			v165x._axis_2d.y = (uint16_t)(v207x.word + 3) >> 8;
			x_BYTE_13B4E0_angle[v207x.word + 259] &= 0xF7u;
			v166x.word = v165x.word;
			v167 = x_BYTE_13B4E0_angle[v165x.word] & 0xF7;
			//--HIBYTE(v165);
			v165x._axis_2d.y--;
			x_BYTE_13B4E0_angle[v166x.word] = v167;
			v168x.word = v165x.word;
			v169 = x_BYTE_13B4E0_angle[v165x.word] & 0xF7;
			//--HIBYTE(v165);
			v165x._axis_2d.y--;
			x_BYTE_13B4E0_angle[v168x.word] = v169;
			x_BYTE_13B4E0_angle[v165x.word] &= 0xF7u;
		}
		v163 = -3;
		v164x.word = v207x.word - 3;
	LABEL_261:
		while (v163 < a1x->dword_0x10_16 + 3)
		{
			v170 = -3;
			v171x.word = v164x.word + 768;
			while (v170 < 6)
			{
				v172x.word = v171x.word;
				++v170;
				//--HIBYTE(v171);
				v171x._axis_2d.y--;
				x_BYTE_13B4E0_angle[v172x.word] |= 0x80u;
			}
			++v163;
			++v164x.word;
		}
	}
}

//----- (0005B070) --------------------------------------------------------
type_str_0x6E8E* sub_5B070(type_str_0x6E8E* a1x)//23c070
{
	int v1; // eax
	char v2; // dl
	char v3; // bl
	type_str_0x6E8E* resultx; // eax

	v1 = x_WORD_15B4E0_source[((uint8_t)((uint16_t)(a1x->array_0x4C_76.y - 128) >> 8) << 8)
		+ ((uint16_t)(a1x->array_0x4C_76.x - 128) >> 8)];
	v2 = 0;
	while (1)
	{
		resultx = x_DWORD_EA3E4[v1];
		if (resultx <= x_DWORD_EA3E4[0])
			break;
		if (resultx->byte_0x3F_63 == 14)
		{
			v3 = resultx->byte_0x40_64;
			if (v3 == 1 || v3 == 2)
			{
				v2 = 1;
				break;
			}
		}
		v1 = resultx->word_0x16_22;
	}
	if (!v2)
		resultx = 0;
	return resultx;
}

//----- (0005B100) --------------------------------------------------------
/* void sub_5B100(type_str_0x6E8E* a1x)//23c100
{
	int v1; // edi
	char v2; // ST60_1
	char v3a; // ST61_1
	int v3x_ebx; // ebx@2
	unsigned int result; // eax@6
	unsigned int v4; // eax
	signed int v5_eax; // eax@7
	int v8x_eax; // eax@16
	int v5x_edx; // edx@
	char v6_dl; // dl@8
	uaxis_2d v7_bxx; // bx@
	uaxis_2d v8_bxx; // bx@13
	uaxis_2d v9_bxx; // bx@19	
	char v10; // cl@19
	uaxis_2d v11_bxx; // bx@24
	int v12_edx; // edx@31
	uint16_t v13_bx; // bx@32
	uint16_t v14_cx; // cx@33
	int v47_ecx; // ecx@56
	int v49_edx; // edx@60
	int v15__68; // [sp+0h] [bp-68h]@0
	int v12x__48; // [sp+20h] [bp-48h]@5
	signed int v59__44; // [sp+24h] [bp-44h]@2
	int v13__38; // [sp+30h] [bp-38h]@28
	signed int v16__30; // [sp+38h] [bp-30h]@7
	signed int v14__34; // [sp+34h] [bp-34h]@13
	int v17__2c; // [sp+3Ch] [bp-2Ch]@0
	int v16__28; // [sp+40h] [bp-28h]@5	
	uint16_t v17x__24; // [sp+44h] [bp-24h]@0
	uaxis_2d v18__24x; // [sp+44h] [bp-24h]@7
	uint16_t v63__20; // [sp+48h] [bp-20h]@56
	uint16_t v19__1c; // [sp+4Ch] [bp-1Ch]@31
	uint16_t v67__18; // [sp+50h] [bp-18h]@56
	unsigned int v20__14; // [sp+54h] [bp-14h]@0
	char v20x__10; // [sp+58h] [bp-10h]@13
	char v21__c; // [sp+5Ch] [bp-Ch]@24
	char v22__8; // [sp+60h] [bp-8h]@13
	int v69; // [esp+0h] [ebp-68h]
	char v72__4; // [sp+64h] [bp-4h]@2
	int v78; // [esp+3Ch] [ebp-2Ch]
	int v45_edi; // edi@54
	int64_t v48_rax; // rax@5

	int i, j;

	//fix
	v20__14 = 0;
	v17__2c = 0;
	v19__1c = 0;
	v15__68 = 0;
	v3x_ebx = 0;
	v17x__24 = 0;
	v1 = 0;
	//fix


	if (a1x->dword_0x8 <= 2u)
	{
		v1 = a1x->array_0x4C_76.z;
		if (a1x->word_0x2C_44)
		{
			v69 = (2 * ((a1x->word_0x96_150 << 8) + 512) + 128) >> 8;
			v78 = 2;
		}
		else
		{
			v78 = (2 * ((a1x->word_0x96_150 << 8) + 512) + 128) >> 8;
			v69 = 2;
		}
		v2 = (a1x->array_0x4C_76.x >> 8) - (v69 >> 1);
		v3a = (a1x->array_0x4C_76.y >> 8) - (v78 >> 1);
	}
	v4 = a1x->dword_0x8;
	if (v4 <= 4)
		//JUMPOUT(__CS__, (int*) *(&off_5B0E4 + v4));
		switch (v4) {
		case 0://loc_5B1BA
		{
			v18__24x._axis_2d.x = a1x->array_0x4C_76.x >> 8;
			v18__24x._axis_2d.y = a1x->array_0x4C_76.y >> 8;
			a1x->dword_0x8 = 4;
			//HIBYTE(v18__24) = v4;
			v5_eax = -1;
			v16__30 = -1;
			if (a1x->word_0x2C_44)
			{
				v6_dl = 0;
				v7_bxx.word = v18__24x.word;
				while (!v6_dl)
				{
					if (x_BYTE_13B4E0_angle[v7_bxx.word] & 8)
					{
						v6_dl = 1;
						v5_eax = (uint8_t)x_BYTE_11B4E0_height[v7_bxx.word];
					}
					//LOBYTE(v7_bx) = v7_bx - 1;
					v7_bxx._axis_2d.x--;
				}
				v8_bxx.word = v18__24x.word;
				v22__8 = 0;
				while (!v22__8)
				{
					if (x_BYTE_13B4E0_angle[v8_bxx.word] & 8)
					{
						v16__30 = (uint8_t)x_BYTE_11B4E0_height[v8_bxx.word];
						v22__8 = 1;
					}
					//LOBYTE(v8_bx) = v8_bx + 1;
					v8_bxx._axis_2d.x++;
				}
			}
			else
			{
				v9_bxx.word = v18__24x.word;
				v10 = 0;
				while (!v10)
				{
					if (x_BYTE_13B4E0_angle[v9_bxx.word] & 8)
					{
						v10 = 1;
						v5_eax = (uint8_t)x_BYTE_11B4E0_height[v9_bxx.word];
					}
					//HIBYTE(v9_bx)--;
					v9_bxx._axis_2d.y--;
				}
				v21__c = 0;
				v11_bxx.word = v18__24x.word;
				while (!v21__c)
				{
					if (x_BYTE_13B4E0_angle[v11_bxx.word] & 8)
					{
						v16__30 = (uint8_t)x_BYTE_11B4E0_height[v11_bxx.word];
						v21__c = 1;
					}
					//HIBYTE(v11_bx)++;
					v11_bxx._axis_2d.y++;
				}
			}
			if (v5_eax == -1 || v16__30 == -1)
			{
				sub_57F20(a1x);
			}
			else
			{//adress 23c2eb
				a1x->array_0x4C_76.z = (v16__30 + v5_eax) >> 1;
				result = v20__14;
				v12_edx = 0;
				//v20__14 = v20__14;
				while (v12_edx < v17__2c)
				{
					v13_bx = v19__1c;
					result = 0;
					while ((signed int)result < v15__68)
					{
						v14_cx = v13_bx;
						result++;
						LOBYTE(v13_bx) = v13_bx + 1;
						x_BYTE_13B4E0_angle[v14_cx] |= 0x80u;
					}
					v12_edx++;
					HIBYTE(v19__1c)++;
				}
			}
			break; }
		case 1://loc_5B348
		{
			sub_6E450_distance_sound(a1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 47);
			v12x__48 = v3x_ebx;
			v5x_edx = v3x_ebx + (uint8_t)x_BYTE_11B4E0_height[v17x__24] + 1;
			v16__28 = (uint8_t)x_BYTE_14B4E0[v17x__24] - v3x_ebx - 1;
			if (v5x_edx < 0)
				v5x_edx = 0;
			if (v5x_edx > v1)
				v5x_edx = v1;
			if (v1 > v16__28)
				v16__28 = v1;
			if (v16__28 > 254)
				v16__28 = 254;
			v20x__10 = 1;
			v14__34 = 0;
			for (i = v20__14; ; ++HIBYTE(i))
			{
				result = v14__34;
				if (v14__34 >= v17__2c)
					break;
				v5x_edx = 0;
				for (j = i; ; LOBYTE(j) = j + 1)
				{
					v13__38 = v5x_edx;
					if (v5x_edx >= v15__68)
						break;
					if (!(x_BYTE_13B4E0_angle[j] & 8))
					{
						v8x_eax = v12x__48 + (uint8_t)x_BYTE_11B4E0_height[j];
						if (v8x_eax > v5x_edx)
							v8x_eax = v5x_edx;
						if (v8x_eax > (uint8_t)x_BYTE_11B4E0_height[j])
						{
							x_BYTE_11B4E0_height[j] = v8x_eax;
							v20x__10 = 0;
						}
						v8x_eax = (uint8_t)x_BYTE_14B4E0[j] - v12x__48;
						if (v8x_eax < v16__28)
							v8x_eax = v16__28;
						if (v8x_eax < (uint8_t)x_BYTE_14B4E0[j])
						{
							x_BYTE_14B4E0[j] = v8x_eax;
							v20x__10 = 0;
						}
					}
					if ((uint8_t)x_BYTE_14B4E0[j] > (uint8_t)x_BYTE_11B4E0_height[j])
						x_BYTE_13B4E0_angle[j] &= 0xF7u;
					else
						x_BYTE_13B4E0_angle[j] |= 8u;
					v5x_edx = v13__38 + 1;
				}
				v14__34++;
			}
			if (v20x__10)
			{
				v10 = a1x - D41A0_BYTESTR_0.struct_0x6E8E;
				a1x->dword_0x8 = 3;
				sub_6EAB0(v10, -1, 47);
			}
			break; }
		case 2://loc_5B4E4
		{
			sub_6E450_distance_sound(a1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 47);
			v72__4 = 1;
			v59__44 = 0;
			for (i = v20__14; ; ++HIBYTE(i))
			{
				result = v59__44;
				if (v59__44 >= 2)
					break;
				v45_edi = 0;
				v7_bxx.word = i;
				while (v45_edi < v15__68)
				{
					if (a1x->word_0x2C_44)
					{
						LOBYTE(v67__18) = v7_bxx._axis_2d.x;
						LOBYTE(v47_ecx) = v7_bxx._axis_2d.x;
						LOBYTE(v63__20) = v7_bxx._axis_2d.x;
						HIBYTE(v67__18) = HIBYTE(v20__14) - 1;
						BYTE1(v47_ecx) = HIBYTE(v20__14) + 2;
						HIBYTE(v63__20) = HIBYTE(v20__14) + 3;
					}
					else
					{
						HIBYTE(v67__18) = HIBYTE(i);
						BYTE1(v47_ecx) = HIBYTE(i);
						HIBYTE(v63__20) = HIBYTE(i);
						LOBYTE(v67__18) = v20__14 - 1;
						LOBYTE(v47_ecx) = v20__14 + 2;
						LOBYTE(v63__20) = v20__14 + 3;
					}
					if (abs((uint8_t)x_BYTE_11B4E0_height[v67__18] - (uint8_t)x_BYTE_11B4E0_height[(uint16_t)v47_ecx]) <= 4)
					{
						v49_edx = ((uint8_t)x_BYTE_11B4E0_height[v67__18] + (uint8_t)x_BYTE_11B4E0_height[(uint16_t)v47_ecx]) / 2;
					}
					else
					{
						v48_rax = (uint8_t)x_BYTE_11B4E0_height[v67__18] - (uint8_t)x_BYTE_11B4E0_height[v63__20];
						if ((signed int)((HIDWORD(v48_rax) ^ v48_rax) - HIDWORD(v48_rax)) > 4)
							v49_edx = (uint8_t)x_BYTE_11B4E0_height[(uint16_t)v47_ecx];
						else
							v12x__48 = (uint8_t)x_BYTE_11B4E0_height[v67__18];
					}
					v8x_eax = (uint8_t)x_BYTE_11B4E0_height[v7_bxx.word] - 2;
					if (v4 < v12x__48)
						v4 = v12x__48;
					if (v4 < (uint8_t)x_BYTE_11B4E0_height[v7_bxx.word])
					{
						x_BYTE_11B4E0_height[v7_bxx.word] = v4;
						v72__4 = 0;
					}
					v47_ecx = (uint16_t)v47_ecx;
					v48_rax = (uint8_t)x_BYTE_14B4E0[v67__18] - (uint8_t)x_BYTE_14B4E0[(uint16_t)v47_ecx];
					if ((signed int)((HIDWORD(v48_rax) ^ v48_rax) - HIDWORD(v48_rax)) <= 4)
					{
						v5x_edx = ((uint8_t)x_BYTE_14B4E0[v67__18] + (uint8_t)x_BYTE_14B4E0[v47_ecx]) / 2;
					}
					else
					{
						v48_rax = (uint8_t)x_BYTE_14B4E0[v67__18] - (uint8_t)x_BYTE_14B4E0[v63__20];
						if ((signed int)((HIDWORD(v48_rax) ^ v48_rax) - HIDWORD(v48_rax)) > 4)
							v5x_edx = (uint8_t)x_BYTE_14B4E0[v47_ecx];
						else
							v5x_edx = (uint8_t)x_BYTE_14B4E0[v67__18];
					}
					v5_eax = (uint8_t)x_BYTE_14B4E0[v7_bxx.word] + 2;
					if (v5_eax > v5x_edx)
						v5_eax = v5x_edx;
					if ((uint8_t)x_BYTE_14B4E0[v7_bxx.word] < v5_eax)
					{
						x_BYTE_14B4E0[v7_bxx.word] = v5_eax;
						v72__4 = 0;
					}
					if ((uint8_t)x_BYTE_14B4E0[v7_bxx.word] > (uint8_t)x_BYTE_11B4E0_height[v7_bxx.word])
						x_BYTE_13B4E0_angle[v7_bxx.word] &= 0xF7u;
					else
						x_BYTE_13B4E0_angle[v7_bxx.word] |= 8u;
					v45_edi++;
					//LOBYTE(v7_bx) = v7_bx + 1;
					v7_bxx._axis_2d.x++;
				}
				v59__44++;
			}
			if (v72__4)
			{
				a1x->dword_0x8 = 4;
				sub_6EAB0(a1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, v47_ecx);
			}
			break;
		}
		case 3://loc_5B78F
		case 4:
		{
			int edx0 = (2 * ((v2 << 8) + 512) + 128) >> 8;
			result = (8 * edx0 - (__CFSHL__(8 * edx0 >> 31, 5) + 32 * (8 * edx0 >> 31))) >> 5;
			break;
		}
		}
		
}*/

void sub_5B100(type_str_0x6E8E* a1x)//23c100
{
	//uint16_t v3; // ax
	int v4; // eax
	int result; // eax
	int v6; // ebx
	//int v7; // eax
	signed int v8; // eax
	char v9; // dl
	uaxis_2d v10x; // bx
	uaxis_2d v11x; // bx
	uaxis_2d v12x; // bx
	char v13; // cl
	uaxis_2d v14x; // bx
	int v15; // edx
	uaxis_2d v16x; // bx
	uaxis_2d v17x; // cx
	int v18; // edx
	int v19; // eax
	uaxis_2d jx; // bx
	int v21; // eax
	int v22; // eax
	int v23; // ST00_4
	int v24; // edi
	uaxis_2d v25x; // bx
	int v26; // ecx
	int v27; // edx
	int v28; // eax
	int v29; // edx
	int v30; // eax
	//int v31; // edx
	int v32; // [esp+0h] [ebp-68h]
	int v33; // [esp+1Ch] [ebp-4Ch]
	int v34; // [esp+20h] [ebp-48h]
	int v35; // [esp+24h] [ebp-44h]
	int v36; // [esp+30h] [ebp-38h]
	int v37; // [esp+34h] [ebp-34h]
	signed int v38; // [esp+38h] [ebp-30h]
	int v39; // [esp+3Ch] [ebp-2Ch]
	int v40; // [esp+40h] [ebp-28h]
	uaxis_2d v41x; // [esp+44h] [ebp-24h]
	uaxis_2d v42x; // [esp+44h] [ebp-24h]
	uint16_t v43; // [esp+48h] [ebp-20h]
	uaxis_2d v44x; // [esp+4Ch] [ebp-1Ch]
	uaxis_2d ix; // [esp+4Ch] [ebp-1Ch]
	uaxis_2d kx; // [esp+4Ch] [ebp-1Ch]
	uint16_t v47; // [esp+50h] [ebp-18h]
	uaxis_2d v48x; // [esp+54h] [ebp-14h]
	char v49; // [esp+58h] [ebp-10h]
	char v50; // [esp+5Ch] [ebp-Ch]
	char v51; // [esp+60h] [ebp-8h]
	char v52; // [esp+64h] [ebp-4h]

	//fix
	int a1=0;
	int a2=0;
	//fix

	if (a1x->dword_0x8 <= 2u)
	{
		//v3 = a1x->word_0x96_150;
		a2 = a1x->array_0x4C_76.z;
		a1 = (2 * ((a1x->word_0x96_150 << 8) + 512) + 128) >> 8;
		if (a1x->word_0x2C_44)
		{
			v32 = (2 * ((a1x->word_0x96_150 << 8) + 512) + 128) >> 8;
			v39 = 2;
		}
		else
		{
			v39 = (2 * ((a1x->word_0x96_150 << 8) + 512) + 128) >> 8;
			v32 = 2;
		}
		//LOBYTE(v41) = *(_WORD*)(a3 + 76) >> 8;
		//HIBYTE(v41) = *(_WORD*)(a3 + 78) >> 8;
		v41x._axis_2d.x = a1x->array_0x4C_76.x >> 8;
		v41x._axis_2d.y = a1x->array_0x4C_76.y >> 8;

		//LOBYTE(v48) = v41 - (v32 >> 1);
		//BYTE1(v48) = HIBYTE(v41) - (v39 >> 1);
		v48x._axis_2d.x = v41x._axis_2d.x - (v32 >> 1);
		v48x._axis_2d.y = v41x._axis_2d.y - (v39 >> 1);

	}
	v4 = a1x->dword_0x8;
	//result = (8 * a1 - (__CFSHL__(8 * a1 >> 31, 5) + 32 * (8 * a1 >> 31))) >> 5;
	result = (8 * a1 - (my_sign32(8 * a1) * 31)) >> 5;

	v6 = result;
	switch (v4)//loc_5B1BA
	{
	case 0:
		//LOBYTE(v42) = *(_WORD*)(a3 + 76) >> 8;
		//v7 = *(int16_t*)(a3 + 78) >> 8;
		v42x._axis_2d.x = a1x->array_0x4C_76.x >> 8;
		v42x._axis_2d.y = a1x->array_0x4C_76.y >> 8;
		a1x->dword_0x8 = 4;
		//HIBYTE(v42) = v7;
		v8 = -1;
		v38 = -1;
		if (a1x->word_0x2C_44)
		{
			v9 = 0;
			v10x.word = v42x.word;
			while (!v9)
			{
				if (x_BYTE_13B4E0_angle[v10x.word] & 8)
				{
					v9 = 1;
					v8 = (uint8_t)x_BYTE_11B4E0_height[v10x.word];
				}
				//LOBYTE(v10) = v10 - 1;
				v10x._axis_2d.x--;
			}
			v11x.word = v42x.word;
			v51 = 0;
			while (!v51)
			{
				if (x_BYTE_13B4E0_angle[v11x.word] & 8)
				{
					v38 = (uint8_t)x_BYTE_11B4E0_height[v11x.word];
					v51 = 1;
				}
				//LOBYTE(v11) = v11 + 1;
				v11x._axis_2d.x++;
			}
		}
		else
		{
			v12x.word = v42x.word;
			v13 = 0;
			while (!v13)
			{
				if (x_BYTE_13B4E0_angle[v12x.word] & 8)
				{
					v13 = 1;
					v8 = (uint8_t)x_BYTE_11B4E0_height[v12x.word];
				}
				//--HIBYTE(v12);
				v12x._axis_2d.y--;
			}
			v50 = 0;
			v14x.word = v42x.word;
			while (!v50)
			{
				if (x_BYTE_13B4E0_angle[v14x.word] & 8)
				{
					v38 = (uint8_t)x_BYTE_11B4E0_height[v14x.word];
					v50 = 1;
				}
				//++HIBYTE(v14);
				v14x._axis_2d.y++;
			}
		}
		if (v8 == -1 || v38 == -1)
		{
			/*result = */sub_57F20(a1x);
		}
		else//adress 23c2eb
		{
			//*(_WORD*)(a3 + 80) = (v38 + v8) >> 1;
			a1x->array_0x4C_76.z = (v38 + v8) >> 1;
			result = v48x.word;
			v15 = 0;
			v44x.word = v48x.word;
			while (v15 < v39)
			{
				v16x.word = v44x.word;
				result = 0;
				while (result < v32)
				{
					v17x.word = v16x.word;
					result++;
					//LOBYTE(v16) = v16 + 1;
					v16x._axis_2d.x++;
					x_BYTE_13B4E0_angle[v17x.word] |= 0x80u;
				}
				v15++;
				//++HIBYTE(v44);
				v44x._axis_2d.y++;
			}
		}
		break;
	case 1:
		sub_6E450_distance_sound(a1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 47);
		v34 = v6;
		v18 = v6 + (uint8_t)x_BYTE_11B4E0_height[v41x.word] + 1;
		v40 = (uint8_t)x_BYTE_14B4E0[v41x.word] - v6 - 1;
		if (v18 < 0)
			v18 = 0;
		if (v18 > a2)
			v18 = a2;
		if (a2 > v40)
			v40 = a2;
		if (v40 > 254)
			v40 = 254;
		v49 = 1;
		v37 = 0;
		for (ix.word = v48x.word; ; ++ix._axis_2d.y)
		{
			result = v37;
			if (v37 >= v39)
				break;
			v19 = 0;
			for (jx.word = ix.word; ; jx._axis_2d.x++)
			{
				v36 = v19;
				if (v19 >= v32)
					break;
				if (!(x_BYTE_13B4E0_angle[jx.word] & 8))
				{
					v21 = v34 + (uint8_t)x_BYTE_11B4E0_height[jx.word];
					if (v21 > v18)
						v21 = v18;
					if (v21 > (uint8_t)x_BYTE_11B4E0_height[jx.word])
					{
						x_BYTE_11B4E0_height[jx.word] = v21;
						v49 = 0;
					}
					v22 = (uint8_t)x_BYTE_14B4E0[jx.word] - v34;
					if (v22 < v40)
						v22 = v40;
					if (v22 < (uint8_t)x_BYTE_14B4E0[jx.word])
					{
						x_BYTE_14B4E0[jx.word] = v22;
						v49 = 0;
					}
				}
				if ((uint8_t)x_BYTE_14B4E0[jx.word] > (uint8_t)x_BYTE_11B4E0_height[jx.word])
					x_BYTE_13B4E0_angle[jx.word] &= 0xF7u;
				else
					x_BYTE_13B4E0_angle[jx.word] |= 8u;
				v19 = v36 + 1;
			}
			++v37;
		}
		if (v49)
		{
			v23 = a1x - D41A0_BYTESTR_0.struct_0x6E8E;
			a1x->dword_0x8 = 3;
			/*result = */sub_6EAB0(v23, -1, 47);
		}
		break;
	case 2:
		//v33 = (8 * a1 - (__CFSHL__(8 * a1 >> 31, 5) + 32 * (8 * a1 >> 31))) >> 5;
		v33 = (8 * a1 - (my_sign32(8 * a1) * 31)) >> 5;

		sub_6E450_distance_sound(a1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 47);
		v52 = 1;
		v35 = 0;
		for (kx.word = v48x.word; ; ++kx._axis_2d.y)
		{
			result = v35;
			if (v35 >= v39)
				break;
			v24 = 0;
			v25x.word = kx.word;
			while (v24 < v32)
			{
				if (a1x->word_0x2C_44)
				{
					LOBYTE(v47) = v25x._axis_2d.x;
					LOBYTE(v26) = v25x._axis_2d.x;
					LOBYTE(v43) = v25x._axis_2d.x;
					HIBYTE(v47) = v48x._axis_2d.y - 1;
					BYTE1(v26) = v48x._axis_2d.y + 2;
					HIBYTE(v43) = v48x._axis_2d.y + 3;
				}
				else
				{
					HIBYTE(v47) = kx._axis_2d.y;
					BYTE1(v26) = kx._axis_2d.y;
					HIBYTE(v43) = kx._axis_2d.y;
					LOBYTE(v47) = v48x._axis_2d.x - 1;
					LOBYTE(v26) = v48x._axis_2d.x + 2;
					LOBYTE(v43) = v48x._axis_2d.x + 3;
				}
				if (abs((uint8_t)x_BYTE_11B4E0_height[v47] - (uint8_t)x_BYTE_11B4E0_height[(uint16_t)v26]) <= 4)
				{
					v27 = ((uint8_t)x_BYTE_11B4E0_height[v47] + (uint8_t)x_BYTE_11B4E0_height[(uint16_t)v26]) / 2;
				}
				else if (abs((uint8_t)x_BYTE_11B4E0_height[v47] - (uint8_t)x_BYTE_11B4E0_height[v43]) > 4)
				{
					v27 = (uint8_t)x_BYTE_11B4E0_height[(uint16_t)v26];
				}
				else
				{
					v27 = (uint8_t)x_BYTE_11B4E0_height[v47];
				}
				v28 = (uint8_t)x_BYTE_11B4E0_height[v25x.word] - v33;
				if (v28 < v27)
					v28 = v27;
				if (v28 < (uint8_t)x_BYTE_11B4E0_height[v25x.word])
				{
					x_BYTE_11B4E0_height[v25x.word] = v28;
					v52 = 0;
				}
				v26 = (uint16_t)v26;
				if (abs((uint8_t)x_BYTE_14B4E0[v47] - (uint8_t)x_BYTE_14B4E0[(uint16_t)v26]) <= 4)
				{
					v29 = ((uint8_t)x_BYTE_14B4E0[v47] + (uint8_t)x_BYTE_14B4E0[v26]) / 2;
				}
				else if (abs((uint8_t)x_BYTE_14B4E0[v47] - (uint8_t)x_BYTE_14B4E0[v43]) > 4)
				{
					v29 = (uint8_t)x_BYTE_14B4E0[v26];
				}
				else
				{
					v29 = (uint8_t)x_BYTE_14B4E0[v47];
				}
				v30 = v33 + (uint8_t)x_BYTE_14B4E0[v25x.word];
				if (v30 > v29)
					v30 = v29;
				if ((uint8_t)x_BYTE_14B4E0[v25x.word] < v30)
				{
					x_BYTE_14B4E0[v25x.word] = v30;
					v52 = 0;
				}
				if ((uint8_t)x_BYTE_14B4E0[v25x.word] > (uint8_t)x_BYTE_11B4E0_height[v25x.word])
					x_BYTE_13B4E0_angle[v25x.word] &= 0xF7u;
				else
					x_BYTE_13B4E0_angle[v25x.word] |= 8u;
				v24++;
				//LOBYTE(v25) = v25 + 1;
				v25x._axis_2d.x++;
			}
			v35++;
		}
		if (v52)
		{
			//v31 = dword_D41A0 + 28302;
			a1x->dword_0x8 = 4;
			sub_6EAB0(a1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 47);
		}
		break;
	case 3:
	case 4:
		return;// result;
	}
	//return result;
}


/*
cseg01:0005B0E4 off_5B0E4       dd offset loc_5B1BA     ; DATA XREF: sub_5B100+B3r
cseg01:0005B0E8                 dd offset loc_5B348
cseg01:0005B0EC                 dd offset loc_5B4E4
cseg01:0005B0F0                 dd offset loc_5B78F
cseg01:0005B0F4                 dd offset loc_5B78F
*/


//----- (0005B7A0) --------------------------------------------------------
void sub_5B7A0_prepare_textures()//23C7A0
{
	//int v0; // ebx
	//unsigned int xpos; // edx
	int* v2; // ecx
	//signed int i; // eax
	//Bit8u* v4; // edi
	//Bit8u* v6; // [esp+0h] [ebp-Ch]
	//int v7; // [esp+4h] [ebp-8h]


	//fix remove it
	//sub_53E60_readfile_and_decompress("data/bl32f0-0.dat", &BLOCK32DAT_BEGIN_BUFFER);//2bac2c
	//fix remove it
#ifdef TEST_BIG_TEXTURE
	x_BYTE_D41B5_texture_size = texturepixels;
	/*for (int aa = 0; aa < 2)
		for (int bb = 0; bb < 30)
			for (int xx = 0; xx < 128)
				for (int yy = 0; yy < 128)
				{
					x_DWORD_DDF50_texture_adresses[aa * 128 + bb * 128 * 128 * 2 + xx + yy * 128 * 2] = bb;					
				}*/
	
				/*FILE* file;
	//fopen_s(&file,(char*)"c:\\prenos\\remc2\\biggraphics\\out_rlt-ff-out.data", (char*)"rb");
	fopen_s(&file, (char*)"c:\\prenos\\remc2\\biggraphics\\out_rlt-n-out.data", (char*)"rb");
	fseek(file, 0L, SEEK_END);
	long szdata = ftell(file);
	fseek(file, 0L, SEEK_SET);*///read1


	//unsigned char* content_data = (unsigned char*)malloc(szdata * sizeof(char*));
	//fread(content_data, szdata, 1, file);
	
	/*for (int k = 0; k < 2; k++)
		for (int l = 0; l < 80; l++)
	for(int i=0;i<128;i++)
		for (int j = 0; j < 128; j++)
		{
			BigTextureBuffer[i + k * 128 + j * 128 * 2 + l * 128*128 * 2] = 0;
			if((i==j)||(i==127-j))
				BigTextureBuffer[i + k * 128 + j * 128 * 2 + l * 128*128 * 2] = 176;
		}*/
	/*
	for (int k = 0; k < 160; k++)
			for (int i = 0; i < 32; i++)
				for (int j = 0; j < 32; j++)
				{
					int aa = k % 2;
					int bb = k / 2;
					int cc = k % 8;
					int dd = k / 8;

					unsigned char xx = BLOCK32DAT_BEGIN_BUFFER[j + cc * 32 + i * 32 * 8 + dd * 32 * 32 * 8];
					for (int ii = 0; ii < 4; ii++)
						for (int jj = 0; jj < 4; jj++)
						{
							BigTextureBuffer[(j * 4 + jj) + aa * 128 + (i * 4 + ii) * 128 * 2 + bb * 128 * 128 * 2] = xx+ii*8;// ((i + j) % 2) * 176;
						}
				}*/
	
	/*fread(BigTextureBuffer, szdata, 1, file);
	myclose(file);*/ //read2

	
	#endif TEST_BIG_TEXTURE

	Bit8u* oldbuf = BLOCK32DAT_BEGIN_BUFFER;
	if(x_BYTE_D41B5_texture_size==128)
		BLOCK32DAT_BEGIN_BUFFER = BigTextureBuffer;

	//x_BYTE_D41B5_texture_size = 16;

	//v0 = x_BYTE_D41B5;
	sub_3B4D0_fill_unk_D4350_256(x_BYTE_D41B5_texture_size);//21C4D0
	//v1 = 256 % (256 / x_BYTE_D41B5_texture_size);
	v2 = (int*)x_DWORD_DDF50_texture_adresses;
	for ( int ypos = 0; ypos < (signed int)(256 / (256 / x_BYTE_D41B5_texture_size)); ypos++ )
	{
	  for (int xpos = 0;xpos < (256 / x_BYTE_D41B5_texture_size);xpos++)
	  {
		//v6 = v1 * x_BYTE_D41B5_texture_size + BLOCK32DAT_BEGIN_BUFFER;
		//v7 = i * x_BYTE_D41B5_texture_size << 8;
		//v2++;
		//v4 = v7 + v6;		
		// FIXME: types
		// *(v2) = (int)((ypos * x_BYTE_D41B5_texture_size << 8)+ (xpos * x_BYTE_D41B5_texture_size) + BLOCK32DAT_BEGIN_BUFFER);
		//xpos++;
		v2++;
	  }
	}
	//_wcpp_1_unwind_leave__93(i, v1, v0, (x_DWORD)v2, v6, v7);// fix//23C830
	sub_5B840_load_pallette_and_help_pallette();//23C840
	BLOCK32DAT_BEGIN_BUFFER = oldbuf;
}

//----- (0005B840) --------------------------------------------------------
void sub_5B840_load_pallette_and_help_pallette()//23C840
{
	sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_pald0_dat).c_str(), xadatapald0dat2.var28_begin_buffer);
	sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_clrd0_dat).c_str(), xadataclrd0dat.var28_begin_buffer);
}

//----- (0005B870) --------------------------------------------------------
void sub_5B870_copy_sentence(char* langbuffer, char** langindexbuffer, Bit32u count)//23c870
{
	//sub_5B870_copy_sentence((x_BYTE *)x_DWORD_D41BC_langbuffer, 0xE9C4C, 471);
	//edx 87ab14 ecx 1d7
  //x_BYTE *v3; // edx
  //int v4; // ecx
  //int result; // eax
  //x_DWORD *v6; // ebx
  //x_BYTE *v7; // ebx

	Bit32u langindex = 0;
	Bit32u indexindex = 0;
	while (indexindex < count)//1d7
	{
		langindexbuffer[indexindex] = &langbuffer[langindex];
		while (langbuffer[langindex++]);
		indexindex++;
	}
}



//----- (0005B8D0) --------------------------------------------------------
void sub_5B8D0_initialize()//23c8d0
{
	sub_70890_print_header();//23C8D6 - 251890
	if ((x_D41A0_BYTEARRAY_4_struct.setting_byte4_25) & 8)
		sub_5C490_testers_info();//23C8E6 - 23D490

	sub_5BCC0_set_any_variables1();//23C9F2 - 23CCC0
	if (!sub_5BF50_load_psxdata())//23C9F7 - 23CF50 //neco se soubory asi jejich naceteni, nebo jen soubor palety
		exit(-1);
	sub_5C1B0_set_any_variables2();//23CA05 - 23D1B0
	if (!sub_54200_create_user_directories())//23CA0A - 235200 //tady jedou i ty procenta
	{
		myprintf("ERROR COPYING DATA FILES TO LOCAL DRIVE \n");
		exit(-1);
	}
	sub_71410_process_tmaps();//252410

	//sub_6EB90((unsigned int **)*filearray_2aa18c);//24FB90
	//2AA18C
	sub_6EB90(&filearray_2aa18c[filearrayindex_POINTERSDATTAB]);//24fb90
	//sub_6EB90((unsigned int **)&*filearray_2aa18c[0x60]);//24FB90
	//2AA1EC
	sub_6EB90(&filearray_2aa18c[filearrayindex_BUILD00DATTAB]);//24fb90 adress 0x23ca2e

	sub_101C0();//23CA36 - 1f11c0 //sem se to vubec nedostane
	//zkontrolovat inicializaci



	//*xadataspellsdat.var28_begin_buffer = (Bit8u*)malloc(10000);//fix it

	/*if ( !(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 8) )
	//fix it //x_D41A0_BYTEARRAY_4_struct.setting_byte3_24=50CF38 =0
	*/
	//*xadataspellsdat.var28_begin_buffer = (Bit8u*)malloc(50000);
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 8)) {
		sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_spells_dat).c_str(), xadataspellsdatx.var28_begin_buffer);//234e60 buffer - 2ab818
  }

	//v0 = sub_5C0A0();//23d0a0g
	sub_5C0A0();
	if (x_BYTE_D4B80)
		exit(-1);
	x_BYTE_D4B80 = 1;
	x_WORD_180660_VGA_type_resolution = 1;//fix it
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_72883_clear_graphics_320(/*sub_5C0A0(), */(void *)x_DWORD_180628b_screen_buffer, 0xC8u, 0);//253883
	else
		sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, 0);//2538a9

	  //VGA_Write_basic_pallette(basic_pal_buffer);
	
	//sub_90B27_VGA_pal_fadein_fadeout(*xadatapald0dat2.var28_begin_buffer, 0x20u, 0);

	sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);//271B27 tady se zapina vga
	//fixed
	sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, 0);//fixed
	//fixed
  //*xadatapald0dat2.var28_begin_buffer = (Bit8u*)malloc(10000);//fix it
	memset((void*)*xadatapald0dat2.var28_begin_buffer, 0, 768);
	sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);//222a90
	x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 = 0;//fix it
	if ((x_D41A0_BYTEARRAY_4_struct.setting_byte1_22) & 0x110)//2a51a4 // 38cf50+16 //00 druh grafiky/inicializace
	{
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_90D6E_VGA_set_video_mode_320x200_and_pallette(*xadatapald0dat2.var28_begin_buffer);
		else
			sub_90E07_VGA_set_video_mode_640x480_and_pallette(*xadatapald0dat2.var28_begin_buffer);
		memset((void*)*xadatapald0dat2.var28_begin_buffer, 0, 768);
		sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);//222a90
	}
	else
	{
		sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);
		x_WORD_180660_VGA_type_resolution = 1;//fix it
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_90D6E_VGA_set_video_mode_320x200_and_pallette((uint8_t *)x_DWORD_180628b_screen_buffer);//3aa0a4
		else
			sub_90E07_VGA_set_video_mode_640x480_and_pallette((uint8_t *)x_DWORD_180628b_screen_buffer);
		memset((void*)*xadatapald0dat2.var28_begin_buffer, 0, 768);
		sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);//222a90
	}
	if ( x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 8 )
	  sub_8C2CD();
	else
	  sub_753D0();
	 // ?keyboard init
	  
	x_BYTE_E3799_sound_card = x_BYTE_E3798_sound_active2;
	x_BYTE_E37FD = x_BYTE_E37FC_music;
	sub_8CEDF_install_mouse();
	if (!x_DWORD_E3768)
	{
		sub_5BC20();
		myprintf("ERROR : MOUSE DRIVER NOT INSTALLED\n");
		exit(-1);
	}
	//mouse init

	//pointersdat_buffer = xadatapointersdat.var28_begin_buffer;//eb394 - 2bc394 -446f1{set in 23cf50}

	//nema to byt buffer obrazovky?! ---

	sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]);//anything with vga, maybe mouse cursor//26dd27 //xadatapointersdat asi 1a6f44
	//1a6f44->1a6578 00 00 pointer->0b0005a1a1a1a1a10005a1b413aaa1
	//nastavi se zde:sub_6EB90(&filearray_2aa18c[filearrayindex_POINTERSDATTAB]);//24fb90

	//pak je to v 809380

	//VGA_Set_Cursor(*(*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct),0);


	int v2 = sub_5C430_multi_allocation(); //23d430  
	sub_46DD0_init_sound_and_music(/*v2, v3, (char*)filearray_2aa18c[filearrayindex_POINTERSDATTAB].begin_buffer*/);//init sound and music//227DD0
	//x_WORD_E2A14_sound_activel = 0;x_BYTE_E3798_sound_active2 = 0;//debug tittes

	//test_x_D41A0_BYTEARRAY_0();

}

//----- (0005BC20) --------------------------------------------------------
void sub_5BC20()//23cc20
{
	if (x_BYTE_D4B80 == 1)
	{
		sub_5C450();
		if (x_DWORD_E3768)
			sub_54600_mouse_reset();//mouse reset
		/*if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 8)
			sub_8C2DE();
		else
			sub_75420();*/
		sub_46F50_sound_proc7();
		sub_8C21F_any_graphics_command();
		sub_72D04();
		sub_6FE20();
		sub_5C060();
	}
	sub_83E80_freemem4(x_DWORD_D4198);
	//sub_83E80_freemem4(x_D41A0_BYTEARRAY_0);
	//sub_83E80_freemem4(x_D41A0_BYTEARRAY_4);
	sub_86860_speak_Sound(x_WORD_1803EC);
	sub_86BD0_freemem1();
}

//----- (0005BCC0) --------------------------------------------------------
void sub_5BCC0_set_any_variables1()//23ccc0
{
	//int result; // eax //push ebx=0 ebp=355250

	x_BYTE_EB39E_keys[0] = 0x48;//2bc39e//UP
	x_BYTE_EB39E_keys[1] = 0x50;//2bc39f//DOWN
	x_BYTE_EB39E_keys[3] = 0x4D;//2bc3a1//RIGHT
	x_BYTE_EB39E_keys[7] = 0x36;//2bc3a5//RIGHT SHIFT
	x_BYTE_EB39E_keys[8] = 0x36;//2bc3a6//RIGHT SHIFT
	//result = x_D41A0_BYTEARRAY_4;//2a51a4
	x_BYTE_EB39E_keys[5] = 0x1D;//2bc3A3//CTRL
	x_D41A0_BYTEARRAY_4_struct.wordindex_4 = 0;//dword 38cf54
	x_D41A0_BYTEARRAY_4_struct.wordindex_6 = 127;//dword 38cf56
	x_D41A0_BYTEARRAY_4_struct.wordindex_8 = 127;//dword 38cf58
	x_BYTE_EB39E_keys[2] = 0x4B;//2BC3A0//LEFT
	x_D41A0_BYTEARRAY_4_struct.byteindex_10 = 1;//byte 38cf5a
	x_BYTE_EB39E_keys[4] = 0x1C;//2BC3A2//ENTER
	x_D41A0_BYTEARRAY_4_struct.byte_brightness_11 = 0;//byte 38cf5b
	x_BYTE_EB39E_keys[6] = 0x38;//2BC3A4//ALT
	D41A0_BYTESTR_0.word_0xc = 0;//byte 38cf5c
	x_BYTE_EB39E_keys[9] = 0x38;//2BC3A7//ALT
	x_D41A0_BYTEARRAY_4_struct.byte_brightness_13 = 0;//byte 38cf5d
	//return result;
}

//----- (0005BDC0) --------------------------------------------------------
void sub_5BDC0_set_mouse_position(Bit16s a1, Bit16s a2)//23cdc0
{
	int16_t v2; // bx
	int16_t v3; // si
	//int v4; // ecx
	//int v5; // edx
	//int result; // eax
	//Bit8u v7[28]; // [esp+0h] [ebp-1Ch]
	//int v8; // [esp+8h] [ebp-14h]
	//int v9; // [esp+Ch] [ebp-10h]

	v2 = a1;
	v3 = a2;
	//memset(v7, 0, 28);
	if (a1 < 0)
		v2 = 0;
	if (a2 < 0)
		v3 = 0;
	//_disable();
	//v4 = x_DWORD_E36C4;
	x_WORD_E375C_mouse_position_x = v2;
	x_WORD_E3760_mouse.x = v2;
	x_WORD_E375E_mouse_position_y = v3;
	x_WORD_E3760_mouse.y = v3;
	unk_18058Cstr.x_DWORD_1805B8_mouse_position_x = v2;
	unk_18058Cstr.x_DWORD_1805B0_mouse.x = v2;
	//*v7 = 4;
	unk_18058Cstr.x_DWORD_1805BC_mouse_position_y = v3;
	unk_18058Cstr.x_DWORD_1805B0_mouse.y = v3;
	if (x_DWORD_E36C4)
	{
		//v5 = unk_18058Cstr.x_DWORD_1805B0_mouse.x;
		*(x_DWORD *)(x_DWORD_E36C4 + 40) = v3;
		*(x_DWORD *)(x_DWORD_E36C4 + 36) = unk_18058Cstr.x_DWORD_1805B0_mouse.x;
	}
	if (x_WORD_180660_VGA_type_resolution & 8)
	{
		//v2 *= 8;
		//v3 *= 8;
	}
	else
	{
		//v2 = (float)v2 / 320 * 640;
		//v3 = (float)v3 / 200 * 480;
	}

	//v8 = v2;
	//v9 = v3;

	/*return */VGA_Set_mouse(v2, v3);
	//result = int386(0x33, (REGS*)&v7, (REGS*)&v7);//set mouse cursor position
	//_enable();
	//return result;
}

//----- (0005BE80) --------------------------------------------------------
Bit8u sub_5BE80_test_pallette(Bit8u *pallette, Bit8u a2, Bit8u a3, Bit8u a4)//23ce80
{
	//Bit8u *v4; // eax
	Bit16u count_of_colors; // edx
	Bit16s v6; // ecx
	//Bit16u v7; // edx
	Bit16s v9; // esi
	Bit16s v10; // esi
	Bit16s v11; // edi
	//unsigned int v12; // [esp+0h] [ebp-8h]
	Bit8u result; // [esp+4h] [ebp-4h]

	//fix it
	result = 0;
	//fix it

	//v4 = pallette;//1a7358
	Bit16u pallette_index = 0;
	if (x_WORD_180660_VGA_type_resolution & 6)
		count_of_colors = 16;
	else
		count_of_colors = 256;
	v6 = 9999;
	//v12 = count_of_colors;
	//v7 = 0;
	//if (count_of_colors > 0)
	//{
	for (Bit16u i = 0;i < count_of_colors;i++)
	{
		v9 = a3 - pallette[pallette_index + 1];//eax[1]
		v10 = (a2 - pallette[pallette_index]) * (a2 - pallette[pallette_index]) + v9 * v9;
		v11 = a4 - pallette[pallette_index + 2];
		if (v10 + v11 * v11 < v6)
		{
			v6 = v10 + v11 * v11;
			result = i;
		}
		//v7++;
		pallette_index += 3;
	} //while (v7 < count_of_colors);
//}
	return result;
}

/*
char __cdecl sub_5BE80(uint8_t *a1, uint8_t a2, uint8_t a3, uint8_t a4)
{
  uint8_t *v4; // eax
  signed int v5; // edx
  signed int v6; // ecx
  unsigned int v7; // edx
  int v9; // esi
  int v10; // esi
  int v11; // edi
  unsigned int v12; // [esp+0h] [ebp-8h]
  char v13; // [esp+4h] [ebp-4h]

  v4 = a1;//eax=[ebp+14]
  if ( word_180660 & 6 )//[351660]&6
	v5 = 16;//edx
  else
	v5 = 256;//edx
  v6 = 9999;//ecx
  v12 = v5;[ebp-8]=edx
  v7 = 0;//edx
  if ( v12 <= 0 )[ebp-8]<0
	return v13;
  do
  {
	v9 = a3 - v4[1];//[ebp+1c]-a1[1]
	v10 = (a2 - *v4) * (a2 - *v4) + v9 * v9;
	v11 = a4 - v4[2];//[ebp+20]-[eax+2]
	if ( v10 + v11 * v11 < v6 )
	{
	  v6 = v10 + v11 * v11;
	  v13 = v7;
	}
	++v7;
	v4 += 3;
  }
  while ( v7 < v12 );
  return v13;
}
*/

//----- (0005BF10) --------------------------------------------------------
char sub_5BF10()//23cf10
{
	char result; // al

	if (x_BYTE_E3799_sound_card)
		sub_8D8F0_sound_proc3_endsample();
	if (x_BYTE_E37FD)
		sub_8E020_sound_proc14_stopsequence();
	result = 0;
	x_BYTE_E37FD = 0;
	x_BYTE_E3799_sound_card = 0;
	return result;
}





//----- (0005BF50) --------------------------------------------------------
signed int sub_5BF50_load_psxdata()//23cf50 //find 2bc394
{
	signed int result; // eax

	x_DWORD_181C40_vga_init_buffer = (Bit8u*)malloc(0x100); //fix it 264D70
	if (x_DWORD_181C40_vga_init_buffer)
	{
		if (sub_84250_load_file_array(psxasearchd_2bac30))//psxasearchd_2bac30~=2a9a54   set 2bc394(after 2A9A54) - set 2bab20
		{
			myprintf("NOT ENOUGH MEMORY\n");
			sub_90D3F_unload_file_array(psxasearchd_2bac30);
			result = 0;
		}
		else
		{
			if (sub_84250_load_file_array(psxadatabuild00dat))
			{
				myprintf("NOT ENOUGH MEMORY\n");
				sub_90D3F_unload_file_array(psxasearchd_2bac30);
				sub_90D3F_unload_file_array(psxadatabuild00dat);
				result = 0;
			}
			else
			{
				sub_539A0_load_bldgprm();
				if (sub_84250_load_file_array(psxawscreen_351628))
				{
					sub_90D3F_unload_file_array(psxawscreen_351628);
					myprintf("NOT ENOUGH MEMORY\n");
					result = 0;
				}
				else
				{
					x_WORD_180660_VGA_type_resolution = 1;
					sub_83B50();//264B50
					result = 1;
				}
			}
		}
	}
	else
	{
		myprintf("NO VESA DRIVER DETECTED\n");
		result = 0;
	}
	return result;
}

//----- (0005C060) --------------------------------------------------------
signed int sub_5C060()//23d060
{
	sub_90D3F_unload_file_array(psxasearchd_2bac30);
	sub_90D3F_unload_file_array(psxadatabuild00dat);
	sub_90D3F_unload_file_array(psxawscreen_351628);
	return 1;
}

//----- (0005C0A0) --------------------------------------------------------
void sub_5C0A0()//23d0a0
{
	//char *v0; // ebx
	int v0x;
	unsigned int v1; // ecx
	//char v2; // dl
	//char v3; // ah
	//char v4; // dh
	//int result; // eax

	//v0 = (char*)*xadataspellsdat.var28_begin_buffer;
	v0x = 0;
	v1 = 0;
	do
	{
		while (1)
		{
			//v2 = v0[53];
			//v2 = SPELLS_BEGIN_BUFFER_str[v0x].subspell[1].byte_0x1B;
			//v0[1] = 0;
			SPELLS_BEGIN_BUFFER_str[v0x].byte_1=0;
			//v3 = v0[27];
			//v3 = SPELLS_BEGIN_BUFFER_str[v0x].subspell[0].byte_0x1B;
			//v0[53] = v2 & 0xFE;
			SPELLS_BEGIN_BUFFER_str[v0x].subspell[1].byte_0x1B &=0xFE;
			//v4 = v0[79];
			//v4 = SPELLS_BEGIN_BUFFER_str[v0x].subspell[2].byte_0x1B;

			//v0[27] = v3 & 0xFE;
			SPELLS_BEGIN_BUFFER_str[v0x].subspell[0].byte_0x1B &=0xFE;
			//v0[79] = v4 & 0xFE;
			SPELLS_BEGIN_BUFFER_str[v0x].subspell[2].byte_0x1B &=0xFE;
			if (v1 < 7)
			{
				if (v1 < 3)
				{
					if (!v1)
						//v0[53] |= 1u;
						SPELLS_BEGIN_BUFFER_str[v0x].subspell[1].byte_0x1B |= 1u;
				}
				else if (v1 <= 4 || v1 == 6)
				{
					goto LABEL_18;
				}
			}
			else
			{
				if (v1 <= 7)
				{
					//v0[27] |= 1u;
					SPELLS_BEGIN_BUFFER_str[v0x].subspell[0].byte_0x1B |= 1;
					goto LABEL_22;
				}
				if (v1 < 0xB)
				{
					if (v1 != 8)
						goto LABEL_22;
				LABEL_18:
					//v0[1] |= 4u;
					SPELLS_BEGIN_BUFFER_str[v0x].byte_1 |= 4u;
					goto LABEL_22;
				}
				if (v1 <= 0xC)
					goto LABEL_18;
				if (v1 >= 0xE)
				{
					if (v1 <= 0xE)
						goto LABEL_18;
					if (v1 == 23)
					{
						/**(x_DWORD *)(v0 + 10) = 50000;
						*((x_DWORD *)v0 + 9) = 70000;
						*(x_DWORD *)(v0 + 62) = 90000;*/
						SPELLS_BEGIN_BUFFER_str[v0x].subspell[0].dword_A = 50000;
						SPELLS_BEGIN_BUFFER_str[v0x].subspell[1].dword_A = 70000;
						SPELLS_BEGIN_BUFFER_str[v0x].subspell[2].dword_A = 90000;
					}
				}
			}
		LABEL_22:
			//result = 1000 / *(x_DWORD *)(v0 + 58);
			//result = 1000 / SPELLS_BEGIN_BUFFER_str[v0x].subspell[2].dword_6;
			//if (*(x_DWORD *)(v0 + 62) <= 0 && result > 0)
			if (SPELLS_BEGIN_BUFFER_str[v0x].subspell[2].dword_A <= 0 && 1000 / SPELLS_BEGIN_BUFFER_str[v0x].subspell[2].dword_6 > 0)
			{
				//v0[1] |= 0x20u;
				SPELLS_BEGIN_BUFFER_str[v0x].byte_1 |= 0x20u;
				goto LABEL_30;
			}
			//if (*((x_DWORD *)v0 + 9) > 0 || 1000 / *((x_DWORD *)v0 + 8) <= 0)
			if (SPELLS_BEGIN_BUFFER_str[v0x].subspell[1].dword_A > 0 || 1000 / SPELLS_BEGIN_BUFFER_str[v0x].subspell[1].dword_6 <= 0)
				break;
			//v0[1] |= 0x10u;
			SPELLS_BEGIN_BUFFER_str[v0x].byte_1 |= 0x10u;
			++v1;
			//v0 += 80;
			v0x++;
			if ((signed int)v1 >= 26)
				return;// result;
		}
		//v0[1] |= 8u;
		SPELLS_BEGIN_BUFFER_str[v0x].byte_1 |= 0x8u;
	LABEL_30:
		v1++;
		//v0 += 80;
		v0x++;
	} while ((signed int)v1 < 26);
	//return result;
}

//----- (0005C1B0) --------------------------------------------------------
signed int sub_5C1B0_set_any_variables2()//23A05 - 23D1B0
{
	//x_BYTE *v0; // eax
	//int v1; // eax
	//int v2; // eax
	//int v3; // eax
	//int v4; // eax
	//char v5; // dl
	uint16_t v6; // dx
	uint16_t v7; // bx

	sub_5C330();//23D330
	//x_D41A0_BYTEARRAY_0[8618] = 1;//0x21aa
	D41A0_BYTESTR_0.str_0x21AA.creflections_0x21AA =1;
	//x_D41A0_BYTEARRAY_0[8619] = 1;//0x21ab
	D41A0_BYTESTR_0.str_0x21AA.cshadows_0x21AB = 1;
	//x_D41A0_BYTEARRAY_0[8620] = 1;//0x21ac
	D41A0_BYTESTR_0.str_0x21AA.csky_0x21AC=1;
	//x_D41A0_BYTEARRAY_0[8621] = 1;//0x21ad
	D41A0_BYTESTR_0.str_0x21AA.calter_0x21AD=1;
	//x_D41A0_BYTEARRAY_0[8622] = 1;//0x21ae
	D41A0_BYTESTR_0.str_0x21AE.xxxx_0x21AE =1;
	//x_D41A0_BYTEARRAY_0[8623] = 1;//0x21af
	D41A0_BYTESTR_0.str_0x21AE.xxxx_0x21AF = 1;
	//x_D41A0_BYTEARRAY_0[8624] = 1;//0x21b0
	D41A0_BYTESTR_0.str_0x21AE.xxxx_0x21B0 = 1;
	//x_D41A0_BYTEARRAY_0[8625] = 0;//0x21b1
	D41A0_BYTESTR_0.str_0x21AE.xxxx_0x21B1 = 0;
	//x_D41A0_BYTEARRAY_0[8626] = 1;//0x21b2
	D41A0_BYTESTR_0.str_0x21B2.xxxx_0x21B2=1;
	//x_D41A0_BYTEARRAY_0[8627] = 1;//0x21b3
	D41A0_BYTESTR_0.str_0x21B2.xxxx_0x21B3 = 1;
	//x_D41A0_BYTEARRAY_0[8628] = 1;//0x21b4
	D41A0_BYTESTR_0.str_0x21B2.cresolution_0x21B4 = 1;
	//x_D41A0_BYTEARRAY_0[8630] = 1;//0x21b6
	D41A0_BYTESTR_0.str_0x21B6.clights_0x21B6 = 1;
	//x_D41A0_BYTEARRAY_0[8631] = 1;//0x21b7
	D41A0_BYTESTR_0.str_0x21B6.csetting_0x21B7 = 1;
	//x_D41A0_BYTEARRAY_0[8632] = 1;//0x21b8
	D41A0_BYTESTR_0.str_0x21B6.ctransparency_0x21B8 = 1;
	//x_D41A0_BYTEARRAY_0[8633] = 1;//0x21b9
	D41A0_BYTESTR_0.str_0x21B6.cflat_0x21B9 = 1;
	sub_84050();//265050 //get computer speed
	//if (x_D41A0_BYTEARRAY_0[34])//0x22
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_34)//0x22
	{
		//x_D41A0_BYTEARRAY_0[8586] = 1;//0x218a
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.reflections_0x218A=1;
		//x_D41A0_BYTEARRAY_0[8588] = 1;//0x218c
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.sky_0x218C=1;
		//x_D41A0_BYTEARRAY_0[8598] = 1;//0x2196
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.lights_0x2196=1;
	}
	else
	{
		//x_D41A0_BYTEARRAY_0[8586] = 0;//0x218a
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.reflections_0x218A = 0;
		//x_D41A0_BYTEARRAY_0[8588] = 0;//0x218c
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.sky_0x218C = 0;
		//x_D41A0_BYTEARRAY_0[8598] = 0;//0x2196
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.lights_0x2196 = 0;
	}
	//x_D41A0_BYTEARRAY_0[8587] = 1;//0x218b
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.shadows_0x218B = 1;
	//x_D41A0_BYTEARRAY_0[8591] = 1;//0x218f
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.topbar_0x218F = 1;
	//x_D41A0_BYTEARRAY_0[8590] = 1;//0x218e
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.minimap_0x218E = 1;
	//x_D41A0_BYTEARRAY_0[8589] = 40;//0x218d
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D = 40;
	//x_D41A0_BYTEARRAY_0[8599] = 0;//0x2197
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.setting_0x2197 = 0;
	//x_D41A0_BYTEARRAY_0[8600] = 0;//0x2198
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.transparency_0x2198 = 0;
	//x_D41A0_BYTEARRAY_0[8601] = 0;//0x2199
	D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.flat_0x2199 = 0;
	//x_D41A0_BYTEARRAY_0[14] = 2;
	D41A0_BYTESTR_0.word_0xe = 2;;
	//strcpy(x_D41A0_BYTEARRAY_4_struct.byteindex_145ar, "NETHERW");
	x_D41A0_BYTEARRAY_4_struct.byteindex_184w = 256;
	//v5 = '\0';
	x_D41A0_BYTEARRAY_4_struct.byteindex_218w = 25;
	x_D41A0_BYTEARRAY_4_struct.player_name_57ar[0] = '\0';
	v6 = x_D41A0_BYTEARRAY_4_struct.levelnumber_43w;
	v7 = x_D41A0_BYTEARRAY_4_struct.byteindex_218w;
	x_D41A0_BYTEARRAY_4_struct.setting_30 = 0;
	if (v6 >= v7)
		x_D41A0_BYTEARRAY_4_struct.levelnumber_43w = v7 - 1;
	sub_87090();
	if (str_unk_1804B0ar.byte_0xa2)
		x_D41A0_BYTEARRAY_4_struct.byteindex_10 = 1;
	//sub_2CA90(x_D41A0_BYTEARRAY_0[8589]);//268090//0x218d
	sub_2CA90(D41A0_BYTESTR_0.str_0x218A_settings.str_0x218A.alter_0x218D);//268090//0x218d
	return 1;
}

Bit32u readdword(Bit8s* a, Bit32u b)
{
	return(*(Bit32u*)&a[b]);
}

/*
void sub_5C330()
{
  signed int i; // edx
  int v1; // eax

  if ( dword_D41A0 )
  {
	for ( i = 0; i < 1001; dword_EA3E0[i] = dword_D41A0 + 28302 + v1 )
	  v1 = 168 * i++;
  }
}
*/

//----- (0005C330) --------------------------------------------------------
void sub_5C330()//23D330
{
	//signed int i; // edx
	//int v1; // eax

	//if (x_D41A0_BYTEARRAY_0)//386035
	{
		for (int i = 0; i < 0x3E9;i++ )
		{
			//Bit8u* x=&x_D41A0_BYTEARRAY_0[0x6e8e + (168 * i)];
			x_DWORD_EA3E4[i] = &D41A0_BYTESTR_0.struct_0x6E8E[i];// (type_str_0x6E8E*)& x_D41A0_BYTEARRAY_0[0x6e8e + (168 * i)];
			//Bit32s x = *x_D41A0_BYTEARRAY_0 + 0x6e8e + 168 * i;//fix
			//var_2BB3E0_x_DWORD_EA3D4_14.pointer
		}
		//*filearray_2aa18c[7] = (Bit8u*)(Bit32u*)readdword((Bit8s*)x_D41A0_BYTEARRAY_0, 0) + 0x6e8e + 168 * i;//fix it - this is dword // fix it
	//356038([x_D41A0_BYTEARRAY_0=2a51a0]) +6e8e
	//[2bb3e0+edx*4]-<
	//edx++
	//356038([x_D41A0_BYTEARRAY_0]) +6e8e + a8 * i
	  //*filearray_2aa18c[7] = (Bit8u*)(Bit32u*)readdword((Bit8s*)x_D41A0_BYTEARRAY_0,0) + 0x6e8e + 168 * i;//fix it - this is dword // fix it
	}
}


//----- (0005C430) --------------------------------------------------------
int sub_5C430_multi_allocation()//23d430
{
	int result; // eax

	result = sub_74556();//255556 push ebp 355250
	x_D41A0_BYTEARRAY_4_struct.setting_216w = result;
	return result;
}

//----- (0005C450) --------------------------------------------------------
void sub_5C450()//23d450
{
	if (x_D41A0_BYTEARRAY_4_struct.setting_216w)
		sub_72D04();
}

//----- (0005C490) --------------------------------------------------------
int sub_5C490_testers_info()//23d490
{
	int result; // eax
	int v1; // edx

	myprintf("\n");
	myprintf("***********************************************************\n");
	myprintf("*   TESTERS: WRITE DOWN THE ABOVE VERSION DATE AND TIME.  *\n");
	myprintf("*   Press RETURN to continue...                           *\n");
	myprintf("***********************************************************\n");
	do
	{
		if (x_DWORD_E3BB0 <= 0 || x_DWORD_E3BB8 & 4 || *(x_BYTE *)x_DWORD_E3BAC == 13 || *(x_BYTE *)x_DWORD_E3BAC == 26)
		{
			result = fgetc((FILE*)&x_DWORD_E3BAC);
			v1 = result;
		}
		else
		{
			result = x_DWORD_E3BAC + 1;
			x_DWORD_E3BAC = result;
			v1 = *(uint8_t *)(result - 1);
			x_DWORD_E3BB0--;
		}
	} while (v1 != 10);
	return result;
}

//----- (0005C530) --------------------------------------------------------
void sub_5C530()//23d530
{
	int v0x; // edx
	int v1; // ecx
	type_str_0x6E8E* v2x; // ebx
	signed int i; // eax
	type_str_164* v4x; // esi
	signed int j; // eax
	int v6; // eax
	//int v7; // ecx
	int v8; // edx
	int v9; // edi
	int v10; // eax
	//int v11; // ecx
	int v12; // edx
	int v13; // edi
	int v14; // eax
	//int v15; // ecx
	type_str_0x6E8E* v16x; // eax
	//int v16y; // eax
	int v17; // esi
	int v18; // edx
	/*int v19; // esi
	int v20; // eax
	int v21; // eax
	int v22; // eax
	int v23; // eax
	int v24; // eax
	int v25; // eax
	int v26; // eax
	int v27; // eax*/

	v0x = 0;
	v1 = 0;
	v2x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	for (i = 0; i < 26; i++)
	{
		v4x = v2x->dword_0xA4_164x;
		if (v4x->str_611.array_0x333_819x.word[i] || v4x->str_611.array_0x403_1027x.byte[i])
			v4x->str_611.array_0x3E9_1001x.byte[i] = 1;
	}
	if (D41A0_BYTESTR_0.byte_0x36E0B & 1)
		D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3E4_2BE4_12226++;
	for (j = 0; j < 26; j++)
	{
		if (D41A0_BYTESTR_0.str_0x364D2.dword_0x364D6[j])
		{
			v1++;
			if (v2x->dword_0xA4_164x->str_611.array_0x403_1027x.byte[j])
				v0x++;
		}
	}
	if (v1)
	{
		v6 = 100 * v0x / v1;
		//v0 = v2x->dword_0xA4_164;
		v2x->dword_0xA4_164x->dword_0x179_377 = v6;
	}
	else
	{
		v2x->dword_0xA4_164x->dword_0x179_377 = 100;
	}
	if (D41A0_BYTESTR_0.str_0x364D2.dword_0x364D2)
	{
		//v7 = v2x->dword_0xA4_164;
		v8 = 100 * v2x->dword_0xA4_164x->dword_0x175_373;
		v9 = D41A0_BYTESTR_0.str_0x364D2.dword_0x364D2;
		v10 = v8 / v9;
		//v0 = v8 % v9;
		v2x->dword_0xA4_164x->dword_0x175_373 = v10;
	}
	else
	{
		v2x->dword_0xA4_164x->dword_0x175_373 = 100;
	}
	//v11 = v2x->dword_0xA4_164;
	if (v2x->dword_0xA4_164x->dword_0x165_357)
	{
		v12 = 100 * v2x->dword_0xA4_164x->dword_0x169_361;
		v13 = v2x->dword_0xA4_164x->dword_0x165_357;
		v14 = v12 / v13;
		//v0 = v12 % v13;
		v2x->dword_0xA4_164x->dword_0x17D_381 = v14;
	}
	else
	{
		v2x->dword_0xA4_164x->dword_0x17D_381 = 100;
	}
	//v15 = v2x->dword_0xA4_164;
	v16x = x_DWORD_EA3E4[v2x->dword_0xA4_164x->word_0x3A_58];
	if (v16x)
	{
		v17 = *(Bit32u*)& x_D41A0_BYTEARRAY_4_struct.byteindex_242ar[4] - 1;
		if (v17 <= 0)
		{
			v2x->dword_0xA4_164x->dword_0x181_385 = 100;
			goto LABEL_29;
		}
		v18 = 100 * (v2x->dword_0xA4_164x->dword_0x13C_316 + v16x->dword_0x90_144);
		v2x->dword_0xA4_164x->dword_0x181_385 = v18 / v17;
		//v0 = v18 % v17;
	}
	else
		v2x->dword_0xA4_164x->dword_0x181_385 = 0;
	//v2x->dword_0xA4_164x->dword_0x181_385 = v16y;//? or (Bit8u*)(v18 / v17)
LABEL_29:
	//v19 = v2x->dword_0xA4_164;
	v2x->dword_0xA4_164x->dword_0x189_393 = (j___clock() - v2x->dword_0xA4_164x->dword_0x189_393) / 0x64u;
	//v20 = v2x->dword_0xA4_164;
	if (v2x->dword_0xA4_164x->dword_0x179_377 < 0)
		v2x->dword_0xA4_164x->dword_0x179_377 = 0;
	//v21 = v2x->dword_0xA4_164;
	if (v2x->dword_0xA4_164x->dword_0x179_377 > 100)
		v2x->dword_0xA4_164x->dword_0x179_377 = 100;
	//v22 = v2x->dword_0xA4_164;
	if (v2x->dword_0xA4_164x->dword_0x175_373 < 0)
		v2x->dword_0xA4_164x->dword_0x175_373 = 0;
	//v23 = v2x->dword_0xA4_164;
	if (v2x->dword_0xA4_164x->dword_0x175_373 > 100)
		v2x->dword_0xA4_164x->dword_0x175_373 = 100;
	//v24 = v2x->dword_0xA4_164;
	if (v2x->dword_0xA4_164x->dword_0x17D_381 < 0)
		v2x->dword_0xA4_164x->dword_0x17D_381 = 0;
	//v25 = v2x->dword_0xA4_164;
	if (v2x->dword_0xA4_164x->dword_0x17D_381 > 100)
		v2x->dword_0xA4_164x->dword_0x17D_381 = 100;
	//v26 = v2x->dword_0xA4_164;
	if (v2x->dword_0xA4_164x->dword_0x181_385 < 0)
		v2x->dword_0xA4_164x->dword_0x181_385 = 0;
	//v27 = v2x->dword_0xA4_164;
	if (v2x->dword_0xA4_164x->dword_0x181_385 > 100)
		v2x->dword_0xA4_164x->dword_0x181_385 = 100;
	sub_82AB0(x_D41A0_BYTEARRAY_4_struct.levelnumber_43w);
}

//----- (0005C800) --------------------------------------------------------
void sub_5C800(type_str_0x6E8E* a1x, char a2)//23d800
{
	//int16_t result; // ax

	//result = D41A0_BYTESTR_0.word_0xc;
	if (D41A0_BYTESTR_0.word_0xc == a1x->dword_0xA4_164x->word_0x38_56)
	{
		//result = (short)x_D41A0_BYTEARRAY_4;
		x_D41A0_BYTEARRAY_4_struct.byteindex_180 = a2;
	}
	//return result;
}

//----- (0005C830) --------------------------------------------------------
void sub_5C830(type_str_0x6E8E* a1x, char a2, int16_t a3)//23d830
{
	//int v3; // eax

	//LOWORD(v3) = D41A0_BYTESTR_0.word_0xc;
	if (D41A0_BYTESTR_0.word_0xc == a1x->dword_0xA4_164x->word_0x38_56)
	{
		//v3 = (int)x_D41A0_BYTEARRAY_4;
		x_D41A0_BYTEARRAY_4_struct.byteindex_180 = a2;
		x_D41A0_BYTEARRAY_4_struct.byteindex_184w = a3;
	}
	//return v3;
}

//----- (0005C870) --------------------------------------------------------
void sub_5C870(type_str_0x6E8E* a1x)//23d870
{
	type_str_0x6E8E* v1x; // ebx
	//type_str_164* v2x; // esi
	Bit32u index; // eax

	v1x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	//v2x = v1x->dword_0xA4_164x;
	index = sub_583F0_distance_3d(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
	if (index <= v1x->dword_0xA4_164x->dword_0x19A_410)
		v1x->dword_0xA4_164x->dword_0x19A_410 = index;
	//return result;
}

//----- (0005C8D0) --------------------------------------------------------
void sub_5C8D0(type_str_0x6E8E* a1x)//23d8d0
{
	type_str_0x6E8E* v1x; // ebx
	//Bit8u* v2; // esi
	Bit32u index; // eax

	v1x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	//v2 = (Bit8u*)v1x->dword_0xA4_164;
	index = sub_583F0_distance_3d(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
	if (index <= v1x->dword_0xA4_164x->dword_0x19E_414)
		v1x->dword_0xA4_164x->dword_0x19E_414 = index;
	//return result;
}

int debugcounter_23d950 =0;
//----- (0005C950) --------------------------------------------------------
void sub_5C950(type_str_0x2BDE* a1x, type_str_0x6E8E* a2x)//23d950
{
	type_str_0x6E8E* v2x; // ebx
	int16_t v3; // ax
	//int v4; // eax
	//uint16_t v5; // dx
	axis_3d* v6x; // esi
	//int v7; // ecx
	char v8; // ST08_1
	int v9; // edi
	int v10; // edx
	signed int i; // eax
	//Bit8u* v12; // eax
	//int v13; // edx
	int16_t v14; // cx
	//int v15; // eax
	type_str_0x6E8E* v16x; // eax
	//Bit8u* v17; // ecx
	axis_3d* v18x; // edi
	//Bit8u* v19; // esi
	type_str_0x6E8E* v20x; // eax
	int16_t v21; // dx
	int v22; // edi
	int v23; // eax
	type_str_0x6E8E* v24x; // edx
	type_str_0x6E8E* v25x; // eax
	type_str_0x6E8E* v26x; // ST08_4
	type_str_0x6E8E* v27x; // esi
	int v28; // eax
	int v29; // eax
	//int v30; // edx
	type_str_0x6E8E* kx; // eax
	char v32; // dl
	signed int l; // eax
	//int result; // eax
	axis_3d v35x; // [esp+0h] [ebp-14h]
	//int16_t v36; // [esp+4h] [ebp-10h]
	int v37; // [esp+8h] [ebp-Ch]
	int j; // [esp+Ch] [ebp-8h]
	type_str_0x6E8E* v39x; // [esp+10h] [ebp-4h]


	//fix it
	v10 = 0;
	//fix it

	v2x = a2x;
	v37 = 0;
	sub_49F90();
	//*(Bit32u*)v35x = *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 6 * ((a1 - &x_D41A0_BYTEARRAY_0[11230]) / 2124) + 9058);//fix
	//v35x[2] = *(x_WORD *)(x_D41A0_BYTEARRAY_0 + 6 * ((a1 - &x_D41A0_BYTEARRAY_0[11230]) / 2124) + 9062);
	v35x = D41A0_BYTESTR_0.array_0x2362[a1x - D41A0_BYTESTR_0.array_0x2BDE];
	//v35x[2] = get_x_D41A0_BYTEARRAY_0_0x2366(((a1 - &x_D41A0_BYTEARRAY_0[11230]) / 2124));
	v3 = sub_10C40_getTerrainAlt(&v35x);
	v3+=0x100;
	v35x.z = v3;
	if (a2x == x_DWORD_EA3E4[0])
	{
		v2x = sub_4A190(&v35x, 3, a1x->byte_0x009_2BE4_11239 == 1);
		v37 = 1;
	}
	else
	{
		a2x->byte_0x45_69 = a1x->byte_0x009_2BE4_11239 == 1;
		//v4 = a2x->dword_0xA4_164;
		a2x->struct_byte_0xc_12_15.byte[0] &= 0xDFu;
		//v5 = a2x->dword_0xA4_164x->word_0x3A_58;
		if (a2x->dword_0xA4_164x->word_0x3A_58)
		{
			v6x = &x_DWORD_EA3E4[a2x->dword_0xA4_164x->word_0x3A_58]->array_0x4C_76;
			v35x = *v6x;
		}
		sub_57CF0(a2x, &v35x);
	}
	//v7 = (int)x_D41A0_BYTEARRAY_0;
	a1x->word_0x00a_2BE4_11240 = v2x - D41A0_BYTESTR_0.struct_0x6E8E;
	v2x->dword_0xA4_164x = &a1x->dword_0x3E6_2BE4_12228;
	v2x->dword_0xA4_164x->word_0x38_56 = a1x - D41A0_BYTESTR_0.array_0x2BDE;
	v2x->dword_0xA4_164x->word_0x159_345 = 100;
	v2x->dword_0xA4_164x->word_0x24C_588 = 0;
	v2x->dword_0xA4_164x->dword_0x16D_365 = 2000;
	v2x->dword_0xA4_164x->word_0xc_12 = 0;
	v2x->dword_0xA4_164x->word_0x20_32 = 0;
	v2x->dword_0xA4_164x->word_0x22_34 = 0;
	v2x->dword_0xA4_164x->word_0x1E_30 = 0;
	v2x->dword_0xA4_164x->word_0x10_16 = 0;
	memset(&v2x->dword_0xA4_164x->str_0x1AC_428, 0, 18);
	v2x->dword_0xA4_164x->word_0x24A_586 = 256;
	v8 = v37;
	v2x->dword_0x8C_140 = 1000;
	v9 = v37;
	v2x->dword_0x4 = 10000;
	sub_5CF40(v2x, v8);
	if (v9)
	{
		sub_58DA0(0, v2x);
		for (i = 0; i < 26; i++)
			//*(x_DWORD *)(v2x->dword_0xA4_164 + 4 * i + 711) = 0;
			v2x->dword_0xA4_164x->str_611.array_0x2CB_715x.dword[i] = 0;
		v2x->dword_0xA4_164x->dword_0x189_393 = j___clock();
		switch (sub_616D0(v2x->dword_0xA4_164x->word_0x38_56))
		{
		case 0:
			sub_49CD0(v2x, 44);
			break;
		case 1:
			sub_49CD0(v2x, 273);
			break;
		case 2:
			sub_49CD0(v2x, 274);
			break;
		case 3:
			sub_49CD0(v2x, 275);
			break;
		case 4:
			sub_49CD0(v2x, 276);
			break;
		case 5:
			sub_49CD0(v2x, 277);
			break;
		case 6:
			sub_49CD0(v2x, 278);
			break;
		case 7:
			sub_49CD0(v2x, 279);
			break;
		default:
			break;
		}
		if (a1x->byte_0x009_2BE4_11239 == 1)
		{
			//v12 = x_D41A0_BYTEARRAY_0;
			v2x->dword_0xA4_164x->word_0x242_578 = D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v2x->dword_0xA4_164x->word_0x38_56].word_0x360D5;
			v2x->dword_0xA4_164x->word_0x244_580 = D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v2x->dword_0xA4_164x->word_0x38_56].word_0x360DD;
			v2x->dword_0xA4_164x->word_0x246_582 = D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v2x->dword_0xA4_164x->word_0x38_56].word_0x360D9;
			//v13 = v2x->dword_0xA4_164;
			v14 = D41A0_BYTESTR_0.str_2FECE.next_0x360D2[v2x->dword_0xA4_164x->word_0x38_56].word_0x3612F;
			if (v14)
			{
				v2x->dword_0xA4_164x->word_0x24A_586 = v14;
				v2x->dword_0x4 = v2x->dword_0x4 * v2x->dword_0xA4_164x->word_0x24A_586 >> 8;
			}
			//v15 = v2x->dword_0xA4_164;
			if (v2x->dword_0xA4_164x->str_611.array_0x333_819x.word[2])
			{
				if (D41A0_BYTESTR_0.str_2FECE.array_0x2FED9[v2x->dword_0xA4_164x->word_0x38_56])
				{
					v16x = sub_4A190(&v2x->array_0x4C_76, 3, 2);
					v39x = v16x;
					if (v16x)
					{
						//v17 = &x_D41A0_BYTEARRAY_0[28302];
						v16x->word_0x1A_26 = v2x->word_0x1A_26;
						v2x->dword_0xA4_164x->word_0x3A_58 = v16x - D41A0_BYTESTR_0.struct_0x6E8E;
						sub_6E450_distance_sound(v2x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 30);
						for (j = 0; ; j = v22 + 1)
						{
							v23 = D41A0_BYTESTR_0.str_2FECE.array_0x2FED9[v2x->dword_0xA4_164x->word_0x38_56];
							if (v23 <= j)
								break;
							v18x = &x_DWORD_EA3E4[0]->array_0x4C_76;
							//v19 = v39x->word_0x9A_154x;
							*v18x = v39x->word_0x9A_154x;
							v20x = x_DWORD_EA3E4[0];
							v21 = v39x->word_0x1A_26;
							x_DWORD_EA3E4[0]->byte_0x40_64 = 0;
							v22 = j;
							v20x->dword_0x10_16 = 0;
							v20x->word_0x1A_26 = v21;
							v20x->byte_0x46_70 = j;
							sub_36FC0(v20x);
						}
						v24x = v39x;
						v39x->dword_0x10_16 = v23 - 1;
						sub_49EC0(v24x, v24x->dword_0x10_16);
						v25x = v39x;
						v26x = v39x;
						v39x->array_0x52_82.aa = 0xe000;
						v27x = v25x;
						v25x->array_0x52_82.dd = 0x4000;
						sub_60810(v26x);
						v28 = v27x->dword_0x8C_140;
						v27x->dword_0x90_144 = v28;
						if (v28 < 0)
							v27x->dword_0x90_144 = 0;
						if (v39x->dword_0x90_144 > 320000)
							v39x->dword_0x90_144 = 320000;
					}
				}
			}
		}
		v2x->dword_0xA4_164x->dword_0x175_373 = 0;
	}
	if (D41A0_BYTESTR_0.word_0xc == v2x->dword_0xA4_164x->word_0x38_56)
		v2x->struct_byte_0xc_12_15.byte[0] |= 1u;
	//23ddf7
	v2x->dword_0x8 = v2x->dword_0x4;
	v29 = v2x->dword_0x8C_140;
	//v30 = v2x->dword_0xA4_164x;
	v2x->dword_0x90_144 = v29;
	v2x->dword_0xA4_164x->byte_0x150_336 = v29;
	for (kx = x_D41A0_BYTEARRAY_4_struct.dword_38519; kx > x_DWORD_EA3E4[0]; kx = kx->next_0)
	{
		if (kx->word_0x1A_26 != v2x->word_0x1A_26)
		{
			v32 = kx->byte_0x40_64;
			if (!v32 || v32 == 1)
				kx->dword_0xA4_164x->array_0x1FC_508[4+4*v2x->dword_0xA4_164x->word_0x38_56] = -24609;
		}
	}
	v2x->dword_0xA4_164x->word_0x146_326 = 0;
	v2x->dword_0xA4_164x->word_0x148_328 = 0;
	if (v2x->byte_0x40_64 == 1)
	{
		memset(&v2x->dword_0xA4_164x->byte_0x1C1_449, 0, 1);
		//for (l = 0; l < 8; *(x_WORD *)(v2x->dword_0xA4_164 + 8 * l + 508) = 24607)
		for (l = 0; l < 8; l++)
			//*(x_WORD*)(v2x->dword_0xA4_164 + 8 * l + 508) = 24607
			v2x->dword_0xA4_164x->array_0x1FC_508[4 * l+4] = 24607;
		v2x->dword_0xA4_164x->str_611.array_0x367_871x.word[2] = 4 * v2x->dword_0xA4_164x->word_0x38_56;
	}
	v2x->dword_0xA4_164x->dword_0x19A_410 = 2048;
	v2x->dword_0xA4_164x->dword_0x19E_414 = 2048;
	v2x->dword_0xA4_164x->word_0x36_54 = 0;
	memset(v2x->dword_0xA4_164x->array_0x15B_347, 16, 8);
	//result = (int)x_D41A0_BYTEARRAY_0;
	D41A0_BYTESTR_0.dword_0x11e6 = -1;
	if (v2x->dword_0xA4_164x->word_0x38_56 == D41A0_BYTESTR_0.word_0xc)
	{
		//result = (int)x_D41A0_BYTEARRAY_4;
		x_D41A0_BYTEARRAY_4_struct.byteindex_178 = 0;
	}
	//return result;
}

//----- (0005CF40) --------------------------------------------------------
void sub_5CF40(type_str_0x6E8E* a1x, char a2)//23df40
{
	int i; // esi
	//int v3; // edi
	type_str_0x6E8E* v4x; // eax
	//Bit8u* v5; // ST0C_4
	signed int j; // edx
	signed int v7; // esi
	//int v8; // eax
	//int16_t v9; // cx

	for (i = 0; i < 26; i++)
	{
		//v3 = 2 * i;
		/*
		esi=1
		edi=2*esi=2*1
		eax=[ebx+a4]
		*/
		if (a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[i])
		{
			v4x = sub_4A190(&a1x->array_0x4C_76, 15, i);
			if (v4x)
			{
				a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[i] = v4x - D41A0_BYTESTR_0.struct_0x6E8E;
				v4x->word_0x28_40 = a1x - D41A0_BYTESTR_0.struct_0x6E8E;
				v4x->struct_byte_0xc_12_15.byte[0] |= 1u;
			}
			else
			{
				a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[i] = 0;
			}
		}
	}
	if (a2)
	{
		for (j = 0; j < 26; j++)
			a1x->dword_0xA4_164x->str_611.array_0x437_1079x.byte[j] = 0;
	}
	sub_6DB50(0, 0);
	for (v7 = 0; v7 < 26; v7++)
	{
		//v8 = a1x->dword_0xA4_164;
		//v9 = *(x_WORD *)(v8 + 2 * v7 + 819);
		if (a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[v7])
			sub_6D5E0(x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[v7]], a1x->dword_0xA4_164x->str_611.array_0x437_1079x.byte[v7]);
	}
	a1x->dword_0xA4_164x->str_611.byte_0x455_1109 = a1x->dword_0xA4_164x->str_611.array_0x437_1079x.byte[a1x->dword_0xA4_164x->str_611.word_0x451_1105];
	a1x->dword_0xA4_164x->str_611.byte_0x456_1110 = a1x->dword_0xA4_164x->str_611.array_0x437_1079x.byte[a1x->dword_0xA4_164x->str_611.word_0x453_1107];
	sub_574A0();
}

//----- (0005D0A0) --------------------------------------------------------
int sub_5D0A0(type_str_0x6E8E* a1x)//23e0a0
{
	uint16_t v1; // di
	int v2; // eax
	int v3; // eax
	uint16_t v4; // si
	uint16_t v5; // ax
	uint16_t v6; // ax
	int v7; // esi
	int v8; // esi
	int16_t v9; // ax
	int v10; // eax
	int v11; // edx
	int v12; // edx
	int16_t v13; // si
	int16_t v14; // ax
	int v15; // edi
	int16_t v16; // ax
	int v17; // esi
	int v18; // eax
	axis_3d* v19x; // esi
	char v20; // ch
	int v21; // edx
	int v22; // eax
	int v23; // eax
	int16_t v24; // ax
	int16_t v25; // dx
	axis_3d v27x; // [esp+0h] [ebp-60h]
	//int16_t v28; // [esp+4h] [ebp-5Ch]
	axis_3d v29x; // [esp+8h] [ebp-58h]
	//int16_t v30; // [esp+Ch] [ebp-54h]
	axis_3d v31x; // [esp+10h] [ebp-50h]
	//int16_t v32; // [esp+14h] [ebp-4Ch]
	axis_3d v33x; // [esp+18h] [ebp-48h]
	//int16_t v34; // [esp+1Ch] [ebp-44h]
	int v35; // [esp+20h] [ebp-40h]
	int v36; // [esp+24h] [ebp-3Ch]
	int v37; // [esp+28h] [ebp-38h]
	int v38; // [esp+2Ch] [ebp-34h]
	int v39; // [esp+30h] [ebp-30h]
	int i; // [esp+34h] [ebp-2Ch]
	int v41; // [esp+38h] [ebp-28h]
	unsigned int v42; // [esp+3Ch] [ebp-24h]
	int v43; // [esp+40h] [ebp-20h]
	int v44; // [esp+44h] [ebp-1Ch]
	int v45; // [esp+48h] [ebp-18h]
	int v46; // [esp+4Ch] [ebp-14h]
	uint16_t v47; // [esp+50h] [ebp-10h]
	int v48; // [esp+54h] [ebp-Ch]
	int v49; // [esp+58h] [ebp-8h]
	char v50; // [esp+5Ch] [ebp-4h]

	v46 = 1;
	if (sub_104D0_terrain_tile_is_water(&x_WORD_EB398ar) == 256)
	{
		a1x->dword_0xA4_164x->byte_0x262_610++;
		v1 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &x_WORD_EB398ar);
		LOWORD(v2) = sub_58210_radix_tan(&a1x->array_0x4C_76, &x_WORD_EB398ar);
		v45 = v2;
		v42 = sub_583F0_distance_3d(&a1x->array_0x4C_76, &x_WORD_EB398ar);
		v41 = v1;
		v3 = (v41 - (__CFSHL__(v41 >> 31, 9) + (v41 >> 31 << 9))) >> 9;
		x_WORD_EB398ar = a1x->array_0x4C_76;
		v4 = (x_WORD)v3 << 9;
		v49 = (((x_WORD)v3 + 1) << 9) & 0x7FF;
		v5 = sub_582B0(v41, (x_WORD)v3 << 9);
		v36 = (uint16_t)v42;
		v35 = (uint16_t)v45;
		sub_57FA0(
			&x_WORD_EB398ar,
			v4,
			v45,
			((uint16_t)v42 * (512 - v5)
				- (__CFSHL__((uint16_t)v42 * (512 - v5) >> 31, 9)
					+ ((uint16_t)v42 * (512 - v5) >> 31 << 9))) >> 9);
		if (sub_104D0_terrain_tile_is_water(&x_WORD_EB398ar) == 256)
		{
			x_WORD_EB398ar = a1x->array_0x4C_76;
			v6 = sub_582B0(v41, v49);
			sub_57FA0(
				&x_WORD_EB398ar,
				v49,
				v35,
				(v36 * (512 - v6) - (__CFSHL__(v36 * (512 - v6) >> 31, 9) + (v36 * (512 - v6) >> 31 << 9))) >> 9);
			if (sub_104D0_terrain_tile_is_water(&x_WORD_EB398ar) == 256)
				v46 = 0;
		}
	}
	if (!x_BYTE_D41B6)
		return v46;
	v31x = x_WORD_EB398ar;
	v7 = a1x->dword_0xA0_160x->word_160_0xc_12;
	v8 = v7 + (int16_t)sub_10C40_getTerrainAlt(&v31x) + a1x->array_0x52_82.dd;
	v9 = sub_10C60(&v31x);
	LOBYTE(v47) = v31x.x >> 8;
	HIBYTE(v47) = v31x.y >> 8;
	if (v8 < v9 - 576 && !(x_BYTE_13B4E0_angle[v47] & 8))
		goto LABEL_30;
	v48 = 0;
	LOWORD(v10) = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v31x);
	v11 = v10 - 512;
	v50 = 0;
	BYTE1(v11) &= 7u;
	BYTE1(v10) = (BYTE1(v10) + 2) & 7;
	v43 = v11;
	v44 = v10;
	v12 = 16;
	for (i = 0; ; i++)
	{
		v39 = v12;
		if (i >= 6 || v50)
			break;
		v33x = v31x;
		v27x = v31x;	
		v13 = v39;
		v37 = (uint16_t)v48;
		sub_57FA0(&v33x, v43, v48, v39);
		v38 = (int16_t)sub_10C60(&v33x);
		v14 = sub_10C40_getTerrainAlt(&v33x);
		v15 = v38 - v14;
		sub_57FA0(&v27x, v44, v37, v13);
		v38 = (int16_t)sub_10C60(&v27x);
		v16 = sub_10C40_getTerrainAlt(&v27x);
		v17 = v38 - v16;
		LOBYTE(v47) = v33x.x>>8;
		HIBYTE(v47) = v33x.y >> 8;
		v18 = v27x.x >> 8;
		BYTE1(v18) = v27x.y >> 8;
		if (!(x_BYTE_13B4E0_angle[v47] & 8) || !(x_BYTE_13B4E0_angle[(uint16_t)v18] & 8))
		{
			if (v15 > v17 && !(x_BYTE_13B4E0_angle[v47] & 8))
			{
				if (sub_11E20(a1x, &v33x))
					goto LABEL_20;
				v19x = &v33x;
				v50 = 1;
				goto LABEL_19;
			}
			if (v17 > v15 && !(x_BYTE_13B4E0_angle[(uint16_t)v18] & 8) && !sub_11E20(a1x, &v27x))
			{
				v19x = &v27x;
				v50 = 2;
			LABEL_19:
				v29x = *v19x;
				goto LABEL_20;
			}
		}
	LABEL_20:
		v12 = 16 * (i + 1) + v39;
	}
	v20 = v50;
	if (v50)
	{
		v21 = i;
		v22 = 16 * i;
		x_WORD_EB398ar = v29x;
		v23 = (v22 + v21) / 6;
		if (v20 == 1)
			v23 = -v23;
		v24 = a1x->word_0x1C_28 + v23;
		HIBYTE(v24) &= 7u;
		a1x->word_0x1C_28 = v24;
	}
	else if (sub_11E20(a1x, &v31x))
	{
		v46 = 0;
	}
	else
	{
		x_WORD_EB398ar = v31x;
	}
LABEL_30:
	if ((x_WORD)v46)
	{
		LOBYTE(v47) = HIBYTE(x_WORD_EB398ar.x);
		HIBYTE(v47) = HIBYTE(x_WORD_EB398ar.y);
		if (x_BYTE_13B4E0_angle[v47] & 8)
			v46 = 0;
	}
	if (!(x_WORD)v46)
	{
		a1x->dword_0xA4_164x->byte_0x262_610;
		x_WORD_EB398ar = a1x->array_0x4C_76;
		a1x->dword_0xA4_164x->word_0xc_12 = 0;
		v25 = a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[3];
		if (v25)
			x_DWORD_EA3E4[v25]->word_0x2E_46 = 0;
	}
	return v46;
}

//----- (0005D530) --------------------------------------------------------
void sub_5D530(type_str_0x6E8E* a1x)//*(x_DWORD *)(a1 + 160)//23e530
{
	char v1; // ah
	//int v2; // ecx
	uint8_t v3; // dh
	int v4; // edx
	//int v5; // ecx
	int v6; // edx
	int v7; // edx
	int v8; // eax
	int v9; // edx
	int16_t v10; // ax
	//int v11; // eax
	int16_t v12; // dx
	//int v13; // eax
	uint8_t v14; // cl
	int v15; // edx
	int v16; // eax
	//int v17; // edx
	int16_t v18; // di
	int v19; // eax
	int16_t v20; // ST0C_2
	uint16_t v21; // ax
	//int v22; // eax
	int16_t v23; // dx
	//int v24; // eax
	int16_t v25; // si
	//x_WORD *v26; // edx
	int16_t v27; // ax
	//x_WORD *v28; // edx
	//int16_t v29; // si
	//int16_t v30; // ax
	//int v31; // edx
	char v32; // cl
	//int v33; // edx
	char v34; // ah
	//int v35; // eax
	char v36; // ch
	//int v37; // edx
	char v38; // ch
	int16_t v39; // ax
	int16_t v40; // dx
	//int v41; // ecx
	//int v42; // eax
	int16_t v43; // ax
	type_str_0x6E8E* v44x; // edx
	char v45; // al
	//int v46; // ecx
	//unsigned int v47; // eax
	int16_t v48; // si
	//int v49; // edx
	int16_t v50; // ax

	v1 = a1x->struct_byte_0xc_12_15.byte[1];
	if (v1 & 8)
	{
		a1x->struct_byte_0xc_12_15.byte[1] = v1 & 0xF7;
		return;
	}
	x_WORD_EB398ar = a1x->array_0x4C_76;
	//v2 = a1x->dword_0xA4_164;
	v3 = a1x->dword_0xA4_164x->byte_0x14C_332;
	if (v3)
	{
		v4 = a1x->dword_0xA4_164x->word_0x4_4 * (4 - v3);

		//a1x->dword_0xA4_164x->word_0x155_341 += (v4 - (__CFSHL__(v4 >> 31, 2) + 4 * (v4 >> 31))) >> 2;
		a1x->dword_0xA4_164x->word_0x155_341 += (v4 - (my_sign32(v4) * 3)) >> 2;
		//v5 = a1x->dword_0xA4_164;
		v6 = a1x->dword_0xA4_164x->word_0x6_6 * (4 - a1x->dword_0xA4_164x->byte_0x14C_332);
		//a1x->dword_0xA4_164x->word_0x157_343 += (v6 - (__CFSHL__(v6 >> 31, 2) + 4 * (v6 >> 31))) >> 2;
		a1x->dword_0xA4_164x->word_0x157_343 += (v6 - (my_sign32(v6) * 3)) >> 2;
	}
	else
	{
		a1x->dword_0xA4_164x->word_0x155_341 += a1x->dword_0xA4_164x->word_0x4_4;
		a1x->dword_0xA4_164x->word_0x157_343 += a1x->dword_0xA4_164x->word_0x6_6;
	}
	v7 = a1x->dword_0xA4_164x->word_0x155_341;

	//a1x->word_0x1C_28 = (a1x->word_0x1C_28 + ((v7 - (__CFSHL__(v7 >> 31, 3) + 8 * (v7 >> 31))) >> 3)) & 0x7FF;
	a1x->word_0x1C_28 = (a1x->word_0x1C_28 + ((v7 - (my_sign32(v7) * 7)) >> 3)) & 0x7FF;
	v8 = a1x->dword_0xA4_164x->word_0xc_12 - a1x->word_0x82_130;
	if (a1x->dword_0xA4_164x->word_0xc_12 != a1x->word_0x82_130)
	{
		if (v8 <= 0)
			LOWORD(v8) = -1;
		else
			LOWORD(v8) = 1;
	}
	a1x->word_0x82_130 += v8 * x_DWORD_D4B84;
	v9 = ((x_WORD_EB398ar.z - (int16_t)sub_10C40_getTerrainAlt(&x_WORD_EB398ar) - a1x->dword_0xA0_160x->word_160_0xa_10) << 10)
		/ a1x->dword_0xA0_160x->word_160_0xa_10;
	if (v9 < -256)
		v9 = -256;
	if (v9 > 256)
		v9 = 256;
	v10 = a1x->dword_0xA4_164x->word_0x157_343;
	HIBYTE(v10) &= 7u;
	a1x->word_0x1E_30 = v10;
	if (v10 > 1024)
		v10 -= 2048;
	if (a1x->word_0x82_130 >= 0 || v10 <= 0)
	{
		if (a1x->word_0x82_130 < 0 && v10 < 0)
			goto LABEL_105;
		if (a1x->word_0x82_130 > 0 && v10 < 0)
		{
			//v2 = sub_10080(0, (v1 - (__CFSHL__(v10 * -v9 >> 31, 8) + (v10 * -v9 >> 31 << 8))) >> 8);
			//v2 = sub_10080(0, (v1 - (my_sign(v10 * -v9) * 255) >> 8));

			//a1x->dword_0xA4_164x->word_0x24_36 = (v10 * -v9 - (__CFSHL__(v10 * -v9 >> 31, 8) + (v10 * -v9 >> 31 << 8))) >> 8;
			a1x->dword_0xA4_164x->word_0x24_36 = (v10 * -v9 - (my_sign32(v10 * -v9) * 255) >> 8);
			goto LABEL_27;
		}
		if (a1x->word_0x82_130 > 0 && v10 > 0)
		{
		LABEL_105:
			a1x->dword_0xA4_164x->word_0x24_36 = a1x->dword_0xA4_164x->word_0x157_343;
			goto LABEL_27;
		}
	}
	else
	{
		//a1x->dword_0xA4_164x->word_0x24_36 = (v10 * -v9 - (__CFSHL__(v10 * -v9 >> 31, 8) + (v10 * -v9 >> 31 << 8))) >> 8;
		a1x->dword_0xA4_164x->word_0x24_36 = (v10 * -v9 - (my_sign32(v10 * -v9) * 255) >> 8);
	}
LABEL_27:
	//v11 = a1x->dword_0xA4_164;
	
	/*v12 = a1x->dword_0xA4_164x->word_0x24_36;
	HIBYTE(v12) &= 7u;
	a1x->dword_0xA4_164x->word_0x24_36 = v12;*/
	a1x->dword_0xA4_164x->word_0x24_36 &= 0x7ffu;

	//v13 = a1x->dword_0xA4_164;
	v14 = a1x->dword_0xA4_164x->byte_0x14C_332;
	if (v14)
	{
		v15 = a1x->word_0x82_130 * (4 - v14);
		v16 = (v15 - (__CFSHL__(v15 >> 31, 2) + 4 * (v15 >> 31))) >> 2;
	}
	else if (a1x->dword_0xA4_164x->byte_0x14E_334)
	{
		LOWORD(v16) = 0;
	}
	else
	{
		LOWORD(v16) = a1x->word_0x82_130;
	}
	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->dword_0xA4_164x->word_0x24_36, v16);
	//v17 = a1x->dword_0xA4_164;
	v18 = a1x->dword_0xA4_164x->word_0x10_16;
	if (v18)
	{
		LOBYTE(v19) = a1x->dword_0xA4_164x->byte_0x14C_332;
		if ((x_BYTE)v19)
		{
			v19 = ((4 - a1x->dword_0xA4_164x->byte_0x14C_332) * v18
				- (__CFSHL__((4 - a1x->dword_0xA4_164x->byte_0x14C_332) * v18 >> 31, 2)
					+ 4 * ((4 - a1x->dword_0xA4_164x->byte_0x14C_332) * v18 >> 31))) >> 2;
		}
		else if (a1x->dword_0xA4_164x->byte_0x14E_334)
		{
			BYTE1(v19) = 0;
		}
		else
		{
			LOWORD(v19) = a1x->dword_0xA4_164x->word_0x10_16;
		}
		v20 = v19;
		v21 = a1x->word_0x1C_28;
		HIBYTE(v21) += 2;
		sub_57FA0(&x_WORD_EB398ar, v21, 0, v20);
	}
	//v22 = a1x->dword_0xA4_164;
	v23 = a1x->dword_0xA4_164x->word_0x1E_30;
	if (v23)
	{
		if (v23 > 128)
			a1x->dword_0xA4_164x->word_0x1E_30 = 128;
		sub_57FA0(&x_WORD_EB398ar, a1x->dword_0xA4_164x->word_0x20_32, 0, a1x->dword_0xA4_164x->word_0x1E_30);
		//v24 = a1x->dword_0xA4_164;
		v25 = a1x->dword_0xA4_164x->word_0x1E_30;
		//v26 = a1x->dword_0xA4_164x->word_0x1E_30;
		if (v25)
		{
			if (v25 <= 0)
				v27 = -1;
			else
				v27 = 1;
		}
		else
		{
			v27 = 0;
		}
		a1x->dword_0xA4_164x->word_0x1E_30 += v27 * x_DWORD_D4B90;
		if (abs(a1x->dword_0xA4_164x->word_0x1E_30) < 4)
			a1x->dword_0xA4_164x->word_0x1E_30 = 0;
	}
	x_WORD_EB398ar.x += a1x->dword_0xA4_164x->word_0x1A6_422;
	x_WORD_EB398ar.y += a1x->dword_0xA4_164x->word_0x1A8_424;
	x_WORD_EB398ar.z += a1x->dword_0xA4_164x->word_0x1AA_426;
	a1x->dword_0xA4_164x->word_0x1A6_422 = 0;
	a1x->dword_0xA4_164x->word_0x1A8_424 = 0;
	a1x->dword_0xA4_164x->word_0x1AA_426 = 0;
	v32 = a1x->dword_0xA4_164x->byte_0x262_610;
	if (v32)
		a1x->dword_0xA4_164x->byte_0x262_610 = v32 - 1;
	sub_5DE30(a1x);
	if (a1x->dword_0xA4_164x->byte_0x14C_332)
	{
		v34 = a1x->dword_0xA4_164x->byte_0x14D_333 - 1;
		a1x->dword_0xA4_164x->byte_0x14D_333 = v34;
		if (!v34)
		{
			v36 = a1x->dword_0xA4_164x->byte_0x14C_332 - 1;
			a1x->dword_0xA4_164x->byte_0x14C_332 = v36;
			if (v36)
			{
				a1x->dword_0xA4_164x->byte_0x14D_333 = 8;
				x_D41A0_BYTEARRAY_4_struct.byteindex_181 = 1;
			}
			else
			{
				sub_5C800(a1x, 1);
			}
		}
	}
	//v37 = a1x->dword_0xA4_164;
	if (a1x->dword_0xA4_164x->byte_0x14E_334)
	{
		v38 = a1x->dword_0xA4_164x->byte_0x14F_335 - 1;
		a1x->dword_0xA4_164x->byte_0x14F_335 = v38;
		if (!v38)
			a1x->dword_0xA4_164x->byte_0x14E_334--;
	}
	if ((uint16_t)sub_5D0A0(a1x))
	{
		v39 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
		v40 = v39;
		if (a1x->dword_0xA4_164x->byte_0x14E_334)
		{
			x_WORD_EB398ar.z -= 51;
		}
		else
		{
			//v41 = a1x->dword_0xA0_160;
			if (x_WORD_EB398ar.z > a1x->dword_0xA0_160x->word_160_0xc_12 + v39)
				x_WORD_EB398ar.z += a1x->dword_0xA0_160x->word_160_0xe_14;
		}
		//v42 = a1x->dword_0xA0_160;
		if (x_WORD_EB398ar.z >= v40 + a1x->dword_0xA0_160x->word_160_0xc_12)
		{
			if (x_BYTE_D41B6)
			{
				v43 = sub_10C60(&x_WORD_EB398ar);
				if (x_WORD_EB398ar.z > v43 - 384)
					x_WORD_EB398ar.z = v43 - 384;
			}
		}
		else
		{
			x_WORD_EB398ar.z = a1x->dword_0xA0_160x->word_160_0xc_12 + v40;
		}
		sub_57CF0(a1x, &x_WORD_EB398ar);
	}
	else
	{
		sub_5DD50(a1x);
	}
	if (!(a1x->byte_0x3E_62 & 0x3F))
	{
		v44x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[4]];
		if (v44x > x_DWORD_EA3E4[0])
		{
			if (v44x->word_0x2E_46)
			{
				//v45 = SPELLS_BEGIN_BUFFER_DA818[0x15a +26 * v44x->byte_0x46_70];
				v45 = SPELLS_BEGIN_BUFFER_str[4].subspell[v44x->byte_0x46_70].byte_0x1A;
				if ((uint8_t)v45 < 0x10u)
				{
					if (v45 == 2)
						sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 12);
				}
				else if ((uint8_t)v45 <= 0x10u)
				{
					sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 39);
				}
				else if ((uint8_t)v45 >= 0x13u)
				{
					if ((uint8_t)v45 <= 0x13u)
					{
						sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 43);
					}
					else if (v45 == 25)
					{
						sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 37);
					}
				}
			}
		}
	}
	//v46 = (int)x_D41A0_BYTEARRAY_0;
	if (D41A0_BYTESTR_0.str_2FECE.byte_level_type == 2)
	{
		//v47 = 9377 * *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
		//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) = v47;
		D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;

		//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) += x_D41A0_BYTEARRAY_4_struct.setting_30;
		D41A0_BYTESTR_0.dword_0x8=D41A0_BYTESTR_0.dword_0x8 + x_D41A0_BYTEARRAY_4_struct.setting_30;
		if ((signed int)(D41A0_BYTESTR_0.dword_0x8 % 0x83) < 5)
		{
			v48 = D41A0_BYTESTR_0.word_0xc;
			if (v48 == a1x->dword_0xA4_164x->word_0x38_56)
				sub_6E450_distance_sound(0, v48, D41A0_BYTESTR_0.dword_0x8 % 0x83 + 65);
		}
	}
	else if (sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 1)
	{
		sub_6E450_distance_sound(0, D41A0_BYTESTR_0.word_0xc, 1);
		sub_6EAB0(0, D41A0_BYTESTR_0.word_0xc, 2);
	}
	else
	{
		sub_6E450_distance_sound(0, D41A0_BYTESTR_0.word_0xc, 2);
		sub_6EAB0(0, D41A0_BYTESTR_0.word_0xc, 1);
	}
	if (a1x->dword_0xA4_164x->dword_0x19A_410 >= 1536)
	{
		sub_6EAB0(0, D41A0_BYTESTR_0.word_0xc, 5);
	}
	else
	{
		sub_6E450_distance_sound(0, D41A0_BYTESTR_0.word_0xc, 5);
		a1x->dword_0xA4_164x->dword_0x19A_410 = 2048;
	}
	if (a1x->dword_0xA4_164x->dword_0x19E_414 >= 1536)
	{
		sub_6EAB0(0, D41A0_BYTESTR_0.word_0xc, 31);
	}
	else
	{
		sub_6E450_distance_sound(0, D41A0_BYTESTR_0.word_0xc, 31);
		a1x->dword_0xA4_164x->dword_0x19E_414 = 2048;
	}
	//v49 = a1x->dword_0xA4_164;
	if (a1x->dword_0xA4_164x->word_0x38_56 == D41A0_BYTESTR_0.word_0xc)
	{
		v50 = a1x->dword_0xA4_164x->word_0x36_54;
		if (v50 <= 0)
		{
			sub_99970(1, 3u);
		}
		else
		{
			a1x->dword_0xA4_164x->word_0x36_54 = v50 - 1;
			sub_99970(2, 3u);
		}
	}
}

//----- (0005DD50) --------------------------------------------------------
void sub_5DD50(type_str_0x6E8E* a1x)//23dd50
{
	int v1; // eax
	signed int result; // eax
	char v3; // [esp+0h] [ebp-4h]

	v3 = 0;
	if (sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 256
		|| x_BYTE_D41B6
		&& (v1 = a1x->array_0x4C_76.x >> 8,
			BYTE1(v1) = a1x->array_0x4C_76.y >> 8,
			x_BYTE_13B4E0_angle[(uint16_t)v1] & 8))
	{
		v3 = 1;
	}
	if (!v3 && x_BYTE_D41B6 && a1x->dword_0xA4_164x->byte_0x261_609 && sub_11E20(a1x, &a1x->array_0x4C_76))
		v3 = 1;
	if (v3)
	{
		a1x->dword_0xA4_164x->byte_0x261_609 = 1;
		x_WORD_EB398ar = a1x->array_0x4C_76;
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, 128);
		/*result = */sub_57CF0(a1x, &x_WORD_EB398ar);
	}
	else
	{
		//result = a1x->dword_0xA4_164;
		a1x->dword_0xA4_164x->byte_0x261_609 = 0;
	}
	//return result;
}

//----- (0005DE30) --------------------------------------------------------
void sub_5DE30(type_str_0x6E8E* a1x)//23ee30
{
	//int v1; // edx
	type_str_0x6E8E* v2x; // ebx
	type_str_0x6E8E* v3x; // edi
	int16_t v4; // cx
	signed int v5; // ecx
	int v6; // edi
	int16_t v7; // ax
	uint16_t v8; // ST10_2
	int16_t v9; // ax
	char v10; // al
	int v11; // esi
	int v12; // [esp+4h] [ebp-Ch]
	//char *v13; // [esp+8h] [ebp-8h]

	//v1 = a1x->dword_0xA4_164;
	v2x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x146_326];
	v3x = 0;
	if (v2x > x_DWORD_EA3E4[0])
	{
		//v13 = (char *)& SPELLS_BEGIN_BUFFER_DA818[0x15a +0x308] + 26 * a1x->dword_0xA4_164x->word_0x14A_330;
		//v13 = SPELLS_BEGIN_BUFFER_str[14].subspell[a1x->dword_0xA4_164x->word_0x14A_330].dword_2
		v4 = a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[0xe];
		if (v4)
			v3x = x_DWORD_EA3E4[v4];
		v5 = sub_583F0_distance_3d(&a1x->array_0x4C_76, &v2x->array_0x4C_76);
		if (v3x && v3x->word_0x2E_46 && v5 < SPELLS_BEGIN_BUFFER_str[14].subspell[a1x->dword_0xA4_164x->word_0x14A_330].dword_2 && v2x->dword_0x8 >= 0)
		{
			v12 = 3 * a1x->word_0x84_132 / 2;
			LOWORD(v6) = (v5 - a1x->dword_0xA4_164x->dword_0x142_322) / (1024 / (int16_t)v12);
			if ((int16_t)v6 < -(int16_t)v12)
				v6 = 3 * a1x->word_0x84_132 / -2;
			if ((int16_t)v6 > (int16_t)v12)
				LOWORD(v6) = v12;
			v7 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v2x->array_0x4C_76);
			v8 = v7;
			v9 = a1x->word_0x1C_28 + sub_58350(a1x->word_0x1C_28, v7, 5, 0x82u);
			HIBYTE(v9) &= 7u;
			a1x->word_0x1C_28 = v9;
			sub_57FA0(&x_WORD_EB398ar, v8, a1x->word_0x1E_30, v6);
			v10 = SPELLS_BEGIN_BUFFER_str[14].subspell[a1x->dword_0xA4_164x->word_0x14A_330].byte_0x1A;
			if ((uint8_t)v10 >= 1u)
			{
				if ((uint8_t)v10 > 1u)
				{
					if (v10 != 2)
						return;
					v2x->dword_0x8 -= v2x->dword_0xA4_164x->word_0x163_355 + 2;
				}
				v11 = v2x->dword_0x90_144 - (v2x->dword_0x88_136 + 8);
				v2x->dword_0x90_144 = v11;
				if (v11 < 0)
					v2x->dword_0x90_144 = 0;
			}
		}
		else
		{
			a1x->dword_0xA4_164x->word_0x146_326 = 0;
		}
	}
}

//----- (0005E010) --------------------------------------------------------
void sub_5E010(type_str_0x6E8E* a1x)//23f010
{
	uint16_t v1; // dx
	type_str_0x6E8E* v2x; // edx
	//int v3; // edx
	uint8_t v4; // cl
	//int v5; // edx
	//int v6; // edx
	int v7; // eax
	//int v8; // edx
	int16_t v9; // cx
	int v10; // edi
	int v11; // edx
	//int v12; // edx
	int v13; // ecx
	//int v14; // edx
	int16_t v15; // di
	char v16; // [esp+0h] [ebp-4h]

	v16 = 0;
	a1x->word_0x84_132 = x_DWORD_D4B8C;
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1))
	{
		v1 = a1x->dword_0xA4_164x->word_0x3A_58;
		if (v1)
		{
			if (sub_106C0(a1x, x_DWORD_EA3E4[v1]))
				v16 = 1;
		}
	}
	sub_5F380(a1x);
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1) && v16)
	{
		if (a1x->str_0x5E_94.word_0x62_98)
		{
			v2x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58];
			if (v2x->str_0x5E_94.word_0x62_98)
				v2x->str_0x5E_94.dword_0x5E_94 += a1x->str_0x5E_94.dword_0x5E_94;
			else
				v2x->str_0x5E_94.dword_0x5E_94 = a1x->str_0x5E_94.dword_0x5E_94;
			v2x->str_0x5E_94.word_0x62_98 = a1x->str_0x5E_94.word_0x62_98;
		}
		a1x->dword_0xA4_164x->word_0x159_345 = 2;
	}
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1))
	{
		if (a1x->dword_0xA4_164x->word_0x159_345)
		{
			memset((void*)&a1x->str_0x5E_94, 0, 36);
			a1x->dword_0xA4_164x->word_0x159_345--;
		}
		else
		{
			sub_5EFA0(a1x);
		}
		//v3 = a1x->dword_0xA4_164;
		v4 = a1x->dword_0xA4_164x->byte_0x154_340;
		if (v4 < 0xC8u)
			a1x->dword_0xA4_164x->byte_0x154_340 = v4 + 1;
	}
	sub_5D530(a1x);
	if (a1x->dword_0x8 >= 0)
	{
		if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1))
		{
			//v6 = a1x->dword_0xA4_164;
			a1x->dword_0x90_144 += a1x->dword_0x88_136;
			v7 = a1x->dword_0xA4_164x->dword_0x18D_397;
			if (v7)
				a1x->dword_0xA4_164x->dword_0x18D_397 = v7 - 1;
			else
				a1x->dword_0x8 += a1x->dword_0xA4_164x->word_0x163_355;//cure
			//v8 = a1x->dword_0xA4_164;
			v9 = a1x->dword_0xA4_164x->word_0x24C_588;
			if (v9)
				a1x->dword_0xA4_164x->word_0x24C_588 = v9 - 1;
			if (a1x->dword_0x90_144 < 0)
				a1x->dword_0x90_144 = 0;
			v10 = a1x->dword_0x8C_140;
			if (a1x->dword_0x90_144 > v10)
				a1x->dword_0x90_144 = v10;
			if (a1x->dword_0x8 < -1)
				a1x->dword_0x8 = -1;
			v11 = a1x->dword_0x4;
			if (a1x->dword_0x8 > v11)//if act life bigger then max life trim it
				a1x->dword_0x8 = v11;
			//v12 = a1x->dword_0xA4_164;
			v13 = a1x->dword_0xA4_164x->dword_0x16D_365;
			if (v13)
				a1x->dword_0xA4_164x->dword_0x16D_365 = v13 - 1;
			//v14 = a1x->dword_0xA4_164;
			v15 = a1x->dword_0xA4_164x->word_0x248_584;
			if (v15)
				a1x->dword_0xA4_164x->word_0x248_584 = v15 - 1;
			if (v16 || a1x->struct_byte_0xc_12_15.byte[1] & 0x10)
			{
				a1x->dword_0x88_136 = a1x->dword_0x8C_140 / 200;
				a1x->dword_0xA4_164x->word_0x163_355 = a1x->dword_0x4 / 250;
				if (a1x->dword_0x88_136 < 1000)
					a1x->dword_0x88_136 = 1000;
				a1x->struct_byte_0xc_12_15.byte[1] &= 0xEFu;
			}
			else
			{
				a1x->dword_0x88_136 = a1x->dword_0x8C_140 / 2000;
				a1x->dword_0xA4_164x->word_0x163_355 = a1x->dword_0x4 / 2000;
				if (a1x->dword_0x88_136 < 100)
					a1x->dword_0x88_136 = 100;
			}
		}
	}
	else
	{
		//v5 = (int)x_D41A0_BYTEARRAY_0;
		a1x->byte_0x45_69 = 2;
		a1x->word_0x2C_44 = 0;
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 16);
	}
}

//----- (0005E310) --------------------------------------------------------
void sub_5E310_multiplayer_test_die(type_str_0x6E8E* a1x)//23f310
{
	//int v1; // edx
	int16_t v2; // cx
	int v3; // esi
	int16_t v4; // ax
	int16_t v5; // di
	type_str_0x6E8E* v6x; // eax
	//int result; // eax
	uint16_t v8; // di
	type_str_0x6E8E* v9x; // eax
	char v10; // dl
	//int v11; // edx
	int v12; // eax
	//int v13; // edx
	char *v14; // esi
	char *v15; // edi
	//char v16; // al
	//char v17; // al
	//int v18; // eax
	type_str_0x6E8E* v19x; // edx
	int16_t v20; // di
	int16_t v21; // ax
	//int v22; // ecx
	type_str_0x6E8E* jx; // ecx
	type_str_0x6E8E* v24x; // [esp+0h] [ebp-Ch]
	signed int i; // [esp+4h] [ebp-8h]
	type_str_0x6E8E* v26x; // [esp+8h] [ebp-4h]

	sub_5D530(a1x);
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_121[6])
		sub_5C800(a1x, 7);
	//v1 = 2124 * a1x->dword_0xA4_164x->word_0x38_56;
	if (D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56].byte_0x3DF_2BE4_12221)
		sub_52E90(&D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56], 0, 0);
	v2 = a1x->word_0x2C_44 - 2;
	a1x->array_0x4C_76.z += a1x->word_0x2C_44;
	a1x->word_0x2C_44 = v2;
	if (v2 < -256)
		a1x->word_0x2C_44 = -256;
	if (a1x->word_0x2C_44 > 0)
		a1x->word_0x2C_44 = 0;
	v3 = a1x->dword_0xA0_160x->word_160_0xc_12;
	v4 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	v5 = v4;
	if (a1x->array_0x4C_76.z < v3 + v4)
		a1x->array_0x4C_76.z = a1x->dword_0xA0_160x->word_160_0xc_12 + v4;
	v6x = sub_4A190(&x_WORD_EB398ar, 10, 1);
	if (v6x)
	{
		v6x->struct_byte_0xc_12_15.byte[0] |= 0x80u;
		v6x->word_0x1A_26 = a1x->word_0x1A_26;
	}
	//result = v5 + *(int16_t *)(*(x_DWORD *)(a1 + 160) + 12);
	if (a1x->array_0x4C_76.z == v5 + a1x->dword_0xA0_160x->word_160_0xc_12)
	{
		sub_49F90();
		v8 = a1x->word_0x24_36;
		if (v8)
		{
			v9x = x_DWORD_EA3E4[v8];
			if (v9x->byte_0x3F_63 == 3)
			{
				v10 = v9x->byte_0x40_64;
				if (!v10 || v10 == 1)
				{
					//v11 = x_DWORD_EA3E4[a1x->word_0x24_36]->dword_0xA4_164;
					v12 = a1x->dword_0xA4_164x->word_0x38_56;
					x_DWORD_EA3E4[a1x->word_0x24_36]->dword_0xA4_164x->word_0x26_38[v12]++;
					//++*(x_WORD *)(v11 + 2 * v12 + 38);
				}
			}
		}
		memset((void*)&a1x->str_0x5E_94, 0, 36);
		//v13 = 2124 * a1x->dword_0xA4_164x->word_0x38_56 + (int)x_D41A0_BYTEARRAY_0 + 11230;
		v14 = (char *)x_DWORD_E9C4C_langindexbuffer[374];//has died.
		//v15 = (char *)(v13 + 28);
		v15 = D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56].array_0x01c_2BFA_11258;
		strcpy(v15, v14);
		/*do
		{
			v16 = *v14;
			*v15 = *v14;
			if (!v16)
				break;
			v17 = v14[1];
			v14 += 2;
			v15[1] = v17;
			v15 += 2;
		} while (v17);*/
		D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56].word_0x04f_2C2D_11309 = 1;
		D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56].word_0x04d_2C2B_11307 = 100;
		for (i = 0; i < 26; i++)
		{
			//v18 = a1x->dword_0xA4_164 + 2 * i;
			//v19x = x_DWORD_EA3E4[*(int16_t *)(v18 + 819)];
			v19x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[i]];
			v26x = v19x;
			if (v19x <= x_DWORD_EA3E4[0])
			{
				a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[i] = 0;
			}
			else
			{
				a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[i] = 1;
				v19x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
				v19x->byte_0x45_69++;
				x_WORD_EB398ar = a1x->array_0x4C_76;
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v20 = a1x->word_0x14_20;
				x_WORD_EB398ar.x += (a1x->word_0x14_20 & 0x1FF) - 256;
				v21 = 9377 * v20 + 9439;
				a1x->word_0x14_20 = v21;
				x_WORD_EB398ar.y += (v21 & 0x1FF) - 256;
				sub_57CF0(v19x, &x_WORD_EB398ar);
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v26x->dword_0x8 = a1x->word_0x14_20 % 0x5Au + 200;
			}
		}
		v24x = sub_4A190(&a1x->array_0x4C_76, 10, 40);
		if (v24x)
		{
			a1x->byte_0x45_69 = 3;
			//v22 = (int)x_D41A0_BYTEARRAY_4;
			//v22 = (int)x_D41A0_BYTEARRAY_4;
			a1x->dword_0x10_16 = 1200;
			for (jx = x_D41A0_BYTEARRAY_4_struct.dword_38523; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
			{
				if (jx->byte_0x40_64 == 39 && jx->word_0x94_148 == a1x-D41A0_BYTESTR_0.struct_0x6E8E)
					jx->word_0x94_148 = v24x - D41A0_BYTESTR_0.struct_0x6E8E;
			}
		}
		a1x->struct_byte_0xc_12_15.byte[0] |= 0x20u;
		//result = (int)x_D41A0_BYTEARRAY_0;
		D41A0_BYTESTR_0.dword_0x11e6--;
	}
	//return result;
}

//----- (0005E660) --------------------------------------------------------
int sub_5E660(type_str_0x6E8E* a1x)//23f660
{
	char v1; // ah
	signed int v2; // ebx

	v1 = a1x->struct_byte_0xc_12_15.byte[0];
	a1x->dword_0x8 = -1;
	v2 = 0;
	a1x->struct_byte_0xc_12_15.byte[0] = v1 | 0x20;
	while (v2 < 26)
	{
		if (x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[v2]] > x_DWORD_EA3E4[0])
			sub_57F10(x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[v2]]);
		v2++;
	}
	sub_57F10(a1x);
	return 1;
}

//----- (0005E6C0) --------------------------------------------------------
int16_t sub_5E6C0(type_str_0x6E8E* a1x)//23f6c0
{
	char v1; // al
	axis_3d* v2x; // edi
	int16_t v3; // ax
	int16_t v4; // ST04_2
	uint16_t v5; // ST00_2
	int16_t v6; // ax
	//uint16_t v7; // ST00_2
	int16_t v8; // ax
	int16_t result; // ax

	v1 = 0;
	if (!a1x->word_0x24_36)
		v1 = 1;
	if (v1)
	{
		a1x->word_0x1C_28 += 5;
		a1x->word_0x1C_28 &= 0x7ff;
		v8 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		HIBYTE(v8)++;
	}
	else
	{
		v2x = &x_DWORD_EA3E4[a1x->word_0x24_36]->array_0x4C_76;
		a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, v2x);
		v3 = sub_58210_radix_tan(&a1x->array_0x4C_76, v2x);
		v4 = a1x->word_0x20_32;
		v5 = a1x->word_0x1C_28;
		a1x->word_0x22_34 = v3;
		v6 = sub_58350(v5, v4, 5, 0x16u);
		//LOWORD(v2) = a1x->word_0x22_34;
		a1x->word_0x1C_28 += v6;
		//v7 = a1x->word_0x1E_30;
		a1x->word_0x1C_28 &= 0x7ff;
		a1x->word_0x1E_30 += sub_58350(a1x->word_0x1E_30, a1x->word_0x22_34, 5, 0x16u);
		a1x->word_0x1E_30 &= 0x7ff;
		v8 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	}
	a1x->array_0x4C_76.z = v8;
	a1x->word_0x1E_30 = 0;
	result = a1x->word_0x1E_30;
	a1x->dword_0xA4_164x->word_0x157_343 = result;
	a1x->dword_0xA4_164x->word_0x155_341 = 0;
	return result;
}

//----- (0005E7C0) --------------------------------------------------------
void sub_5E7C0_multiplayer_test_banished(type_str_0x6E8E* a1x)//23f7c0
{
	//int v1; // eax
	char v1x;
	//int v2; // ebx
	//Bit8u* v3; // edx
	int v4; // ebx
	char* v5; // esi
	char* v6; // edi

	a1x->dword_0xA4_164x->word_0x1E_30 = 0;
	//v1 = a1x->dword_0xA4_164;
	//v2 = 2124 * *(int16_t *)(v1 + 56);
	if (D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56].byte_0x009_2BE4_11239 == 1)
	{
		//v3 = &x_D41A0_BYTEARRAY_0[v2 + 11230];
		if (a1x->dword_0xA4_164x->word_0x3A_58)
		{
			v4 = a1x->dword_0x10_16;
			if (v4)
				a1x->dword_0x10_16 = v4 - 1;
			else
				/*LOBYTE(v1) = */sub_5C950(&D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56], a1x);
		}
		else
		{
			if (D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56].byte_0x006_2BE4_11236)
			{
				v5 = x_DWORD_E9C4C_langindexbuffer[283];//has been banished from the realm.
				v6 = D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56].array_0x01c_2BFA_11258;//&v3[28];
				strcpy(v6,v5);
																													   /*do
				{
					LOBYTE(v1) = v5[0];
					*v6 = *v5;
					if (!(x_BYTE)v1)
						break;
					LOBYTE(v1) = v5[1];
					v5 += 2;
					v6[1] = v1;
					v6 += 2;
				} while ((x_BYTE)v1);*/				
				D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56].word_0x04f_2C2D_11309 = 1;
				D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56].word_0x04d_2C2B_11307 = 200;
			}
			D41A0_BYTESTR_0.array_0x2BDE[a1x->dword_0xA4_164x->word_0x38_56].byte_0x006_2BE4_11236 = 0;
		}
	}
	else
	{
		sub_5C800(a1x, 7);
		v1x = sub_5E6C0(a1x);
	}
	//return v1x;
}

//----- (0005E8C0) --------------------------------------------------------
signed int sub_5E8C0_endGameSeq(type_str_0x6E8E* a1x)//23f8c0 //end game sequences
{
	int16_t v1; // si
	//int v2; // eax
	uint8_t v3; // dl
	int16_t v4; // di
	int16_t v5; // dx
	type_str_0x6E8E* v6x; // eax
	char v7; // dl
	int v8; // esi
	int16_t v9; // ax
	int16_t v10; // si
	//int v11; // eax
	//int v12; // ecx
	//int v13; // edx
	type_str_0x6E8E* v14x; // esi
	//int16_t v15; // di
	int v16; // esi
	int16_t v17; // cx
	//int v18; // eax
	//int v19; // eax
	//int v20; // eax
	//int v21; // edx
	//int v22; // eax
	int16_t v23; // ax
	int v24; // edx
	//int v25; // esi
	//int v26; // ecx
	signed int result; // eax
	char v28; // [esp+0h] [ebp-4h]

	v28 = 0;
	switch (a1x->byte_0x46_70)
	{
	case 0:
		sub_52E90(&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc], 0, 0);
		if (a1x->dword_0xA4_164x->word_0x38_56 == D41A0_BYTESTR_0.word_0xc)
		{
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 41);
			sub_5C800(a1x, 6);
		}
		a1x->dword_0xA4_164x->byte_0x14E_334 = 0;
		a1x->dword_0xA4_164x->byte_0x14C_332 = 0;
		a1x->dword_0xA4_164x->word_0x1E_30 = 0;
		a1x->dword_0xA4_164x->word_0x10_16 = 0;
		v1 = a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[3];
		if (v1)
			x_DWORD_EA3E4[v1]->word_0x2E_46 = 0;
		//v2 = (int)x_D41A0_BYTEARRAY_0;
		D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] |= 0x20u;
		v3 = a1x->byte_0x45_69;
		a1x->word_0x96_150 = 0;
		if (v3 >= 0xBu)
		{
			if (v3 <= 0xBu)
			{
				v5 = D41A0_BYTESTR_0.word_0x36DFC;
				if (v5)
					a1x->word_0x96_150 = v5;
			}
			else if (v3 == 12)
			{
				v4 = D41A0_BYTESTR_0.word_0x36DFE;
				if (v4)
					a1x->word_0x96_150 = v4;
			}
		}
		v6x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v6x > x_DWORD_EA3E4[0])
		{
			if (v6x->byte_0x3F_63 != 14 || (v7 = v6x->byte_0x40_64, v7 != 4) && v7 != 3)
				a1x->word_0x96_150 = 0;
		}
		a1x->byte_0x46_70 = 1;
		break;
	case 1://change lightness
		x_WORD_EB398ar = a1x->array_0x4C_76;
		v8 = a1x->word_0x82_130;
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
		if (sub_5D0A0(a1x))
			sub_57CF0(a1x, &x_WORD_EB398ar);
		else
			a1x->word_0x82_130 = 0;
		if (abs(v8) <= 4)
		{
			a1x->word_0x82_130 = 0;
		}
		else
		{
			if (v8 <= 0)
				v9 = 1;
			else
				v9 = -1;
			a1x->word_0x82_130 += 4 * v9;
		}
		if (!a1x->word_0x82_130)
			a1x->byte_0x46_70 = (a1x->word_0x96_150 == 0) + 3;
		break;
	case 3://change rotation
		v10 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &x_DWORD_EA3E4[a1x->word_0x96_150]->array_0x4C_76);
		if ((uint16_t)sub_582B0(a1x->word_0x1C_28, v10) <= 0xBu)
		{
			a1x->byte_0x46_70 = 4;
			a1x->word_0x1C_28 = v10;
		}
		else
		{
			a1x->word_0x1C_28 += sub_58350(a1x->word_0x1C_28, v10, 0, 0xBu);
			a1x->word_0x1C_28 &= 0x7ff;
		}
		break;
	case 4:
		a1x->dword_0x10_16 = 12;//sequence steps
		//v11 = (int)x_D41A0_BYTEARRAY_0;
		a1x->byte_0x46_70 = 5;
		D41A0_BYTESTR_0.byte_0x36E0B |= 2u;
		goto LABEL_34;
	case 5:
	LABEL_34:
		//v12 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16--;// = v12;
		if (a1x->dword_0x10_16)
		{
			if (a1x->dword_0x10_16 > 4)
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].struct_0x1d1_2BDE_11695[0].rotation__2BDE_11701.dd--;

			//--*(x_WORD *)(2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0 + 11707);
		}
		else
		{
			if (a1x->word_0x96_150)
				a1x->byte_0x46_70 = 6;
			else
				a1x->byte_0x46_70 = 8;
			if (x_DWORD_E9C3C && !D41A0_BYTESTR_0.str_2FECE.byte_level_type)
			{
				sub_86860_speak_Sound(x_WORD_1803EC);
				sub_53E60_readfile_and_decompress(file_handling->getFilePath(MC2File::data_gtd2_dat).c_str(), &x_BYTE_FAEE0_tablesx_pre); //fix it
			}
		}
		break;
	case 6:
		a1x->dword_0x10_16 = 512;
		a1x->word_0x82_130 = 100;
		a1x->byte_0x46_70 = 7;
		v28 = 1;
		goto LABEL_44;
	case 7:
	LABEL_44:
		//v13 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16--;// = v13;
		if (!a1x->dword_0x10_16)
			goto LABEL_51;
		x_WORD_EB398ar = a1x->array_0x4C_76;
		v14x = x_DWORD_EA3E4[a1x->word_0x96_150];
		a1x->word_0x1C_28 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v14x->array_0x4C_76);
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
		//v15 = a1x->word_0x82_130 + 8;
		a1x->word_0x82_130 += 8;// = v15;
		if (a1x->word_0x82_130 < 0)
			a1x->word_0x82_130 = 0;
		if (a1x->word_0x82_130 > 200)
			a1x->word_0x82_130 = 200;
		if (!sub_5D0A0(a1x))
			goto LABEL_51;
		sub_57CF0(a1x, &x_WORD_EB398ar);
		if (sub_58490_radix_3d_2(&a1x->array_0x4C_76, &v14x->array_0x4C_76) < 0x180)
			goto LABEL_51;
		break;
	case 8:
		a1x->dword_0x10_16 = 128;
		a1x->word_0x82_130 = 100;
		a1x->byte_0x46_70 = 9;
		v28 = 1;
		goto LABEL_53;
	case 9:
	LABEL_53:
		v16 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16 = v16;
		if (!v16)
			goto LABEL_51;
		x_WORD_EB398ar = a1x->array_0x4C_76;
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, a1x->word_0x82_130);
		v17 = a1x->word_0x82_130 + 8;
		a1x->word_0x82_130 = v17;
		if (v17 < 0)
			a1x->word_0x82_130 = 0;
		if (a1x->word_0x82_130 > 200)
			a1x->word_0x82_130 = 200;
		if (sub_5D0A0(a1x))
			sub_57CF0(a1x, &x_WORD_EB398ar);
		else
			LABEL_51:
		a1x->byte_0x46_70 = 10;
		break;
	case 0xA:
		a1x->byte_0x46_70 = 11;
		//v18 = a1x->dword_0xA4_164;
		a1x->dword_0x10_16 = 32;
		if (a1x->dword_0xA4_164x->word_0x38_56 == D41A0_BYTESTR_0.word_0xc)
			sub_5C800(a1x, 5);
		goto LABEL_62;
	case 0xB:
	LABEL_62:
		//v19 = a1x->dword_0x10_16 - 1;
		a1x->dword_0x10_16--;// = v19;
		if (a1x->dword_0x10_16 && x_D41A0_BYTEARRAY_4_struct.byteindex_180)
		{
			x_WORD_EB398ar = a1x->array_0x4C_76;
			sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, 2);
			if (sub_5D0A0(a1x))
				sub_57CF0(a1x, &x_WORD_EB398ar);
		}
		else
		{
			a1x->byte_0x46_70 = 12;
		}
		break;
	case 0xC:
		//v20 = (int)x_D41A0_BYTEARRAY_0;
		//v21 = 2124 * D41A0_BYTESTR_0.word_0xc;
		D41A0_BYTESTR_0.str_0x21AE.xxxx_0x21B1 = 0;
		D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.xxxx_0x2191 = 0;
		D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] = 10;
		if (a1x->byte_0x45_69 == 11)
			x_D41A0_BYTEARRAY_4_struct.setting_38545 &= 0xFBu;
		if (a1x->byte_0x45_69 == 11 || x_D41A0_BYTEARRAY_4_struct.setting_38545 & 0x10)
			D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] |= 0x10u;
		break;
	default:
		break;
	}
	if (v28)
	{
		if (a1x->dword_0xA4_164x->word_0x38_56 == D41A0_BYTESTR_0.word_0xc)
		{
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 19);
			if (x_DWORD_E9C3C)
			{
				//v22 = (int)x_D41A0_BYTEARRAY_0;
				D41A0_BYTESTR_0.str_0x21AE.xxxx_0x21B1 = 1;
				D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.xxxx_0x2191 = 2;
			}
		}
	}
	v23 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	v24 = a1x->array_0x4C_76.z;
	if (v24 <= v23 + 256)
	{
		if (v24 >= v23)
			a1x->array_0x4C_76.z = v23 + 128;
		else
			a1x->array_0x4C_76.z += 128;
	}
	else
	{
		a1x->array_0x4C_76.z -= 128;
	}
	//v25 = a1x->dword_0xA4_164;
	
	//a1x->dword_0xA4_164x->word_0x155_341 -= (signed int)(a1x->dword_0xA4_164x->word_0x155_341-(__CFSHL__(a1x->dword_0xA4_164x->word_0x155_341 >> 32, 3)+ 8 * (a1x->dword_0xA4_164x->word_0x155_341 >> 32))) >> 3;
	a1x->dword_0xA4_164x->word_0x155_341 -= (signed int)(a1x->dword_0xA4_164x->word_0x155_341 - (my_sign32(a1x->dword_0xA4_164x->word_0x155_341) * 7)) >> 3;
	
	//my_sign(a1x->dword_0xA4_164x->word_0x155_341) * 7))

	//v26 = a1x->dword_0xA4_164;
	//result = (signed int)(a1x->dword_0xA4_164x->word_0x157_343- (__CFSHL__(a1x->dword_0xA4_164x->word_0x157_343 >> 32, 2)+ 4 * (a1x->dword_0xA4_164x->word_0x157_343 >> 32))) >> 2;
	result = (signed int)(a1x->dword_0xA4_164x->word_0x157_343 - (my_sign32(a1x->dword_0xA4_164x->word_0x157_343) * 3)) >> 2;

	//my_sign(a1x->dword_0xA4_164x->word_0x157_343) * 3))

	a1x->dword_0xA4_164x->word_0x157_343 -= result;
	return result;
}

//----- (0005EF70) --------------------------------------------------------
type_str_0x6E8E* sub_5EF70(type_str_0x6E8E* a1x)//23ff70
{
	type_str_0x6E8E* resultx; // eax

	resultx = a1x;
	if (a1x > x_DWORD_EA3E4[0] && a1x->byte_0x3F_63 == 3 && !a1x->byte_0x40_64)
	{
		//resultx = (Bit8u*)a1x->dword_0xA4_164;
		a1x->dword_0xA4_164x->word_0x36_54 = 100;
	}
	return resultx;
}

//----- (0005EFA0) --------------------------------------------------------
signed int sub_5EFA0(type_str_0x6E8E* a1x)//23ffa0
{
	signed int v1; // esi
	type_str_0x6E8E* v2x; // eax
	type_str_0x6E8E* v3x; // edi
	//int v4; // eax
	//int v5; // eax
	//int v6; // eax
	//int v7; // eax
	int16_t v8; // ax
	char v9; // ch
	int v10; // eax
	char v11; // dl
	int v12; // edi
	char v13; // dh
	uint16_t v14; // di
	type_str_0x6E8E* v15x; // edi
	//int v16; // eax
	//int v17; // eax

	a1x->word_0x26_38 = 0;
	v1 = 0;
	if (a1x->word_0x96_150)
	{
		v2x = x_DWORD_EA3E4[a1x->word_0x96_150];
		if (v2x > x_DWORD_EA3E4[0] && (v2x->dword_0x8 <= 0 || v2x->struct_byte_0xc_12_15.byte[1] & 4))
			a1x->word_0x96_150 = 0;
	}
	if (a1x->dword_0x8 >= 0)
	{
		if (a1x->str_0x5E_94.word_0x7A_122)
		{
			v3x = x_DWORD_EA3E4[a1x->str_0x5E_94.word_0x7A_122];
			if (v3x)
			{
				v3x->dword_0xA4_164x->word_0x146_326 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
				v3x->dword_0xA4_164x->dword_0x142_322 = sub_583F0_distance_3d(&a1x->array_0x4C_76, &v3x->array_0x4C_76);
				v3x->dword_0xA4_164x->word_0x14A_330 = a1x->str_0x5E_94.word_0x76_118;
				//v4 = v3x->dword_0xA4_164;
				if (v3x->dword_0xA4_164x->dword_0x142_322 < 1024)
					v3x->dword_0xA4_164x->dword_0x142_322 = 1024;
				//v5 = v3x->dword_0xA4_164;
				if (v3x->dword_0xA4_164x->dword_0x142_322 > 3072)
					v3x->dword_0xA4_164x->dword_0x142_322 = 3072;
				sub_6D8B0(a1x->str_0x5E_94.word_0x7A_122, 0xEu, 1);
			}
			//v6 = a1x->dword_0xA4_164;
			a1x->str_0x5E_94.word_0x7A_122 = 0;
			a1x->dword_0xA4_164x->byte_0x196_406 = 4;
			a1x->dword_0xA4_164x->dword_0x18D_397 = 16;
			a1x->dword_0xA4_164x->word_0x24C_588 = 64;
			sub_5EF70(a1x);
		}
		if (a1x->str_0x5E_94.word_0x74_116)
			sub_61050(a1x);
		//v7 = a1x->dword_0xA4_164;
		if (a1x->dword_0xA4_164x->byte_0x14C_332 && x_D41A0_BYTEARRAY_4_struct.byteindex_181)
			sub_5C830(a1x, 3, 171 * a1x->dword_0xA4_164x->byte_0x14C_332 / 3 + 85);
		v8 = a1x->str_0x5E_94.word_0x62_98;
		if (v8)
		{
			v9 = a1x->struct_byte_0xc_12_15.byte[1];
			a1x->word_0x26_38 = v8;
			if (v9 & 0x40 || a1x->struct_byte_0xc_12_15.byte[2] & 0x40)
			{
				sub_6D8B0(a1x-D41A0_BYTESTR_0.struct_0x6E8E, 6u, 1);
				if (a1x->struct_byte_0xc_12_15.byte[1] & 0x40)
				{
					v10 = (a1x->str_0x5E_94.dword_0x5E_94 - (__CFSHL__(a1x->str_0x5E_94.dword_0x5E_94 >> 31, 2) + 4 * (a1x->str_0x5E_94.dword_0x5E_94 >> 31))) >> 2;
					v11 = a1x->struct_byte_0xc_12_15.byte[1];
					v12 = a1x->dword_0x90_144 - v10;
					a1x->str_0x5E_94.dword_0x5E_94 = v10;
					a1x->dword_0x90_144 = v12;
					a1x->struct_byte_0xc_12_15.byte[1] = v11 & 0xBF;
				}
				else
				{
					a1x->struct_byte_0xc_12_15.dword &= 0xFFBFBFFF;
					v13 = a1x->struct_byte_0xc_12_15.byte[1];
					a1x->str_0x5E_94.dword_0x5E_94 = 0;
					a1x->struct_byte_0xc_12_15.byte[1] = v13 | 0x40;
				}
			}
			v14 = a1x->str_0x5E_94.word_0x62_98;
			a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
			v15x = x_DWORD_EA3E4[v14];
			a1x->dword_0xA4_164x->word_0x20_32 = sub_581E0_maybe_tan2(&v15x->array_0x4C_76, &a1x->array_0x4C_76);
			a1x->dword_0xA4_164x->word_0x22_34 = sub_58210_radix_tan(&v15x->array_0x4C_76, &a1x->array_0x4C_76);
			a1x->dword_0xA4_164x->word_0x1E_30 = a1x->str_0x5E_94.dword_0x5E_94 / 10;
			//v16 = a1x->dword_0xA4_164;
			if (a1x->dword_0xA4_164x->word_0x1E_30 < 0)
				a1x->dword_0xA4_164x->word_0x1E_30 = 0;
			//v17 = a1x->dword_0xA4_164;
			if (a1x->dword_0xA4_164x->word_0x1E_30 > 80)
				a1x->dword_0xA4_164x->word_0x1E_30 = 80;
			sub_5C800(a1x, 2);
			a1x->dword_0xA4_164x->byte_0x196_406 = 4;
			a1x->dword_0xA4_164x->dword_0x18D_397 = 16;
			a1x->dword_0xA4_164x->word_0x24C_588 = 64;
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, (a1x->word_0x14_20 & 3) + 54);
			if (a1x->dword_0x8 < 0)
			{
				a1x->word_0x24_36 = a1x->str_0x5E_94.word_0x62_98;
				if (v15x->byte_0x3F_63 == 10 && v15x->byte_0x40_64 == 67)
					a1x->word_0x24_36 = 0;
				v1 = 2;
			}
			if (v1 != 2)
			{
				v1 = 1;
				sub_5EF70(a1x);
				a1x->str_0x5E_94.word_0x62_98 = 0;
			}
		}
	}
	else
	{
		v1 = 2;
	}
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte4_25 & 1 && !a1x->byte_0x40_64)
	{
		a1x->word_0x26_38 = 0;
		a1x->word_0x24_36 = 0;
		a1x->str_0x5E_94.word_0x62_98 = 0;
		a1x->dword_0x8 = 10000;
		v1 = 0;
	}
	return v1;
}

//----- (0005F380) --------------------------------------------------------
void sub_5F380(type_str_0x6E8E* a1x)//240380
{
	int16_t v1; // ax
	//int v2; // edx
	//int v3; // edx
	//int v4; // eax
	//int v5; // eax
	int16_t v6; // ax
	int16_t v7; // di
	int16_t v8; // ax
	int16_t v9; // dx
	int16_t v10; // di
	signed int v11; // eax
	//int v12; // eax
	//int v13; // eax
	int v14; // edx
	bool v15; // zf
	bool v16; // sf
	uint8_t v17; // of
	//int v18; // eax
	int v19; // edx
	//int v20; // eax
	//int v21; // eax
	//x_BYTE *v22; // eax

	v1 = 0;
	a1x->dword_0xA4_164x->word_0xe_14 = 0;
	//v2 = a1x->dword_0xA4_164;
	if (a1x->dword_0xA4_164x->dword_0x0_0 & 1 && a1x->dword_0xA4_164x->word_0xc_12 < x_DWORD_D4B8C)
		v1 = 1;
	//v3 = a1x->dword_0xA4_164;
	if (a1x->dword_0xA4_164x->dword_0x0_0 & 2 && a1x->dword_0xA4_164x->word_0xc_12 > x_DWORD_D4B88)
		v1 = -1;
	if (v1)
	{
		a1x->dword_0xA4_164x->word_0xc_12 += x_DWORD_D4B84 * v1;
		//v4 = a1x->dword_0xA4_164;
		if (a1x->dword_0xA4_164x->word_0xc_12 < x_DWORD_D4B88)
			a1x->dword_0xA4_164x->word_0xc_12 = x_DWORD_D4B88;
		//v5 = a1x->dword_0xA4_164;
		if (a1x->dword_0xA4_164x->word_0xc_12 > x_DWORD_D4B8C)
			a1x->dword_0xA4_164x->word_0xc_12 = x_DWORD_D4B8C;
		a1x->dword_0xA4_164x->word_0xe_14 = 1;
	}
	v6 = 0;
	if (a1x->dword_0xA4_164x->dword_0x0_0 & 4)
		v6 = -1;
	if (a1x->dword_0xA4_164x->dword_0x0_0 & 8)
		v6 = 1;
	if (v6)
	{
		a1x->dword_0xA4_164x->word_0x10_16 += x_WORD_D4BA4 * v6;
		//v18 = a1x->dword_0xA4_164;
		if (a1x->dword_0xA4_164x->word_0x10_16 < x_DWORD_D4BA8)
			a1x->dword_0xA4_164x->word_0x10_16 = x_DWORD_D4BA8;
		//v13 = a1x->dword_0xA4_164;
		v19 = a1x->dword_0xA4_164x->word_0x10_16;
		v17 = __OFSUB__(v19, x_DWORD_D4BAC);
		v15 = v19 == x_DWORD_D4BAC;
		v16 = v19 - x_DWORD_D4BAC < 0;
	}
	else
	{
		v7 = a1x->dword_0xA4_164x->word_0x10_16;
		if (v7)
		{
			if (v7 <= 0)
				v8 = -1;
			else
				v8 = 1;
		}
		else
		{
			v8 = 0;
		}
		v9 = v8;
		a1x->dword_0xA4_164x->word_0x10_16 += v8 * x_WORD_D4BB0;
		v10 = a1x->dword_0xA4_164x->word_0x10_16;
		if (v10)
		{
			if (v10 <= 0)
				v11 = -1;
			else
				v11 = 1;
		}
		else
		{
			v11 = 0;
		}
		if (v9 != v11)
			a1x->dword_0xA4_164x->word_0x10_16 = 0;
		//v12 = a1x->dword_0xA4_164;
		if (a1x->dword_0xA4_164x->word_0x10_16 < x_DWORD_D4BA8)
			a1x->dword_0xA4_164x->word_0x10_16 = x_DWORD_D4BA8;
		//v13 = a1x->dword_0xA4_164;
		v14 = a1x->dword_0xA4_164x->word_0x10_16;
		v17 = __OFSUB__(v14, x_DWORD_D4BAC);
		v15 = v14 == x_DWORD_D4BAC;
		v16 = v14 - x_DWORD_D4BAC < 0;
	}
	if (!((uint8_t)(v16 ^ v17) | (uint8_t)v15))
		a1x->dword_0xA4_164x->word_0x10_16 = x_DWORD_D4BAC;
	//v20 = a1x->dword_0xA4_164;
	if (a1x->dword_0xA4_164x->dword_0x0_0 & 0x10)
		sub_5F660(a1x, x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[a1x->dword_0xA4_164x->str_611.word_0x451_1105]], 256);
	//v21 = a1x->dword_0xA4_164;
	if (a1x->dword_0xA4_164x->dword_0x0_0 & 0x20)
		sub_5F660(a1x, x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[a1x->dword_0xA4_164x->str_611.word_0x453_1107]], 512);
	//v22 = *(x_BYTE**)&a1x->dword_0xA4_164;
	if (a1x->dword_0xA4_164x->dword_0x0_0 & 0x40)
		/*LOBYTE(v22) = */
		sub_5F660(
			a1x,
			x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[x_BYTE_D94FF_spell_index[a1x->dword_0xA4_164x->str_611.byte_0x458_1112]]],
			256);
	//return (char)v22;
}

//----- (0005F660) --------------------------------------------------------
char sub_5F660(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, int a3)//240660
{
	int v3; // ecx
	char v5; // [esp+0h] [ebp-Ch]
	char v6; // [esp+4h] [ebp-8h]
	char v7; // [esp+8h] [ebp-4h]

	v3 = a3;
	v5 = 0;
	v7 = 0;
	v6 = 0;
	if (a2x > x_DWORD_EA3E4[0])
	{
		if (a1x->byte_0x40_64 == 1)
		{
			v5 = 1;
			v3 = 0;
		}
		switch (a2x->byte_0x40_64)
		{
		case 0:
			if (a2x->byte_0x46_70 < 2)
				break;
			goto LABEL_16;
		case 1:
			if (a2x->word_0x2E_46 <= 0)
				break;
			a2x->byte_0x3C_60 = 1;
			a1x->struct_byte_0xc_12_15.byte[1] &= 0xFCu;
			a1x->struct_byte_0xc_12_15.dword |= v3;
			sub_5F7E0(a2x, a1x);
			v7 = 1;
			goto LABEL_23;
		case 2:
			if (a2x->word_0x2E_46 <= 0)
				break;
			if (!v5)
				sub_6E450_distance_sound(0, a1x->dword_0xA4_164x->word_0x38_56, 29);
			goto LABEL_23;
		case 4:
		case 6:
		case 8:
		case 0xB:
		case 0xC:
		case 0xE:
			if (a1x->byte_0x40_64)
				goto LABEL_16;
			if (a2x->word_0x2E_46 <= 0)
				break;
			if (a2x->byte_0x40_64 == 4)
				a2x->word_0x2E_46 = 7;
			else
				a2x->word_0x2E_46 = 1;
			goto LABEL_23;
		case 7:
			if (a2x->byte_0x46_70 < 1 || !a2x->word_0x2E_46)
				break;
			goto LABEL_23;
		case 9:
		case 0xA:
		case 0xD:
		case 0xF:
		case 0x10:
		case 0x11:
		case 0x12:
		case 0x13:
		case 0x14:
		case 0x15:
		case 0x16:
		case 0x17:
		case 0x18:
		LABEL_16:
			if (a2x->word_0x2E_46)
				goto LABEL_23;
			break;
		default:
			break;
		}
		if (a1x->dword_0x90_144 < a2x->dword_0x8C_140)
		{
			v6 = 1;
		}
		else
		{
			sub_5F7B0(a2x, a1x, v3);
			v7 = 1;
		}
	}
LABEL_23:
	if (v6 && !v5)
	{
		sub_88B60();
		sub_6E450_distance_sound(0, a1x->dword_0xA4_164x->word_0x38_56, 29);
	}
	return v7;
}

//----- (0005F7B0) --------------------------------------------------------
void sub_5F7B0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, int a3)//2407b0
{
	a1x->word_0x2E_46 = a1x->word_0x30_48;
	a2x->struct_byte_0xc_12_15.byte[1] &= 0xFCu;
	a2x->struct_byte_0xc_12_15.dword |= a3;
	sub_5F7E0(a1x, a2x);
}

//----- (0005F7E0) --------------------------------------------------------
void sub_5F7E0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//2407e0
{
	uint8_t result; // al

	result = a2x->dword_0xA4_164x->byte_0x1BF_447;
	if (result < 2u || result <= 2u && a1x->byte_0x40_64 != 1)
		a2x->struct_byte_0xc_12_15.byte[0] &= 0xDFu;
	//return result;
}

//----- (0005F810) --------------------------------------------------------
type_str_0x6E8E* sub_5F810(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, type_str_0x6E8E* a3x)//240810
{
	unsigned int v3; // edi
	type_str_0x6E8E* v4x; // esi
	type_str_0x6E8E* v5x; // ebx
	unsigned int v7; // eax

	v3 = -1;
	v4x = 0;
	v5x = x_D41A0_BYTEARRAY_4_struct.dword_38523;
	if (v5x <= x_DWORD_EA3E4[0])
		return 0;
	do
	{
		if (v5x->byte_0x40_64 == 39
			&& !(v5x->struct_byte_0xc_12_15.byte[1] & 0x20)
			&& v5x->word_0x94_148 == a1x->word_0x1A_26
			&& v5x != a2x
			&& v5x != a3x)
		{
			v7 = sub_58440(&a1x->array_0x4C_76, &v5x->array_0x4C_76);
			if (v7 < v3)
			{
				v4x = v5x;
				v3 = v7;
			}
		}
		v5x = v5x->next_0;
	} while (v5x > x_DWORD_EA3E4[0]);
	return v4x;
}

//----- (0005F890) --------------------------------------------------------
void sub_5F890(type_str_0x6E8E* a1x, int16_t a2)//240890
{
	//x_WORD *v2; // eax
	type_str_0x6E8E* v2x;
	int16_t v3; // bx

	//v2 = *(x_WORD **)&x_DWORD_EA3E4[a1x->word_0x1A_26]->dword_0xA4_164;
	v3 = x_DWORD_EA3E4[a1x->word_0x1A_26]->dword_0xA4_164x->str_611.array_0x333_819x.word[2];
	if (v3)
	{
		if (a2)
		{
			v2x = x_DWORD_EA3E4[v3];
			v2x->word_0x2E_46 = v2x->word_0x30_48 - 1;
		}
		else
		{
			x_DWORD_EA3E4[v3]->word_0x2E_46 = 0;
			/*LOBYTE(v2) = */sub_6D880(a1x);
		}
	}
	//return (char)v2;
}

//----- (0005F8F0) --------------------------------------------------------
void sub_5F8F0(type_str_0x6E8E* a1x)//2408f0
{
	//int16_t v1; // si
	//char v2; // dl
	type_str_0x6E8E* v3x; // esi

	//v1 = a1x->word_0x30_48;
	if (a1x->word_0x30_48)
	{
		if (a1x->word_0x30_48 == 1)
		{
			if (!(a1x->struct_byte_0xc_12_15.byte[2] & 0x10))
			{
				a1x->byte_0x45_69 = 5;
				a1x->word_0x2E_46 = 3;
				a1x->word_0x30_48 = 0;
			}
		}
		else
		{
			a1x->word_0x30_48--;
			sub_5F890(a1x, 1);
			a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		}
	}
	else
	{
		if (sub_609E0(a1x) == 2)
		{
			a1x->byte_0x45_69 = 6;
		}
		else if (a1x->struct_byte_0xc_12_15.byte[0] & 0x40)
		{
			a1x->word_0x2E_46 = 0;
			a1x->byte_0x45_69 = 5;
		}
		a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		//v2 = a1x->byte_0x3E_62;
		a1x->word_0x94_148 = a1x->word_0x1A_26;
		if (!(a1x->byte_0x3E_62 & 1))
		{
			sub_5FD00(a1x);
			sub_49EC0(a1x, a1x->dword_0x10_16);
			a1x->array_0x52_82.aa = -8192;
			a1x->array_0x52_82.dd = 0x4000;
			sub_5FF50(a1x);
			if (a1x->dword_0x90_144 < a1x->dword_0x8C_140)
			{
				v3x = x_D41A0_BYTEARRAY_4_struct.dword_38523;
				if (v3x > x_DWORD_EA3E4[0])
				{
					while (v3x->byte_0x40_64 != 39
						|| v3x->word_0x94_148 != a1x->word_0x1A_26
						|| !sub_10750(a1x, v3x))
					{
						v3x = v3x->next_0;
						if (v3x <= x_DWORD_EA3E4[0])
							return;
					}
					a1x->dword_0x90_144 += v3x->dword_0x90_144;
					sub_57F10(v3x);
				}
			}
		}
	}
}


void sub_5FA70(type_str_0x6E8E* a1x)//240a70
{
	//char v1; // ah
	type_str_0x6E8E* result; // eax
	char v3; // cl
	char v4; // dl

	switch (a1x->word_0x2E_46)
	{
	case 0:
		sub_11960(a1x);
		if (!a1x->dword_0x10_16 || (uint8_t)sub_11A10(a1x))
		{
			if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
			{
				a1x->word_0x5A_90 += sub_616D0(x_DWORD_EA3E4[a1x->word_0x1A_26]->dword_0xA4_164x->word_0x38_56);
				a1x->struct_byte_0xc_12_15.byte[0] |= 2u;
			}
			/*result = */sub_60480(a1x);
		}
		else
		{
			//v1 = a1x->struct_byte_0xc_12_15.byte[0];
			a1x->word_0x2E_46 = 2;
			a1x->struct_byte_0xc_12_15.byte[0] &= 0xBF;
			/*result = */sub_88D00();
		}
		break;
	case 1:
	case 6:
		//result = sub_10C40(a1 + 76);
		a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		break;
	case 2:
		a1x->byte_0x45_69 = 4;
		/*result = */sub_5F890(a1x, 0);
		a1x->word_0x2E_46 = 0;
		break;
	case 3:
		sub_5F890(a1x, 1);
		/*result = */sub_5FBD0(a1x);
		break;
	case 4:
		//result = sub_10C40(&a1x->array_0x4C_76);
		v3 = a1x->byte_0x3E_62;
		a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		if (!(v3 & 0x1F))
		{
			v4 = 0;
			for (result = x_D41A0_BYTEARRAY_4_struct.dword_38535; result > x_DWORD_EA3E4[0] && !v4; result = result->next_0)
			{
				if (result->byte_0x3F_63 == 10 && result->byte_0x40_64 == 42)
					v4 = 1;
			}
			if (!v4)
				a1x->word_0x2E_46 = 3;
		}
		break;
	case 5:
		sub_5F890(a1x, 1);
		a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		/*result = */sub_5FC40(a1x);
		break;
	}
	//return result;
}

//----- (0005FBD0) --------------------------------------------------------
void sub_5FBD0(type_str_0x6E8E* a1x)//240bd0
{
	type_str_0x6E8E* indexx; // eax
	int16_t v2; // ST08_2

	indexx = sub_4A190(&a1x->word_0x9A_154x, 10, 42);
	if (indexx)
	{
		indexx->byte_0x46_70 = a1x->dword_0x10_16;
		indexx->word_0x1A_26 = a1x->word_0x1A_26;
		indexx->word_0x28_40 = a1x - D41A0_BYTESTR_0.struct_0x6E8E;
		v2 = a1x->dword_0x10_16;
		a1x->word_0x2E_46 = 4;
		/*result = */sub_49EC0(indexx, v2);
	}
	//return result;
}

//----- (0005FC40) --------------------------------------------------------
type_str_0x6E8E* sub_5FC40(type_str_0x6E8E* a1x)//240c40
{
	type_str_0x6E8E* resultx; // eax
	type_str_0x6E8E* v2x; // ebx

	resultx = sub_4A190(&a1x->word_0x9A_154x, 10, 41);
	v2x = resultx;
	if (resultx)
	{
		resultx->byte_0x46_70 = a1x->dword_0x10_16;
		resultx->word_0x1A_26 = a1x->word_0x1A_26;
		v2x->word_0x28_40 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
		a1x->word_0x2E_46 = 6;
	}
	return resultx;
}

//----- (0005FCA0) --------------------------------------------------------
void sub_5FCA0_destroy_castle_level(type_str_0x6E8E* a1x)//240ca0
{
	if (sub_4A810_get_0x35plus())
	{
		sub_605E0(a1x);
		a1x->byte_0x45_69 = 4;
		sub_5FD00(a1x);
		sub_5FF50(a1x);
		a1x->word_0x2E_46 = 0;
		a1x->word_0x30_48 = 5;
	}
	else
	{
		a1x->byte_0x45_69 = 4;
	}
	//return result;
}

//----- (0005FD00) --------------------------------------------------------
void sub_5FD00(type_str_0x6E8E* a1x)//240d00
{
	int result; // eax
	//int v2; // esi
	int v3; // esi
	type_str_0x6E8E* v4x; // eax
	//type_str_0x6E8E* v5x; // esi
	//int16_t v6; // di
	//uint16_t v7; // ax
	int v8; // edi
	int16_t v9; // ax
	int16_t v10; // ST0C_2
	int v11; // eax
	int v12; // edi
	signed int v13; // [esp+0h] [ebp-10h]
	int v14; // [esp+4h] [ebp-Ch]
	int v15; // [esp+8h] [ebp-8h]
	int16_t v16; // [esp+Ch] [ebp-4h]

	//result = x_DWORD_EA3E4[a1x->word_0x1A_26]->dword_0xA4_164;
	v14 = 0;
	//v2 = a1x->dword_0x8C_140;
	if (x_DWORD_EA3E4[a1x->word_0x1A_26]->dword_0xA4_164x->dword_0x13C_316 + a1x->dword_0x90_144 > a1x->dword_0x8C_140)
		v14 = a1x->dword_0x90_144 - a1x->dword_0x8C_140;
	if (!a1x->dword_0x10_16)
	{
		//result = a1x->dword_0x90_144;
		v14 = a1x->dword_0x90_144;
	}
	if (v14 > 0)
	{
		if (v14)
		{
			v3 = v14 / 1000;
			v16 = sub_4A810_get_0x35plus();
			if (!v16)
			{
				sub_49F90();
				result = sub_4A810_get_0x35plus();
				if (!result) {
					v3 = 8;
					v16 = result;
					D41A0_BYTESTR_0.dword_0x11e6 = -1;
				}
			}
			if (v16)
			{
				if (v3 < 1)
					v3 = 1;
				if (v3 > 32)
					v3 = 32;
				if (v16 < 0)
					v16 = 0;
				if (v16 > v3)
					v16 = v3;
				v13 = 0;
				v15 = v14 / v16;
				for (result = v16; v16 > v13; result = v16)
				{
					x_WORD_EB398ar = a1x->array_0x4C_76;
					v4x = sub_4A190(&x_WORD_EB398ar, 10, 39);
					//v5x = v4x;
					if (v4x)
					{
						v4x->dword_0x90_144 = v15;
						//v6 = v4x->word_0x14_20;
						v4x->word_0x94_148 = a1x->word_0x1A_26;
						v4x->word_0x14_20 = 9377 * v4x->word_0x14_20 + 9439;
						//v7 = v4x->word_0x14_20;
						v4x->word_0x9A_154x.x = 0;
						v4x->word_0x9A_154x.y = 0;
						v4x->word_0x82_130 = v4x->word_0x14_20 % 0x30u + 16;
						v8 = a1x->array_0x4C_76.z;
						v9 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
						//v5x->word_0x2C_44 = (1024-(v8-v9)-(__CFSHL__((1024-(v8-v9)) >> 31, 3)+8*((1024-(v8-v9))>>31)))>>3;
						v4x->word_0x2C_44 = (1024 - (v8 - v9) - (my_sign32(1024 - (v8 - v9)) * 7)) >> 3;
						a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
						v10 = a1x->word_0x14_20 % 0x1400u + 3840;
						a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
						sub_57FA0(&x_WORD_EB398ar, a1x->word_0x14_20 & 0x7FF, 0, v10);
						sub_57CF0(v4x, &x_WORD_EB398ar);
						v11 = v4x->dword_0x90_144;
						v12 = v14 - v11;
						v14 = v12;
						a1x->dword_0x90_144 -= v11;
						if (v12 < v15)
							v15 = v12;
					}
					v13++;
				}
			}
		}
	}
	//return result;
}

int debugcounter_240f50 = 0;

//----- (0005FF50) --------------------------------------------------------
void sub_5FF50(type_str_0x6E8E* a1x)//240f50
{
	int v1; // edi
	//int v2; // eax
	type_str_0x6E8E* v3x; // esi
	type_str_0x6E8E* v4x; // eax
	//int v5; // eax
	//int v6; // edx
	//int64_t v7; // rtt
	type_str_0x6E8E* v8x; // eax
	type_str_0x6E8E* v9x; // esi
	type_str_0x6E8E* v10x; // esi
	int16_t v11; // si
	//int result; // eax
	//int v13; // edi
	type_str_0x6E8E* v14x; // esi
	int16_t v15; // ax
	//int v16; // [esp+4h] [ebp-1Ch]
	type_str_0x6E8E* v17x; // [esp+8h] [ebp-18h]
	type_str_0x6E8E* v18x; // [esp+Ch] [ebp-14h]
	int16_t v19; // [esp+14h] [ebp-Ch]
	int v20; // [esp+18h] [ebp-8h]
	int16_t v21; // [esp+1Ch] [ebp-4h]

	v18x = x_DWORD_EA3E4[a1x->word_0x1A_26];
	v1 = 0;
	sub_60400(a1x->dword_0x10_16, &v21, &v19);
	if (v21 > 0)
	{
		do
		{
			while (1)
			{
				v18x->dword_0xA4_164x->dword_0x12E_302 = 0;
				//v2 = v18x->dword_0xA4_164;
				//v16 = 2 * (int16_t)v1;
				v3x = x_DWORD_EA3E4[v18x->dword_0xA4_164x->array_0x3C_60[v1]];
				if (v3x <= x_DWORD_EA3E4[0])
				{
					v8x = sub_4A190(&a1x->array_0x4C_76, 3, 3);
					v9x = v8x;
					if (v8x)
					{
						v8x->word_0x1A_26 = a1x->word_0x1A_26;
						v8x->word_0x5A_90 += sub_616D0(v18x->dword_0xA4_164x->word_0x38_56);
						v9x->word_0x94_148 = a1x->word_0x1A_26;
						v18x->dword_0xA4_164x->array_0x3C_60[v1] = v9x-D41A0_BYTESTR_0.struct_0x6E8E;
						v9x->byte_0x45_69 = 9;
					}
					goto LABEL_17;
				}
				if (v3x->dword_0x8 >= 0)
					break;
				sub_36BA0(v3x, 0);
				sub_57F10(v3x);
				v18x->dword_0xA4_164x->array_0x3C_60[v1] = 0;
			LABEL_17:
				if ((int16_t)++v1 >= v21)
					goto LABEL_22;
			}
			if (v18x->dword_0xA4_164x->dword_0x13C_316 + a1x->dword_0x90_144 >= a1x->dword_0x8C_140)
			{
				v3x->word_0x96_150 = a1x - D41A0_BYTESTR_0.struct_0x6E8E;
			}
			else
			{
				if (a1x->byte_0x3E_62 % v21)
					goto LABEL_13;
				if (v3x->byte_0x45_69 != 9)
					goto LABEL_13;
				v3x->word_0x96_150 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
				if (v3x->dword_0x8C_140 <= v3x->dword_0x90_144)
					goto LABEL_13;
				x_DWORD_EA3E4[0]->word_0x96_150 = 0;
				v4x = sub_5F810(
					v3x,
					x_DWORD_EA3E4[x_DWORD_EA3E4[v18x->dword_0xA4_164x->array_0x3C_60[((int16_t)v1 + 1) % 3]]->word_0x96_150],
					x_DWORD_EA3E4[x_DWORD_EA3E4[v18x->dword_0xA4_164x->array_0x3C_60[((int16_t)v1 + 2) % 3]]->word_0x96_150]);
				if (!v4x)
					goto LABEL_13;
				v3x->word_0x96_150 = v4x - D41A0_BYTESTR_0.struct_0x6E8E;
			}
			//LODWORD(v7) = v5;
			//HIDWORD(v7) = v6 >> 31;
			//v3x->word_0x96_150 = v7 / 168;
		LABEL_13:
			v18x->dword_0xA4_164x->dword_0x12E_302 += v3x->dword_0x90_144;
			v18x->dword_0xA4_164x->dword_0x12A_298 += v3x->dword_0x8C_140;
			v1++;
		} while ((int16_t)v1 < v21);
	}
LABEL_22:
	while ((int16_t)v1 < 3)
	{
		v10x = x_DWORD_EA3E4[v18x->dword_0xA4_164x->array_0x3C_60[v1]];
		if (v10x > x_DWORD_EA3E4[0])
		{
			sub_36BA0(v10x, 0);
			sub_57F10(v10x);
			v18x->dword_0xA4_164x->array_0x3C_60[v1] = 0;
		}
		LOWORD(v1) = v1 + 1;
	}
	v11 = a1x->word_0x2C_44;
	if (v11 > 0)
		a1x->word_0x2C_44 = v11 - 1;
	v20 = 0;
	//result = 0;
	if (v19 > 0)
	{
		do
		{

			//v13 = 2 * (int16_t)v20;
			v14x = x_DWORD_EA3E4[v18x->dword_0xA4_164x->array_0x5C_92[v20]];
			if (v14x <= x_DWORD_EA3E4[0])
			{
				if (!a1x->word_0x2C_44)
				{
					v17x = sub_4A190(&a1x->array_0x4C_76, 5, 15);
					if (v17x)
					{
						a1x->word_0x2C_44 = 16;
						v15 = a1x->word_0x1A_26;
						v17x->word_0x1A_26 = v15;
						v17x->word_0x94_148 = v15;
						v18x->dword_0xA4_164x->array_0x5C_92[v20] = v17x - D41A0_BYTESTR_0.struct_0x6E8E;
						v17x->word_0x1C_28 = 512;
						v17x->word_0x20_32 = v17x->word_0x1C_28;
						x_WORD_EB398ar = v17x->array_0x4C_76;
						x_WORD_EB398ar.x += 128;
						x_WORD_EB398ar.y += 640;
						x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
						sub_57CF0(v17x, &x_WORD_EB398ar);
					}
				}
			}
			else if (v14x->byte_0x3F_63 != 5 || v14x->byte_0x40_64 != 15 || v14x->byte_0x45_69 == 125)
			{
				v18x->dword_0xA4_164x->array_0x5C_92[v20] = 0;
				a1x->word_0x2C_44 = 16;
			}
			/*result = */v20++;
		} while ((int16_t)v20 < v19);
	}
	//return result;
}

//----- (00060400) --------------------------------------------------------
x_WORD *sub_60400(int16_t a1, x_WORD *a2, x_WORD *a3)//241400
{
	x_WORD *result; // eax

	result = a3;
	switch (a1)
	{
	case 1:
	case 2:
		*a2 = 1;
		*a3 = 0;
		break;
	case 3:
		*a2 = 1;
		*a3 = 4;
		break;
	case 4:
		*a2 = 2;
		*a3 = 6;
		break;
	case 5:
		*a2 = 2;
		*a3 = 14;
		break;
	case 6:
		*a2 = 3;
		*a3 = 18;
		break;
	case 7:
		*a2 = 3;
		*a3 = 34;
		break;
	default:
		*a2 = 0;
		*a3 = 0;
		break;
	}
	return result;
}

//----- (00060480) --------------------------------------------------------
void sub_60480(type_str_0x6E8E* a1x)//241480
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // esi
	//int v3; // edx
	//int16_t v4; // ST08_2
	//int16_t v5; // ST08_2
	type_str_0x6E8E* v6x; // edi
	//char v7; // dl

	v1x = sub_50370(&a1x->word_0x9A_154x);
	v2x = v1x;
	if (v1x)
	{
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 10);
		//v3 = a1x->dword_0x10_16 + 1;
		a1x->struct_byte_0xc_12_15.byte[0] &= 0xBFu;
		a1x->dword_0x10_16++;
		//v4 = a1x->dword_0x10_16;
		a1x->byte_0x45_69 = 5;
		a1x->word_0x2E_46 = 4;
		sub_49EC0(a1x, a1x->dword_0x10_16);
		//v5 = a1x->dword_0x10_16;
		a1x->array_0x52_82.aa = 0xe000;
		a1x->array_0x52_82.dd = 0x4000;
		sub_49EC0(v2x, a1x->dword_0x10_16);
		v6x = x_DWORD_EA3E4[a1x->word_0x1A_26];
		v6x->dword_0xA4_164x->word_0x3A_58 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
		v6x->dword_0xA4_164x->word_0x1C2_450 = a1x->dword_0x10_16;
		v6x->dword_0xA4_164x->byte_0x1BE_446 = 0;
		sub_60810(a1x);
		sub_613D0(a1x);
		sub_6D8B0(v6x-D41A0_BYTESTR_0.struct_0x6E8E, 2u, 1);
		v2x->word_0x28_40 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
		v2x->word_0x1A_26 = a1x->word_0x1A_26;
		//v7 = v2x->struct_byte_0xc_12_15.byte[2];
		//LOBYTE(v1) = a1x->dword_0x10_16;
		v2x->byte_0x3B_59 = 0;
		v2x->byte_0x46_70 = a1x->dword_0x10_16;
		v2x->struct_byte_0xc_12_15.byte[2] |= 1;
	}
//	return v1;
}

//----- (000605E0) --------------------------------------------------------
void sub_605E0(type_str_0x6E8E* a1x)//2415e0
{
	int v1; // esi
	int16_t v2; // ST00_2
	//axis_3d* v3x; // edi
	//type_str_0x6E8E* v4x; // edx
	int v5; // eax
	type_str_0x6E8E* v6x; // edx
	//char result; // al
	type_str_0x6E8E* v8x; // esi
	int16_t v9; // dx

	if (a1x->dword_0x10_16 > 0)
	{
		v1 = 10 * a1x->dword_0x8C_140 / 100;
		a1x->dword_0x8C_140 -= v1;
		sub_5FD00(a1x);
		v2 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
		a1x->dword_0x8C_140 += v1;
		sub_6E450_distance_sound(v2, -1, 30);
		x_DWORD_EA3E4[0]->array_0x4C_76 = a1x->word_0x9A_154x;
		//v3x = &a1x->array_0x4C_76;
		//v4x = x_DWORD_EA3E4[0];
		x_DWORD_EA3E4[0]->byte_0x46_70 = a1x->dword_0x10_16;
		x_DWORD_EA3E4[0]->word_0x1A_26 = a1x->word_0x1A_26;
		v5 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
		v6x = x_DWORD_EA3E4[0];
		x_DWORD_EA3E4[0]->byte_0x40_64 = 0;
		v6x->dword_0x10_16 = 0;
		v6x->word_0x28_40 = v5;
		sub_385C0_remove_castle_stage(v6x);
		a1x->dword_0x10_16--;
		sub_49EC0(a1x, a1x->dword_0x10_16);
		a1x->array_0x52_82.aa = 0xE000;
		a1x->array_0x52_82.dd = 0x4000;
		sub_60810(a1x);
		sub_613D0(a1x);
		sub_5F890(a1x, 1);
	}
	if (!a1x->dword_0x10_16)
	{
		v8x = x_DWORD_EA3E4[a1x->word_0x1A_26];
		if (v8x->byte_0x40_64 == 1)
		{
			if (D41A0_BYTESTR_0.str_2FECE.byte_0x2FED2 & 4)
			{
				v9 = v8x->dword_0xA4_164x->str_611.array_0x333_819x.word[2];
				if (v9)
				{
					sub_57F10(x_DWORD_EA3E4[v9]);
					v8x->dword_0xA4_164x->str_611.array_0x333_819x.word[2] = 0;
				}
			}
		}
		else
		{
			sub_5F890(a1x, a1x->dword_0x10_16);
		}
		v8x->dword_0xA4_164x->word_0x3A_58 = 0;
		sub_57F10(a1x);
	}
	//return result;
}

//----- (00060780) --------------------------------------------------------
int sub_60780(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, int a3, int a4)//241780
{
	int v4; // edx
	int v5; // ecx
	char v6; // ST04_1
	int16_t v7; // di
	int result; // eax

	if (a3)
	{
		v4 = a1x->dword_0x8;
		v5 = 0;
		a1x->dword_0x4 = a3;
		if (v4 < 0)
		{
			v5 = -v4;
			if (-v4 > a3 / 2)
				v5 = a3 / 2;
		}
		a1x->dword_0x8 = a1x->dword_0x4 - v5;
	}
	if (a2x)
	{
		v6 = a2x->byte_0x46_70;
		v7 = a2x->word_0x2E_46;
		a2x->word_0x2E_46 = 0;
		sub_6D5E0(a2x, v6);
		a2x->word_0x2E_46 = v7;
	}
	result = a4;
	a1x->dword_0x8C_140 = a4;
	return result;
}

//----- (00060810) --------------------------------------------------------
unsigned int sub_60810(type_str_0x6E8E* a1x)//241810
{
	type_str_0x6E8E* v1x; // eax
	char v2; // dl
	int16_t v3; // cx
	type_str_0x6E8E* v4x; // edx
	int v5; // ecx
	unsigned int result; // eax
	int v7; // ecx

	//fix
	v4x = 0;
	//fix

	v1x = x_DWORD_EA3E4[a1x->word_0x1A_26];
	v2 = v1x->byte_0x45_69;
	if (!v2 || v2 == 1)
	{
		v3 = v1x->dword_0xA4_164x->str_611.array_0x333_819x.word[2];
		if (v3)
			v4x = x_DWORD_EA3E4[v3];
	}
	v5 = v1x->dword_0xA4_164x->word_0x24A_586
		* ((v1x->dword_0xA4_164x->array_0x24E_590[a1x->dword_0x10_16] << 8) + 256);
	result = a1x->dword_0x10_16;
	v7 = v5 >> 8;
	if (result <= 7)
		//JUMPOUT(__CS__, (int*) *(&off_607E8 + result));
	{
		switch (result) {
		case 0://loc_608FD
		{
			result = sub_60780(a1x, v4x, 0, 5000);
			break;
		}
		case 1://loc_60915
		{
			result = sub_60780(a1x, v4x, 20000 * v7 >> 8, 8500);
			break;
		}
		case 2://loc_60949
		{
			result = sub_60780(a1x, v4x, 40000 * v7 >> 8, 18000);
			break;
		}
		case 3://loc_60960
		{
			result = sub_60780(a1x, v4x, 40000 * v7 >> 8, 38800);
			break;
		}
		case 4://loc_60977
		{	result = sub_60780(a1x, v4x, 60000 * v7 >> 8, 78600);
			break;
		}
		case 5://loc_60991
		{	result = sub_60780(a1x, v4x, 60000 * v7 >> 8, 158200);
			break;
		}
		case 6://loc_609AB
		{	result = sub_60780(a1x, v4x, 80000 * v7 >> 8, 317400);
			break;
		}
		case 7://loc_609C2
		{	result = sub_60780(a1x, v4x, 80000 * v7 >> 8, 300000000);
			break;
		}
		}
	}
	return result;
}
/*
cseg01:000607E8 off_607E8       dd offset loc_608FD     ; DATA XREF: sub_60810+E6↓r
cseg01:000607EC                 dd offset loc_60915
cseg01:000607F0                 dd offset loc_60949
cseg01:000607F4                 dd offset loc_60960
cseg01:000607F8                 dd offset loc_60977
cseg01:000607FC                 dd offset loc_60991
cseg01:00060800                 dd offset loc_609AB
cseg01:00060804                 dd offset loc_609C2
*/

//----- (000609E0) --------------------------------------------------------
signed int sub_609E0(type_str_0x6E8E* a1x)//2419e0
{
	signed int v1; // esi
	int v3; // ecx
	int16_t v4; // ax
	int v5; // eax

	v1 = 0;
	if (a1x->dword_0x8 < 0)
		return 2;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		v3 = a1x->dword_0x8 - a1x->str_0x5E_94.dword_0x5E_94;
		a1x->dword_0x8 = v3;
		if (v3 < 0)
		{
			v4 = a1x->str_0x5E_94.word_0x62_98;
			a1x->str_0x5E_94.word_0x62_98 = 0;
			a1x->word_0x24_36 = v4;
			return 2;
		}
		// FIXME: types
		// _wcpp_1_unwind_leave__100((int32_t)a1x, a1x->str_0x5E_94.dword_0x5E_94);
		a1x->str_0x5E_94.word_0x62_98 = 0;
		v5 = a1x->word_0x1A_26;
		a1x->str_0x5E_94.dword_0x5E_94 = 0;
		v1 = 1;
		x_DWORD_EA3E4[v5]->dword_0xA4_164x->byte_0x195_405 = 4;
	}
	if (a1x->str_0x5E_94.word_0x80_128 == a1x->word_0x1A_26)
	{
		if (a1x->dword_0x10_16 < 7)
			a1x->struct_byte_0xc_12_15.byte[0] |= 0x40u;
		a1x->str_0x5E_94.word_0x80_128 = 0;
	}
	return v1;
}

//----- (00060AB0) --------------------------------------------------------
void sub_60AB0(type_str_0x6E8E* a1x)//241ab0
{
	type_str_0x6E8E* v1x; // eax
	axis_3d* v2; // esi
	char v3; // dl
	signed int v4; // esi
	signed int v5; // edi
	signed int v6; // eax
	unsigned int v7; // edi
	int v8; // esi
	int v9; // ecx
	//int16_t *v10; // eax
	int16_t v11; // ST10_2
	int v12; // ST0C_4
	int v13; // ST08_4
	int16_t v14; // ax
	type_str_0x6E8E* v16x; // [esp+0h] [ebp-4h]

	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v16x = v1x;
	if (v1x > x_DWORD_EA3E4[0])
	{
		x_WORD_EB398ar = a1x->array_0x4C_76;
		v2 = &v1x->array_0x4C_76;
		a1x->word_0x1C_28 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &v1x->array_0x4C_76);
		v3 = v16x->byte_0x3F_63;
		if (v3 == 10)
		{
			if (v16x->word_0x94_148 != a1x->word_0x1A_26)
				goto LABEL_20;
			if (x_BYTE_D41B6)
				v4 = 2048;
			else
				v4 = 1024;
			v5 = sub_58490_radix_3d_2(&x_WORD_EB398ar, &v16x->array_0x4C_76);
			if (v5 > v4)
			{
				v16x->struct_byte_0xc_12_15.byte[0] &= 0xBFu;
			}
			else
			{
				v16x->struct_byte_0xc_12_15.byte[0] |= 0x40u;
				v16x->word_0x96_150 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
				if (sub_106C0(v16x, a1x))
				{
					a1x->dword_0x90_144 += v16x->dword_0x90_144;
					a1x->word_0x94_148 = v16x->word_0x94_148;
					a1x->dword_0x8 = a1x->dword_0x4;
					a1x->word_0x96_150 = 0;
					sub_57F10(v16x);
				}
			}
			v6 = a1x->word_0x82_130;
			if (v5 <= v6)
			{
				x_WORD_EB398ar.x = v16x->array_0x4C_76.x;
				x_WORD_EB398ar.y = v16x->array_0x4C_76.y;
				goto LABEL_20;
			}
		}
		else
		{
			if (v3 == 3)
			{
				v7 = a1x->word_0x82_130 * v16x->dword_0x10_16;
				if (sub_58490_radix_3d_2(&x_WORD_EB398ar, v2) <= v7)
				{
					v8 = a1x->dword_0xA0_160x->word_160_0xc_12;
					if (x_WORD_EB398ar.z <= v8 + (int16_t)sub_10C40_getTerrainAlt(&x_WORD_EB398ar) && v16x->dword_0x10_16 > 0)
					{
						x_WORD_EB398ar.x = v16x->array_0x4C_76.x;
						v9 = v16x->dword_0x90_144;
						x_WORD_EB398ar.y = v16x->array_0x4C_76.y;
						v16x->dword_0x90_144 = a1x->dword_0x90_144 + v9;
						a1x->dword_0x90_144 = 0;
						a1x->word_0x94_148 = a1x->word_0x1A_26;
						a1x->dword_0x8 = a1x->dword_0x4;
					}
					goto LABEL_20;
				}
			}
			LOWORD(v6) = a1x->word_0x82_130;
		}
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, v6);
	LABEL_20:
		if (x_BYTE_D41B6)
		{
			sub_60D50(&x_WORD_EB398ar, a1x);
		}
		else
		{
			//v10 = *(int16_t **)&a1x->dword_0xA0_160;
			v11 = a1x->dword_0xA0_160x->word_160_0xe_14;
			v12 = a1x->dword_0xA0_160x->word_160_0xa_10;
			v13 = a1x->dword_0xA0_160x->word_160_0xc_12;
			v14 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
			sub_580E0(&x_WORD_EB398ar, v14, v13, v12, v11);
			sub_57CF0(a1x, &x_WORD_EB398ar);
		}
	}
	sub_60EA0(a1x);
}

//----- (00060D50) --------------------------------------------------------
void sub_60D50(axis_3d* a1x, type_str_0x6E8E* a2x)//241d50
{
	int v2; // edx
	char v3; // ch
	//int16_t *v4; // edx
	int16_t v5; // ST10_2
	int v6; // ST0C_4
	int v7; // ST08_4
	int16_t v8; // ax
	int v9; // edi
	int v10; // edx
	char v12; // [esp+0h] [ebp-4h]

	v12 = 0;
	v2 = a1x->x >> 8;
	BYTE1(v2) = a1x->y >> 8;
	if (a2x->struct_byte_0xc_12_15.byte[0] & 1)
	{
		if (!(x_BYTE_13B4E0_angle[(uint16_t)v2] & 8) && !sub_11E70(a2x, a1x))
		{
			a2x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
			v12 = 1;
		}
		a2x->word_0x82_130 = 96;
	}
	else
	{
		if (x_BYTE_13B4E0_angle[(uint16_t)v2] & 8 || sub_11E70(a2x, a1x))
		{
			v12 = 1;
			a2x->struct_byte_0xc_12_15.byte[0] |= 1u;
		}
		a2x->word_0x82_130 = 48;
	}
	v3 = a2x->byte_0x46_70;
	if (v3)
		a2x->byte_0x46_70 = v3 - 1;
	if (v12 && !a2x->byte_0x46_70)
	{
		sub_6E450_distance_sound(a2x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 22);
		a2x->byte_0x46_70 = 32;
	}
	//v4 = *(int16_t **)&a2x->dword_0xA0_160;
	v5 = a2x->dword_0xA0_160x->word_160_0xe_14;
	v6 = a2x->dword_0xA0_160x->word_160_0xa_10;
	v7 = a2x->dword_0xA0_160x->word_160_0xc_12;
	v8 = sub_10C40_getTerrainAlt(a1x);
	sub_580E0(a1x, v8, v7, v6, v5);
	if (!(a2x->struct_byte_0xc_12_15.byte[0] & 1))
	{
		v9 = a2x->array_0x52_82.dd;
		v10 = (int16_t)sub_10C60(a1x) - v9;
		if (a1x->z > v10)
			a1x->z = v10;
	}
	sub_57CF0(a2x, a1x);
}

//----- (00060EA0) --------------------------------------------------------
void sub_60EA0(type_str_0x6E8E* a1x)//241ea0
{
	signed int v1; // edx
	//int v3; // edx

	v1 = 0;
	if (a1x->dword_0x8 < 0)
		return/* 2*/;
	if (a1x->str_0x5E_94.word_0x62_98)
	{
		//v3 = a1x->dword_0xA4_164;
		a1x->dword_0x8 -= a1x->str_0x5E_94.dword_0x5E_94;
		a1x->dword_0xA4_164x->byte_0x197_407 = 4;
		if (a1x->dword_0x8 < 0)
		{
			a1x->word_0x24_36 = a1x->str_0x5E_94.word_0x62_98;
			return/* 2*/;
		}
		v1 = 1;
		a1x->str_0x5E_94.word_0x62_98 = 0;
	}
	return/* v1*/;
}

int debugcounter_sub_241F7A = 0;

//----- (00060F00) --------------------------------------------------------
void sub_60F00()//241f00
{
	uint16_t v0; // bx
	//Bit8u* v1; // eax
	type_str_0x6E8E* v2x; // edx
	//x_DWORD *v3; // eax
	type_str_0x6E8E* v4x; // ebx
	Bit8u v3a;
	type_str_0x6E8E* v3c;

	/*Bit8u origbyte20 = 0;
	Bit8u remakebyte20 = 0;
	int comp20;

	comp20 = compare_with_sequence_D41A0((char*)"00241F00-00356038", (Bit8u*)& D41A0_BYTESTR_0, 0x356038, debugcounter_sub_241F7A, 0x36e16, &origbyte20, &remakebyte20);
	if(debugcounter_sub_241F7A>=0xb)
	{
		debugcounter_sub_241F7A++;
		debugcounter_sub_241F7A--;
	}
	debugcounter_sub_241F7A++;*/

	v0 = 0;
	//v1 = &x_D41A0_BYTEARRAY_0[11230];
	int v1index = 0;
	while (v0 < D41A0_BYTESTR_0.word_0xe)
	{
		v2x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[v1index].word_0x00a_2BE4_11240];
		v2x->dword_0x8C_140 = v2x->dword_0xA4_164x->byte_0x150_336;
		//v1 += 2124;
		v1index++;
		v0++;
		v2x->dword_0xA4_164x->dword_0x13C_316 = 0;
	}
	//v3 = (Bit32s*)x_D41A0_BYTEARRAY_4;
	//adress 241f53
	v4x = x_DWORD_EA3E4[1];
	*(Bit32u*)&x_D41A0_BYTEARRAY_4_struct.byteindex_242ar[4] = 1;
	*(Bit32u*)&x_D41A0_BYTEARRAY_4_struct.byteindex_242ar[8] = 0;

	/**(_DWORD *)(dword_D41A4 + 246) = 1;
	*(_DWORD *)(dword_D41A4 + 250) = 0;*/

	if (v4x < x_DWORD_EA3E4[0x3e8])
	{
		while (1)
		{
			v3a = v4x->byte_0x3F_63;
			if (v3a < 5u)
				break;
			if (v3a <= 5u)
				goto LABEL_23;
			if (v3a != 10)
				goto LABEL_24;
			v3a = v4x->byte_0x40_64;
			if (v3a < 0x2Du)
			{
				if (v3a == 39)
					goto LABEL_23;
			}
			else
			{
				if (v3a <= 0x2Du)
				{
					v3c = sub_61000(v4x);
					if(v3c)
					if (v3c && v3c->dword_0xA4_164x)
					{
						v3c->dword_0xA4_164x->dword_0x13C_316+= v4x->dword_0x90_144;
						//v3b = (Bit8u*)(x_DWORD *)v3b[41];
						//v3b[79] += v4x->dword_0x90_144;
					}
					goto LABEL_24;
				}
				if (v3a == 58)
					goto LABEL_23;
			}
		LABEL_24:
			v4x++;
			if (v4x >= x_DWORD_EA3E4[0x3e8])
				return/* (char)v3*/;
		}
		if (v3a != 3)
			goto LABEL_24;
		v3a = v4x->byte_0x40_64;
		if (v3a < 2u || v3a > 2u && v3a != 3)
			goto LABEL_24;
	LABEL_23:
		// FIXME: types
		// v3a = (int)sub_61000(v4x);
		goto LABEL_24;
	}


	//return (char)v3;
}

//----- (00061000) --------------------------------------------------------
type_str_0x6E8E* sub_61000(type_str_0x6E8E* a1x)//242000
{
	type_str_0x6E8E* v1x; // eax

	v1x = 0;
	if (a1x->word_0x94_148)
	{
		//LOWORD(v1) = *(x_WORD *)(a1 + 148);
		v1x = x_DWORD_EA3E4[a1x->word_0x94_148];
		v1x->dword_0x8C_140 += a1x->dword_0x90_144;
	}
	*(Bit32u*)&x_D41A0_BYTEARRAY_4_struct.byteindex_242ar[4] += a1x->dword_0x90_144;
	return v1x;
}

//----- (00061050) --------------------------------------------------------
type_str_0x6E8E* sub_61050(type_str_0x6E8E* a1x)//242050
{
	uint16_t v1; // ax
	type_str_0x6E8E* v2x; // edx
	//int v3; // eax
	uint8_t v4; // dl
	int v5; // eax
	type_str_0x6E8E* v6x; // ebx
	type_str_0x6E8E* v7x; // eax
	int v8; // ecx
	int64_t v9; // rtt
	type_str_0x6E8E* v10x; // edx
	int v11; // edx
	int v12; // ecx
	int16_t v13; // ax
	int16_t v14; // si
	int16_t v15; // ax
	type_str_0x6E8E* v16x; // eax
	type_str_0x6E8E* v17x; // ebx
	int16_t v18; // ax
	int16_t v19; // si
	int16_t v20; // ST0C_2
	uint16_t v21; // ax
	int v22; // esi
	int v23; // esi
	int v24; // ebx
	type_str_0x6E8E* resultx; // eax
	axis_3d v26x; // [esp+0h] [ebp-28h]
	//int16_t v27; // [esp+4h] [ebp-24h]
	//int *v28; // [esp+8h] [ebp-20h]
	unsigned int v29; // [esp+Ch] [ebp-1Ch]
	int v30; // [esp+10h] [ebp-18h]
	type_str_0x6E8E* v31x; // [esp+14h] [ebp-14h]
	//Bit8u* v32; // [esp+18h] [ebp-10h]
	int v33; // [esp+1Ch] [ebp-Ch]
	type_str_0x6E8E* v34x; // [esp+20h] [ebp-8h]
	char v35; // [esp+24h] [ebp-4h]

	v33 = 0;
	v35 = 0;
	v1 = a1x->str_0x5E_94.word_0x74_116;
	v2x = x_DWORD_EA3E4[v1];
	v34x = v2x;
	if (v2x < x_DWORD_EA3E4[0])
		goto LABEL_35;
	if (v2x->byte_0x3F_63 == 3)
	{
		sub_6D8B0(v1, 0xDu, 1);
		//v3 = 26 * a1x->str_0x5E_94.dword_0x70_112;
		//v28 = (int *)& SPELLS_BEGIN_BUFFER_DA818[0x15a +0x2d2];
		//SPELLS_BEGIN_BUFFER_str[13].subspell[2].dword_2
		//v32 = (Bit8u*)& SPELLS_BEGIN_BUFFER_DA818[0x15a +0x2b8+v3];
		//SPELLS_BEGIN_BUFFER_str[13].subspell[a1x->str_0x5E_94.dword_0x70_112].dword_2
		//v4 = SPELLS_BEGIN_BUFFER_DA818[0x15a +0x2b8+v3 + 24];
		v4 = SPELLS_BEGIN_BUFFER_str[13].subspell[a1x->str_0x5E_94.dword_0x70_112].byte_0x1A;
		if (v4)
		{
			if (v4 > 2u)
				goto LABEL_23;
			v6x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58];
			v7x = x_DWORD_EA3E4[v34x->dword_0xA4_164x->word_0x3A_58];
			v31x = x_DWORD_EA3E4[v34x->dword_0xA4_164x->word_0x3A_58];
			if (v6x <= x_DWORD_EA3E4[0] || v7x <= x_DWORD_EA3E4[0] || (v8 = v6x->dword_0x90_144, v8 <= 0))
			{
				v35 = 1;
			}
			else
			{
				v9 = v8 * SPELLS_BEGIN_BUFFER_str[13].subspell[a1x->str_0x5E_94.dword_0x70_112].dword_2;
				v10x = v31x;
				v6x->dword_0x90_144 = v8 - v8 * SPELLS_BEGIN_BUFFER_str[13].subspell[a1x->str_0x5E_94.dword_0x70_112].dword_2 / 100;
				v11 = v10x->array_0x52_82.xshift * v10x->array_0x52_82.xshift;
				v33 = v9 / 100;
				v29 = sub_7277A_radix_3d(v11 + v31x->array_0x52_82.yshift * v31x->array_0x52_82.yshift);
				while (v33 > 0)
				{
					if (v33 <= 500)
						v30 = v33;
					else
						v30 = 500;
					v12 = v33 - v30;
					v26x = v31x->array_0x4C_76;
					v13 = 9377 * a1x->word_0x14_20 + 9439;
					a1x->word_0x14_20 = v13;
					v14 = v13 & 0x7FF;
					v33 = v12;
					sub_57FA0(&v26x, v13 & 0x7FF, 0, v29);
					v15 = sub_10C40_getTerrainAlt(&v26x);
					HIBYTE(v15) += 4;
					v26x.z = v15;
					v16x = sub_4A190(&v26x, 10, 39);
					v17x = v16x;
					if (v16x)
					{
						v16x->word_0x14_20 = 9377 * v16x->word_0x14_20 + 9439;
						v18 = (v14 + v16x->word_0x14_20 % 0x71u - 56) & 0x7FF;
						v19 = v17x->word_0x14_20;
						v17x->word_0x1C_28 = v18;
						v17x->word_0x14_20 = 9377 * v19 + 9439;
						v17x->word_0x82_130 = v17x->word_0x14_20 % 0x30u + 16;
						v20 = v17x->word_0x82_130;
						v21 = v17x->word_0x1C_28;
						v17x->word_0x9A_154x.x = 0;
						v17x->word_0x9A_154x.y = 0;
						v17x->word_0x2C_44 = 128;
						sub_57FA0(&v17x->word_0x9A_154x, v21, 0, v20);
						v17x->dword_0x90_144 = v30;
						if (SPELLS_BEGIN_BUFFER_str[13].subspell[a1x->str_0x5E_94.dword_0x70_112].byte_0x1A == 2)
							v17x->word_0x94_148 = v34x - D41A0_BYTESTR_0.struct_0x6E8E;
						else
							v17x->word_0x94_148 = 0;
					}
				}
			}
			if (!v35)
				goto LABEL_23;
			v5 = SPELLS_BEGIN_BUFFER_str[13].subspell[a1x->str_0x5E_94.dword_0x70_112].dword_2;
		}
		else
		{
			v5 = SPELLS_BEGIN_BUFFER_str[13].subspell[a1x->str_0x5E_94.dword_0x70_112].dword_2;
			v35 = 1;
		}
		v33 = v5;
	}
LABEL_23:
	if (v35)
	{
		v22 = v33;
		if (v33)
		{
			v34x->dword_0x90_144 += v33;
			a1x->dword_0x90_144 -= v22;
		}
	}
	if (v34x->dword_0x90_144 < 0)
		v34x->dword_0x90_144 = 0;
	v23 = v34x->dword_0x8C_140;
	if (v34x->dword_0x90_144 > v23)
		v34x->dword_0x90_144 = v23;
	if (a1x->dword_0x90_144 < 0)
		a1x->dword_0x90_144 = 0;
	v24 = a1x->dword_0x8C_140;
	if (a1x->dword_0x90_144 > v24)
		a1x->dword_0x90_144 = v24;
	a1x->dword_0xA4_164x->byte_0x196_406 = 4;
	a1x->dword_0xA4_164x->dword_0x18D_397 = 16;
	a1x->dword_0xA4_164x->word_0x24C_588 = 64;
LABEL_35:
	sub_5EF70(a1x);
	resultx = a1x;
	a1x->str_0x5E_94.word_0x74_116 = 0;
	return resultx;
}

//----- (000613D0) --------------------------------------------------------
void sub_613D0(type_str_0x6E8E* a1x)//2423d0
{
	int i1; // eax
	type_str_0x6E8E* i2x; // eax
	type_str_0x6E8E* v2x; // ebx
	int16_t v3; // dx
	signed int v4; // esi
	type_str_0x6E8E* v5x; // edx
	//int v6; // ebx
	//int v7; // ebx
	signed int v8; // edx
	type_str_0x6E8E* v9x; // ebx
	//Bit8u* v10; // ST14_4
	int16_t v11; // ax
	char *v13; // [esp+0h] [ebp-24h]
	int v14; // [esp+4h] [ebp-20h]
	int v15; // [esp+Ch] [ebp-18h]
	char v16; // [esp+10h] [ebp-14h]
	type_str_0x6E8E* v17x; // [esp+14h] [ebp-10h]
	type_str_0x6E8E* v18x; // [esp+18h] [ebp-Ch]
	uint8_t v19; // [esp+1Ch] [ebp-8h]
	uint8_t v20; // [esp+20h] [ebp-4h]

	for (i1 = a1x->word_0x34_52; ; i1 = v2x->word_0x34_52)
	{
		v2x = x_DWORD_EA3E4[i1];
		if (v2x == x_DWORD_EA3E4[0])
			break;
		sub_57F20(x_DWORD_EA3E4[i1]);
	}
	v3 = a1x->word_0x1A_26;
	a1x->word_0x34_52 = 0;
	if (v3 && a1x->dword_0x10_16)
	{
		//LOWORD(i) = v3;
		v4 = a1x->dword_0x10_16;
		v5x = x_DWORD_EA3E4[v3];
		while (v4 > 0)
		{
			//LOWORD(i) = *(char *)(v4 + *(x_DWORD *)(v5 + 164) + 599);
			v16 = v5x->dword_0xA4_164x->array_0x24E_590[9+v4];
			if (v5x->dword_0xA4_164x->array_0x24E_590[9+v4])
				break;
			v4--;
		}
		if (v4)
		{
			/*v6 = 6 * v4;
			i = x_WORD_180660_VGA_type_resolution == 1 ? (signed int)*(uint8_t *)(v6 + **filearray_2aa18c[24] + 4) >> 1 : *(uint8_t *)(v6 + **filearray_2aa18c[24] + 4);
			v7 = 6 * v4;
			v8 = x_WORD_180660_VGA_type_resolution == 1 ? (signed int)*(uint8_t *)(v7 + **filearray_2aa18c[24] + 5) >> 1 : *(uint8_t *)(v7 + **filearray_2aa18c[24] + 5);
			*/
			//filearrayindex_MSPRD00DATTAB
		    i1 = x_WORD_180660_VGA_type_resolution == 1 ? (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[v4].width >> 1 : (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[v4].width;
			v8 = x_WORD_180660_VGA_type_resolution == 1 ? (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[v4].height >> 1 : (*filearray_2aa18c[filearrayindex_BUILD00DATTAB]._posistruct)[v4].height;

			v20 = ((uint16_t)(a1x->array_0x4C_76.x + 128) >> 8) - (i1 >> 1);
			v19 = ((uint16_t)(a1x->array_0x4C_76.y + 128) >> 8) - (v8 >> 1);
			v15 = 0;
			v14 = (uint8_t)x_BYTE_DB038[2 * v4];
			v18x = a1x;
			v13 = (char *)& x_BYTE_DB038[0x12] + 2 * (uint8_t)x_BYTE_DB038[1+2 * v4];
			//LOWORD(i) = 0;
			if (v14 > 0)
			{
				do
				{
					x_WORD_EB398ar.x = (v20 + v13[0]) << 8;
					x_WORD_EB398ar.y = (v19 + v13[1]) << 8;
					i2x = sub_4A190(&x_WORD_EB398ar, 10, 79);
					v9x = i2x;
					v17x = i2x;
					if (!i2x)
						break;
					i2x->word_0x32_50 = v18x - D41A0_BYTESTR_0.struct_0x6E8E;
					v18x->word_0x34_52 = i2x - D41A0_BYTESTR_0.struct_0x6E8E;
					i2x->word_0x34_52 = 0;
					i2x->word_0x1A_26 = a1x->word_0x1A_26;
					i2x->byte_0x43_67 = v16;
					i2x->word_0x4A_74 = v4;
					v11 = sub_10C40_getTerrainAlt(&i2x->array_0x4C_76);
					v9x->array_0x4C_76.z = v11;
					v9x->array_0x4C_76.z = v4 <= 1 ? v11 + 384 : v11 + 224;
					v18x = v17x;
					v15++;
					v13 += 2;
					//LOWORD(i2) = v15;
				} while (v15 < v14);
			}
		}
	}
	//return i;
}

//----- (00061620) --------------------------------------------------------
char sub_61620(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//242620
{
	Bit32s v2x; // edi
	type_str_0x6E8E* v3x; // esi
	type_str_0x6E8E* ix; // ebx
	Bit32s v5x; // eax
	char v7; // [esp+0h] [ebp-4h]

	v2x = 0x10000;
	v3x = 0;
	v7 = 0;
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
	{
		if (!ix->byte_0x40_64 && ix != a1x)
		{
			v5x = sub_61810(a1x, ix);
			if (v5x)
			{
				if (v5x < v2x)
				{
					v2x = v5x;
					v3x = ix;
				}
			}
		}
	}
	if (v3x == a2x)
		v7 = 1;
	return v7;
}

//----- (000616D0) --------------------------------------------------------
signed int sub_616D0(signed int a1)//2426d0
{
	signed int result; // eax

	result = 0;
	if (a1 >= 0 && a1 <= 7)
	{
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
		{
			switch (D41A0_BYTESTR_0.array_0x2BDE[a1].dword_0x3E6_2BE4_12228.byte_0x1C0_448)
			{
			case 0:
			LABEL_5:
				result = 0;
				break;
			case 1:
			LABEL_7:
				result = 4;
				break;
			case 2:
			LABEL_6:
				result = 1;
				break;
			case 3:
			LABEL_9:
				result = 2;
				break;
			case 4:
			LABEL_10:
				result = 5;
				break;
			case 5:
			case 7:
			LABEL_13:
				result = 7;
				break;
			case 6:
			LABEL_8:
				result = 3;
				break;
			default:
				return result;
			}
		}
		else
		{
			switch (a1)
			{
			case 0:
				goto LABEL_5;
			case 1:
				goto LABEL_6;
			case 2:
				goto LABEL_7;
			case 3:
				goto LABEL_8;
			case 4:
				goto LABEL_9;
			case 5:
				goto LABEL_10;
			case 6:
				goto LABEL_13;
			case 7:
				result = 6;
				break;
			default:
				return result;
			}
		}
	}
	return result;
}

//----- (00061790) --------------------------------------------------------
signed int sub_61790(signed int a1)//242790
{
	signed int result; // eax

	result = a1;
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
	{
		switch (D41A0_BYTESTR_0.array_0x2BDE[a1].dword_0x3E6_2BE4_12228.byte_0x1C0_448)
		{
		case 0:
			result = 0;
			break;
		case 1:
			result = 2;
			break;
		case 2:
			result = 1;
			break;
		case 3:
			result = 4;
			break;
		case 4:
			result = 5;
			break;
		case 5:
			result = 6;
			break;
		case 6:
			result = 3;
			break;
		case 7:
			result = 7;
			break;
		default:
			return result;
		}
	}
	return result;
}

//----- (00061810) --------------------------------------------------------
signed int sub_61810(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//242810
{
	signed int v2; // ebx
	signed int v3; // esi
	int16_t v4; // ax

	v2 = 0;
	v3 = sub_583F0_distance_3d(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
	if (v3 < 5376)
	{
		v4 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
		if (sub_582B0(a1x->word_0x1C_28, v4) < 0x100u)
			v2 = v3;
	}
	return v2;
}

//----- (00061880) --------------------------------------------------------
void sub_61880_draw_minimap_entites(int a1, int a2, int16_t a3, int16_t a4, int a5, int a6, int16_t a7, int a8)//242880
{
	//char *result; // eax
	// 0 0 4d80 ffffde80 80 0 0 100 c0 0
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 == 1)
		/*result = */sub_627F0_draw_minimap_entites_a(a1, a2, a3, a4, a5, a6, a7, a8);
	else
		/*result = */sub_61A00_draw_minimap_entites_b(a1, a2, a3, a4, a5, a6, a7, a8);
	//return result;
}

int debugcounter2=0;
//----- (00061A00) --------------------------------------------------------
void sub_61A00_draw_minimap_entites_b(int a1, int a2, int16_t a3, int16_t a4, int a5, int a6, int16_t a7, int a8)//242a00
{
	int v8; // edx
	int v9; // esi
	int v10; // ebx
	uint8_t v11; // al
	int64_t v12; // rtt
	int v13; // ebx
	int v14; // edx
	int v15; // ebx
	int16_t v16; // dx
	//int v17; // ebx
	int v18; // eax
	int v19; // edx
	int v20; // esi
	int v21; // edi
	type_str_0x6E8E* v22x; // edx
	int v23; // eax
	int v24; // edx
	int v25; // ebx
	int v26; // ST48_4
	int v27; // edx
	int i; // eax
	int v29; // ebx
	type_str_0x6E8E* jy; // ebx
	uint8_t v31; // al
	uint8_t v32; // ah
	uint8_t v33; // ah
	uint8_t v34; // ah
	uint16_t v35; // si
	type_str_0x6E8E* v36x; // eax
	char v37; // al
	char v38; // al
	type_str_0x6E8E* v39x; // eax
	uint16_t v40; // si
	type_str_0x6E8E* v41x; // eax
	uint8_t v42; // ah
	char v43; // alv39x
	uint8_t v44; // ah
	int v45; // eax
	uint8_t v46; // al
	char v47; // al
	char v48; // dl
	char v49; // al
	uint8_t v50; // ah
	int16_t v51; // ax
	int v52; // edx
	int v53; // ecx
	int v54; // esi
	int v55; // edi
	char *v56; // edx
	int v57; // ecx
	char *v58; // edx
	int v59; // eax
	type_str_0x6E8E* v60x; // ebx
	int v61; // edx
	int v62; // eax
	int v63; // esi
	int v64; // edi
	uint8_t *v65; // ST14_4
	uint8_t v66; // al
	int v67; // esi
	x_BYTE *v68; // ebx
	char *index; // eax
	x_BYTE *v70; // edx
	int v71; // ecx
	int v72; // [esp+0h] [ebp-60h]
	int v73; // [esp+8h] [ebp-58h]
	type_str_0x6E8E* v74x; // [esp+Ch] [ebp-54h]
	signed int v75; // [esp+10h] [ebp-50h]
	int v76; // [esp+14h] [ebp-4Ch]
	x_BYTE *v77; // [esp+18h] [ebp-48h]
	signed int v78; // [esp+1Ch] [ebp-44h]
	//int v79; // [esp+20h] [ebp-40h]
	type_str_0x6E8E* v80x; // [esp+24h] [ebp-3Ch]
	x_BYTE *v81; // [esp+28h] [ebp-38h]
	int v82; // [esp+2Ch] [ebp-34h]
	int v83; // [esp+30h] [ebp-30h]
	Bit8u* v84; // [esp+34h] [ebp-2Ch]
	int v85; // [esp+38h] [ebp-28h]
	int v86; // [esp+3Ch] [ebp-24h]
	uint16_t v87; // [esp+40h] [ebp-20h]
	uint16_t v88; // [esp+44h] [ebp-1Ch]
	char v89; // [esp+48h] [ebp-18h]
	Bit8u v90; // [esp+4Ch] [ebp-14h]
	Bit8u v91; // [esp+50h] [ebp-10h]
	Bit8u v92; // [esp+54h] [ebp-Ch]
	Bit8u v93; // [esp+58h] [ebp-8h]
	char v94; // [esp+5Ch] [ebp-4h]

	if (debugcounter2 >= 8)
	{
		debugcounter2 = debugcounter2;
	}
	debugcounter2++;

	v8 = a1;
	v9 = a2;
	v10 = a8;
	v11 = D41A0_BYTESTR_0.str_2FECE.byte_level_type;
	v83 = 0;
	if (v11 == 0u)
	{
		v92 = (*xadataclrd0dat.var28_begin_buffer)[0];
		v93 = (*xadataclrd0dat.var28_begin_buffer)[0];
		v91 = 0xe8;
		v90 = 0x1c;		
	}
	else if (v11 == 1u)
	{
		v92 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
		v93 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
		v91 = 0xe8;//0xe8
		v90 = 0x84;//0x84
	}
	else if (v11 == 2)
	{
		v92 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
		v93 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
		v91 = 0x1c;
		v90 = (*xadataclrd0dat.var28_begin_buffer)[0xf0];
	}
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		v8 = a1 >> 1;
		v9 = a2 >> 1;
		v10 = 2 * a8;
		a5 >>= 1;
		a6 >>= 1;
	}
	v84 = v9 * x_DWORD_18062C_resolution_x + x_DWORD_180628b_screen_buffer + v8;
	LODWORD(v12) = 0x10000;
	HIDWORD(v12) = 0x10000 >> 31;
	v13 = v12 / v10;
	v82 = a5 / 2;
	v14 = v13 * x_DWORD_DB750[a7 & 0x7FF];
	v76 = a6 / 2;
	v15 = (x_DWORD)x_DWORD_DB750[0x200+a7 & 0x7FF] * v13;
	v86 = -v14 >> 16;
	sub_6FC50(x_BYTE_D419D_fonttype);
	v73 = v15 >> 16;
	v80x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	v16 = v80x->dword_0xA4_164x->str_611.array_0x333_819x.word[0xc];
	if (v16)
		v83 = x_DWORD_EA3E4[v16]->word_0x2E_46;
	//v17 = v80x->dword_0xA4_164;
	if (v80x->dword_0xA4_164x->word_0x3A_58)
	{
		v18 = (int16_t)(v80x->array_0x4C_76.x - a3);
		v19 = (int16_t)(v80x->array_0x4C_76.y - a4);
		v20 = v82 + ((v18 * v73 - v19 * v86) >> 16);
		v21 = ((v73 * v19 + v86 * v18) >> 16) + v76;
		v22x = x_DWORD_EA3E4[v80x->dword_0xA4_164x->word_0x3A_58];
		v23 = (int16_t)(v22x->array_0x4C_76.x - a3);
		v24 = (int16_t)(v22x->array_0x4C_76.y - a4);
		v25 = v82 + ((v23 * v73 - v24 * v86) >> 16);
		v26 = ((v73 * v24 + v86 * v23) >> 16) + v76;
		v27 = v82 + ((v23 * v73 - v24 * v86) >> 16) - v20;
		v75 = sub_7277A_radix_3d(v27 * v27 + (v26 - v21) * (v26 - v21));
		v72 = (uint16_t)sub_72633_maybe_tan(v25 - v20, v26 - v21);
		for (i = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248 & 3;
			;
			*(x_BYTE *)(v84 + v20 + (i * x_DWORD_DB750[v72] >> 16) + x_DWORD_18062C_resolution_x * v85) = x_BYTE_F6EE0_tablesx[0x4000+256
			* *(uint8_t *)(v84 + v20 + (i * x_DWORD_DB750[v72] >> 16) + x_DWORD_18062C_resolution_x * v85)
			+ (uint8_t)(*xadataclrd0dat.var28_begin_buffer)[0xfff]])//castle rope
		{
			i += 4;
			if (i > v75)
				break;
			v29 = v20 + (i * x_DWORD_DB750[v72] >> 16);
			//v29 = v20 + (i * (Bit32s)x_DWORD_DB750ar_ret(4*v72) >> 16);
			v85 = v21 + (-i * x_DWORD_DB750[0x200+v72] >> 16);
			if (v29 < 0 || v29 >= a5 || v85 < 0 || v85 >= a6 || v29 < x_WORD_F4960[1+2 * v85] || v29 >= x_WORD_F4960[2 * v85])
				break;
		}
	}
	//for all entites
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	//for (jy = &D41A0_BYTESTR_0.struct_0x6E8E[1]; jy <= &D41A0_BYTESTR_0.struct_0x6E8E[0x3e8-1]; jy += sizeof(type_str_0x6E8E))
	for (jy = &D41A0_BYTESTR_0.struct_0x6E8E[1]; jy <= &D41A0_BYTESTR_0.struct_0x6E8E[0x3e8 - 1]; jy ++)
	{
		//a3 //adress 242cf9 20-ok 80-ok e0-ok e1-ok e2-ok

		v31 = 0;
		v89 = 0;
		v78 = 1;
		v32 = jy->byte_0x3F_63 - 2;//entity type
		v88 = 0;
		if (v32 <= 0xDu)
		{
			switch (v32)
			{
			case 0u:
				v42 = jy->byte_0x40_64;//entity subtype
				if (v42 > 3u)
				{
				LABEL_78:
					v38 = v90;
					goto LABEL_121;
				}
				switch (v42)
				{
				case 0u:
					if (jy->byte_0x45_69 != 2)
						goto LABEL_78;
					v94 = v90;
					v31 = 0;
					break;
				case 1u:
					v31 = 1;
					if (x_D41A0_BYTEARRAY_4_struct.byteindex_121[3])
						v94 = (*xadataclrd0dat.var28_begin_buffer)[0x88];
					else
						v89 = 1;
					v88 = 27;
					break;
				case 2u:
					if (x_D41A0_BYTEARRAY_4_struct.byteindex_121[2])
						v43 = (*xadataclrd0dat.var28_begin_buffer)[0x888];
					else
						v43 = v90;
					v94 = v43;
					v31 = 1;
					v88 = 22;
					break;
				case 3u:
					goto LABEL_123;
				}
				break;
			case 1u:
				v50 = jy->byte_0x40_64;
				if (v50 >= 2u)
				{
					if (v50 <= 2u)
					{
						LOBYTE(v51) = jy->word_0x1A_26 != v80x->word_0x1A_26;
						HIBYTE(v51) = 0;
						v88 = v51 + 24;
						v31 = sub_616D0(x_DWORD_EA3E4[jy->word_0x1A_26]->dword_0xA4_164x->word_0x38_56)//castle rope
							+ 58;
					}
					else if (v50 == 3)
					{
						if (jy->word_0x1A_26 == v80x->word_0x1A_26 || v83)
							v31 = sub_616D0(x_DWORD_EA3E4[jy->word_0x1A_26]->dword_0xA4_164x->word_0x38_56)
							+ 66;
						if (jy->word_0x1A_26 == v80x->word_0x1A_26)
						{
							v88 = 23;
						}
						else if (v83)
						{
							v88 = 26;
						}
					}
				}
				break;
			case 2u:
			case 4u:
			case 5u:
			case 6u:
			case 0xBu:
				break;
			case 3u:
				v44 = jy->byte_0x45_69;
				if (v44 >= 0xB4u && (v44 <= 0xB4u || v44 >= 0xE8u && v44 <= 0xEAu) || jy->struct_byte_0xc_12_15.byte[0] & 1)
					break;
				v45 = jy->word_0x1A_26;
				if (v45 != jy - D41A0_BYTESTR_0.struct_0x6E8E)
				{
					v47 = x_BYTE_E88E0x[1+3 * sub_61790(x_DWORD_EA3E4[v45]->dword_0xA4_164x->word_0x38_56)];
					goto LABEL_102;
				}
				v46 = jy->byte_0x40_64;
				if (v46 >= 0xCu)
				{
					if (v46 <= 0xEu)
					{
						v47 = (*xadataclrd0dat.var28_begin_buffer)[0x0f];
					LABEL_102:
						v94 = v47;
						goto LABEL_122;
					}
					if (v46 == 22)
					{
						if (jy->word_0x94_148 != v80x->word_0x1A_26)
							v88 = 18;
						v47 = v92;
						goto LABEL_102;
					}
				}
				v48 = jy->byte_0x49_73;
				v94 = v92;
				v49 = 1;
				if ((v48 == 14 || v48 == 13) && jy->word_0x28_40 == v80x->word_0x1A_26)
					v49 = 0;
				if (v49)
					v88 = 19;
				goto LABEL_122;
			case 7u:
				goto LABEL_56;
			case 8u:
				v34 = jy->byte_0x40_64;
				if (v34 < 0x27u)
				{
					if (v34 >= 0x12u)
					{
						if (v34 <= 0x12u)
							break;
						if (v34 == 34)
							v78 = 2;
					}
					goto LABEL_56;
				}
				if (v34 <= 0x27u)
					goto LABEL_173;
				if (v34 < 0x39u)
				{
					if (v34 != 45)
						goto LABEL_56;
					v40 = jy->word_0x94_148;
					if (v40)
					{
						v41x = x_DWORD_EA3E4[v40];
						if (v41x->byte_0x3F_63 == 3)
						{
							if (x_D41A0_BYTEARRAY_4_struct.byteindex_121[3])
								v38 = x_BYTE_E88E0x[3 * sub_61790(v41x->dword_0xA4_164x->word_0x38_56)];
							else
								v38 = x_BYTE_E88E0x[1+3 * sub_61790(v41x->dword_0xA4_164x->word_0x38_56)];
							goto LABEL_121;
						}
					}
					if (!(x_WORD_D93C0_bldgprmbuffer[2+4 * jy->byte_0x46_70] & 8))
						v88 = 21;
				LABEL_56:
					v39x = x_DWORD_EA3E4[jy->word_0x1A_26];
					if (v39x->byte_0x3F_63 == 3)
						v38 = x_BYTE_E88E0x[3 * sub_61790(v39x->dword_0xA4_164x->word_0x38_56)];
					else
						v38 = (*xadataclrd0dat.var28_begin_buffer)[0xf0f];
				LABEL_121:
					v94 = v38;
					goto LABEL_122;
				}
				if (v34 <= 0x39u)
				{
				LABEL_173:
					v35 = jy->word_0x94_148;
					if (v35 && (v36x = x_DWORD_EA3E4[v35], v36x->byte_0x3F_63 == 3))
					{
						if (x_D41A0_BYTEARRAY_4_struct.byteindex_121[3])
							v37 = x_BYTE_E88E0x[3 * sub_61790(v36x->dword_0xA4_164x->word_0x38_56)];
						else
							v37 = x_BYTE_E88E0x[1+3 * sub_61790(v36x->dword_0xA4_164x->word_0x38_56)];
						v94 = v37;
					}
					else
					{
						v94 = v91;
						v88 = 18;
					}
				LABEL_122:
					v31 = 1;
				}
				else
				{
					if (v34 < 0x4Eu)
						goto LABEL_56;
					if (v34 <= 0x4Eu)
					{
						if (jy->word_0x32_50 != D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240)
							break;
						v38 = x_BYTE_E88E0x[3 * sub_61790(v80x->dword_0xA4_164x->word_0x38_56)
							+ x_D41A0_BYTEARRAY_4_struct.byteindex_121[3]];
						goto LABEL_121;
					}
					if (v34 < 0x56u || v34 > 0x57u)
						goto LABEL_56;
				}
				break;
			case 9u:
				v33 = jy->byte_0x40_64;
				if (v33 <= 0x2Cu)
				{
					switch (v33)
					{
					case 0u:
					case 1u:
					case 2u:
					case 3u:
					case 4u:
					case 5u:
					case 6u:
					case 7u:
					case 8u:
					case 9u:
					case 0xAu:
					case 0xBu:
					case 0xDu:
					case 0xEu:
					case 0xFu:
					case 0x10u:
					case 0x11u:
					case 0x12u:
					case 0x13u:
					case 0x14u:
					case 0x15u:
					case 0x16u:
					case 0x17u:
					case 0x18u:
					case 0x19u:
					case 0x1Au:
					case 0x1Bu:
					case 0x1Cu:
					case 0x1Du:
					case 0x1Eu:
					case 0x20u:
					case 0x21u:
					case 0x22u:
					case 0x23u:
					case 0x24u:
					case 0x25u:
					case 0x26u:
					case 0x27u:
					case 0x28u:
					case 0x29u:
					case 0x2Au:
					case 0x2Bu:
					case 0x2Cu:
						goto LABEL_123;
					case 0xCu:
						v31 = 83;
						v88 = 83;
						break;
					case 0x1Fu:
						v31 = 84;
						v88 = 83;
						break;
					}
				}
				break;
			case 0xAu:
			case 0xDu:
				if (jy->struct_byte_0xc_12_15.byte[0] & 1)
					break;
				v38 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
				v88 = 20;
				goto LABEL_121;
			case 0xCu:
				if (jy->byte_0x40_64 != 5)
					break;
				if (x_D41A0_BYTEARRAY_4_struct.byteindex_121[3])
					v38 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
				else
					v38 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
				goto LABEL_121;
			}
		}
	LABEL_123:
		if (v31)//adress 243207
		{
			v52 = (Bit16s)(jy->array_0x4C_76.x - a3);
			v53 = (Bit16s)(jy->array_0x4C_76.y - a4);
			v54 = v82 + ((v52 * v73 - v53 * v86) >> 16);
			if (v54 >= 0 && v54 < a5)
			{//24324e
				v55 = ((v73 * v53 + v86 * v52) >> 16) + v76;
				if (v55 >= 0 && v55 < a6 && v54 >= x_WORD_F4960[1 + 2 * v55] && v54 < x_WORD_F4960[2 * v55])
				{//adress 24329e 0x1e xx 0x17
					v56 = (char *)(v54 + v84 + v55 * x_DWORD_18062C_resolution_x);
					if (!v89)
					{
						if (v31 <= 1u)
						{
							v56[0] = v94;//here //adress 243429
							//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
							if (v78 > 1)
							{
								v57 = x_DWORD_18062C_resolution_x;
								v56[1] = v94;
								v58 = &v56[v57];
								v58[0] = v94;
								v58[1] = v94;
							}
						}
						else if (x_WORD_180660_VGA_type_resolution == 1)
						{
							if (v31 < 0x42u || v31 >= 0x4Au)
							{
								if (v31 < 0x3Au || v31 >= 0x42u)
								{
									if (v31 == 83 || v31 == 84)
										sub_2BB40_draw_bitmap(
											2 * v54 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31].width / 2,
											2 * v55 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31].height / 2,
											(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31]);
								}
								else
								{
									//sub_2BB40_draw_bitmap(2 * v54, 2 * v55 - *(uint8_t *)(6 * v31 + **filearray_2aa18c[6] + 5), (Bit8u**)(6 * v31 + **filearray_2aa18c[6]));
									sub_2BB40_draw_bitmap(2 * v54, 2 * v55 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31].height, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31]);
								}
							}
							else
							{
								sub_2BB40_draw_bitmap(
									2 * v54 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31].width / 2,
									2 * v55 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31].height,
									(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31]);
							}
						}
						else if (v31 >= 0x3Cu)
						{
							sub_2BB40_draw_bitmap(
								v54 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31].width / 2,
								v55 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31].height,
								(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31]);
						}
						else
						{
							//sub_2BB40_draw_bitmap(v54, v55 - *(uint8_t *)(6 * v31 + **filearray_2aa18c[6] + 5), (Bit8u**)(6 * v31 + **filearray_2aa18c[6]));
							sub_2BB40_draw_bitmap(v54, v55 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31].height, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v31]);
						}
					}
					if (v88)
						sub_885E0(jy, (int16_t)v54, (int16_t)v55, v88);
				}
			}
		}
	}

	if (v83)//player cross or other
	{
		v87 = 0;
		v74x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
		while (v87 < D41A0_BYTESTR_0.word_0xe)
		{
			if (v87 != D41A0_BYTESTR_0.word_0xc)
			{
				//v79 = 2124 * v87;
				v59 = D41A0_BYTESTR_0.array_0x2BDE[v87].word_0x00a_2BE4_11240;
				v60x = x_DWORD_EA3E4[v59];
				if (v60x->dword_0x8 >= 0)
				{
					if (sub_63570(v74x, x_DWORD_EA3E4[v59]))
					{
						v61 = (int16_t)(v60x->array_0x4C_76.x - a3);
						v62 = (int16_t)(v60x->array_0x4C_76.y - a4);
						v63 = v82 + ((v61 * v73 - v62 * v86) >> 16);
						if (v63 >= 0 && v63 < a5)
						{
							v64 = v76 + ((v86 * v61 + v73 * v62) >> 16);
							if (v64 >= 0 && v64 < a6 && v63 >= x_WORD_F4960[1 + 2 * v64] && v63 < x_WORD_F4960[2 * v64])
							{
								v65 = (uint8_t *)(v64 * x_DWORD_18062C_resolution_x + v63 + v84);
								v66 = x_BYTE_E88E0x[3 * sub_61790(v60x->dword_0xA4_164x->word_0x38_56)];
								*v65 = v66;
								if (x_WORD_180660_VGA_type_resolution == 1)									
									sub_2BC10_draw_text(D41A0_BYTESTR_0.array_0x2BDE[v87].array_0x39f_2BFA_12157, 2 * v63 + 4, 2 * v64, v66);//wizard name
								else
									sub_2BC10_draw_text(D41A0_BYTESTR_0.array_0x2BDE[v87].array_0x39f_2BFA_12157, v63 + 4, v64, v66);//wizard name
							}
						}
					}
				}
			}
			v87++;
		}
	}
	v67 = a5 / 12;
	v68 = (x_BYTE *)(x_DWORD_18062C_resolution_x * (a6 / 2) + a5 / 2 + v84 - 1);
	index = (char*)&x_BYTE_F6EE0_tablesx[0x4000+256 * v93];
	v70 = (x_BYTE *)(x_DWORD_18062C_resolution_x * (a6 / 2) + a5 / 2 + v84 - 1);
	v77 = (x_BYTE *)(x_DWORD_18062C_resolution_x * (a6 / 2) + a5 / 2 + v84 - 1);
	v81 = (x_BYTE *)(x_DWORD_18062C_resolution_x * (a6 / 2) + a5 / 2 + v84 - 1);
	for (*v68 = index[(uint8_t)*v68]; v67; *v68 = x_BYTE_F6EE0_tablesx[0x4000+256 * v93 + v71])
	{
		v81 -= x_DWORD_18062C_resolution_x;
		v70 += x_DWORD_18062C_resolution_x;
		v77++;
		*v81 = x_BYTE_F6EE0_tablesx[0x4000+256 * v93 + (uint8_t)*v81];
		*v77 = x_BYTE_F6EE0_tablesx[0x4000+256 * v93 + (uint8_t)*v77];
		*v70 = x_BYTE_F6EE0_tablesx[0x4000+256 * v93 + (uint8_t)*v70];
		v71 = (uint8_t)*(v68-- - 1);
		v67--;
	}
	//return result;
}

//----- (000627F0) --------------------------------------------------------
void sub_627F0_draw_minimap_entites_a(int a1, int a2, int16_t a3, int16_t a4, int a5, int a6, int16_t a7, int a8)//2437f0
{//
	int v8; // edx
	int v9; // esi
	int v10; // ebx
	uint8_t v11; // al
	char v12; // al
	int64_t v13; // rtt
	int v14; // ebx
	int v15; // edx
	int v16; // ebx
	int16_t v17; // dx
	//int v18; // ebx
	int v19; // edx
	int v20; // eax
	int v21; // esi
	int v22; // edx
	type_str_0x6E8E* v23x; // eax
	int v24; // edi
	int v25; // edx
	int v26; // eax
	int v27; // ebx
	int v28; // ST48_4
	int v29; // edx
	int v30; // eax
	int v31; // ebx
	char *v32; // edx
	char *v33; // ST44_4
	char v34; // bl
	type_str_0x6E8E* iy; // ebx
	uint8_t v36; // al
	uint8_t v37; // ah
	uint8_t v38; // ah
	uint8_t v39; // ah
	uint16_t v40; // si
	type_str_0x6E8E* v41x; // eax
	char v42; // al
	char v43; // al
	type_str_0x6E8E* v44x; // eax
	uint16_t v45; // si
	type_str_0x6E8E* v46x; // eax
	bool v47; // zf
	uint8_t v48; // ah
	uint8_t v49; // ah
	int v50; // eax
	uint8_t v51; // al
	char v52; // al
	char v53; // al
	char v54; // ah
	uint8_t v55; // ah
	int16_t v56; // ax
	int v57; // edx
	int v58; // ecx
	int v59; // esi
	int v60; // edi
	char *v61; // ecx
	char *v62; // edx
	char *v63; // edx
	char *v64; // ecx
	int v65; // eax
	type_str_0x6E8E* v66x; // ebx
	int v67; // edx
	int v68; // eax
	int v69; // esi
	int v70; // edi
	uint8_t *v71; // ST2C_4
	uint8_t *v72; // ST28_4
	uint8_t v73; // al
	int v74; // eax
	char *v75; // esi
	char *v76; // ebx
	char *index; // eax
	char *v78; // edx
	char v79; // cl
	char v80; // cl
	char v81; // cl
	char v82; // cl
	char *v83; // [esp+0h] [ebp-1Eh]
	char *v84; // [esp+4h] [ebp-1Ah]
	int v85; // [esp+8h] [ebp-16h]
	int v86; // [esp+Ch] [ebp-12h]
	int v87; // [esp+10h] [ebp-Eh]
	char *v88; // [esp+14h] [ebp-Ah]
	int v89; // [esp+20h] [ebp+2h]
	type_str_0x6E8E* v90x; // [esp+24h] [ebp+6h]
	signed int v91; // [esp+28h] [ebp+Ah]
	signed int v92; // [esp+2Ch] [ebp+Eh]
	int v93; // [esp+30h] [ebp+12h]
	int v94; // [esp+38h] [ebp+1Ah]
	char *v95; // [esp+3Ch] [ebp+1Eh]
	//int v96; // [esp+40h] [ebp+22h]
	int v97; // [esp+44h] [ebp+26h]
	int v98; // [esp+48h] [ebp+2Ah]
	int v99; // [esp+4Ch] [ebp+2Eh]
	int v100; // [esp+50h] [ebp+32h]
	char *v101; // [esp+54h] [ebp+36h]
	type_str_0x6E8E* v102x; // [esp+58h] [ebp+3Ah]
	uint16_t j; // [esp+5Ch] [ebp+3Eh]
	uint16_t v104; // [esp+60h] [ebp+42h]
	char v105; // [esp+68h] [ebp+4Ah]
	uint8_t v106; // [esp+6Ch] [ebp+4Eh]
	char v107; // [esp+70h] [ebp+52h]
	char v108; // [esp+74h] [ebp+56h]
	char v109; // [esp+78h] [ebp+5Ah]
	char v110; // [esp+7Ch] [ebp+5Eh]

	v8 = a1;
	v9 = a2;
	v10 = a8;
	v11 = D41A0_BYTESTR_0.str_2FECE.byte_level_type;
	v93 = 0;
	if (v11 < 1u)
	{
		if (!v11)
		{
			// FIXME: types
			// v109 = (uint8_t)*xadataclrd0dat.var28_begin_buffer;
			// FIXME: types
			// v106 = (uint8_t)*xadataclrd0dat.var28_begin_buffer;
			v108 = 28;
			v107 = -24;
		}
		goto LABEL_10;
	}
	if (v11 <= 1u)
	{
		v109 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
		v106 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
		v12 = -124;
		v107 = -24;
	}
	else
	{
		if (v11 != 2)
			goto LABEL_10;
		v109 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
		v106 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
		v107 = 28;
		v12 = (*xadataclrd0dat.var28_begin_buffer)[0xf0];
	}
	v108 = v12;
LABEL_10:
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		v8 = a1 >> 1;
		v9 = a2 >> 1;
		v10 = 2 * a8;
		a5 >>= 1;
		a6 >>= 1;
	}
	// FIXME: types
	// v99 = v9 * x_DWORD_18062C_resolution_x + (int)x_DWORD_180628b_screen_buffer + v8;
	// FIXME: types
	// v100 = (int)(v9 * x_DWORD_18062C_resolution_x + x_DWORD_E9C3C + v8);
	LODWORD(v13) = 0x10000;
	HIDWORD(v13) = 0x10000 >> 31;
	v14 = v13 / v10;
	v98 = a5 / 2;
	v15 = v14 * x_DWORD_DB750[a7 & 0x7FF];
	v16 = (x_DWORD)x_DWORD_DB750[0x200+a7 & 0x7FF] * v14;
	v85 = a6 / 2;
	v86 = -v15 >> 16;
	sub_6FC50(x_BYTE_D419D_fonttype);
	v87 = v16 >> 16;
	v102x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	v17 = v102x->dword_0xA4_164x->str_611.array_0x333_819x.word[0xc];
	if (v17)
		v93 = x_DWORD_EA3E4[v17]->word_0x2E_46;
	//v18 = v102x->dword_0xA4_164;
	if (v102x->dword_0xA4_164x->word_0x3A_58)
	{
		v19 = (int16_t)(v102x->array_0x4C_76.x - a3);
		v20 = (int16_t)(v102x->array_0x4C_76.y - a4);
		v21 = v98 + ((v19 * v87 - v20 * v86) >> 16);
		v22 = v87 * v20 + v86 * v19;
		v23x = x_DWORD_EA3E4[v102x->dword_0xA4_164x->word_0x3A_58];
		v24 = (v22 >> 16) + v85;
		v25 = (int16_t)(v23x->array_0x4C_76.x - a3);
		v26 = (int16_t)(v23x->array_0x4C_76.y - a4);
		v27 = v98 + ((v25 * v87 - v26 * v86) >> 16);
		v28 = ((v86 * v25 + v87 * v26) >> 16) + v85;
		v29 = v98 + ((v25 * v87 - v26 * v86) >> 16) - v21;
		v91 = sub_7277A_radix_3d(v29 * v29 + (v28 - v24) * (v28 - v24));
		v89 = (uint16_t)sub_72633_maybe_tan(v27 - v21, v28 - v24);
		v30 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248 & 3;
		while (1)
		{
			v30 += 4;
			if (v30 > v91)
				break;
			v31 = v21 + (v30 * x_DWORD_DB750[v89] >> 16);
			v94 = v24 + (-v30 * (signed int)x_DWORD_DB750[0x200+v89] >> 16);
			if (v31 < 0 || v31 >= a5 || v94 < 0 || v94 >= a6 || v31 < x_WORD_F4960[1 + 2 * v94] || v31 >= x_WORD_F4960[2 * v94])
				break;
			v32 = (char *)(x_DWORD_18062C_resolution_x * v94 + v31 + v99);
			v33 = (char *)(v100 + v31 + x_DWORD_18062C_resolution_x * v94);
			v34 = x_BYTE_F6EE0_tablesx[0x4000+256 * (uint8_t)*v32 + (uint8_t)(*xadataclrd0dat.var28_begin_buffer)[0xfff]];
			*v33 = v34;
			*v32 = v34;
		}
	}
	for (iy = &D41A0_BYTESTR_0.struct_0x6E8E[1]; iy <= &D41A0_BYTESTR_0.struct_0x6E8E[0x3e8 - 1]; iy++)
	{
		v36 = 0;
		v105 = 0;
		v92 = 1;
		v37 = iy->byte_0x3F_63 - 2;
		v104 = 0;
		if (v37 <= 0xDu)
		{
			switch (v37)
			{
			case 0u:
				v48 = iy->byte_0x40_64;
				if (v48 > 3u)
				{
				LABEL_74:
					v110 = v108;
					goto LABEL_118;
				}
				switch (v48)
				{
				case 0u:
					if (iy->byte_0x45_69 != 2)
						goto LABEL_74;
					v110 = v108;
					v36 = 0;
					break;
				case 1u:
					v36 = 1;
					if (x_D41A0_BYTEARRAY_4_struct.byteindex_121[2])
						v110 = (*xadataclrd0dat.var28_begin_buffer)[0x88];
					else
						v105 = 1;
					v104 = 27;
					break;
				case 2u:
					v110 = v108;
					v104 = 22;
					goto LABEL_118;
				case 3u:
					goto LABEL_119;
				}
				break;
			case 1u:
				v55 = iy->byte_0x40_64;
				if (v55 >= 2u)
				{
					if (v55 <= 2u)
					{
						LOBYTE(v56) = iy->word_0x1A_26 != v102x->word_0x1A_26;
						HIBYTE(v56) = 0;
						v104 = v56 + 24;
						v36 = x_DWORD_EA3E4[iy->word_0x1A_26]->dword_0xA4_164x->word_0x38_56 + 58;
					}
					else if (v55 == 3)
					{
						if (iy->word_0x1A_26 == v102x->word_0x1A_26 || v93)
							v36 = x_DWORD_EA3E4[iy->word_0x1A_26]->dword_0xA4_164x->word_0x38_56 + 66;
						if (iy->word_0x1A_26 == v102x->word_0x1A_26)
						{
							v104 = 23;
						}
						else if (v93)
						{
							v104 = 26;
						}
					}
				}
				break;
			case 2u:
			case 4u:
			case 5u:
			case 6u:
			case 0xBu:
				break;
			case 3u:
				v49 = iy->byte_0x45_69;
				if (v49 >= 0xB4u && (v49 <= 0xB4u || v49 >= 0xE8u && v49 <= 0xEAu) || iy->struct_byte_0xc_12_15.byte[0] & 1)
					break;
				v50 = iy->word_0x1A_26;
				if (v50 != iy - D41A0_BYTESTR_0.struct_0x6E8E)
				{
					v52 = x_BYTE_E88E0x[1+3 * sub_61790(x_DWORD_EA3E4[v50]->dword_0xA4_164x->word_0x38_56)];
					goto LABEL_98;
				}
				v51 = iy->byte_0x40_64;
				if (v51 >= 0xCu)
				{
					if (v51 <= 0xEu)
					{
						v52 = (*xadataclrd0dat.var28_begin_buffer)[0x0f];
					LABEL_98:
						v110 = v52;
						goto LABEL_118;
					}
					if (v51 == 22)
					{
						if (iy->word_0x94_148 != v102x->word_0x1A_26)
							v104 = 18;
						v52 = v109;
						goto LABEL_98;
					}
				}
				v110 = v109;
				v53 = 1;
				v54 = iy->byte_0x49_73;
				if ((v54 == 14 || v54 == 13) && iy->word_0x28_40 == v102x->word_0x1A_26)
					v53 = 0;
				if (v53)
					v104 = 19;
				goto LABEL_118;
			case 7u:
				goto LABEL_57;
			case 8u:
				v39 = iy->byte_0x40_64;
				if (v39 < 0x27u)
				{
					if (v39 >= 0x12u)
					{
						if (v39 <= 0x12u)
							break;
						if (v39 == 34)
							v92 = 2;
					}
					goto LABEL_57;
				}
				if (v39 <= 0x27u)
					goto LABEL_169;
				if (v39 < 0x39u)
				{
					if (v39 == 45)
					{
						v45 = iy->word_0x94_148;
						if (v45 && (v46x = x_DWORD_EA3E4[v45], v46x->byte_0x3F_63 == 3))
						{
							v47 = x_D41A0_BYTEARRAY_4_struct.byteindex_121[3] == 0;
							sub_61790(v46x->dword_0xA4_164x->word_0x38_56);
						}
						else
						{
							if (!(x_WORD_D93C0_bldgprmbuffer[2+4 * iy->byte_0x46_70] & 8))
								v104 = 21;
							v105 = 1;
						}
					}
				LABEL_57:
					v44x = x_DWORD_EA3E4[iy->word_0x1A_26];
					if (v44x->byte_0x3F_63 == 3)
						v43 = x_BYTE_E88E0x[3 * sub_61790(v44x->dword_0xA4_164x->word_0x38_56)];
					else
						v43 = (*xadataclrd0dat.var28_begin_buffer)[0xf0f];
				LABEL_117:
					v110 = v43;
					goto LABEL_118;
				}
				if (v39 <= 0x39u)
				{
				LABEL_169:
					v40 = iy->word_0x94_148;
					if (v40 && (v41x = x_DWORD_EA3E4[v40], v41x->byte_0x3F_63 == 3))
					{
						if (x_D41A0_BYTEARRAY_4_struct.byteindex_121[3])
							v42 = x_BYTE_E88E0x[3 * sub_61790(v41x->dword_0xA4_164x->word_0x38_56)];
						else
							v42 = x_BYTE_E88E0x[1+3 * sub_61790(v41x->dword_0xA4_164x->word_0x38_56)];
						v110 = v42;
					}
					else
					{
						v110 = v107;
						v104 = 18;
					}
				LABEL_118:
					v36 = 1;
				}
				else
				{
					if (v39 < 0x4Eu)
						goto LABEL_57;
					if (v39 <= 0x4Eu)
					{
						if (iy->word_0x32_50 != D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240)
							break;
						v43 = x_BYTE_E88E0x[3 * sub_61790(v102x->dword_0xA4_164x->word_0x38_56)
							+ x_D41A0_BYTEARRAY_4_struct.byteindex_121[3]];
						goto LABEL_117;
					}
					if (v39 < 0x56u || v39 > 0x57u)
						goto LABEL_57;
				}
				break;
			case 9u:
				v38 = iy->byte_0x40_64;
				if (v38 <= 0x2Cu)
				{
					switch (v38)
					{
					case 0u:
					case 1u:
					case 2u:
					case 3u:
					case 4u:
					case 5u:
					case 6u:
					case 7u:
					case 8u:
					case 9u:
					case 0xAu:
					case 0xBu:
					case 0xDu:
					case 0xEu:
					case 0xFu:
					case 0x10u:
					case 0x11u:
					case 0x12u:
					case 0x13u:
					case 0x14u:
					case 0x15u:
					case 0x16u:
					case 0x17u:
					case 0x18u:
					case 0x19u:
					case 0x1Au:
					case 0x1Bu:
					case 0x1Cu:
					case 0x1Du:
					case 0x1Eu:
					case 0x20u:
					case 0x21u:
					case 0x22u:
					case 0x23u:
					case 0x24u:
					case 0x25u:
					case 0x26u:
					case 0x27u:
					case 0x28u:
					case 0x29u:
					case 0x2Au:
					case 0x2Bu:
					case 0x2Cu:
						goto LABEL_119;
					case 0xCu:
						v36 = 83;
						v104 = 83;
						break;
					case 0x1Fu:
						v36 = 84;
						v104 = 83;
						break;
					}
				}
				break;
			case 0xAu:
			case 0xDu:
				if (iy->struct_byte_0xc_12_15.byte[0] & 1)
					break;
				v43 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
				v104 = 20;
				goto LABEL_117;
			case 0xCu:
				if (iy->byte_0x40_64 != 5)
					break;
				if (x_D41A0_BYTEARRAY_4_struct.byteindex_121[3])
					v43 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
				else
					v43 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
				goto LABEL_117;
			}
		}
	LABEL_119:
		if (v36)
		{
			v57 = (int16_t)(iy->array_0x4C_76.x - a3);
			v58 = (int16_t)(iy->array_0x4C_76.y - a4);
			v59 = v98 + ((v57 * v87 - v58 * v86) >> 16);
			if (v59 >= 0 && v59 < a5)
			{
				v60 = ((v87 * v58 + v86 * v57) >> 16) + v85;
				if (v60 >= 0 && v60 < a6 && v59 >= x_WORD_F4960[1 + 2 * v60] && v59 < x_WORD_F4960[2 * v60])
				{
					v61 = (char *)(v60 * x_DWORD_18062C_resolution_x + v59 + v99);
					v62 = (char *)(v60 * x_DWORD_18062C_resolution_x + v59 + v100);
					if (!v105)
					{
						if (v36 <= 1u)
						{
							*v62 = v110;
							*v61 = v110;
							if (v92 > 1)
							{
								v62[1] = v110;
								v61[1] = v110;
								v63 = &v62[x_DWORD_18062C_resolution_x];
								*v63 = v110;
								v64 = &v61[x_DWORD_18062C_resolution_x];
								*v64 = v110;
								v63[1] = v110;
								v64[1] = v110;
							}
						}
						else if (x_WORD_180660_VGA_type_resolution == 1)
						{
							if (v36 < 0x42u || v36 >= 0x4Au)
							{
								if (v36 < 0x3Au || v36 >= 0x42u)
								{
									/*if ( v36 == 83 || v36 == 84 )
									  sub_2BB40_draw_bitmap(
										2 * v59 - *(uint8_t *)(6 * v36 + **filearray_2aa18c[6] + 4) / 2,
										2 * v60 - *(uint8_t *)(6 * v36 + **filearray_2aa18c[6] + 5) / 2,
										  (Bit8u**)(6 * v36 + **filearray_2aa18c[6]));*/
									if (v36 == 83 || v36 == 84)
										sub_2BB40_draw_bitmap(
											2 * v59 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36].width / 2,
											2 * v60 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36].height / 2,
											(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36]);
								}
								else
								{
									//sub_2BB40_draw_bitmap(2 * v59, 2 * v60 - *(uint8_t *)(**filearray_2aa18c[6] + 6 * v36 + 5), (Bit8u**)(**filearray_2aa18c[6] + 6 * v36));
									sub_2BB40_draw_bitmap(2 * v59, 2 * v60 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36].height, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36]);
								}
							}
							else
							{
								/*sub_2BB40_draw_bitmap(
								  2 * v59 - *(uint8_t *)(6 * v36 + **filearray_2aa18c[6] + 4) / 2,
								  2 * v60 - *(uint8_t *)(6 * v36 + **filearray_2aa18c[6] + 5),
									(Bit8u**)(6 * v36 + **filearray_2aa18c[6]));*/
								sub_2BB40_draw_bitmap(
									2 * v59 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36].width / 2,
									2 * v60 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36].height,
									(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36]);
							}
						}
						else if (v36 >= 0x3Cu)
						{
							/*sub_2BB40_draw_bitmap(
							  v59 - *(uint8_t *)(6 * v36 + **filearray_2aa18c[6] + 4) / 2,
							  v60 - *(uint8_t *)(6 * v36 + **filearray_2aa18c[6] + 5),
								(Bit8u**)(6 * v36 + **filearray_2aa18c[6]));*/
							sub_2BB40_draw_bitmap(
								v59 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36].width / 2,
								v60 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36].height,
								(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36]);
						}
						else
						{
							//sub_2BB40_draw_bitmap(v59, v60 - *(uint8_t *)(6 * v36 + **filearray_2aa18c[6] + 5), (Bit8u**)(6 * v36 + **filearray_2aa18c[6]));
							sub_2BB40_draw_bitmap(v59, v60 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36].height, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[v36]);
						}
					}
					if (v104)
						sub_885E0(iy, (int16_t)v59, (int16_t)v60, v104);
				}
			}
		}
	}
	if (v93)
	{
		v90x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
		for (j = 0; j < D41A0_BYTESTR_0.word_0xe; j++)
		{
			if (j != D41A0_BYTESTR_0.word_0xc)
			{
				//v96 = 2124 * j;
				v65 = D41A0_BYTESTR_0.array_0x2BDE[j].word_0x00a_2BE4_11240;
				v66x = x_DWORD_EA3E4[v65];
				if (v66x->dword_0x8 >= 0)
				{
					if (sub_63570(v90x, x_DWORD_EA3E4[v65]))
					{
						v67 = (int16_t)(v66x->array_0x4C_76.x - a3);
						v68 = (int16_t)(v66x->array_0x4C_76.y - a4);
						v69 = v98 + ((v67 * v87 - v68 * v86) >> 16);
						if (v69 >= 0 && v69 < a5)
						{
							v70 = ((v86 * v67 + v87 * v68) >> 16) + v85;
							if (v70 >= 0 && v70 < a6 && v69 >= x_WORD_F4960[1 + 2 * v70] && v69 < x_WORD_F4960[2 * v70])
							{
								v71 = (uint8_t *)(v70 * x_DWORD_18062C_resolution_x + v69 + v99);
								v72 = (uint8_t *)(v70 * x_DWORD_18062C_resolution_x + v69 + v100);
								v73 = x_BYTE_E88E0x[1+3 * sub_61790(v66x->dword_0xA4_164x->word_0x38_56)];
								*v72 = v73;
								*v71 = v73;
								if (x_WORD_180660_VGA_type_resolution == 1)
									sub_2BC10_draw_text(D41A0_BYTESTR_0.array_0x2BDE[j].array_0x39f_2BFA_12157, 2 * v69 + 4, 2 * v70, v73);//wizard name
								else
									sub_2BC10_draw_text(D41A0_BYTESTR_0.array_0x2BDE[j].array_0x39f_2BFA_12157, v69 + 4, v70, v73);//wizard name
							}
						}
					}
				}
			}
		}
	}
	v97 = a5 / 12;
	v74 = x_DWORD_18062C_resolution_x * (a6 / 2);
	v75 = (char *)(v100 + a5 / 2 + v74 - 1);
	v76 = (char *)(v74 + a5 / 2 + v99 - 1);
	index = (char*)&x_BYTE_F6EE0_tablesx[0x4000+256 * v106];
	v88 = v76;
	v101 = v76;
	*v76 = index[(uint8_t)*v76];
	v78 = v76;
	v83 = v75;
	v84 = v75;
	v95 = v75;
	for (*v75 = index[(uint8_t)*v76]; v97; --v97)
	{
		v101++;
		v88 += x_DWORD_18062C_resolution_x;
		v78 -= x_DWORD_18062C_resolution_x;
		v95 -= x_DWORD_18062C_resolution_x;
		v84++;
		v83 += x_DWORD_18062C_resolution_x;
		v79 = x_BYTE_F6EE0_tablesx[0x4000+256 * v106 + (uint8_t)*v78];
		*v78 = v79;
		*v95 = v79;
		v80 = x_BYTE_F6EE0_tablesx[0x4000+256 * v106 + (uint8_t)*v101];
		*v101 = v80;
		*v84 = v80;
		v81 = x_BYTE_F6EE0_tablesx[0x4000+256 * v106 + (uint8_t)*v88];
		*v88 = v81;
		*v83 = v81;
		v82 = x_BYTE_F6EE0_tablesx[0x4000+256 * v106 + (uint8_t)*(v76 - 1)];
		*(v76 - 1) = v82;
		*(v75 - 1) = v82;
		v76--;
		v75--;
	}
	//return result;
}

//----- (00063570) --------------------------------------------------------
char sub_63570(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//244570
{
	type_str_0x6E8E* v2x; // ecx
	char v3; // ah
	type_str_0x6E8E* v4x; // ebx
	char v5; // dl
	uint8_t v6; // al

	v2x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->str_611.array_0x333_819x.word[0xc]];
	v3 = 1;
	v4x = x_DWORD_EA3E4[a2x->dword_0xA4_164x->str_611.array_0x333_819x.word[4]];
	v5 = 0;
	if (v4x > x_DWORD_EA3E4[0] && v4x->word_0x2E_46)
		v5 = 1;
	if (v2x > x_DWORD_EA3E4[0])
	{
		v6 = v2x->byte_0x46_70;
		if (v6 < 1u)
		{
			if (v6)
				return v3;
			if (a2x->dword_0xA4_164x->byte_0x1BF_447)
				return 0;
		}
		else if (v6 > 1u)
		{
			return v3;
		}
		if (v5)
			return 0;
	}
	return v3;
}

//----- (00063600) --------------------------------------------------------
void sub_63600_draw_minimap(int a1, int a2, int a3, int a4, int a5, int a6, int16_t a7, int a8, int a9, int a10)//244600
{
	//int result; // eax

	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190 == 1)
		/*result = */sub_63670_draw_minimap_a(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
	else
		/*result = */sub_63C90_draw_minimap_b(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
	//return result;
}

//----- (00063670) --------------------------------------------------------
void sub_63670_draw_minimap_a(int a1, int a2, int a3, int a4, int a5, int a6, int16_t a7, int a8, int a9, int a10)//244670
{
	int v10; // eax
	int v11; // esi
	int v12; // edi
	int v13; // ecx
	bool v14; // dl
	int16_t *v15; // ebx
	int v16; // edx
	int16_t *v17; // esi
	int v18; // ebx
	int16_t v19; // ax
	int16_t *v20; // edx
	int16_t v21; // ax
	int v22; // edx
	int v23; // ebx
	int v24; // esi
	int v25; // eax
	int v26; // eax
	int index; // eax
	int v28; // ebx
	int v29; // ecx
	char *v30; // edi
	int v31; // esi
	int v32; // eax
	int v33; // edx
	char v34; // al
	int v35; // ecx
	int v36; // ebx
	x_BYTE *v37; // edi
	int v38; // ecx
	int v39; // esi
	int v40; // eax
	int v41; // edx
	int v42; // ebx
	char *v43; // edi
	int v44; // ecx
	int v45; // esi
	int v46; // eax
	int v47; // edx
	char v48; // al
	int v49; // ecx
	int v50; // ebx
	x_BYTE *v51; // edi
	int v52; // ecx
	int v53; // esi
	int v54; // eax
	int v55; // edx
	int v56; // ebx
	char *v57; // edi
	int v58; // ecx
	int v59; // esi
	int v60; // eax
	int v61; // edx
	char v62; // al
	char *v63; // edi
	int v64; // [esp+0h] [ebp-60h]
	int v65; // [esp+4h] [ebp-5Ch]
	int v66; // [esp+8h] [ebp-58h]
	int v67; // [esp+Ch] [ebp-54h]
	int v68; // [esp+10h] [ebp-50h]
	int v69; // [esp+14h] [ebp-4Ch]
	int v70; // [esp+18h] [ebp-48h]
	int v71; // [esp+1Ch] [ebp-44h]
	int l; // [esp+20h] [ebp-40h]
	int v73; // [esp+24h] [ebp-3Ch]
	int i; // [esp+28h] [ebp-38h]
	int k; // [esp+2Ch] [ebp-34h]
	int m; // [esp+30h] [ebp-30h]
	int j; // [esp+34h] [ebp-2Ch]
	int v78; // [esp+38h] [ebp-28h]
	int16_t *v79; // [esp+3Ch] [ebp-24h]
	int v80; // [esp+40h] [ebp-20h]
	int v81; // [esp+44h] [ebp-1Ch]
	int v82; // [esp+48h] [ebp-18h]
	int v83; // [esp+4Ch] [ebp-14h]
	int v84; // [esp+50h] [ebp-10h]
	int v85; // [esp+54h] [ebp-Ch]
	int16_t *v86; // [esp+58h] [ebp-8h]
	bool v87; // [esp+5Ch] [ebp-4h]

	v10 = a1;
	v11 = a2;
	v12 = a5;
	v13 = a6;
	v14 = !D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.transparency_0x2198 && D41A0_BYTESTR_0.str_2FECE.byte_level_type != 2;
	v87 = v14;
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		v10 = a1 >> 1;
		v11 = a2 >> 1;
		v12 = a5 >> 1;
		v13 = a6 >> 1;
		a8 *= 2;
	}
	// FIXME: types
	// v70 = v11 * x_DWORD_18062C_resolution_x + (int)x_DWORD_180628b_screen_buffer + v10;
	// FIXME: types
	// v71 = (int)(v11 * x_DWORD_18062C_resolution_x + x_DWORD_E9C3C + v10);
	if (a10)
	{
		v15 = x_WORD_F4960;
		v16 = v13;
		while (v16)
		{
			v15 += 2;
			*(v15 - 1) = 0;
			v16--;
			*(v15 - 2) = v12;
		}
	}
	else
	{
		v78 = v13 / 2;
		v17 = &x_WORD_F4960[2 * (v13 / 2)];
		v79 = v17 - 2;
		v73 = 0;
		v68 = v13 >> 1;
		v18 = v12 >> 1;
		v69 = 0x1000000 / (v13 >> 1);
		while (v78)
		{
			v65 = v18 * (uint8_t)x_BYTE_F6EE0_tablesx[0x14300+ v73 >> 16] >> 8;
			v19 = v18 + v65;
			v20 = v79;
			*v17 = v18 + v65;
			*v20 = v19;
			v21 = v18 - v65;
			// FIXME: types
			// v22 = (int)v79;
			v17[1] = v18 - v65;
			*(x_WORD *)(v22 + 2) = v21;
			v79 = (int16_t *)(v22 - 4);
			v17 += 2;
			v73 += v69;
			v78--;
		}
	}
	v23 = a7 & 0x7FF;
	v24 = v13 * (a8 * x_DWORD_DB750[v23] >> 16);
	v25 = a8 * (signed int)x_DWORD_DB750[0x200+v23] >> 16;
	v80 = a8 * x_DWORD_DB750[v23] >> 16;
	v81 = v25;
	v67 = v24 / v12;
	v26 = v13 * v25;
	v66 = v26 / v12;
	v85 = a3 - (v12 * (v26 / v12) - v24) / 2;
	v86 = x_WORD_F4960;
	v83 = a4 - (v26 + v12 * (v24 / v12)) / 2;
	v84 = v70;
	index = v71;
	v82 = v71;
	if (x_BYTE_D41B6)
	{
		if (a10)
		{
			for (i = v13; i; i--)
			{
				v33 = v86[1];
				v28 = v85 + v33 * v66;
				v29 = v83 + v33 * v67;
				v30 = (char *)(v33 + v84);
				v64 = v33 + v82;
				v31 = *v86 - v86[1];
				v32 = 0;
				HIWORD(v33) = 0;
				do
				{
					LOBYTE(v33) = BYTE1(v28);
					BYTE1(v33) = BYTE1(v29);
					v34 = 0;
					if (!(x_BYTE_13B4E0_angle[v33] & 8))
					{
						LOBYTE(v32) = x_BYTE_10B4E0_terraintype[v33];
						BYTE1(v33) = x_BYTE_12B4E0_shading[v33];
						LOBYTE(v33) = x_BYTE_F6EE0_tablesx[0x14000+v32];
						v34 = x_BYTE_F6EE0_tablesx[v33];
					}
					*v30++ = v34;
					LOWORD(v28) = v66 + v28;
					LOWORD(v29) = v67 + v29;
					v31--;
				} while (v31);
				v84 += x_DWORD_18062C_resolution_x;
				v82 += x_DWORD_18062C_resolution_x;
				v86 += 2;
				v85 -= v80;
				index = i - 1;
				v83 += v81;
			}
		}
		else if (v87)
		{
			for (j = v13; j; j--)
			{
				v35 = v86[1];
				v36 = v85 + v35 * v66;
				v37 = (x_BYTE *)(v35 + v84);
				v64 = v35 + v82;
				v38 = v83 + v35 * v67;
				v39 = *v86 - v86[1];
				v40 = 0;
				HIWORD(v41) = 0;
				do
				{
					LOBYTE(v41) = BYTE1(v36);
					BYTE1(v41) = BYTE1(v38);
					if (!(x_BYTE_13B4E0_angle[v41] & 8))
					{
						LOBYTE(v40) = x_BYTE_10B4E0_terraintype[v41];
						BYTE1(v41) = x_BYTE_12B4E0_shading[v41];
						LOBYTE(v41) = x_BYTE_F6EE0_tablesx[0x14000 + v40];
						LOBYTE(v41) = x_BYTE_F6EE0_tablesx[v41];
						BYTE1(v41) = *v37;
						*v37 = x_BYTE_F6EE0_tablesx[0x4000+v41];
					}
					v37++;
					LOWORD(v36) = v66 + v36;
					LOWORD(v38) = v67 + v38;
					v39--;
				} while (v39);
				v84 += x_DWORD_18062C_resolution_x;
				v82 += x_DWORD_18062C_resolution_x;
				v86 += 2;
				v85 -= v80;
				index = j - 1;
				v83 += v81;
			}
		}
		else
		{
			for (k = v13; k; v83 += v81)
			{
				v47 = v86[1];
				v42 = v85 + v47 * v66;
				v43 = (char *)(v47 + v84);
				v44 = v83 + v47 * v67;
				v64 = v47 + v82;
				v45 = *v86 - v86[1];
				v46 = 0;
				HIWORD(v47) = 0;
				do
				{
					LOBYTE(v47) = BYTE1(v42);
					BYTE1(v47) = BYTE1(v44);
					if (x_BYTE_13B4E0_angle[v47] & 8)
					{
						v48 = 0;
					}
					else
					{
						LOBYTE(v46) = x_BYTE_10B4E0_terraintype[v47];
						BYTE1(v47) = x_BYTE_12B4E0_shading[v47];
						LOBYTE(v47) = x_BYTE_F6EE0_tablesx[0x14000 + v46];
						v48 = x_BYTE_F6EE0_tablesx[v47];
					}
					*v43++ = v48;
					LOWORD(v42) = v66 + v42;
					LOWORD(v44) = v67 + v44;
					v45--;
				} while (v45);
				v84 += x_DWORD_18062C_resolution_x;
				v82 += x_DWORD_18062C_resolution_x;
				v86 += 2;
				index = v81;
				v85 -= v80;
				k--;
			}
		}
	}
	else if (a10)
	{
		for (l = v13; l; l--)
		{
			v49 = v86[1];
			v50 = v85 + v49 * v66;
			v51 = (x_BYTE *)(v49 + v84);
			v64 = v49 + v82;
			v52 = v83 + v49 * v67;
			v53 = *v86 - v86[1];
			v54 = 0;
			HIWORD(v55) = 0;
			do
			{
				LOBYTE(v55) = BYTE1(v50);
				BYTE1(v55) = BYTE1(v52);
				LOBYTE(v54) = x_BYTE_10B4E0_terraintype[v55];
				BYTE1(v55) = x_BYTE_12B4E0_shading[v55];
				LOBYTE(v55) = x_BYTE_F6EE0_tablesx[0x14000 + v54];
				*v51++ = x_BYTE_F6EE0_tablesx[v55];
				v50 += v66;
				v52 += v67;
				--v53;
			} while (v53);
			v84 += x_DWORD_18062C_resolution_x;
			v82 += x_DWORD_18062C_resolution_x;
			v86 += 2;
			v85 -= v80;
			index = l - 1;
			v83 += v81;
		}
	}
	else
	{
		for (m = v13; m; v83 += v81)
		{
			v61 = v86[1];
			v56 = v85 + v61 * v66;
			v57 = (char *)(v61 + v84);
			v58 = v83 + v61 * v67;
			v64 = v61 + v82;
			v59 = *v86 - v86[1];
			v60 = 0;
			HIWORD(v61) = 0;
			do
			{
				LOBYTE(v61) = BYTE1(v56);
				BYTE1(v61) = BYTE1(v58);
				LOBYTE(v60) = x_BYTE_10B4E0_terraintype[v61];
				BYTE1(v61) = x_BYTE_12B4E0_shading[v61];
				LOBYTE(v61) = x_BYTE_F6EE0_tablesx[0x14000 + v60];
				LOBYTE(v61) = x_BYTE_F6EE0_tablesx[v61];
				BYTE1(v61) = *v57;
				v62 = x_BYTE_F6EE0_tablesx[0x4000+v61];
				*v57 = v62;
				// FIXME: types
				// v63 = (char *)x_InterlockedExchange((long*)&v64, (int32_t)(v57 + 1));
				*v63 = v62;
				// FIXME: types
				// v57 = (char *)x_InterlockedExchange((long*)&v64, (int32_t)(v63 + 1));
				v56 += v66;
				v58 += v67;
				v59--;
			} while (v59);
			v84 += x_DWORD_18062C_resolution_x;
			v82 += x_DWORD_18062C_resolution_x;
			v86 += 2;
			index = v81;
			v85 -= v80;
			m--;
		}
	}
	//return result;
}

//----- (00063C90) --------------------------------------------------------
void sub_63C90_draw_minimap_b(int a1, int a2, int a3, int a4, int a5, int a6, int16_t a7, int a8, int a9, int a10)//244c90
{
	int v10; // ebx
	int v11; // edx
	int v12; // edi
	int v13; // ecx
	//bool v14; // al
	int16_t *v15; // ebx
	int v16; // edx
	int16_t *v17; // esi
	int v18; // ebx
	int v19; // ST00_4
	int v20; // ebx
	int v21; // esi
	int v22; // eax
	int v23; // eax
	int v24; // edx
	int index; // eax
	int v26; // ebx
	int v27; // ecx
	char *v28; // edi
	int v29; // esi
	int v30; // eax
	int v31; // edx
	char v32; // al
	int v33; // ebx
	int v34; // ecx
	x_BYTE *v35; // edi
	int v36; // esi
	int v37; // eax
	int v38; // edx
	int v39; // ebx
	int v40; // ecx
	char *v41; // edi
	int v42; // esi
	int v43; // eax
	int v44; // edx
	char v45; // al
	int v46; // ebx
	int v47; // ecx
	x_BYTE *v48; // edi
	int v49; // esi
	int v50; // eax
	int v51; // edx
	int v52; // ebx
	int v53; // ecx
	Bit8u* v54; // edi
	int v55; // esi
	int v56; // eax
	int v57; // edx
	int v58; // [esp+4h] [ebp-50h]
	int v59; // [esp+8h] [ebp-4Ch]
	Bit8u* v60; // [esp+14h] [ebp-40h]
	int m; // [esp+18h] [ebp-3Ch]
	int l; // [esp+1Ch] [ebp-38h]
	int k; // [esp+20h] [ebp-34h]
	int v64; // [esp+24h] [ebp-30h]
	int i; // [esp+28h] [ebp-2Ch]
	int j; // [esp+2Ch] [ebp-28h]
	int v67; // [esp+30h] [ebp-24h]
	int16_t *v68; // [esp+34h] [ebp-20h]
	int v69; // [esp+38h] [ebp-1Ch]
	int v70; // [esp+3Ch] [ebp-18h]
	Bit8u* v71; // [esp+40h] [ebp-14h]
	int v72; // [esp+44h] [ebp-10h]
	int v73; // [esp+48h] [ebp-Ch]
	int16_t *v74; // [esp+4Ch] [ebp-8h]
	//bool v75; // [esp+50h] [ebp-4h]

	v10 = a1;
	v11 = a2;
	v12 = a5;
	v13 = a6;
	//v14 = !x_D41A0_BYTEARRAY_0[8600] && x_D41A0_BYTEARRAY_0[196308] != 2;
	//v75 = !x_D41A0_BYTEARRAY_0[8600] && x_D41A0_BYTEARRAY_0[196308] != 2;
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		v10 = a1 >> 1;
		v11 = a2 >> 1;
		v12 = a5 >> 1;
		v13 = a6 >> 1;
		a8 *= 2;
	}
	v60 = &x_DWORD_180628b_screen_buffer[x_DWORD_18062C_resolution_x * v11 + v10];
	if (a10)
	{
		v15 = x_WORD_F4960;
		v16 = v13;
		while (v16)
		{
			v15 += 2;
			*(v15 - 1) = 0;
			v16--;
			*(v15 - 2) = v12;
		}
	}
	else
	{
		v67 = v13 / 2;//adress 244d1b
		v17 = &x_WORD_F4960[2 * (v13 / 2)];
		v68 = v17 - 2;
		v64 = 0;
		v18 = v12 >> 1;
		while (v67)
		{
			v19 = v18 * x_BYTE_F6EE0_tablesx[0x14300+(v64 >> 16)] >> 8;
			v17[0] = v18 + v19;
			v68[0] = v18 + v19;
			v17[1] = v18 - v19;
			v68[1] = v18 - v19;
			v68 -= 2;
			v17 += 2;
			v64 += 0x1000000 / (v13 >> 1);
			v67--;
		}
	}
	v20 = a7 & 0x7FF;
	v21 = v13 * (a8 * x_DWORD_DB750[v20] >> 16);
	v22 = a8 * (signed int)x_DWORD_DB750[0x200+v20] >> 16;
	v70 = a8 * x_DWORD_DB750[v20] >> 16;
	v69 = v22;
	v59 = v21 / v12;
	v23 = v13 * v22;
	v58 = v23 / v12;
	v72 = a3 - (v12 * (v23 / v12) - v21) / 2;
	v74 = x_WORD_F4960;
	v24 = a4 - (v23 + v12 * (v21 / v12)) / 2;
	// FIXME: types
	// index = (int)v60;
	v73 = v24;
	v71 = v60;
	if (x_BYTE_D41B6)//adress 244e53
	{
		if (a10)
		{
			for (i = v13; i; v73 += v69)
			{
				v31 = v74[1];
				v26 = v72 + v31 * v58;
				v27 = v73 + v31 * v59;
				v28 = (char *)(v31 + v71);
				v29 = *v74 - v31;
				v30 = 0;
				HIWORD(v31) = 0;
				do
				{
					LOBYTE(v31) = HIBYTE(v26);
					HIBYTE(v31) = HIBYTE(v27);
					v32 = 0;
					if (!(x_BYTE_13B4E0_angle[v31] & 8))
					{
						LOBYTE(v30) = x_BYTE_10B4E0_terraintype[v31];
						HIBYTE(v31) = x_BYTE_12B4E0_shading[v31];
						LOBYTE(v31) = x_BYTE_F6EE0_tablesx[0x14000 + v30];
						v32 = x_BYTE_F6EE0_tablesx[v31];
					}
					*v28++ = v32;
					LOWORD(v26) = v58 + v26;
					LOWORD(v27) = v59 + v27;
					v29--;
				} while (v29);
				v71 += x_DWORD_18062C_resolution_x;
				v74 += 2;
				index = v69;
				i--;
				v72 -= v70;
			}
		}
		else if (!D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.transparency_0x2198 && D41A0_BYTESTR_0.str_2FECE.byte_level_type != 2)
		{
			for (j = v13; j; v73 += v69)
			{
				v38 = v74[1];
				v33 = v72 + v38 * v58;
				v34 = v73 + v38 * v59;
				v35 = (x_BYTE *)(v38 + v71);
				v36 = *v74 - v38;
				v37 = 0;
				HIWORD(v38) = 0;
				do
				{
					LOBYTE(v38) = BYTE1(v33);
					BYTE1(v38) = BYTE1(v34);
					if (!(x_BYTE_13B4E0_angle[v38] & 8))
					{
						LOBYTE(v37) = x_BYTE_10B4E0_terraintype[v38];
						BYTE1(v38) = x_BYTE_12B4E0_shading[v38];
						LOBYTE(v38) = x_BYTE_F6EE0_tablesx[0x14000 + v37];
						LOBYTE(v38) = x_BYTE_F6EE0_tablesx[v38];
						BYTE1(v38) = *v35;
						*v35 = x_BYTE_F6EE0_tablesx[0x4000+v38];
					}
					v35++;
					LOWORD(v33) = v58 + v33;
					LOWORD(v34) = v59 + v34;
					v36--;
				} while (v36);
				v71 += x_DWORD_18062C_resolution_x;
				v74 += 2;
				index = v69;
				j--;
				v72 -= v70;
			}
		}
		else
		{
			for (k = v13; k; v73 += v69)
			{
				v44 = v74[1];
				v39 = v72 + v44 * v58;
				v40 = v73 + v44 * v59;
				v41 = (char *)(v44 + v71);
				v42 = *v74 - v44;
				v43 = 0;
				HIWORD(v44) = 0;
				do
				{
					LOBYTE(v44) = HIBYTE(v39);
					HIBYTE(v44) = HIBYTE(v40);
					if (x_BYTE_13B4E0_angle[v44] & 8)
					{
						v45 = 0;
					}
					else
					{
						LOBYTE(v43) = x_BYTE_10B4E0_terraintype[v44];
						HIBYTE(v44) = x_BYTE_12B4E0_shading[v44];
						LOBYTE(v44) = x_BYTE_F6EE0_tablesx[0x14000 + v43];
						v45 = x_BYTE_F6EE0_tablesx[v44];
					}
					*v41++ = v45;
					LOWORD(v39) = v58 + v39;
					LOWORD(v40) = v59 + v40;
					v42--;
				} while (v42);
				v71 += x_DWORD_18062C_resolution_x;
				v74 += 2;
				index = v69;
				k--;
				v72 -= v70;
			}
		}
	}
	else if (a10)
	{
		for (l = v13; l; v73 += v69)
		{
			v51 = v74[1];
			v46 = v72 + v51 * v58;
			v47 = v73 + v51 * v59;
			v48 = (x_BYTE *)(v51 + v71);
			v49 = *v74 - v51;
			v50 = 0;
			HIWORD(v51) = 0;
			do
			{
				LOBYTE(v51) = HIBYTE(v46);
				HIBYTE(v51) = HIBYTE(v47);
				LOBYTE(v50) = x_BYTE_10B4E0_terraintype[v51];
				HIBYTE(v51) = x_BYTE_12B4E0_shading[v51];
				LOBYTE(v51) = x_BYTE_F6EE0_tablesx[0x14000 + v50];
				*v48++ = x_BYTE_F6EE0_tablesx[v51];
				v46 += v58;
				v47 += v59;
				v49--;
			} while (v49);
			v71 += x_DWORD_18062C_resolution_x;
			v74 += 2;
			index = v69;
			l--;
			v72 -= v70;
		}
	}
	else
	{//adress 245156
		for (m = v13; m; v73 += v69)
		{//0x2580=v71-x_DWORD_180628b_screen_buffer
			v57 = v74[1];//adress 245185 mem edx 3ac764
			v52 = v72 + v57 * v58;
			v53 = v73 + v57 * v59;
			v54 = &v71[v57];
			v55 = v74[0] - v57;
			v56 = 0;
			HIWORD(v57) = 0;
			do
			{
				LOBYTE(v57) = HIBYTE(v52);
				HIBYTE(v57) = HIBYTE(v53);
				LOBYTE(v56) = x_BYTE_10B4E0_terraintype[v57];
				HIBYTE(v57) = x_BYTE_12B4E0_shading[v57];
				LOBYTE(v57) = x_BYTE_F6EE0_tablesx[0x14000 + v56];
				LOBYTE(v57) = x_BYTE_F6EE0_tablesx[v57];
				HIBYTE(v57) = v54[0];
				*v54++ = x_BYTE_F6EE0_tablesx[0x4000+v57];//here adress 2451b8
				v52 += v58;
				v53 += v59;
				v55--;
			} while (v55);
			v71 += x_DWORD_18062C_resolution_x;
			v74 += 2;
			index = v69;
			m--;
			v72 -= v70;
		}
	}
	//return result;
}

int debugcounter_644F0 = 0;

//----- (000644F0) --------------------------------------------------------
void sub_644F0_draw_minimap_marks(int a1, int a2, int16_t a3, int16_t a4, int a5, int a6, int16_t a7, int a8)//2454f0
{
	signed int v8; // ebx
	//int64_t v9; // rtt
	int v9x;
	int v10; // edi
	int v11; // edx
	int v12; // eax
	int16_t v13; // ST10_2
	char v14; // dl
	type_str_0x6E8E* ix; // eax
	axis_3d* v16x; // eax
	axis_3d* v17x; // esi
	int v18; // edx
	signed int v19; // eax
	signed int v20; // eax
	int v21; // ebx
	int v22; // ecx
	int v23; // ebx
	int v24; // ecx
	int v25; // esi
	signed int v26; // edx
	int v27; // ecx
	Bit32u v28; // ebx
	int v29; // eax
	uint8_t v30; // cl
	signed int v31; // ebx
	int v32; // eax
	int v33; // edi
	//uint8_t v34; // bl

	/*
	Bit8u origbyte20 = 0;
	Bit8u remakebyte20 = 0;
	int debugcounter11 = 0;
	int comp20;

	//if (debugcounter_644F0 >= 0x1c0)
	{
		comp20 = compare_with_sequence((char*)"002454F0-002DC4E0", (Bit8u*)x_BYTE_10B4E0_terraintype, 0x2dc4e0, debugcounter_644F0, 0x70000, 0x10000, &origbyte20, &remakebyte20);
		comp20 = compare_with_sequence((char*)"002454F0-002DC4E0", (Bit8u*)x_BYTE_11B4E0_height, 0x2dc4e0, debugcounter_644F0, 0x70000, 0x10000, &origbyte20, &remakebyte20, 0x10000);
		comp20 = compare_with_sequence((char*)"002454F0-002DC4E0", (Bit8u*)x_BYTE_12B4E0_shading, 0x2dc4e0, debugcounter_644F0, 0x70000, 0x10000, &origbyte20, &remakebyte20, 0x20000);
		comp20 = compare_with_sequence((char*)"002454F0-002DC4E0", (Bit8u*)x_BYTE_13B4E0_angle, 0x2dc4e0, debugcounter_644F0, 0x70000, 0x10000, &origbyte20, &remakebyte20, 0x30000);
		//comp20 = compare_with_sequence((char*)"00228320", (Bit8u*)x_BYTE_14B4E0, 0x2dc4e0, debugcounter11, 0x70000,0x10000, &origbyte20, &remakebyte20, 0x40000);
		comp20 = compare_with_sequence((char*)"002454F0-002DC4E0", (Bit8u*)x_WORD_15B4E0_source, 0x2dc4e0, debugcounter_644F0, 0x70000, 0x20000, &origbyte20, &remakebyte20, 0x50000);

		//Bit8u origbyte20 = 0;
		//Bit8u remakebyte20 = 0;
		comp20 = compare_with_sequence_D41A0((char*)"002454F0-00356038", (Bit8u*)& D41A0_BYTESTR_0, 0x356038, debugcounter_644F0, 0x36e16, &origbyte20, &remakebyte20);

		comp20 = compare_with_sequence_array_E2A74((char*)"002454F0-002B3A74", (Bit8u*)& array_E2A74, 0x2b3a74, debugcounter_644F0, 0xc4e, 0xc4e, &origbyte20, &remakebyte20);
		comp20 = compare_with_sequence((char*)"002454F0-003514B0", (Bit8u*)& str_unk_1804B0ar, 0x3514b0, debugcounter_644F0, 0xab, 0xab, &origbyte20, &remakebyte20);
	}

	//if (debugcounter_644F0 >= 0x110)
	{
		debugcounter_644F0++;
		debugcounter_644F0--;
	}
	comp20 = compare_with_sequence((char*)"002454F0-003AA0A4", x_DWORD_180628b_screen_buffer, 0x3aa0a4, debugcounter_47560, 320 * 200, 320 * 200, &origbyte20, &remakebyte20);
	debugcounter_644F0++;
	*/

	axis_3d* v36x; // [esp-4h] [ebp-BEh]

	int v37x[0xa8]; // [esp+0h] [ebp-BAh]
	//int v38[5]; // [esp+4h] [ebp-B6h]//v37x[1]

	//int v39; // [esp+18h] [ebp-A2h]//v37x[6]
	//int v40; // [esp+1Ch] [ebp-9Eh]//v37x[7]
	//int v41; // [esp+30h] [ebp-8Ah]//v37x[0xc]
	//int v42; // [esp+34h] [ebp-86h]//v37x[0xd]
	//int v43; // [esp+48h] [ebp-72h]//v37x[0x12]
	//int v44; // [esp+4Ch] [ebp-6Eh]//v37x[0x13]
	//int v45; // [esp+60h] [ebp-5Ah]//v37x[0x18]
	//int v46; // [esp+64h] [ebp-56h]//v37x[0x19]
	//int v47; // [esp+78h] [ebp-42h]//v37x[0x1e]
	//int v48; // [esp+7Ch] [ebp-3Eh]//v37x[0x1f]
	//int v49; // [esp+90h] [ebp-2Ah]//v37x[0x24]
	//int v50; // [esp+94h] [ebp-26h]//v37x[0x25]

	v51x_struct v51x; // [esp+A8h] [ebp-12h]//0
	//int16_t v52; // [esp+ACh] [ebp-Eh]//+4
	//Bit8u* v53; // [esp+AEh] [ebp-Ch]//+6
	//int v54; // [esp+B2h] [ebp-8h]//+10
	//int v55; // [esp+B6h] [ebp-4h]//+14
	//int v56; // [esp+BAh] [ebp+0h]//+18
	//int v57; // [esp+BEh] [ebp+4h]//+22
	//int v58; // [esp+C2h] [ebp+8h]//+26
	//int v59; // [esp+C6h] [ebp+Ch]//+30
	//int v60; // [esp+CAh] [ebp+10h]//+34
	//int v61; // [esp+CEh] [ebp+14h]//+38
	//int16_t v62; // [esp+D2h] [ebp+18h]//+42
	//int16_t v63; // [esp+D4h] [ebp+1Ah]//+44
	//char v64; // [esp+D6h] [ebp+1Ch]//+46
	axis_3d v65y; // [esp+D8h] [ebp+1Eh]
	//int16_t v66; // [esp+DCh] [ebp+22h]
	axis_3d v67x; // [esp+E0h] [ebp+26h]//+6
	//int16_t v68; // [esp+E4h] [ebp+2Ah]//+10
	int v69; // [esp+E8h] [ebp+2Eh]//+14
	int v70; // [esp+ECh] [ebp+32h]//+18
	int v71; // [esp+F0h] [ebp+36h]//+22
	type_str_0x6E8E* v72x; // [esp+F4h] [ebp+3Ah]//+26
	int v73; // [esp+F8h] [ebp+3Eh]//+30
	int v74; // [esp+FCh] [ebp+42h]//34
	type_str_0x6E8E* v75x; // [esp+100h] [ebp+46h]//38
	int v76; // [esp+104h] [ebp+4Ah]//+40
	int v77; // [esp+108h] [ebp+4Eh]
	int v78; // [esp+10Ch] [ebp+52h]
	int v79; // [esp+110h] [ebp+56h]
	uint8_t j; // [esp+114h] [ebp+5Ah]
	char v81; // [esp+118h] [ebp+5Eh]
	int v82; // [esp+148h] [ebp+8Eh]
	int v83; // [esp+14Ch] [ebp+92h]

	//fix it
	v51x.v62xw_42 = 0;
	v51x.v63xw_44 = 0;
	v72x = 0;
	//v66 = 0;
	//fix it

	v8 = 0x1000000;
	v81 = 0;
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		a1 >>= 1;
		a2 >>= 1;
		a5 >>= 1;
		a6 >>= 1;
		a8 *= 2;
	}
	v51x.v53xdw_6 = x_DWORD_18062C_resolution_x * a2 + x_DWORD_180628b_screen_buffer + a1;
	//LODWORD(v9) = 0x10000;
	//HIDWORD(v9) = 0x10000 >> 31;
	v9x = 0x10000;
	v83 = v9x / a8;
	v51x.v56xdw_18 = a3;
	v51x.v57xdw_22 = a4;
	v51x.v58xdw_26 = a5;
	v51x.v59xdw_30 = a6;
	v51x.v60xdw_34 = a5 / 2;
	v10 = a7 & 0x7FF;
	v11 = v83 * x_DWORD_DB750[v10];
	v51x.v61xdw_38 = a6 / 2;
	v12 = v83 * x_DWORD_DB750[0x200+v10] >> 16;
	v51x.v55xdw_14 = -v11 >> 16;
	v51x.v54xdw_10 = v12;
	v82 = a7 & 0x7FF;
	v13 = D41A0_BYTESTR_0.word_0xc;
	v75x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	//LOBYTE(i) = sub_595C0(v13);
	v14 = sub_595C0(v13);
	//LOBYTE(i) += 3;
	switch (v14 +3)
	{
	case 0:
	case 1:
	case 2:
		if (v14 == -3)
		{
			for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38535; ; ix = ix->next_0)
			{
				v72x = ix;
				if (ix <= x_DWORD_EA3E4[0])
					break;
				//LOBYTE(i) = (Bit8u)v72;//can remove it
				if (ix->byte_0x40_64 == 31)
				{
					v81 = 1;
					break;
				}
			}
		}
		else
		{
			for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38535; ; ix = ix->next_0)
			{
				v72x = ix;
				if (ix <= x_DWORD_EA3E4[0])
					break;
				//LOBYTE(i) = (Bit8u)v72;//can remove it
				if (ix->byte_0x40_64 == 12)
				{
					v81 = 1;
					break;
				}
			}
		}
		if (v81)
		{
			v36x = &v67x;
			v16x = &v75x->array_0x4C_76;
			v17x = &v72x->array_0x4C_76;
			goto LABEL_47;
		}
		break;
	case 4:
	case 5:
		//LOBYTE(i) = (Bit8u)sub_59610(v72x, D41A0_BYTESTR_0.word_0xc);
		if (sub_59610(&v72x, D41A0_BYTESTR_0.word_0xc))
		{
			v51x.v64xb_46 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
			v51x.v51y = v72x->array_0x4C_76;
			if (sub_64CE0_draw_follow_rectangle(&v51x))
				sub_885E0(v72x, v51x.v62xw_42, v51x.v63xw_44, 0x52u);
			v36x = &v72x->array_0x4C_76;
			v17x = &v72x->array_0x4C_76;
			v16x = &v75x->array_0x4C_76;
			v81 = 1;
			goto LABEL_47;
		}
		break;
	case 8:
		//LOBYTE(i) = sub_596C0(v65x, D41A0_BYTESTR_0.word_0xc);
		if (sub_596C0(&v65y, D41A0_BYTESTR_0.word_0xc))
		{
			v51x.v64xb_46 = (*xadataclrd0dat.var28_begin_buffer)[0xff0];
			v51x.v51y = v65y;
			if (sub_64CE0_draw_follow_rectangle(&v51x))
				sub_885E0(0, v51x.v62xw_42, v51x.v63xw_44, 0x51u);
			v36x = &v65y;
			v17x = &v65y;
			v16x = &v75x->array_0x4C_76;
			v81 = 1;
		LABEL_47:
			v67x = *v17x;
			//i = (Bit8u*)sub_58490_radix_3d_2(v16x, v36x);
			v8 = sub_58490_radix_3d_2(v16x, v36x);
		}
		break;
	case 0xA:
		v18 = D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[1]].str_36552_un.dword;
		v51x.v64xb_46 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
		for (ix = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[v18]; ; ix = ix->next_0)
		{
			v72x = ix;
			if (ix <= x_DWORD_EA3E4[0])
				break;
			v51x.v51y = v72x->array_0x4C_76;
			if (sub_64CE0_draw_follow_rectangle(&v51x))
				sub_885E0(v72x, v51x.v62xw_42, v51x.v63xw_44, 0x52u);
			v19 = sub_58490_radix_3d_2(&v75x->array_0x4C_76, &v72x->array_0x4C_76);
			if (v19 < v8)
			{
				v81 = 1;
				v8 = v19;
				v67x = v72x->array_0x4C_76;
			}
		}
		break;
	case 0xC:
		v51x.v64xb_46 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
		v76 = D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[1]].str_36552_un.dword;
		for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38527; ; ix = ix->next_0)
		{
			v72x = ix;
			if (ix <= x_DWORD_EA3E4[0])
				break;
			v79 = v76;
			for (j = 0; v79 && j < 8u; j++)
			{
				if (v72x->byte_0x46_70 == v79)
				{
					v51x.v51y = v72x->array_0x4C_76;
					if (sub_64CE0_draw_follow_rectangle(&v51x))
						sub_885E0(v72x, v51x.v62xw_42, v51x.v63xw_44, 0x52u);
					v20 = sub_58490_radix_3d_2(&v75x->array_0x4C_76, &v72x->array_0x4C_76);
					if (v20 < v8)
					{
						v8 = v20;
						v81 = 1;
						v67x = v72x->array_0x4C_76;
					}
				}
				v79 = x_WORD_D93C0_bldgprmbuffer[2+1+4 * v79];
			}
		}
		break;
	default:
		break;
	}
	if (v81)
	{
		if (x_D41A0_BYTEARRAY_4_struct.byteindex_26 & 0x40)
		{
			if (x_D41A0_BYTEARRAY_4_struct.byteindex_121[6])
			{
				v21 = v8 - 512;
				LOWORD(v78) = sub_581E0_maybe_tan2(&v75x->array_0x4C_76, &v67x);
				v78 = (uint16_t)v78;
				if (v21 > 15872)
					LOWORD(v21) = 15872;
				v67x = v75x->array_0x4C_76;
				sub_57FA0(&v67x, v78, 0, v21);
				v22 = v83 * x_DWORD_DB750[v82];
				v23 = v83 * (x_DWORD)x_DWORD_DB750[0x200+v82];
				v71 = (int16_t)(*(Bit16s*)&v67x - a3);
				v23 >>= 16;
				v24 = -v22 >> 16;
				v25 = a5 / 2 + ((v23 * v71 - v24 * (int16_t)((Bit16s)v67x.y - a4)) >> 16);
				v37x[7] = 13;
				v37x[0xd] = 13;
				v37x[0x13] = 13;
				v37x[0x25] = 13;
				v37x[6] = 9;
				v77 = a6 / 2 + ((v71 * v24 + (int16_t)((Bit16s)v67x.y - a4) * v23) >> 16);
				v37x[0] = 0;
				v37x[1] = 0;
				v37x[0xc] = -9;
				v37x[0x1e] = -4;
				v37x[0x24] = -4;
				v37x[0x19] = 23;
				v37x[0x1f] = 23;
				v37x[0x12] = 4;
				v37x[0x18] = 4;
				v26 = 1;
				v78 = ((x_WORD)v78 - (x_WORD)v82) & 0x7FF;
				v27 = x_DWORD_DB750[v78];
				v28 = x_DWORD_DB750[0x200+v78];
				while (v26 < 7)
				{
					v29 = 3 * v26;
					v70 = 16 * v37x[6 * v26];
					v69 = 16 * v37x[1+6 * v26];
					v37x[2 * v29] = ((signed int)v28 * v70 - v27 * v69) >> 20;
					v73 = v27 * v70;
					v74 = (x_DWORD)v28 * v69;
					v26++;
					v37x[1+2 * v29] = ((signed int)v28 * v69 + v27 * v70) >> 20;
				}
				if (x_WORD_180660_VGA_type_resolution & 1)
				{
					v25 *= 2;
					v77 *= 2;
				}
				v30 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
				v31 = 0;
				while (v31 < 7)
				{
					v32 = 3 * v31;
					v37x[2 * v32] = v25 + a1 + v37x[6 * v31];
					v33 = v37x[1+(6 * v31++)];
					v37x[1+2 * v32] = v77 + a2 + v33;
				}
				//adress 245be1
				//v34 = v30;
				sub_2BD10_draw_line(v37x[0], v37x[1], v37x[6], v37x[7], v30);
				sub_2BD10_draw_line(v37x[6], v37x[7], v37x[0x12], v37x[0x13], v30);
				sub_2BD10_draw_line(v37x[0x12], v37x[0x13], v37x[0x18], v37x[0x19], v30);
				sub_2BD10_draw_line(v37x[0x18], v37x[0x19], v37x[0x1e], v37x[0x1f], v30);
				sub_2BD10_draw_line(v37x[0x1e], v37x[0x1f], v37x[0x24], v37x[0x25], v30);
				sub_2BD10_draw_line(v37x[0x24], v37x[0x25], v37x[0xc], v37x[0xd], v30);
				sub_2BD10_draw_line(v37x[0xc], v37x[0xd], v37x[0], v37x[1], v30);
			}
		}
	}
	//return (char)i;
}

//----- (00064CE0) --------------------------------------------------------
char sub_64CE0_draw_follow_rectangle(v51x_struct* a1)//245ce0
{
	Bit16s v1; // ecx
	Bit16s v2; // esi
	char v3; // ah
	int v4; // ebx
	char v5; // al
	int v6; // ecx
	int v7; // esi
	int v8; // ecx
	int v9; // ebx
	x_BYTE *v10; // edx
	x_BYTE *v11; // edx
	x_BYTE *v12; // edx
	x_BYTE *v13; // edx
	x_BYTE *v14; // edx
	x_BYTE *v15; // edx

	v1 = a1->v51y.x - a1->v56xdw_18;
	v2 = a1->v51y.y - a1->v57xdw_22;
	v3 = 0;
	v4 = a1->v60xdw_34 + ((Bit32s)(v1 * a1->v54xdw_10 - v2 * a1->v55xdw_14) >> 16);
	v5 = a1->v64xb_46;
	if (v4 >= 0 && v4 < a1->v58xdw_26)
	{
		v6 = a1->v61xdw_38 + (Bit16s)((a1->v54xdw_10 * v2 + a1->v55xdw_14 * v1) >> 16);
		if (v6 >= 3 && v6 < a1->v59xdw_30 - 3 && v4 >= x_WORD_F4960[1 + 2 * v6] + 3 && v4 < x_WORD_F4960[2 * v6] - 3)
		{
			a1->v62xw_42 = v4;
			a1->v63xw_44 = v6;
			v3 = 1;
			if (!(x_D41A0_BYTEARRAY_4_struct.byteindex_26 & 3))
			{
				v7 = x_DWORD_18062C_resolution_x;
				v8 = x_DWORD_18062C_resolution_x * (v6 - 1);
				v9 = v4 - 1;
				v10 = (x_BYTE *)(v8 + v9 + x_DWORD_180628b_screen_buffer);
				v10[0] = v5;
				v10[1] = v5;
				v10[2] = v5;
				v11 = &v10[v7];
				v11[0] = v5;
				v11[2] = v5;
				v12 = &v11[v7];
				v12[0] = v5;
				v12[1] = v5;
				v12[2] = v5;
				if (1 == D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.scr_size_0x2190)
				{
					v13 = (x_BYTE *)(v8 + v9 + x_DWORD_E9C3C);
					v13[0] = v5;
					v13[1] = v5;
					v13[2] = v5;
					v14 = &v13[v7];
					v14[0] = v5;
					v14[2] = v5;
					v15 = &v14[v7];
					v15[0] = v5;
					v15[1] = v5;
					v15[2] = v5;
				}
			}
		}
	}
	return v3;
}

//----- (00064E20) --------------------------------------------------------
Bit32u sub_64E20(type_str_0x6E8E* a1x)//245e20
{
	int16_t v1; // dx
	int v2; // edx
	type_str_0x6E8E* v3x; // eax
	type_str_0x6E8E* v4x; // ecx
	type_str_0x6E8E* v5x; // esi
	int64_t v6; // rax
	int16_t v7; // di
	unsigned int v8; // edx
	//int v9; // esi
	Bit32u result; // eax
	type_str_0x6E8E* v11x; // eax

	v1 = a1x->str_0x5E_94.word_0x62_98;
	a1x->struct_byte_0xc_12_15.byte[2] |= 2u;
	if (v1)
	{
		v2 = a1x->dword_0x8 - a1x->str_0x5E_94.dword_0x5E_94;
		a1x->dword_0x8 = v2;
		if (v2 < 0)
		{
			v3x = sub_4A190(&a1x->array_0x4C_76, 10, 6);
			v4x = v3x;
			v5x = v3x;
			if (v3x)
			{
				v3x->word_0x1A_26 = x_DWORD_EA3E4[a1x->str_0x5E_94.word_0x62_98]->word_0x1A_26;
				v6 = 3 * a1x->array_0x52_82.dd;
				v7 = v4x->array_0x4C_76.z;
				v4x->word_0x2C_44 = (signed int)(v6 - (__CFSHL__(HIDWORD(v6), 2) + 4 * HIDWORD(v6))) >> 2;
				if (v7 <= 128)
					v4x->array_0x4C_76.z = 0;
				else
					v4x->array_0x4C_76.z = v7 - 128;
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v8 = a1x->word_0x14_20 % 0x3Cu + 130;
				v5x->dword_0x8 = v8;
				//v9 = *(x_DWORD *)(a1 + 12);
				a1x->dword_0x8 = v8;
				a1x->struct_byte_0xc_12_15.dword &= 0xFFFDFFF7;
				LOBYTE(v8) = a1x->struct_byte_0xc_12_15.byte[2];
				a1x->byte_0x45_69 = 1;
				a1x->struct_byte_0xc_12_15.byte[2] = v8 | 2;
				sub_57D40(a1x, &a1x->array_0x4C_76);
			}
		}
		a1x->str_0x5E_94.word_0x62_98 = 0;
	}
	a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	result = sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76);
	if (result == 1)
	{
		v11x = sub_4A190(&a1x->array_0x4C_76, 10, 5);
		if (v11x)
			v11x->word_0x1A_26 = a1x->word_0x1A_26;
		sub_57F10(a1x);
	}
	return result;
}

//----- (00064F60) --------------------------------------------------------
Bit32u sub_64F60(type_str_0x6E8E* a1x)//245f60
{
	int v1; // edx
	uint16_t v2; // si
	Bit32u result; // eax
	type_str_0x6E8E* v4x; // eax

	v1 = a1x->dword_0x8 - 1;
	a1x->dword_0x8 = v1;
	if (v1 < 60)
	{
		v2 = a1x->word_0x5A_90;
		a1x->byte_0x45_69 = 2;
		if (v2 >= 0x53u)
		{
			if (v2 <= 0x53u)
			{
				sub_49DA0(a1x, 226);
			}
			else if (v2 == 84)
			{
				sub_49DA0(a1x, 227);
			}
		}
	}
	a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	result = sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76);
	if (result == 1)
	{
		v4x = sub_4A190(&a1x->array_0x4C_76, 10, 5);
		if (v4x)
			v4x->word_0x1A_26 = a1x->word_0x1A_26;
		sub_57F10(a1x);
	}
	return result;
}

//----- (00064FF0) --------------------------------------------------------
Bit32u sub_64FF0(type_str_0x6E8E* a1x)//245ff0
{
	Bit32u result; // eax
	type_str_0x6E8E* v2x; // eax

	a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	result = sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76);
	if (result == 1)
	{
		v2x = sub_4A190(&a1x->array_0x4C_76, 10, 5);
		if (v2x)
			v2x->word_0x1A_26 = a1x->word_0x1A_26;
		sub_57F10(a1x);
	}
	return result;
}

//----- (00065040) --------------------------------------------------------
int sub_65040(type_str_0x6E8E* a1x)//246040
{
	//int result; // eax

	a1x->struct_byte_0xc_12_15.byte[2] |= 2u;
	//result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	return a1x->array_0x4C_76.z;
}

//----- (00065080) --------------------------------------------------------
void sub_65080(type_str_0x6E8E* a1x)//246080
{
	uint16_t v1; // di
	//Bit8u* v2; // esi
	int v2x;
	type_str_0x6E8E* v3x; // ebx
	int result; // eax

	v1 = 0;
	//v2 = x_D41A0_BYTEARRAY_0 + 11230;
	v2x = 0;
	while (v1 < D41A0_BYTESTR_0.word_0xe)
	{
		v3x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[v2x].word_0x00a_2BE4_11240];
		if (v3x->dword_0x8 >= 0 && sub_106C0(v3x, a1x))
			v3x->struct_byte_0xc_12_15.byte[1] |= 0x10u;
		//v2 += 2124;
		v2x++;
		v1++;
	}
	//result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	//return result;
}

//----- (00065110) --------------------------------------------------------
int sub_65110(type_str_0x6E8E* a1x)//246110
{
	int result; // eax

	a1x->struct_byte_0xc_12_15.byte[2] |= 2u;
	result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	a1x->array_0x4C_76.z = result;
	return result;
}

//----- (000651B0) --------------------------------------------------------
Bit32u sub_651B0(type_str_0x6E8E* a1x)//2461b0
{
	int16_t v1; // dx
	int v2; // edx
	int16_t v3; // ax
	char v4; // dl
	Bit32u result; // eax

	v1 = a1x->str_0x5E_94.word_0x62_98;
	a1x->struct_byte_0xc_12_15.byte[2] |= 2u;
	if (v1)
	{
		v2 = a1x->dword_0x8 - a1x->str_0x5E_94.dword_0x5E_94;
		a1x->dword_0x8 = v2;
		if (v2 < 0)
		{
			v3 = a1x->word_0x5A_90;
			a1x->str_0x5E_94.word_0x62_98 = 0;
			v4 = a1x->struct_byte_0xc_12_15.byte[0];
			a1x->byte_0x45_69 = 19;
			a1x->struct_byte_0xc_12_15.byte[0] = v4 & 0xF7;
			sub_49DA0(a1x, v3 + 4);
			sub_4A190(&a1x->array_0x4C_76, 10, 13);
		}
		a1x->str_0x5E_94.word_0x62_98 = 0;
	}
	a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	result = sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76);
	if (result == 1)
		sub_57F10(a1x);
	return result;
}

//----- (00065240) --------------------------------------------------------
Bit32u sub_65240(type_str_0x6E8E* a1x)//246240
{
	Bit32u result; // eax

	a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	result = sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76);
	if (result == 1)
		sub_57F10(a1x);
	return result;
}

//----- (00065280) --------------------------------------------------------
void sub_65280(type_str_0x6E8E* a1x)//246280
{
	sub_652C0(a1x);
}

//----- (000652A0) --------------------------------------------------------
void sub_652A0(type_str_0x6E8E* a1x)//2462a0
{
	sub_652C0(a1x);
}

//----- (000652C0) --------------------------------------------------------
void sub_652C0(type_str_0x6E8E* a1x)//2462c0
{
	char v1; // ah
	int16_t v2; // dx
	int16_t v3; // cx
	int16_t v4; // di
	int16_t v5; // ax
	signed int v6; // esi
	signed int v7; // ecx
	signed int v8; // ecx
	int16_t v9; // ax
	unsigned int v10; // edx
	int16_t v11; // di
	int16_t v12; // ax
	int v13; // eax
	int v14; // edx

	v1 = a1x->struct_byte_0xc_12_15.byte[1];
	if (v1 & 8)
	{
		a1x->struct_byte_0xc_12_15.byte[1] = v1 & 0xF7;
	}
	else
	{
		x_WORD_EB398ar = a1x->array_0x4C_76;
		if ((Bit16s)a1x->array_0x4C_76.z > (int16_t)sub_10C40_getTerrainAlt(&a1x->array_0x4C_76))
		{
			v2 = a1x->word_0x82_130;
			if (v2)
				sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, 0, v2);
		}
		else
		{
			a1x->word_0x82_130 = 0;
			sub_654B0(a1x);
		}
		sub_57CF0(a1x, &x_WORD_EB398ar);
		v3 = a1x->word_0x82_130;
		if (v3)
			a1x->word_0x82_130 = v3 - 1;
		v4 = a1x->word_0x2C_44 + a1x->array_0x4C_76.z;
		v5 = a1x->word_0x2C_44 - 24;
		a1x->word_0x2C_44 = v5;
		a1x->array_0x4C_76.z = v4;
		if (v5 < -192)
			a1x->word_0x2C_44 = -192;
		if (a1x->word_0x2C_44 > 192)
			a1x->word_0x2C_44 = 192;
		v6 = (int16_t)sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		if ((Bit16s)a1x->array_0x4C_76.z <= v6)
			a1x->array_0x4C_76.z = v6;
		if (a1x->str_0x5E_94.word_0x62_98)
		{
			if ((Bit16s)a1x->array_0x4C_76.z <= v6)
			{
				v7 = a1x->str_0x5E_94.dword_0x5E_94 >> 2;
				if (v7 < 2)
					v7 = 2;
				if (v7 > 192)
					v7 = 192;
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v8 = a1x->word_0x14_20 % (unsigned int)v7 + v7;
				v9 = 9377 * a1x->word_0x14_20;
				a1x->word_0x2C_44 = v8;
				a1x->word_0x14_20 = v9 + 9439;
				v10 = a1x->word_0x14_20 % (unsigned int)(v8 >> 1);
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v11 = a1x->array_0x4C_76.z;
				a1x->word_0x1C_28 = a1x->word_0x14_20 & 0x7FF;
				v12 = a1x->word_0x2C_44;
				a1x->word_0x82_130 = v10 + 1;
				a1x->array_0x4C_76.z = v12 + v11;
			}
			v13 = a1x->str_0x5E_94.dword_0x5E_94;
			v14 = a1x->dword_0x8;
			a1x->str_0x5E_94.word_0x62_98 = 0;
			a1x->dword_0x8 = v14 - v13;
		}
		if (a1x->dword_0x8 < 0)
		{
			sub_4A190(&a1x->array_0x4C_76, 10, 13);
			goto LABEL_27;
		}
		if ((Bit16s)a1x->array_0x4C_76.z <= v6 && sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 1)
		{
			sub_4A190(&a1x->array_0x4C_76, 10, 5);
		LABEL_27:
			sub_57F10(a1x);
			return;
		}
	}
}

//----- (000654B0) --------------------------------------------------------
void sub_654B0(/*axis_3d* a1x,*/ type_str_0x6E8E* a2x)//2464b0
{
	int result; // eax
	Bit32u v3; // esi
	Bit32u v4; // eax
	axis_3d v5x; // [esp+0h] [ebp-1Ch]
	//int16_t v6; // [esp+4h] [ebp-18h]
	axis_3d v7x; // [esp+8h] [ebp-14h]
	//int16_t v8; // [esp+Ch] [ebp-10h]
	int v9; // [esp+10h] [ebp-Ch]
	Bit32u v10; // [esp+14h] [ebp-8h]
	int v11; // [esp+18h] [ebp-4h]

	result = sub_1B7A0_tile_compare(&x_WORD_EB398ar);
	if (result > 20)
	{
		v9 = 0;
		v5x = x_WORD_EB398ar;
		result = a2x->word_0x1C_28;
		v10 = 0x10000;
		while (1)
		{
			v11 = result;
			if (v9 >= 8)
				break;
			v7x = x_WORD_EB398ar;
			sub_57FA0(&v7x, v11, 0, 64);
			v3 = v10;
			v4 = sub_10C40_getTerrainAlt(&v7x);
			if (v4 < v3)
			{
				v10 = v4;
				v5x = v7x;
			}
			result = ((x_WORD)v11 + 256) & 0x7FF;
			v9++;
		}
		//a1x = &v5x;
		x_WORD_EB398ar = v5x;
	}
	//return result;
}

//----- (00065580) --------------------------------------------------------
void sub_65580(type_str_0x6E8E* a1x)//246580
{
	//Bit8u* result; // eax

	//result = a1;
	if (a1x->byte_0x40_64 != 2)
		a1x->array_0x4C_76.z += a1x->array_0x52_82.aa;
	//return result;
}

//----- (000655A0) --------------------------------------------------------
void sub_655A0(type_str_0x6E8E* a1x)//2465a0
{
	//int result; // eax

	//result = a1;
	if (a1x->byte_0x40_64 != 2)
		a1x->array_0x4C_76.z -= a1x->array_0x52_82.aa;
	//return result;
}

//----- (000655C0) --------------------------------------------------------
void sub_655C0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//2465c0
{
	sub_65580(a2x);
	a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
	a1x->word_0x22_34 = sub_58210_radix_tan(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
	sub_655A0(a2x);
}

//----- (00065610) --------------------------------------------------------
void sub_65610(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//246610
{
	type_str_0x6E8E* v2x; // ebx
	int16_t v3; // ax
	//int v4; // esi
	int16_t v5; // ax
	//int v6; // esi
	int16_t v7; // ax

	v2x = a1x;
	sub_65580(a2x);
	a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
	v3 = sub_58210_radix_tan(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
	//v4 = a1x->dword_0xA0_160;
	a1x->word_0x22_34 = v3;
	v5 = v2x->word_0x1C_28
		+ sub_58350(v2x->word_0x1C_28, v2x->word_0x20_32, a1x->dword_0xA0_160x->word_160_0x4_4, a1x->dword_0xA0_160x->word_160_0x2_2);
	HIBYTE(v5) &= 7u;
	//v6 = a1x->dword_0xA0_160;
	a1x->word_0x1C_28 = v5;
	v7 = v2x->word_0x1E_30
		+ sub_58350(v2x->word_0x1E_30, v2x->word_0x22_34, a1x->dword_0xA0_160x->word_160_0x8_8, a1x->dword_0xA0_160x->word_160_0x6_6);
	HIBYTE(v7) &= 7u;
	a1x->word_0x1E_30 = v7;
	sub_655A0(a2x);
}

//----- (000656D0) --------------------------------------------------------
int16_t sub_656D0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//2466d0
{
	type_str_0x6E8E* v2x; // ebx
	int16_t v3; // ax
	//int v4; // esi
	int16_t v5; // ax
	//int v6; // esi
	int16_t result; // ax

	v2x = a1x;
	a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
	v3 = sub_58210_radix_tan(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
	//v4 = a1x->dword_0xA0_160;
	a1x->word_0x22_34 = v3;
	v5 = v2x->word_0x1C_28
		+ sub_58350(v2x->word_0x1C_28, v2x->word_0x20_32, a1x->dword_0xA0_160x->word_160_0x4_4, a1x->dword_0xA0_160x->word_160_0x2_2);
	HIBYTE(v5) &= 7u;
	//v6 = a1x->dword_0xA0_160;
	a1x->word_0x1C_28 = v5;
	result = v2x->word_0x1E_30
		+ sub_58350(v2x->word_0x1E_30, v2x->word_0x22_34, a1x->dword_0xA0_160x->word_160_0x8_8, a1x->dword_0xA0_160x->word_160_0x6_6);
	HIBYTE(result) &= 7u;
	a1x->word_0x1E_30 = result;
	return result;
}

//----- (00065780) --------------------------------------------------------
void sub_65780(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, type_str_0x6E8E* a3x)//246780
{
	type_str_0x6E8E* v3x; // eax
	//int v4; // ebx

	//LOBYTE(v3) = a1x->byte_0x40_64;
	if (a1x->byte_0x40_64 < 0xCu)
	{
		if (a1x->byte_0x40_64 < 3u)
		{
			if (a1x->byte_0x40_64 > 1u)
				return;
		}
		else if (a1x->byte_0x40_64 > 3u && (a1x->byte_0x40_64 < 7u || a1x->byte_0x40_64 > 9u))
		{
			return;
		}
	}
	else if (a1x->byte_0x40_64 > 0xCu)
	{
		if (a1x->byte_0x40_64 < 0x19u)
		{
			if (a1x->byte_0x40_64 != 17)
				return;
		}
		else if (a1x->byte_0x40_64 > 0x19u && a1x->byte_0x40_64 != 28)
		{
			return;
		}
	}
	v3x = x_DWORD_EA3E4[a1x->word_0x1A_26];
	if (v3x->byte_0x3F_63 == 3 && !v3x->byte_0x40_64)
	{
		v3x->dword_0xA4_164x->dword_0x165_357++;
		if (a2x > x_DWORD_EA3E4[0] && a3x > x_DWORD_EA3E4[0] && a2x->word_0x1A_26 == a3x->word_0x1A_26)
		{
			//v4 = v3x->dword_0xA4_164;
			if (v3x->dword_0xA4_164x)
				v3x->dword_0xA4_164x->dword_0x169_361++;
		}
	}
	//return v3;
}

//----- (00065820) --------------------------------------------------------
type_str_0x6E8E* sub_65820(type_str_0x6E8E* a1x)//246820
{
	type_str_0x6E8E* v1x; // eax
	char v2; // dl
	int16_t v3; // ax
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // esi
	int16_t v6; // ax
	int16_t v7; // cx
	char v8; // al
	type_str_0x6E8E* v9x; // eax
	int v10; // edi
	type_str_0x6E8E* v11x; // edi
	type_str_0x6E8E* v13x; // [esp+0h] [ebp-8h]
	char v14; // [esp+4h] [ebp-4h]

	v14 = 0;
	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v13x = v1x;
	if (v1x <= x_DWORD_EA3E4[0])
	{
		v2 = a1x->struct_byte_0xc_12_15.byte[0];
		if (!(v2 & 2))
		{
			a1x->struct_byte_0xc_12_15.byte[0] = v2 | 2;
			if (sub_68940(a1x) || sub_67CB0(a1x))
			{
				a1x->word_0x1C_28 = a1x->word_0x20_32;
				a1x->word_0x1E_30 = a1x->word_0x22_34;
			}
			else
			{
				a1x->word_0x20_32 = a1x->word_0x1C_28;
				a1x->word_0x22_34 = a1x->word_0x1E_30;
			}
		}
	}
	else
	{
		sub_65610(a1x, v1x);
	}
	v3 = a1x->word_0x84_132 - a1x->word_0x82_130;
	if (a1x->word_0x84_132 != a1x->word_0x82_130)
	{
		if (a1x->word_0x84_132 - a1x->word_0x82_130 <= 0)
			v3 = -1;
		else
			v3 = 1;
	}
	a1x->word_0x82_130 += 2 * v3;
	x_WORD_EB398ar = a1x->array_0x4C_76;
	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
	sub_57CF0(a1x, &x_WORD_EB398ar);
	v4x = sub_10780(a1x);
	v5x = v4x;
	if (v4x)
	{
		if (v4x->struct_byte_0xc_12_15.word[0] & 0x8010 && sub_68740(a1x, v4x, 0x2Du, 22))
			return 0;
		sub_65580(v5x);
		sub_57CF0(a1x, &v5x->array_0x4C_76);
		sub_655A0(v5x);
		v14 = 1;
		goto LABEL_29;
	}
	v6 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	v7 = a1x->array_0x4C_76.z;
	x_WORD_EB398ar.z = v6;
	if (v6 > v7
		|| x_BYTE_D41B6
		&& (x_WORD_EB398ar.z = sub_10C60(&a1x->array_0x4C_76) - a1x->array_0x52_82.dd, a1x->array_0x4C_76.z > x_WORD_EB398ar.z))
	{
		a1x->array_0x4C_76.z = x_WORD_EB398ar.z;
		v8 = a1x->byte_0x40_64;
		if (v8 != 4 && v8 != 22 && v8 != 24 && v8 != 26 && sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 1)
		{
			v9x = sub_4A190(&a1x->array_0x4C_76, 10, 5);
			if (v9x)
				v9x->word_0x1A_26 = a1x->word_0x1A_26;
			sub_57F10(a1x);
			goto LABEL_29;
		}
		goto LABEL_28;
	}
	v10 = a1x->dword_0x8 - 1;
	a1x->dword_0x8 = v10;
	if (v10 < 0)
		LABEL_28:
	v14 = 1;
LABEL_29:
	if (!v14)
		return 0;
	if (sub_68AC0(a1x, v5x))
	{
		sub_57F10(a1x);
		return 0;
	}
	v11x = sub_4A190(&a1x->array_0x4C_76, a1x->byte_0x43_67, a1x->byte_0x44_68);
	if (!v11x)
		return 0;
	sub_65780(a1x, v5x, v13x);
	sub_686D0(a1x, v5x);
	if (v5x > x_DWORD_EA3E4[0] && a1x->word_0x26_38)
		sub_6D8B0(a1x->word_0x1A_26, x_DWORD_EA3E4[a1x->word_0x26_38]->byte_0x40_64, 1);
	if (a1x->byte_0x44_68 == 34)
		v11x->dword_0x8 = a1x->word_0x2A_42;
	v11x->word_0x1A_26 = a1x->word_0x1A_26;
	v11x->word_0x1C_28 = a1x->word_0x1C_28;
	v11x->word_0x1E_30 = a1x->word_0x1E_30;
	if (v5x)
		v11x->word_0x96_150 = v5x-D41A0_BYTESTR_0.struct_0x6E8E;
	v11x->word_0x2A_42 = a1x->word_0x2A_42;
	v11x->byte_0x46_70 = a1x->byte_0x46_70;
	sub_57F10(a1x);
	return v11x;
}

//----- (00065B30) --------------------------------------------------------
void sub_65B30(type_str_0x6E8E* a1x)//246b30
{
	//int result; // eax

	if (sub_65C20(a1x))
		sub_57F10(a1x);//fire drop
	//return result;
}

//----- (00065B50) --------------------------------------------------------
void sub_65B50(type_str_0x6E8E* a1x)//246b50
{
	//int result; // eax
	type_str_0x6E8E* v2x; // esi
	int16_t v3; // bx
	int16_t v4; // dx
	type_str_0x6E8E* v5x; // eax
	type_str_0x6E8E* ix; // ebx
	char v7; // [esp+0h] [ebp-4h]

	v7 = 0;
	v2x = sub_65C20(a1x);
	//v2 = result;
	if (v2x)
	{
		v3 = a1x->word_0x96_150;
		v2x->dword_0x4 = 30;
		v2x->word_0x96_150 = v3;
		v4 = v2x->word_0x1A_26;
		v2x->dword_0x8 = v2x->dword_0x4;
		if (v4)
		{
			v5x = x_DWORD_EA3E4[v4];
			if (v5x->byte_0x3F_63 == 3
				&& !v5x->byte_0x40_64
				&& v5x->dword_0xA4_164x->word_0x38_56 == D41A0_BYTESTR_0.word_0xc)
			{
				v7 = 1;
			}
		}
		for (ix = x_DWORD_EA3E4[v2x->word_0x34_52];
			ix > x_DWORD_EA3E4[0];
			ix = x_DWORD_EA3E4[ix->word_0x34_52])
		{
			ix->word_0x1A_26 = v2x->word_0x1A_26;
			if (v7)
				sub_49C90(ix, 42);
		}
		sub_57F10(a1x);
	}
	//return result;
}

//----- (00065C20) --------------------------------------------------------
type_str_0x6E8E* sub_65C20(type_str_0x6E8E* a1x)//246c20
{
	type_str_0x6E8E* v1x; // eax
	char v2; // dl
	int16_t v3; // si
	int16_t v4; // dx
	int16_t v5; // ax
	int16_t v6; // si
	int16_t v7; // cx
	type_str_0x6E8E* v8x; // eax
	type_str_0x6E8E* v9x; // esi
	int16_t v11; // ax
	int16_t v12; // dx
	type_str_0x6E8E* v13x; // eax
	int v14; // edi
	type_str_0x6E8E* v15x; // edi
	axis_3d v16x; // [esp+0h] [ebp-14h]
	//int16_t v17; // [esp+4h] [ebp-10h]
	type_str_0x6E8E* v18x; // [esp+8h] [ebp-Ch]
	type_str_0x6E8E* v19x; // [esp+Ch] [ebp-8h]
	char v20; // [esp+10h] [ebp-4h]

	v20 = 0;
	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v18x = 0;
	v19x = v1x;
	if (v1x > x_DWORD_EA3E4[0])
	{
		sub_65610(a1x, v1x);
		goto LABEL_18;
	}
	v2 = a1x->struct_byte_0xc_12_15.byte[0];
	if (!(v2 & 2))
	{
		a1x->struct_byte_0xc_12_15.byte[0] = v2 | 2;
		if (sub_68940(a1x))
		{
			v6 = sub_582B0(a1x->word_0x1C_28, a1x->word_0x20_32);
			if (v6 < 0)
				v6 = 0;
			if (v6 > 34)
				v6 = 34;
			v7 = v6 * sub_582F0(a1x->word_0x1C_28, a1x->word_0x20_32) + a1x->word_0x1C_28;
			v5 = a1x->word_0x22_34;
			a1x->word_0x1C_28 = v7;
		}
		else
		{
			if (!sub_67CB0(a1x))
			{
				a1x->word_0x20_32 = a1x->word_0x1C_28;
				a1x->word_0x22_34 = a1x->word_0x1E_30;
				goto LABEL_18;
			}
			v3 = sub_582B0(a1x->word_0x1C_28, a1x->word_0x20_32);
			if (v3 < 0)
				v3 = 0;
			if (v3 > 34)
				v3 = 34;
			v4 = v3 * sub_582F0(a1x->word_0x1C_28, a1x->word_0x20_32) + a1x->word_0x1C_28;
			v5 = a1x->word_0x22_34;
			a1x->word_0x1C_28 = v4;
		}
		a1x->word_0x1E_30 = v5;
	}
LABEL_18:
	v16x = a1x->array_0x4C_76;
	x_WORD_EB398ar = v16x;
	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
	sub_57CF0(a1x, &x_WORD_EB398ar);//move projectile?
	v8x = sub_10780(a1x);
	v9x = v8x;
	if (!v8x)
	{
		v11 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		v12 = a1x->array_0x4C_76.z;
		x_WORD_EB398ar.z = v11;
		if (v11 > v12
			|| x_BYTE_D41B6
			&& (x_WORD_EB398ar.z = sub_10C60(&a1x->array_0x4C_76) - a1x->array_0x52_82.dd, a1x->array_0x4C_76.z > x_WORD_EB398ar.z))
		{
			v16x.z = x_WORD_EB398ar.z;
			sub_57CF0(a1x, &v16x);
			if (a1x->byte_0x40_64 != 4 && sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 1)
			{
				v13x = sub_4A190(&a1x->array_0x4C_76, 10, 5);
				if (v13x)
					v13x->word_0x1A_26 = a1x->word_0x1A_26;
				sub_57F10(a1x);
				goto LABEL_35;
			}
		}
		else
		{
			v14 = a1x->dword_0x8 - 1;
			a1x->dword_0x8 = v14;
			if (v14 >= 0)
				goto LABEL_35;
		}
		v20 = 1;
		goto LABEL_35;
	}
	if (v8x->struct_byte_0xc_12_15.word[0] & 0x8010)
	{
		if (sub_68740(a1x, v8x, 0x5Bu, 45))
			return 0;
	}
	else
	{
		if (v8x->dword_0xA0_160x->byte_160_0x20_32 & 0x10)
			a1x->word_0x2A_42 = 1;
		sub_65580(v8x);
		sub_57CF0(a1x, &v9x->array_0x4C_76);
		sub_655A0(v9x);
		v20 = 1;
	}
LABEL_35:
	if (v20)
	{
		if (sub_68AC0(a1x, v9x))
		{
			sub_57F10(a1x);
		}
		else
		{
			v18x = sub_4A190(&a1x->array_0x4C_76, a1x->byte_0x43_67, a1x->byte_0x44_68);
			if (v18x)
			{
				sub_65780(a1x, v9x, v19x);
				sub_686D0(a1x, v9x);
				if (v9x > x_DWORD_EA3E4[0])
					sub_6D8B0(a1x->word_0x1A_26, 0, 1);
				v15x = v18x;
				v18x->word_0x2A_42 = a1x->word_0x2A_42;
				v15x->word_0x1A_26 = a1x->word_0x1A_26;
				v15x->word_0x1C_28 = a1x->word_0x1C_28;
				v15x->word_0x1E_30 = a1x->word_0x1E_30;
				if (!v9x)
					a1x->word_0x96_150 = 0;
			}
		}
	}
	return v18x;
}

int debugcounter_sub_65F60 = 0;

//----- (00065F60) --------------------------------------------------------
void sub_65F60(type_str_0x6E8E* a1x)//246f60
{
	type_str_0x6E8E* v1x; // eax
	//char v2; // dl
	int16_t v3; // ax
	int16_t v4; // ax
	type_str_0x6E8E* v5x; // eax
	type_str_0x6E8E* v6x; // esi
	type_str_0x6E8E* v7x; // edi
	//type_str_0x6E8E* v8x; // eax
	int16_t v9; // dx
	//int16_t v10; // cx
	int v11; // esi
	type_str_0x6E8E* v12x; // esi
	type_str_0x6E8E* v14x; // [esp+0h] [ebp-8h]
	char v15; // [esp+4h] [ebp-4h]

	/*Bit8u origbyte20 = 0;
	Bit8u remakebyte20 = 0;
	int comp20;

	comp20 = compare_with_sequence_D41A0((char*)"00246F60-00356038", (Bit8u*)& D41A0_BYTESTR_0, 0x356038, debugcounter_sub_65F60, 0x36e16, &origbyte20, &remakebyte20);
	debugcounter_sub_65F60++;*/

	if (debugcounter_sub_65F60 >= 0x5)
	{
		debugcounter_sub_65F60 = debugcounter_sub_65F60;
	}
	debugcounter_sub_65F60++;

	v15 = 0;
	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v14x = v1x;
	if (v1x <= x_DWORD_EA3E4[0])
	{
		//v2 = *(x_BYTE *)(a1 + 12);
		if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
		{
			a1x->struct_byte_0xc_12_15.byte[0] |= 2;
			if (sub_67CB0(a1x))//problem je zde
			{
				a1x->word_0x1C_28 = a1x->word_0x20_32;
				a1x->word_0x1E_30 = a1x->word_0x22_34;
			}
		}
	}
	else
	{
		sub_65610(a1x, v1x);
	}
	x_WORD_EB398ar = a1x->array_0x4C_76;
	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
	v3 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
	if (v3 > x_WORD_EB398ar.z)
		x_WORD_EB398ar.z = v3;
	if (x_BYTE_D41B6)
	{
		v4 = sub_10C60(&x_WORD_EB398ar) - a1x->array_0x52_82.dd;
		if (v4 < x_WORD_EB398ar.z)
			x_WORD_EB398ar.z = v4;
	}
	sub_57CF0(a1x, &x_WORD_EB398ar);
	v5x = sub_108B0(a1x);
	v6x = v5x;
	v7x = v5x;
	if (!v5x)
	{
		/*LOWORD(v8) = *///sub_10C40_getTerrainAlt(a1x->array_0x4C_76);
		v9 = a1x->array_0x4C_76.z;
		x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		if (x_WORD_EB398ar.z > v9
			|| x_BYTE_D41B6
			&& (x_WORD_EB398ar.z = sub_10C60(&a1x->array_0x4C_76) - a1x->array_0x52_82.dd,
				/*x_WORD_EB398ar[2] = (short)v8,*/
				//v10 = x_WORD_EB398ar[2],
				//LOWORD(v8) = a1x->array_0x4C_76.z,
				a1x->array_0x4C_76.z > x_WORD_EB398ar.z))
		{
			//LOWORD(v8) = x_WORD_EB398ar[2];
			a1x->array_0x4C_76.z = x_WORD_EB398ar.z;
		}
		else
		{
			v11 = a1x->dword_0x8 - 1;
			a1x->dword_0x8 = v11;
			if (v11 >= 0)
				goto LABEL_19;
		}
		v15 = 1;
		goto LABEL_19;
	}
	sub_65580(v5x);
	sub_57CF0(a1x, &v6x->array_0x4C_76);
	/*LOWORD(v8) = */sub_655A0(v6x);
	v15 = 1;
LABEL_19:
	if (v15)
	{
		//v8x = sub_4A190(a1x->array_0x4C_76, *(char *)(a1 + 67), *(char *)(a1 + 68));
		v12x = sub_4A190(&a1x->array_0x4C_76, a1x->byte_0x43_67, a1x->byte_0x44_68);
		if (v12x)
		{
			sub_65780(a1x, v7x, v14x);
			if (v7x > x_DWORD_EA3E4[0])
				sub_6D8B0(a1x->word_0x1A_26, 1u, 1);
			v12x->word_0x1A_26 = a1x->word_0x1A_26;
			v12x->word_0x1C_28 = a1x->word_0x1C_28;
			v12x->word_0x1E_30 = a1x->word_0x1E_30;
			sub_57F10(a1x);
		}
	}
	return;
}

//----- (00066160) --------------------------------------------------------
type_str_0x6E8E* sub_66160(type_str_0x6E8E* a1x)//247160
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_65820(a1x);
	if (resultx)
		resultx->dword_0x8 = a1x->byte_0x46_70;
	return resultx;
}

//----- (00066180) --------------------------------------------------------
void sub_66180(type_str_0x6E8E* a1x)//247180
{
	type_str_0x6E8E* v1x; // esi
	type_str_0x6E8E* resultx; // eax
	int16_t v3; // dx
	axis_3d v4x; // [esp+0h] [ebp-8h]
	//int16_t v5; // [esp+2h] [ebp-6h]
	//int16_t v6; // [esp+4h] [ebp-4h]

	//resultx = sub_65820(a1x);
	v1x = sub_65820(a1x);
	//BYTE1(result) = *(x_BYTE *)(a1 + 63);
	if (a1x->byte_0x3F_63)
	{
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v4x.x = a1x->word_0x14_20 % 0x81u + a1x->array_0x4C_76.x - 96 - 64;
		a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
		v4x.y = a1x->word_0x14_20 % 0x81u + a1x->array_0x4C_76.y - 96 - 64;
		v4x.z = a1x->array_0x4C_76.z;
		resultx = sub_4A190(&v4x, 10, 0);
		if (resultx)
		{
			resultx->struct_byte_0xc_12_15.dword |= 0x10080;
			resultx->word_0x1A_26 = a1x->word_0x1A_26;
			v3 = a1x->word_0x1C_28;
			resultx->dword_0x8 = 4;
			resultx->byte_0x5C_92 = 3;
			resultx->word_0x1C_28 = v3;
		}
		if (v1x)
		{
			//result = *(char *)(a1 + 70);
			v1x->dword_0x4 = a1x->byte_0x46_70;
			v1x->dword_0x8 = a1x->byte_0x46_70;
		}
	}
	//return result;
}

//----- (00066250) --------------------------------------------------------
type_str_0x6E8E* sub_66250(type_str_0x6E8E* a1x)//247250
{
	type_str_0x6E8E* resultx; // eax
	int v2; // edx

	resultx = sub_65820(a1x);
	if (resultx)
	{
		v2 = a1x->byte_0x46_70;
		resultx->byte_0x46_70 = 0;
		resultx->dword_0x4 = v2;
	}
	return resultx;
}

//----- (00066280) --------------------------------------------------------
type_str_0x6E8E* sub_66280(type_str_0x6E8E* a1x)//247280
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_65820(a1x);
	if (resultx)
		resultx->dword_0x8 = a1x->byte_0x46_70;
	return resultx;
}

//----- (000662A0) --------------------------------------------------------
type_str_0x6E8E* sub_662A0(type_str_0x6E8E* a1x)//2472a0
{
	return sub_65820(a1x);
}

//----- (000662C0) --------------------------------------------------------
void sub_662C0(type_str_0x6E8E* a1x)//2472c0
{
	sub_662E0(a1x);
}

//----- (000662E0) --------------------------------------------------------
void sub_662E0(type_str_0x6E8E* a1x)//2472e0
{
	type_str_0x6E8E* v1x; // eax
	char v2; // dl
	int16_t v3; // ax
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // esi
	type_str_0x6E8E* v6x; // eax
	Bit8u v6y;
	int16_t v7; // cx
	//int16_t v8; // di
	type_str_0x6E8E* v9x; // eax
	int v10; // edi
	char v11; // al
	type_str_0x6E8E* v12x; // edi
	type_str_0x6E8E* v14x; // [esp+0h] [ebp-8h]
	char v15; // [esp+4h] [ebp-4h]

	//fix
	v6x = 0;
	//fix

	v15 = 0;
	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v14x = v1x;
	if (v1x <= x_DWORD_EA3E4[0])
	{
		v2 = a1x->struct_byte_0xc_12_15.byte[0];
		if (!(v2 & 2))
		{
			a1x->struct_byte_0xc_12_15.byte[0] = v2 | 2;
			if (sub_68940(a1x) || sub_67CB0(a1x))
			{
				a1x->word_0x1C_28 = a1x->word_0x20_32;
				a1x->word_0x1E_30 = a1x->word_0x22_34;
			}
			else
			{
				a1x->word_0x20_32 = a1x->word_0x1C_28;
				a1x->word_0x22_34 = a1x->word_0x1E_30;
			}
		}
	}
	else
	{
		sub_65610(a1x, v1x);
	}
	v3 = a1x->word_0x84_132 - a1x->word_0x82_130;
	if (a1x->word_0x84_132 != a1x->word_0x82_130)
	{
		if (a1x->word_0x84_132 - a1x->word_0x82_130 <= 0)
			v3 = -1;
		else
			v3 = 1;
	}
	a1x->word_0x82_130 += 2 * v3;
	x_WORD_EB398ar = a1x->array_0x4C_76;
	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
	sub_57CF0(a1x, &x_WORD_EB398ar);
	v4x = sub_10780(a1x);
	v5x = v4x;
	if (v4x)
	{
		if (v4x->struct_byte_0xc_12_15.word[0] & 0x8010)
		{
			v6y = sub_68740(a1x, v4x, 0x2Du, 22);
			if (v6y)
				return;// v6y;
		}
		sub_65580(v5x);
		sub_57CF0(a1x, &v5x->array_0x4C_76);
		/*LOBYTE(v6) = */sub_655A0(v5x);
		v15 = 1;
	}
	else
	{
		//LOWORD(v6) = sub_10C40_getTerrainAlt(a1x->array_0x4C_76);
		v7 = a1x->array_0x4C_76.z;
		x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		if (x_WORD_EB398ar.z > v7
			|| x_BYTE_D41B6
			&& (x_WORD_EB398ar.z = sub_10C60(&a1x->array_0x4C_76) - a1x->array_0x52_82.dd,
				//x_WORD_EB398ar[2] = (int16_t)v6,
				//v8 = (int16_t)v6,
				//LOWORD(v6) = a1x->array_0x4C_76.z,
				a1x->array_0x4C_76.z > x_WORD_EB398ar.z))
		{
			//LOBYTE(v6) = x_WORD_EB398ar[2];
			a1x->array_0x4C_76.z = x_WORD_EB398ar.z;
			if (a1x->byte_0x40_64 != 4)
			{
				//v6 = sub_104D0_terrain_tile_is_water((int16_t *)(a1 + 76));
				if (sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 1)
				{
					v9x = sub_4A190(&a1x->array_0x4C_76, 10, 5);
					if (v9x)
						v9x->word_0x1A_26 = a1x->word_0x1A_26;
					sub_57F10(a1x);
					goto LABEL_26;
				}
			}
		}
		else
		{
			v10 = a1x->dword_0x8 - 1;
			a1x->dword_0x8 = v10;
			if (v10 >= 0)
				goto LABEL_26;
		}
		v15 = 1;
	}
LABEL_26:
	if (v15)
	{
		if (sub_68AC0(a1x, v5x))
		{
			sub_57F10(a1x);
		}
		else if (!v5x || v5x->byte_0x3F_63 != 3 || (v11 = v5x->byte_0x40_64) != 0 && v11 != 1)
		{
			sub_65780(a1x, 0, v14x);
			sub_57F10(a1x);
		}
		else
		{
			v6x = sub_4A190(&a1x->array_0x4C_76, a1x->byte_0x43_67, a1x->byte_0x44_68);
			v12x = v6x;
			if (v6x)
			{
				sub_65780(a1x, v5x, v14x);
				sub_686D0(a1x, v5x);
				if (v5x > x_DWORD_EA3E4[0] && a1x->word_0x26_38)
					sub_6D8B0(a1x->word_0x1A_26, *(char *)(x_DWORD_EA3E4[a1x->word_0x26_38] + 64), 1);
				if (a1x->byte_0x44_68 == 34)
					v12x->dword_0x8 = a1x->word_0x2A_42;
				v12x->word_0x1A_26 = a1x->word_0x1A_26;
				v12x->word_0x1C_28 = a1x->word_0x1C_28;
				v12x->word_0x1E_30 = a1x->word_0x1E_30;
				v12x->word_0x96_150 = v5x-D41A0_BYTESTR_0.struct_0x6E8E;
				v12x->word_0x2A_42 = a1x->word_0x2A_42;
				v12x->byte_0x46_70 = a1x->byte_0x46_70;
				sub_57F10(a1x);
			}
		}
	}
	//return v6x;
}

//----- (00066610) --------------------------------------------------------
void sub_66610(type_str_0x6E8E* a1x)//247610
{
	char v1; // dl
	type_str_0x6E8E* v2x; // eax
	int16_t v3; // dx
	//int16_t v4; // cx
	int v5; // ecx
	char v7; // [esp+0h] [ebp-4h]

	v7 = 0;
	if (x_DWORD_EA3E4[0] >= x_DWORD_EA3E4[a1x->word_0x96_150])
	{
		v1 = a1x->struct_byte_0xc_12_15.byte[0];
		if (!(v1 & 2))
		{
			a1x->struct_byte_0xc_12_15.byte[0] = v1 | 2;
			if (sub_68940(a1x) || sub_67CB0(a1x))
			{
				a1x->word_0x1C_28 = a1x->word_0x20_32;
				a1x->word_0x1E_30 = a1x->word_0x22_34;
			}
			else
			{
				a1x->word_0x20_32 = a1x->word_0x1C_28;
				a1x->word_0x22_34 = a1x->word_0x1E_30;
			}
		}
	}
	x_WORD_EB398ar = a1x->array_0x4C_76;
	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
	a1x->array_0x4C_76 = x_WORD_EB398ar;
	v2x = sub_10780(a1x);
	if (v2x)
	{
		v7 = 1;
		a1x->array_0x4C_76 = v2x->array_0x4C_76;
	}
	else
	{
		//LOWORD(v2) = sub_10C40_getTerrainAlt(a1x->array_0x4C_76);
		v3 = a1x->array_0x4C_76.z;
		x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		if (x_WORD_EB398ar.z > v3
			|| x_BYTE_D41B6
			&& (x_WORD_EB398ar.z = sub_10C60(&a1x->array_0x4C_76) - a1x->array_0x52_82.dd,
				//x_WORD_EB398ar[2] = (short)v2,
				//v4 = x_WORD_EB398ar[2],
				//LOWORD(v2) = *(x_WORD *)(a1 + 80),
				a1x->array_0x4C_76.z > x_WORD_EB398ar.z)
			|| (v5 = a1x->dword_0x8 - 1, a1x->dword_0x8 = v5, v5 < 0))
		{
			v7 = 1;
		}
	}
	if (v7)
		sub_57F10(a1x);
	//return v2;
}

//----- (00066750) --------------------------------------------------------
void sub_66750(type_str_0x6E8E* a1x)//247750
{
	int16_t v1; // di
	int16_t v2; // si
	int v3; // edx
	int16_t v4; // ST08_2
	uint16_t v5; // ST04_2
	type_str_0x6E8E* v6x; // eax
	type_str_0x6E8E* v7x; // esi
	int16_t v8; // cx
	int v9; // esi
	int v10; // esi
	int v11; // esi
	uint16_t v12; // ax
	type_str_0x6E8E* v13x; // esi
	type_str_0x6E8E* v14x; // eax
	int v14b; // eax
	type_str_0x6E8E* v15x; // edi
	char v16; // cl
	axis_3d v18x; // [esp+0h] [ebp-2Ch]
	//int16_t v19; // [esp+4h] [ebp-28h]
	axis_3d v20x; // [esp+8h] [ebp-24h]
	//int16_t v21; // [esp+Ch] [ebp-20h]
	axis_3d v22x; // [esp+10h] [ebp-1Ch]
	//int v23; // [esp+14h] [ebp-18h]
	type_str_0x6E8E* v24x; // [esp+18h] [ebp-14h]
	int v25; // [esp+1Ch] [ebp-10h]
	int v26; // [esp+20h] [ebp-Ch]
	int v27; // [esp+24h] [ebp-8h]
	int v28; // [esp+28h] [ebp-4h]

	a1x->word_0x82_130 = a1x->word_0x84_132;
	v18x = a1x->array_0x4C_76;
	sub_57E50(a1x);
	sub_66610(a1x);
	v1 = a1x->word_0x1C_28;
	v2 = a1x->word_0x1E_30;
	v27 = 1;
	while (!(a1x->struct_byte_0xc_12_15.byte[1] & 4))
	{
		sub_66610(a1x);
		v27++;
	}
	a1x->word_0x1C_28 = v1;
	a1x->word_0x1E_30 = v2;
	v22x.x = 0;
	v22x.y = 0;
	v22x.z = 0;
	v3 = a1x->word_0x82_130;
	v27 *= 8;
	//v26 = (v3 - (__CFSHL__(v3 >> 31, 3) + 8 * (v3 >> 31))) >> 3;
	v26 = (v3 - my_sign32(v3) * 8 + my_sign32(v3)) >> 3;
	v4 = a1x->word_0x1E_30;
	v5 = a1x->word_0x1C_28;
	v25 = 0;
	v28 = 0;
	sub_57FA0(&v22x, v5, v4, v26);
	x_WORD_EB398ar = v18x;
	v20x = v18x;
	while ((v27 & 0x8000u) == 0)
	{
		v6x = sub_4A050_new_event();
		v7x = v6x;
		if (v6x)
		{
			v6x->byte_0x45_69 = 14;
			v6x->byte_0x3F_63 = 9;
			v6x->byte_0x40_64 = 9;
			v6x->word_0x1A_26 = a1x->word_0x1A_26;
			v6x->dword_0x4 = (v6x >= a1x) - 1;
			sub_49CD0(v6x, 216);
			sub_57D70_actualize_event(v7x, &v20x);
			sub_49A20_remove_event(v7x);
		}
		v8 = (int16_t)v27 / 2;
		if ((int16_t)v27 / 2 < 0)
			v8 = 0;
		if (v8 > 8)
			v8 = 8;
		if (v8 >= (int16_t)v28)
		{
			v10 = (int16_t)v28;
			if ((int16_t)v28 < -v8)
			{
				++v28;
				goto LABEL_17;
			}
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			v9 = 2 * ((signed int)(a1x->word_0x14_20 % 0x9Du) / 79) - 1 + v10;
		}
		else
		{
			v9 = v28 - 1;
		}
		v28 = v9;
	LABEL_17:
		if (v8 >= (int16_t)v25)
		{
			v11 = (int16_t)v25;
			if ((int16_t)v25 >= -v8)
			{
				a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
				v25 = 2 * ((signed int)(a1x->word_0x14_20 % 0x9Du) / 79) - 1 + v11;
			}
			else
			{
				v25++;
			}
		}
		else
		{
			v25--;
		}
		x_WORD_EB398ar.x += v22x.x;
		x_WORD_EB398ar.y += v22x.y;
		x_WORD_EB398ar.z += v22x.z;
		v20x = x_WORD_EB398ar;
		v20x.z = v28
			* (((int16_t)v26 - (__CFSHL__((int16_t)v26 >> 31, 2) + 4 * ((int16_t)v26 >> 31))) >> 2)
			+ x_WORD_EB398ar.z;
		v12 = a1x->word_0x1C_28;
		HIBYTE(v12) = (HIBYTE(v12) + 2) & 7;
		sub_57FA0(
			&v20x,
			v12,
			0,
			v28 * (((int16_t)v26 - (__CFSHL__((int16_t)v26 >> 31, 2) + 4 * ((int16_t)v26 >> 31))) >> 2));
		v27--;
	}
	v13x = sub_10780(a1x);
	v24x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v14x = sub_4A190(&v20x, a1x->byte_0x43_67, a1x->byte_0x44_68);
	v15x = v14x;
	if (!v14x)
		return;// (short)v14x;
	sub_65780(a1x, v13x, v24x);
	sub_686D0(a1x, v13x);
	sub_68AC0(a1x, v13x);
	if (v13x > x_DWORD_EA3E4[0])
		sub_6D8B0(a1x->word_0x1A_26, 7u, 1);
	v15x->word_0x1A_26 = a1x->word_0x1A_26;
	v15x->word_0x1C_28 = a1x->word_0x1C_28;
	v15x->word_0x1E_30 = a1x->word_0x1E_30;
	v16 = 0;
	//fix
	if (v13x == NULL)
		v15x->word_0x96_150 = 0xae02;
	else
	//fix
		v15x->word_0x96_150 = v13x - D41A0_BYTESTR_0.struct_0x6E8E;
	if (!v13x || v13x->byte_0x3F_63 != 3 || !(v13x->struct_byte_0xc_12_15.word[0] & 0x8010))
	{
	LABEL_35:
		v16 = 1;
		goto LABEL_36;
	}
	if (v13x->struct_byte_0xc_12_15.byte[1] >= 0)
	{
		//v14b = (a1x->dword_0x90_144 - (__CFSHL__(a1x->dword_0x90_144 >> 31, 3) + 8 * (a1x->dword_0x90_144 >> 31))) >> 3;
		v14b = (a1x->dword_0x90_144 - (my_sign32(a1x->dword_0x90_144) * 8) + my_sign32(a1x->dword_0x90_144)) >> 3;
		if (v14b <= a1x->dword_0x90_144)
		{
			v14b = a1x->word_0x2A_42 / 2;
			v15x->word_0x2A_42 = v14b;
			goto LABEL_36;
		}
		goto LABEL_35;
	}
	//v14b = (a1x->dword_0x90_144 - (__CFSHL__(a1x->dword_0x90_144 >> 31, 2) + 4 * (a1x->dword_0x90_144 >> 31))) >> 2;
	v14b = (a1x->dword_0x90_144 - (my_sign32(a1x->dword_0x90_144) * 4) + my_sign32(a1x->dword_0x90_144)) >> 2;
	if (v14b > v13x->dword_0x90_144)
		goto LABEL_35;
	//v14b = a1x->word_0x2A_42 >> 2;
	v15x->word_0x2A_42 = a1x->word_0x2A_42 >> 2;
LABEL_36:
	if (v16)
	{
		//LOWORD(v14b) = a1x->word_0x2A_42;
		v15x->word_0x2A_42 = a1x->word_0x2A_42;
	}
	//return v14b;
}

//----- (00066B30) --------------------------------------------------------
void sub_66B30(type_str_0x6E8E* a1x)//247b30
{
	type_str_0x6E8E* v1x; // eax
	int16_t v2; // ax
	int v3; // eax
	int16_t v4; // dx
	int16_t v5; // ax
	int16_t v6; // cx
	int v7; // edi
	type_str_0x6E8E* v8x; // eax
	type_str_0x6E8E* v10x; // [esp+0h] [ebp-8h]
	char v11; // [esp+4h] [ebp-4h]

	//fix
	v2=0;
	//fix

	v11 = 0;
	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v10x = v1x;
	if (v1x > x_DWORD_EA3E4[0])
	{
		sub_656D0(a1x, v1x);
		v3 = a1x->word_0x84_132 - a1x->word_0x82_130;
		if (a1x->word_0x84_132 != a1x->word_0x82_130)
		{
			if (v3 <= 0)
				LOWORD(v3) = -1;
			else
				LOWORD(v3) = 1;
		}
		a1x->word_0x82_130 += 2 * v3;
		x_WORD_EB398ar = a1x->array_0x4C_76;
		sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
		sub_57CF0(a1x, &x_WORD_EB398ar);
		if (sub_106C0(a1x, v10x))
		{
			/*LOBYTE(v2) = */sub_57CF0(a1x, &v10x->array_0x4C_76);
			v11 = 1;
		}
		else
		{
			v2 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
			v4 = a1x->array_0x4C_76.z;
			x_WORD_EB398ar.z = v2;
			if (v2 > v4
				|| x_BYTE_D41B6
				&& (v5 = sub_10C60(&a1x->array_0x4C_76) - a1x->array_0x52_82.dd,
					x_WORD_EB398ar.z = v5,
					v6 = v5,
					v2 = a1x->array_0x4C_76.z,
					v2 > v6))
			{
				//LOBYTE(v2) = x_WORD_EB398ar.z;
				v11 = 1;
				a1x->array_0x4C_76.z = x_WORD_EB398ar.z;
			}
			else
			{
				v7 = a1x->dword_0x8 - 1;
				a1x->dword_0x8 = v7;
				if (v7 < 0)
					v11 = 1;
			}
		}
		if (v11)
		{
			if (a1x->byte_0x43_67 == 3 && x_DWORD_EA3E4[a1x->word_0x1A_26]->dword_0xA4_164x->word_0x3A_58)
			{
				sub_57F10(a1x);
			}
			else
			{
				v8x = sub_4A190(&a1x->array_0x4C_76, a1x->byte_0x43_67, a1x->byte_0x44_68);
				if (v8x)
				{
					v8x->word_0x1A_26 = a1x->word_0x1A_26;
					sub_57F10(a1x);
				}
				else
				{
					/*LOBYTE(v2) = */sub_5F890(x_DWORD_EA3E4[a1x->word_0x1A_26], 0);
				}
			}
		}
	}
	else
	{
		LOBYTE(v2) = sub_66D00(a1x);
	}
	//return v2;
}

//----- (00066D00) --------------------------------------------------------
char sub_66D00(type_str_0x6E8E* a1x)//247d00
{
	char v1; // dh
	type_str_0x6E8E* v2x; // eax
	int16_t v3; // ax
	int16_t v4; // ax
	int16_t v5; // ax
	uint16_t v6; // ax
	type_str_0x6E8E* v7x; // esi
	int16_t v8; // di
	//int16_t v9; // dx
	int v10; // ecx
	uint16_t v11; // ax
	char v13; // [esp+0h] [ebp-8h]
	char v14; // [esp+4h] [ebp-4h]

	//fix
	v2x = 0;
	//fix

	v1 = a1x->struct_byte_0xc_12_15.byte[0];
	v13 = 0;
	v14 = 0;
	if (!(v1 & 2))
	{
		a1x->struct_byte_0xc_12_15.byte[0] = v1 | 2;
		//LOBYTE(v2) = sub_11CB0(&a1x->array_0x4C_76);
		if (!sub_11CB0(&a1x->array_0x4C_76))
		{
			sub_5F890(a1x, 0);
			sub_57F10(a1x);
			/*LOBYTE(v2) = */sub_88D00();
		}
		// FIXME: types
		// return (char)v2x;
		return '\0';
	}
	a1x->word_0x20_32 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a1x->word_0x9A_154x);
	a1x->word_0x22_34 = sub_58210_radix_tan(&a1x->array_0x4C_76, &a1x->word_0x9A_154x);
	v3 = a1x->word_0x1C_28
		+ sub_58350(
			a1x->word_0x1C_28,
			a1x->word_0x20_32,
			a1x->dword_0xA0_160x->word_160_0x4_4,
			a1x->dword_0xA0_160x->word_160_0x2_2);
	HIBYTE(v3) &= 7u;
	a1x->word_0x1C_28 = v3;
	v4 = a1x->word_0x1E_30
		+ sub_58350(
			a1x->word_0x1E_30,
			a1x->word_0x22_34,
			a1x->dword_0xA0_160x->word_160_0x8_8,
			a1x->dword_0xA0_160x->word_160_0x6_6);
	HIBYTE(v4) &= 7u;
	a1x->word_0x1E_30 = v4;
	v5 = a1x->word_0x84_132 - a1x->word_0x82_130;
	if (a1x->word_0x84_132 != a1x->word_0x82_130)
	{
		if (a1x->word_0x84_132 - a1x->word_0x82_130 <= 0)
			v5 = -1;
		else
			v5 = 1;
	}
	a1x->word_0x82_130 += 2 * v5;
	x_WORD_EB398ar = a1x->array_0x4C_76;
	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
	sub_57CF0(a1x, &x_WORD_EB398ar);
	v6 = a1x->word_0x96_150;
	v7x = x_DWORD_EA3E4[v6];
	if (v7x > x_DWORD_EA3E4[0] && sub_106C0(a1x, x_DWORD_EA3E4[v6]))
	{
		sub_65580(v7x);
		/*LOBYTE(v2) = */sub_57CF0(a1x, &v7x->array_0x4C_76);
		v13 = 1;
		goto LABEL_18;
	}
	//LOWORD(v2x) = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	v8 = a1x->array_0x4C_76.z;
	x_WORD_EB398ar.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	if (x_WORD_EB398ar.z > v8
		|| x_BYTE_D41B6
		&& (x_WORD_EB398ar.z = sub_10C60(&a1x->array_0x4C_76) - a1x->array_0x52_82.dd,
			//x_WORD_EB398ar.z = (short)v2,
			//v9 = (short)v2,
			//LOWORD(v2) = a1x->array_0x4C_76.z,
			a1x->array_0x4C_76.z > x_WORD_EB398ar.z))
	{
		//LOBYTE(v2) = x_WORD_EB398ar[2];
		a1x->array_0x4C_76.z = x_WORD_EB398ar.z;
	LABEL_17:
		v13 = 1;
		goto LABEL_18;
	}
	v10 = a1x->dword_0x8 - 1;
	a1x->dword_0x8 = v10;
	if (v10 < 0)
		goto LABEL_17;
	//LOBYTE(v2) = sub_11CB0(&a1x->array_0x4C_76) == 0;
	v14 = sub_11CB0(&a1x->array_0x4C_76) == 0;
	if (v14)
		goto LABEL_17;
LABEL_18:
	if (v13)
	{
		if (v14)
		{
			x_WORD_EB398ar = a1x->array_0x4C_76;
			//*(x_WORD_EB398ar + 2) = *(x_WORD *)(a1 + 80);
			v11 = a1x->word_0x1C_28;
			HIBYTE(v11) = (HIBYTE(v11) + 4) & 7;
			sub_57FA0(&x_WORD_EB398ar, v11, a1x->word_0x1E_30, a1x->word_0x82_130);
			sub_57CF0(a1x, &x_WORD_EB398ar);
		}
		v2x = sub_4A190(&a1x->array_0x4C_76, a1x->byte_0x43_67, a1x->byte_0x44_68);
		if (v2x)
		{
			v2x->word_0x1A_26 = a1x->word_0x1A_26;
			sub_57F10(a1x);
		}
	}
	// FIXME: types
	// return (char)v2x;
	return '\0';
}

//----- (00066FB0) --------------------------------------------------------
type_str_0x6E8E* sub_66FB0(type_str_0x6E8E* a1)//247fb0
{
	return sub_65820(a1);
}

//----- (00066FD0) --------------------------------------------------------
void sub_66FD0(type_str_0x6E8E* a1x)//247fd0
{
	type_str_0x6E8E* v1x; // eax
	char v2; // dl
	int v3; // esi
	uint16_t v4; // dx
	int16_t v5; // ax
	type_str_0x6E8E* v6x; // eax
	type_str_0x6E8E* v7x; // edi
	//Bit8u* v8; // eax
	int16_t v9; // ax
	int16_t v10; // dx
	type_str_0x6E8E* v11x; // eax
	type_str_0x6E8E* v12x; // esi
	type_str_0x6E8E* v14x; // [esp+0h] [ebp-8h]
	char v15; // [esp+4h] [ebp-4h]

	//fix
	//v8 = 0;
	//fix

	v15 = 0;
	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v14x = v1x;
	if (v1x <= x_DWORD_EA3E4[0])
	{
		v2 = a1x->struct_byte_0xc_12_15.byte[0];
		if (!(v2 & 2))
		{
			a1x->struct_byte_0xc_12_15.byte[0] = v2 | 2;
			if (sub_68940(a1x))
			{
				v3 = a1x->dword_0x8 + 32;
				a1x->word_0x1C_28 = a1x->word_0x20_32;
				a1x->dword_0x8 = v3;
				a1x->dword_0x4 = v3;
				v4 = a1x->word_0x34_52;
				a1x->word_0x1E_30 = a1x->word_0x22_34;
				if (v4)
				{
					sub_57F20(x_DWORD_EA3E4[v4]);
					a1x->word_0x34_52 = 0;
				}
			}
			else if (sub_67CB0(a1x))
			{
				a1x->word_0x1C_28 = a1x->word_0x20_32;
				a1x->word_0x1E_30 = a1x->word_0x22_34;
			}
			else
			{
				a1x->word_0x20_32 = a1x->word_0x1C_28;
				a1x->word_0x22_34 = a1x->word_0x1E_30;
			}
		}
	}
	else
	{
		sub_65610(a1x, v1x);
	}
	v5 = a1x->word_0x84_132 - a1x->word_0x82_130;
	if (a1x->word_0x84_132 != a1x->word_0x82_130)
	{
		if (a1x->word_0x84_132 - a1x->word_0x82_130 <= 0)
			v5 = -1;
		else
			v5 = 1;
	}
	a1x->word_0x82_130 += 2 * v5;
	x_WORD_EB398ar = a1x->array_0x4C_76;
	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
	sub_57CF0(a1x, &x_WORD_EB398ar);
	v6x = sub_10780(a1x);
	v7x = v6x;
	if (v6x)
	{
		if (v6x->struct_byte_0xc_12_15.word[0] & 0x8010)
		{
			//LOBYTE(v8) = sub_68740(a1, v6, 0x2Du, 22);
			if (sub_68740(a1x, v6x, 0x2Du, 22))
				return;// (char)v8;
		}
		sub_65580(v7x);
		sub_57CF0(a1x, &v7x->array_0x4C_76);
		/*LOBYTE(v8) = */sub_655A0(v7x);
		v15 = 1;
	}
	else
	{
		v9 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		v10 = a1x->array_0x4C_76.z;
		x_WORD_EB398ar.z = v9;
		if (v9 > v10
			|| x_BYTE_D41B6
			&& (x_WORD_EB398ar.z = sub_10C60(&a1x->array_0x4C_76) - a1x->array_0x52_82.dd, a1x->array_0x4C_76.z > x_WORD_EB398ar.z))
		{
			//LOBYTE(v8) = x_WORD_EB398ar[2];
			a1x->array_0x4C_76.z = x_WORD_EB398ar.z;
			if (a1x->byte_0x40_64 != 4)
			{
				//v8 = (Bit8u*)sub_104D0_terrain_tile_is_water((int16_t *)(a1 + 76));
				if (sub_104D0_terrain_tile_is_water(&a1x->array_0x4C_76) == 1)
				{
					v11x = sub_4A190(&a1x->array_0x4C_76, 10, 5);
					if (v11x)
						v11x->word_0x1A_26 = a1x->word_0x1A_26;
					sub_57F10(a1x);
					goto LABEL_28;
				}
			}
		}
		else
		{
			//v8 = (Bit8u*)(*(x_DWORD *)(a1 + 8) - 1);
			// FIXME: types
			// a1x->dword_0x8 = (x_DWORD)(Bit8u*)(a1x->dword_0x8 - 1);
			if (a1x->dword_0x8 >= 0)
				goto LABEL_28;
		}
		v15 = 1;
	}
LABEL_28:
	if (v15)
	{
		if (sub_68AC0(a1x, v7x))
		{
			sub_57F10(a1x);
		}
		else
		{
			//v8 = sub_4A190((Bit8u*)(a1 + 76), 10, 38);
			v12x = sub_4A190(&a1x->array_0x4C_76, 10, 38);
			if (v12x)
			{
				sub_65780(a1x, v7x, v14x);
				if (v7x > x_DWORD_EA3E4[0])
					sub_6D8B0(a1x->word_0x1A_26, 7u, 1);
				v12x->word_0x1A_26 = a1x->word_0x1A_26;
				v12x->word_0x1C_28 = a1x->word_0x1C_28;
				v12x->word_0x1E_30 = a1x->word_0x1E_30;
				if (v7x == 0)
				{
					v12x->word_0x96_150 = 0xae02;//fix
				}
				else
					v12x->word_0x96_150 = v7x-D41A0_BYTESTR_0.struct_0x6E8E;
				v12x->word_0x2A_42 = a1x->word_0x2A_42;
				v12x->byte_0x43_67 = a1x->byte_0x43_67;
				v12x->byte_0x44_68 = a1x->byte_0x44_68;
				sub_57F10(a1x);
			}
		}
	}
	//return (char)v8;
}

//----- (000672E0) --------------------------------------------------------
void sub_672E0(type_str_0x6E8E* a1x)//2482e0
{
	//Bit8u* v1; // esi
	//int v2; // eax
	type_str_0x6E8E* v3x; // edi
	//int v4; // eax
	//char result; // al

	if (!(a1x->struct_byte_0xc_12_15.byte[0] & 2))
	{
		//v1 = x_D41A0_BYTEARRAY_0;
		//v2 = 9377 * *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) + 9439;
		//*(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8) = v2;
		D41A0_BYTESTR_0.dword_0x8=9377 * D41A0_BYTESTR_0.dword_0x8 + 9439;
		sub_6E450_distance_sound(a1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, (D41A0_BYTESTR_0.dword_0x8 & 1) + 33);
		a1x->struct_byte_0xc_12_15.byte[0] |= 2u;
	}
	x_WORD_EB398ar = a1x->array_0x4C_76;
	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
	v3x = sub_10780(a1x);
	if (sub_10C40_getTerrainAlt(&x_WORD_EB398ar) <= x_WORD_EB398ar.z)
	{
		//v4 = *(x_DWORD *)(a1 + 8);
		//(a1x->dword_0x8)--;// = v4 - 1;
		if (a1x->dword_0x8--)
		{
			if (!v3x)
			{
				sub_57CF0(a1x, &x_WORD_EB398ar);
				return;
			}
		}
	}
	if (!v3x)
	{
	LABEL_10:
		sub_10C80(a1x, 0, a1x->word_0x2A_42);
		sub_57F10(a1x);
		return;//fix
	}
	if (!(v3x->struct_byte_0xc_12_15.word[0] & 0x8010) || (/*result = */sub_68740(a1x, v3x, 0x2Du, 22)) == 0)
	{
		sub_65580(v3x);
		sub_57CF0(a1x, &v3x->array_0x4C_76);
		sub_655A0(v3x);
		goto LABEL_10;
	}
	return;// result;
}

//----- (00067410) --------------------------------------------------------
void sub_67410(type_str_0x6E8E* a1x)//248410
{
	int result; // eax

	result = a1x->dword_0x8;
	a1x->dword_0x8 = result - 1;
	if (result < 0)
		sub_57F10(a1x);
	//return result;
}

//----- (00067430) --------------------------------------------------------
void sub_67430(type_str_0x6E8E* a1)//248430
{
	sub_65820(a1);
}

//----- (00067450) --------------------------------------------------------
void sub_67450(type_str_0x6E8E* a1)//248450
{
	sub_65820(a1);
}

//----- (00067470) --------------------------------------------------------
void sub_67470(type_str_0x6E8E* a1x)//248470
{
	type_str_0x6E8E* resultx; // eax
	char v2; // dh

	/*result = */sub_65820(a1x);
	//BYTE1(result) = *(x_BYTE *)(a1 + 63);
	if (a1x->byte_0x3F_63)
	{
		resultx = sub_4A190(&a1x->array_0x4C_76, 10, 0);
		if (resultx)
		{
			resultx->struct_byte_0xc_12_15.byte[0] |= 0x80u;
			v2 = resultx->struct_byte_0xc_12_15.byte[2] | 1;
			resultx->word_0x1A_26 = a1x->word_0x1A_26;
			resultx->struct_byte_0xc_12_15.byte[2] = v2;
		}
	}
	//return result;
}

//----- (000674C0) --------------------------------------------------------
void sub_674C0(type_str_0x6E8E* a1x)//2484c0
{
	type_str_0x6E8E* v1x; // eax
	char v2; // dl
	int16_t v3; // ax
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // esi
	type_str_0x6E8E* v6x; // edi
	int16_t result; // ax
	int16_t v8; // cx
	int16_t v9; // ax
	int16_t v10; // si
	int v11; // esi
	type_str_0x6E8E* v12x; // eax
	type_str_0x6E8E* v13x; // esi
	type_str_0x6E8E* v14x; // esi
	type_str_0x6E8E* v15x; // [esp+0h] [ebp-8h]
	char v16; // [esp+4h] [ebp-4h]

	v16 = 0;
	v1x = x_DWORD_EA3E4[a1x->word_0x96_150];
	v15x = v1x;
	if (v1x <= x_DWORD_EA3E4[0])
	{
		v2 = a1x->struct_byte_0xc_12_15.byte[0];
		if (!(v2 & 2))
		{
			a1x->struct_byte_0xc_12_15.byte[0] = v2 | 2;
			if (sub_67CB0(a1x))
			{
				a1x->word_0x1C_28 = a1x->word_0x20_32;
				a1x->word_0x1E_30 = a1x->word_0x22_34;
			}
		}
	}
	else
	{
		sub_65610(a1x, v1x);
	}
	x_WORD_EB398ar = a1x->array_0x4C_76;

	sub_57FA0(&x_WORD_EB398ar, a1x->word_0x1C_28, a1x->word_0x1E_30, a1x->word_0x82_130);
	v3 = sub_10C40_getTerrainAlt(&x_WORD_EB398ar);
	if (v3 > x_WORD_EB398ar.z)
		x_WORD_EB398ar.z = v3;
	sub_57CF0(a1x, &x_WORD_EB398ar);
	v4x = sub_108B0(a1x);
	v5x = v4x;
	v6x = v4x;
	if (v4x)
	{
		sub_65580(v4x);
		sub_57CF0(a1x, &v5x->array_0x4C_76);
		/*result = */sub_655A0(v5x);
		v16 = 1;
		goto LABEL_16;
	}
	result = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
	v8 = a1x->array_0x4C_76.z;
	x_WORD_EB398ar.z = result;
	if (result > v8
		|| x_BYTE_D41B6
		&& (v9 = sub_10C60(&a1x->array_0x4C_76) - a1x->array_0x52_82.dd,
			x_WORD_EB398ar.z = v9,
			v10 = v9,
			result = a1x->array_0x4C_76.z,
			result > v10))
	{
		result = x_WORD_EB398ar.z;
		a1x->array_0x4C_76.z = x_WORD_EB398ar.z;
	}
	else
	{
		v11 = a1x->dword_0x8 - 1;
		a1x->dword_0x8 = v11;
		if (v11 >= 0)
			goto LABEL_16;
	}
	v16 = 1;
LABEL_16:
	if (v16)
	{
		if (v6x)
		{
			if (a1x->byte_0x43_67 != 10 || a1x->byte_0x44_68 != 69)
				v12x = sub_4A190(&a1x->array_0x4C_76, 10, 12);
			else
				v12x = sub_4A190(&a1x->array_0x4C_76, 10, 70);
			v13x = v12x;
			if (v12x)
			{
				sub_65780(a1x, v6x, v15x);
				v13x->word_0x1A_26 = a1x->word_0x1A_26;
				v13x->word_0x1C_28 = a1x->word_0x1C_28;
				v13x->word_0x1E_30 = a1x->word_0x1E_30;
			}
			v14x = sub_4A190(&a1x->array_0x4C_76, a1x->byte_0x43_67, a1x->byte_0x44_68);
			if (v14x)
			{
				sub_65780(a1x, v6x, v15x);
				sub_6D8B0(a1x->word_0x1A_26, 1u, 1);
				v14x->word_0x1A_26 = a1x->word_0x1A_26;
				v14x->word_0x1C_28 = a1x->word_0x1C_28;
				v14x->word_0x1E_30 = a1x->word_0x1E_30;
				v14x->dword_0x10_16 = a1x->dword_0x10_16;
			}
		}
		sub_57F10(a1x);
	}
	//return result;
}

//----- (000676F0) --------------------------------------------------------
type_str_0x6E8E* sub_676F0(type_str_0x6E8E* a1x)//2486f0
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_4A190(&a1x->array_0x4C_76, a1x->byte_0x43_67, a1x->byte_0x44_68);
	if (resultx)
	{
		resultx->word_0x1A_26 = a1x->word_0x1A_26;
		resultx->word_0x1C_28 = a1x->word_0x1C_28;
		resultx->word_0x1E_30 = a1x->word_0x1E_30;
		resultx->word_0x2A_42 = a1x->word_0x2A_42;
		sub_57F10(a1x);
	}
	return resultx;
}

//----- (00067740) --------------------------------------------------------
type_str_0x6E8E* sub_67740(type_str_0x6E8E* a1)//248740
{
	return sub_65820(a1);
}

//----- (00067760) --------------------------------------------------------
type_str_0x6E8E* sub_67760(type_str_0x6E8E* a1)//248760
{
	return sub_65820(a1);
}

//----- (00067780) --------------------------------------------------------
type_str_0x6E8E* sub_67780(type_str_0x6E8E* a1)//248780
{
	return sub_65820(a1);
}

//----- (000677A0) --------------------------------------------------------
type_str_0x6E8E* sub_677A0(type_str_0x6E8E* a1x)//2487a0
{
	type_str_0x6E8E* resultx; // eax
	int v2; // edx

	resultx = sub_65820(a1x);
	if (resultx)
	{
		v2 = a1x->byte_0x46_70;
		resultx->byte_0x46_70 = 0;
		resultx->dword_0x8 = v2;
	}
	return resultx;
}

//----- (000677D0) --------------------------------------------------------
type_str_0x6E8E* sub_677D0(type_str_0x6E8E* a1x)//2487d0
{
	type_str_0x6E8E* resultx; // eax
	int v2; // edx

	resultx = sub_65820(a1x);
	if (resultx)
	{
		v2 = a1x->byte_0x46_70;
		LOBYTE(v2) = v2 & 0xF0;
		resultx->byte_0x46_70 = 0;
		resultx->dword_0x4 = v2;
		resultx->dword_0x8 = v2;
	}
	return resultx;
}

//----- (00067800) --------------------------------------------------------
type_str_0x6E8E* sub_67800(type_str_0x6E8E* a1x)//248800
{
	uint8_t v1; // al
	type_str_0x6E8E* resultx; // eax

	v1 = a1x->byte_0x46_70;
	if (v1 < 0x10u)
	{
		if (v1 != 2)
			goto LABEL_10;
	LABEL_8:
		x_D41A0_BYTEARRAY_4_struct.byteindex_224 = 8;
		goto LABEL_11;
	}
	if (v1 <= 0x10u || v1 < 0x13u)
		goto LABEL_10;
	if (v1 <= 0x13u)
		goto LABEL_8;
	if (v1 == 25)
	{
		x_D41A0_BYTEARRAY_4_struct.byteindex_224 = 4;
		goto LABEL_11;
	}
LABEL_10:
	x_D41A0_BYTEARRAY_4_struct.byteindex_224 = 2;
LABEL_11:
	resultx = sub_65820(a1x);
	if (resultx)
	{
		while (resultx != x_DWORD_EA3E4[0])
		{
			resultx->byte_0x46_70 = a1x->byte_0x46_70;
			resultx->word_0x28_40 = a1x->word_0x28_40;
			resultx->word_0x1A_26 = a1x->word_0x1A_26;
			resultx = x_DWORD_EA3E4[resultx ->word_0x34_52];
		}
	}
	return resultx;
}

//----- (00067890) --------------------------------------------------------
type_str_0x6E8E* sub_67890(type_str_0x6E8E* a1x)//248890
{
	type_str_0x6E8E* resultx; // eax
	char v2; // dh

	resultx = sub_65820(a1x);
	if (resultx)
	{
		resultx = x_DWORD_EA3E4[a1x->word_0x1A_26];
		if (resultx > x_DWORD_EA3E4[0] && resultx->byte_0x3F_63 == 3)
		{
			v2 = resultx->byte_0x40_64;
			if (!v2 || v2 == 1)
				resultx->word_0x96_150 = 0;
		}
	}
	return resultx;
}

//----- (000678E0) --------------------------------------------------------
type_str_0x6E8E* sub_678E0(type_str_0x6E8E* a1x)//2488e0
{
	type_str_0x6E8E* resultx; // eax
	int v2; // edx

	resultx = sub_65820(a1x);
	if (resultx)
	{
		v2 = 8 * a1x->byte_0x46_70;
		resultx->dword_0x4 = v2;
		resultx->dword_0x8 = v2;
	}
	return resultx;
}

//----- (00067910) --------------------------------------------------------
type_str_0x6E8E* sub_67910(type_str_0x6E8E* a1x)//248910
{
	type_str_0x6E8E* resultx; // eax
	int v2; // edx

	resultx = sub_65820(a1x);
	if (resultx)
	{
		v2 = a1x->byte_0x46_70;
		resultx->byte_0x46_70 = 0;
		resultx->dword_0x4 = v2;
	}
	return resultx;
}

//----- (00067940) --------------------------------------------------------
type_str_0x6E8E* sub_67940(type_str_0x6E8E* a1)//248940
{
	return sub_65820(a1);
}

//----- (00067960) --------------------------------------------------------
void sub_67960(/*type_str_0x6E8E* a1x,*/ type_str_0x6E8E* a2x)//248960
{
	int v2; // eax
	type_str_0x6E8E* v3x; // eax
	type_str_0x6E8E* ix; // edi
	signed int v5; // ST10_4
	signed int v6; // eax
	int v7; // eax
	//uint16_t v8; // ax
	int16_t v9; // ax
	int16_t v10; // dx
	type_str_0x6E8E* resultx; // eax
	int16_t v12; // dx
	axis_3d* v13x; // [esp+4h] [ebp-18h]
	Bit32u v14; // [esp+8h] [ebp-14h]
	type_str_0x6E8E* v15x; // [esp+Ch] [ebp-10h]
	type_str_0x6E8E* v16x; // [esp+10h] [ebp-Ch]
	char v17; // [esp+14h] [ebp-8h]
	char v18; // [esp+18h] [ebp-4h]

	//fix
	resultx = 0;
	//fix

	v15x = 0;
	v17 = 0;
	v18 = 0;
	v14 = 0x10000;
	if (a2x->dword_0x8 == a2x->dword_0x4 && a2x->word_0x2A_42 >= 2u)
	{
		v2 = a2x->word_0x1A_26;
		a2x->word_0x96_150 = 0;
		v3x = x_DWORD_EA3E4[v2];
		v16x = v3x;
		if (v3x > x_DWORD_EA3E4[0] && v3x->byte_0x3F_63 == 3)
		{
			for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38535; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
			{
				if (ix->byte_0x40_64 == 78
					&& ix->word_0x32_50 != a2x->word_0x1A_26
					&& ix->word_0x2A_42 < 2u)
				{
					v5 = v16x->dword_0xA0_160x->word_160_0x1c_28;
					v6 = sub_583F0_distance_3d(&ix->array_0x4C_76, &a2x->array_0x4C_76);
					if (v6 < v5 && v6 < (signed int)v14)
					{
						v15x = ix;
						v14 = v6;
					}
				}
			}
			if (v15x)
			{
				a2x->dword_0x4 = 32;
				a2x->dword_0x8 = a2x->dword_0x4 - 1;
				a2x->word_0x96_150 = v15x - D41A0_BYTESTR_0.struct_0x6E8E;
				sub_655C0(a2x, v15x);
			}
		}
	}
	v7 = a2x->word_0x84_132 - a2x->word_0x82_130;
	if (a2x->word_0x84_132 != a2x->word_0x82_130)
	{
		if (v7 <= 0)
			LOWORD(v7) = -1;
		else
			LOWORD(v7) = 1;
	}
	a2x->word_0x82_130 += 2 * v7;
	if (a2x->word_0x96_150)
	{
		//v8 = a2x->word_0x96_150;
		//a1x = x_DWORD_EA3E4[a2x->word_0x96_150];
		if (x_DWORD_EA3E4[a2x->word_0x96_150] <= x_DWORD_EA3E4[0] || x_DWORD_EA3E4[a2x->word_0x96_150]->dword_0x8 < 0 || x_DWORD_EA3E4[a2x->word_0x96_150]->struct_byte_0xc_12_15.byte[1] & 4)
		{
			a2x->word_0x96_150 = 0;
		}
		else
		{
			sub_65610(a2x, x_DWORD_EA3E4[a2x->word_0x96_150]);
			if (sub_106C0(a2x, x_DWORD_EA3E4[a2x->word_0x96_150]))
				v17 = 1;
		}
	}
	v13x = &a2x->array_0x4C_76;
	if (v17)
	{
		sub_65580(x_DWORD_EA3E4[a2x->word_0x96_150]);
		sub_57CF0(a2x, &x_DWORD_EA3E4[a2x->word_0x96_150]->array_0x4C_76);
		sub_655A0(x_DWORD_EA3E4[a2x->word_0x96_150]);
		x_DWORD_EA3E4[a2x->word_0x96_150]->byte_0x46_70 = 8;
		sub_4A190(v13x, 10, 0);
		sub_57F10(a2x);
	}
	else
	{
		x_WORD_EB398ar = a2x->array_0x4C_76;
		sub_57FA0(&x_WORD_EB398ar, a2x->word_0x1C_28, a2x->word_0x1E_30, a2x->word_0x82_130);
		sub_57CF0(a2x, &x_WORD_EB398ar);
		v9 = sub_10C40_getTerrainAlt(v13x);
		v10 = a2x->array_0x4C_76.z;
		x_WORD_EB398ar.z = v9;
		if (v9 > v10 || x_BYTE_D41B6 && (x_WORD_EB398ar.z = sub_10C60(v13x) - a2x->array_0x52_82.dd, a2x->array_0x4C_76.z > x_WORD_EB398ar.z))
		{
			v18 = 1;
			a2x->array_0x4C_76.z = x_WORD_EB398ar.z;
		}
		//result = *(x_DWORD *)(a2 + 8) - 1;
		a2x->dword_0x8 = a2x->dword_0x8 - 1;
		if (a2x->dword_0x8 < 0)
			v18 = 1;
		if (v18)
		{
			resultx = sub_4A190(&a2x->array_0x4C_76, a2x->byte_0x43_67, a2x->byte_0x44_68);
			if (resultx)
			{
				resultx->word_0x32_50 = a2x->word_0x1A_26;
				v12 = a2x->word_0x2A_42;
				resultx->byte_0x46_70 = 0;
				resultx->word_0x2A_42 = v12;
				sub_57F10(a2x);
			}
		}
	}
}

int debugcounter_249226 = 0;

//----- (00067CB0) --------------------------------------------------------
signed int sub_67CB0(type_str_0x6E8E* a1x)//248cb0
{
	unsigned int v1; // edi
	type_str_0x6E8E* iix; // esi
	unsigned int v3; // ST10_4
	unsigned int v4; // eax
	type_str_0x6E8E* kkx; // esi
	unsigned int v6; // eax
	type_str_0x6E8E* v8x; // esi
	type_str_0x6E8E* ix; // edi
	unsigned int v10; // ST10_4
	unsigned int v11; // eax
	type_str_0x6E8E* kx; // edi
	int16_t v13; // cx
	unsigned int v14; // eax
	type_str_0x6E8E* lx; // edi
	int m; // eax
	unsigned int v17; // eax
	type_str_0x6E8E* v18x; // edi
	type_str_0x6E8E* llx; // esi
	unsigned int v20; // ST10_4
	unsigned int v21; // eax
	type_str_0x6E8E* nnx; // esi
	int16_t v23; // cx
	unsigned int v24; // eax
	unsigned int v25; // edi
	type_str_0x6E8E* v26x; // esi
	uint8_t v27; // al
	int v28; // eax
	int v29; // edx
	unsigned int v30; // eax
	type_str_0x6E8E* i3x; // esi
	unsigned int v32; // eax
	type_str_0x6E8E* i4x; // esi
	int i5; // eax
	unsigned int v35; // eax
	type_str_0x6E8E* v36x; // edi
	type_str_0x6E8E* nx; // esi
	unsigned int v38; // ST10_4
	unsigned int v39; // eax
	type_str_0x6E8E* v40x; // edi
	type_str_0x6E8E* i2x; // esi
	unsigned int v42; // eax
	type_str_0x6E8E* v43x; // [esp+4h] [ebp-40h]
	type_str_0x6E8E* v44x; // [esp+8h] [ebp-3Ch]
	type_str_0x6E8E* v45x; // [esp+Ch] [ebp-38h]
	signed int j; // [esp+10h] [ebp-34h]
	unsigned int v47; // [esp+14h] [ebp-30h]
	unsigned int v48; // [esp+18h] [ebp-2Ch]
	signed int jj; // [esp+1Ch] [ebp-28h]
	signed int mm; // [esp+20h] [ebp-24h]
	signed int i1; // [esp+24h] [ebp-20h]
	type_str_0x6E8E* v52x; // [esp+28h] [ebp-1Ch]
	type_str_0x6E8E* v53x; // [esp+2Ch] [ebp-18h]
	type_str_0x6E8E* v54x; // [esp+30h] [ebp-14h]
	unsigned int v55; // [esp+34h] [ebp-10h]
	type_str_0x6E8E* v56x; // [esp+38h] [ebp-Ch]
	unsigned int v57; // [esp+40h] [ebp-4h]

	switch (a1x->byte_0x40_64)
	{
	case 0:
	case 3:
	case 4:
	case 0x12:
	case 0x13:
	case 0x16:
	case 0x1A:
	case 0x1C:
	case 0x1E:
		v57 = -1;
		v43x = x_DWORD_EA3E4[a1x->word_0x1A_26];
		v8x = 0;
		for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
		{
			if (ix->word_0x1A_26 != a1x->word_0x1A_26 && !(ix->struct_byte_0xc_12_15.byte[0] & 0x20))
			{
				v10 = v43x->dword_0xA0_160x->word_160_0x1c_28;
				if (sub_583F0_distance_3d(&ix->array_0x4C_76, &ix->array_0x4C_76) <= v10)
				{
					v11 = ix->byte_0x40_64 == 2 ? sub_685D0(a1x, ix, 0x71u, 0x71u) : sub_68490(
						a1x,
						ix,
						0x71u,
						0x71u);
					if (v11 < v57)
					{
						v8x = ix;
						v57 = v11;
					}
				}
			}
		}
		for (j = 0; j < 29; j++)
		{
			if (j != 22)
			{
				for (kx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[j]; kx > x_DWORD_EA3E4[0]; kx = kx->next_0)
				{
					v13 = a1x->word_0x1A_26;
					if (kx->word_0x1A_26 != v13
						&& kx->byte_0x39_57
						&& (kx->byte_0x49_73 != 14 || kx->word_0x28_40 != v13))
					{
						v14 = sub_68490(a1x, kx, 0x71u, 0x71u);
						if (v14 < v57)
						{
							v8x = kx;
							v57 = v14;
						}
					}
				}
			}
		}
		if (!v8x)
		{
			for (lx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[88/4]; lx > x_DWORD_EA3E4[0]; lx = lx->next_0)
			{
				if (lx->byte_0x39_57)
				{
					for (m = lx->word_0x34_52; ; m = v53x->word_0x34_52)
					{
						v53x = x_DWORD_EA3E4[m];
						if (v53x == x_DWORD_EA3E4[0])
							break;
						v17 = sub_68490(a1x, v53x, 0x71u, 0x71u);
						if (v17 < v57)
						{
							v8x = v53x;
							v57 = v17;
						}
					}
				}
			}
		}
		if (!v8x)
			return 0;
		a1x->word_0x96_150 = v8x - D41A0_BYTESTR_0.struct_0x6E8E;
		sub_68BD0(a1x, v8x);
		sub_655C0(a1x, v8x);
		if (v8x->byte_0x3F_63 == 3 && !v8x->byte_0x40_64)
			sub_5EF70(v8x);
		return 1;
	case 1:
	case 0x11:
		v25 = -1;
		v56x = 0;
		v26x = x_D41A0_BYTEARRAY_4_struct.dword_38523;
		break;
	case 7:
	case 8:
	case 0xB:
	case 0xC:
		v48 = -1;
		v36x = 0;
		v44x = x_DWORD_EA3E4[a1x->word_0x1A_26];
		for (nx = x_D41A0_BYTEARRAY_4_struct.dword_38519; nx > x_DWORD_EA3E4[0]; nx = nx->next_0)
		{
			if (nx->word_0x1A_26 != a1x->word_0x1A_26 && !(nx->struct_byte_0xc_12_15.byte[0] & 0x20))
			{
				v38 = v44x->dword_0xA0_160x->word_160_0x1c_28;
				if (sub_583F0_distance_3d(&nx->array_0x4C_76, &a1x->array_0x4C_76) <= v38)
				{
					v39 = sub_68490(a1x, nx, 0x71u, 0x71u);
					if (v39 < v48)
					{
						v36x = nx;
						v48 = v39;
					}
				}
			}
		}
		if (!v36x)
			return 0;
		a1x->word_0x96_150 = v36x - D41A0_BYTESTR_0.struct_0x6E8E;
		sub_655C0(a1x, v36x);
		if (v36x->byte_0x3F_63 == 3 && !v36x->byte_0x40_64)
			sub_5EF70(v36x);
		return 1;
	case 9:
		v1 = -1;
		v54x = 0;
		for (iix = x_D41A0_BYTEARRAY_4_struct.dword_38519; iix > x_DWORD_EA3E4[0]; iix = iix->next_0)
		{
			if (iix->word_0x1A_26 != a1x->word_0x1A_26 && !(iix->struct_byte_0xc_12_15.byte[0] & 0x20))
			{
				v3 = a1x->word_0x84_132 * a1x->dword_0x4;
				if (sub_583F0_distance_3d(&iix->array_0x4C_76, &a1x->array_0x4C_76) <= v3)
				{
					v4 = iix->byte_0x40_64 == 2 ? sub_685D0(a1x, iix, 0x71u, 0x71u) : sub_68490(
						a1x,
						iix,
						0x71u,
						0x71u);
					if (v4 < v1)
					{
						v54x = iix;
						v1 = v4;
					}
				}
			}
		}
		for (jj = 0; jj < 29; ++jj)
		{
			for (kkx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[jj]; kkx > x_DWORD_EA3E4[0]; kkx = kkx->next_0)
			{
				if (kkx->word_0x1A_26 != a1x->word_0x1A_26
					&& kkx->byte_0x39_57
					&& (kkx->byte_0x49_73 != 14 || kkx->word_0x2C_44 != a1x->word_0x1A_26))
				{
					v6 = sub_68490(a1x, kkx, 0x71u, 0x200u);
					if (v6 < v1)
					{
						v54x = kkx;
						v1 = v6;
					}
				}
			}
		}
		if (!v54x)
			return 0;
		a1x->word_0x96_150 = v54x - D41A0_BYTESTR_0.struct_0x6E8E;
		sub_655C0(a1x, v54x);
		return 1;
	case 0x10:
		v55 = -1;
		v45x = x_DWORD_EA3E4[a1x->word_0x1A_26];
		v18x = 0;
		for (llx = x_D41A0_BYTEARRAY_4_struct.dword_38519; llx > x_DWORD_EA3E4[0]; llx = llx->next_0)
		{
			if (llx->word_0x1A_26 != a1x->word_0x1A_26 && !(llx->struct_byte_0xc_12_15.byte[0] & 0x20))
			{
				v20 = v45x->dword_0xA0_160x->word_160_0x1c_28;
				if (sub_583F0_distance_3d(&llx->array_0x4C_76, &a1x->array_0x4C_76) <= v20)
				{
					v21 = llx->byte_0x40_64 == 2 ? sub_685D0(a1x, llx, 0x100u, 0x71u) : sub_68490(
						a1x,
						llx,
						0x100u,
						0x71u);
					if (v21 < v55)
					{
						v18x = llx;
						v55 = v21;
					}
				}
			}
		}
		for (mm = 0; mm < 29; ++mm)
		{
			for (nnx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[mm]; nnx > x_DWORD_EA3E4[0]; nnx = nnx->next_0)
			{
				v23 = a1x->word_0x1A_26;
				if (nnx->word_0x1A_26 != v23
					&& nnx->byte_0x39_57
					&& (nnx->byte_0x49_73 != 14 || nnx->word_0x28_40 != v23))
				{
					v24 = sub_68490(a1x, nnx, 0x100u, 0x71u);
					if (v24 < v55)
					{
						v18x = nnx;
						v55 = v24;
					}
				}
			}
		}
		if (!v18x)
			return 0;
		a1x->word_0x96_150 = v18x - D41A0_BYTESTR_0.struct_0x6E8E;
		sub_655C0(a1x, v18x);
		if (v18x->byte_0x3F_63 == 3 && !v18x->byte_0x40_64)
			sub_5EF70(v18x);
		return 1;
	case 0x19:
		v40x = 0;
		v47 = -1;
		for (i1 = 0; i1 < 29; ++i1)
		{
			for (i2x = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[i1]; i2x > x_DWORD_EA3E4[0]; i2x = i2x->next_0)
			{
				if (i2x->word_0x1A_26 != a1x->word_0x1A_26)
				{
					if (i2x->byte_0x39_57)
					{
						if (sub_3A7F0(i2x))
						{
							v42 = sub_68490(a1x, i2x, 0x71u, 0x71u);
							if (v42 < v47)
							{
								v40x = i2x;
								v47 = v42;
							}
						}
					}
				}
			}
		}
		if (!v40x)
			return 0;
		a1x->word_0x96_150 = v40x - D41A0_BYTESTR_0.struct_0x6E8E;
		sub_655C0(a1x, v40x);
		return 1;
	default:
		return 0;
	}
	while (v26x > x_DWORD_EA3E4[0])//adress 2481e6
	{
		v27 = v26x->byte_0x40_64;
		if (v27 < 0x27u)
			goto LABEL_105;
		if (v27 <= 0x27u)
		{
			v28 = a1x->word_0x1A_26;
			v29 = v26x->word_0x94_148;
		}
		else
		{
			if (v27 != 57)
				goto LABEL_105;
			v28 = a1x->word_0x1A_26;
			v29 = v26x->word_0x28_40;
		}
		if (v29 != v28)
		{
			if (v26x->byte_0x39_57)
			{
				v30 = sub_68490(a1x, v26x, 0x71u, 0x71u);
				if (v30 < v25)
				{
					v56x = v26x;
					v25 = v30;
				}
			}
		}
	LABEL_105:
		v26x = v26x->next_0;
	}//adress 2481ee
	for (i3x = x_D41A0_BYTEARRAY_4_struct.dword_38527; i3x > x_DWORD_EA3E4[0]; i3x = i3x->next_0)
	{
		if (i3x->word_0x94_148 != a1x->word_0x1A_26)
		{
			if (i3x->byte_0x39_57)
			{
				if (!(x_WORD_D93C0_bldgprmbuffer[2+4 * i3x->byte_0x46_70] & 8))
				{
					if (debugcounter_249226>=0x9)
					{
						debugcounter_249226 = 1 * debugcounter_249226;
					}
					debugcounter_249226++;
					//adress 249226
					v32 = sub_68490(a1x, i3x, 0x71u, 0x71u);
					//adress 24922c
					//eax´17f5a3f
					if (v32 < v25)
					{
						v56x = i3x;
						v25 = v32;
					}
				}
			}
		}
	}
	for (i4x = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[88/4]; i4x > x_DWORD_EA3E4[0]; i4x = i4x->next_0)
	{
		if (i4x->byte_0x39_57)
		{
			for (i5 = i4x->word_0x34_52; ; i5 = v52x->word_0x34_52)
			{
				v52x = x_DWORD_EA3E4[i5];
				if (v52x == x_DWORD_EA3E4[0])
					break;
				v35 = sub_68490(a1x, v52x, 0x71u, 0x71u);
				if (v35 < v25)
				{
					v25 = v35;
					v56x = v52x;
				}
			}
		}
	}
	if (!v56x)
		return 0;
	a1x->word_0x96_150 = v56x - D41A0_BYTESTR_0.struct_0x6E8E;
	sub_655C0(a1x, v56x);
	return 1;
}

//----- (00068490) --------------------------------------------------------
int sub_68490(type_str_0x6E8E* a1y, type_str_0x6E8E* a2x, uint16_t a3, uint16_t a4)//249490
{
	//x_WORD *v4; // edi
	int16_t v5; // ax
	int result; // eax
	int16_t v7; // ax
	signed int v8; // ebx
	int v9; // esi
	int v10; // edi
	int v11; // eax
	int v12; // edx
	uint16_t v13; // [esp+0h] [ebp-8h]
	uint16_t v14; // [esp+4h] [ebp-4h]
	//a1+0x4c==804e 80de 0414 4b00 b400
	sub_65580(a2x);
	//v4 = a1 + 38;
	v5 = sub_581E0_maybe_tan2(&a1y->array_0x4C_76, &a2x->array_0x4C_76);//problem je zde
	v13 = sub_582B0(a1y->word_0x1C_28, v5);
	if (v13 <= a3)
	{
		v7 = sub_58210_radix_tan(&a1y->array_0x4C_76, &a2x->array_0x4C_76);
		v14 = sub_582B0(a1y->word_0x1E_30, v7);
		if (v14 <= a4)
		{
			v8 = sub_58490_radix_3d_2(&a1y->array_0x4C_76, &a2x->array_0x4C_76);
			if (v8 <= 5120)
			{
				sub_655A0(a2x);
				v9 = v8 * x_DWORD_DB750[0x200+v13];
				v10 = v8 * x_DWORD_DB750[v13];
				v11 = v8 * x_DWORD_DB750[0x200+v14];
				v12 = 4 * x_DWORD_DB750[v14] * v8 >> 16;
				result = (v11 >> 16) * (v11 >> 16) + (v9 >> 16) * (v9 >> 16) + (4 * v10 >> 16) * (4 * v10 >> 16) + v12 * v12;
			}
			else
			{
				sub_655A0(a2x);
				result = -1;
			}
		}
		else
		{
			sub_655A0(a2x);
			result = -1;
		}
	}
	else
	{
		sub_655A0(a2x);
		result = -1;
	}
	return result;
}

//----- (000685D0) --------------------------------------------------------
int sub_685D0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, uint16_t a3, uint16_t a4)//2495d0
{
	axis_3d* v4x; // ebx
	axis_3d* v5x; // esi
	int16_t v6; // ax
	int16_t v8; // ax
	uint16_t v9; // di
	signed int v10; // eax
	int v11; // ebx
	int v12; // ecx
	int v13; // esi
	int v14; // eax
	uint16_t v15; // [esp+0h] [ebp-4h]

	v4x = &a2x->array_0x4C_76;
	v5x = &a1x->array_0x4C_76;
	v6 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &a2x->array_0x4C_76);
	v15 = sub_582B0(a1x->word_0x1C_28, v6);
	if (v15 > a3)
		return -1;
	v8 = sub_58210_radix_tan(v5x, v4x);
	v9 = sub_582B0(a1x->word_0x1E_30, v8);
	if (v9 > a4)
		return -1;
	v10 = sub_58490_radix_3d_2(v5x, v4x);
	if (v10 > 5120)
		return -1;
	v11 = v10 * (x_DWORD)x_DWORD_DB750[0x200+v15];
	v12 = v10 * x_DWORD_DB750[v15];
	v13 = v10 * (x_DWORD)x_DWORD_DB750[0x200+v9];
	v14 = 4 * x_DWORD_DB750[v9] * v10 >> 16;
	return (4 * v12 >> 16) * (4 * v12 >> 16) + (v11 >> 16) * (v11 >> 16) + (v13 >> 16) * (v13 >> 16) + v14 * v14;
}

//----- (000686D0) --------------------------------------------------------
void sub_686D0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//2496d0
{
	//Bit8u* result; // eax
	type_str_0x6E8E* v3x; // ebx
	char v4; // dh

	//result = a2;
	v3x = x_DWORD_EA3E4[a1x->word_0x1A_26];
	if (v3x > x_DWORD_EA3E4[0] && v3x->byte_0x3F_63 == 3)
	{
		v4 = v3x->byte_0x40_64;
		if (!v4 || v4 == 1)
		{
			if (a2x)
			{
				if (a2x > x_DWORD_EA3E4[0])
				{
					v3x->word_0x96_150 = a2x - D41A0_BYTESTR_0.struct_0x6E8E;
				}
			}
		}
	}
	//return result;
}

//----- (00068740) --------------------------------------------------------
char sub_68740(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, uint16_t a3, int16_t a4)//249740
{
	char v4; // cl
	char v5; // ch
	uint8_t v6; // al
	int16_t v7; // ax
	int v8; // esi
	int v9; // eax
	int16_t v10; // dx
	type_str_0x6E8E* v11x; // eax

	v4 = 0;
	v5 = 0;
	if ((a1x->dword_0x90_144 - (__CFSHL__(a1x->dword_0x90_144 >> 31, 2) + 4 * (a1x->dword_0x90_144 >> 31))) >> 2 > a2x->dword_0x90_144)
		return v4;
	if (a1x->byte_0x43_67 != 10)
	{
		if (a1x->byte_0x40_64 != 13)
			goto LABEL_23;
		goto LABEL_22;
	}
	v6 = a1x->byte_0x44_68;
	if (v6 >= 0x11u)
	{
		if (v6 > 0x11u)
		{
			if (v6 < 0x43u)
			{
				if (v6 != 22)
					goto LABEL_23;
			}
			else if (v6 > 0x43u && (v6 < 0x47u || v6 > 0x47u && v6 != 89))
			{
				goto LABEL_23;
			}
		}
	LABEL_22:
		v5 = 1;
		goto LABEL_23;
	}
	if (v6 < 9u)
	{
		if (v6 > 1u)
			goto LABEL_23;
		goto LABEL_22;
	}
	if (v6 <= 9u || v6 >= 0xBu && (v6 <= 0xBu || v6 == 15))
		goto LABEL_22;
LABEL_23:
	if (v5)
	{
		sub_6E450_distance_sound(a2x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 28);
		sub_6D8B0(a2x - D41A0_BYTESTR_0.struct_0x6E8E, 8u, 1);
		a2x->dword_0x90_144 -= (a1x->dword_0x90_144
			- (__CFSHL__(a1x->dword_0x90_144 >> 31, 2)
				+ 4 * (a1x->dword_0x90_144 >> 31))) >> 2;
		v7 = a1x->word_0x1C_28;
		HIBYTE(v7) = (HIBYTE(v7) + 4) & 7;
		a1x->word_0x20_32 = v7;
		v8 = sub_582F0(0, a1x->word_0x1E_30);
		v9 = -(v8 * sub_582B0(0, a1x->word_0x1E_30));
		BYTE1(v9) &= 7u;
		a1x->word_0x22_34 = v9;
		a1x->word_0x1E_30 = v9;
		if (a2x->struct_byte_0xc_12_15.byte[0] & 0x10)
		{
			v10 = a1x->word_0x2A_42;
			a1x->word_0x1C_28 = a1x->word_0x20_32;
			a1x->word_0x2A_42 = 2 * v10;
		}
		else
		{
			a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
			a1x->word_0x1C_28 = a1x->word_0x20_32 + a1x->word_0x14_20 % a3 - a4;
		}
		a1x->word_0x96_150 = a1x->word_0x1A_26;
		a1x->word_0x1A_26 = a2x->word_0x1A_26;
		a1x->dword_0x8 = a1x->dword_0x4;
		v11x = x_DWORD_EA3E4[a1x->word_0x96_150];
		a1x->byte_0x41_65 = v11x->byte_0x3F_63;
		a1x->byte_0x42_66 = v11x->byte_0x40_64;
		x_WORD_EB398ar = a2x->array_0x4C_76;
		x_WORD_EB398ar.z += a2x->array_0x52_82.dd;
		sub_57CF0(a1x, &x_WORD_EB398ar);
		v4 = 1;
	}
	return v4;
}

//----- (00068940) --------------------------------------------------------
char sub_68940(type_str_0x6E8E* a1x)//249940
{
	uint8_t v1; // al
	int16_t v2; // dx
	type_str_0x6E8E* ix; // ebx
	signed int v4; // ST08_4
	signed int v5; // edi
	int16_t v6; // ax
	Bit32u v8; // [esp+8h] [ebp-10h]
	type_str_0x6E8E* v9x; // [esp+Ch] [ebp-Ch]
	type_str_0x6E8E* v10x; // [esp+10h] [ebp-8h]
	char v11; // [esp+14h] [ebp-4h]

	v11 = 0;
	v10x = 0;
	v1 = a1x->byte_0x40_64;
	v8 = 0x10000;
	if (v1 < 0xCu)
	{
		if (v1 < 2u)
		{
			if (v1)
				return v11;
		}
		else if (v1 > 5u && (v1 < 8u || v1 > 9u))
		{
			return v11;
		}
	}
	else if (v1 > 0xCu)
	{
		if (v1 < 0x1Au)
		{
			if (v1 < 0x16u || v1 > 0x17u)
				return v11;
		}
		else if (v1 > 0x1Au && (v1 < 0x1Cu || v1 > 0x1Cu && v1 != 30))
		{
			return v11;
		}
	}
	v2 = a1x->word_0x1A_26;
	if (v2)
	{
		v9x = x_DWORD_EA3E4[v2];
		if (v9x->byte_0x3F_63 == 3)
		{
			for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38535; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
			{
				if (ix->byte_0x40_64 == 78
					&& ix->word_0x32_50 == a1x->word_0x1A_26
					&& ix->word_0x36_54 == -1)
				{
					v4 = v9x->dword_0xA0_160x->word_160_0x1c_28;
					v5 = sub_583F0_distance_3d(&ix->array_0x4C_76, &v9x->array_0x4C_76);
					if (v5 < v4 && v5 < (signed int)v8)
					{
						v6 = sub_581E0_maybe_tan2(&a1x->array_0x4C_76, &ix->array_0x4C_76);
						if ((uint16_t)sub_582B0(a1x->word_0x1C_28, v6) < 0xAAu)
						{
							v10x = ix;
							v8 = v5;
						}
					}
				}
			}
			if (v10x)
			{
				a1x->word_0x96_150 = v10x-D41A0_BYTESTR_0.struct_0x6E8E;
				v11 = 1;
				sub_655C0(a1x, v10x);
			}
		}
	}
	return v11;
}

//----- (00068AC0) --------------------------------------------------------
char sub_68AC0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//249ac0
{
	uint8_t v2; // al
	char v3; // dl
	uint16_t v4; // di
	type_str_0x6E8E* v5x; // edx

	v2 = a1x->byte_0x40_64;
	v3 = 0;
	if (v2 < 0xCu)
	{
		if (v2 < 2u)
		{
			if (v2)
				return v3;
		}
		else if (v2 > 5u && (v2 < 8u || v2 > 9u))
		{
			return v3;
		}
	}
	else if (v2 > 0xCu)
	{
		if (v2 < 0x1Au)
		{
			if (v2 < 0x16u || v2 > 0x17u)
				return v3;
		}
		else if (v2 > 0x1Au && (v2 < 0x1Cu || v2 > 0x1Cu && v2 != 30))
		{
			return v3;
		}
	}
	if (a2x
		&& a2x->byte_0x3F_63 == 10
		&& a2x->byte_0x40_64 == 78
		&& a2x->word_0x32_50 == a1x->word_0x1A_26
		&& a2x->word_0x36_54 == -1)
	{
		sub_4A190(&a1x->array_0x4C_76, 10, 0);
		sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 26);
		v4 = a1x->word_0x26_38;
		if (v4)
		{
			v5x = x_DWORD_EA3E4[v4];
			a2x->word_0x36_54 = v5x->byte_0x40_64;
			a2x->word_0x34_52 = v5x->byte_0x46_70;
			v5x->word_0x2E_46 = 1;
		}
		v3 = 1;
	}
	return v3;
}

//----- (00068BD0) --------------------------------------------------------
char sub_68BD0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//249bd0
{
	char result; // al

	result = a2x->byte_0x3F_63;
	if (result == 5)
	{
		result = a2x->byte_0x40_64;
		if (!result)
			a2x->byte_0x3D_61 = 32;
	}
	return result;
}

//----- (00068BF0) --------------------------------------------------------
void sub_68BF0()//249bf0
{
	int16_t i; // si
	//int result; // eax
	type_str_0x6E8E* jx; // ebx
	type_str_0x6E8E* kx; // ebx

	for (i = 0; i < 29; i++)
	{
		//result = (int)x_D41A0_BYTEARRAY_4;
		for (jx = x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[i]; jx > x_DWORD_EA3E4[0]; jx = jx->next_0)
		{
			if (jx->dword_0x8 >= 0)
			{
				/*result = */sub_68C70(jx);
			}
			else
			{
				jx->byte_0x39_57 = 0xfau;
				jx->byte_0x3A_58 = 0;
			}
		}
	}
	for (kx = x_D41A0_BYTEARRAY_4_struct.dword_38523; kx > x_DWORD_EA3E4[0]; kx = kx->next_0)
		/*result = */sub_68C70(kx);
	//return result;
}

//----- (00068C70) --------------------------------------------------------
int sub_68C70(type_str_0x6E8E* a1x)//249c70
{
	char v1; // dh
	int v2; // eax
	type_str_0x6E8E* v3x; // eax
	int result; // eax
	int i; // eax
	type_str_0x6E8E* v6x; // eax

	if (a1x->byte_0x39_57)
	{
		for (i = a1x->word_0x34_52; ; i = v6x->word_0x34_52)
		{
			v6x = x_DWORD_EA3E4[i];
			if (v6x <= x_DWORD_EA3E4[0])
				break;
			v6x->byte_0x39_57 = a1x->byte_0x39_57;
		}
		a1x->byte_0x39_57--;
		return 0;
	}
	if (a1x->struct_byte_0xc_12_15.byte[0] & 1)
		return 0;
	v1 = a1x->byte_0x3A_58;
	if (v1)
	{
		a1x->byte_0x3A_58 = v1 - 1;
		result = 0;
	}
	else
	{
		if (sub_584D0_SQdistX_SQdistY(
			&a1x->array_0x4C_76,&x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]->array_0x4C_76) < 0x2400000)
		{
			v2 = a1x->word_0x34_52;
			a1x->byte_0x39_57 = 16;
			while (1)
			{
				v3x = x_DWORD_EA3E4[v2];
				if (v3x <= x_DWORD_EA3E4[0])
					break;
				v3x->byte_0x39_57 = a1x->byte_0x39_57 + 2;
				v2 = v3x->word_0x34_52;
			}
		}
		a1x->byte_0x3A_58 = 0;
		result = 0;
	}
	return result;
}

//----- (00068D50) --------------------------------------------------------
signed int sub_68D50(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//249d50
{
	int v2; // esi
	uint16_t v3; // cx
	signed int result; // eax

	if (a2x->dword_0x90_144 < 0)
		goto LABEL_14;
	if (a2x->dword_0x8 < 0)
		goto LABEL_14;
	v2 = a1x->dword_0x88_136;
	if (v2)
	{
		v3 = a2x->dword_0xA4_164x->word_0x3A_58;
		if (!v3 || v2 > x_DWORD_EA3E4[v3]->dword_0x90_144)
			goto LABEL_14;
	}
	if (a2x->dword_0x90_144 >= a1x->dword_0x8C_140 && a1x->word_0x2E_46 == a1x->word_0x30_48)
		return 1;
	if (a1x->word_0x2E_46 == a1x->word_0x30_48)
		LABEL_14:
	result = 0;
	else
		result = 1;
	return result;
}

//----- (00068DE0) --------------------------------------------------------
signed int sub_68DE0(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//249de0
{
	int16_t v2; // bx
	int v3; // ebx
	signed int result; // eax

	v2 = a1x->word_0x2E_46;
	if (v2 == a1x->word_0x30_48)
	{
		v3 = a2x->dword_0x88_136;
		if (v3 >= 0)
			a2x->dword_0x88_136 = -a1x->dword_0x8C_140;
		else
			a2x->dword_0x88_136 = v3 - a1x->dword_0x8C_140;
		result = 1;
	}
	else
	{
		if (v2 && a2x->dword_0x88_136 > 0)
			a2x->dword_0x88_136 = 0;
		result = 0;
	}
	return result;
}

//----- (00068E50) --------------------------------------------------------
signed int sub_68E50(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x, type_str_0x6E8E* a3x)//249e50
{
	Bit8u v3; // cl
	uint16_t v4; // cx
	//uint16_t v5; // ax
	int16_t v6; // ax
	int i; // eax
	type_str_0x6E8E* v8x; // esi
	signed int result; // eax
	uint16_t v10; // cx
	//uint16_t v11; // ax
	int16_t v12; // ax
	type_str_0x6E8E* jx; // esi
	axis_3d v14x; // [esp+0h] [ebp-8h]
	//int v15; // [esp+4h] [ebp-4h]

	//fix
	result = 0;
	//fix

	v14x = a2x->array_0x4C_76;
	v3 = a1x->struct_byte_0xc_12_15.byte[1];
	if (v3 & 1)
	{
		if (a3x->byte_0x40_64 == 4 && (v4 = a3x->word_0x96_150) != 0)
		{
			v14x.z = x_DWORD_EA3E4[v4]->array_0x52_82.aa + x_DWORD_EA3E4[v4]->array_0x4C_76.z;
		}
		else
		{
			//v5 = a1x->word_0x1C_28 - 512;
			//HIBYTE(v5) &= 7u;
			sub_57FA0(&v14x, (a1x->word_0x1C_28 - 512)&0x7ffu, 0, 256);
		}
		v6 = sub_10C40_getTerrainAlt(&v14x);
		if (v6 > v14x.z)
		{
			v14x = a2x->array_0x4C_76;
		}
		for (i = a2x->word_0x34_52; ; i = v8x->word_0x34_52)
		{
			v8x = x_DWORD_EA3E4[i];
			if (v8x == x_DWORD_EA3E4[0])
				break;
			sub_57CF0(v8x, &v14x);
		}
		/*result = */sub_57CF0(a2x, &v14x);
	}
	else
	{
		if (v3 & 2)
		{
			if (a3x->byte_0x40_64 == 4 && (v10 = a3x->word_0x96_150) != 0)
			{
				v14x.z = x_DWORD_EA3E4[v10]->array_0x52_82.aa + x_DWORD_EA3E4[v10]->array_0x4C_76.z;
			}
			else
			{
				//v11 = a1x->word_0x1C_28;
				//HIBYTE(v11) = (HIBYTE(v11) + 2) & 7;				
				sub_57FA0(&v14x, (a1x->word_0x1C_28 + 0x200) & 0x7ffu, 0, 256);
			}
			v12 = sub_10C40_getTerrainAlt(&v14x);
			if (v12 > v14x.z)
			{
				v14x = a2x->array_0x4C_76;
			}
			for (jx = x_DWORD_EA3E4[a2x->word_0x34_52];
				jx != x_DWORD_EA3E4[0];
				jx = x_DWORD_EA3E4[jx->word_0x34_52])
			{
				sub_57CF0(jx, &v14x);
			}
		}
		/*result = */sub_57CF0(a2x, &v14x);
	}
	return result;
}

//----- (00068FF0) --------------------------------------------------------
signed int sub_68FF0(type_str_0x6E8E* a1x, char a2, char a3)//249f00
{
	int v3; // edx
	int16_t v4; // ax
	type_str_0x6E8E* ix; // esi
	//int v6; // eax
	char v7; // al
	//Bit8u* v8; // ecx
	int16_t v9; // ax
	//int v10; // eax
	char v12; // [esp+0h] [ebp-4h]

	v3 = a1x->dword_0x8;
	v12 = 0;
	if (v3 && (a1x->dword_0x8 = v3 - 1, v3 == 1))
	{
		sub_57F10(a1x);
	}
	else
	{
		v4 = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
		sub_580E0(&a1x->array_0x4C_76, v4, 0, 0x2000, -128);
		if (!(a1x->byte_0x3E_62 & 3))
		{
			for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ix > x_DWORD_EA3E4[0]; ix = ix->next_0)
			{
				if (!ix->byte_0x40_64 && ix->dword_0x8 >= 0)
				{
					//v6 = ix->dword_0xA4_164;
					if (ix->dword_0xA4_164x->word_0x38_56 == D41A0_BYTESTR_0.word_0xc
						&& !(a1x->struct_byte_0xc_12_15.byte[0] & 1)
						&& ix->dword_0xA4_164x->str_611.array_0x333_819x.word[a1x->byte_0x40_64])
					{
						a1x->struct_byte_0xc_12_15.byte[0] |= 1u;
					}
					if (sub_106C0(ix, a1x))
					{
						v7 = 0;
						if (ix->dword_0xA4_164x->str_611.array_0x333_819x.word[a2])
							v7 = 1;
						if (!v7)
						{
							sub_6E450_distance_sound(ix-D41A0_BYTESTR_0.struct_0x6E8E, -1, 18);
							//v8 = x_D41A0_BYTEARRAY_0;
							a1x->struct_byte_0xc_12_15.byte[0] |= 1u;
							//v8 += 28302;
							a1x->struct_byte_0xc_12_15.byte[3] &= 0xFDu;
							a1x->word_0x28_40 = ix - D41A0_BYTESTR_0.struct_0x6E8E;
							a1x->byte_0x45_69 = a3;
							a1x->word_0x36_54 = 64;
							ix->dword_0xA4_164x->str_611.array_0x333_819x.word[a2] = a1x - D41A0_BYTESTR_0.struct_0x6E8E;
							ix->dword_0xA4_164x->str_611.array_0x403_1027x.byte[a2] = 1;
							v9 = a1x->word_0x4A_74;
							if (v9)
							{
								if (v9 == 2)
									v12 = 1;
								a1x->word_0x4A_74 = 0;
							}
							else
							{
								//v10 = ix->dword_0xA4_164;
								if (ix->dword_0xA4_164x->str_611.word_0x451_1105 == -1 || ix->dword_0xA4_164x->str_611.word_0x453_1107 != -1)
									v12 = 1;
							}
							if (v12)
							{
								ix->dword_0xA4_164x->str_611.word_0x451_1105 = a1x->byte_0x40_64;
								ix->dword_0xA4_164x->str_611.byte_0x455_1109 = ix->dword_0xA4_164x->str_611.array_0x437_1079x.byte[a1x->byte_0x40_64];
							}
							else
							{
								ix->dword_0xA4_164x->str_611.word_0x453_1107 = a1x->byte_0x40_64;
								ix->dword_0xA4_164x->str_611.byte_0x456_1110 = ix->dword_0xA4_164x->str_611.array_0x437_1079x.byte[a1x->byte_0x40_64];
							}
							sub_6D5E0(a1x, ix->dword_0xA4_164x->str_611.array_0x437_1079x.byte[a1x->byte_0x40_64]);
							return 1;
						}
					}
				}
			}
		}
	}
	return 0;
}

//type_str_0x6E8E* sub_2a881e(axis_3d*)[20] = { sub_511A0 };
//void (*functptr[])() = { test1, test2, test3 };
type_str_0x6E8E* (*arsub_2a881e[])(axis_3d*) = { sub_511A0, sub_511C0, sub_511E0,sub_51200,sub_51220,
sub_51240 ,sub_51260,sub_51280,sub_512A0,sub_512C0,sub_512E0,sub_51300,sub_51320,sub_51340,
sub_51360,sub_51380,sub_513A0,sub_513C0,sub_513E0,sub_51400,sub_51420,sub_51440,
sub_51460,sub_51480,sub_514A0,sub_514C0};


//----- (00069250) --------------------------------------------------------
signed int sub_69250(type_str_0x6E8E* a1x)//24a250
{
	signed int result; // eax
	type_str_0x6E8E* resultx;
	result = sub_68FF0(a1x, a1x->byte_0x40_64, a1x->byte_0x45_69 - 2);
	if (result)
	{
		resultx = arsub_2a881e[a1x->byte_0x40_64](&a1x->array_0x4C_76);
		//resultx = pre_sub_4A190(0x2a881e + 14 * a1x->byte_0x40_64, (Bit16s*)&a1x->array_0x4C_76,2);//result = (*(int(**)(Bit8u*))((char *)&off_D781E + 14 * *(char *)(a1 + 64)))(a1 + 76);
		//v63 = (Bit8u*)pre_sub_4A190(0x232530 + 14 * v112, v113 + 76);//v63 = (Bit8u*)(*(int(**)(Bit8u*))((char *)&off_D781E + 14 * v112))(v113 + 76);
		if (resultx)
			resultx->byte_0x45_69 += 2;
	}
	return result;
}

//----- (000692A0) --------------------------------------------------------
signed int sub_692A0(type_str_0x6E8E* a1x)//24a2a0
{
	return sub_68FF0(a1x, a1x->byte_0x40_64, a1x->byte_0x45_69 - 1);
}

//----- (000692C0) --------------------------------------------------------
char sub_692C0(type_str_0x6E8E* a1x)//24a2c0
{
	char result; // al
	char v2; // ah

	result = sub_59DC0(a1x);
	if (result)
	{
		result = 3 * a1x->byte_0x40_64 + 1;
		a1x->byte_0x45_69 = result;
		v2 = a1x->struct_byte_0xc_12_15.byte[3];
		a1x->word_0x26_38 = 0;
		a1x->struct_byte_0xc_12_15.byte[3] = v2 | 2;
	}
	return result;
}

//----- (00069300) --------------------------------------------------------
void sub_69300(type_str_0x6E8E* a1x, type_str_0x6E8E* a2x)//24a300
{
	char v2; // ah
	int v3; // eax
	//int v4; // edx
	//int v5; // edx
	type_str_0x6E8E* v6x; // [esp+0h] [ebp-4h]

	if (!a1x->word_0x36_54)
	{
		a1x->word_0x26_38 = a2x - D41A0_BYTESTR_0.struct_0x6E8E;
		v2 = a1x->struct_byte_0xc_12_15.byte[0];
		a1x->byte_0x45_69 = 78;
		a1x->struct_byte_0xc_12_15.byte[0] = v2 & 0xFE;
		v3 = a1x->word_0x28_40;
		a1x->dword_0x10_16 = 0;
		v6x = x_DWORD_EA3E4[v3];
		x_WORD_EB398ar = v6x->array_0x4C_76;
		sub_57CF0(a1x, &x_WORD_EB398ar);
		v6x->dword_0xA4_164x->str_611.array_0x333_819x.word[a1x->byte_0x40_64] = 0;
		a1x->word_0x4A_74 = 0;
		//v4 = v6x->dword_0xA4_164;
		if (a1x->byte_0x40_64 == v6x->dword_0xA4_164x->str_611.word_0x453_1107)
		{
			v6x->dword_0xA4_164x->str_611.word_0x453_1107 = -1;
			a1x->word_0x4A_74 = 1;
		}
		//v5 = v6x->dword_0xA4_164;
		if (a1x->byte_0x40_64 == v6x->dword_0xA4_164x->str_611.word_0x451_1105)
		{
			v6x->dword_0xA4_164x->str_611.word_0x451_1105 = -1;
			a1x->word_0x4A_74 = 2;
		}
	}
}

//----- (000693F0) --------------------------------------------------------
void sub_693F0(type_str_0x6E8E* a1x)//24a3f0//spell fire
{
	type_str_0x6E8E* v1x; // ebx
	type_str_0x6E8E* v2x; // eax
	//int16_t v3; // si
	//Bit8u* result; // eax
	//int16_t v5; // dx
	type_str_0x6E8E* v6x; // [esp+0h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					v2x = sub_6DCA0(
						v1x,
						&v1x->array_0x4C_76,
						0,
						//(Bit16s*)(&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70]),
						&SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70],
						v1x->word_0x82_130,
						1);
					v6x = v2x;
					if (v2x)
					{
						sub_68E50(v1x, v2x, a1x);
						v6x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v6x->word_0x1A_26 = v1x->word_0x1A_26;
						v6x->word_0x2A_42 = a1x->word_0x2A_42;
						v6x->dword_0x90_144 = a1x->dword_0x90_144;
						v6x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v6x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v6x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
						v6x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v6x->word_0x9A_154x = v1x->array_0x4C_76;
						sub_57FA0(
							&v6x->word_0x9A_154x,
							v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28,
							v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30,
							0x4000);
						if (v1x->dword_0xA4_164x->word_0x38_56 == D41A0_BYTESTR_0.word_0xc)
							sub_49C90(v6x, 42);
					}
				}
				sub_68DE0(a1x, v1x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		//v3 = *(x_WORD *)(a1 + 46) - 1;
		a1x->word_0x2E_46--;// = v3;
		if (!a1x->word_0x2E_46)
			sub_6D880(a1x);
	}
	//result = a1;
	//v5 = *(x_WORD *)(a1 + 54);
	if (a1x->word_0x36_54)
		a1x->word_0x36_54--;// = v5 - 1;
	//return result;
}

//----- (00069600) --------------------------------------------------------
signed int sub_69600(type_str_0x6E8E* a1)//24a600
{
	return sub_692A0(a1);
}

//----- (00069620) --------------------------------------------------------
signed int sub_69620(type_str_0x6E8E* a1)//24a620
{
	return sub_69250(a1);
}

//----- (00069640) --------------------------------------------------------
void sub_69640(type_str_0x6E8E* a1x)//24a640//spell posses
{
	type_str_0x6E8E* v1x; // eax
	//Bit8u* v2; // edi
	//char v3; // dl
	type_str_0x6E8E* v4x; // esi
	//char v5; // dl
	char v6; // ah
	char v7; // cl
	int16_t v8; // di
	//int16_t v9; // dx
	//Bit8u* v10; // [esp+4h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		//v10 = (Bit8u*)v1;
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (Bit8u*)/**(x_DWORD *)*/(&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70]);
					//SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
					//v2= (Bit8u*)*(x_DWORD *)&(*xadataspellsdat.var28_begin_buffer)[80 * a1[64] + 2 + 26 * a1[70]];
					//v3 = v2[24];
					if (SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A)
					{
						if (SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A <= 3u)
						{
							v4x = sub_4A190(&v1x->array_0x4C_76, 9, 17);
							if (v4x)
							{
								v4x->word_0x82_130+= v1x->word_0x82_130;
								sub_68E50(v1x, v4x, a1x);
								v4x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
								//v5 = v2[24];
								if (SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A >= 1u)
								{
									if (SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A <= 1u)
									{
										v4x->byte_0x44_68 = 54;
									}
									else if (SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A == 2)
									{
										v4x->byte_0x44_68 = 69;
									}
								}
								v4x->byte_0x43_67 = 10;
								v4x->word_0x1A_26 = v1x->word_0x1A_26;
								v4x->dword_0x90_144 = a1x->dword_0x90_144;
								v4x->array_0x4C_76.z += v1x->array_0x52_82.dd;
								v4x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
								v4x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
								v4x->dword_0x10_16 = (a1x->word_0x2A_42 << 8) * (a1x->word_0x2A_42 << 8);
								v1x->dword_0xA4_164x->byte_0x154_340 = 0;
								v4x->word_0x9A_154x = v1x->array_0x4C_76;
								sub_57FA0(
									&v4x->word_0x9A_154x,
									v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28,
									v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30,
									0x4000);
								sub_6E450_distance_sound(v4x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 40);
								sub_68DE0(a1x, v1x);
								goto LABEL_26;
							}
						}
					}
					else
					{
						sub_69900(a1x, v1x);
					}
				}
				else
				{
					v6 = a1x->byte_0x3C_60;
					if (v6)
					{
						if (a1x->byte_0x46_70)
						{
							if (v6 == 1)
								sub_69900(a1x, v1x);
							v7 = a1x->byte_0x3C_60 + 1;
							a1x->byte_0x3C_60 = v7;
							if (v7 > 3)
							{
								a1x->byte_0x3C_60 = 0;
								sub_68DE0(a1x, v1x);
								goto LABEL_26;
							}
						}
						else
						{
							a1x->byte_0x3C_60 = 0;
						}
					}
				}
				sub_68DE0(a1x, v1x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
	LABEL_26:
		v8 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v8;
		if (!v8)
			sub_6D880(a1x);
	}
//LABEL_28:
	//v9 = *(x_WORD *)(a1 + 54);
	if (a1x->word_0x36_54)
		a1x->word_0x36_54--;// = v9 - 1;
}

//----- (00069900) --------------------------------------------------------
void sub_69900(type_str_0x6E8E* a1x, type_str_0x6E8E*  a2x)//24a900
{
	type_str_0x6E8E* v2x; // ebx
	//int v3; // edx
	//Bit8u* v4; // eax

	v2x = sub_4A190(&a2x->array_0x4C_76, 9, 1);
	if (v2x)
	{
		v2x->word_0x82_130 += a2x->word_0x82_130;
		sub_68E50(a2x, v2x, a1x);
		//v3 = a1x - D41A0_BYTESTR_0.struct_0x6E8E);
		v2x->byte_0x43_67 = 10;
		v2x->word_0x26_38 = a1x - D41A0_BYTESTR_0.struct_0x6E8E;
		v2x->byte_0x44_68 = 12;
		v2x->word_0x1A_26 = a2x->word_0x1A_26;
		v2x->array_0x4C_76.z += a2x->array_0x52_82.dd;
		v2x->dword_0x90_144 = a1x->dword_0x90_144;
		v2x->dword_0x10_16 = 200;
		a2x->dword_0xA4_164x->byte_0x154_340 = 0;
		v2x->word_0x9A_154x = a2x->array_0x4C_76;
		sub_57FA0(
			&v2x->word_0x9A_154x,
			a2x->dword_0xA4_164x->word_0x18_24_next_entity + a2x->word_0x1C_28,
			a2x->dword_0xA4_164x->word_0x1A_26 + a2x->word_0x1E_30,
			10240);
		v2x->word_0x1C_28 = a2x->dword_0xA4_164x->word_0x18_24_next_entity + a2x->word_0x1C_28;
		//v4 = x_D41A0_BYTEARRAY_0 + 28302;
		v2x->word_0x1E_30 = a2x->dword_0xA4_164x->word_0x1A_26 + a2x->word_0x1E_30;
		sub_6E450_distance_sound(v2x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 40);
	}
}

//----- (00069A70) --------------------------------------------------------
signed int sub_69A70(type_str_0x6E8E* a1x)//24aa70
{
	return sub_692A0(a1x);
}

//----- (00069A90) --------------------------------------------------------
signed int sub_69A90(type_str_0x6E8E* a1)//24aa90
{
	return sub_69250(a1);
}

//----- (00069AB0) --------------------------------------------------------
type_str_0x6E8E* sub_69AB0(type_str_0x6E8E* a1x)//24aab0
{
	type_str_0x6E8E* v1x; // ebx
	uint16_t v2; // si
	//char *v3; // edx
	int v4; // eax
	type_str_0x6E8E* v5x; // eax
	//int v6; // ecx
	type_str_0x6E8E* v7x; // edx
	int16_t v8; // ax
	type_str_0x6E8E* resultx; // eax
	int16_t v10; // di
	type_str_0x6E8E* v11x; // [esp+0h] [ebp-8h]
	type_str_0x6E8E* v12x; // [esp+4h] [ebp-4h]

	if (a1x->word_0x2E_46 <= 0)
	{
		sub_6D880(a1x);
	}
	else
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					v2 = v1x->dword_0xA4_164x->word_0x3A_58;
					//v3 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					//SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2
					v4 = 1;
					if (v2)
						v4 = x_DWORD_EA3E4[v2]->dword_0x10_16 + 1;
					v1x->dword_0xA4_164x->array_0x24E_590[v4] = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
					v1x->dword_0xA4_164x->array_0x24E_590[v4+9] = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
					sub_68DE0(a1x, v1x);
					v5x = sub_4A190(&v1x->array_0x4C_76, 9, 10);
					v12x = v5x;
					v11x = v5x;
					if (v5x)
					{
						a1x->word_0x2E_46 = a1x->word_0x30_48 - 1;
						v5x->word_0x82_130 += v1x->word_0x82_130;
						sub_68E50(v1x, v5x, a1x);
						//v6 = (int)x_D41A0_BYTEARRAY_0 + 28302;
						v12x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v12x->word_0x2A_42 = a1x->word_0x2A_42;
						v12x->word_0x1A_26 = v1x->word_0x1A_26;
						v12x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v12x->dword_0x90_144 = a1x->dword_0x90_144;
						v7x = x_DWORD_EA3E4[v1x->dword_0xA4_164x->word_0x3A_58];
						if (v7x <= x_DWORD_EA3E4[0])
						{
							v12x->word_0x9A_154x = v1x->array_0x4C_76;
							sub_57FA0(&v12x->word_0x9A_154x, v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28, 0, 4096);
							v8 = sub_10C40_getTerrainAlt(&v12x->word_0x9A_154x);
							v12x->byte_0x43_67 = 3;
							v12x->byte_0x44_68 = 2;
							v12x->word_0x9A_154x.z = v8;
						}
						else
						{
							v12x->byte_0x43_67 = 10;
							v12x->byte_0x44_68 = 43;
							v12x->word_0x96_150 = v7x - D41A0_BYTESTR_0.struct_0x6E8E;
						}
						v11x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v11x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v11x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
						sub_6E450_distance_sound(v11x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 15);
					}
				}
			}
			else
			{
				a1x->word_0x2E_46 = 0;
			}
		}
	}
	resultx = a1x;
	v10 = a1x->word_0x36_54;
	if (v10)
		a1x->word_0x36_54 = v10 - 1;
	return resultx;
}

//----- (00069D70) --------------------------------------------------------
signed int sub_69D70(type_str_0x6E8E* a1)//24ad70
{
	return sub_692A0(a1);
}

//----- (00069D90) --------------------------------------------------------
signed int sub_69D90(type_str_0x6E8E* a1)//24ad90
{
	return sub_69250(a1);
}

//----- (00069DB0) --------------------------------------------------------
void sub_69DB0(type_str_0x6E8E* a1x)//24adb0
{
	type_str_0x6E8E* v1x; // esi
	int16_t v2; // di
	char v3; // dl
	//int v4; // eax
	char v5; // cl
	type_str_0x6E8E* v6x; // eax
	int v7; // ecx
	int16_t v8; // cx
	int16_t v9; // cx
	signed int v10; // [esp+0h] [ebp-8h]
	//char *v11; // [esp+4h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (v1x->byte_0x40_64 == 1)
				v10 = 64;
			else
				v10 = 2;
			if (v1x->dword_0xA4_164x->word_0xc_12 >= 0)
				v2 = 1;
			else
				v2 = -1;
			if (!sub_68D50(a1x, v1x) || v1x->dword_0xA4_164x->word_0xe_14)
			{
				if (v1x->dword_0xA4_164x->word_0xe_14)
					a1x->word_0x2E_46 = 1;
			}
			else
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					v3 = a1x->struct_byte_0xc_12_15.byte[0];
					if (v3 >= 0)
					{
						//v4 = (int)x_D41A0_BYTEARRAY_0 + 28302;
						a1x->struct_byte_0xc_12_15.byte[0] = v3 | 0x80;
						sub_6E450_distance_sound(v1x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 19);
					}
				}
				if (a1x->word_0x2E_46 == a1x->word_0x30_48 - v10)
				{
					v5 = a1x->struct_byte_0xc_12_15.byte[0];
					if (v5 < 0)
						a1x->struct_byte_0xc_12_15.byte[0] = v5 & 0x7F;
				}
				//v11 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
				//SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2
				//_wcpp_1_unwind_leave__98((int32_t)v1x);
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					sub_6D8B0(a1x->word_0x28_40, 3u, 1);
					v1x->dword_0xA4_164x->word_0xc_12 = v2 * v1x->word_0x84_132 * (SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2+1);
				}
				else
				{
					v1x->dword_0xA4_164x->word_0xc_12 = v2 * v1x->word_0x84_132 * SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
				}
				v1x->word_0x82_130 = v1x->dword_0xA4_164x->word_0xc_12;
				if (!(a1x->byte_0x3E_62 & 3))
				{
					v6x = sub_4A190(&v1x->array_0x4C_76, 10, 2);
					if (v6x)
					{
						v7 = 4 * v6x->dword_0x8;
						v6x->word_0x1A_26 = v1x->word_0x1A_26;
						v6x->dword_0x8 = v7;
					}
				}
				sub_68DE0(a1x, v1x);
			}
			v8 = a1x->word_0x2E_46 - 1;
			a1x->word_0x2E_46 = v8;
			if (!v8)
			{
				v1x->dword_0xA4_164x->word_0xc_12 = v1x->word_0x84_132 * v2;
				v1x->word_0x82_130 = v1x->dword_0xA4_164x->word_0xc_12;
				a1x->struct_byte_0xc_12_15.byte[0] &= 0x7Fu;
				sub_6D880(a1x);
			}
		}
	}
	v9 = a1x->word_0x36_54;
	if (v9)
		a1x->word_0x36_54 = v9 - 1;
}

//----- (00069FF0) --------------------------------------------------------
signed int sub_69FF0(type_str_0x6E8E* a1)//24aff0
{
	return sub_692A0(a1);
}

//----- (0006A010) --------------------------------------------------------
signed int sub_6A010(type_str_0x6E8E* a1)//24b010
{
	return sub_69250(a1);
}

//----- (0006A030) --------------------------------------------------------
void sub_6A030(type_str_0x6E8E* a1x)//24b030
{
	uint16_t v1; // ax
	type_str_0x6E8E* v2x; // esi
	int v3; // edi
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // ecx
	char v6; // al
	//Bit8u* v7; // ST0C_4
	//int v8; // eax
	type_str_0x6E8E* v9x; // ecx
	int v10; // edx
	int16_t v11; // dx
	uint16_t v12; // di
	//int v13; // eax
	int16_t v14; // si
	int v16; // [esp+4h] [ebp-8h]

	v1 = a1x->word_0x28_40;
	v2x = x_DWORD_EA3E4[v1];
	v3 = -1;
	if (v2x > x_DWORD_EA3E4[0] && a1x->word_0x2E_46 > 0)
	{
		if (sub_68D50(a1x, v2x))
		{
			if (a1x->word_0x2E_46 == a1x->word_0x30_48)
			{
				sub_6D8B0(a1x->word_0x28_40, 4u, 1);
				//v4x = sub_4A190(&v2x->array_0x4C_76, 5, (uint8_t)(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 26 + 26 * a1x->byte_0x46_70]);
				v4x = sub_4A190(&v2x->array_0x4C_76, 5, SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A);
				v5x = v4x;
				if (v4x)
				{
					v6 = 8 * v4x->byte_0x40_64;
					v5x->byte_0x49_73 = 12;
					v5x->byte_0x45_69 = v6 + 7;
					v5x->word_0x28_40 = a1x->word_0x28_40;
					v5x->word_0x1A_26 = v2x->word_0x1A_26;
					//v7 = x_D41A0_BYTEARRAY_0;
					a1x->word_0x96_150 = v5x - D41A0_BYTESTR_0.struct_0x6E8E;
					v5x->struct_byte_0xc_12_15.byte[0] |= 1u;
					//v8 = v2x->dword_0xA4_164;
					v2x->struct_byte_0xc_12_15.byte[0] |= 0x21u;
					if (v2x->dword_0xA4_164x->word_0x38_56 != D41A0_BYTESTR_0.word_0xc)
					{
						v5x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
						v2x->struct_byte_0xc_12_15.byte[0] |= 1u;
					}
					sub_6E450_distance_sound(v2x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 60);
				}
			}
			sub_68DE0(a1x, v2x);
		}
		else
		{
			a1x->word_0x2E_46 = 1;
		}
		v1 = v2x->dword_0xA4_164x->word_0x38_56;
		if (v1 != D41A0_BYTESTR_0.word_0xc)
		{
			v1 = a1x->word_0x96_150;
			v9x = x_DWORD_EA3E4[v1];
			if (v9x > x_DWORD_EA3E4[0])
			{
				v10 = a1x->word_0x30_48;
				v16 = a1x->word_0x2E_46;
				LOBYTE(v1) = a1x->word_0x2E_46;
				if (v16 <= v10 - 7)
				{
					v1 = a1x->word_0x2E_46;
					if ((int16_t)v1 < 7)
					{
						LOBYTE(v1) = v1 & 1;
						v3 = (uint8_t)v1;
					}
				}
				else
				{
					v3 = ((x_BYTE)v10 - (x_BYTE)v16) & 1;
				}
				if (v3 != -1)
				{
					if (v3)
					{
						if (v3 == 1)
						{
							v9x->struct_byte_0xc_12_15.byte[0] |= 1u;
							v2x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
						}
					}
					else
					{
						v9x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
						v2x->struct_byte_0xc_12_15.byte[0] |= 1u;
					}
				}
			}
		}
		v11 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v11;
		if (!v11)
		{
			v12 = a1x->word_0x96_150;
			if (v12)
			{
				sub_57F10(x_DWORD_EA3E4[v12]);
				a1x->word_0x96_150 = 0;
			}
			//v13 = v2x->dword_0xA4_164;
			v2x->struct_byte_0xc_12_15.byte[0] &= 0xDFu;
			if (v2x->dword_0xA4_164x->word_0x38_56 == D41A0_BYTESTR_0.word_0xc)
				sub_6E450_distance_sound(v2x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 60);
			else
				v2x->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
			/*LOBYTE(v1) = */sub_6D880(a1x);
		}
	}
	v14 = a1x->word_0x36_54;
	if (v14)
		a1x->word_0x36_54 = v14 - 1;
	//return v1;
}

//----- (0006A2C0) --------------------------------------------------------
signed int sub_6A2C0(type_str_0x6E8E* a1)//24b2c0
{
	return sub_692A0(a1);
}

//----- (0006A2E0) --------------------------------------------------------
signed int sub_6A2E0(type_str_0x6E8E* a1)//24b2e0
{
	return sub_69250(a1);
}

//----- (0006A300) --------------------------------------------------------
void sub_6A300(type_str_0x6E8E* a1x)//24b300
{
	type_str_0x6E8E* v1x; // esi
	int v2; // edx
	int v3; // ecx
	int v4; // edi
	int16_t v5; // ax
	int16_t v6; // cx

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x) && v1x->dword_0x90_144 >= a1x->dword_0x8C_140)
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
					sub_6E450_distance_sound(v1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 25);
				if (v1x->dword_0x8 < v1x->dword_0x4)
				{
					if (a1x->word_0x2E_46 == a1x->word_0x30_48)
						sub_6D8B0(a1x->word_0x28_40, 5u, 1);
					v2 = v1x->dword_0x4 * a1x->word_0x2A_42 / 100 + v1x->dword_0x8;
					v3 = v1x->dword_0x4;
					v1x->dword_0x8 = v2;
					if (v2 > v3)
						v1x->dword_0x8 = v3;
					v4 = v1x->dword_0x88_136;
					if (v4 >= 0)
						v1x->dword_0x88_136 = -a1x->dword_0x8C_140;
					else
						v1x->dword_0x88_136 = v4 - a1x->dword_0x8C_140;
				}
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v5 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v5;
		if (!v5)
			sub_6D880(a1x);
	}
	v6 = a1x->word_0x36_54;
	if (v6)
		a1x->word_0x36_54 = v6 - 1;
}

//----- (0006A440) --------------------------------------------------------
signed int sub_6A440(type_str_0x6E8E* a1)//24b440
{
	return sub_692A0(a1);
}

//----- (0006A460) --------------------------------------------------------
signed int sub_6A460(type_str_0x6E8E* a1)//24b460
{
	return sub_69250(a1);
}

//----- (0006A480) --------------------------------------------------------
void sub_6A480(type_str_0x6E8E* a1x)//24b480
{
	signed int v1; // eax
	type_str_0x6E8E* v2x; // esi
	int16_t v3; // cx

	//LOWORD(v1) = a1x->word_0x28_40;
	v2x = x_DWORD_EA3E4[a1x->word_0x28_40];
	if (v2x <= x_DWORD_EA3E4[0] || a1x->word_0x2E_46 <= 0)
		goto LABEL_15;
	//LOBYTE(v1) = (*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 26 + 26 * a1x->byte_0x46_70];
	LOBYTE(v1) = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
	if (!(x_BYTE)v1)
	{
		v1 = sub_68D50(a1x, v2x);
		if (v1)
		{
			v2x->struct_byte_0xc_12_15.byte[1] |= 0x40u;
			LOBYTE(v1) = sub_68DE0(a1x, v2x);
			a1x->word_0x2E_46--;
			goto LABEL_13;
		}
		goto LABEL_12;
	}
	if ((x_BYTE)v1 == 1)
	{
		v1 = sub_68D50(a1x, v2x);
		if (v1)
		{
			if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				v2x->struct_byte_0xc_12_15.byte[2] |= 0x40u;
			a1x->word_0x2E_46--;
			LOBYTE(v1) = sub_68DE0(a1x, v2x);
			goto LABEL_13;
		}
	LABEL_12:
		a1x->word_0x2E_46 = 0;
	}
LABEL_13:
	if (!a1x->word_0x2E_46)
	{
		v2x->struct_byte_0xc_12_15.dword &= 0xFFBFBFFF;
		/*LOBYTE(v1) = */sub_6D880(a1x);
	}
LABEL_15:
	v3 = a1x->word_0x36_54;
	if (v3)
		a1x->word_0x36_54 = v3 - 1;
	//return v1;
}

//----- (0006A580) --------------------------------------------------------
signed int sub_6A580(type_str_0x6E8E* a1)//24b580
{
	return sub_692A0(a1);
}

//----- (0006A5A0) --------------------------------------------------------
signed int sub_6A5A0(type_str_0x6E8E* a1)//24b5a0
{
	return sub_69250(a1);
}

//----- (0006A5C0) --------------------------------------------------------
void sub_6A5C0(type_str_0x6E8E* a1x)//24b5c0
{
	type_str_0x6E8E* v1x; // ebx
	//char *v2; // edx
	char v3; // al
	type_str_0x6E8E* v4x; // eax
	int16_t v5; // ax
	type_str_0x6E8E* v6x; // edx
	int16_t v7; // ax
	//Bit8u* v8; // ecx
	int16_t v9; // bx
	//Bit8u* result; // eax
	int16_t v11; // si
	type_str_0x6E8E* v12x; // [esp+0h] [ebp-20h]
	type_str_0x6E8E* v13x; // [esp+4h] [ebp-1Ch]
	//char *v14; // [esp+Ch] [ebp-14h]
	type_str_0x6E8E* v15x; // [esp+10h] [ebp-10h]
	type_str_0x6E8E* v16x; // [esp+14h] [ebp-Ch]
	int16_t v17; // [esp+18h] [ebp-8h]
	int16_t v18; // [esp+1Ch] [ebp-4h]

	v12x = 0;
	v13x = 0;
	if (a1x->word_0x2E_46 <= 0)
		goto LABEL_29;
	v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
	if (v1x > x_DWORD_EA3E4[0])
	{
		if (sub_68D50(a1x, v1x))
		{
			if (a1x->word_0x2E_46 == a1x->word_0x30_48)
			{
				//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
				//v3 = v2[24];
				v3 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
				//v14 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
				//SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
				if (v3)
				{
					if ((uint8_t)v3 <= 2u)
					{
						v18 = 0;
						v17 = (v3 != 1) + 1;
						while (v18 < v17)
						{
							v16x = sub_6DCA0(v1x, &v1x->array_0x4C_76, 7u, &SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70], v1x->word_0x82_130, 1);
							if (v16x)
							{
								sub_68E50(v1x, v16x, a1x);
								v16x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
								v16x->word_0x2A_42 = a1x->word_0x2A_42;
								v16x->word_0x1A_26 = v1x->word_0x1A_26;
								v16x->array_0x4C_76.z += v1x->array_0x52_82.dd;
								v16x->dword_0x90_144 = a1x->dword_0x90_144;
								v16x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
								v16x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
								v1x->dword_0xA4_164x->byte_0x154_340 = 0;
								v16x->word_0x9A_154x = v1x->array_0x4C_76;
								sub_57FA0(
									&v16x->word_0x9A_154x,
									v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28,
									v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30,
									0x4000);
								if (SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A == 2)
								{
									if (v18)
										v5 = v1x->word_0x1C_28 - 113;
									else
										v5 = v1x->word_0x1C_28 + 113;
									v6x = v16x;
									v7 = (v1x->dword_0xA4_164x->word_0x18_24_next_entity + v5) & 0x7FF;
								}
								else
								{
									v6x = v16x;
									v7 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
								}
								v6x->word_0x1C_28 = v7;
								v16x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
								if (v18)
									v13x = v16x;
								else
									v12x = v16x;
							}
							v18++;
						}
						if (v13x)
						{
							//v8 = x_D41A0_BYTEARRAY_0 + 28302;
							v12x->word_0x34_52 = v13x - D41A0_BYTESTR_0.struct_0x6E8E;
							v13x->word_0x34_52 = v12x - D41A0_BYTESTR_0.struct_0x6E8E;
						}
					}
				}
				else
				{
					v4x = sub_6DCA0(v1x, &v1x->array_0x4C_76, 7u, &SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70], v1x->word_0x82_130, 1);
					v15x = v4x;
					if (v4x)
					{
						sub_68E50(v1x, v4x, a1x);
						v15x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v15x->word_0x1A_26 = v1x->word_0x1A_26;
						v15x->dword_0x90_144 = a1x->dword_0x90_144;
						v15x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v15x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v15x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
						v15x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
						v15x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v15x->word_0x9A_154x = v1x->array_0x4C_76;
						sub_57FA0(
							&v15x->word_0x9A_154x,
							v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28,
							v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30,
							0x4000);
						sub_68DE0(a1x, v1x);
						goto LABEL_27;
					}
				}
			}
			sub_68DE0(a1x, v1x);
		}
		else
		{
			a1x->word_0x2E_46 = 1;
		}
	}
LABEL_27:
	v9 = a1x->word_0x2E_46 - 1;
	a1x->word_0x2E_46 = v9;
	if (!v9)
		sub_6D880(a1x);
LABEL_29:
	//result = a1;
	v11 = a1x->word_0x36_54;
	if (v11)
		a1x->word_0x36_54 = v11 - 1;
	//return result;
}

//----- (0006A9C0) --------------------------------------------------------
signed int sub_6A9C0(type_str_0x6E8E* a1)//24b9c0
{
	return sub_692A0(a1);
}

//----- (0006A9E0) --------------------------------------------------------
signed int sub_6A9E0(type_str_0x6E8E* a1)//24b9e0
{
	return sub_69250(a1);
}

//----- (0006AA00) --------------------------------------------------------
int16_t sub_6AA00(type_str_0x6E8E* a1x)//24ba00
{
	type_str_0x6E8E* v1x; // esi
	//char *v2; // edi
	char v3; // al
	int16_t v4; // cx
	int16_t result; // ax

	v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
	if (v1x > x_DWORD_EA3E4[0])
	{
		if (a1x->word_0x2E_46 <= 0)
		{
			v1x->struct_byte_0xc_12_15.word[0] &= 0x7FEFu;
		}
		else
		{
			//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
			//SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A
			if (sub_68D50(a1x, v1x))
			{
				v3 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
				if (v3)
				{
					if (v3 == 1)
						v1x->struct_byte_0xc_12_15.byte[0] |= 0x10u;
				}
				else
				{
					v1x->struct_byte_0xc_12_15.byte[1] |= 0x80u;
				}
				sub_68DE0(a1x, v1x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
			v4 = a1x->word_0x2E_46 - 1;
			a1x->word_0x2E_46 = v4;
			if (!v4)
				sub_6D880(a1x);
		}
	}
	result = a1x->word_0x36_54;
	if (result)
		a1x->word_0x36_54 = result - 1;
	return result;
}

//----- (0006AAC0) --------------------------------------------------------
signed int sub_6AAC0(type_str_0x6E8E* a1)//24bac0
{
	return sub_692A0(a1);
}

//----- (0006AAE0) --------------------------------------------------------
signed int sub_6AAE0(type_str_0x6E8E* a1)//24bae0
{
	return sub_69250(a1);
}

//----- (0006AB00) --------------------------------------------------------
void sub_6AB00(type_str_0x6E8E* a1x)//24bb00
{
	type_str_0x6E8E* v1x; // ebx
	//char *v2; // esi
	int16_t v3; // si
	//int result; // eax
	int16_t v5; // dx
	type_str_0x6E8E* v6x; // [esp+0h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					//SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1B
					v6x = sub_6DCA0(v1x, &v1x->array_0x4C_76, 9u, &SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70], v1x->word_0x82_130, 1);
					if (v6x)
					{
						sub_68E50(v1x, v6x, a1x);
						v6x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v6x->word_0x1A_26 = v1x->word_0x1A_26;
						v6x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v6x->dword_0x90_144 = a1x->dword_0x90_144;
						v6x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
						v6x->byte_0x46_70 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						v6x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v6x->word_0x9A_154x = v1x->array_0x4C_76;
						sub_57FA0(
							&v6x->word_0x9A_154x,
							v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28,
							v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30,
							10240);
						v6x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v6x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
					}
				}
				sub_68DE0(a1x, v1x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v3 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v3;
		if (!v3)
			sub_6D880(a1x);
	}
	//result = a1;
	v5 = a1x->word_0x36_54;
	if (v5)
		a1x->word_0x36_54 = v5 - 1;
	//return result;
}

//----- (0006AD00) --------------------------------------------------------
signed int sub_6AD00(type_str_0x6E8E* a1)//24bd00
{
	return sub_692A0(a1);
}

//----- (0006AD20) --------------------------------------------------------
signed int sub_6AD20(type_str_0x6E8E* a1)//24bd20
{
	return sub_69250(a1);
}

//----- (0006AD60) --------------------------------------------------------
void sub_6AD60(type_str_0x6E8E* a1x)//24bd60
{
	type_str_0x6E8E* v1x; // eax
	//char *v2; // esi
	char v3; // al
	type_str_0x6E8E* v4x; // eax
	type_str_0x6E8E* v5x; // esi
	axis_3d* v6x; // esi
	uint16_t v7; // ax
	type_str_0x6E8E* v8x; // edx
	int16_t v9; // ax
	//axis_3d* v10x; // esi
	uint16_t v11; // ax
	type_str_0x6E8E* v12x; // esi
	bool v13; // cf
	bool v14; // zf
	int v15; // eax
	type_str_0x6E8E* v16x; // eax
	axis_3d* v17x; // esi
	uint16_t v18; // ax
	uint16_t v19; // si
	int16_t v20; // ax
	//int v21; // esi
	int v22; // ecx
	int16_t v23; // cx
	int16_t v24; // di
	axis_3d v25x; // [esp+0h] [ebp-14h]
	//int16_t v26; // [esp+4h] [ebp-10h]
	int v27; // [esp+8h] [ebp-Ch]
	int v28; // [esp+Ch] [ebp-8h]
	type_str_0x6E8E* v29x; // [esp+10h] [ebp-4h]

	//fix
	v16x = 0;
	//fix

	v28 = 1;
	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		v29x = v1x;
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					//SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A
					sub_6D8B0(a1x->word_0x28_40, 0xAu, 1);
					v3 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
					if ((uint8_t)v3 < 1u)
					{
						if (!v3)
						{
							v4x = v29x;
							a1x->word_0x96_150 = 0;
							v5x = x_DWORD_EA3E4[v4x->dword_0xA4_164x->word_0x3A_58];
							if (v5x <= x_DWORD_EA3E4[0])
							{
								v28 = 0;
							}
							else
							{
								v6x = &v5x->array_0x4C_76;
								v25x = *v6x;
								v7 = v29x->word_0x1C_28 - 204;
								HIBYTE(v7) &= 7u;
								sub_57FA0(&v25x, v7, 0, -448);
								sub_57CF0(v29x, &v25x);
							}
						}
					}
					else if ((uint8_t)v3 <= 1u)
					{
						v8x = x_DWORD_EA3E4[v29x->dword_0xA4_164x->word_0x3A_58];
						if (v8x <= x_DWORD_EA3E4[0])
						{
							v28 = 0;
						}
						else
						{
							v9 = a1x->word_0x96_150;
							if (v9 && v9 == 1)
							{
								sub_57CF0(v29x, &a1x->word_0x9A_154x);
								a1x->word_0x96_150 = 0;
							}
							else
							{
								//v10x = v29x->array_0x4C_76;
								a1x->word_0x9A_154x = v29x->array_0x4C_76;
								//*(x_WORD *)(a1 + 158) = *(x_WORD *)(v10 + 4);
								v25x = v8x->array_0x4C_76;
								//v25x[2] = *(x_WORD *)(v8 + 80);
								v11 = v29x->word_0x1C_28 - 204;
								HIBYTE(v11) &= 7u;
								sub_57FA0(&v25x, v11, 0, -448);
								sub_57CF0(v29x, &v25x);
								a1x->word_0x96_150 = 1;
							}
						}
					}
					else if (v3 == 2)
					{
						v27 = 0;
						v28 = 0;
						while (v27 < 9 && !v28)
						{
							switch (a1x->word_0x96_150)
							{
							case 1:
								break;
							case 2:
							case 3:
							case 4:
							case 5:
							case 6:
							case 7:
							case 8:
							case 9:
								v15 = a1x->word_0x96_150 - 2;
								if (v15 != v29x->dword_0xA4_164x->word_0x38_56 && v15 < D41A0_BYTESTR_0.word_0xe)
								{
									v16x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[v15].word_0x00a_2BE4_11240];
									if (v16x > x_DWORD_EA3E4[0])
									{
										v12x = x_DWORD_EA3E4[v16x->dword_0xA4_164x->word_0x3A_58];
										v13 = v12x < x_DWORD_EA3E4[0];
										v14 = v12x == x_DWORD_EA3E4[0];
										goto LABEL_26;
									}
								}
								break;
							default:
								v12x = x_DWORD_EA3E4[v16x->dword_0xA4_164x->word_0x3A_58];
								v13 = v12x < x_DWORD_EA3E4[0];
								v14 = v12x == x_DWORD_EA3E4[0];
							LABEL_26:
								if (!((uint8_t)v13 | (uint8_t)v14))
								{
									v17x = &v12x->array_0x4C_76;
									v25x = *v17x;
									v18 = (v29x->word_0x1C_28 - 204)&0x7ffu;
									//HIBYTE(v18) &= 7u;
									sub_57FA0(&v25x, v18, 0, -448);
									sub_57CF0(v29x, &v25x);
									v28 = 1;
								}
								break;
							}
							v19 = a1x->word_0x96_150 + 1;
							a1x->word_0x96_150 = v19;
							if (v19 >= 9u)
								a1x->word_0x96_150 = 0;
							v27++;
						}
					}
					v20 = v28;
					if (!v28)
					{
						//v21 = (int)(v29 + 19);
						a1x->word_0x9A_154x = v29x->array_0x4C_76;
						a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
						sub_57FA0(&a1x->word_0x9A_154x, a1x->word_0x14_20 & 0x7FF, v20, 0x4000);
						sub_57CF0(v29x, &a1x->word_0x9A_154x);
						a1x->word_0x96_150 = 0;
					}
					v22 = v28;
					v29x->dword_0xA4_164x->word_0xc_12 = 0;
					if (v22)
						sub_6E450_distance_sound(v29x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 22);
				}
				sub_68DE0(a1x, v29x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
			v23 = a1x->word_0x2E_46 - 1;
			a1x->word_0x2E_46 = v23;
			if (!v23)
			{
				v29x->dword_0xA4_164x->word_0xc_12 = 0;
				sub_6D880(a1x);
			}
		}
	}
	v24 = a1x->word_0x36_54;
	if (v24)
		a1x->word_0x36_54 = v24 - 1;
}

//----- (0006B180) --------------------------------------------------------
signed int sub_6B180(type_str_0x6E8E* a1)//24c180
{
	return sub_692A0(a1);
}

//----- (0006B1A0) --------------------------------------------------------
signed int sub_6B1A0(type_str_0x6E8E* a1)//24c1a0
{
	return sub_69250(a1);
}

//----- (0006B1C0) --------------------------------------------------------
void sub_6B1C0(type_str_0x6E8E* a1x)//24c1c0
{
	type_str_0x6E8E* v1x; // esi
	//char *v2; // edx
	int16_t v3; // di
	//int v4; // eax
	int16_t v5; // dx

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					sub_6D8B0(a1x->word_0x28_40, 0xBu, 1);
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					//SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A
					a1x->dword_0xA4_164x->word_0x159_345 = 0;
					a1x->dword_0xA4_164x->byte_0x1BF_447 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
					a1x->struct_byte_0xc_12_15.byte[0] |= 0x20u;
				}
				else if (!(a1x->struct_byte_0xc_12_15.byte[0] & 0x20))
				{
					a1x->word_0x2E_46 = 1;
				}
				sub_68DE0(a1x, v1x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v3 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v3;
		if (!v3)
		{
			//v4 = a1x->dword_0xA4_164;
			v1x->struct_byte_0xc_12_15.byte[0] &= 0xDFu;
			a1x->dword_0xA4_164x->byte_0x1BF_447 = 0;
			sub_6D880(a1x);
		}
	}
	v5 = a1x->word_0x36_54;
	if (v5)
		a1x->word_0x36_54 = v5 - 1;
}

//----- (0006B2D0) --------------------------------------------------------
signed int sub_6B2D0(type_str_0x6E8E* a1)//24c2d0
{
	return sub_692A0(a1);
}

//----- (0006B2F0) --------------------------------------------------------
signed int sub_6B2F0(type_str_0x6E8E* a1)//24c2f0
{
	return sub_69250(a1);
}

//----- (0006B310) --------------------------------------------------------
int16_t sub_6B310(type_str_0x6E8E* a1x)//24c310
{
	uint16_t v1; // ax
	type_str_0x6E8E* v2x; // esi
	int16_t v3; // si
	//int16_t result; // ax

	if (a1x->word_0x2E_46 > 0)
	{
		v1 = a1x->word_0x28_40;
		v2x = x_DWORD_EA3E4[v1];
		if (v2x > x_DWORD_EA3E4[0])
		{
			if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				sub_6D8B0(v1, 0xCu, 1);
			if (sub_68D50(a1x, v2x))
				sub_68DE0(a1x, v2x);
			else
				a1x->word_0x2E_46 = 1;
		}
		v3 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v3;
		if (!v3)
			sub_6D880(a1x);
	}
	//result = a1x->word_0x36_54;
	if (a1x->word_0x36_54)
		a1x->word_0x36_54--;
	return a1x->word_0x36_54;//fix -remove it ?
}

//----- (0006B3A0) --------------------------------------------------------
signed int sub_6B3A0(type_str_0x6E8E* a1)//24c3a0
{
	return sub_692A0(a1);
}

//----- (0006B3C0) --------------------------------------------------------
signed int sub_6B3C0(type_str_0x6E8E* a1)//24c3c0
{
	return sub_69250(a1);
}

//----- (0006B3E0) --------------------------------------------------------
void sub_6B3E0(type_str_0x6E8E* a1x)//24c3e0
{
	type_str_0x6E8E* v1x; // ebx
	type_str_0x6E8E* v2x; // eax
	int16_t v3; // dx
	//int result; // eax
	int16_t v5; // cx
	type_str_0x6E8E* v6x; // [esp+0h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					v2x = sub_6DCA0(
						v1x,
						&v1x->array_0x4C_76,
						0xDu,
						//(int16_t *)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70],
						&SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70],
						v1x->word_0x82_130,
						1);
					v6x = v2x;
					if (v2x)
					{
						sub_68E50(v1x, v2x, a1x);
						v6x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v6x->word_0x1A_26 = v1x->word_0x1A_26;
						v6x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v6x->dword_0x90_144 = a1x->dword_0x90_144;
						v6x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v6x->byte_0x46_70 = a1x->byte_0x46_70;
						v6x->word_0x9A_154x = v1x->array_0x4C_76;
						sub_57FA0(
							&v6x->word_0x9A_154x,
							v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28,
							v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30,
							0x4000);
						v6x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v6x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
					}
				}
				sub_68DE0(a1x, v1x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v3 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v3;
		if (!v3)
			sub_6D880(a1x);
	}
	//result = a1;
	v5 = a1x->word_0x36_54;
	if (v5)
		a1x->word_0x36_54 = v5 - 1;
	//return result;
}

//----- (0006B5D0) --------------------------------------------------------
signed int sub_6B5D0(type_str_0x6E8E* a1)//24c5d0
{
	return sub_692A0(a1);
}

//----- (0006B5F0) --------------------------------------------------------
signed int sub_6B5F0(type_str_0x6E8E* a1)//24c5f0
{
	return sub_69250(a1);
}

//----- (0006B610) --------------------------------------------------------
int16_t sub_6B610(type_str_0x6E8E* a1x)//24c610
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // eax
	type_str_0x6E8E* v3x; // edi
	axis_3d* v3y; // edi
	int16_t v4; // ax
	int16_t v5; // si
	int16_t result; // ax
	type_str_0x6E8E* v7x; // [esp+0h] [ebp-Ch]
	type_str_0x6E8E* v8x; // [esp+4h] [ebp-8h]
	char v9; // [esp+8h] [ebp-4h]

	v9 = 0;
	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		v8x = v1x;
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (!sub_68D50(a1x, v1x))
				goto LABEL_19;
			if (a1x->word_0x2E_46 <= a1x->word_0x30_48 - 28 && !v8x->dword_0xA4_164x->word_0x146_326)
				v9 = 1;
			if (v9)
			{
			LABEL_19:
				a1x->word_0x2E_46 = 1;
			}
			else
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					v2x = sub_4A190(&v8x->array_0x4C_76, 9, 7);
					v7x = v2x;
					if (v2x)
					{
						v3x = v2x;
						sub_68E50(v8x, v2x, a1x);
						v3x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v4 = a1x->word_0x2A_42;
						v3x->byte_0x43_67 = 10;
						v3x->word_0x2A_42 = v4;
						v3x->byte_0x44_68 = 26;
						v3x->word_0x1A_26 = v8x->word_0x1A_26;
						v3x->array_0x4C_76.z += v8x->array_0x52_82.dd;
						v3x->dword_0x90_144 = a1x->dword_0x90_144;
						v3x->byte_0x46_70 = a1x->byte_0x46_70;
						//v3x += 154;
						v3y = &v8x->array_0x4C_76;// *(x_DWORD*)v3 = *(x_DWORD*)(v8 + 76);
						//*(x_WORD *)(v3 + 4) = *(x_WORD *)(v8 + 80);
						sub_57FA0(
							&v7x->word_0x9A_154x,
							v8x->dword_0xA4_164x->word_0x18_24_next_entity + v8x->word_0x1C_28,
							v8x->dword_0xA4_164x->word_0x1A_26 + v8x->word_0x1E_30,
							10240);
						v7x->word_0x1C_28 = v8x->dword_0xA4_164x->word_0x18_24_next_entity + v8x->word_0x1C_28;
						v7x->word_0x1E_30 = v8x->dword_0xA4_164x->word_0x1A_26 + v8x->word_0x1E_30;
						sub_6E450_distance_sound(v7x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 9);
					}
				}
				sub_68DE0(a1x, v8x);
			}
		}
		v5 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v5;
		if (!v5)
			sub_6D880(a1x);
	}
	result = a1x->word_0x36_54;
	if (result)
		a1x->word_0x36_54 = result - 1;
	return result;
}

//----- (0006B830) --------------------------------------------------------
signed int sub_6B830(type_str_0x6E8E* a1)//24c830
{
	return sub_692A0(a1);
}

//----- (0006B850) --------------------------------------------------------
signed int sub_6B850(type_str_0x6E8E* a1)//24c850
{
	return sub_69250(a1);
}

//----- (0006B870) --------------------------------------------------------
void sub_6B870(type_str_0x6E8E* a1x)//24c870
{
	type_str_0x6E8E* v1x; // ebx
	//char *v2; // esi
	int16_t v3; // si
	//int result; // eax
	int16_t v5; // dx
	type_str_0x6E8E* v6x; // [esp+0h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					//SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A
					v6x = sub_6DCA0(v1x, &v1x->array_0x4C_76, 0xFu, &SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70], v1x->word_0x82_130, 1);
					if (v6x)
					{
						sub_68E50(v1x, v6x, a1x);
						v6x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v6x->word_0x1A_26 = v1x->word_0x1A_26;
						v6x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v6x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v6x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
						v6x->dword_0x90_144 = a1x->dword_0x90_144;
						v6x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
						v6x->byte_0x46_70 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						v6x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v6x->word_0x9A_154x = v1x->array_0x4C_76;
						sub_57FA0(&v6x->word_0x9A_154x, v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28, 0, 4096);
						v6x->word_0x9A_154x.z = sub_10C40_getTerrainAlt(&v6x->word_0x9A_154x);
					}
				}
				sub_68DE0(a1x, v1x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v3 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v3;
		if (!v3)
			sub_6D880(a1x);
	}
	//result = a1;
	v5 = a1x->word_0x36_54;
	if (v5)
		a1x->word_0x36_54 = v5 - 1;
	//return result;
}

//----- (0006BA70) --------------------------------------------------------
signed int sub_6BA70(type_str_0x6E8E* a1)//24ca70
{
	return sub_692A0(a1);
}

//----- (0006BA90) --------------------------------------------------------
signed int sub_6BA90(type_str_0x6E8E* a1)//24ca90
{
	return sub_69250(a1);
}

//----- (0006BAB0) --------------------------------------------------------
void sub_6BAB0(type_str_0x6E8E* a1x)//24cab0
{
	type_str_0x6E8E* v1x; // ebx
	//char *v2; // esi
	int16_t v3; // si
	//int result; // eax
	int16_t v5; // dx
	type_str_0x6E8E* v6x; // [esp+0h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					//SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A
					v6x = sub_6DCA0(v1x, &v1x->array_0x4C_76, 0x10u, &SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70], v1x->word_0x82_130, 1);
					if (v6x)
					{
						sub_68E50(v1x, v6x, a1x);
						v6x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v6x->word_0x1A_26 = v1x->word_0x1A_26;
						v6x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v6x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v6x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
						v6x->dword_0x90_144 = a1x->dword_0x90_144;
						v6x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
						v6x->byte_0x46_70 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						v6x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v6x->word_0x9A_154x = v1x->array_0x4C_76;
						sub_57FA0(&v6x->word_0x9A_154x, v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28, 0, 4096);
						v6x->word_0x9A_154x.z = sub_10C40_getTerrainAlt(&v6x->word_0x9A_154x);
					}
				}
				sub_68DE0(a1x, v1x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v3 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v3;
		if (!v3)
			sub_6D880(a1x);
	}
	//result = a1;
	v5 = a1x->word_0x36_54;
	if (v5)
		a1x->word_0x36_54 = v5 - 1;
	//return result;
}

//----- (0006BCB0) --------------------------------------------------------
signed int sub_6BCB0(type_str_0x6E8E* a1)//24ccb0
{
	return sub_692A0(a1);
}

//----- (0006BCD0) --------------------------------------------------------
signed int sub_6BCD0(type_str_0x6E8E* a1)//24ccd0
{
	return sub_69250(a1);
}

//----- (0006BCF0) --------------------------------------------------------
void sub_6BCF0(type_str_0x6E8E* a1x)//24ccf0
{
	type_str_0x6E8E* v1x; // ebx
	//char *v2; // esi
	int16_t v3; // si
	//int result; // eax
	int16_t v5; // dx
	type_str_0x6E8E* v6x; // [esp+0h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					v6x = sub_6DCA0(v1x, &v1x->array_0x4C_76, 0x11u, &SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70], v1x->word_0x82_130, 1);
					if (v6x)
					{
						sub_68E50(v1x, v6x, a1x);
						v6x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v6x->word_0x1A_26 = v1x->word_0x1A_26;
						v6x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v6x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v6x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
						v6x->dword_0x90_144 = a1x->dword_0x90_144;
						v6x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
						v6x->byte_0x46_70 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						v6x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v6x->word_0x9A_154x = v1x->array_0x4C_76;
						sub_57FA0(&v6x->word_0x9A_154x, v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28, 0, 4096);
						v6x->word_0x9A_154x.z = sub_10C40_getTerrainAlt(&v6x->word_0x9A_154x);
					}
					sub_68DE0(a1x, v1x);
				}
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v3 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v3;
		if (!v3)
			sub_6D880(a1x);
	}
	//result = a1;
	v5 = a1x->word_0x36_54;
	if (v5)
		a1x->word_0x36_54 = v5 - 1;
	//return result;
}

//----- (0006BEF0) --------------------------------------------------------
signed int sub_6BEF0(type_str_0x6E8E* a1)//24cef0
{
	return sub_692A0(a1);
}

//----- (0006BF10) --------------------------------------------------------
signed int sub_6BF10(type_str_0x6E8E* a1)//24cf10
{
	return sub_69250(a1);
}

//----- (0006BF30) --------------------------------------------------------
void sub_6BF30(type_str_0x6E8E* a1x)//24cf30
{
	type_str_0x6E8E* v1x; // ebx
	//char *v2; // esi
	int16_t v3; // dx
	//int result; // eax
	int16_t v5; // cx
	type_str_0x6E8E* v6x; // [esp+0h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					v6x = sub_6DCA0(v1x, &v1x->array_0x4C_76, 0x12u, &SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70], v1x->word_0x82_130, 1);
					if (v6x)
					{
						sub_68E50(v1x, v6x, a1x);
						v6x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v6x->word_0x1A_26 = v1x->word_0x1A_26;
						v6x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v6x->dword_0x90_144 = a1x->dword_0x90_144;
						v6x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
						v6x->byte_0x46_70 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						v6x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v6x->word_0x9A_154x = v1x->array_0x4C_76;
						sub_57FA0(&v6x->word_0x9A_154x, v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28, 0, 4096);
						v6x->word_0x9A_154x.z = sub_10C40_getTerrainAlt(&v6x->word_0x9A_154x);
						v6x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v6x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
					}
					sub_68DE0(a1x, v1x);
				}
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v3 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v3;
		if (!v3)
			sub_6D880(a1x);
	}
	//result = a1;
	v5 = a1x->word_0x36_54;
	if (v5)
		a1x->word_0x36_54 = v5 - 1;
	//return result;
}

//----- (0006C130) --------------------------------------------------------
signed int sub_6C130(type_str_0x6E8E* a1)//24d130
{
	return sub_692A0(a1);
}

//----- (0006C150) --------------------------------------------------------
signed int sub_6C150(type_str_0x6E8E* a1)//24d150
{
	return sub_69250(a1);
}

//----- (0006C170) --------------------------------------------------------
void sub_6C170(type_str_0x6E8E* a1x)//24d170
{
	type_str_0x6E8E* v1x; // eax
	//char *v2; // esi
	int16_t v3; // ax
	int16_t v4; // si
	int16_t result; // ax
	type_str_0x6E8E* v6x; // [esp+0h] [ebp-8h]
	type_str_0x6E8E* v7x; // [esp+4h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		v7x = v1x;
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					v6x = sub_4A190(&v7x->array_0x4C_76, 9, 24);
					if (v6x)
					{
						v6x->word_0x82_130 += v7x->word_0x82_130;
						sub_68E50(v7x, v6x, a1x);
						v3 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v6x->byte_0x43_67 = 10;
						v6x->word_0x26_38 = v3;
						v6x->byte_0x44_68 = 72;
						v6x->word_0x1A_26 = v7x->word_0x1A_26;
						v6x->word_0x28_40 = a1x->word_0x28_40;
						v6x->byte_0x46_70 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						v6x->dword_0x10_16 = v7x->dword_0xA4_164x->byte_0x154_340;
						v7x->dword_0xA4_164x->byte_0x154_340 = 0;
						v6x->word_0x9A_154x = v7x->array_0x4C_76;
						sub_57FA0(
							&v6x->word_0x9A_154x,
							v7x->dword_0xA4_164x->word_0x18_24_next_entity + v7x->word_0x1C_28,
							v7x->dword_0xA4_164x->word_0x1A_26 + v7x->word_0x1E_30,
							0x4000);
						v6x->word_0x1C_28 = v7x->dword_0xA4_164x->word_0x18_24_next_entity + v7x->word_0x1C_28;
						v6x->word_0x1E_30 = v7x->dword_0xA4_164x->word_0x1A_26 + v7x->word_0x1E_30;
						sub_6E450_distance_sound(v6x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 9);
					}
				}
				sub_68DE0(a1x, v7x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v4 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v4;
		if (!v4)
			sub_6D880(a1x);
	}
	//result = *(x_WORD *)(a1 + 54);
	if (a1x->word_0x36_54)
		a1x->word_0x36_54 = a1x->word_0x36_54 - 1;
	//return result;
}

//----- (0006C3A0) --------------------------------------------------------
signed int sub_6C3A0(type_str_0x6E8E* a1)//24d3a0
{
	return sub_692A0(a1);
}

//----- (0006C3C0) --------------------------------------------------------
signed int sub_6C3C0(type_str_0x6E8E* a1)//24d3c0
{
	return sub_69250(a1);
}

//----- (0006C3E0) --------------------------------------------------------
void sub_6C3E0(type_str_0x6E8E* a1x)//24d3e0
{
	type_str_0x6E8E* v1x; // ebx
	//char *v2; // esi
	int16_t v3; // si
	//int result; // eax
	int16_t v5; // dx
	type_str_0x6E8E* v6x; // [esp+0h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					v6x = sub_6DCA0(v1x, &v1x->array_0x4C_76, 0x14u, &SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70], v1x->word_0x82_130, 1);
					if (v6x)
					{
						sub_68E50(v1x, v6x, a1x);
						v6x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v6x->word_0x1A_26 = v1x->word_0x1A_26;
						v6x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v6x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v6x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
						v6x->dword_0x90_144 = a1x->dword_0x90_144;
						v6x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
						v6x->byte_0x46_70 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						v6x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v6x->word_0x9A_154x = v1x->array_0x4C_76;
						sub_57FA0(&v6x->word_0x9A_154x, v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28, 0, 4096);
						v6x->word_0x9A_154x.z = sub_10C40_getTerrainAlt(&v6x->word_0x9A_154x);
					}
				}
				sub_68DE0(a1x, v1x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v3 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v3;
		if (!v3)
			sub_6D880(a1x);
	}
	//result = a1;
	v5 = a1x->word_0x36_54;
	if (v5)
		a1x->word_0x36_54 = v5 - 1;
	//return result;
}

//----- (0006C5E0) --------------------------------------------------------
signed int sub_6C5E0(type_str_0x6E8E* a1)//24d5e0
{
	return sub_692A0(a1);
}

//----- (0006C600) --------------------------------------------------------
signed int sub_6C600(type_str_0x6E8E* a1)//24d600
{
	return sub_69250(a1);
}

//----- (0006C620) --------------------------------------------------------
void sub_6C620(type_str_0x6E8E* a1x)//24d620
{
	type_str_0x6E8E* v1x; // ebx
	//char *v2; // edi
	type_str_0x6E8E* v3x; // esi
	uint8_t v4; // ah
	int v5; // eax
	int16_t v6; // dx
	int result; // eax
	int16_t v8; // cx

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					v3x = sub_6DCA0(v1x, &v1x->array_0x4C_76, 0x15u, &SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70], v1x->word_0x82_130, 1);
					if (v3x)
					{
						sub_68E50(v1x, v3x, a1x);
						v3x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v3x->word_0x1A_26 = v1x->word_0x1A_26;
						v3x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v3x->dword_0x90_144 = a1x->dword_0x90_144;
						v4 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						if (v4)
							v5 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2 / (signed int)v4;
						else
							LOWORD(v5) = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
						v3x->word_0x2A_42 = v5;
						v3x->byte_0x46_70 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						v3x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v3x->word_0x9A_154x = v1x->array_0x4C_76;
						sub_57FA0(&v3x->word_0x9A_154x, v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28, 0, 4096);
						v3x->word_0x9A_154x.z = sub_10C40_getTerrainAlt(&v3x->word_0x9A_154x);
						v3x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v3x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
					}
					sub_68DE0(a1x, v1x);
				}
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v6 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v6;
		if (!v6)
			sub_6D880(a1x);
	}
	//result = a1;
	v8 = a1x->word_0x36_54;
	if (v8)
		a1x->word_0x36_54 = v8 - 1;
	//return result;
}

//----- (0006C830) --------------------------------------------------------
signed int sub_6C830(type_str_0x6E8E* a1)//24d830
{
	return sub_692A0(a1);
}

//----- (0006C850) --------------------------------------------------------
signed int sub_6C850(type_str_0x6E8E* a1)//24d850
{
	return sub_69250(a1);
}

//----- (0006C870) --------------------------------------------------------
void sub_6C870(type_str_0x6E8E* a1x)//24d870
{
	type_str_0x6E8E* v1x; // esi
	type_str_0x6E8E* v2x; // edi
	int v3; // eax
	int16_t v4; // si
	int16_t result; // ax
	signed int v6; // [esp+0h] [ebp-8h]
	//char *v7; // [esp+4h] [ebp-4h]

	v1x = 0;
	if (a1x->word_0x2E_46 > 0)
	{
		v2x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v2x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v2x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					if (sub_4A810_get_0x35plus() > 6)
					{
						v6 = 0;
						//v7 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
						while (v6 < 6)
						{
							v1x = sub_4A190(&v2x->array_0x4C_76, 10, 57);
							if (v1x)
							{
								v3 = 4 * v2x->word_0x82_130;
								if (v3 < 140)
									v3 = 140;
								if (v3 > 280)
									LOWORD(v3) = 280;
								a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
								v1x->word_0x82_130 = (a1x->word_0x14_20 & 0x7F) + v3;
								sub_68E50(v2x, v1x, a1x);
								v1x->word_0x28_40 = v2x->word_0x1A_26;
								v1x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
								v1x->byte_0x46_70 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
								v1x->word_0x94_148 = 0;
								if ((uint8_t)SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A >= 3u)
								{
									v1x->word_0x94_148 = v2x->word_0x1A_26;
									sub_36920(/*a1x, */v1x);
								}
								a1x->word_0x14_20 = 9377 * a1x->word_0x14_20 + 9439;
								v1x->word_0x1C_28 = (v2x->word_0x1C_28
									- 85
									+ a1x->word_0x14_20 % 0xAAu
									+ v2x->dword_0xA4_164x->word_0x18_24_next_entity) & 0x7FF;
								v1x->word_0x1E_30 = v2x->dword_0xA4_164x->word_0x1A_26 + v2x->word_0x1E_30;
							}
							v6++;
						}
						if (v1x)
							sub_6E450_distance_sound(v1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 11);
					}
					sub_68DE0(a1x, v2x);
				}
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v4 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v4;
		if (!v4)
			sub_6D880(a1x);
	}
	//result = *(x_WORD *)(a1 + 54);
	if (a1x->word_0x36_54)
		a1x->word_0x36_54 = a1x->word_0x36_54 - 1;
	//return result;
}

//----- (0006CA80) --------------------------------------------------------
signed int sub_6CA80(type_str_0x6E8E* a1)//24da80
{
	return sub_692A0(a1);
}

//----- (0006CAA0) --------------------------------------------------------
signed int sub_6CAA0(type_str_0x6E8E* a1)//24daa0
{
	return sub_69250(a1);
}

//----- (0006CAC0) --------------------------------------------------------
void sub_6CAC0(type_str_0x6E8E* a1x)//24dac0
{
	type_str_0x6E8E* v1x; // eax
	type_str_0x6E8E* v2x; // ebx
	//int v3; // edx
	//Bit8u* v4; // eax
	int16_t v5; // di
	//int result; // eax
	int16_t v7; // bx
	type_str_0x6E8E* v8x; // [esp+0h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		v8x = v1x;
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					v2x = sub_4A190(&v8x->array_0x4C_76, 9, 29);
					if (v2x)
					{
						v2x->word_0x82_130 += v8x->word_0x82_130;
						sub_68E50(v8x, v2x, a1x);
						//v3 = (Bit8u*)a1x - (&x_D41A0_BYTEARRAY_0[28302]);
						v2x->byte_0x43_67 = 10;
						v2x->byte_0x44_68 = 78;
						v2x->word_0x26_38 = a1x - D41A0_BYTESTR_0.struct_0x6E8E;
						v2x->word_0x1A_26 = v8x->word_0x1A_26;
						v2x->array_0x4C_76.z += v8x->array_0x52_82.dd;
						v2x->dword_0x90_144 = a1x->dword_0x90_144;
						v2x->word_0x2A_42 = a1x->byte_0x46_70;
						v2x->dword_0x10_16 = v8x->dword_0xA4_164x->byte_0x154_340;
						v8x->dword_0xA4_164x->byte_0x154_340 = 0;
						v2x->word_0x9A_154x = v8x->array_0x4C_76;
						sub_57FA0(&v2x->word_0x9A_154x, v8x->dword_0xA4_164x->word_0x18_24_next_entity + v8x->word_0x1C_28, 0, 4096);
						v2x->word_0x9A_154x.z = sub_10C40_getTerrainAlt(&v2x->word_0x9A_154x);
						v2x->word_0x1C_28 = v8x->dword_0xA4_164x->word_0x18_24_next_entity + v8x->word_0x1C_28;
						//v4 = x_D41A0_BYTEARRAY_0 + 28302;
						v2x->word_0x1E_30 = v8x->dword_0xA4_164x->word_0x1A_26 + v8x->word_0x1E_30;
						sub_6E450_distance_sound(v2x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 15);
					}
					sub_68DE0(a1x, v8x);
				}
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v5 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v5;
		if (!v5)
			sub_6D880(a1x);
	}
	//result = a1;
	v7 = a1x->word_0x36_54;
	if (v7)
		a1x->word_0x36_54 = v7 - 1;
	//return result;
}

//----- (0006CCE0) --------------------------------------------------------
signed int sub_6CCE0(type_str_0x6E8E* a1)//24dce0
{
	return sub_692A0(a1);
}

//----- (0006CD00) --------------------------------------------------------
signed int sub_6CD00(type_str_0x6E8E* a1)//24dd00
{
	return sub_69250(a1);
}

//----- (0006CD20) --------------------------------------------------------
void sub_6CD20(type_str_0x6E8E* a1x)//24dd20
{
	type_str_0x6E8E* v1x; // eax
	//char *v2; // esi
	type_str_0x6E8E* v3x; // ebx
	int16_t v4; // ax
	//Bit8u* v5; // eax
	int16_t v6; // di
	int result; // eax
	int16_t v8; // bx
	type_str_0x6E8E* v9x; // [esp+0h] [ebp-4h]

	if (a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		v9x = v1x;
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					v3x = sub_4A190(&v9x->array_0x4C_76, 9, 25);
					if (v3x)
					{
						v3x->word_0x82_130 += v9x->word_0x82_130;
						sub_68E50(v9x, v3x, a1x);
						v4 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v3x->byte_0x43_67 = 10;
						v3x->word_0x26_38 = v4;
						v3x->byte_0x44_68 = 74;
						v3x->word_0x1A_26 = v9x->word_0x1A_26;
						v3x->word_0x28_40 = a1x->word_0x28_40;
						v3x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
						v3x->byte_0x46_70 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						v3x->dword_0x10_16 = v9x->dword_0xA4_164x->byte_0x154_340;
						v9x->dword_0xA4_164x->byte_0x154_340 = 0;
						v3x->word_0x9A_154x = v9x->array_0x4C_76;
						sub_57FA0(
							&v3x->word_0x9A_154x,
							v9x->dword_0xA4_164x->word_0x18_24_next_entity + v9x->word_0x1C_28,
							v9x->dword_0xA4_164x->word_0x1A_26 + v9x->word_0x1E_30,
							0x4000);
						v3x->word_0x1C_28 = v9x->dword_0xA4_164x->word_0x18_24_next_entity + v9x->word_0x1C_28;
						//v5 = x_D41A0_BYTEARRAY_0 + 28302;
						v3x->word_0x1E_30 = v9x->dword_0xA4_164x->word_0x1A_26 + v9x->word_0x1E_30;
						sub_6E450_distance_sound(v3x - D41A0_BYTESTR_0.struct_0x6E8E, -1, 9);
					}
				}
				sub_68DE0(a1x, v9x);
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v6 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v6;
		if (!v6)
			sub_6D880(a1x);
	}
	//result = a1;
	v8 = a1x->word_0x36_54;
	if (v8)
		a1x->word_0x36_54 = v8 - 1;
	//return result;
}

//----- (0006CF60) --------------------------------------------------------
signed int sub_6CF60(type_str_0x6E8E* a1)//24df60
{
	return sub_692A0(a1);
}

//----- (0006CF80) --------------------------------------------------------
signed int sub_6CF80(type_str_0x6E8E* a1)//24df80
{
	return sub_69250(a1);
}

//----- (0006CFA0) --------------------------------------------------------
void sub_6CFA0(type_str_0x6E8E* a1x)//24dfa0
{
	type_str_0x6E8E* v1x; // ebx
	//char *v2; // edi
	type_str_0x6E8E* v3x; // esi
	uint8_t v4; // dl
	int v5; // eax
	int16_t v6; // dx
	int result; // eax
	int16_t v8; // cx

	if (x_BYTE_D41B6 && a1x->word_0x2E_46 > 0)
	{
		v1x = x_DWORD_EA3E4[a1x->word_0x28_40];
		if (v1x > x_DWORD_EA3E4[0])
		{
			if (sub_68D50(a1x, v1x))
			{
				if (a1x->word_0x2E_46 == a1x->word_0x30_48)
				{
					//v2 = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * a1x->byte_0x46_70];
					v3x = sub_6DCA0(v1x, &v1x->array_0x4C_76, 0x19u, &SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70], v1x->word_0x82_130, 1);
					if (v3x)
					{
						sub_68E50(v1x, v3x, a1x);
						v3x->word_0x26_38 = a1x-D41A0_BYTESTR_0.struct_0x6E8E;
						v3x->word_0x1A_26 = v1x->word_0x1A_26;
						v3x->array_0x4C_76.z += v1x->array_0x52_82.dd;
						v3x->dword_0x90_144 = a1x->dword_0x90_144;
						v4 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						if (v4)
							v5 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2 / (signed int)v4;
						else
							LOWORD(v5) = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].dword_2;
						v3x->word_0x2A_42 = v5;
						v3x->byte_0x46_70 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[a1x->byte_0x46_70].byte_0x1A;
						v3x->dword_0x10_16 = v1x->dword_0xA4_164x->byte_0x154_340;
						v1x->dword_0xA4_164x->byte_0x154_340 = 0;
						v3x->word_0x9A_154x = v1x->array_0x4C_76;
						sub_57FA0(&v3x->word_0x9A_154x, v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28, 0, 4096);
						v3x->word_0x9A_154x.z = sub_10C40_getTerrainAlt(&v3x->word_0x9A_154x);
						v3x->word_0x1C_28 = v1x->dword_0xA4_164x->word_0x18_24_next_entity + v1x->word_0x1C_28;
						v3x->word_0x1E_30 = v1x->dword_0xA4_164x->word_0x1A_26 + v1x->word_0x1E_30;
					}
					sub_68DE0(a1x, v1x);
				}
			}
			else
			{
				a1x->word_0x2E_46 = 1;
			}
		}
		v6 = a1x->word_0x2E_46 - 1;
		a1x->word_0x2E_46 = v6;
		if (!v6)
			sub_6D880(a1x);
	}
	//result = a1;
	v8 = a1x->word_0x36_54;
	if (v8)
		a1x->word_0x36_54 = v8 - 1;
	//return result;
}

//----- (0006D1C0) --------------------------------------------------------
signed int sub_6D1C0(type_str_0x6E8E* a1)//24e1c0
{
	return sub_692A0(a1);
}

//----- (0006D1E0) --------------------------------------------------------
signed int sub_6D1E0(type_str_0x6E8E* a1)//24e1e0
{
	return sub_69250(a1);
}

//----- (0006D200) --------------------------------------------------------
void sub_6D200(type_str_0x2BDE* a1x)//24e200
{
	//int v1; // eax
	signed int v2; // ecx
	char v3; // bl
	int16_t v4; // ax
	uint8_t v5; // bl
	int v6; // ebx
	int v7; // edx
	int16_t v8; // bx
	int16_t v9; // di
	int v10; // ebx
	int v11; // eax
	int16_t v12; // bx
	int16_t v13; // ax
	int v15; // [esp+8h] [ebp-14h]
	int16_t v16; // [esp+Ch] [ebp-10h]
	int16_t v17; // [esp+14h] [ebp-8h]

	//LOWORD(v1) = a1x->word_0x007_2BE4_11237;
	if (a1x->word_0x007_2BE4_11237 == D41A0_BYTESTR_0.word_0xc)
	{
		//BYTE1(v1) = a1x->byte_0x3DF_2BE4_12221;
		if (a1x->byte_0x3DF_2BE4_12221 == 5 || a1x->byte_0x3DF_2BE4_12221 == 8)
		{
			if (x_WORD_180660_VGA_type_resolution & 1)
				v2 = 400;
			else
				v2 = 480;
			//v3 = a1x->byte_0x846_2BDE;
			//array_0x3B5_949x 2110
			v3 = a1x->dword_0x3E6_2BE4_12228.str_611.byte_0x458_1112;
			if (v3 < 13)
				v4 = v3;
			else
				v4 = v3 - 13;
			v17 = v4;
			/*v1 = **filearray_2aa18c[6];
			v15 = *(uint8_t *)(**filearray_2aa18c[6] + 539);
			v5 = *(x_BYTE *)(a1 + 2109);*/
			//v1 = **filearray_2aa18c[6];
			v15 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].height;
			v5 = a1x->dword_0x3E6_2BE4_12228.str_611.byte_0x457_1111;
			if (v5)
			{
				if (v5 <= 2u)
				{
					/*v8 = (uint8_t)x_BYTE_D94FF_spell_index[*(char *)(a1 + 2110)];
					LOBYTE(v8) = *(x_BYTE *)(**filearray_2aa18c[6] + 982);
					v9 = 3 * v8;
					v16 = v8;
					LOWORD(v1) = *(uint8_t *)(**filearray_2aa18c[6] + 983);
					v10 = v2 - 2 * v15 - v1;
					v11 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 538) >> 1)
						+ *(uint8_t *)(**filearray_2aa18c[6] + 538) * v17
						+ *(uint8_t *)(**filearray_2aa18c[6] + 532)
						- (v9 >> 1);*/ //fix it
					//v8 = (uint8_t)x_BYTE_D94FF_spell_index[a1x->dword_0x3E6_2BE4_12228.str_611.byte_0x458_1112];
					v8 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[163].width;
					v9 = 3 * v8;
					v16 = v8;
					//LOWORD(v1) = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[164].height;
					v10 = v2 - 2 * v15 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[163].height;
					v11 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width >> 1)
						+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width * v17
						+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[88].width
						- (v9 >> 1);
					v12 = v10 + 18;
					if (640 - v9 >= (int16_t)v11)
					{
						if ((v11 & 0x8000u) != 0)
							LOWORD(v11) = 0;
					}
					else
					{
						LOWORD(v11) = 640 - v9;
					}
					v13 = v16 * a1x->dword_0x3E6_2BE4_12228.str_611.array_0x437_1079x.byte[x_BYTE_D94FF_spell_index[a1x->dword_0x3E6_2BE4_12228.str_611.byte_0x458_1112]]
						+ (v16 >> 1)
						+ 8
						+ v11;
					if (unk_18058Cstr.x_WORD_1805C2_joystick != 7 && unk_18058Cstr.x_WORD_1805C2_joystick != 1 && unk_18058Cstr.x_WORD_1805C2_joystick != 2)
					{
						unk_18058Cstr.x_DWORD_1805B0_mouse.x = v13;
						//LOWORD(v1) = v12;
						unk_18058Cstr.x_DWORD_1805B0_mouse.y = v12;
					}
					else
					{
						/*LOWORD(v1) = */sub_5BDC0_set_mouse_position(v13, v12);
					}
				}
			}
			else
			{
				/*v6 = *(uint8_t *)(**filearray_2aa18c[6] + 538) * v17
				   + *(uint8_t *)(**filearray_2aa18c[6] + 532)
				   + ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 538) >> 1);
				v7 = ((int16_t)v15 >> 1)
				   + (int16_t)v2
				   - 2 * (int16_t)v15
				   + (int16_t)v15 * (*(x_BYTE *)(a1 + 2110) >= 13);*/
				v6 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width * v17
					+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[88].width
					+ ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width >> 1);
				v7 = ((int16_t)v15 >> 1)
					+ (int16_t)v2
					- 2 * (int16_t)v15
					+ (int16_t)v15 * (a1x->dword_0x3E6_2BE4_12228.str_611.byte_0x458_1112 >= 13);
				if (unk_18058Cstr.x_WORD_1805C2_joystick != 7 && unk_18058Cstr.x_WORD_1805C2_joystick != 1 && unk_18058Cstr.x_WORD_1805C2_joystick != 2)
				{
					unk_18058Cstr.x_DWORD_1805B0_mouse.x = (int16_t)v6;
					//LOWORD(v1) = v7;
					unk_18058Cstr.x_DWORD_1805B0_mouse.y = (int16_t)v7;
				}
				else
				{
					/*LOWORD(v1) = */sub_5BDC0_set_mouse_position(v6, v7);
				}
			}
		}
	}
	//return v1;
}

//----- (0006D420) --------------------------------------------------------
int sub_6D420_mouse_to_spell(int16_t posx, int16_t posy)//24e420
{
	int16_t v2; // ax
	int outposy; // ebx
	int outposx; // eax

	if (x_WORD_180660_VGA_type_resolution & 1)
		v2 = 400;
	else
		v2 = 480;
	/*v3 = (a2 - (int16_t)(v2 - 2 * *(uint8_t *)(**filearray_2aa18c[6] + 539)))
	   / *(uint8_t *)(**filearray_2aa18c[6] + 539);
	v4 = (a1 - *(uint8_t *)(**filearray_2aa18c[6] + 532)) / *(uint8_t *)(**filearray_2aa18c[6] + 538);*/ // fix it
	outposy = (posy - (v2 - 2 * (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].height))/(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].height;
	outposx = (posx - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[88].width) / (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width;
	if ((outposy & 0x8000u) == 0)
	{
		if (outposy > 1)
			outposy = 1;
	}
	else
	{
		outposy = 0;
	}
	if ((outposx & 0x8000u) == 0)
	{
		if (outposx > 12)
			outposx = 12;
	}
	else
	{
		outposx = 0;
	}
	return 13 * outposy + outposx;
}

//----- (0006D4C0) --------------------------------------------------------
char sub_6D4C0(type_str_611* a1x)//24e4c0
{
	char result; // al

	result = a1x->array_0x437_1079x.byte[x_BYTE_D94FF_spell_index[a1x->byte_0x458_1112]];
	a1x->byte_0x459_1113 = result;
	return result;
}

//----- (0006D4F0) --------------------------------------------------------
int sub_6D4F0(type_str_611* a1x, int16_t a2)//24e4f0
{
	int16_t v2; // cx
	int v3; // esi
	//int v4y; // eax
	Bit16s v4x;
	int result; // eax
	//Bit8u* v6; // edx
	Bit16s v6x;

	/*v2 = 3 * *(uint8_t *)(**filearray_2aa18c[6] + 982);
	v3 = *(uint8_t *)(**filearray_2aa18c[6] + 538) / 2
	   + *(uint8_t *)(**filearray_2aa18c[6] + 532)
	   + *(uint8_t *)(**filearray_2aa18c[6] + 538) * (*(char *)(a1 + 501) % 13)
	   - v2 / 2;
	v4 = *(uint8_t *)(**filearray_2aa18c[6] + 538) / 2
	   + *(uint8_t *)(**filearray_2aa18c[6] + 532)
	   + *(uint8_t *)(**filearray_2aa18c[6] + 538) * (*(char *)(a1 + 501) % 13)
	   - v2 / 2;*/
	v2 = 3 * (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[163].width;
	v3 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width / 2
		+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[88].width
		+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width * (a1x->byte_0x458_1112 % 13)
		- v2 / 2;
	v4x = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width / 2
		+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[88].width
		+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width * (a1x->byte_0x458_1112 % 13)
		- v2 / 2;
	if ((int16_t)v3 <= 640 - v2)
	{
		if ((v3 & 0x8000u) != 0)
			v4x = v3 ^ v4x;
	}
	else
	{
		v4x = 640 - v2;
	}
	// fix it result = (a2 - (int16_t)v4) / *(uint8_t *)(**filearray_2aa18c[6] + 982);
	result = (a2 - v4x) / (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[163].width;
	//v6 = a1 + x_BYTE_D94FF_spell_index[a1x->byte_0x458_1112];
	v6x = a1x->array_0x41D_1053z.byte[x_BYTE_D94FF_spell_index[a1x->byte_0x458_1112]];
	if ((int16_t)result > v6x)
		return (int)v6x;
	if ((result & 0x8000u) != 0)
		result = 0;
	return result;
}

//----- (0006D5E0) --------------------------------------------------------
void sub_6D5E0(type_str_0x6E8E* a1x, char a2)//24e5e0
{
	int v2y; // eax
	//int v3; // edx
	//Bit8u* v4; // esi
	uint8_t v5; // dl
	uint8_t v6; // ST04_1
	uint16_t v7; // dx
	int16_t v8; // cx
	int v9; // edi

	//
	//v2 = 0;
	//
	Bit8s v2x;

	v2x = a2;
	//v3 = 80 * a1x->byte_0x40_64;
	//if (a2 > (uint8_t)(*xadataspellsdat.var28_begin_buffer)[v3] - 1)
	//	LOBYTE(v2) = (*xadataspellsdat.var28_begin_buffer)[v3] - 1;
	if (a2 > SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].byte_0 - 1)
		v2x = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].byte_0 - 1;
	if (a1x->word_0x2E_46)
	{
		a1x->word_0x2C_44 = v2x + 1;
	}
	else
	{
		//v4 = (Bit8u*)&(*xadataspellsdat.var28_begin_buffer)[80 * a1x->byte_0x40_64 + 2 + 26 * (char)v2];
		//&SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[v2]
		a1x->byte_0x46_70 = v2x;
		a1x->word_0x2A_42 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[v2x].dword_2;
		a1x->word_0x30_48 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[v2x].word_0x18;
		a1x->byte_0x3B_59 = (SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[v2x].byte_0x1B & 1) == 0;
		v5 = a1x->byte_0x40_64;
		a1x->byte_0x3C_60 = 0;
		v6 = v5;
		v7 = a1x->word_0x28_40;
		a1x->byte_0x3D_61 = 0;
		//fix
		a1x->dword_0x88_136 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[v2x].dword_A;
		//fix

		v2y = sub_6D710(x_DWORD_EA3E4[v7], v6, v2x);
		v8 = a1x->word_0x30_48;		
		v9 = v2y;
		if (v8)
			v2y /= v8;
		a1x->dword_0x90_144 = v2y;
		a1x->dword_0x8C_140 = v9;
		//fix    a1x->dword_0x88_136 = SPELLS_BEGIN_BUFFER_str[a1x->byte_0x40_64].subspell[v2].dword_A;
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x20)
		{
			a1x->dword_0x88_136 = 0;
			a1x->dword_0x90_144 = 1;
		}
	}
	//return v2;
}

//----- (0006D710) --------------------------------------------------------
int sub_6D710(type_str_0x6E8E* a1x, uint8_t a2, uint8_t a3)//24e710
{
	signed int v3; // ecx
	int result; // eax
	//int v5; // edx
	type_str_0x6E8E* v6x; // ebx
	int v7; // edx
	int v8; // eax

	v3 = 0;
	//result = *(x_DWORD *)&(*xadataspellsdat.var28_begin_buffer)[80 * a2 + 6 + 26 * a3];
	result = SPELLS_BEGIN_BUFFER_str[a2].subspell[a3].dword_6;
	if (a2 == 2 && a1x > x_DWORD_EA3E4[0])
	{
		//v5 = a1x->dword_0xA4_164;
		v6x = x_DWORD_EA3E4[a1x->dword_0xA4_164x->word_0x3A_58];
		if (v6x <= x_DWORD_EA3E4[0])
			goto LABEL_23;
		switch (v6x->dword_0x10_16)
		{
		case 0:
			result = 1000;
			break;
		case 1:
			result = 10000;
			break;
		case 2:
			result = 20000;
			break;
		case 3:
			result = 40000;
			break;
		case 4:
			result = 80000;
			break;
		case 5:
			result = 160000;
			break;
		case 6:
			result = 320000;
			break;
		default:
			result = 300000000;
			break;
		}
		if (v6x->dword_0x10_16 >= 7)
			goto LABEL_25;
		if (a3 >= 1u)
		{
			if (a3 <= 1u)
			{
				v7 = 320 * result;
				v8 = 320 * result;
			}
			else
			{
				if (a3 != 2)
					goto LABEL_21;
				v8 = 384 * result;
				v7 = v8;
			}
			//result = (v8 - (__CFSHL__(v7 >> 31, 8) + (v7 >> 31 << 8))) >> 8;
			result = (v7 - (my_sign32(v7) << 8) + my_sign32(v7)) >> 8;
		}
	LABEL_21:
		if (v6x->dword_0x10_16)
		{
		LABEL_25:
			if (v3)
				result += 3000;
			return result;
		}
		//v5 = a1x->dword_0xA4_164;
	LABEL_23:
		if (a1x->dword_0xA4_164x->byte_0x1BE_446)
			v3 = 1;
		goto LABEL_25;
	}
	return result;
}

//----- (0006D830) --------------------------------------------------------
void sub_6D830(type_str_0x6E8E* a1x, char a2)//24e830
{
	//char *v2; // eax
	//type_str_0x6E8E* v3x; // esi
	//Bit8u* v4; // esi

	//LOBYTE(v2) = a1x->byte_0x40_64;
	if (a1x->byte_0x40_64 == 10)
	{
		//v2 = (char *)& SPELLS_BEGIN_BUFFER_DA818[0x322] + 26 * a2;
		//v3x = x_DWORD_EA3E4[a1x->word_0x28_40];
		//SPELLS_BEGIN_BUFFER_str[10].subspell[a2].byte_0x1A
		if (x_DWORD_EA3E4[a1x->word_0x28_40] > x_DWORD_EA3E4[0] && SPELLS_BEGIN_BUFFER_str[10].subspell[a2].byte_0x1A == 1)
		{
			//v4 = v3 + 76;
			a1x->word_0x9A_154x = x_DWORD_EA3E4[a1x->word_0x28_40]->array_0x4C_76;
			//*(x_WORD *)(a1 + 158) = *(x_WORD *)(v4 + 4);
		}
	}
	//return (char)v2;
}

//----- (0006D880) --------------------------------------------------------
void sub_6D880(type_str_0x6E8E* a1x)//24e880
{
	//char result=0; // al

	if (a1x->word_0x2C_44)
	{
		/*result = */sub_6D5E0(a1x, a1x->word_0x2C_44 - 1);
		a1x->word_0x2C_44 = 0;
	}
	//return result;
}

//----- (0006D8B0) --------------------------------------------------------
void sub_6D8B0(uint16_t a1, uint16_t a2, int16_t a3)//24e8b0
{
	type_str_0x6E8E* v3x; // eax
	//int v4; // ebx
	int v5; // ecx
	//int v6; // ebx

	if (!(x_D41A0_BYTEARRAY_4_struct.setting_38545 & 4))
	{
		if (a1)
		{
			v3x = x_DWORD_EA3E4[a1];
			if (v3x->byte_0x3F_63 == 3 && !v3x->byte_0x40_64)
			{
				//v4 = v3x->dword_0xA4_164;
				v5 = v3x->dword_0xA4_164x->str_611.array_0x2CB_715x.dword[a2];
				//v6 = v4 + 611;
				v3x->dword_0xA4_164x->str_611.array_0x2CB_715x.dword[a2] = a3 + v5;
				if (a2 == 2)
					sub_6D5E0(x_DWORD_EA3E4[v3x->dword_0xA4_164x->str_611.array_0x333_819x.word[2]], v3x->dword_0xA4_164x->str_611.array_0x437_1079x.byte[2]);
				if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
				{
					if (a1 == D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240)
						//sub_6DAD0(&v3x->dword_0xA4_164x->str_611, (uint8_t *)&(*xadataspellsdat.var28_begin_buffer)[80 * a2], a2);
						sub_6DAD0(&v3x->dword_0xA4_164x->str_611, &SPELLS_BEGIN_BUFFER_str[a2], a2);
				}
				else
				{
					//sub_6D9C0(&v3x->dword_0xA4_164x->str_611, (uint8_t *)&(*xadataspellsdat.var28_begin_buffer)[80 * a2], a2, 0, 1);
					sub_6D9C0(&v3x->dword_0xA4_164x->str_611, &SPELLS_BEGIN_BUFFER_str[a2], a2, 0, 1);
				}
			}
		}
	}
}

//----- (0006D9C0) --------------------------------------------------------
void sub_6D9C0(type_str_611* a1x, type_SPELLS_BEGIN_BUFFER_str* a2x, int16_t a3, char a4, char a5)//24e9c0
{
	signed int v5; // esi
	int v6; // eax
	int v7; // edi
	//int v8; // edx
	//int result; // eax
	char v10; // dh

	v5 = 0;
	if ((a1x->array_0x3E9_1001x.byte[a3] || a1x->array_0x333_819x.word[a3]) && (x_BYTE_D41B6 || a3 != 25))
		v5 = 1;
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 >= 0 && a1x->array_0x2CB_715x.dword[2] > 7)
		a1x->array_0x2CB_715x.dword[2] = 7;
	//v6 = *a2;
	v6 = a2x->byte_0;
	v7 = a1x->array_0x2CB_715x.dword[a3] + a1x->array_0x263_611x.dword[a3];
	do
		v6--;
	//while (v6 >= 0 && v7 < *(x_DWORD *)&a2[26 * v6 + 14]);
	while (v6 >= 0 && v7 < a2x->subspell[v6].dword_E);
	if (v6 < 0)
		v6 = 0;
	//v8 = a1 + a3;
	if (v6 != a1x->array_0x41D_1053z.byte[a3])
	{
		a1x->array_0x41D_1053z.byte[a3] = v6;
		if (v5)
		{
			if (a5)
				sub_6DC40_improve_ability(a3);
		}
	}
	//result = a1 + a3;
	v10 = a1x->array_0x41D_1053z.byte[a3];
	if (a1x->array_0x437_1079x.byte[a3] > v10)
		a1x->array_0x437_1079x.byte[a3] = v10;
	if (v5 && a4)
	{
		//if (v7 >= *(x_DWORD *)(a2 + 66))
		if (v7 >= a2x->subspell[2].dword_E)
		{
			//result = *(x_DWORD *)(a2 + 66);
			//a1x->array_0x263_611x.dword[a3] = *(x_DWORD*)(a2 + 66);
			a1x->array_0x263_611x.dword[a3] = a2x->subspell[2].dword_E;
		}
		else
		{
			//result = a3;
			a1x->array_0x263_611x.dword[a3] = v7;
		}
	}
	//return result;
}

//----- (0006DAD0) --------------------------------------------------------
void sub_6DAD0(type_str_611* a1x, type_SPELLS_BEGIN_BUFFER_str* a2x, int16_t a3)//24ead0
{
	int v3; // eax
	//int v4; // edx

	//if (a1x->array_0x333_819x.word[a3] && a1x->array_0x41D_1053z.byte[a3] < *a2 - 1)
	if (a1x->array_0x333_819x.word[a3] && a1x->array_0x41D_1053z.byte[a3] < a2x->byte_0 - 1)
	{
		v3 = a1x->array_0x2CB_715x.dword[a3] + a1x->array_0x263_611x.dword[a3];
		if (v3 < 0)
			v3 = 0;
		/*if (v3 > *(x_DWORD *)(a2 + 70) + 2)
			v3 = *(x_DWORD *)(a2 + 70) + 2;*/
		if (v3 > a2x->subspell[2].dword_0x12 + 2)
			v3 = a2x->subspell[2].dword_0x12 + 2;
		//v4 = a1 + a3;
		//if (v3 >= *(x_DWORD *)&a2[26 * (a1x->array_0x41D_1053z.byte[a3] + 1) + 18])
		if (v3 >= a2x->subspell[a1x->array_0x41D_1053z.byte[a3]+1].dword_0x12)
		{
			a1x->array_0x41D_1053z.byte[a3]++;
			sub_6DC40_improve_ability(a3);
		}
	}
}

//----- (0006DB50) --------------------------------------------------------
void sub_6DB50(char a1, char a2)//24eb50
{
	//int result; // eax
	//uint8_t *v3; // esi
	int v3x;
	signed int v4; // ebx
	type_str_611* v5; // edi
	int16_t v6; // ST08_2

	//result = (int)x_D41A0_BYTEARRAY_4;
	if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10))
	{
		//v3 = (uint8_t *)*xadataspellsdat.var28_begin_buffer;
		v3x = 0;
		//result = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]->dword_0xA4_164x;
		v4 = 0;
		v5 = &x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]->dword_0xA4_164x->str_611;
		while (v4 < 26)
		{
			v6 = v4++;
			/*result = */sub_6D9C0(v5, &SPELLS_BEGIN_BUFFER_str[v3x], v6, a1, a2);
			//v3 += 80;
			v3x++;
		}
	}
	//return result;
}

//----- (0006DBD0) --------------------------------------------------------
void sub_6DBD0()//24ebd0
{
	//uint8_t *v0; // esi
	int v0x;
	signed int v1; // ebx
	type_str_611* v2; // edi
	int16_t v3; // ST08_2

	if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
	{
		//v0 = (uint8_t *)*xadataspellsdat.var28_begin_buffer;
		v0x = 0;
		v1 = 0;
		v2 = &x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]->dword_0xA4_164x->str_611;
		while (v1 < 26)
		{
			v3 = v1++;
			sub_6DAD0(v2, &SPELLS_BEGIN_BUFFER_str[v0x], v3);
			//v0 += 80;
			v0x++;
		}
	}
}

//----- (0006DC40) --------------------------------------------------------
void sub_6DC40_improve_ability(Bit8u ability)//24ec40
{
	//char v1; // [esp+0h] [ebp-2h]

	sprintf(printbuffer, (const char *)x_DWORD_E9C4C_langindexbuffer[159], x_DWORD_E9C4C_langindexbuffer[160 + ability]);//Your ability to cast %s has improved.
	sub_19760_set_message(printbuffer, 5u, 200);
	sub_6E450_distance_sound(D41A0_BYTESTR_0.word_0xc, -1, 61);
}

//----- (0006DCA0) --------------------------------------------------------
type_str_0x6E8E* sub_6DCA0(type_str_0x6E8E* a1x, axis_3d* a2x, uint16_t a3, type_SPELLS_BEGIN_BUFFER_str_sub* a4x, int16_t a5, char a6)//24eca0
{
	int16_t v6; // di
	type_str_0x6E8E* v7x; // ebx
	type_str_0x6E8E* v8x; // eax
	//uint8_t v9; // dl
	type_str_0x6E8E* v10x; // eax
	int16_t v11; // ax
	type_str_0x6E8E* v12x; // eax
	type_str_0x6E8E* v13x; // eax
	type_str_0x6E8E* v14x; // eax
	type_str_0x6E8E* v15x; // eax
	type_str_0x6E8E* v16x; // eax
	type_str_0x6E8E* v17x; // eax
	type_str_0x6E8E* v18x; // eax
	type_str_0x6E8E* v19x; // eax
	type_str_0x6E8E* v20x; // eax
	type_str_0x6E8E* v21x; // ecx
	int v22; // eax
	type_str_0x6E8E* v23x; // eax
	int16_t v24; // dx

	v6 = 15;
	v7x = 0;
	if (a3 < 0x10u)
	{
		if (a3 < 9u)
		{
			if (a3)
			{
				if (a3 != 7)
					goto LABEL_60;
				//v9 = *((x_BYTE *)a4 + 24);
				if (a4x->byte_0x1A)
				{
					if (a4x->byte_0x1A > 2u)
						goto LABEL_60;
					v12x = sub_4A190(a2x, 9, 12);
					v7x = v12x;
					if (!v12x)
						goto LABEL_60;
					v12x->byte_0x43_67 = 9;
					v12x->byte_0x44_68 = 9;
					v11 = a4x->dword_2;
					v6 = 9;
				}
				else
				{
					v10x = sub_4A190(a2x, 9, 9);
					v7x = v10x;
					if (!v10x)
						goto LABEL_60;
					v10x->byte_0x43_67 = 10;
					v10x->byte_0x44_68 = 23;
					v11 = a4x->dword_2;
					v6 = 23;
				}
				v7x->word_0x2A_42 = v11;
				goto LABEL_60;
			}
			if (a4x->byte_0x1A >= 2u)
				v8x = sub_4A190(a2x, 9, 28);
			else
				v8x = sub_4A190(a2x, 9, 0);
			v7x = v8x;
			if (v8x)
			{
				v8x->byte_0x43_67 = 10;
				if (a4x->byte_0x1A >= 2u)
					v8x->byte_0x44_68 = 76;
				else
					v8x->byte_0x44_68 = 0;
				v6 = 9;
			}
		}
		else
		{
			if (a3 <= 9u)
			{
				v13x = sub_4A190(a2x, 9, 3);
				v7x = v13x;
				if (!v13x)
					goto LABEL_60;
				v13x->byte_0x43_67 = 10;
				v13x->byte_0x44_68 = 17;
				v13x->word_0x2A_42 = a4x->dword_2;
				goto LABEL_59;
			}
			if (a3 < 0xDu)
				goto LABEL_60;
			if (a3 <= 0xDu)
			{
				v14x = sub_4A190(a2x, 9, 8);
				v7x = v14x;
				if (v14x)
				{
					v14x->byte_0x43_67 = 10;
					v14x->byte_0x44_68 = 25;
				}
			}
			else if (a3 == 15)
			{
				v15x = sub_4A190(a2x, 9, 23);
				v7x = v15x;
				if (v15x)
				{
					v15x->byte_0x43_67 = 10;
					v15x->byte_0x44_68 = 71;
					v15x->word_0x2A_42 = a4x->dword_2;
				LABEL_59:
					v7x->byte_0x46_70 = a4x->byte_0x1A;
					goto LABEL_60;
				}
			}
		}
	}
	else if (a3 <= 0x10u)
	{
		v16x = sub_4A190(a2x, 9, 5);
		v7x = v16x;
		if (v16x)
		{
			v16x->byte_0x43_67 = 10;
			v16x->byte_0x44_68 = 11;
			v16x->word_0x2A_42 = a4x->dword_2;
			v16x->byte_0x46_70 = a4x->byte_0x1A;
		}
	}
	else if (a3 < 0x14u)
	{
		if (a3 <= 0x11u)
		{
			v17x = sub_4A190(a2x, 9, 2);
			v7x = v17x;
			if (v17x)
			{
				v17x->byte_0x43_67 = 10;
				v17x->byte_0x44_68 = 15;
				v17x->word_0x2A_42 = a4x->dword_2;
				v17x->byte_0x46_70 = a4x->byte_0x1A;
			}
		}
		else if (a3 == 18)
		{
			v18x = sub_4A190(a2x, 9, 4);
			v7x = v18x;
			if (v18x)
			{
				v18x->byte_0x43_67 = 10;
				v18x->byte_0x44_68 = 9;
				v18x->word_0x2A_42 = a4x->dword_2;
				v18x->byte_0x46_70 = a4x->byte_0x1A;
			}
		}
	}
	else if (a3 <= 0x14u)
	{
		v19x = sub_4A190(a2x, 9, 22);
		v7x = v19x;
		if (v19x)
		{
			v19x->byte_0x43_67 = 10;
			v19x->byte_0x44_68 = 67;
			v19x->word_0x2A_42 = a4x->dword_2;
			v19x->byte_0x46_70 = a4x->byte_0x1A;
		}
	}
	else
	{
		if (a3 <= 0x15u)
		{
			v20x = sub_4A190(a2x, 9, 26);
			v21x = v20x;
			v7x = v20x;
			if (!v20x)
				goto LABEL_60;
			v20x->byte_0x43_67 = 10;
			v20x->byte_0x44_68 = 22;
			if (a4x->byte_0x1A)
				v22 = a4x->dword_2 / a4x->byte_0x1A;
			else
				LOWORD(v22) = a4x->dword_2;
			goto LABEL_58;
		}
		if (a3 == 25)
		{
			v23x = sub_4A190(a2x, 9, 30);
			v21x = v23x;
			v7x = v23x;
			if (v23x)
			{
				v23x->byte_0x43_67 = 10;
				v23x->byte_0x44_68 = 89;
				if (a4x->dword_2)
					v22 = a4x->dword_2 / a4x->byte_0x1A;
				else
					LOWORD(v22) = a4x->dword_2;
			LABEL_58:
				v21x->word_0x2A_42 = v22;
				goto LABEL_59;
			}
		}
	}
LABEL_60:
	if (v7x)
	{
		v24 = a5 + v7x->word_0x82_130;
		v7x->word_0x82_130 = v24;
		if (v24 < 384)
			v7x->word_0x82_130 = 384;
		if (v7x->word_0x82_130 > 0x2000)
			v7x->word_0x82_130 = 0x2000;
		if (a6)
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, v6);
	}
	return v7x;
}

//----- (0006E020) --------------------------------------------------------
signed int sub_6E020(uint16_t a1)//24f020
{
	signed int result; // eax

	result = 0;
	if (a1 < 0x11u)
	{
		if (a1 < 0xBu)
		{
			if (a1 == 9)
				result = 18;
		}
		else if (a1 <= 0xBu)
		{
			result = 16;
		}
		else if (a1 == 15)
		{
			result = 17;
		}
	}
	else if (a1 <= 0x11u)
	{
		result = 9;
	}
	else if (a1 < 0x43u)
	{
		if (a1 == 22)
			result = 21;
	}
	else if (a1 <= 0x43u)
	{
		result = 20;
	}
	else if (a1 == 71)
	{
		result = 15;
	}
	return result;
}

//----- (0006E090) --------------------------------------------------------
void sub_6E090(type_str_611* a1x, int a2)//24f090
{
	signed int i; // eax
	//int result; // eax

	for (i = 0; i < 26; i++)
	{
		if (a1x->array_0x333_819x.word[i])
			a1x->array_0x2CB_715x.dword[i] += a2;
	}
	//result = (int)x_D41A0_BYTEARRAY_4;
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 >= 0 && a1x->array_0x2CB_715x.dword[2] > 7)
		a1x->array_0x2CB_715x.dword[2] = 7;
	//return result;
}

//----- (0006E0D0) --------------------------------------------------------
void sub_6E0D0()//24f0d0
{
	signed int v0; // edx
	type_str_611* v1x; // ecx
	int v2; // ebx

	v0 = 0;
	v1x = &x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]->dword_0xA4_164x->str_611;
	while (v0 < 26)
	{
		v1x->array_0x3E9_1001x.byte[v0] = 1;
		//v2 = *(Bit32s*)& SPELLS_BEGIN_BUFFER_DA818[0x42+4*20 * v0];
		v2 = SPELLS_BEGIN_BUFFER_str[v0].subspell[2].dword_E;
		v1x->array_0x263_611x.dword[v0] = v2 + 1;
		v0++;
	}
	sub_6DB50(1, 0);
}

//----- (0006E150) --------------------------------------------------------
void sub_6E150()//24f150
{
	int16_t v0; // si
	int v1; // ebx
	uint16_t v2; // di
	int v3; // ebx
	int v4; // ebx

	if (x_BYTE_E3799_sound_card && x_BYTE_E3798_sound_active2 && (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1) || x_D41A0_BYTEARRAY_4_struct.byte_38591))
	{
		v0 = 0;
		do
		{
			v1 = 6 * v0;
			switch (x_WORD_F4FE0[v1])
			{
			case 1:
				sub_75110(x_WORD_F4FE0[0x03+6 * v0], v0, x_WORD_F4FE0[0x02+6 * v0], x_WORD_F4FE0[0x01+6 * v0], x_WORD_F4FE0[0x05+6 * v0]);
				x_WORD_F4FE0[6 * v0] = 0;
				x_WORD_F4FE0[0x04+6 * v0] = 2;
				break;
			case 2:
				sub_751B0(x_WORD_F4FE0[0x03 + v1], v0, x_WORD_F4FE0[0x02 + v1], x_WORD_F4FE0[0x01 + v1], x_WORD_F4FE0[0x05 + v1]);
				x_WORD_F4FE0[v1] = 0;
				x_WORD_F4FE0[0x04 + v1] = 2;
				break;
			case 3:
				sub_75160(x_WORD_F4FE0[0x03 + v1], v0, x_WORD_F4FE0[0x02 + v1], x_WORD_F4FE0[0x01 + v1], x_WORD_F4FE0[0x05 + v1]);
				x_WORD_F4FE0[v1] = 0;
				x_WORD_F4FE0[0x04 + v1] = 2;
				break;
			case 4:
				v2 = x_WORD_F4FE0[0x02 + v1];
				if (v2 == 512)
					sub_8F420_sound_proc20(0, v0);
				else
					sub_8F100_sound_proc19(0, v0, (signed int)v2 >> 8, 64, 0x64u, -1, 2u);
				v3 = 3 * v0;
				x_WORD_F4FE0[0x05 + 2 * v3] = 2;
				x_WORD_F4FE0[2 * v3] = 0;
				break;
			default:
				break;
			}
			v4 = 3 * v0++;
			x_WORD_F4FE0[0x02 + 2 * v4] = 0;
		} while (v0 < 70);
	}
}

//----- (0006E450) --------------------------------------------------------
void sub_6E450_distance_sound(int16_t a1, int16_t a2, int16_t a3)//24f450
{
	type_str_0x6E8E* v3x; // edx
	axis_3d* v4x; // esi
	unsigned int v5; // eax
	int16_t v6; // ax
	uint16_t v7; // ax
	int v8; // edx
	int v9; // eax
	int v10; // esi
	int v11; // edx
	int v12; // edi
	unsigned int v13; // eax
	unsigned int v14; // edx
	int v15; // ebx
	int v16; // ebx
	int v17; // ebx
	int v18; // ebx
	int v19; // ebx
	int v20; // ebx
	int16_t v21; // [esp+0h] [ebp-24h]
	type_str_0x6E8E* v22x; // [esp+4h] [ebp-20h]
	signed int v23; // [esp+8h] [ebp-1Ch]
	int v24; // [esp+Ch] [ebp-18h]
	unsigned int v25; // [esp+10h] [ebp-14h]
	type_str_0x6E8E* v26x; // [esp+14h] [ebp-10h]
	uint16_t v27; // [esp+18h] [ebp-Ch]
	int16_t v28; // [esp+1Ch] [ebp-8h]
	int16_t v29; // [esp+20h] [ebp-4h]

	v29 = 0;
	v21 = 0;
	v24 = D41A0_BYTESTR_0.dword_0x8;
	if (!x_BYTE_E3799_sound_card || !x_BYTE_E3798_sound_active2)
		return;
	v3x = x_DWORD_EA3E4[a1];
	v22x = v3x;
	if (v3x <= x_DWORD_EA3E4[0])
	{
		v10 = 0x7FFF;
		LOWORD(v12) = 0x7FFF;
	}
	else
	{
		if (v3x->struct_byte_0xc_12_15.byte[0] < 0)
			return;
		v4x = &v3x->array_0x4C_76;
		if ((unsigned int)sub_584D0_SQdistX_SQdistY(
			&x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]->array_0x4C_76,
				&v3x->array_0x4C_76) > 0x9000000)
			return;
		v26x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
		v29 = v22x->word_0x1A_26;
		v5 = sub_58490_radix_3d_2(&v26x->array_0x4C_76, v4x);
		v25 = v5;
		v23 = v5;
		v6 = sub_581E0_maybe_tan2(&v26x->array_0x4C_76, v4x);
		v28 = v6;
		v7 = sub_582B0(v26x->word_0x1C_28, v6);
		v27 = v7;
		v8 = 12288 * (512 - v7 / 2 + 512);
		v9 = (v8 - (__CFSHL__(v8 >> 31, 10) + (v8 >> 31 << 10))) >> 10;
		v10 = v9 ? (signed int)(0x7FFF * (v9 - v25)) / v9 : 0x7FFF;
		v11 = (int16_t)sub_582F0(v26x->word_0x1C_28, v28);
		if (v10 < 512)
			return;
		if (v10 > 0x7FFF)
			v10 = 0x7FFF;
		if (v23 > 320)
		{
			if (v27 > 0x200u)
				v27 = 1024 - v27;
			v12 = (((v27 << 15) * v11 - (__CFSHL__((v27 << 15) * v11 >> 31, 9) + ((v27 << 15) * v11 >> 31 << 9))) >> 9)
				+ 0x7FFF;
			if (v12 < 0)
				v12 = 0;
			if (v12 > 0xFFFF)
				LOWORD(v12) = -1;
		}
		else
		{
			LOWORD(v12) = 0x7FFF;
		}
		if ((uint16_t)a3 >= 0x2Au)
		{
			v13 = 9377 * v24 + 9439;
			if ((uint16_t)a3 <= 0x2Cu)
			{
				v14 = v13 % 0x1E - 15;
			}
			else
			{
				if (a3 != 46)
					goto LABEL_29;
				v14 = v13 % 0x14;
				if (v22x->byte_0x45_69 == 14)
					LOWORD(v14) = v14 + 10;
				else
					LOWORD(v14) = v14 - 10;
			}
			v21 = v14;
		}
	}
LABEL_29:
	if ((uint16_t)a3 < 0x2Au)
	{
		if ((uint16_t)a3 < 0x20u)
		{
			if (a3 != 7)
				goto LABEL_46;
			goto LABEL_45;
		}
		if ((uint16_t)a3 <= 0x20u || a3 == 38)
		{
		LABEL_45:
			v29 = 0;
			goto LABEL_46;
		}
	}
	else
	{
		if ((uint16_t)a3 <= 0x2Cu)
			goto LABEL_45;
		if ((uint16_t)a3 >= 0x31u)
		{
			if ((uint16_t)a3 > 0x35u && ((uint16_t)a3 < 0x3Au || (uint16_t)a3 > 0x3Bu && a3 != 62))
				goto LABEL_46;
			goto LABEL_45;
		}
		if ((uint16_t)a3 >= 0x2Eu && (uint16_t)a3 <= 0x2Fu)
			goto LABEL_45;
	}
LABEL_46:
	switch (a3)
	{
	case 1:
	case 2:
		if (a2 == D41A0_BYTESTR_0.word_0xc)
		{
			sub_8F100_sound_proc19(0, a3, 0, 64, 0x64u, -1, 2u);
			sub_8F710_sound_proc21(0, a3, 70, 2u, 0);
		}
		break;
	case 3:
	case 4:
	case 6:
	case 9:
	case 10:
	case 11:
	case 15:
	case 18:
	case 19:
	case 20:
	case 21:
	case 22:
	case 23:
	case 24:
	case 25:
	case 26:
	case 27:
	case 28:
	case 30:
	case 38:
	case 40:
	case 41:
	case 48:
	case 50:
	case 51:
	case 52:
	case 53:
	case 60:
	case 61:
	case 63:
	case 64:
		v17 = 6 * a3;
		if (sub_6EA90(v10, (uint16_t)x_WORD_F4FE0[0x02 + v17]))
		{
			x_WORD_F4FE0[0x02 + v17] = v10;
			x_WORD_F4FE0[0x01 + v17] = v12;
			x_WORD_F4FE0[0x05 + v17] = v21;
			x_WORD_F4FE0[v17] = 1;
			x_WORD_F4FE0[0x03 + v17] = v29;
		}
		break;
	case 5:
		if (a2 == D41A0_BYTESTR_0.word_0xc)
		{
			sub_8F100_sound_proc19(0, a3, 0, 64, 0x64u, -1, 2u);
			sub_8F710_sound_proc21(0, a3, 120, 2u, 0);
		}
		break;
	case 7:
	case 8:
	case 12:
	case 13:
	case 16:
	case 17:
	case 32:
	case 33:
	case 34:
	case 37:
	case 39:
	case 42:
	case 43:
	case 44:
	case 46:
	case 58:
	case 59:
	case 62:
		v20 = 6 * a3;
		if (sub_6EA90(v10, (uint16_t)x_WORD_F4FE0[0x02 + v20]))
		{
			x_WORD_F4FE0[0x02 + v20] = v10;
			x_WORD_F4FE0[0x01 + v20] = v12;
			x_WORD_F4FE0[0x05 + v20] = v21;
			x_WORD_F4FE0[v20] = 3;
			x_WORD_F4FE0[0x03 + v20] = v29;
		}
		break;
	case 14:
	case 29:
		v18 = 6 * a3;
		if (sub_6EA90(v10, (uint16_t)x_WORD_F4FE0[0x02 + v18]))
		{
			if (a2 == D41A0_BYTESTR_0.word_0xc)
			{
				x_WORD_F4FE0[0x02 + v18] = v10;
				x_WORD_F4FE0[0x01 + v18] = v12;
				x_WORD_F4FE0[0x05 + v18] = v21;
				x_WORD_F4FE0[0x03 + v18] = 0;
				x_WORD_F4FE0[v18] = 1;
			}
			else if (a2 == -1)
			{
				x_WORD_F4FE0[0x02 + v18] = v10;
				x_WORD_F4FE0[0x01 + v18] = v12;
				x_WORD_F4FE0[0x05 + v18] = v21;
				x_WORD_F4FE0[0x03 + v18] = v29;
				x_WORD_F4FE0[v18] = 1;
			}
		}
		break;
	case 31:
		if (a2 == D41A0_BYTESTR_0.word_0xc)
		{
			sub_8F100_sound_proc19(0, a3, 0, 64, 0x64u, -1, 2u);
			sub_8F710_sound_proc21(0, a3, 85, 2u, 0);
		}
		break;
	case 47:
	case 49:
		v15 = 6 * a3;
		if (sub_6EA90(v10, (uint16_t)x_WORD_F4FE0[0x02 + v15]))
		{
			x_WORD_F4FE0[0x02 + v15] = v10;
			x_WORD_F4FE0[0x01 + v15] = v12;
			x_WORD_F4FE0[0x05 + v15] = v21;
			x_WORD_F4FE0[0x03 + v15] = v29;
			x_WORD_F4FE0[v15] = 4;
		}
		break;
	case 54:
	case 55:
	case 56:
	case 57:
		v19 = 6 * a3;
		if (sub_6EA90(v10, (uint16_t)x_WORD_F4FE0[0x02 + v19]))
		{
			if (a2 == D41A0_BYTESTR_0.word_0xc)
			{
				x_WORD_F4FE0[0x02 + v19] = v10;
				x_WORD_F4FE0[0x01 + v19] = v12;
				x_WORD_F4FE0[0x05 + v19] = v21;
				x_WORD_F4FE0[0x03 + v19] = 0;
				x_WORD_F4FE0[v19] = 3;
			}
			else if (a2 == -1)
			{
				x_WORD_F4FE0[0x02 + v19] = v10;
				x_WORD_F4FE0[0x01 + v19] = v12;
				x_WORD_F4FE0[0x05 + v19] = v21;
				x_WORD_F4FE0[0x03 + v19] = v29;
				x_WORD_F4FE0[v19] = 3;
			}
		}
		break;
	case 65:
	case 66:
	case 67:
	case 68:
	case 69:
		v16 = 3 * a3;
		x_WORD_F4FE0[0x02 + 2 * v16] = v10;
		x_WORD_F4FE0[0x01 + 2 * v16] = v12;
		x_WORD_F4FE0[2 * v16] = 3;
		x_WORD_F4FE0[0x05 + 2 * v16] = v21;
		x_WORD_F4FE0[0x03 + 2 * v16] = v29;
		break;
	default:
		return;
	}
}

//----- (0006EA90) --------------------------------------------------------
bool sub_6EA90(int a1, int a2)//24fa90
{
	return a1 - a2 >= -8;
}

//----- (0006EAB0) --------------------------------------------------------
void sub_6EAB0(int a1, int16_t a2, int16_t a3)//24fab0
{
	if (!x_BYTE_E3799_sound_card || !x_BYTE_E3798_sound_active2)
		return;
	if ((uint16_t)a3 < 0x1Fu)
	{
		if ((uint16_t)a3 < 1u || (uint16_t)a3 > 2u && a3 != 5)
			return;
	}
	else if ((uint16_t)a3 > 0x1Fu)
	{
		if ((uint16_t)a3 >= 0x2Fu && ((uint16_t)a3 <= 0x2Fu || a3 == 49))
			sub_8F710_sound_proc21(0, a3, 0, 4u, 1);
		return;
	}
	if (a2 == D41A0_BYTESTR_0.word_0xc)
		sub_8F710_sound_proc21(0, a3, 0, 2u, 1);
}

//----- (0006EB90) --------------------------------------------------------
void sub_6EB90(filearray_struct *a1)//24fb90
{
	for (Bit32u i = 0;(a1[i].begin_buffer) != &ZERO_BUFFER;i++)
	{
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_98709_create_index_dattab_power(*a1[i].begin_buffer, *a1[i].end_buffer, *a1[i].dat_buffer, *a1[i]._posistruct);//279709 //1a6f44,1a6f86,1a6578
		else
			sub_9874D_create_index_dattab(*a1[i].begin_buffer, *a1[i].end_buffer, *a1[i].dat_buffer, *a1[i]._posistruct);
	}
}

//----- (0006EBF0) --------------------------------------------------------
void sub_6EBF0(filearray_struct *a1)//24FBF0
{
	for (Bit32u i = 0;(a1[i].begin_buffer) != &ZERO_BUFFER;i++)
	{
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_99A77_create_index_dattab_div(*a1[i].begin_buffer, *a1[i].end_buffer, *a1[i].dat_buffer, *a1[i]._posistruct);
		else
			sub_99AEB_create_index_dattab_minus(*a1[i].begin_buffer, *a1[i].end_buffer, *a1[i].dat_buffer, *a1[i]._posistruct);
	}
}

//----- (0006EDB0) --------------------------------------------------------
void sub_6EDB0_set_mouse_position_by_res()//24FDB0
{
	//int result; // eax

	if (x_WORD_180660_VGA_type_resolution == 1)
		/*result = */sub_6EDE0_set_mouse_position2(320, 200);
	else
		/*result = */sub_6EDE0_set_mouse_position2(320, 240);
	//return result;
}

//----- (0006EDE0) --------------------------------------------------------
void sub_6EDE0_set_mouse_position2(int16_t a1, int16_t a2)//24fde0
{
	int16_t v2; // si
	int16_t v3; // bx
	//char* result; // eax
	int16_t v5; // ax
	char v6[28]; // [esp+0h] [ebp-38h]
	int16_t v7; // [esp+8h] [ebp-30h]
	int16_t v8; // [esp+Ch] [ebp-2Ch]
	char v9[28]; // [esp+1Ch] [ebp-1Ch]

	v2 = a1;
	v3 = a2;
	//result = v9;//fixed 3551f0 - najit
	if (x_DWORD_E3768 > 0)
	{
		if (a1 != -1 || /*(result = (char*)a2,*/ a2 != -1)
		{
			//result = (char*)a1;
			if (a1 != -1)
			{
				v6[0] = 4;
				if (a1 <= 0)
				{
					if (!(x_WORD_180660_VGA_type_resolution & 1))
						v2 = 8 * a1;
				}
				else
				{
					if (a1 > 638)
						v2 = 638;
					x_WORD_E3760_mouse.x = v2;
					if (!(x_WORD_180660_VGA_type_resolution & 1))
						v2 *= 8;
				}
				v7 = v2;
				if (a2 <= 0)
				{
					if (x_WORD_180660_VGA_type_resolution & 1)
						v5 = x_WORD_E3760_mouse.y;
					else
						v5 = 8 * x_WORD_E3760_mouse.y;
					v8 = v5;
				}
				else
				{
					if (x_WORD_180660_VGA_type_resolution & 1)
					{
						if (a2 > 398)
							v3 = 398;
						x_WORD_E3760_mouse.y = v3;
						if (!(x_WORD_180660_VGA_type_resolution & 1))
							v3 *= 8;
					}
					else
					{
						if (a2 > 478)
							v3 = 478;
						x_WORD_E3760_mouse.y = v3;
						if (!(x_WORD_180660_VGA_type_resolution & 1))
							v3 *= 8;
					}
					v8 = v3;
				}

				VGA_Set_mouse(v7/8,v8/8);
			}
		}
	}
}

//----- (0006EF10) --------------------------------------------------------
void sub_6EF10_set_mouse_minmax(int16_t a1, int16_t a2, int16_t a3, int16_t a4)//24ff10
{
	int16_t v4; // si
	int16_t v5; // bx
	int16_t result; // ax
	char v7ar[28]; // [esp+0h] [ebp-38h]
	int16_t v8ar[14]; // [esp+1Ch] [ebp-1Ch]
	//int16_t v9; // [esp+24h] [ebp-14h]//v8ar[4]
	//int16_t v10; // [esp+28h] [ebp-10h]//v8ar[6]

	v4 = a2;
	v5 = a4;
	memset(v8ar, 0, 28);
	memset(v7ar, 0, 28);
	if (a2 > 638)
		v4 = 638;
	result = x_WORD_180660_VGA_type_resolution;
	if ((uint16_t)x_WORD_180660_VGA_type_resolution >= 1u)
	{
		if ((uint16_t)x_WORD_180660_VGA_type_resolution <= 1u)
		{
			v8ar[4] = a1;
			v8ar[6] = v4;
			v8ar[0] = 7;
			//int386(0x33, (REGS*)v8ar, (REGS*)v7ar);//set mouse min,max
			v8ar[0] = 8;
			v8ar[4] = a3;
			if (a4 > 398)
				v5 = 398;
		}
		else
		{
			if (x_WORD_180660_VGA_type_resolution != 8)
				return;
			v8ar[0] = 7;
			v8ar[4] = 8 * a1;
			v8ar[6] = 8 * v4;
			//int386(0x33, (REGS*)v8ar, (REGS*)v7ar);//set mouse min,max
			v8ar[0] = 8;
			if (a4 > 478)
				v5 = 478;
			v8ar[4] = 8 * a3;
			v5 *= 8;
		}
		v8ar[6] = v5;
		//result = int386(0x33, (REGS*)v8ar, (REGS*)v7ar);//set mouse min,max
	}
	//return;
}

//----- (0006F030) --------------------------------------------------------
type_str_0x6E8E* sub_6F030(type_str_0x6E8E* a1x)//250030
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_6F850(a1x, 1);
	if (resultx)
	{
		sub_4A1E0(a1x->word_0x1A_26, 1);
		sub_57F10(a1x);
	}
	return resultx;
}

//----- (0006F070) --------------------------------------------------------
type_str_0x6E8E* sub_6F070(type_str_0x6E8E* a1x)//250070
{
	type_str_0x6E8E* resultx; // eax

	resultx = sub_6F850(a1x, 0);
	if (resultx)
	{
		sub_4A1E0(a1x->word_0x1A_26, 1);
		sub_57F10(a1x);
	}
	return resultx;
}

//----- (0006F0B0) --------------------------------------------------------
void sub_6F0B0(type_str_0x6E8E* a1x)//2500b0
{
	//type_str_0x6E8E* resultx; // eax

	if (a1x->dword_0x10_16)
	{
		//resultx = sub_6F8E0(a1x, 1);
		if (!sub_6F8E0(a1x, 1))
			a1x->dword_0x10_16--;
	}
	else
	{
		//resultx = sub_6F850(a1x, 1);
		if (sub_6F850(a1x, 1))
		{
			/*result = */sub_4A1E0(a1x->word_0x1A_26, 0);
			a1x->dword_0x10_16 = 10;
		}
	}
	//return resultx;
}

//----- (0006F100) --------------------------------------------------------
type_str_0x6E8E* sub_6F100(type_str_0x6E8E* a1x)//250100
{
	type_str_0x6E8E* resultx; // eax

	if (a1x->dword_0x10_16)
	{
		resultx = sub_6F8E0(a1x, 0);
		if (!resultx)
			a1x->dword_0x10_16--;
	}
	else
	{
		resultx = sub_6F850(a1x, 0);
		if (resultx)
		{
			/*result = */sub_4A1E0(a1x->word_0x1A_26, 0);
			a1x->dword_0x10_16 = 10;
		}
	}
	return resultx;
}

//----- (0006F150) --------------------------------------------------------
type_str_0x6E8E* sub_6F150(type_str_0x6E8E* a1x)//250150
{
	type_str_0x6E8E* resultx; // eax

	resultx = x_D41A0_BYTEARRAY_4_struct.dword_38519;
	if (resultx > x_DWORD_EA3E4[0])
	{
		while (resultx->byte_0x40_64
			|| !D41A0_BYTESTR_0.struct_0x3659C[resultx->dword_0xA4_164x->word_0x38_56].array_0x3659C_byte[0])
		{
			resultx = resultx->next_0;
			if (resultx <= x_DWORD_EA3E4[0])
				return resultx;
		}
		sub_4A1E0(a1x->word_0x1A_26, 1);
		sub_57F10(a1x);
	}
	return resultx;
}

//----- (0006F1C0) --------------------------------------------------------
int sub_6F1C0(type_str_0x6E8E* a1x)//2501c0
{
	//type_str_3659C* result; // eax
	int resultx;
	int16_t v2; // bx
	int16_t v3; // dx

	//result = D41A0_BYTESTR_0.byte_0x36E01;
	if (a1x->byte_0x46_70 < D41A0_BYTESTR_0.byte_0x36E01)
	{
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
			v2 = D41A0_BYTESTR_0.word_0xe;
		else
			v2 = 1;
		v3 = 0;
		//result = D41A0_BYTESTR_0.struct_0x3659C;
		resultx = 0;
		while (v3 < v2)
		{
			if (D41A0_BYTESTR_0.struct_0x3659C[resultx].array_0x3659C_byte[a1x->byte_0x46_70 + 3] == 2)
			{
				D41A0_BYTESTR_0.struct_0x3659C[resultx].array_0x3659C_byte[2] = 1;
				sub_4A1E0(a1x->word_0x1A_26, 1);
				sub_57F10(a1x);
				return 1;
			}
			v3++;
			//result += 11;
			resultx++;
		}
	}
	else
		return D41A0_BYTESTR_0.byte_0x36E01;
	// FIXME: types
	// return (int)&D41A0_BYTESTR_0.struct_0x3659C[resultx];
	return 0;
}

//----- (0006F2B0) --------------------------------------------------------
void sub_6F2B0(type_str_0x6E8E* a1x)//2502b0
{
	type_str_0x6E8E* result; // eax
	//uint16_t v2; // dx

	result = sub_6F850(a1x, 1);
	if (result)
	{
		result->byte_0x45_69 = 12;
		result->byte_0x46_70 = 0;
		sub_57F10(a1x);
		//result = (x_BYTE *)x_D41A0_BYTEARRAY_0;
		//v2 = D41A0_BYTESTR_0.word_0x36DFE;
		if (D41A0_BYTESTR_0.word_0x36DFE)
		{
			//result = x_DWORD_EA3E4[v2];
			//result[12] &= 0xFEu;
			x_DWORD_EA3E4[D41A0_BYTESTR_0.word_0x36DFE]->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
		}
	}
	//return result;
}

//----- (0006F300) --------------------------------------------------------
unsigned int sub_6F300(type_str_0x6E8E* a1x, signed int a2)//250300
{
	unsigned int result; // eax
	int v3; // esi

	result = a2;
	if (a2 == -1)
	{
		for (result = 0; (signed int)result <= 16; ++result)
		{
			if ((result <= 0xB || result >= 0x10 && result <= 0x1C) && x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[result])
				return result;
		}
		v3 = a1x->dword_0x10_16;
		if (!v3)
		{
			a1x->dword_0x10_16 = 16;
			return result;
		}
		if (v3 == 1)
		{
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 41);
			sub_4A1E0(a1x->word_0x1A_26, 1);
			sub_57F10(a1x);
			return 1;
		}
	}
	else
	{
		if (x_D41A0_BYTEARRAY_4_struct.bytearray_38403x[a2])
			return result;
		v3 = a1x->dword_0x10_16;
		if (!v3)
		{
			a1x->dword_0x10_16 = 16;
			return result;
		}
		if (v3 == 1)
		{
			sub_6E450_distance_sound(a1x-D41A0_BYTESTR_0.struct_0x6E8E, -1, 41);
			sub_4A1E0(a1x->word_0x1A_26, 1);
			sub_57F10(a1x);
			return 1;
		}
	}
	result = v3 - 1;
	a1x->dword_0x10_16 = v3 - 1;
	return result;
}

//----- (0006F420) --------------------------------------------------------
unsigned int sub_6F420(type_str_0x6E8E* a1x)//250420
{
	return sub_6F300(a1x, 0);
}

//----- (0006F440) --------------------------------------------------------
unsigned int sub_6F440(type_str_0x6E8E* a1)//250440
{
	return sub_6F300(a1, 1u);
}

//----- (0006F460) --------------------------------------------------------
unsigned int sub_6F460(type_str_0x6E8E* a1)//250460
{
	return sub_6F300(a1, 2u);
}

//----- (0006F480) --------------------------------------------------------
unsigned int sub_6F480(type_str_0x6E8E* a1)//250480
{
	return sub_6F300(a1, 3u);
}

//----- (0006F4A0) --------------------------------------------------------
unsigned int sub_6F4A0(type_str_0x6E8E* a1)//2504a0
{
	return sub_6F300(a1, 4u);
}

//----- (0006F4C0) --------------------------------------------------------
unsigned int sub_6F4C0(type_str_0x6E8E* a1)//2504c0
{
	return sub_6F300(a1, 5u);
}

//----- (0006F4E0) --------------------------------------------------------
unsigned int sub_6F4E0(type_str_0x6E8E* a1)//2504e0
{
	return sub_6F300(a1, 6u);
}

//----- (0006F500) --------------------------------------------------------
unsigned int sub_6F500(type_str_0x6E8E* a1)//250500
{
	return sub_6F300(a1, 7u);
}

//----- (0006F520) --------------------------------------------------------
unsigned int sub_6F520(type_str_0x6E8E* a1)//250520
{
	return sub_6F300(a1, 8u);
}

//----- (0006F540) --------------------------------------------------------
unsigned int sub_6F540(type_str_0x6E8E* a1)//250540
{
	return sub_6F300(a1, 9u);
}

//----- (0006F560) --------------------------------------------------------
unsigned int sub_6F560(type_str_0x6E8E* a1)//250560
{
	return sub_6F300(a1, 0xAu);
}

//----- (0006F580) --------------------------------------------------------
unsigned int sub_6F580(type_str_0x6E8E* a1)//250580
{
	return sub_6F300(a1, 0xBu);
}

//----- (0006F5A0) --------------------------------------------------------
unsigned int sub_6F5A0(type_str_0x6E8E* a1)//2505a0
{
	return sub_6F300(a1, 0xCu);
}

//----- (0006F5C0) --------------------------------------------------------
unsigned int sub_6F5C0(type_str_0x6E8E* a1)//2505c0
{
	return sub_6F300(a1, 0xDu);
}

//----- (0006F5E0) --------------------------------------------------------
unsigned int sub_6F5E0(type_str_0x6E8E* a1)//2505e0
{
	return sub_6F300(a1, 0xEu);
}

//----- (0006F600) --------------------------------------------------------
unsigned int sub_6F600(type_str_0x6E8E* a1)//250600
{
	return sub_6F300(a1, 0xFu);
}

//----- (0006F620) --------------------------------------------------------
unsigned int sub_6F620(type_str_0x6E8E* a1)//250620
{
	return sub_6F300(a1, 0x10u);
}

//----- (0006F640) --------------------------------------------------------
unsigned int sub_6F640(type_str_0x6E8E* a1)//250640
{
	return sub_6F300(a1, 0x11u);
}

//----- (0006F660) --------------------------------------------------------
unsigned int sub_6F660(type_str_0x6E8E* a1)//250660
{
	return sub_6F300(a1, 0x12u);
}

//----- (0006F680) --------------------------------------------------------
unsigned int sub_6F680(type_str_0x6E8E* a1)//250680
{
	return sub_6F300(a1, 0x13u);
}

//----- (0006F6A0) --------------------------------------------------------
unsigned int sub_6F6A0(type_str_0x6E8E* a1)//2506a0
{
	return sub_6F300(a1, 0x14u);
}

//----- (0006F6C0) --------------------------------------------------------
unsigned int sub_6F6C0(type_str_0x6E8E* a1)//2506c0
{
	return sub_6F300(a1, 0x15u);
}

//----- (0006F6E0) --------------------------------------------------------
unsigned int sub_6F6E0(type_str_0x6E8E* a1)//2506e0
{
	return sub_6F300(a1, 0x16u);
}

//----- (0006F700) --------------------------------------------------------
unsigned int sub_6F700(type_str_0x6E8E* a1)//250700
{
	return sub_6F300(a1, 0x17u);
}

//----- (0006F720) --------------------------------------------------------
unsigned int sub_6F720(type_str_0x6E8E* a1)//250720
{
	return sub_6F300(a1, 0x18u);
}

//----- (0006F740) --------------------------------------------------------
unsigned int sub_6F740(type_str_0x6E8E* a1)//250740
{
	return sub_6F300(a1, 0x19u);
}

//----- (0006F760) --------------------------------------------------------
unsigned int sub_6F760(type_str_0x6E8E* a1)//250760
{
	return sub_6F300(a1, 0x1Au);
}

//----- (0006F780) --------------------------------------------------------
unsigned int sub_6F780(type_str_0x6E8E* a1)//250780
{
	return sub_6F300(a1, 0x1Bu);
}

//----- (0006F7A0) --------------------------------------------------------
unsigned int sub_6F7A0(type_str_0x6E8E* a1)//2507a0
{
	return sub_6F300(a1, 0x1Cu);
}

//----- (0006F7C0) --------------------------------------------------------
unsigned int sub_6F7C0(type_str_0x6E8E* a1)//2507c0
{
	return sub_6F300(a1, 0xFFFFFFFF);
}

//----- (0006F7E0) --------------------------------------------------------
x_BYTE *sub_6F7E0(type_str_0x6E8E* a1x)//2507e0
{
	x_BYTE *result; // eax
	//uint16_t v2; // dx

	if (x_D41A0_BYTEARRAY_4_struct.setting_38545 & 8)
		sub_57F10(a1x);
	result = (x_BYTE *)sub_6F850(a1x, 1);
	if (result)
	{
		result[69] = 11;
		result[70] = 0;
		sub_57F10(a1x);
		//result = (x_BYTE *)x_D41A0_BYTEARRAY_0;
		//v2 = *(x_WORD *)(0x36DFC + x_D41A0_BYTEARRAY_0);
		if (D41A0_BYTESTR_0.word_0x36DFC)
		{
			x_DWORD_EA3E4[D41A0_BYTESTR_0.word_0x36DFC]->struct_byte_0xc_12_15.byte[0] &= 0xFEu;
		}
	}
	return result;
}

//----- (0006F850) --------------------------------------------------------
type_str_0x6E8E* sub_6F850(type_str_0x6E8E* a1x, int a2)//250850
{
	type_str_0x6E8E* ix; // ebx

	if (a1x->byte_0x3E_62 & 7)
		return 0;
	for (ix = x_D41A0_BYTEARRAY_4_struct.dword_38519; ; ix = ix->next_0)
	{
		if (ix <= x_DWORD_EA3E4[0])
		{
			a1x->array_0x4C_76.z = sub_10C40_getTerrainAlt(&a1x->array_0x4C_76);
			return 0;
		}
		if (!ix->byte_0x40_64 && sub_10750(a1x, ix) == a2)
			break;
	}
	if (a1x->byte_0x40_64 > 3u)
		sub_6E450_distance_sound(ix - D41A0_BYTESTR_0.struct_0x6E8E, -1, 41);
	return ix;
}

//----- (0006F8E0) --------------------------------------------------------
type_str_0x6E8E* sub_6F8E0(type_str_0x6E8E* a1x, int a2)////2508e0
{
	uint16_t v2; // bx
	//int v3; // esi
	int v3x;
	type_str_0x6E8E* v4x; // edi

	v2 = 0;
	//v3 = (int)x_D41A0_BYTEARRAY_0 + 11230;
	v3x = 0;
	while (v2 < D41A0_BYTESTR_0.word_0xe)
	{
		v4x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[v3x].word_0x00a_2BE4_11240];
		if (sub_10750(a1x, v4x) == a2)
			return v4x;
		//v3 += 2124;
		v3x++;
		v2++;
	}
	return 0;
}

//----- (0006F940) --------------------------------------------------------
void sub_6F940_sub_draw_text(char* textbuffer, int posx, int posy, Bit8u color)//250940
{
	char* v4; // esi
	int v5; // ebx
	uint16_t v6; // ax
	int v7; // eax
	//int v8; // edi
	int v9; // eax
	int result; // eax

	v4 = textbuffer;
	v5 = posx;
	x_WORD_E36D4 = 64;
	while (*v4 && v5 < 640)
	{
		v6 = (uint8_t)*v4;
		if (v6 < 0xAu)
		{
			if (!v4[0])
				goto LABEL_16;
			if (v6 == 9)
				goto LABEL_14;
		}
		else
		{
			if (v6 <= 0xAu)
			{
				LOWORD(v7) = sub_6FC30_get34_height();
				v5 = posx;
				posy += v7;
				goto LABEL_16;
			}
			if (v6 >= 0xDu)
			{
				if (v6 <= 0xDu)
					goto LABEL_16;
				if (v6 == 32)
				{
				LABEL_14:
					LOWORD(v9) = sub_6FC10_letter_width();
					goto LABEL_15;
				}
			}
		}
		if (!v4[0])
			goto LABEL_14;
		//v8 = 6 * (v4[0] + 1);
		//similar as:sub_7C120_draw_bitmap_640(tempposx, tempposy, xy_DWORD_17DEC0_spritestr[temptextbuffer[0]]);
		//posistruct tempposistruct;//fixed
		//tempposistruct.pointer = new Bit8u[1];//fixed
		/*
		19f990->59361a00 0407 70361a00 04 07 85361a00
		*/
		/*tempposistruct.pointer= &x_DWORD_EA3D4[v8];//fixed
		tempposistruct.sizex = 0;
		tempposistruct.sizey = 0;*/
		if (help_VGA_type_resolution != 8)//fixed
		{
			sub_72C40_draw_bitmap_640_setcolor(v5, posy, x_DWORD_EA3D4[v4[0] + 1], color);//fixed 2509d1
			v9 = x_DWORD_EA3D4[v4[0] + 1].width;
		}
		else
		{
			sub_72C40_draw_bitmap_640_setcolor(v5, posy, posistruct7[v4[0] + 1], color);//fixed 2509d1
			v9 = posistruct7[v4[0] + 1].width;
		}
		//sub_72C40_draw_bitmap_640_setcolor(v5, a3, *(new posistruct)/*(Bit8u*)(v8 + x_DWORD_EA3D4)*/, a4);
		
	LABEL_15:
		v5 += v9;
	LABEL_16:
		v4++;
	}
	result = v5;
	x_WORD_E36D4 = 0;
}

//----- (0006FC10) --------------------------------------------------------
Bit8u sub_6FC10_letter_width()//250c10
{
	if (help_VGA_type_resolution != 8)//fixed
		return x_DWORD_EA3D4[33].width;
	else
		return posistruct7[33].width;
}

//----- (0006FC30) --------------------------------------------------------
Bit8u sub_6FC30_get34_height()//250c30
{
	if (help_VGA_type_resolution != 8)//fixed
		return x_DWORD_EA3D4[34].height;
	else
		return posistruct7[34].height;
}

//----- (0006FC50) --------------------------------------------------------
void sub_6FC50(int16_t a1)//250c50
{
	//int result; // eax
	posistruct *v2; // edx

	//result = a1;
	v2 = *x_DWORD_E9B20.at(a1)._posistruct;
	if (!v2->data)
		v2 = *x_DWORD_E9B20.at(0)._posistruct;
	x_DWORD_EA3D4 = v2;
	//return result * 4;
}

//----- (0006FC80) --------------------------------------------------------
unsigned int sub_6FC80_pre_draw_text(char *a1, int16_t a2, int16_t a3, int16_t a4, uint8_t a5)//00250C80
{
	unsigned int v5; // kr04_4
	int v6; // esi
	int v7; // eax
	int16_t v9; // [esp+0h] [ebp-4h]

	v9 = a3 - a2;
	v5 = strlen(a1) + 1;
	if (v5 == 1)
	{
		v6 = a2 + v9 / 2;
	}
	else
	{
		v6 = a2 + v9 / 2 - (v5 - 1) * sub_6FC10_letter_width() / 2;
		sub_2BC10_draw_text(a1, v6, a4, a5);
	}
	v7 = sub_6FC10_letter_width();
	return v6 + v7 * strlen(a1);
}

//----- (0006FD30) --------------------------------------------------------
//#error "6FD9C: positive sp value has been found (funcsize=32)"

void sub_6FD30() {}//00250d30

//----- (0006FDA0) --------------------------------------------------------
void sub_6FDA0()//fix//250da0
{
	//int v0; // eax
	//void(*v1)(); // eax
	int16_t v2; // dx
	//int result; // eax

	//fix it
	v2 = 0;
	//fix it

	//v0 = (int)x_D41A0_BYTEARRAY_4;
	x_D41A0_BYTEARRAY_4_struct.dwordindex_2388 = 10022;
	x_D41A0_BYTEARRAY_4_struct.dwordindex_2392 = 0;
	//v1 = dos_getvect(8);
	//x_WORD_F5334 = v2;
	//x_DWORD_F5330 = v1;
	/* __outx_BYTE(0x43u, 0x36u);
	 __outx_BYTE(0x40u, x_D41A0_BYTEARRAY_4[0x954]);
	 __outx_BYTE(0x40u, x_D41A0_BYTEARRAY_4[0x954] >> 8);*/
	 ///*result = */dos_setvect(8, sub_6FD30, 0);
	//BYTE1(result) = 1;
	x_BYTE_DB734 = 1;
	//return result;
}

//----- (0006FE20) --------------------------------------------------------
void sub_6FE20()//fix//250e20
{
	int v0; // et1
	//int v1; // eax

	if (x_BYTE_DB734 == 1)
	{
		v0 = x_D41A0_BYTEARRAY_4_struct.dwordindex_2380;
		/*__outx_BYTE(0x43u, 0x36u);
		__outx_BYTE(0x40u, 0);
		__outx_BYTE(0x40u, 0);
		v1 = dos_setvect(8, x_DWORD_F5330, (uint16_t)x_WORD_F5334);*/
		_wcpp_1_unwind_leave__130(0/*v1*/);
	}
	x_BYTE_DB734 = 0;
}

//----- (0006FE90) --------------------------------------------------------
int sub_6FE90(uint8_t *a1, unsigned int a2)//250e90
{
	uint8_t *v2; // eax
	int v3; // edx
	int v5; // ebx

	v2 = a1;
	v3 = 0;
	// FIXME: types
	// // if ((unsigned int)a1 >= a2)
	// 	return 0;
	// FIXME: types
	// // do
	// {
	// 	v5 = *v2++;
	// 	v3 += v5;
	// } while ((unsigned int)v2 < a2);
	return v3;
}

//----- (0006FEC0) --------------------------------------------------------
void sub_6FEC0()//250ec0
{
	//int v0; // edx
	//int result; // eax
	//char v2; // dl
	int v3; // eax
	int v4; // ebx
	int v5; // eax
	int v6; // ebx
	int v7; // eax
	int v8; // ebx
	int v9; // eax
	int v10; // ebx
	int v11; // eax
	int v12; // ebx
	int v13; // eax
	int v14; // ebx
	int v15; // eax
	int v16; // ebx
	int v17; // eax
	int v18; // ebx
	int v19; // eax
	int v20; // ebx
	int v21; // eax
	int v22; // ebx
	int v23; // eax
	int v24; // ebx
	int v25; // eax
	int v26; // ebx
	int v27; // eax
	int v28; // ebx
	int v29; // eax
	//int v30; // edx
	unsigned int v31; // eax
	int16_t v32; // bx
	int16_t v33; // bx
	int16_t v34; // bx
	int16_t v35; // bx
	int16_t v36; // bx
	int16_t v37; // bx
	int16_t v38; // bx
	int v39; // eax
	int16_t v40; // bx
	int16_t v41; // bx
	int16_t v42; // bx
	int16_t v43; // bx
	int16_t v44; // bx
	int *v45; // edi
	int v46; // ebx
	uint8_t v47; // al
	//int v48; // eax
	//int v49; // eax
	int16_t v50; // bx
	int16_t v51; // bx
	int16_t v52; // bx
	int16_t v53; // bx
	int16_t v54; // bx
	int16_t v55; // bx
	int16_t v56; // bx
	int16_t v57; // bx
	int16_t v58; // bx
	int16_t v59; // bx
	int16_t v60; // bx
	int16_t v61; // bx
	int16_t v62; // bx
	int16_t v63; // bx
	//char v64; // [esp+0h] [ebp+7Eh]
	int i; // [esp+100h] [ebp+17Eh]

	//v0 = 2124 * D41A0_BYTESTR_0.word_0xc;
	//result = v0 + (int)x_D41A0_BYTEARRAY_0;
	//v2 = *(x_BYTE *)(v0 + x_D41A0_BYTEARRAY_0 + 11235);
	if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x005_2BE0_11235 & 8)
	{
		sub_6FC50(1);
		sub_2BC10_draw_text((char*)"Product name", 320, 0, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		LOWORD(v3) = sub_6FC30_get34_height();
		v4 = v3;
		sub_2BC10_draw_text((char*)"Magic Carpet 2 (Netherworlds)", 320, v3, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		LOWORD(v5) = sub_6FC30_get34_height();
		v6 = v5 + v4;
		sub_2BC10_draw_text((char*)"Version number", 320, v6, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		LOWORD(v7) = sub_6FC30_get34_height();
		v8 = v7 + v6;
		sub_2BC10_draw_text((char*)"Beta", 320, v8, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		LOWORD(v9) = sub_6FC30_get34_height();
		v10 = v9 + v8;
		sub_2BC10_draw_text((char*)"Version date", 320, v10, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		LOWORD(v11) = sub_6FC30_get34_height();
		v12 = v11 + v10;
		sprintf(printbuffer, "%s %s", "03:42:13", "Sep 06 1995");
		sub_2BC10_draw_text(printbuffer, 320, v12, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		LOWORD(v13) = sub_6FC30_get34_height();
		v14 = v13 + v12;
		sub_2BC10_draw_text((char*)"Programmer", 320, v14, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		LOWORD(v15) = sub_6FC30_get34_height();
		v16 = v15 + v14;
		sub_2BC10_draw_text((char*)"Bullfrog, Alan Wright.", 320, v16, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		LOWORD(v17) = sub_6FC30_get34_height();
		v18 = v17 + v16;
		sub_2BC10_draw_text((char*)"Supplied to", 320, v18, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		LOWORD(v19) = sub_6FC30_get34_height();
		v20 = v19 + v18;
		sub_2BC10_draw_text((char*)"PUBLIC", 320, v20, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		LOWORD(v21) = sub_6FC30_get34_height();
		v22 = v21 + v20;
		sub_2BC10_draw_text((char*)"Level Number", 320, v22, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		LOWORD(v23) = sub_6FC30_get34_height();
		v24 = v23 + v22;
		sprintf(printbuffer, "%d", x_D41A0_BYTEARRAY_4_struct.levelnumber_43w);
		sub_2BC10_draw_text((char*)printbuffer, 320, v24, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		LOWORD(v25) = sub_6FC30_get34_height();
		v26 = v25 + v24;
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 & 0x10)
		{
			sub_2BC10_draw_text((char*)"Transfer rate:", 320, v26, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
			LOWORD(v27) = sub_6FC30_get34_height();
			v28 = v27 + v26;
			sprintf(printbuffer, "%d", x_D41A0_BYTEARRAY_4_struct.transfer_rate_dwordindex_200);
			sub_2BC10_draw_text(printbuffer, 320, v28, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
			LOWORD(v29) = sub_6FC30_get34_height();
			v26 = v29 + v28;
		}
		//v30 = 2124 * D41A0_BYTESTR_0.word_0xc;
		x_DWORD_E9C14 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248;
		v31 = j___clock() / 0x64u;
		x_DWORD_E9C1C = v31;
		if (v31 != x_DWORD_E9C20)
		{
			x_DWORD_E9C20 = v31;
			x_DWORD_E9C24_fps = x_DWORD_E9C14 - x_DWORD_E9C18;
			x_DWORD_E9C18 = x_DWORD_E9C14;
		}
		sub_2BC10_draw_text((char*)"FPS", 320, v26, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v32 = sub_6FC30_get34_height() + v26;
		sprintf(printbuffer, "%d", x_DWORD_E9C24_fps);
		sub_2BC10_draw_text(printbuffer, 320, v32, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		v33 = sub_6FC30_get34_height() + v32;
		sub_2BC10_draw_text((char*)"Sound Number", 320, v33, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v34 = sub_6FC30_get34_height() + v33;
		sprintf(printbuffer, "%d", x_WORD_E37B6_sound_number);
		sub_2BC10_draw_text(printbuffer, 320, v34, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		v35 = sub_6FC30_get34_height() + v34;
		sub_2BC10_draw_text((char*)"Game turn", 320, v35, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v36 = sub_6FC30_get34_height() + v35;
		sprintf(printbuffer, "%d %d", D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x012_2BE0_11248, x_DWORD_17DB54_game_turn2);
		sub_2BC10_draw_text(printbuffer, 320, v36, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		v37 = sub_6FC30_get34_height() + v36;
		sub_2BC10_draw_text((char*)"Thing", 320, v37, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v38 = sub_6FC30_get34_height() + v37;
		v39 = sub_4A810_get_0x35plus();
		sprintf(printbuffer, "Thing %d, Active %d", 168, 1000 - v39);
		sub_2BC10_draw_text(printbuffer, 320, v38, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		v40 = sub_6FC30_get34_height() + v38;
		sprintf(printbuffer, "Carpet %d", 224791);
		sub_2BC10_draw_text(printbuffer, 320, v40, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		v41 = sub_6FC30_get34_height() + v40;
		sprintf(printbuffer, "Tape %d", 38547);
		sub_2BC10_draw_text(printbuffer, 320, v41, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		v42 = sub_6FC30_get34_height() + v41;
		sprintf(printbuffer, "Heap %d", x_D41A0_BYTEARRAY_4_struct.dword_0xE6_heapsize_230);
		sub_2BC10_draw_text(printbuffer, 320, v42, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		v43 = sub_6FC30_get34_height() + v42;
		//sub_85350(); fix
		sub_2BC10_draw_text((char*)"Memory (Used/Free)", 320, v43, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v44 = sub_6FC30_get34_height() + v43;
		sprintf(printbuffer, "%d/%d", x_DWORD_17FEA8_mem_used, x_DWORD_17FEA4_mem_free);
		sub_2BC10_draw_text(printbuffer, 320, v44, (*xadataclrd0dat.var28_begin_buffer)[0x0f]);
		v45 = (int*)&x_DWORD_17ECA0;
		//LOWORD(result) = sub_6FC30_get34_height();
		v46 = 0;
		for (i = 0; v45; v45 = (int *)v45[2])
		{
			sprintf(printbuffer, "s%7.7d,u%01d", v45[1], *((uint8_t *)v45 + 16));
			// FIXME: types
			// // if (x_DWORD_17E0A4[3 * *((uint8_t *)v45 + 17)])
			// 	v47 = (uint8_t)*xadataclrd0dat.var28_begin_buffer;
			// else
			// 	v47 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
			sub_2BC10_draw_text(printbuffer, i, v46, v47);
			//LOWORD(v48) = sub_6FC30_get34_height();
			v46 += sub_6FC30_get34_height();
			//result = 400 - sub_6FC30_get34_height();
			if ((int16_t)v46 > 400 - sub_6FC30_get34_height())
			{
				//LOWORD(v49) = sub_6FC10_letter_width();
				//result = 12 * v49;
				i += 12 * sub_6FC10_letter_width();
				v46 = 0;
			}
		}
	}
	else if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x005_2BE0_11235 & 0x40)
	{
		v50 = 6 * sub_6FC30_get34_height();
		sub_2BC10_draw_text((char*)"THING", 10, v50, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v51 = sub_6FC30_get34_height() + v50;
		sprintf(
			printbuffer,
			"%ld / %ld",
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396,
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396 - D41A0_BYTESTR_0.struct_0x6E8E);
		sub_2BC10_draw_text(printbuffer, 10, v51, (*xadataclrd0dat.var28_begin_buffer)[0xff]);
		v52 = sub_6FC30_get34_height() + v51;
		sub_2BC10_draw_text((char*)"CLASS / MODEL / STATE", 10, v52, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v53 = sub_6FC30_get34_height() + v52;
		sprintf(
			printbuffer,
			"%ld / %ld / %ld",
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->byte_0x3F_63,
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->byte_0x40_64,
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->byte_0x45_69);
		sub_2BC10_draw_text(printbuffer, 10, v53, (*xadataclrd0dat.var28_begin_buffer)[0xff]);
		v54 = sub_6FC30_get34_height() + v53;
		sub_2BC10_draw_text((char*)"LIFE / MAX LIFE", 10, v54, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v55 = sub_6FC30_get34_height() + v54;
		sprintf(
			printbuffer,
			"%ld / %ld",
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->dword_0x8,
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->dword_0x4);
		sub_2BC10_draw_text(printbuffer, 10, v55, (*xadataclrd0dat.var28_begin_buffer)[0xff]);
		v56 = sub_6FC30_get34_height() + v55;
		sub_2BC10_draw_text((char*)"SPEED ACTUAL / MINIMUM / MAXIMUM", 10, v56, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v57 = sub_6FC30_get34_height() + v56;
		sprintf(
			printbuffer,
			"%ld / %ld / %ld",
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->word_0x82_130,
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->word_0x84_132,
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->word_0x86_134);
		sub_2BC10_draw_text(printbuffer, 10, v57, (*xadataclrd0dat.var28_begin_buffer)[0xff]);
		v58 = sub_6FC30_get34_height() + v57;
		sub_2BC10_draw_text((char*)"ACTUAL X / Y / Z", 10, v58, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v59 = sub_6FC30_get34_height() + v58;
		sprintf(
			printbuffer,
			"%ld / %ld / %ld",
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->array_0x4C_76.x,
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->array_0x4C_76.y,
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->array_0x4C_76.z);
		sub_2BC10_draw_text(printbuffer, 10, v59, (*xadataclrd0dat.var28_begin_buffer)[0xff]);
		v60 = sub_6FC30_get34_height() + v59;
		sub_2BC10_draw_text((char*)"ID / WHO OWNS ME", 10, v60, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v61 = sub_6FC30_get34_height() + v60;
		sprintf(
			printbuffer,
			"%ld / %ld",
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->word_0x1A_26,
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->word_0x28_40);
		sub_2BC10_draw_text(printbuffer, 10, v61, (*xadataclrd0dat.var28_begin_buffer)[0xff]);
		v62 = sub_6FC30_get34_height() + v61;
		sub_2BC10_draw_text((char*)"MANA ACTUAL / MAXIMUM", 10, v62, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
		v63 = sub_6FC30_get34_height() + v62;
		sprintf(
			printbuffer,
			"%ld / %ld",
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->dword_0x90_144,
			x_D41A0_BYTEARRAY_4_struct.dwordindex_38396->dword_0x8C_140);
		sub_2BC10_draw_text(printbuffer, 10, v63, (*xadataclrd0dat.var28_begin_buffer)[0xff]);
		//LOWORD(result) = sub_6FC30_get34_height();
	}
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_53 == 16273849)
		x_D41A0_BYTEARRAY_4_struct.byteindex_52 |= 2u;
	//return result;
}

//----- (00070890) --------------------------------------------------------
void sub_70890_print_header()//251890
{
	myprintf("Copyright (c) 1995 Bullfrog Productions Ltd.\n");
	myprintf("All rights reserved.\n");
	myprintf("%s \n", "Magic Carpet 2 (Netherworlds)");
}

//----- (00070910) --------------------------------------------------------
void sub_70910_print_string(char* a1)//251910
{
	//int result; // eax

	//result = (int)x_D41A0_BYTEARRAY_4;
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte2_23 & 1)//fix it
		/*result = */myprintf("%s\n", a1);
	//return (char*)result;
}

//----- (00070940) --------------------------------------------------------
void sub_70940()//251940
{
	type_str_0x6E8E* v0x; // ebx
	int v1; // edi
	unsigned int result; // eax
	int v3; // esi
	int i; // eax
	char v5; // dl
	type_str_0x6E8E* v6x; // eax
	int v7; // [esp+0h] [ebp-10h]
	int v8; // [esp+4h] [ebp-Ch]
	int v9; // [esp+8h] [ebp-8h]
	char v10; // [esp+Ch] [ebp-4h]

	v0x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	v1 = (v0x->array_0x4C_76.x + 128) >> 8;
	v9 = (v0x->array_0x4C_76.y + 128) >> 8;
	result = sub_10080(0, 128);
	v3 = result;
	if (result)
	{
		v10 = 0;
		while (sub_10130(v3, &v8, &v7) == 1 && !v10)
		{
			for (i = x_WORD_15B4E0_source[((uint8_t)(v9 + v7) << 8) + (uint8_t)(v1 + v8)];
				;
				i = v6x->word_0x16_22)
			{
				v6x = x_DWORD_EA3E4[i];
				if (v6x == x_DWORD_EA3E4[0] || v10)
					break;
				v5 = 1;
				if (v6x == v0x || v6x->byte_0x3F_63 == 15 && v6x->word_0x1A_26 == v0x->word_0x1A_26 || v6x->struct_byte_0xc_12_15.byte[0] & 1)
					v5 = 0;
				if (v5)
				{
					v10 = 1;
					x_D41A0_BYTEARRAY_4_struct.dwordindex_38396 = v6x;
				}
			}
		}
		sub_10100(v3);
	}
	//return result;
}

//----- (00070A60) --------------------------------------------------------
void sub_70A60_open_tmaps()//251a60
{
	x_DWORD_DB740_tmaps00file = sub_98817_open(file_handling->getFilePath(MC2File::cdata_tmaps00_dat).c_str(), 512);
	if (x_DWORD_DB740_tmaps00file == NULL)
	{
		x_DWORD_DB740_tmaps00file = sub_98817_open(file_handling->getFilePath(MC2File::data_tmaps00_dat).c_str(), 512);
	}
	x_DWORD_DB744_tmaps10file = sub_98817_open(file_handling->getFilePath(MC2File::cdata_tmaps10_dat).c_str(), 512);
	if (x_DWORD_DB744_tmaps10file == NULL)
	{
		x_DWORD_DB744_tmaps10file = sub_98817_open(file_handling->getFilePath(MC2File::data_tmaps10_dat).c_str(), 512);
	}
	x_DWORD_DB748_tmaps20file = sub_98817_open(file_handling->getFilePath(MC2File::cdata_tmaps20_dat).c_str(), 512);
	if (x_DWORD_DB748_tmaps20file == NULL)
	{
		x_DWORD_DB748_tmaps20file = sub_98817_open(file_handling->getFilePath(MC2File::data_tmaps20_dat).c_str(), 512);
	}
	x_DWORD_DB73C_tmapsfile = x_DWORD_DB740_tmaps00file; // FIXME: replace completely by file_hanlding
	file_handling->setCurrentTMapsFile(MC2CurrentTMapsFile::TMaps00);
}

//----- (00070BF0) --------------------------------------------------------
void sub_70BF0_close_tmaps()//251bf0
{
	//int result; // eax

	if (x_DWORD_DB740_tmaps00file != NULL)
	{
		sub_98882_close(x_DWORD_DB740_tmaps00file);
		x_DWORD_DB740_tmaps00file = NULL;
	}
	if (x_DWORD_DB744_tmaps10file != NULL)
	{
		sub_98882_close(x_DWORD_DB744_tmaps10file);
		x_DWORD_DB744_tmaps10file = NULL;
	}
	if (x_DWORD_DB748_tmaps20file != NULL)
	{
		sub_98882_close(x_DWORD_DB748_tmaps20file);
		x_DWORD_DB748_tmaps20file = NULL;
	}
	x_DWORD_DB73C_tmapsfile = NULL;
	//return result;
}

//----- (00070C60) --------------------------------------------------------
int sub_70C60_decompress_tmap(uint16_t index_in_tmaps_tab_file, Bit8u* texture_buffer)//251c60
{
	const MC2TMapsEntry& tmap = file_handling->getCurrentTMaps(index_in_tmaps_tab_file);
	std::memcpy(texture_buffer, tmap.data.data(), tmap.uncompressed_size);

	return tmap.uncompressed_size;

	// FIXME: check if some called functions became obsolete
//	int result; // eax
//
//	if (x_DWORD_DB73C_tmapsfile == NULL)
//		return (int)x_DWORD_DB73C_tmapsfile;
//	sub_9891E_seek(x_DWORD_DB73C_tmapsfile, *(x_DWORD *)(10 * index_in_tmaps_tab_file + TMAPS00TAB_BEGIN_BUFFER + 4), 0);//lseek
//	int compressed_length = *(Bit32u*)&TMAPS00TAB_BEGIN_BUFFER[10 * (index_in_tmaps_tab_file + 1) + 4] - *(Bit32u*)&TMAPS00TAB_BEGIN_BUFFER[10 * index_in_tmaps_tab_file + 4];
//	if (sub_988A7_read(x_DWORD_DB73C_tmapsfile, texture_buffer, compressed_length) != compressed_length)
//		return -1;
//	result = sub_9894C_decompress(texture_buffer, texture_buffer);
//	if (result >= 0)
//	{
//		if (!result)
//			result = compressed_length;
//	}
//	else
//	{
//		myprintf("ERROR decompressing tmap%03d\n");
//		result = -2;
//	}
//	return result;
}

//----- (00070D20) --------------------------------------------------------
char sub_70D20(uint16_t a1)//251d20
{
	uint16_t v1; // ax
	int16_t v2; // di
	uint16_t i; // bx
	x_BYTE **v4; // ecx
	x_DWORD *v5; // eax

	v1 = *(x_WORD *)(10 * a1 + TMAPS00TAB_BEGIN_BUFFER + 8);
	if (x_BYTE_F5340.at(v1))
		return 0;
	v2 = *(x_WORD *)(10 * a1 + TMAPS00TAB_BEGIN_BUFFER + 8);
	if (!x_DWORD_F66F0x[v1])
		return 0;
	for (i = *(x_WORD *)(10 * a1 + TMAPS00TAB_BEGIN_BUFFER + 8); i < 0x1F8u && v2 == *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * i + 8); i++)
	{
		v4 = (x_BYTE **)x_DWORD_F66F0x[i];
		if (v4)
		{
			if (**v4 & 1)
			{
				v5 = (x_DWORD *)sub_724F0(x_DWORD_E9C08x, i);
				sub_72410(v5);
			}
			sub_71F20(x_DWORD_E9C28_str, x_DWORD_F5F10[i]);
			x_DWORD_F66F0x[i] = 0;
			x_DWORD_F5F10.at(i) = 0;
			x_DWORD_F5730.at(i) = 0;
		}
	}
	return 1;
}

//----- (00070E10) --------------------------------------------------------
char sub_70E10(uint16_t a1)//251e10
{
	int v1; // edx
	int16_t v2; // di
	uint16_t i; // bx
	x_BYTE **v4; // ecx
	x_DWORD *v5; // eax

	v1 = 10 * a1;
	v2 = *(x_WORD *)(v1 + TMAPS00TAB_BEGIN_BUFFER + 8);
	if (!x_DWORD_F66F0x.at(*(uint16_t *)(v1 + TMAPS00TAB_BEGIN_BUFFER + 8)))
		return 0;
	for (i = *(x_WORD *)(v1 + TMAPS00TAB_BEGIN_BUFFER + 8); i < 0x1F8u && v2 == *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * i + 8); i++)
	{
		v4 = (x_BYTE **)x_DWORD_F66F0x.at(i);
		if (v4)
		{
			if (**v4 & 1)
			{
				v5 = (x_DWORD *)sub_724F0(x_DWORD_E9C08x, i);
				sub_72410(v5);
			}
			sub_71F20(x_DWORD_E9C28_str, x_DWORD_F5F10[i]);
			x_DWORD_F66F0x[i] = 0;
			x_DWORD_F5F10.at(i) = 0;
			x_DWORD_F5730.at(i) = 0;
		}
	}
	return 1;
}

//----- (00070EF0) --------------------------------------------------------
int sub_70EF0(uint16_t a1)//251ef0
{
	uint16_t v1; // dx
	int i; // ebx
	int v3; // ecx

	v1 = *(x_WORD *)(10 * a1 + TMAPS00TAB_BEGIN_BUFFER + 8);
	for (i = 0; v1 < 0x1F8u; i += *(x_DWORD *)(v3 + TMAPS00TAB_BEGIN_BUFFER) + 10)
	{
		v3 = 10 * v1;
		if (*(x_WORD *)(10 * a1 + TMAPS00TAB_BEGIN_BUFFER + 8) != *(x_WORD *)(10 * v1 + TMAPS00TAB_BEGIN_BUFFER + 8))
			break;
		v1++;
	}
	return i;
}



//----- (00070F50) --------------------------------------------------------
void sub_70F50_initTmaps(uint16_t tmaps_tab_begin_index)//251f50
{
	type_animations1* index; // eax
	Bit8u* index2; // eax
	Bit8u* buffer_tmap; // eax
	int index5; // eax
	int index6; // eax
	uint16_t v2; // bx
	uint16_t i; // si
	int v5; // [esp+0h] [ebp-Ch]
	int v6; // [esp+8h] [ebp-4h]


#ifdef TEST_BIG_SPRITES
	 if (!big_sprites_inited)
	 {
		for (int i = 0; i < max_sprites; i++)
		{
			BIG_SPRITES_BUFFERx[i].actdata = NULL;
			for (int j = 0; j < max_sprites_frames; j++)
			{
				BIG_SPRITES_BUFFERx[i].frames[j] = NULL;

			}
		}
		big_sprites_inited = true;
	}

	char tmapsdirpost[512];
	switch (D41A0_BYTESTR_0.str_2FECE.byte_level_type) {
	case 0: {
		sprintf(tmapsdirpost, "%s","TMAPS\\TMAPS2-0-");
		break;
	}
	case 1: {
		sprintf(tmapsdirpost, "%s", "TMAPS\\TMAPS2-1-");
		break;
	}
	case 2: {
		sprintf(tmapsdirpost, "%s", "TMAPS\\TMAPS2-2-");
		break;
	}

	}
#endif

	v5 = x_D41A0_BYTEARRAY_4_struct.byteindex_26;
	v2 = *(x_WORD *)(10 * tmaps_tab_begin_index + TMAPS00TAB_BEGIN_BUFFER + 8);
	for (i = *(x_WORD *)(10 * tmaps_tab_begin_index + TMAPS00TAB_BEGIN_BUFFER + 8); i < 0x1F8u; i++)
	{
		index2 = 10 * i + TMAPS00TAB_BEGIN_BUFFER;
		if (v2 != *(x_WORD *)(index2 + 8))
			break;
		v6 = i;
		if (!x_DWORD_F66F0x.at(i))
		{
			buffer_tmap = sub_71E70(*x_DWORD_E9C28_str, (uint16_t)(4 * ((unsigned int)(*(x_DWORD *)index2 + 13) >> 2)), i);
			if (buffer_tmap)
			{
				int result_decomp_tmap = sub_70C60_decompress_tmap(i, *(Bit8u**)buffer_tmap);
				if (result_decomp_tmap != -1)
				{
					#ifdef TEST_BIG_SPRITES
					Bit8u* oldtmap = *(Bit8u**)buffer_tmap;
					int oldwidth = *(Bit16u*)(oldtmap + 2);
					int oldheight = *(Bit16u*)(oldtmap + 4);
					if ((oldwidth > 0) && (oldwidth < 0x200) && (oldheight > 0) && (oldheight < 0x200))
					{
						int actnumber = 0;
						if (BIG_SPRITES_BUFFERx[i].actdata != NULL)
						{
							free(BIG_SPRITES_BUFFERx[i].actdata);
							BIG_SPRITES_BUFFERx[i].actdata = NULL;
						}
						for (int mm = 0; mm < max_sprites_frames;mm++)
							if (BIG_SPRITES_BUFFERx[i].frames[mm] != NULL)
							{
								free(BIG_SPRITES_BUFFERx[i].frames[mm]);
								BIG_SPRITES_BUFFERx[i].frames[mm] = NULL;
							};
						int mm;
						for (mm = 0; mm < max_sprites_frames;mm++)
						{
							char filebuffer[512];
							//FILE* fptr_outdata;
							sprintf(filebuffer, "%s%03d-%02d.data", tmapsdirpost, i,mm);
							//if (!fix_file_exists(filebuffer))
							//	break;
							if(!ExistGraphicsfile(filebuffer))
								break;
							//fptr_outdata= myopent(filebuffer, (char*)"rb");
							BIG_SPRITES_BUFFERx[i].frames[mm] = (Bit8u*)malloc(oldwidth * 4 * oldheight * 4);
							//fread(BIG_SPRITES_BUFFERx[i].frames[mm], oldwidth * 4 * oldheight * 4, 1, fptr_outdata);
							//myclose(fptr_outdata);
							ReadGraphicsfile(filebuffer, BIG_SPRITES_BUFFERx[i].frames[mm], oldwidth * 4 * oldheight * 4);
						}

						BIG_SPRITES_BUFFERx[i].actdata = (Bit8u*)malloc(oldwidth * 4 * oldheight * 4+6+2);
						memcpy(BIG_SPRITES_BUFFERx[i].actdata+6, BIG_SPRITES_BUFFERx[i].frames[0], oldwidth * 4 * oldheight * 4);

						
						*(Bit16u*)BIG_SPRITES_BUFFERx[i].actdata = *(Bit16u*)oldtmap;
						*(Bit16u*)(BIG_SPRITES_BUFFERx[i].actdata +2) = oldwidth*4;
						*(Bit16u*)(BIG_SPRITES_BUFFERx[i].actdata +4) = oldheight*4;
						*(Bit16u*)(BIG_SPRITES_BUFFERx[i].actdata + 6+oldwidth * 4 * oldheight * 4) = mm;

						/*for (int xx = 0; xx < oldwidth*4; xx++)
							for (int yy = 0; yy < oldheight*4; yy++)
								* (Bit16u*)(BIG_SPRITES_BUFFER[i] + 6+ yy * oldwidth + xx) = 128;*/
						*(Bit8u **)buffer_tmap = BIG_SPRITES_BUFFERx[i].actdata;
					}
					#endif
					x_DWORD_F5F10[v6] = buffer_tmap;
					x_DWORD_F66F0x[v6] = (Bit32u*)buffer_tmap;
					x_DWORD_F5730.at(v6) = v5;
					// FIXME: types
					// index6 = (int)x_DWORD_F66F0x[v6];
					if (**(Bit8u**)index6 & 1)
						index = sub_721C0_initTmap(x_DWORD_E9C08x, (int *)index6, i);
					if (v2 < 0x1E0u)
					{
						if (v2 != 311)
							continue;
					LABEL_14:
						index5 = *x_DWORD_F66F0x[i];
						*(x_BYTE *)index5 |= 0x20u;
						continue;
					}
					if (v2 <= 0x1E0u || v2 >= 0x1E8u && (v2 <= 0x1E8u || v2 == 496))
						goto LABEL_14;
				}
			}
		}
	}
//	return result;
}

//----- (00071090) --------------------------------------------------------
unsigned int sub_71090(unsigned int a1)//252090
{
	int v1; // eax
	uint16_t v2; // dx
	int v3; // eax
	int v4; // ebx
	int v5; // ebx
	int v6; // ecx
	unsigned int v7; // eax
	int v8; // edx
	int v9; // esi
	int v10; // esi
	int v11; // edi
	int v12; // edi
	int v13; // esi
	int v14; // esi
	int v15; // edi
	uint16_t v16; // di
	unsigned int v17; // ebx
	char v18; // al
	int v19; // esi
	int v21; // [esp+0h] [ebp-2Ch]
	int v22; // [esp+4h] [ebp-28h]
	int v23; // [esp+8h] [ebp-24h]
	int v24; // [esp+Ch] [ebp-20h]
	int v25; // [esp+10h] [ebp-1Ch]
	unsigned int v26; // [esp+14h] [ebp-18h]
	unsigned int v27; // [esp+18h] [ebp-14h]
	unsigned int v28; // [esp+1Ch] [ebp-10h]
	unsigned int v29; // [esp+20h] [ebp-Ch]
	unsigned int v30; // [esp+24h] [ebp-8h]
	char v31; // [esp+28h] [ebp-4h]

	//fix it
	v22 = 0;
	v23 = 0;
	v24 = 0;
	v27 = 0;
	v28 = 0;
	v29 = 0;
	v30 = 0;
	//fix it

	v31 = 1;
	v1 = 0;
	do
	{
		v2 = v1++;
		*(&v26 + v2) = -1;
		*(&v21 + v2) = -1;
	} while ((uint16_t)v1 < 5u);
	v3 = 0;
	do
	{
		v4 = *(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)v3 + 8);
		if (x_DWORD_F66F0x[v4] && !x_BYTE_F5340.at(v4))
			v31 = 0;
		while ((uint16_t)v3 < 0x1F8u
			&& *(uint16_t *)(10 * ((uint16_t)v3 + 1) + TMAPS00TAB_BEGIN_BUFFER + 8) == v4)
			++v3;
		++v3;
	} while ((uint16_t)v3 < 0x1F8u);
	v5 = 0;
	do
	{
		v6 = *(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)v5 + 8);
		if ((!x_BYTE_F5340.at(v6) || v31) && x_DWORD_F66F0x[v6])
		{
			v7 = x_DWORD_F5730.at(v6);
			v8 = *(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)v5 + 8);
			if (v7 < v26)
			{
				v9 = v7 ^ v26;
				v7 ^= v26 ^ v7;
				v26 = v7 ^ v9;
				v8 = v6 ^ v6 ^ v21;
				v21 ^= v8 ^ v6;
			}
			if (v7 < v27)
			{
				v10 = v7 ^ v27;
				v11 = v8 ^ v22;
				v7 ^= v27 ^ v7;
				v8 ^= v22 ^ v8;
				v27 = v7 ^ v10;
				v22 = v8 ^ v11;
			}
			if (v7 < v28)
			{
				v12 = v7 ^ v28;
				v13 = v8 ^ v23;
				v7 ^= v28 ^ v7;
				v8 ^= v23 ^ v8;
				v28 = v7 ^ v12;
				v23 = v8 ^ v13;
			}
			if (v7 < v29)
			{
				v14 = v7 ^ v29;
				v15 = v8 ^ v24;
				v7 ^= v29 ^ v7;
				v8 ^= v24 ^ v8;
				v29 = v7 ^ v14;
				v24 = v8 ^ v15;
			}
			if (v7 < v30)
			{
				v30 ^= v7 ^ v7 ^ v7 ^ v30;
				v25 ^= v8 ^ v8 ^ v8 ^ v25;
			}
		}
		while ((uint16_t)v5 < 0x1F8u
			&& *(uint16_t *)(10 * ((uint16_t)v5 + 1) + TMAPS00TAB_BEGIN_BUFFER + 8) == v6)
			++v5;
		++v5;
	} while ((uint16_t)v5 < 0x1F8u);
	v16 = 0;
	v17 = 0;
	while (v16 < 5u)
	{
		if (v17 >= a1)
			break;
		v19 = 4 * v16;
		if (*(int *)((char *)&v21 + v19) <= -1)
			break;
		if (v31)
			v18 = sub_70E10(*(x_WORD *)((char *)&v21 + v19));
		else
			v18 = sub_70D20(*(x_WORD *)((char *)&v21 + v19));
		if (v18)
			v17 += sub_70EF0(*(x_WORD *)((char *)&v21 + v19));
		++v16;
	}
	return v17;
}

//----- (000712F0) --------------------------------------------------------
void sub_712F0()//2522f0
{
	x_DWORD_E9C28_str = sub_71B40(x_D41A0_BYTEARRAY_4_struct.dword_0xE6_heapsize_230, 0x1F8u, (type_x_DWORD_E9C28_str*)x_D41A0_BYTEARRAY_4_struct.heapbuffer.data());
	if (x_DWORD_E9C28_str)
		x_DWORD_E9C08x = sub_72120(0x1F8u);
	sub_70A60_open_tmaps();
	sub_71A70_setTmaps(D41A0_BYTESTR_0.str_2FECE.byte_level_type);
	x_DWORD_F66F0x.fill(0);
	x_DWORD_F5F10.fill(0);
	x_DWORD_F5730.fill(0);
	sub_71890();
	sub_718F0();
}

//----- (000713A0) --------------------------------------------------------
void sub_713A0()//2523a0
{
	sub_720C0(&x_DWORD_E9C28_str);
	sub_72550(&x_DWORD_E9C08x);
	x_BYTE_F5538.fill(0);
	x_DWORD_F66F0x.fill(0);
	x_DWORD_F5F10.fill(0);
	x_DWORD_F5730.fill(0);
	x_BYTE_DB738 = 0;
	sub_70BF0_close_tmaps();
}

//----- (00071410) --------------------------------------------------------
void sub_71410_process_tmaps()//252410
{
	Bit16u* v0; // esi
	Bit8u* v1; // ebx
	Bit16u v2; // di

	sub_70A60_open_tmaps();
	v0 = x_WORD_D951C; // buffer indexed in 14 byte / 7 word steps
	v1 = x_DWORD_180628b_screen_buffer;
	while (v0[3] || v0[4])
	{
		v2 = *v0;
		memset((void*)v1, 0, *(Bit32u*)&TMAPS00TAB_BEGIN_BUFFER[10 * (*v0 + 1) + 4] - *(Bit32u*)&TMAPS00TAB_BEGIN_BUFFER[10 * *v0 + 4]);
		if (sub_70C60_decompress_tmap(v2, v1) == -1)
		{
			*(x_WORD *)(v1 + 2) = 255;
			*(x_WORD *)(v1 + 4) = 255;
			*(x_BYTE *)(v1 + 1) = 1;
		}
		if (!*(x_WORD *)(v1 + 4) || !*(x_WORD *)(v1 + 2))
		{
			*(x_WORD *)(v1 + 2) = 255;
			*(x_WORD *)(v1 + 4) = 255;
			*(x_BYTE *)(v1 + 1) = 1;
		}
		if (v0[3])
		{
			if (!v0[4])
				v0[4] = *(uint16_t *)(v1 + 4) * v0[3] / *(uint16_t *)(v1 + 2);
		}
		else
		{
			v0[3] = *(uint16_t *)(v1 + 2) * v0[4] / *(uint16_t *)(v1 + 4);
		}
		v0 += 7;
		*((x_BYTE *)v0 - 2) = *(x_BYTE *)(v1 + 1);
	}
	sub_70BF0_close_tmaps();
}

//----- (00071520) --------------------------------------------------------
bool sub_71520_mainInitTmaps(uint16_t a1)//252520 //mainInitTmaps?
{
	int v1; // esi
	int v2; // ebx
	signed int i; // ebx
	uint16_t v4; // ax

	v1 = 0;
	v2 = sub_70EF0(a1);
	for (i = v2 - sub_71E60(x_DWORD_E9C28_str) + 20; i > 0; i -= sub_71090(i))
	{
		v4 = v1++;
		if (v4 >= 4u)
			break;
	}
	if (i <= 0)
	{
		sub_70F50_initTmaps(a1);
		x_D41A0_BYTEARRAY_4_struct.byteindex_177 = 5;
	}
	return x_DWORD_F66F0x[a1] != 0;
}

//----- (000715B0) --------------------------------------------------------
void sub_715B0()//2525b0
{
	uint16_t v0; // bx
	//int result; // eax
	Bit32u* v2; // ecx
	char v3; // cl
	char v4; // cl
	type_animations1* v5x; // eax
	int16_t v6; // si
	uint16_t i; // bx
	Bit32u* v8; // edi
	char v9; // cl
	type_animations1* v10x; // eax

	v0 = 0;
	do
	{
		//result = 4 * v0;
		v2 = x_DWORD_F66F0x[v0];
		if (v2)
		{
			//result = *v2;
			v3 = *(x_BYTE *)*v2;
			if (v3 & 8)
			{
				if (v3 & 0x20)
				{
					//result = 5 * v0;
					v6 = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v0 + 8);
					for (i = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * v0 + 8); i < 0x1F8u; i++)
					{
						//result = 5 * i;
						if (v6 != *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * i + 8))
							break;
						//result = 4 * i;
						v8 = x_DWORD_F66F0x[i];
						if (v8)
						{
							//result = *v8;
							v9 = *(x_BYTE *)*v8 & 0xF7;
							*(x_BYTE *)*v8 = v9;
							if (v9 & 1)
							{
								v10x = sub_724F0(x_DWORD_E9C08x, i);
								/*result = */sub_72350(v10x);
							}
						}
					}
					v0 = i - 1;
				}
				else
				{
					v4 = v3 & 0xF7;
					//*(x_BYTE *)result = v4;
					if (v4 & 1)
					{
						v5x = sub_724F0(x_DWORD_E9C08x, v0);
						/*result = */sub_72350(v5x);
					}
				}
			}
		}
		v0++;
	} while (v0 < 0x1F8u);
	//return result;
}

int debugcounter26 = 0;
//----- (000716C0) --------------------------------------------------------
void sub_716C0(uint16_t a1, uint16_t a2, uint16_t a3)//2526c0
{
	Bit16s* index; // eax
	Bit16s* v4; // ebx
	Bit16s v5; // cx

	if (debugcounter26 >= 306)
	{
		//myprintf("i:%d,", debugcounter26);
	}
	debugcounter26++;

	index = (Bit16s*)&unk_D7BD6;
	v4 = 0;
	while (index[0] >= 0)
	{
		if (index[0] == a1 && index[1] == a2)
			v4 = &index[2];
		index += 17;
	}
	if (v4)
	{
		while (1)
		{
			v5 = v4[0];
			if ((v4[0] & 0x8000u) != 0)
				break;
			v4++;
			sub_71730(v5);
		}
	}
	else if ((a3 & 0x8000u) == 0)
	{
		sub_71730(a3);
	}
	//return result;
}

//----- (00071730) --------------------------------------------------------
void sub_71730(uint16_t a1)//252730
{
	int16_t *v1; // eax
	//char v2; // bl
	//int result; // eax

	v1 = (short*)&x_WORD_D951C[7 * a1];
	//v2 = *((x_BYTE *)v1 + 11);
	//result = *(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)*v1 + 8);
	x_BYTE_F5538.at(*(uint16_t *)(TMAPS00TAB_BEGIN_BUFFER + 10 * (uint16_t)*v1 + 8)) = *((x_BYTE *)v1 + 11);
	//return result;
}

//----- (00071780) --------------------------------------------------------
int debugcounter23 = 0;
void sub_71780()//252780
{
	uint16_t v0; // bx
	unsigned int v1; // eax
	Bit8u i; // bl
	uint16_t j; // si
	unsigned int v4; // ST0C_4
	char v6; // [esp+4h] [ebp-4h]

	v6 = 0;
	if (!x_DWORD_E9C28_str)
		sub_712F0();
	sub_71A70_setTmaps(D41A0_BYTESTR_0.str_2FECE.byte_level_type);
	v0 = 0;
	x_DWORD_F5730.fill(0);
	do
	{
		LOBYTE(v1) = v0;
		if (!x_BYTE_F5538.at(v0))
			LOBYTE(v1) = sub_70D20(v0);
		v0++;
	} while (v0 < 0x1F8u);
	for (i = 0xff; i && !v6; i--)
	{
		for (j = 0; j < 0x1F8u && !v6; j++)
		{
			if (i == x_BYTE_F5538.at(j) && !x_DWORD_F66F0x[j])
			{
				v4 = sub_70EF0(j);
				if (sub_71E60(x_DWORD_E9C28_str) <= v4)
				{
					v1 = sub_71E60(x_DWORD_E9C28_str);
					if (v1 < 0x400)
						v6 = 1;
				}
				else
				{
					//adress 25283c
					if (debugcounter23 >= 0x4)//0x234c//0x057e
					{
						//myprintf("i:%d,", debugcounter23);
					}
					debugcounter23++;
					/*LOBYTE(v1) = */sub_70F50_initTmaps(j);
				}
			}
		}
	}
//	return v1;
}

//----- (00071890) --------------------------------------------------------
char sub_71890()//252890
{
	int16_t *v0 = (short*)x_WORD_D951C;
	x_BYTE_F5340.fill(0);
	if (x_BYTE_DB74C)
	{
		while (v0[3] || v0[4])
		{
			if (*((x_BYTE *)v0 + 11) == -1)
			{
				char result = *((x_BYTE *)v0 + 11);
				x_BYTE_F5340.at((uint16_t)*v0) = result;
			}
			v0 += 7;
		}
	}
	return true;
}

//----- (000718F0) --------------------------------------------------------
void sub_718F0()//2528f0
{
	uint16_t v0; // bx
	//int16_t result; // ax

	v0 = 0;
	do
	{
		//result = v0;
		if (x_BYTE_F5340.at(v0))
			/*result = */sub_70F50_initTmaps(v0);
		v0++;
	} while (v0 < 0x1F8u);
//	return result;
}

int debugcounter24 = 0;
//----- (00071930) --------------------------------------------------------
int sub_71930()//252930
{
	int result; // eax
	//Bit8u* v1; // ebx

	memset(D41A0_BYTESTR_0.array_0x39, 0, 508);
	result = 0;
	do
	{
		//adress 252958
		if (x_DWORD_F66F0x[result])
		{
			//v1 = (uint16_t)result + x_D41A0_BYTEARRAY_0;
			//*(x_BYTE *)(v1 + 57) = 1;
			D41A0_BYTESTR_0.array_0x39[result] = 1;
			if (x_BYTE_F5340.at(result))
				D41A0_BYTESTR_0.array_0x39[result]++;
		}
		result++;
	} while (result < 0x1F8u);
	return result;
}

//----- (00071990) --------------------------------------------------------
void sub_71990()//252990
{
	uint16_t v0; // bx
	//unsigned int v1; // eax
	char i; // bl
	uint16_t j; // si
	unsigned int v4; // ST04_4
	char v6; // [esp+4h] [ebp-4h]

	v6 = 0;
	if (!x_DWORD_E9C28_str)
		sub_712F0();
	v0 = 0;
	do
	{
		//LOBYTE(v1) = v0;
		if (!D41A0_BYTESTR_0.array_0x39[v0])
			/*LOBYTE(v1) = */sub_70D20(v0);
		v0++;
	} while (v0 < 0x1F8u);
	for (i = 2; i && !v6; i--)
	{
		for (j = 0; j < 0x1F8u && !v6; j++)
		{
			//LOBYTE(v1) = (int)x_D41A0_BYTEARRAY_0;
			if (i == D41A0_BYTESTR_0.array_0x39[j] && !x_DWORD_F66F0x[j])
			{
				v4 = sub_70EF0(j);
				if (sub_71E60(x_DWORD_E9C28_str) <= v4)
				{
					//v1 = sub_71E60(x_DWORD_E9C28);
					if (sub_71E60(x_DWORD_E9C28_str) < 0x400)
						v6 = 1;
				}
				else
				{
					/*LOBYTE(v1) = */sub_70F50_initTmaps(j);
				}
			}
		}
	}
//	return v1;
}

//----- (00071A70) --------------------------------------------------------
void sub_71A70_setTmaps(uint8_t a1)//252a70
{
	FILE* v1; // edx
	//uint8_t result; // al

	v1 = x_DWORD_DB73C_tmapsfile;
	//result = a1;
	switch (a1)
	{
	case 0:
		{
			v1 = x_DWORD_DB740_tmaps00file;
			file_handling->setCurrentTMapsFile(MC2CurrentTMapsFile::TMaps00);
			break;
		}
	case 1:
		{
			v1 = x_DWORD_DB744_tmaps10file;
			file_handling->setCurrentTMapsFile(MC2CurrentTMapsFile::TMaps10);
			break;
		}
	case 2:
		{
			v1 = x_DWORD_DB748_tmaps20file;
			file_handling->setCurrentTMapsFile(MC2CurrentTMapsFile::TMaps20);
			break;
		}
	}
	x_DWORD_DB73C_tmapsfile = v1;
	//return result;
}

//----- (00071AB0) --------------------------------------------------------
void sub_71AB0(int16_t a1, char a2)//252ab0
{
	x_BYTE *v2; // eax
	int16_t v3; // si
	int16_t i; // bx
	Bit32u* v5; // ecx
	type_animations1* v6x; // eax

	LOWORD(v2) = 5 * a1;
	v3 = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * a1 + 8);
	for (i = *(x_WORD *)(TMAPS00TAB_BEGIN_BUFFER + 10 * a1 + 8); i < 504; i++)
	{
		LOWORD(v2) = v3;
		if (*(uint16_t *)(10 * i + TMAPS00TAB_BEGIN_BUFFER + 8) != v3)
			break;
		v5 = x_DWORD_F66F0x[i];
		if (v5)
		{
			v2 = (x_BYTE *)*v5;
			if (*(x_BYTE *)*v5 & 1)
			{
				v6x = sub_724F0(x_DWORD_E9C08x, i);
				LOWORD(v2) = sub_723B0(v6x, a2);
			}
		}
	}
	//return (int16_t)v2;
}

//----- (00071B40) --------------------------------------------------------
// FIXME: trying to remove type_x_DWORD_E9C28_str
type_x_DWORD_E9C28_str* sub_71B40(int a1, uint16_t a2, type_x_DWORD_E9C28_str* a3y)//252b40
{
	int v4;
	int v5;
	int v6;
	type_x_DWORD_E9C28_str* result;
	type_x_DWORD_E9C28_str* v10y;
	Bit8u* v11x;
	Bit8u* v12x;
	Bit8u* v13x;
	int v14;

	if (a3y)
	{
		v4 = 14 * a2;
		v14 = v4;
		v5 = 4 * a2 + v4 + 26;
		v6 = a1 - v5;
		if (a1 == v5)
			return 0;
		a3y->word_20 = 0;
		a3y->word_24 = 2;
		a3y->dword_0 = v6;
		a3y->dword_4 = v6;
		result = a3y;
		a3y->word_22 = a2;
		//a3y->dword_8_data = a3y->data;
		//v8 = v14 + a3x + 26;
		a3y->data.resize(a2);
		a3y->dword_12x = (Bit32u*)&a3y->data[a2];// (Bit32u)(v14 + (Bit8u*)a3y + 26);//must fix for 64 bit version - data
		a3y->dword_16x = (Bit32u*)&a3y->data[a2+4*a2];//(Bit32u)(4 * a2 + (v14 + (Bit8u*)a3y + 26));//must fix for 64 bit version - data
		for (int i = 0; i < a2; i++)
			a3y->data[i].data_4 = 0;
	}
	else
	{
		v10y = (type_x_DWORD_E9C28_str*)malloc(sizeof(type_x_DWORD_E9C28_str));
		result = v10y;
		v10y->data.resize(a2);
		v10y->dword_16x = (Bit32u*)malloc(a1);
		v10y->dword_12x = (Bit32u*)malloc(4 * a2);
		//if (!v10y
		//	|| (v11x = (Bit8u*)malloc(a1), (v10y->dword_16x = (Bit32u*)v11x) == 0)
		//	|| (v13x = (Bit8u*)malloc(4 * a2), (v10y->dword_12x = (Bit32u*)v13x) == 0))
		//{
		//	if (v10y)
		//	{
		//		if (v10y->dword_16x)
		//		{
		//			//if (v10y->dword_8_data)
		//			//	sub_83E80_freemem4((Bit8u*)v10y->dword_8_data);
		//			sub_83E80_freemem4((Bit8u*)v10y->dword_16x);
		//		}
		//		sub_83E80_freemem4((Bit8u*)v10y);
		//	}
		//	exit(1);
		//}
		v10y->word_20 = 0;
		v10y->word_24 = 1;
		v10y->word_22 = a2;
		v10y->dword_0 = a1;
		v10y->dword_4 = a1;
		a3y->data.resize(a2);
		for (int i = 0; i < a2; i++)
			a3y->data[i].data_4 = 0;
	}
	return result;
}

//----- (00071CD0) --------------------------------------------------------
// FIXME: trying to remove type_x_DWORD_E9C28_str 
signed int sub_71CD0(const type_x_DWORD_E9C28_str &a1y)//252cd0
{
	for (int i = 0; i < (int)a1y.word_22; i++)
	{
		//if (!*(x_DWORD *)(14*i + a1y.dword_8_data + 4))
		if (!a1y.data[i].data_4)
			return i;
	}
	return -1;
}

//----- (00071E60) --------------------------------------------------------
int sub_71E60(type_x_DWORD_E9C28_str* a1y)//252e60
{
	return a1y->dword_4;
}

//----- (00071E70) --------------------------------------------------------
Bit8u* sub_71E70(type_x_DWORD_E9C28_str &a1y, unsigned int a2, int16_t a3)//252e70
{
	int16_t v3; // si
	int16_t v4; // ax
	int16_t v5; // dx
	int v6; // ecx
	int v7; // eax
	Bit8u* result; // eax

	v3 = -1;
	if (a2 < a1y.dword_4)
	{
		v4 = sub_71CD0(a1y);
		v5 = v4;
		v6 = v4;
		v3 = v4;
		if (v4 > -1)
		{
			//v7 = 14 * v4;
			//*(x_WORD *)(a1y.dword_8_data + v7 + 10) = v5;
			//*(x_DWORD *)(a1y.dword_8_data + v7 + 4) = a2;
			//*(x_DWORD *)(a1y.dword_8_data + v7) = a1y.dword_0 + (int)a1y.dword_16x - a1y.dword_4; // FIXME: broken on 64 bit
			//*(x_WORD *)(a1y.dword_8_data + v7 + 12) = a3;
			//a1y.dword_4 -= a2;
			//*(x_WORD *)(a1y.dword_8_data + v7 + 8) = a1y.word_20;
			//*(x_DWORD *)(a1y.dword_12x + (uint16_t)(a1y.word_20)++) = (Bit32u)a1y.dword_8_data + 14 * v6;
			v7 = 14 * v4;
			a1y.data[v4].data_0 = a1y.dword_0 + (Bit8u*)a1y.dword_16x - a1y.dword_4;
			a1y.data[v4].data_4 = a2;
			a1y.data[v4].data_8 = a1y.word_20;
			a1y.data[v4].data_10 = v5;
			a1y.data[v4].data_12 = a3;
			a1y.dword_4 -= a2;
			*(x_DWORD *)(a1y.dword_12x + (uint16_t)(a1y.word_20)++) = (Bit32u)a1y.data[v6].data_8;
		}
	}

	if (v3 <= -1)
		result = nullptr;
	else
		result = (Bit8u*)&a1y.data[v3];
		//result = a1y.dword_8_data + 14*v3;

	return result;
}

//----- (00071F20) --------------------------------------------------------
int16_t sub_71F20(type_x_DWORD_E9C28_str* a1y, Bit8u* a2)//252f20
{
	int v2 = 0; // eax
	//Bit8u* v3; // ecx
	uint16_t v4; // bx
	int v5; // esi
	Bit8u* v6; // ecx
	uint16_t v7; // cx
	const void *v10; // esi
	char *i; // [esp+4h] [ebp-4h]

	v2 = *(x_WORD *)(a2 + 10);
	if (v2 < a1y->word_22)
	{
		int index_orig = v2;
		v2 = 14 * (uint16_t)v2;
		//v3 = v2 + a1y->dword_8_data;
		type_x_DWORD_E9C28_data& v3 = a1y->data[index_orig];
		//if (*(x_DWORD *)(v3 + 4))
		if (v3.data_4)
		{
			//v4 = *(x_WORD *)(v3 + 8);
			v4 = v3.data_8;
			//v5 = *(x_DWORD *)(v3 + 4) + a1y->dword_4;
			v5 = v3.data_4 + a1y->dword_4;
			//v6 = a1y->dword_8_data;
			std::vector<type_x_DWORD_E9C28_data>& v6 = a1y->data;
			a1y->dword_4 = v5;
			//*(x_DWORD *)(v6 + v2 + 4) = 0;
			v6[index_orig].data_4 = 0;

			std::cerr << "Fix tmaps preparation in sub_71F20" << std::endl;
			// FIXME: stuff below
			//v2 = *(x_DWORD *)(a1y->dword_8_data + v2);
			//for (i = (char *)v2; ; i += v2)
			//{
			//	v4++;
			//	v7 = a1y->word_20;
			//	if (v4 >= v7)
			//		break;
			//	*(x_DWORD*)(v4 + a1y->dword_12x - 1) = *(x_DWORD*)(v4 + a1y->dword_12x);
			//	*(x_WORD *)(*(x_DWORD*)(v4 + a1y->dword_12x) + 8) = v4 - 1;
			//	v10 = *(const void **) * (x_DWORD*)(v4 + a1y->dword_12x);
			//	**(x_DWORD **)(v4 + a1y->dword_12x) = (x_DWORD)i;
			//	qmemcpy(i, (void*)v10, *(x_DWORD *)(*(x_DWORD *)(v4 + a1y->dword_12x) + 4));
			//	v2 = *(x_DWORD *)(*(x_DWORD *)(v4 + a1y->dword_12x) + 4);
			//}
			//a1y->word_20 = v7 - 1;
		}
	}
	return v2;
}

//----- (000720C0) --------------------------------------------------------
void sub_720C0(type_x_DWORD_E9C28_str** a1y)//2530c0
{
	if (*a1y)
	{
		if ((*a1y)->word_24 == 1)
		{
			sub_83E80_freemem4((Bit8u*)(*a1y)->dword_16x);
			//sub_83E80_freemem4((Bit8u*)(*a1y)->dword_8_data);
			//sub_83E80_freemem4((Bit8u*)(*a1y)->dword_12x);
			sub_83E80_freemem4((Bit8u*)*a1y);
		}
		*a1y = 0;
	}
}


//----- (00072120) --------------------------------------------------------
type_E9C08* sub_72120(uint16_t a1)//253120
{
	uint16_t v1; // di
	type_E9C08* v2x; // esi
	type_E9C08* v3x; // ebx
	type_animations1* v4; // eax
	//int v5; // eax

	v1 = a1;
	sub_83CC0(9);
	v2x = (type_E9C08*)malloc(6);
	v3x = v2x;
	if (v2x && (v4 = (type_animations1*)malloc(28 * a1), (v2x->dword_2 = v4) != 0))
	{
		v2x->word_0 = a1;
		while (--v1 != 0xffff)
		{
			//v5 = 7 * v1;
			//*(x_DWORD *)(v2x->dword_2 + 4 * v5 + 4) = 0;
			//*(x_DWORD *)(v2x->dword_2 + 4 * v5) = 0;
			v2x->dword_2[v1].dword_4 = 0;
			v2x->dword_2[v1].dword_0 =0;
		}
	}
	else if (v2x)
	{
		sub_83E80_freemem4((Bit8u*)v2x);
		v3x = 0;
	}
	sub_83CC0(10);
	return v3x;
}

//----- (000721C0) --------------------------------------------------------
type_animations1* sub_721C0_initTmap(type_E9C08* a1x, int *a2, int16_t a3)//2531c0
{
	int16_t v3; // cx
	int16_t v4; // si
	int16_t i; // bx
	//x_DWORD *v6; // edx
	type_animations1* v6x;
	int v7; // ebx
	int v8; // ecx
	int16_t v9; // ST08_2
	//int v10; // edx
	int16_t v12; // [esp+Ch] [ebp-4h]

	v3 = -1;
	v4 = -1;
	if (!(a1x->word_0))
		return 0;
	for (i = 0; i < a1x->word_0; i++)
	{
		v6x = &a1x->dword_2[i];
		if (v6x->dword_4)
		{
			if (!v6x->dword_0)
				v4 = i;
		}
		else
		{
			v3 = i;
		}
	}
	v12 = v3 <= 0 ? v4 : v3;
	if (v12 <= -1)
		return 0;
	v7 = *a2;
	v8 = *(uint16_t *)(*a2 + 4) * *(uint16_t *)(*a2 + 2);
	v9 = *(x_WORD *)(v8 + *a2 + 6);
	//v10 = 28 * v12;
	// FIXME: types
	// a1x->dword_2[v12].dword_4 = (x_DWORD)a2;
	a1x->dword_2[v12].word_12 = 6;
	a1x->dword_2[v12].word_14 = v8 + 6;
	a1x->dword_2[v12].word_16_maxframes = v9;
	a1x->dword_2[v12].word_18 = *(x_WORD *)(v7 + 2);
	a1x->dword_2[v12].word_20 = *(x_WORD *)(v7 + 4);
	a1x->dword_2[v12].dword_8 = v8 + 6;
	a1x->dword_2[v12].word_22 = 1;
	a1x->dword_2[v12].dword_0 = 1;
	a1x->dword_2[v12].word_24 = v12;
	a1x->dword_2[v12].word_26 = a3;
	//return v10 + a1x->dword_2;
	return &a1x->dword_2[v12];
}



//----- (00072350) --------------------------------------------------------
void sub_72350(type_animations1* a1x)//253350 //animates sprite
{
	int v1; // esi
	//int v2; // edi
	int v3; // eax
	//int16_t v4; // cx
	//int result; // eax

#ifdef TEST_BIG_SPRITES
	if (a1x->word_22 > a1x->word_16_maxframes)
	{
		a1x->word_22 = 1;
		a1x->dword_8 = a1x->word_14;
	}

	if (x_DWORD_F66F0x[a1x->word_26] != NULL)
	{
		Bit8u* baseadr = *(Bit8u * *)x_DWORD_F66F0x[a1x->word_26];
		if (baseadr != NULL)
		{
			int animwidth = *(Bit16u*)(baseadr + 2);
			int animheight = *(Bit16u*)(baseadr + 4);
			if ((animwidth > 0) && (animheight > 0) && (animwidth < 1000) && (animheight < 1000))
				memcpy(baseadr + 6, BIG_SPRITES_BUFFERx[a1x->word_26].frames[a1x->word_22-1], (animwidth * animheight));
		}
	}

	a1x->word_22 = a1x->word_22 + 1;
#else
	if (a1x->word_22 > a1x->word_16_maxframes)
	{
		a1x->word_22 = 1;
		a1x->dword_8 = a1x->word_14;
	}
	v1 = *(x_DWORD *)a1x->dword_4;
	sub_765FC(a1x->word_18, 0);
	v1 += 6;
	v3 = sub_76619(v1 + a1x->dword_8, v1);
	a1x->dword_8 = v3 - v1;
	a1x->word_22 = a1x->word_22 + 1;
#endif
}

//----- (000723B0) --------------------------------------------------------
uint16_t sub_723B0(type_animations1* a1x, char a2)
{
	uint16_t result; // ax

	if (a2)
	{
		while (1)
		{
			result = a1x->word_22;
			if (result > a1x->word_16_maxframes)
				break;
			sub_72350(a1x);
		}
	}
	else
	{
		memset((void*)(*(x_DWORD *)a1x->dword_4 + 6), 0, a1x->word_18 * a1x->word_20);
		a1x->word_22 = 1;
		result = a1x->word_14;
		a1x->dword_8 = result;
	}
	return result;
}

//----- (00072410) --------------------------------------------------------
x_DWORD *sub_72410(x_DWORD *a1)
{
	x_DWORD *result; // eax

	result = a1;
	if (a1)
	{
		a1[0] = 0;
		a1[1] = 0;
	}
	return result;
}

//----- (000724F0) --------------------------------------------------------
type_animations1* sub_724F0(type_E9C08* a1x, int16_t a2)
{
	//type_animations1* resultx; // eax
	int resulty;
	//int v3; // edx
	Bit16s v3x;
	//HIWORD(v3) = HIWORD(a1);
	//resultx = a1x->dword_2;
	resulty = 0;
	//LOWORD(v3) = *(x_WORD *)a1;
	v3x = a1x->word_0;
	if (!a1x->word_0)
		return 0;
	while (!a1x->dword_2[resulty].dword_4 || a2 != a1x->dword_2[resulty].word_26)
	{
		--v3x;
		//result += 28;
		//resultx++;
		resulty++;
		if (!v3x)
			return 0;
	}
	return &(a1x->dword_2[resulty]);
}

//----- (00072550) --------------------------------------------------------
void sub_72550(type_E9C08** a1x)
{
	if (*a1x)
	{
		sub_83E80_freemem4((Bit8u*)(*a1x)->dword_2);
		(*a1x)->dword_2 = 0;
		sub_83E80_freemem4((Bit8u*)*a1x);
		*a1x = 0;
	}
}

//----- (00072633) --------------------------------------------------------
Bit16u /*__spoils<>*/ sub_72633_maybe_tan(Bit16s a1, Bit16s a2)//253633 //4c //3e
{
	//signed int v2; // ebx
	Bit16u result; // ax
	//int v4; // ebx
	//int v5; // eax
	//int v6; // ebx

	//debug
	//loadfromsnapshot((char*)"0160-00253633", (Bit8u*)&a1, 0x354ef8, 2);//4c
	//loadfromsnapshot((char*)"0160-00253633", (Bit8u*)&a2, 0x354efc, 2);//3e
	//loadfromsnapshot((char*)"0160-00253633", (Bit8u*)x_WORD_DE350, 0x2af350, 600);//fix it!
	//debug

	if (!a1)
	{
		if (!a2)
			return 0;
	}
	if (a1 < 0)
	{
		if (a2 < 0)
		{
			if (-a1 < -a2)
				result = 0x800 - x_WORD_DE350[(-a1 << 8) / -a2];
			else
				result = x_WORD_DE350[(-a2 << 8) / -a1] + 0x600;
		}
		else if (-a1 < a2)
		{
			result = x_WORD_DE350[(-a1 << 8) / a2] + 0x400;
		}
		else
		{
			result = 0x600 - x_WORD_DE350[(a2 << 8) / -a1];
		}
	}
	else if (a2 < 0)
	{
		if (a1 < -a2)
			result = x_WORD_DE350[(a1 << 8) / -a2];
		else
			result = 0x200 - x_WORD_DE350[(-a2 << 8) / a1];
	}
	else if (a1 < a2)
	{
		result = 0x400 - x_WORD_DE350[(a1 << 8) / a2];
	}
	else
	{
		result = x_WORD_DE350[(a2 << 8) / a1] + 0x200;
	}
	return result;
}

//----- (0007277A) --------------------------------------------------------
unsigned int sub_7277A_radix_3d(unsigned int a1)//25377a
{
	Bit32u v1; // eax
	unsigned int i; // ebx

	if (!a1)
		return 0;
	x_BitScanReverse(&v1, a1);//FIX IT!
	for (i = (uint16_t)x_WORD_727B0[v1]; (signed int)(a1 / i) < (signed int)i; i = (a1 / i + i) >> 1)
		;
	return i;
}

//----- (000727F0) --------------------------------------------------------
void sub_727F0(uint8_t a1, uint8_t a2, uint8_t a3, uint8_t a4)//fix
{
	/*__outx_BYTE(0x3C8u, a1);
	__outx_BYTE(0x3C9u, a2);
	__outx_BYTE(0x3C9u, a3);
	__outx_BYTE(0x3C9u, a4);*/
}

//----- (00072883) --------------------------------------------------------
void sub_72883_clear_graphics_320(void *a2, uint16_t a3, char a4)//253883
{
	//int v4; // eax

	/*LOBYTE(a1) = a4;//0
	BYTE1(a1) = a4;//0*/
	//v4 = (a4 << 24) + (a4 << 16);
	/*LOBYTE(v4) = a4;
	BYTE1(v4) = a4;*/
	//v4 = (v4 & 0xff) + ((v4 & 0xff) << 16);
	memset32(a2, a4/*+a4<<8+a4<<16+a4<<16*/, 4*80 * a3);
}

//----- (000728A9) --------------------------------------------------------
void sub_728A9_clear_graphics_640(void *a2, uint16_t a3, char a4)//2538a9
{
	/*
cseg01:000728AF                 mov     edi, [ebp+arg_0]
cseg01:000728B6                 imul    ecx, [ebp+arg_4]*0A0h
cseg01:000728BC                 mov     eax=(257*[ebp+arg_8])<<10
cseg01:000728C5                 mov     al, [ebp+arg_8]
cseg01:000728C8                 mov     ah, [ebp+arg_8]
	*/

	//memset32(a2, a4*257*256, a3*160);

	//memset32(a2, 640 * 480, a3 * 160);//fixed
	//11 800 fffffff7 355142
	//00,00,00,00 12c00 1e0*a0 3aa0a4
	memset32(a2, a4, 4 * 160 * a3);
	//3aa0a4,1E0,0


	  /*LOBYTE(a1) = a4;
	  BYTE1(a1) = a4;
	  v4 = a1 << 16;
	  LOBYTE(v4) = a4;
	  BYTE1(v4) = a4;
	  memset32(a2, v4, 160 * a3);*/
}

void sub_728A9_clear_graphics_alt(void* a2, uint16_t a3, char a4)//2538a9
{
	
	memset32(a2, a4, alt_resolution_width * a3);
}

//----- (00072C40) --------------------------------------------------------
void sub_72C40_draw_bitmap_640_setcolor(Bit16s posx, Bit16s posy, posistruct a3, Bit8u color)//253c40
{
	//Bit16u v4; // dx
	//Bit8u* v5; // esi
	//int result; // eax
	//int v7; // [esp+4h] [ebp-4h]

	//fix it
	//v7 = 0;
	//fix it

	//v4 = *(x_WORD *)(a3 + 4);
	//v5 = *(Bit8u **)a3;
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		sub_8F920(a3.width, a3.height, posy, posx, a3.data, color, 0);
		//result = v7;
	}
	else
	{
		if (x_WORD_180660_VGA_type_resolution & 8)
		{
			/*doublebyte tempdblbyte;
			tempdblbyte.byte1 = a3.sizex;
			tempdblbyte.byte2 = a3.sizey;*/
			sub_8F935_bitmap_draw_final(a3.width, a3.height, posy, posx, a3.data, color, 0);
		}
		//result = v7;
	}
	//return result;
}

//----- (00072CB0) --------------------------------------------------------
int sub_72CB0(uint8_t *a1, int a2)
{
	int v3; // [esp+4h] [ebp-Ch]
	int v4; // [esp+8h] [ebp-8h]
	uint8_t *v5; // [esp+Ch] [ebp-4h]

	v5 = a1;
	v4 = a2;
	v3 = 0;
	while (v4)
	{
		--v4;
		v3 += *v5++;
	}
	return v3;
}

//----- (00072D04) --------------------------------------------------------
void sub_72D04()
{
	signed int i; // [esp+0h] [ebp-8h]
	signed int j; // [esp+4h] [ebp-4h]

	if (x_BYTE_E1274)
	{
		for (i = 0; x_WORD_E127A > i; i++)
		{
			while (*(x_BYTE *)(x_DWORD_E12AE[i] + 49) == -1)
				;
		}
		while (*(x_BYTE *)(x_DWORD_E12AA + 49) == -1)
			;
		sub_83E80_freemem4((Bit8u*)x_DWORD_E12AA);
		for (j = 0; j < 8; j++)
		{
			sub_83E80_freemem4((Bit8u*)x_DWORD_E12AE[j]);
			sub_83E80_freemem4((Bit8u*)x_DWORD_E1286[j]);
		}
		sub_83E80_freemem4((Bit8u*)x_DWORD_E127E);
		sub_83E80_freemem4((Bit8u*)x_DWORD_E1282);
		x_BYTE_E1274 = 0;
	}
}

//----- (00072DDE) --------------------------------------------------------
int sub_72DDE(int16_t *a1, int a2)
{
	//char v3; // [esp+0h] [ebp-1Ch]
	int result; // [esp+14h] [ebp-8h]

	sprintf(printbuffer, "%s%d", "TESTER", a2);
	do
	{
		result = sub_74767(a1, (x_BYTE *)x_DWORD_E12AE[a2], (Bit8u*)printbuffer);
		if (result && (result == 13))
			sub_74A86((x_BYTE *)x_DWORD_E12AE[a2], (Bit8u*)printbuffer);
	} while (result == 13 && !x_WORD_E12A6);
	return result;
}

//----- (00072E70) --------------------------------------------------------
int /*__fastcall*/ sub_72E70(int a1, int a2, int16_t *a3)
{
	int v3; // edx
	char v5; // [esp+0h] [ebp-30h]
	char v6[8]; // [esp+18h] [ebp-18h]
	int v7; // [esp+20h] [ebp-10h]
	int i; // [esp+28h] [ebp-8h]
	int v9; // [esp+2Ch] [ebp-4h]

	for (i = 0; x_WORD_E127A > i; i++)
	{
		if (x_WORD_E1276 != i)
			sub_74809(i);
	}
	memset(v6, 0, 8);
	v9 = 0;
	while (v9 < 2)
	{
		v3 = v6[x_WORD_E1276];
		if (v3 == x_WORD_E127A - 1 || x_WORD_E12A6)
			break;
		for (i = 0; x_WORD_E127A > i; i++)
		{
			if (x_WORD_E1276 != i)
			{
				v5 = *(x_BYTE *)(x_DWORD_E12AE[i] + 49);
				if (v5)
				{
					if (v5 == -1)
					{
						if (v9)
							sub_748F7(i);
					}
					else if (!v6[i])
					{
						++v6[x_WORD_E1276];
						v6[i] = 1;
					}
				}
				else if (++v9 == 1)
				{
					x_WORD_E12A8 = i;
				}
			}
		}
		sub_7C230(x_WORD_E127A, v3, a3);
	}
	v7 = v9;
	return v9;
}

//----- (00072FBB) --------------------------------------------------------
signed int /*__fastcall*/ sub_72FBB(int a1, int a2, int16_t *a3)
{
	int v3; // edx
	int i; // [esp+4h] [ebp-4h]

	//fix it
	v3 = 0;
	//fix it

	sub_74809(0);
	for (i = x_DWORD_17DB54_game_turn2; ; sub_7C230(x_DWORD_17DB54_game_turn2 - i, v3, a3))
	{
		if (*(x_BYTE *)(x_DWORD_E12AE[0] + 49) != -1)
			return 1;
		if ((x_DWORD_17DB54_game_turn2 - i) > 0x78)
			break;
	}
	sub_748F7(0);
	return 0;
}

//----- (0007302E) --------------------------------------------------------
signed int sub_7302E()
{
	signed int i; // [esp+4h] [ebp-4h]

	for (i = 0; x_WORD_E127A > i && !x_WORD_E12A6; i++)
	{
		if (x_WORD_E1276 != i)
			sub_74B75(i);
	}
	return 1;
}

//----- (0007308F) --------------------------------------------------------
int sub_7308F(int16_t *a1, Bit8u* a2, int16_t a3)
{
	Bit8u* v3; // edx
	int v4; // eax
	int v6; // [esp+4h] [ebp-24h]
	//char v7; // [esp+8h] [ebp-20h]
	int i; // [esp+1Ch] [ebp-Ch]
	int v9; // [esp+20h] [ebp-8h]

	//fix
	v3 = 0;
	//fix

	if (!x_BYTE_E1274 || x_BYTE_E1275)
		return -1;
	if (a3)
		x_WORD_E127A = a3;
	else
		x_WORD_E127A = 8;
	x_BYTE_E1275 = 0;
	x_WORD_E12A6 = 0;
	char testerstr[512] = "TESTER";
	strcpy(testerstr, (char*)a2);
	for (i = 0; x_WORD_E127A > i; i++)
		x_BYTE_E12CE[i] = 0;
	for (i = 0; x_WORD_E127A > i; i++)
	{
		while (*(x_BYTE *)(x_DWORD_E12AE[i] + 49) == -1)
			;
	}
	while (*(x_BYTE *)(x_DWORD_E12AA + 49) == -1)
		;
	i = 0;
	x_WORD_E1276 = -1;
	while (x_WORD_E127A > i && x_WORD_E1276 == -1 && !x_WORD_E12A6)
	{
		v6 = sub_72DDE(a1, i);
		if (v6)
		{
			if (v6 == 255)
			{
				sub_748F7(i);
				i = x_WORD_E127A;
			}
		}
		else
		{
			x_WORD_E1276 = i;
		}
		++i;
	}
	if (x_WORD_E1276 == -1)
		return -1;
	for (i = 0; ; i++)
	{
		v4 = x_WORD_E127A;
		if (x_WORD_E127A <= i)
			break;
		if (x_WORD_E1276 != i)
		{
			strcpy((char*)(x_DWORD_E12AE[i] + 26), (const char*)(x_DWORD_E12AE[x_WORD_E1276] + 26));
			v3 = x_DWORD_E12AE[x_WORD_E1276];
			LOBYTE(v3) = *(x_BYTE *)(v3 + 3);
			// FIXME: types
			// *(x_BYTE *)(x_DWORD_E12AE[i] + 3) = (int8_t)v3;
		}
	}
	LOWORD(v4) = x_WORD_E1276;
	if (x_WORD_E1276)
	{
		// FIXME: types
		// // if (!sub_72FBB(v4, (int)v3, a1))
		// 	x_WORD_E12A6 = 1;
	}
	else
	{
		sub_7302E();
		x_WORD_E12A8 = x_WORD_E1276;
	}
	if (x_WORD_E12A6 == 1)
	{
		for (i = 0; x_WORD_E127A > i; i++)
		{
			if (x_WORD_E1276 != i)
				sub_748F7(i);
		}
		sprintf(printbuffer, "%s%d", testerstr, x_WORD_E1276);
		sub_74A86((x_BYTE *)x_DWORD_E12AE[x_WORD_E1276], (Bit8u*)printbuffer);
		v9 = -1;
	}
	else
	{
		sub_74F76();
		x_BYTE_E1275 = 1;
		v9 = x_WORD_E1276;
	}
	return v9;
}

//----- (00073669) --------------------------------------------------------
int sub_73669(int16_t a1)
{
	int result; // eax
	//char v2; // [esp+0h] [ebp-18h]
	int i; // [esp+14h] [ebp-4h]

	if (x_WORD_E1276 == a1)
	{
		for (i = 0; (int16_t)i < x_WORD_E127A; i++)
		{
			if ((x_WORD)i != x_WORD_E1276)
			{
				sub_748F7(i);
				sub_74B19((x_BYTE *)x_DWORD_E12AE[(int16_t)i]);
			}
		}
		sprintf(printbuffer, "%s%d", "TESTER", x_WORD_E1276);
		result = sub_74A86((x_BYTE *)x_DWORD_E12AE[a1], (Bit8u*)printbuffer);
		x_BYTE_E1275 = 0;
	}
	else
	{
		sub_748F7(a1);
		result = sub_74B19((x_BYTE *)x_DWORD_E12AE[a1]);
	}
	return result;
}

//----- (0007373D) --------------------------------------------------------
void sub_7373D(int16_t a1)
{
	Bit8u* result; // eax
	//char v2; // [esp+0h] [ebp-64h]
	Bit8u v3[8]; // [esp+54h] [ebp-10h]
	int i; // [esp+5Ch] [ebp-8h]

	//fix
	result = 0;
	//fix


	if (x_BYTE_E1274 && x_BYTE_E1275)
	{
		if ((uint16_t)x_WORD_E12A8 == a1)
		{
			if (x_WORD_E1276 == a1)
			{
				for (i = 0; x_WORD_E127A > i; i++)
					v3[i] = x_BYTE_E12CE[i] == 1;
				for (i = 0; x_WORD_E127A > i; i++)
				{
					// FIXME: types
					// // if (v3[i] == 1)
					// 	sub_74006(i, (int)v3, 8u);
				}
				result = (Bit8u*)sub_73669(a1);
			}
			else
			{
				sub_7404E(x_WORD_E12A8, v3, 8u);
				sub_73669(a1);
				for (i = 0; x_WORD_E127A > i; i++)
				{
					if (v3[i] == 1)
					{
						x_WORD_E12A8 = i;
						v3[i] = 0;
						break;
					}
				}
				if ((uint16_t)x_WORD_E12A8 == x_WORD_E1276)
				{
					for (i = 0; ; i++)
					{
						result = (Bit8u*)x_WORD_E127A;
						if (x_WORD_E127A <= i)
							break;
						if (x_WORD_E1276 != i && v3[i] == 1)
						{
							sub_74B75(i);
							while (*(x_BYTE *)(x_DWORD_E12AE[i] + 49) == -1)
								;
							if (*(x_BYTE *)(x_DWORD_E12AE[i] + 49))
								sprintf(printbuffer, "Error code (LISTEN) : %d", *(uint8_t *)(x_DWORD_E12AE[i] + 49));
						}
					}
				}
				else
				{
					while (1)
					{
						sub_74809(x_WORD_E12A8);
						while (*(x_BYTE *)(x_DWORD_E12AE[(uint16_t)x_WORD_E12A8] + 49) == -1)
							;
						result = x_DWORD_E12AE[x_WORD_E12A8];
						if (!*(x_BYTE *)(result + 49))
							break;
						sprintf(printbuffer, "Error code (CALL) : %d", *(uint8_t *)(x_DWORD_E12AE[(uint16_t)x_WORD_E12A8] + 49));
					}
				}
			}
		}
		else
		{
			result = (Bit8u*)sub_73669(a1);
		}
	}
	//return (int)result;
}

//----- (000739AD) --------------------------------------------------------
int16_t sub_739AD(int16_t a1)
{
	int16_t result; // ax
	//char v2; // [esp+0h] [ebp-18h]
	int i; // [esp+14h] [ebp-4h]

	if (x_WORD_E1276 == a1)
	{
		for (i = 0; (int16_t)i < x_WORD_E127A; i++)
		{
			if ((x_WORD)i != x_WORD_E1276)
			{
				sub_748F7(i);
				sub_74B19((x_BYTE *)x_DWORD_E12AE[(int16_t)i]);
			}
		}
		sprintf(printbuffer, "%s%d", "TESTER", x_WORD_E1276);
		result = sub_74A86((x_BYTE *)x_DWORD_E12AE[a1], (Bit8u*)printbuffer);
		x_BYTE_E1275 = 0;
	}
	else
	{
		sub_748F7(a1);
		sub_74B19((x_BYTE *)x_DWORD_E12AE[a1]);
		result = x_WORD_E12A8;
		if (x_WORD_E1276 == (uint16_t)x_WORD_E12A8)
			result = sub_74B75(a1);
	}
	return result;
}

//----- (00073AA1) --------------------------------------------------------
int16_t sub_73AA1(int16_t a1)
{
	Bit8u* v1; // eax
	//char v3; // [esp+0h] [ebp-64h]
	Bit8u v4[8]; // [esp+54h] [ebp-10h]
	int i; // [esp+5Ch] [ebp-8h]

	//fix
	v1 = 0;
	//fix

	if (x_BYTE_E1274 && x_BYTE_E1275)
	{
		if (x_WORD_E12A8 == a1)
		{
			if (x_WORD_E1276 == a1)
			{
				for (i = 0; x_WORD_E127A > i; i++)
					v4[i] = x_BYTE_E12CE[i] == 1;
				for (i = 0; x_WORD_E127A > i; i++)
				{
					// FIXME: types
					// // if (v4[i] == 1)
					// 	sub_74006(i, (int)v4, 8u);
				}
				LOWORD(v1) = sub_739AD(a1);
			}
			else
			{
				sub_7404E(x_WORD_E12A8, v4, 8u);
				sub_739AD(a1);
				for (i = 0; x_WORD_E127A > i; i++)
				{
					if (v4[i] == 1)
					{
						x_WORD_E12A8 = i;
						v4[i] = 0;
						break;
					}
				}
				if (x_WORD_E12A8 == x_WORD_E1276)
				{
					for (i = 0; ; i++)
					{
						LOWORD(v1) = x_WORD_E127A;
						if (x_WORD_E127A <= i)
							break;
						if (x_WORD_E1276 != i && v4[i] == 1)
						{
							sub_74B75(i);
							while (*(x_BYTE *)(x_DWORD_E12AE[i] + 49) == -1)
								;
							if (*(x_BYTE *)(x_DWORD_E12AE[i] + 49))
								sprintf(printbuffer, "Error code (LISTEN) : %d", *(uint8_t *)(x_DWORD_E12AE[i] + 49));
						}
					}
				}
				else
				{
					while (1)
					{
						sub_74809(x_WORD_E12A8);
						while (*(x_BYTE *)(x_DWORD_E12AE[x_WORD_E12A8] + 49) == -1)
							;
						v1 = x_DWORD_E12AE[x_WORD_E12A8];
						if (!*(x_BYTE *)(v1 + 49))
							break;
						sprintf(printbuffer, "Error code (CALL) : %d", *(uint8_t *)(x_DWORD_E12AE[x_WORD_E12A8] + 49));
					}
				}
			}
		}
		else
		{
			LOWORD(v1) = sub_739AD(a1);
		}
	}
	// FIXME: types
	// return (int)v1;
	return 0;
}

//----- (00073D11) --------------------------------------------------------
int16_t sub_73D11(int16_t a1)
{
	int16_t result; // ax
	//char v2; // [esp+0h] [ebp-18h]
	int i; // [esp+14h] [ebp-4h]

	if (x_WORD_E1276 == a1)
	{
		for (i = 0; (int16_t)i < x_WORD_E127A; i++)
		{
			if ((x_WORD)i != x_WORD_E1276)
			{
				sub_748F7(i);
				sub_74B19((x_BYTE *)x_DWORD_E12AE[(int16_t)i]);
			}
		}
		sprintf(printbuffer, "%s%d", "TESTER", x_WORD_E1276);
		result = sub_74A86((x_BYTE *)x_DWORD_E12AE[a1], (Bit8u*)printbuffer);
		x_BYTE_E1275 = 0;
	}
	else
	{
		sub_748F7(a1);
		sub_74B19((x_BYTE *)x_DWORD_E12AE[a1]);
		result = x_WORD_E12A8;
		if (x_WORD_E1276 == (uint16_t)x_WORD_E12A8)
			result = sub_74B75(a1);
	}
	return result;
}

//----- (00074006) --------------------------------------------------------
uint16_t sub_74006(uint16_t a1, int a2, unsigned int a3)
{
	uint16_t result; // ax

	if (x_BYTE_E1274)
	{
		result = a1;
		// FIXME: types
		// // if (x_BYTE_E12CE[a1] == 1)
		// 	result = sub_74EF1((unsigned int)x_DWORD_E12AE[a1], a2, a3);
	}
	return result;
}

//----- (0007404E) --------------------------------------------------------
void sub_7404E(uint16_t a1, Bit8u* a2, unsigned int a3)
{
	//uint16_t result; // ax

	if (x_BYTE_E1274)
	{
		//result = a1;
		// FIXME: types
		// // if (x_BYTE_E12CE[a1] == 1)
		// 	/*result = */sub_74D41((unsigned int)x_DWORD_E12AE[a1], (int)a2, a3);
	}
	//return result;
}

//----- (00074374) --------------------------------------------------------
int16_t sub_74374()
{
	return sub_74F76();
}

//----- (0007438A) --------------------------------------------------------
void sub_7438A(Bit8u* a1x, unsigned int a2_lenght)
{
	//uint16_t result; // ax
	int16_t i; // [esp+4h] [ebp-4h]
	int16_t j; // [esp+4h] [ebp-4h]

	if (x_BYTE_E1274)
	{
		if (x_WORD_E1276 == (uint16_t)x_WORD_E12A8)
		{
			for (i = 0; i < x_WORD_E1278; i++)
			{
				if (i != x_WORD_E1276)
					sub_7404E(i, a1x + a2_lenght * i, a2_lenght);
			}
			for (j = 0; ; j++)
			{
				//result = j;
				if (j >= x_WORD_E1278)
					break;
				// FIXME: types
				// // if (j != x_WORD_E1276)
				// 	sub_74006(j, (int)a1x, a2_lenght * x_WORD_E1278);
			}
		}
		else
		{
			// FIXME: types
			// sub_74006(x_WORD_E12A8, (int)(a1x + a2_lenght * x_WORD_E1276), a2_lenght);
			/*result = */sub_7404E(x_WORD_E12A8, a1x, a2_lenght * x_WORD_E1278);
		}
	}
	//return result;
}

//----- (0007449C) --------------------------------------------------------
int16_t sub_7449C()
{
	int16_t result; // ax
	signed int i; // [esp+0h] [ebp-4h]

	if (x_BYTE_E1274)
	{
		result = x_WORD_E12A8;
		if (x_WORD_E1276 == (uint16_t)x_WORD_E12A8)
		{
			for (i = 0; ; i++)
			{
				result = x_WORD_E127A;
				if (x_WORD_E127A <= i)
					break;
				if (x_WORD_E1276 != i && *(x_BYTE *)(x_DWORD_E12AE[i] + 49) == -1)
					sub_748F7(i);
			}
		}
	}
	return result;
}

//----- (00074515) --------------------------------------------------------
int sub_74515()
{
	return (uint16_t)x_WORD_E12A8;
}

//----- (00074536) --------------------------------------------------------
int sub_74536()
{
	return x_WORD_E1276;
}

//----- (00074556) --------------------------------------------------------
Bit8u sub_74556()//255556 push ebp 355250
{
	signed int v2; // [esp+4h] [ebp-8h]
	signed int i; // [esp+8h] [ebp-4h]
	signed int j; // [esp+8h] [ebp-4h]

	v2 = 1;
	if (!x_BYTE_E1274 && !x_DWORD_E12AA)
	{
		x_DWORD_E12AA = (Bit8u*)malloc(66);
		if (x_DWORD_E12AA)
		{
			if (sub_74A11() == -1)//255a11
				return 0;
			x_DWORD_E127E = (Bit8u*)malloc(2048);
			if (x_DWORD_E127E)
			{
				x_DWORD_E1282 = (Bit8u*)malloc(2048);
				if (x_DWORD_E1282)
				{
					for (i = 0; i < 8; i++)
					{
						x_DWORD_E1286[i] = (Bit8u*)malloc(2048);
						if (!x_DWORD_E1286[i])
						{
							v2 = 0;
							break;
						}
						x_DWORD_E12AE[i] = (Bit8u*)malloc(66);
						if (!x_DWORD_E12AE[i])
						{
							v2 = 0;
							break;
						}
					}
					if (i == 8)
						x_BYTE_E1274 = 1;
				}
				else
				{
					v2 = 0;
				}
			}
			else
			{
				v2 = 0;
			}
		}
		else
		{
			v2 = 0;
		}
	}
	if (!v2)
	{
		x_BYTE_E1274 = 0;
		if (x_DWORD_E12AA)
			sub_83E80_freemem4(x_DWORD_E12AA);
		if (x_DWORD_E127E)
			sub_83E80_freemem4(x_DWORD_E127E);
		if (x_DWORD_E1282)
			sub_83E80_freemem4(x_DWORD_E1282);
		for (j = 0; j < 8; j++)
		{
			if (x_DWORD_E12AE[j])
				sub_83E80_freemem4(x_DWORD_E12AE[j]);
			if (x_DWORD_E1286[j])
				sub_83E80_freemem4(x_DWORD_E1286[j]);
		}
	}
	return x_BYTE_E1274;
}

//----- (00074767) --------------------------------------------------------
signed int sub_74767(int16_t *a1, x_BYTE *a2, Bit8u* a3)
{
	int v3; // edx

	//fix it
	v3 = 0;
	//fix it

	// FIXME: types
	// strcpy(a2 + 26, (const char*)a3);
	// FIXME: types
	// // while (strlen(a2 + 26) < 0xFu)
	// 	strcat(a2 + 26, " ");
	a2[0] = -80;
	// FIXME: types
	// // if (sub_75044((unsigned int)a2) == -1)
	// 	return -99;
	// while (a2[49] == -1 && !x_WORD_E12A6)
	// 	sub_7C230((int)a2, v3, a1);
	return (uint8_t)a2[49];
}

//----- (00074809) --------------------------------------------------------
int sub_74809(int16_t a1)
{
	int v2; // [esp+14h] [ebp-8h]

	*(x_BYTE *)x_DWORD_E12AE[a1] = -112;
	sprintf((char*)(x_DWORD_E12AE[a1] + 10), "%s%d", "TESTER", a1);
	while (strlen((const char*)(x_DWORD_E12AE[a1] + 10)) < 0xFu)
		strcat((char*)(x_DWORD_E12AE[a1] + 10), " ");
	*(x_BYTE *)(x_DWORD_E12AE[a1] + 42) = 0;
	*(x_BYTE *)(x_DWORD_E12AE[a1] + 43) = 0;
	// FIXME: types
	// // if (sub_75044((unsigned int)x_DWORD_E12AE[a1]) == -1)
	// 	v2 = -99;
	// else
	// 	v2 = -*(uint8_t *)(x_DWORD_E12AE[a1] + 49);
	return v2;
}

//----- (000748F7) --------------------------------------------------------
signed int sub_748F7(int16_t a1)
{
	if (*(x_BYTE *)(x_DWORD_E12AE[a1] + 49) != -1)
		return -*(uint8_t *)(x_DWORD_E12AA + 49);
	*(x_BYTE *)x_DWORD_E12AA = 53;
	// FIXME: types
	// *(x_WORD *)(x_DWORD_E12AA + 6) = (unsigned int)x_DWORD_E12AE[a1] >> 4;
	// FIXME: types
	// // if (sub_75044((unsigned int)x_DWORD_E12AA) != -1)
	// {
	// 	do
	// 	{
	// 		while (*(x_BYTE *)(x_DWORD_E12AA + 49) == -1)
	// 			;
	// 	} while (*(x_BYTE *)(x_DWORD_E12AE[a1] + 49) == -1);
	// 	return -*(uint8_t *)(x_DWORD_E12AA + 49);
	// }
	return -99;
}

//----- (00074A11) --------------------------------------------------------
signed int sub_74A11()//255a11
{
	int16_t v0; // dx

	//fix it
	v0 = 0;
	//fix it

	/*if ( !dos_getvect(92) && !v0 )
	  return -1;*/ //fix
	*(x_BYTE *)x_DWORD_E12AA = 127;
	// FIXME: types
	// // if (sub_75044((unsigned int)x_DWORD_E12AA) == -1)//push ebx:1a6f44,push esi:1a7358,push edi:1a7358,push ebp:355234
	// 	return -1;
	if (*(x_BYTE *)(x_DWORD_E12AA + 1) == 3)
		return 0;
	return -1;
}

//----- (00074A86) --------------------------------------------------------
int sub_74A86(x_BYTE *a1, Bit8u* a2)
{
	// FIXME: types
	// strcpy(a1 + 26, (const char*)a2);
	// FIXME: types
	// // while (strlen(a1 + 26) < 0xFu)
	// 	strcat(a1 + 26, " ");
	*a1 = -79;
	// FIXME: types
	// // if (sub_75044((unsigned int)a1) == -1)
	// 	return -99;
	while (a1[49] == -1)
		;
	return -(uint8_t)a1[49];
}

//----- (00074B19) --------------------------------------------------------
int sub_74B19(x_BYTE *a1)
{
	*a1 = -110;
	// FIXME: types
	// // if (sub_75044((unsigned int)a1) == -1)
	// 	return -99;
	while (a1[49] == -1)
		;
	a1[2] = 0;
	return -(uint8_t)a1[49];
}

//----- (00074B75) --------------------------------------------------------
signed int sub_74B75(int16_t a1)
{
	//char v2; // [esp+0h] [ebp-18h]

	if (*(x_BYTE *)(x_DWORD_E12AE[a1] + 49) == -1)
		return -*(uint8_t *)(x_DWORD_E12AE[a1] + 49);
	sprintf(printbuffer, "%s%d", "TESTER", a1);
	*(x_BYTE *)x_DWORD_E12AE[a1] = -111;
	strcpy((char*)(x_DWORD_E12AE[a1] + 10), printbuffer);
	while (strlen((const char*)(x_DWORD_E12AE[a1] + 10)) < 0xFu)
		strcat((char*)(x_DWORD_E12AE[a1] + 10), " ");
	*(x_BYTE *)(x_DWORD_E12AE[a1] + 42) = 0;
	*(x_BYTE *)(x_DWORD_E12AE[a1] + 43) = 0;
	// FIXME: types
	// // if (sub_75044((unsigned int)x_DWORD_E12AE[a1]) != -1)
	// {
	// 	*(x_WORD *)(x_DWORD_E12AE[a1] + 4) = 0;
	// 	return -*(uint8_t *)(x_DWORD_E12AE[a1] + 49);
	// }
	return -99;
}

//----- (00074C9D) --------------------------------------------------------
int sub_74C9D(unsigned int a1, int a2)
{
	*(x_BYTE *)a1 = -107;
	// FIXME: types
	// *(x_WORD *)(a1 + 6) = (unsigned int)x_DWORD_E1282 >> 4;
	*(x_WORD *)(a1 + 8) = 2048;
	if (sub_75044(a1) == -1)
		return -99;
	while (*(x_BYTE *)(a1 + 49) == -1)
		;
	if (*(x_BYTE *)(a1 + 49))
		return -*(uint8_t *)(a1 + 49);
	memcpy((void*)a2, (void*)x_DWORD_E1282, *(uint16_t *)(a1 + 8));
	return *(uint16_t *)(a1 + 8);
}

//----- (00074D41) --------------------------------------------------------
void sub_74D41(unsigned int a1, int a2, unsigned int a3)
{
	int v3; // eax
	int v5; // [esp+0h] [ebp-10h]
	int v6; // [esp+4h] [ebp-Ch]
	unsigned int v7; // [esp+8h] [ebp-8h]
	int v8; // [esp+Ch] [ebp-4h]

	v8 = a2;
	v7 = 0;
	while (a3 >> 11 > v7)
	{
		v6 = sub_74C9D(a1, v8);
		if (v6 != 2048)
			return;
		v7++;
		v8 += 2048;
	}
	v3 = sub_74C9D(a1, v8);
	if ((a3 & 0x7FF) == v3)
		v5 = a3;
	else
		v5 = v3;
	//return v5;
}

//----- (00074DD4) --------------------------------------------------------
signed int sub_74DD4(unsigned int a1, int a2, uint16_t a3)
{
	signed int v4; // [esp+0h] [ebp-4h]

	*(x_BYTE *)a1 = -107;
	// FIXME: types
	// *(x_WORD *)(a1 + 6) = (unsigned int)x_DWORD_E1286[a3] >> 4;
	*(x_WORD *)(a1 + 8) = 2048;
	if (sub_75044(a1) == -1)
		v4 = -99;
	else
		v4 = 1;
	return v4;
}

//----- (00074E6D) --------------------------------------------------------
int sub_74E6D(unsigned int a1, int a2, int a3)
{
	memcpy((void*)x_DWORD_E127E, (void*)a2, a3);
	*(x_BYTE *)a1 = -108;
	// FIXME: types
	// *(x_WORD *)(a1 + 6) = (unsigned int)x_DWORD_E127E >> 4;
	*(x_WORD *)(a1 + 8) = a3;
	if (sub_75044(a1) == -1)
		return -99;
	while (*(x_BYTE *)(a1 + 49) == -1)
		;
	return -*(uint8_t *)(a1 + 49);
}

//----- (00074EF1) --------------------------------------------------------
int sub_74EF1(unsigned int a1, int a2, unsigned int a3)
{
	unsigned int v5; // [esp+4h] [ebp-Ch]
	int v6; // [esp+8h] [ebp-8h]
	int16_t v7; // [esp+Ch] [ebp-4h]

	v6 = a2;
	v5 = 0;
	while (1)
	{
		if (a3 >> 11 <= v5)
			return sub_74E6D(a1, v6, a3 & 0x7FF);
		v7 = sub_74E6D(a1, v6, 2048);
		if (v7)
			break;
		++v5;
		v6 += 2048;
	}
	return v7;
}

//----- (00074F76) --------------------------------------------------------
int16_t sub_74F76()
{
	int16_t result; // ax
	int16_t i; // [esp+0h] [ebp-4h]

	for (i = 0; i < x_WORD_E127A; i++)
	{
		x_BYTE_E12CE[i] = sub_74FE1(i);
		if (x_BYTE_E12CE[i])
			x_WORD_E1278 = i + 1;
	}
	result = x_WORD_E127A;
	x_WORD_E1278 = x_WORD_E127A;
	return result;
}

//----- (00074FE1) --------------------------------------------------------
signed int sub_74FE1(int16_t a1)
{
	signed int v2; // [esp+0h] [ebp-4h]

	if (a1 == x_WORD_E1276)
		v2 = 2;
	else
		v2 = *(x_BYTE *)(x_DWORD_E12AE[a1] + 2) && !*(x_BYTE *)(x_DWORD_E12AE[a1] + 49);
	return v2;
}

//----- (00075044) --------------------------------------------------------
int sub_75044(unsigned int a1)//256044
{
	/* fix it
  char v2; // [esp+0h] [ebp-7Ch]
  int v3; // [esp+10h] [ebp-6Ch]
  int v4; // [esp+1Ch] [ebp-60h]
  int16_t v5; // [esp+22h] [ebp-5Ah]
  int16_t v6; // [esp+24h] [ebp-58h]
  int v7; // [esp+34h] [ebp-48h]
  int v8; // [esp+38h] [ebp-44h]
  char *v9; // [esp+48h] [ebp-34h]
  char v10; // [esp+50h] [ebp-2Ch]
  int v11; // [esp+68h] [ebp-14h]
  char v12; // [esp+6Ch] [ebp-10h]
  int v13; // [esp+78h] [ebp-4h]

  //fix it
  v11 = 0;
  //fix it

  *(x_BYTE *)(a1 + 49) = 0;
  memset(&v2, 0, 50);
  v6 = a1 >> 4;
  v5 = a1 >> 4;
  v3 = 0;
  v4 = 256;
  memset(&v7, 0, 28);
  memset(&v10, 0, 28);
  memset(&v12, 0, 12);
  segread((SREGS*)&v12);
  v7 = 0x300;
  v8 = 0x5C;
  v9 = &v2;
  int386x(0x31, (REGS*)&v7, (REGS*)&v10, (SREGS*)&v12);//Simulate Real Mode Interrupt //mozna neco se siti, nebo klavesnici
  if ( v11 )
	v13 = -1;
  else
	v13 = 0;
  return v13;
  */
	return 1;
}

//----- (00075110) --------------------------------------------------------
HSAMPLE* sub_75110(int16_t a1, int16_t a2, int16_t a3, uint16_t a4, int16_t a5)
{
	return sub_8F100_sound_proc19(a1, a2, a3 >> 8, 127 * a4 / 0xFFFF, a5 + 100, 0, 3u);
}

//----- (00075160) --------------------------------------------------------
HSAMPLE* sub_75160(int16_t a1, int16_t a2, int16_t a3, uint16_t a4, int16_t a5)
{
	return sub_8F100_sound_proc19(a1, a2, a3 >> 8, 127 * a4 / 0xFFFF, a5 + 100, 0, 2u);
}

//----- (000751B0) --------------------------------------------------------
HSAMPLE* sub_751B0(int16_t a1, int16_t a2, int16_t a3, uint16_t a4, int16_t a5)
{
	return sub_8F100_sound_proc19(a1, a2, a3 >> 8, 127 * a4 / 0xFFFF, a5 + 100, 0, 1u);
}

int debugcounter_258350 = 0;
//----- (00075200) --------------------------------------------------------
long oldmillis=0;
void sub_75200_VGA_Blit640(Bit16u height)//256200
{
	if (!x_BYTE_E3766)
		sub_8CACD_draw_cursor2();//26dacd

	VGA_Blit(640, height, x_DWORD_180628b_screen_buffer);

	//set speed
	long actmillis=mygetthousandths();
	long newdelay = speedGame -(actmillis - oldmillis);//max millis is 20 millis
	if (newdelay < 0)newdelay = 0;
	if (newdelay > speedGame)newdelay = speedGame;
	mydelay(newdelay);//set speed
	oldmillis = actmillis;
	//set speed
}

void VGA_BlitAny()//256200
{
	if (!x_BYTE_E3766)
		sub_8CACD_draw_cursor2();
	VGA_Blit(alt_resolution_width, alt_resolution_height, x_DWORD_180628b_screen_buffer);

	//set speed
	long actmillis = mygetthousandths();
	long newdelay = speedGame - (actmillis - oldmillis);//max millis is 20 millis
	if (newdelay < 0)newdelay = 0;
	if (newdelay > speedGame)newdelay = speedGame;
	mydelay(newdelay);//set speed
	oldmillis = actmillis;
	//set speed	
}

//----- (000752C0) --------------------------------------------------------
//#error "753C1: positive sp value has been found (funcsize=79)"
void sub_752C0()//2562c0
{

	/*
	sub_752C0	proc near; DATA XREF : sub_753D0 + 25o
	pusha
	push	ds
	push	es
	push	fs
	push	gs
	mov	ebp, esp
	cld
	call	__GETDS
	mov	edx, 60h; '`'
	sub	eax, eax
	in	al, dx; 8042 keyboard	controller data	register
	*/
	//zavolat klavesnici
	int result;
	Bit8u byte_17D436 = 0;
	do {
		result = sub_9A10A_check_keyboard();
		if (result)
		{
			Bit32u getKey = VGA_read_char_from_buffer();
			Bit16u getKeychar = getKey;
			bool getKeyPressed = (getKey & 0x10000) >> 16;
			//0x1370
			x_BYTE_1806E4 = (getKeychar & 0xff00) >> 8;// VGA_read_char_from_buffer();
			if (getKeyPressed)
			{
				x_BYTE_180664[x_BYTE_1806E4 & 0x7F] = x_BYTE_1806E4;
			}
			else
			{
				x_BYTE_180664[x_BYTE_1806E4 & 0x7F] = 0;
			}
		}
	} while (result);

	/*while (1)
	{
		result = sub_9A10A_check_keyboard();//adress 25d101
		//'a' - 1e61
		//'b' - 3062
		//'UP' - 4800
		//'0' - 5230
		//'ENTER' - 1c0d
		if (!result)
			break;
		//BYTE1(result) = 0;
		result = VGA_read_char_from_buffer();
		// fix - __asm { int     16h; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY }
		x_BYTE_17DF11_last_key_status = result;
		v3 = result >> 8;
		x_BYTE_17DF10_get_key_scancode = v3;
	}*/
	return;
	//al=e0
	//x_BYTE_1806E4=al
	//3516e4==0
	//cmp with al



	int al = 0x19;
	int ah = 0;
	int cl = 0;
	Bit8u byte_17D437=0;
	Bit8u byte_D4194 = 0;

	x_BYTE_1806E4 = al;
	if (byte_17D436 == 0xE0) goto loc_7530A;
	if (x_BYTE_1806E4 == 0x2A) goto loc_752F7;
	if (x_BYTE_1806E4 == 0xAA) goto loc_7530A;

loc_752F7:
	byte_17D436 = x_BYTE_1806E4;
	x_BYTE_1806E4 = 0x80;
	goto loc_75339;
loc_7530A:
	byte_17D436 = x_BYTE_1806E4;
	/*al = x_BYTE_1806E4;
	al &= 0x7F;
	ah = 0;*/
	if (x_BYTE_1806E4 <= 0x7F) goto loc_75331;
	//cwde // fix
	cl = 0;
	x_BYTE_180664[x_BYTE_1806E4 & 0x7F]=cl;
	goto loc_75339;

	loc_75331:
	//cwde //fix
	x_BYTE_180664[x_BYTE_1806E4 & 0x7F] = 1;

loc_75339:
	/*mov	edx, 61h; 'a'
	sub	eax, eax
	in	al, dx;

	mov	ebx, eax
	or al, 80h
	out	dx, al; PC / XT	PPI port B bits :
		  
	mov	al, bl
	out	dx, al; PC / XT	PPI port B bits :
*/
	if (x_BYTE_1806E4 == 0x80) goto loc_75365;
	if (byte_17D437 == 0) goto loc_75365;
	byte_17D437 = x_BYTE_1806E4;

loc_75365:
	if (x_BYTE_1806E4 == 0x0) goto loc_75391;
	if (x_D41A0_BYTEARRAY_4_struct.dwordindex_16 & 0x80)goto  loc_75391;
	sub_727F0(0, 0x3f, 0, 0);
	byte_D4194 = 1;

loc_75391:
	if (byte_D4194 == 0)goto loc_753B2;
			  /*xor	eax, eax
			  mov	ax, word_17D434
			  push	eax
			  mov	edx, dword_17D430
			  push	edx
			  call	near ptr _chain_intr
			  add	esp, 8*/

loc_753B2: {}
			  /*mov	al, 20h; ' '
			  mov	edx, 20h; ' '
			  out	dx, al; Interrupt controller, 8259A.*/
}

//----- (000753D0) --------------------------------------------------------
void sub_753D0()
{
	int16_t v0; // ax
	int v1; // edx
	//void (*v2)(); // eax
	int16_t v3; // dx

	//fix it
	v3 = 0;
	//v2 = 0;
	//fix it

	v0 = 0;
	while (v0 < 128)
	{
		v1 = v0++;
		x_BYTE_180664[v1] = 0;
	}
	//v2 = dos_getvect(9);
	//x_WORD_17D434 = v3;
	//x_DWORD_17D430 = v2;
	//dos_setvect(9, sub_752C0, 0);
	//return 0;//fix it
}

//----- (00075420) --------------------------------------------------------
/*int sub_75420()//256420
{
	return dos_setvect(9, x_DWORD_17D430, (uint16_t)x_WORD_17D434);
}*/

//----- (00075440) --------------------------------------------------------
int sub_75440()
{
	signed int v0; // ebx
	int v1; // esi

	v0 = 96;
	do
	{
		v1 = v0 << 8;
		LOWORD(v1) = ((x_WORD)v0 << 8) | 0x7F;
		memset(unk_17D6D4ar, 0, 50);
		*(Bit32s*)&unk_17D6D4ar[0x1c] = v1;
		*(Bit32s*)&unk_17D6D4ar[0x10] = 0;
		*(Bit32s*)&unk_17D6D4ar[0x18] = 0;
		*(Bit32s*)&unk_17D6D4ar[0x14] = 0;
		//sub_75AE0((int)unk_17D6D4ar);
		if ((v0 | 0x7F00) == *(Bit32s*)&unk_17D6D4ar[0x1c])
			return v1 & 0xFF00;
		++v0;
	} while (v0 <= 112);
	return 0;
}

//----- (000754C0) --------------------------------------------------------
int sub_754C0(int a1, x_DWORD *a2, int a3)
{
	int v3; // eax
	int v4; // ecx
	int i; // eax

	memset(unk_17D6D4ar, 0, 50);
	v3 = a1;
	LOBYTE(v3) = a1 | 3;
	*(Bit32s*)&unk_17D6D4ar[0x18] = 0;
	*(Bit32s*)&unk_17D6D4ar[0x1c] = v3;
	*(Bit32s*)&unk_17D6D4ar[0x14] = 0;
	*(Bit16s*)&unk_17D6D4ar[0x22] = *(Bit16s*)&unk_17D6D4ar[0x1c];
	//sub_75AE0((int)unk_17D6D4ar);
	v4 = x_DWORD_17D6C8;
	for (i = 0; i < *(Bit32s*)&unk_17D6D4ar[0x18]; *(x_BYTE *)(a3 + i - 1) = *(x_BYTE *)(v4 + i - 1))
		++i;
	*a2 = *(Bit32s*)&unk_17D6D4ar[0x18];
	return *(Bit32s*)&unk_17D6D4ar[0x1c];
}

//----- (00075540) --------------------------------------------------------
int sub_75540(int a1, int a2)
{
	int v2; // ecx
	signed int v3; // eax
	int v4; // eax

	v2 = x_DWORD_17D6C8;
	v3 = 0;
	do
	{
		++v3;
		*(x_BYTE *)(v2 + v3 - 1) = *(x_BYTE *)(a2 + v3 - 1);
	} while (v3 < 256);
	memset(unk_17D6D4ar, 0, 50);
	v4 = a1;
	LOBYTE(v4) = a1 | 4;
	*(Bit32s*)&unk_17D6D4ar[0x18] = 0;
	*(Bit32s*)&unk_17D6D4ar[0x1c] = v4;
	*(Bit32s*)&unk_17D6D4ar[0x14] = 0;
	*(Bit16s*)&unk_17D6D4ar[0x22] = *(Bit16s*)&unk_17D6D4ar[0x1c];
	//sub_75AE0((int)unk_17D6D4ar);
	return *(Bit32s*)&unk_17D6D4ar[0x1c];
}

//----- (000755B0) --------------------------------------------------------
int sub_755B0(int a1, x_DWORD *a2, int a3)
{
	int v3; // eax
	int v4; // ecx
	int i; // eax

	memset(unk_17D6D4ar, 0, 50);
	v3 = a1;
	LOBYTE(v3) = a1 | 5;
	*(Bit32s*)&unk_17D6D4ar[0x18] = 0;
	*(Bit32s*)&unk_17D6D4ar[0x1c] = v3;
	*(Bit32s*)&unk_17D6D4ar[0x14] = 0;
	*(Bit16s*)&unk_17D6D4ar[0x22] = *(Bit16s*)&unk_17D6D4ar[0x1c];
	//sub_75AE0((int)unk_17D6D4ar);
	v4 = x_DWORD_17D6C8;
	for (i = 0; i < *(Bit32s*)&unk_17D6D4ar[0x18]; *(x_BYTE *)(a3 + i - 1) = *(x_BYTE *)(v4 + i - 1))
		++i;
	*a2 = *(Bit32s*)&unk_17D6D4ar[0x18];
	return *(Bit32s*)&unk_17D6D4ar[0x1c];
}

//----- (00075650) --------------------------------------------------------
signed int sub_75650()//VR something
{
	signed int result; // eax
	char* v1; // eax
	signed int v2; // eax
	int v3; // eax
	char v4; // [esp+0h] [ebp-4h]

   //fix it
	v1 = 0;
	//fix it

	memset(x_WORD_17D6CCar, 0, 6);
	memset(x_WORD_17D70Aar, 0, 7);
	x_DWORD_17D6C8 = sub_75B80_alloc_mem_block(256, (Bit16s*)&unk_17D6D4ar[0x1c], (Bit16s*)&unk_17D6D4ar[0x32]);
	if (!x_DWORD_17D6C8)
		return 0;
	//_dupenv_s((char**)v1,(size_t*)sizeof(v1), "VIPPORT");
	v1 = mygetenv("VIPPORT");
	if (v1)
	{
		v2 = sub_99FF0(v1, (uint8_t **)&v4, 16);
		x_DWORD_17D6B0 = v2;
		x_DWORD_17D6A0 = v2 + 1;
		v3 = sub_75440();
		x_DWORD_17D640 = v3;
		if (v3)
		{
			// FIXME: types
			// // if (sub_754C0(v3, &x_DWORD_17D648, (int)x_BYTE_17D440))
			// {
			// 	sub_75AB0();
			// 	result = 0;
			// }
			// else
			// {
			// 	x_DWORD_17D644 = 0;
			// 	x_DWORD_17D6A8 = 0;
			// 	x_DWORD_17D698 = 0;
			// 	// FIXME: types
			// 	// x_DWORD_17D6AC = (int)&unk_17D540;
			// 	while (x_DWORD_17D698 < x_DWORD_17D648)
			// 	{
			// 		x_DWORD_17D6A4 = x_BYTE_17D440[x_DWORD_17D698];
			// 		if ((uint8_t)x_BYTE_17D440[1 + x_DWORD_17D698] <= 7u)
			// 			;//fix it JUMPOUT(__CS__, (int*) * (&off_75628 + (uint8_t)x_BYTE_17D440[1 + x_DWORD_17D698]));
			// 		x_DWORD_17D698 += x_DWORD_17D6A4;
			// 	}
			// 	// FIXME: types
			// 	// // if (sub_75540(x_DWORD_17D640, (int)x_BYTE_17D440))
			// 	// {
			// 	// 	sub_75AB0();
			// 	// 	result = 0;
			// 	// }
			// 	// else
			// 	// {
			// 	// 	if (x_DWORD_17D6A8)
			// 	// 		x_BYTE_E12EC = 1;
			// 	// 	if (x_DWORD_17D644)
			// 	// 		x_BYTE_E12ED = 1;
			// 	// 	result = 1;
			// 	// }
			// }
		}
		else
		{
			sub_75AB0();
			result = 0;
		}
	}
	else
	{
		x_DWORD_17D6B0 = 768;
		sub_75AB0();
		result = 0;
	}
	return result;
}

//----- (00075900) --------------------------------------------------------
void sub_75900()
{
	sub_75AB0();
}

//----- (00075910) --------------------------------------------------------
signed int sub_75910()
{
	signed int result; // eax
	uint16_t v1; // ax
	uint8_t v2; // al

	// FIXME: types
	// // if (sub_755B0(x_DWORD_17D640, &x_DWORD_17D648, (int)&unk_17D540))
	// {
	// 	sub_75AB0();
	// 	result = 0;
	// }
	// else
	// {
	// 	if (x_BYTE_E12EC)
	// 	{
	// 		//__GS__ = *(x_WORD *)&x_BYTE_17D674[4];
	// 		x_WORD_17D6CCar[0] = __readgsx_WORD(*(unsigned int *)x_BYTE_17D674);
	// 		v1 = __readgsx_WORD(*(x_DWORD *)x_BYTE_17D674 + 4);
	// 		x_WORD_17D6CCar[1] = __readgsx_WORD(*(x_DWORD *)x_BYTE_17D674 + 2);
	// 		x_WORD_17D6CCar[2] = v1;
	// 	}
	// 	if (x_BYTE_E12ED)
	// 	{
	// 		//__GS__ = *(x_WORD *)&x_BYTE_17D650[4];
	// 		*(Bit16s*)&x_WORD_17D70Aar[0] = __readgsx_WORD(*(unsigned int *)x_BYTE_17D650);
	// 		*(Bit16s*)&x_WORD_17D70Aar[2] = __readgsx_WORD(*(x_DWORD *)x_BYTE_17D650 + 2);
	// 		v2 = __readgsx_BYTE(*(x_DWORD *)x_BYTE_17D650 + 6);
	// 		*(Bit16s*)&x_WORD_17D70Aar[4] = __readgsx_WORD(*(x_DWORD *)x_BYTE_17D650 + 4);
	// 		x_WORD_17D70Aar[6] = v2;
	// 	}
	// 	result = 1;
	// }
	return result;
}

//----- (000759B0) --------------------------------------------------------
void sub_759B0_set_mouse_minmax_vert()
{
	//int result; // eax
	int16_t v1; // [esp+0h] [ebp-1Ch]
	uint16_t v2; // [esp+4h] [ebp-18h]

	if (x_BYTE_E12EC)
	{
		memset(&v1, 0, 28);
		v1 = 0x6008;
		v2 = bswap_16(*(x_WORD *)(x_DWORD_17D6C4 + 2));
		//result = int386(0x33, (REGS*)&v1, (REGS*)&v1);//set mouse minmax vertical
	}
	//return result;
}

//----- (00075A10) --------------------------------------------------------
uint8_t sub_75A10(int a1, uint8_t *a2)//256a10 // fix
{
	uint8_t v2; // al
	uint8_t *v3; // ebx
	char v4; // dl
	uint8_t v5; // al
	signed int v6; // ecx
	uint8_t v7; // al
	uint8_t *v8; // ebx
	uint8_t v9; // al
	uint8_t result; // al

	v2 = 0;//fix

	/*__outx_BYTE(x_DWORD_17D6B0, 7u);
	__outx_BYTE(x_DWORD_17D6A0, 0xFFu);
	__outx_BYTE(x_DWORD_17D6B0, 6u);
	v2 = __inx_BYTE(x_DWORD_17D6A0);*/
	v3 = a2;
	v4 = v2 & 0xF8;
	if (a1)
	{
		if (a1 == 1)
			v5 = v4 | 1;
		else
			v5 = (v2 | 4) & 0xFE;
	}
	else
	{
		v5 = v4 | 3;
	}
	/*__outx_BYTE(x_DWORD_17D6A0, v5);
	__outx_BYTE(x_DWORD_17D6B0, 9u);
	__outx_BYTE(x_DWORD_17D6A0, 0);*/
	v6 = 0;
	//__outx_BYTE(x_DWORD_17D6B0, 0xAu);
	do
	{
		v7 = *v3;
		v8 = v3 + 1;
		//__outx_BYTE(x_DWORD_17D6A0, v7);
		v9 = *v8++;
		//__outx_BYTE(x_DWORD_17D6A0, v9);
		++v6;
		result = *v8;
		v3 = v8 + 1;
		//__outx_BYTE(x_DWORD_17D6A0, result);
	} while (v6 < 256);
	return result;
}

//----- (00075AB0) --------------------------------------------------------
void sub_75AB0()
{
	//int result; // eax

	if (x_DWORD_17D6C8)
	{
		/*result = */sub_75B50(*(Bit16s*)&unk_17D6D4ar[0x32]);
		x_DWORD_17D6C8 = 0;
	}
	//return result;
}

//----- (00075AE0) --------------------------------------------------------
/*void sub_75AE0(int a1)
{
	int v2; // [esp+0h] [ebp-28h]
	int v3; // [esp+4h] [ebp-24h]
	int v4; // [esp+8h] [ebp-20h]
	int v5; // [esp+14h] [ebp-14h]
	//int16_t v6; // [esp+1Ch] [ebp-Ch]

	memset(&v6, 0, 12);
	memset(&v2, 0, 28);
	v4 = 0;
	v5 = a1;
	v2 = 0x300;
	v3 = 0x33;
	//v6 = __DS__;
	//return int386x(0x31, (REGS*)&v2, (REGS*)&v2, (SREGS*)&v6);//mozna neco s mysi
}*/

//----- (00075B50) --------------------------------------------------------
void sub_75B50(int16_t a1)
{
	int v2; // [esp+0h] [ebp-1Ch]
	int v3; // [esp+Ch] [ebp-10h]

	v3 = a1;
	v2 = 0x101;
	//return int386(0x31, (REGS*)&v2, (REGS*)&v2);//free memory block
}

//----- (00075B80) --------------------------------------------------------
int sub_75B80_alloc_mem_block(int a1, x_WORD *a2, x_WORD *a3)
{
	int v3; // ebx
	int v5; // [esp+0h] [ebp-28h]
	unsigned int v6; // [esp+4h] [ebp-24h]
	int v7; // [esp+Ch] [ebp-1Ch]
	int v8; // [esp+18h] [ebp-10h]
	//char v9; // [esp+1Ch] [ebp-Ch]

	//fix it
	v7 = 0;
	v8 = 0;
	//fix it

	*a2 = 0;
	*a3 = 0;
	//segread((SREGS*)&v9);
	v3 = 0;
	v6 = (unsigned int)(a1 + 15) >> 4;
	v5 = 0x100;
	//int386(0x31, (REGS*)&v5, (REGS*)&v5);//allocate memory block
	if (!v8)
	{
		*a2 = v5;
		*a3 = v7;
		v3 = 16 * (int16_t)*a2;
	}
	return v3;
}

//----- (00075C50) --------------------------------------------------------
void sub_75C50()//fix
{
	/* __outx_BYTE(0x302u, 2u);
	 __outx_BYTE(0x303u, 1u);*/
	memset((void*)x_DWORD_180628b_screen_buffer, 0, x_DWORD_180624_resolution_y * x_DWORD_18062C_resolution_x);
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_90478_VGA_Blit320();
	else
		sub_75200_VGA_Blit640(480);
}

//----- (00075CB0) --------------------------------------------------------
void sub_75CB0()//256cb0
{
	if (x_WORD_E12FE && sub_473E0())
	{
		x_WORD_17DB5A = 1;
	}
	else if (x_WORD_17DB5C && (x_BYTE_1806E4 || x_WORD_180746_mouse_left_button || x_WORD_180744_mouse_right_button))
	{
		x_WORD_17DB5A = 1;
	}
	else
	{
		while (x_DWORD_17DB54_game_turn2 < x_DWORD_E3844)
		{
			if (x_WORD_E12FE && sub_473E0())
			{
				x_WORD_17DB5A = 1;
				return;
			}
			if (x_WORD_17DB5C && (x_BYTE_1806E4 || x_WORD_180746_mouse_left_button || x_WORD_180744_mouse_right_button))
			{
				x_WORD_17DB5A = 1;
				return;
			}
		}
		x_DWORD_17DB54_game_turn2 = 0;
	}
}

//----- (00075D70) --------------------------------------------------------
void sub_75D70(Bit8u* a1, Bit32u a2)//256d70
{
	//unsigned int result; // eax

	if (a1)
	{
		//result = a2;
		qmemcpy(a1, (void *)x_DWORD_17DB50, a2);
		//qmemcpy(a1+a2, (void *)(x_DWORD_17DB50+a2), a2&3);
	}
	x_DWORD_17DB50 += a2;
	//return result;
}

//----- (00075DB0) --------------------------------------------------------
void sub_75DB0()//256db0
{
	//int result; // eax

	x_DWORD_17D730 = x_DWORD_E1300;
	sub_988A7_read(x_DWORD_17DB38_intro_file_handle, (Bit8u*)x_DWORD_17D720, 16);
	x_WORD_17D724 = x_DWORD_17D720[1] & 0xffff;
	x_WORD_17D726 = (x_DWORD_17D720[1] & 0xffff0000) >> 16;
	while (x_WORD_17D724 != 0xf1fa/*-3590*/)
		myprintf("ERROR UNKNOWN FRAME TYPE\n");
	sub_988A7_read(x_DWORD_17DB38_intro_file_handle, x_DWORD_E9C38_smalltit, x_DWORD_17D720[0] - 16);
	//result = x_DWORD_17D720[0];
	x_DWORD_E1300 += x_DWORD_17D720[0];
	//return result;
}

//----- (00075E70) --------------------------------------------------------
void /*__fastcall*/ sub_75E70()//256e70
{
	//int v1; // eax
	unsigned int v2; // ebx
	char *v3; // esi
	char *v4; // edi
	char v5; // al
	char v6; // al
	char *v7; // esi
	char *v8; // esi
	char *v9; // edi
	char v10; // al
	char v11; // al
	char *v12; // esi
	char *v13; // edi
	char v14; // al
	char v15; // al
	char *v16; // edi
	char v17; // al
	char v18; // al
	char v19; // al
	Bit8u v20x[6]; // [esp+0h] [ebp-10h]
	Bit32u v20y; // [esp+0h] [ebp-10h]
	int v21; // [esp+4h] [ebp-Ch]
	Bit8u* v22; // [esp+8h] [ebp-8h]
	char v23; // [esp+Ch] [ebp-4h]

	//fix it
	v21 = 0;
	x_DWORD_17DB54_game_turn2 = 0x40;
	//fix it

	//HIBYTE(a1) = 0;
	v23 = 0;
	x_DWORD_17DB50 = x_DWORD_E9C38_smalltit;
	x_BYTE_17D738[0] = 0;
	if (x_WORD_17D724 == 0xf100)
	{
		sub_75D70(0, x_DWORD_17D720[0] - 16);
		/*v1 = */sub_75DB0();
		/*a1 = 0;*/sub_75E70(/*v1*/);
	}
	else if (x_WORD_17D724 == 0xF1FA)
	{
		v2 = 0;
		while (1)
		{
			//a1 = x_WORD_17D726;
			if (v2 >= x_WORD_17D726)
				break;
			v22 = x_DWORD_17DB50;
			sub_75D70(v20x, 6u);
			v20y = *(Bit32u*)&v20x;
			switch (*(Bit16u*)(&v20x[4]))//4? b
			{
			case 4:
				v3 = (char*)"COLOUR256 ";
				sub_76260_read_intro_pallette(0x100);
				v4 = &x_BYTE_17D738[strlen(x_BYTE_17D738)];
				do
				{
					v5 = v3[0];
					v4[0] = v3[0];
					if (!v5)
						break;
					v6 = v3[1];
					v3 += 2;
					v4[1] = v6;
					v4 += 2;
				} while (v6);
				v23 = 1;
				break;
			case 7:
				v7 = (char*)"SS2 ";
				sub_76300();//257300 - uz by mel byt vykreslen text
				goto LABEL_23;
			case 0xB:
				sub_76260_read_intro_pallette(0x40);
				v8 = (char*)"COLOUR ";
				v9 = &x_BYTE_17D738[strlen(x_BYTE_17D738)];
				do
				{
					v10 = *v8;
					*v9 = *v8;
					if (!v10)
						break;
					v11 = v8[1];
					v8 += 2;
					v9[1] = v11;
					v9 += 2;
				} while (v11);
				v23 = 1;
				break;
			case 0xC:
				v7 = (char*)"LC ";
				sub_76430();
				goto LABEL_23;
			case 0xD:
				memset((void*)x_DWORD_E12F4, 0, x_WORD_17DB48 * x_WORD_17DB4A);
				v7 = (char*)"BLACK ";
				goto LABEL_23;
			case 0xF:
				v7 = (char*)"BRUN ";//ok
				sub_76540();//257540
				goto LABEL_23;
			case 0x10:
				sub_75D70(x_DWORD_E12F4, x_WORD_17DB4A * x_WORD_17DB48);
				v12 = (char*)"COPY ";
				v13 = &x_BYTE_17D738[strlen(x_BYTE_17D738)];
				do
				{
					v14 = *v12;
					*v13 = *v12;
					if (!v14)
						break;
					v15 = v12[1];
					v12 += 2;
					v13[1] = v15;
					v13 += 2;
				} while (v15);
				v20y = x_WORD_17DB4A * x_WORD_17DB48;
				break;
			case 0x12:
				sub_75D70(0, v20y - 6);
				v7 = (char*)"PSTAMP ";
			LABEL_23:
				v16 = &x_BYTE_17D738[strlen(x_BYTE_17D738)];
				do
				{
					v17 = v7[0];
					v16[0] = v7[0];
					if (!v17)
						break;
					v18 = v7[1];
					v7 += 2;
					v16[1] = v18;
					v16 += 2;
				} while (v18);
				break;
			default:
				break;
			}
			v2++;
			x_DWORD_17DB50 = v20y + v22;
		}
	}
	if (x_DWORD_17DB3C)
		x_DWORD_17DB3C();
	sub_75CB0();//256cb0
	if (v23)
	{
		sub_9A0FC_wait_to_screen_beam();//27b0fc
		if (x_WORD_E12FC)
		{
			/*Bit8u origbyte = 0;
			Bit8u remakebyte = 0;
			long compar = compare_with_snapshot((char*)"0160-00256E70", unk_17D838, 0x34e838, 0x300, &origbyte, &remakebyte);
			*/

			sub_41A90_VGA_pallette_install(unk_17D838);
			v19 = sub_5BE80_test_pallette(unk_17D838, 0x3Fu, 0x3Fu, 0x3Fu);
			sub_2EC90(v19);//20fc90 -zde se prekresli texty
		}
	}
	int tempSpeed= speedGame;
	speedGame = speedAnim;
	if (x_BYTE_D41C1)
	{
		x_DWORD_180628b_screen_buffer += 0x26C0;
		sub_90478_VGA_Blit320();
		x_DWORD_180628b_screen_buffer -= 0x26C0;
	}
	else
	{
		sub_90478_VGA_Blit320();		
	}
	speedGame = tempSpeed;
}

//----- (00076260) --------------------------------------------------------
void sub_76260_read_intro_pallette(Bit8u a1)
{
	Bit8u* v0; // ebx
	int v1; // esi
	//unsigned int result; // eax
	uint16_t v3; // di
	Bit16u v4; // [esp+0h] [ebp-Ch]
	Bit32s v5; // [esp+4h] [ebp-8h]
	uint8_t v6; // [esp+8h] [ebp-4h]

	v0 = unk_17D838;
	v1 = 0;
	/*result = */sub_75D70((Bit8u*)&v4, 2u);
	if (v4 > 0u)
	{
		do
		{
			sub_75D70(&v6, 1u);
			v0 += 3 * v6;
			v5 = 0;
			/*result = */sub_75D70((Bit8u*)&v5, 1u);
			if (!v5)
				v5 = 256;
			for (v3 = 0; v3 < v5;v3++)//mybe read pallette
			{
				sub_75D70(v0, 3u);
				v0 += 3;
			}
			v1++;
		} while (v1 < v4);
	}
	//return result;
}

//----- (00076300) --------------------------------------------------------
void sub_76300()//257300
{
	Bit32s v0; // edi
	//Bit16s result; // ax
	Bit8u* v2; // esi
	Bit8u* v3; // ebx
	Bit16u v4; // cx
	Bit16u v5; // [esp+0h] [ebp-1Ch]
	//int v6; // [esp+4h] [ebp-18h]
	Bit32s i; // [esp+8h] [ebp-14h]
	Bit16s v8; // [esp+Ch] [ebp-10h]
	Bit16s v9; // [esp+10h] [ebp-Ch]
	Bit8s v10; // [esp+14h] [ebp-8h]
	Bit8u v11; // [esp+18h] [ebp-4h]

	  /*
	  int v0; // edi
	int16_t result; // ax
	Bit8u* v2; // esi
	Bit8u* v3; // ebx
	uint16_t v4; // cx
	Bit16s v5; // [esp+0h] [ebp-1Ch]
	//int v6; // [esp+4h] [ebp-18h]
	int i; // [esp+8h] [ebp-14h]
	Bit16s v8; // [esp+Ch] [ebp-10h]
	Bit16s v9; // [esp+10h] [ebp-Ch]
	Bit8s v10; // [esp+14h] [ebp-8h]
	Bit8s v11; // [esp+18h] [ebp-4h]
	*/

	v0 = 0;
	/*result = */sub_75D70((Bit8u*)&v5, 2u);
	v2 = x_DWORD_E12F4;//2b22f4
	if (v5 > 0u)
	{
		do
		{
			v3 = v2;
			sub_75D70((Bit8u*)&v9, 2u);
			if ((v9 & 0x8000) == 0)
			{
				//v6 = v9;
				for (i = 0; i < v9; i++)
				{
					sub_75D70((Bit8u*)&v11, 1u);
					v3 += v11;
					sub_75D70((Bit8u*)&v10, 1u);
					if (v10 >= 0)
					{
						if (v10 > 0)
						{
							sub_75D70((Bit8u*)v3, 2 * v10);
							v3 += 2 * v10;
						}
					}
					else
					{
						sub_75D70((Bit8u*)&v8, 2u);
						v4 = 0;
						while (abs(v10) > v4)
						{
							v3 += 2;
							v4++;
							*((Bit16s*)v3 - 1) = v8;
						}
					}
				}
			}
			else if (v9 & 0x4000)
			{
				v0--;
				v2 += x_WORD_17DB48 * (abs(v9) - 1);
			}
			else
			{
				*(x_BYTE *)(v2 + x_WORD_17DB48 - 1) = v9;
			}
			//result = x_WORD_17DB48;
			v0++;
			v2 += x_WORD_17DB48;
		} while (v0 < v5);
	}
	//return result;
}

//----- (00076430) --------------------------------------------------------
int sub_76430()
{
	Bit8u* v0; // edi
	int result; // eax
	char *v2; // ebx
	uint16_t v3; // si
	int v4; // eax
	int v5; // [esp+0h] [ebp-18h]
	uint16_t v6; // [esp+4h] [ebp-14h]
	uint8_t v7; // [esp+8h] [ebp-10h]
	char v8; // [esp+Ch] [ebp-Ch]
	uint8_t v9; // [esp+10h] [ebp-8h]
	uint8_t v10; // [esp+14h] [ebp-4h]

	sub_75D70((Bit8u*)&v6, 2u);
	v0 = x_WORD_17DB48 * v6 + x_DWORD_E12F4;
	sub_75D70((Bit8u*)&v6, 2u);
	v5 = 0;
	result = 0;
	if (v6 > 0u)
	{
		do
		{
			v2 = (char *)v0;
			v3 = 0;
			sub_75D70((Bit8u*)&v9, 1u);
			while (v3 < (signed int)v9)
			{
				sub_75D70((Bit8u*)&v7, 1u);
				v2 += v7;
				sub_75D70((Bit8u*)&v8, 1u);
				if (v8 >= 0)
				{
					if (v8 <= 0)
						goto LABEL_8;
					sub_75D70((Bit8u*)v2, v8);
					v4 = v8;
				}
				else
				{
					sub_75D70((Bit8u*)&v10, 1u);
					memset(v2, v10, abs(v8));
					v4 = abs(v8);
				}
				v2 += v4;
			LABEL_8:
				++v3;
			}
			++v5;
			v0 += (uint16_t)x_WORD_17DB48;
			result = v5;
		} while ((uint16_t)v5 < v6);
	}
	return result;
}

//----- (00076540) --------------------------------------------------------
int sub_76540()//257540
{
	Bit8u* v0; // esi
	char *v1; // ebx
	uint16_t v2; // di
	int result; // eax
	int v4; // [esp+0h] [ebp-Ch]
	uint8_t v5; // [esp+4h] [ebp-8h]
	char v6; // [esp+8h] [ebp-4h]

	v0 = x_DWORD_E12F4;
	v4 = 0;
	while (1)
	{
		result = v4;
		if (v4 >= x_WORD_17DB4A)
			break;
		v1 = (char *)v0;
		v2 = 0;
		sub_75D70(0, 1u);
		while (v2 < x_WORD_17DB48)
		{
			sub_75D70((Bit8u*)&v6, 1u);
			if (v6 >= 0)
			{
				if (v6 > 0)
				{
					sub_75D70((Bit8u*)&v5, 1u);
					memset(v1, v5, v6);
				}
			}
			else
			{
				v6 = abs(v6);
				sub_75D70((Bit8u*)v1, v6);
			}
			v2 += v6;
			v1 += v6;
		}
		++v4;
		v0 += x_WORD_17DB48;
	}
	return result;
}

//----- (000765FC) --------------------------------------------------------
void sub_765FC(int16_t a1, int16_t a2)
{
	x_WORD_E130E = a1;
	x_WORD_E1310 = a2;
}

//----- (00076619) --------------------------------------------------------
int sub_76619(int a1, int a2)//animate sprite
{
	x_DWORD_E1308 = a1;
	x_DWORD_E1304 = a2;
	while (1)
	{
		qmemcpy(x_WORD_E1312ar, (void *)x_DWORD_E1308, 4u);
		x_DWORD_E1308 += 4;
		qmemcpy(&x_WORD_E130C, (void *)x_DWORD_E1308, sizeof(x_WORD_E130C));
		x_DWORD_E1308 += 2;
		if (x_WORD_E130C != -20718)
			break;
		sub_76752();
	}
	if (x_WORD_E130C != -3590)
		return 0;
	sub_766A4();
	return x_DWORD_E1308;
}

//----- (000766A4) --------------------------------------------------------
void sub_766A4()//animate sprite
{
	int16_t result; // ax

	qmemcpy(&x_WORD_E1316, (void *)x_DWORD_E1308, sizeof(x_WORD_E1316));
	x_DWORD_E1308 += 2;
	x_DWORD_E1308 += 8;
	while (x_WORD_E1316)
	{
		--x_WORD_E1316;
		qmemcpy(x_WORD_E1312ar, (void *)x_DWORD_E1308, 4u);
		x_DWORD_E1308 += 4;
		qmemcpy(&x_WORD_E130C, (void *)x_DWORD_E1308, sizeof(x_WORD_E130C));
		x_DWORD_E1308 += 2;
		switch (x_WORD_E130C)
		{
		case 7:
			result = sub_7678D();
			break;
		case 4:
			result = sub_7677C();
			break;
		case 15:
			result = sub_76840();
			break;
		default:
			result = sub_7677C();
			break;
		}
	}
	//return result;
}

//----- (00076752) --------------------------------------------------------
int16_t sub_76752()
{
	int16_t result; // ax

	x_WORD_E130E = *(x_WORD *)(x_DWORD_E1308 + 2);
	result = *(x_WORD *)(x_DWORD_E1308 + 4);
	x_WORD_E1310 = *(x_WORD *)(x_DWORD_E1308 + 4);
	x_DWORD_E1308 += 6;
	return result;
}

//----- (0007677C) --------------------------------------------------------
int sub_7677C()
{
	int result; // eax

	result = (uint16_t)x_WORD_E1312ar[0] - 6;
	x_DWORD_E1308 += result;
	return result;
}

//----- (0007678D) --------------------------------------------------------
int16_t sub_7678D()//animate sprite
{
	x_WORD *v0; // edi
	x_WORD *v1; // esi
	int16_t result; // ax
	x_BYTE *v3; // edi
	x_BYTE *v4; // esi
	char v5; // dl
	x_WORD *v6; // [esp-4h] [ebp-14h]
	x_WORD *v7; // [esp+0h] [ebp-10h]
	int16_t i; // [esp+6h] [ebp-Ah]
	int16_t v9; // [esp+8h] [ebp-8h]
	int v10; // [esp+Ch] [ebp-4h]

	v10 = (uint16_t)x_WORD_E130E;
	v0 = (x_WORD *)x_DWORD_E1304;
	v1 = (x_WORD *)(x_DWORD_E1308 + 2);
	v9 = *(x_WORD *)x_DWORD_E1308;
	do
	{
		while (1)
		{
			result = *v1;
			++v1;
			v7 = v0;
			if (result >= 0)
				goto LABEL_10;
			if (!(result & 0x4000))
				break;
			v0 = (x_WORD *)((char *)v0 + v10 * -result);
		}
		v6 = v0;
		// FIXME: types
		// v3 = (char *)v0 + v10 - 1;
		if (x_BYTE_E2A20 == 1)
		{
			if ((x_BYTE)result)
				*v3 = result;
		}
		else
		{
			*v3 = result;
		}
		v0 = v6;
	LABEL_10:
		for (i = result; i; i--)
		{
			while (1)
			{
				LOBYTE(result) = *(x_BYTE *)v1;
				// FIXME: types
				// v4 = (char *)v1 + 1;
				result = (uint8_t)result;
				v0 = (x_WORD *)((char *)v0 + (uint8_t)result);
				v5 = *v4;
				v1 = (x_WORD*)(v4 + 1);
				if (v5 > 0)
					break;
				result = *v1;
				++v1;
				do
				{
					*v0 = result;
					++v0;
					++v5;
				} while (v5);
				if (!--i)
					goto LABEL_18;
			}
			do
			{
				*v0 = *v1;
				++v1;
				++v0;
				--v5;
			} while (v5);
		}
	LABEL_18:
		v0 = (x_WORD *)((char *)v7 + v10);
		--v9;
	} while (v9);
	// FIXME: types
	// x_DWORD_E1308 = (int)v1;
	return result;
}

//----- (00076840) --------------------------------------------------------
int sub_76840()
{
	x_BYTE *v0; // edi
	char *v1; // esi
	int16_t v2; // bx
	int16_t v3; // cx
	uint8_t v4; // dl
	int16_t v5; // ax
	char v6; // dh
	char v7; // dh
	int result; // eax
	int v9; // [esp-8h] [ebp-Ch]
	int v10; // [esp-4h] [ebp-8h]
	int16_t v11; // [esp+2h] [ebp-2h]

	v11 = x_WORD_E130E;
	v0 = (x_BYTE *)x_DWORD_E1304;
	v1 = (char *)x_DWORD_E1308;
	v10 = (uint16_t)x_WORD_E1312ar[0] - 6;
	v9 = x_DWORD_E1308;
	v2 = x_WORD_E1310;
	do
	{
		++v1;
		v3 = v11;
		do
		{
			v4 = *v1++;
			if ((char)v4 > 0)
			{
				v3 -= v4;
			}
			else
			{
				HIBYTE(v5) = -1;
				LOBYTE(v5) = v4;
				v3 += v5;
			}
			if ((char)v4 > 0)
			{
				v7 = *v1++;
				do
				{
					if (x_BYTE_E2A20 == 1)
					{
						if (v7)
							*v0 = v7;
					}
					else
					{
						*v0 = v7;
					}
					++v0;
					--v4;
				} while (v4);
			}
			else
			{
				do
				{
					v6 = *v1++;
					if (x_BYTE_E2A20 == 1)
					{
						if (v6)
							*v0 = v6;
					}
					else
					{
						*v0 = v6;
					}
					++v0;
					++v4;
				} while (v4);
			}
		} while (v3);
		--v2;
	} while (v2);
	result = v10;
	x_DWORD_E1308 = v10 + v9;
	return result;
}


//----- (00076F40) --------------------------------------------------------
//#error "76F96: positive sp value has been found (funcsize=32)"

void(*sub_76F40)() {
	
};


//----- (00077350) --------------------------------------------------------
char sub_77350_new_game_dialog(Bit8u* a1)//258350
{
	uint16_t v1; // bx
	char v2; // cl
	char result; // al
	uint8_t v4; // al
	uint8_t v5; // al
	//int v6; // eax
	char v7; // bl

	if (debugcounter_47560 > 0) {
		debugcounter_47560++;
		debugcounter_47560--;

		debugcounter_258350++;
	}

	v1 = 0;
	v2 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2];
	x_WORD_E29D6_not_movex = 0;
	if (v2 & 2 && x_D41A0_BYTEARRAY_4_struct.levelnumber_43w == 24)
		sub_833C0();
	memset((void*)&unk_17DBA8str, 0, 16);
	unk_17DBA8str.x_BYTE_17DBB6 = 2;
	if (x_BYTE_D419C_level_num <= -1)
	{
		x_BYTE_17E09D = 0;
		x_DWORD_17DE38str.unk_17E078x[0xb] = 16;
		x_DWORD_17DE38str.x_WORD_17E06E = 480;
		*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 13;
		x_DWORD_17DE38str.x_BYTE_17E09C = 0;
		x_DWORD_17DE38str.unk_17E078x[0xa] = 13;
		x_DWORD_17DE38str.x_WORD_17E06C = 0;
		memset((void*)&x_DWORD_17DB70str, 0, 56);
		if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 2)
			x_DWORD_17DB70str.x_BYTE_17DB8F = 4;
		else
			x_DWORD_17DB70str.x_BYTE_17DB8F = 1;
		sub_7A110_load_hscreen(x_WORD_180660_VGA_type_resolution, 6);//here init sprites
		sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]);//dword_EB394
		
		sub_7B5A0_disable_enable();
		sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);
		if (x_WORD_180660_VGA_type_resolution & 1)
		{
			v4 = sub_5BE80_test_pallette((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38, 0, 0, 0);
			sub_72883_clear_graphics_320((void *)x_DWORD_180628b_screen_buffer, 0xC8u, v4);
		}
		else
		{
			v5 = sub_5BE80_test_pallette((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38, 0, 0, 0);
			sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, v5);
		}
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_90478_VGA_Blit320();
		else
			sub_75200_VGA_Blit640(480);
		sub_41A90_VGA_pallette_install((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38);
		sub_7DD70();
		x_DWORD_17DE38str.x_WORD_17DEEC = 0;
		sub_6EDB0_set_mouse_position_by_res();
		sub_8CD27_set_cursor(xy_DWORD_17DED4_spritestr[239]);
		x_DWORD_17DB70str.x_WORD_17DB8A = x_D41A0_BYTEARRAY_4_struct.levelnumber_43w;
		while (!v1)
		{
			if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == 59)
			{
				v7 = x_D41A0_BYTEARRAY_4_struct.byteindex_10;
				x_D41A0_BYTEARRAY_4_struct.byteindex_10 = v7 != 1;
				x_DWORD_17DE38str.x_BYTE_17DF13 = v7 != 1;
				x_D41A0_BYTEARRAY_4_struct.setting_38402 = 1;
			}
			v1 = sub_7EAE0_new_game_draw(
				&x_DWORD_17DB70str.unk_17DB76_posx,
				&x_DWORD_17DB70str.unk_17DB78_posy,
				&x_DWORD_17DB70str.unk_17DB7E,
				&x_DWORD_17DB70str.unk_17DB80,
				&x_DWORD_17DB70str.x_BYTE_17DB8F,
				&x_DWORD_17DB70str.unk_17DB90);
			if (x_WORD_180660_VGA_type_resolution & 1)
				sub_90478_VGA_Blit320();
			else
				sub_75200_VGA_Blit640(480);
			sub_7A060_get_mouse_and_keyboard_events();
		}
		sub_86860_speak_Sound(x_WORD_1803EC);
		D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] = 0;
		sub_8D8F0_sound_proc3_endsample();
		x_WORD_E29D6_not_movex = 0;
		if (v1 >= 1u)
		{
			if (v1 <= 1u)
			{
				x_WORD_E29DC = 1;
				if (a1)
					*(x_DWORD *)(a1 + 4) = 0;
			}
			else if (v1 == 2 && a1)
			{
				*(x_DWORD *)(a1 + 4) = 1;
			}
		}
		sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]);
		sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);
		result = 1;
	}
	else
	{
		x_WORD_E29DC = 1;
		x_D41A0_BYTEARRAY_4_struct.levelnumber_43w = x_BYTE_D419C_level_num;
		if (a1)
			*(x_DWORD *)(a1 + 4) = 0;
		result = 1;
	}
	return result;
}

//----- (00077680) --------------------------------------------------------
char /*__fastcall*/ sub_77680(/*int a1, */int a2, int16_t *a3)//258680
{
	char result; // al
	//int v4; // eax
	int v5; // edx
	//int v6; // eax
	int16_t v7; // dx
	char *v8; // esi
	//char v9; // [esp+0h] [ebp-4h]
	char v10ar[0x24]; // [esp+50h] [ebp+4Ch]
	//char v11; // [esp+60h] [ebp+5Ch]//v10ar[0x10]

	int v12; // [esp+74h] [ebp+70h]
	int v13; // [esp+78h] [ebp+74h]
	int16_t v14; // [esp+80h] [ebp+7Ch]
	char v15; // [esp+82h] [ebp+7Eh]

	//fix it
	v5 = 0;
	v14 = 0;
	//fix it

	x_WORD_E2094 = (uint8_t)x_BYTE_E2096;
	memset(printbuffer, 0, 80);
	memset(&v12, 0, 16);
	v15 = 2;
	sprintf(printbuffer, "NETH%d", (uint16_t)x_DWORD_17DE38str.x_WORD_17DEFA + 20);
	LOWORD(a3) = 0;
	x_DWORD_17DE38str.x_WORD_17DEFC = sub_7308F(a3, (Bit8u*)printbuffer, 8);
	if (x_DWORD_17DE38str.x_WORD_17DEFC == -1)
	{
		sub_8CD27_set_cursor(xy_DWORD_17DED4_spritestr[39]);
		result = 0;
	}
	else
	{
		sub_7A110_load_hscreen(x_WORD_180660_VGA_type_resolution, 7);
		x_DWORD_17DE38str.x_WORD_17DEFE = 0;
		sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]);
		x_DWORD_17DE38str.x_DWORD_17DEDC = 0;
		x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons = 0;
		sub_7B5A0_disable_enable();
		memset(x_DWORD_17DE38str.x_BYTE_17DE68x, 0, 88);
		// FIXME: types
		// memset(sub_7308F, 0, 80);
		x_DWORD_17DE38str.x_WORD_17DEF6 = 5;
		x_DWORD_17DE38str.x_WORD_17DEEC = 0;
		sub_6EDB0_set_mouse_position_by_res();
		x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx = 0x140;
		x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony = 0xf0;//test and fix it

		if (x_D41A0_BYTEARRAY_4_struct.levelnumber_43w >= 0x32u)
			x_DWORD_17DE38str.x_BYTE_17DE68x[0xa+11 * x_DWORD_17DE38str.x_WORD_17DEFC] = *(x_BYTE *)(x_D41A0_BYTEARRAY_4_struct.levelnumber_43w);
		else
			x_DWORD_17DE38str.x_BYTE_17DE68x[0xa + 11 * x_DWORD_17DE38str.x_WORD_17DEFC] = 50;
		x_DWORD_17DE38str.x_BYTE_17DE68x[0x9+11 * x_DWORD_17DE38str.x_WORD_17DEFC] = 2;
		x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons = 0;
		while (!BYTE1(a3))
		{
			if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == 59)
			{
				x_D41A0_BYTEARRAY_4_struct.byteindex_10 = x_D41A0_BYTEARRAY_4_struct.byteindex_10 != 1;
				x_D41A0_BYTEARRAY_4_struct.setting_38402 = 1;
			}
			BYTE1(a3) = sub_7C390();
			if (x_D41A0_BYTEARRAY_4_struct.byteindex_10 == 1)
			{
				if (v15 == 2)
				{
					v13 = j___clock();
					if ((v13 - v12) / 0x64u > 1)
					{
						v7 = unk_E2516[46 + 9 * (int16_t)(v14++ + 1)];
						if (!v7)
							v14 = 0;
						v12 = v13;
					}
					memset(v10ar, 0, 36);
					v8 = (char *)&unk_E2516[45 + 9 * v14];
					qmemcpy(v10ar, v8, 0x10u);
					qmemcpy(&v10ar[0x10], v8 + 16, 2u);
					sub_7E840_draw_textbox_with_line((Bit16u*)v10ar, 21, 27);
				}
				else if (v15 == 3)
				{
					v13 = j___clock();
					if ((v13 - v12) / 0x64u > 1)
						v15 = 2;
				}
			}
			// FIXME: types
			// // if (!(x_BYTE)a3)
			// {
			// 	sub_90B27_VGA_pal_fadein_fadeout((Bit8u*)x_DWORD_17DE38str.x_DWORD_17DE38, 0x20u, 0);
			// 	LOBYTE(a3) = 1;
			// 	xy_DWORD_17DED4_spritestr[15];
			// }
			if (x_WORD_180660_VGA_type_resolution & 1)
				sub_90478_VGA_Blit320();
			else
				sub_75200_VGA_Blit640(480);
			sub_7A060_get_mouse_and_keyboard_events();
		}
		sub_7B5D0();
		sub_7AA70_load_and_decompres_dat_file(0, 0, 0, 0);
		sub_7C710();
		result = 1;
	}
	return result;
}

//----- (00077980) --------------------------------------------------------
char sub_77980_exit_dialog(Bit8u* a1)//258980
{
	int16_t v1; // ax
	char v2; // bl
	//a1 ma byt 2b2cb4
	v1 = sub_7BF20_draw_scroll_dialog((int16_t *)(a1 + 26));//draw exit dialog
	v2 = v1;
	if (v1 == 1)
	{
		x_WORD_E29DC = 1;
		D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x004_2BE0_11234 = 1;//duplicate command in other structure
		//*(x_BYTE *)(2124 * D41A0_BYTESTR_0.word_0xc + x_D41A0_BYTEARRAY_0 + 11234) = 1;
	}
	else if (v1 == 2)
	{
		v2 = 1;
		sub_7C020((x_WORD *)(a1 + 26));
	}
	return v2;
}

//----- (000779E0) --------------------------------------------------------
char sub_779E0_lang_setting_dialog(Bit8u* a1x)//2589E0
{
	Bit8u* v1; // ebx  
	char *langfilename; // eax
	char v4; // al
	FILE* configfile2; // esi
	int v7 = 0; // edx
	int v8; // eax
	Bit8u* v9; // esi
	int16_t v10; // si
	int16_t v11; // ax
	char v13; // al
	FILE* configfile; // ebx
	int v15; // eax
	_finddata_t langfileL;
	_finddata_t langfileD;
	Bit8u v23ar[0x24]; // [esp+148h] [ebp+6h]

	int v29_old_time = 0; // [esp+18Ch] [ebp+4Ah]
	int v30_actual_time; // [esp+190h] [ebp+4Eh]
	int16_t v31 = 0; // [esp+198h] [ebp+56h]
	char v32; // [esp+19Ah] [ebp+58h]
	Bit8u* v33; // [esp+19Ch] [ebp+5Ah]
	Bit8u v34 = 0; // [esp+1A0h] [ebp+5Eh]
	Bit8u* v35; // [esp+1A4h] [ebp+62h]
	Bit8u* v36; // [esp+1A8h] [ebp+66h]
	Bit8u* v37; // [esp+1ACh] [ebp+6Ah]
	int v39 = 0; // [esp+1B4h] [ebp+72h]
	Bit8u v40 = 0; // [esp+1B8h] [ebp+76h]
	int v41 = 0; // [esp+1BCh] [ebp+7Ah]

	sprintf(printbuffer2, file_handling->getFilePath(MC2File::config_dat).c_str());
	long langlhandle = NULL;
	long langdhandle = NULL;

	v32 = 2;
	sub_6EDB0_set_mouse_position_by_res();//24fdb0
	x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx = 0x140;
	x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony = 0xC8;
	if (a1x)//0x0
	{
		sub_7A110_load_hscreen(x_WORD_180660_VGA_type_resolution, 12);//load hscreen 25b110
		v1 = &x_DWORD_E9C38_smalltit[307200];//4B000
	}
	else
	{
		x_DWORD_E9C38_smalltit = x_D41A0_BYTEARRAY_4_struct.heapbuffer.data();//[[2a51a4]+e2]
		v1 = &x_DWORD_E9C38_smalltit[307200];//406514+4b000
		sub_7A110_load_hscreen(x_WORD_180660_VGA_type_resolution, 14);//25b110
	}
	sub_7B5A0_disable_enable();//25c5a0  disable //enabl
	sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]/*filearray_2aa18c[0]*/);//26dd27
	x_DWORD_17DE38str.x_WORD_17DEEC = 0;
	langlhandle = unknown_libname_2_findfirst((char*)"LANGUAGE/L*.TXT", 0, &langfileL);
	if (langlhandle != NULL)// 27B166 - 355088
	{
		langdhandle = unknown_libname_2_findfirst((char*)"LANGUAGE/D*.TXT", 0, &langfileD); //v21=3550b4 3550b4
		if (langlhandle == NULL || langdhandle == NULL)
			langfilename = (char*)langfileL.name;//neco se nenaslo
		else
			langfilename = (char*)langfileD.name;//&v22;//naslo se oba v tom pripade prirad "D2.TXT", adresa 3550d2
		posistruct v1_langdattab[1000];
		v4 = sub_7F7D0(&v35, &v33, v1, langfilename, v1_langdattab);//2607d0
		//D2.TXT , [451514]020058e2e2e2, [355134]c5274500->00000000,[35513c]b9274500->141545->020058e2e2e2
		x_D41A0_BYTEARRAY_4_struct.byteindex_179 = v4;
		unknown_libname_4_find_close(&langfileD, langdhandle);//27b1b3
		v36 = v35;
		v37 = v33;
		if (langlhandle == NULL)
		{
			configfile2 = sub_98817_open(printbuffer2, 512);
			if (configfile2 != NULL)
			{
				sub_988A7_read(configfile2, &v34, 4);
				if (v34 == -9)
				{
					sub_988A7_read(configfile2, &v40, 2);
					sprintf(printbuffer, "L%d.TXT", v40);
					x_D41A0_BYTEARRAY_4_struct.byteindex_179 = sub_7F960(v36, v37, v1, printbuffer, v1_langdattab);//tady se pak zmeni v1 za v1_langdattab
				}
				sub_98882_close(configfile2);
			}
		}
		sub_7B5A0_disable_enable();//25c5a0
		x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons = 0;
		sub_8CD27_set_cursor(xy_DWORD_17DED4_spritestr[0x25]);//26dd27 
		//kursor se nastavi zde!
		while (v39 != 2)//adress 258c30
		{
			if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == 59)
			{
				x_D41A0_BYTEARRAY_4_struct.byteindex_10 = x_D41A0_BYTEARRAY_4_struct.byteindex_10 != 1;
				x_D41A0_BYTEARRAY_4_struct.setting_38402 = 1;
			}
			if (x_WORD_180660_VGA_type_resolution & 1)
				sub_9A128_copy_screen_320(x_DWORD_E9C38_smalltit, x_DWORD_180628b_screen_buffer, 0xC8u);
			else
				sub_9A144_copy_screen_640(x_DWORD_E9C38_smalltit, x_DWORD_180628b_screen_buffer, 0x1E0u);//write default screan 27b144  adress 258c99
			v39 = sub_7E0E0_mouse_events();//25f0e0 adress 258ca1 - zmeni tlacitko, vrati stav kliknuti
			sub_2BB40_draw_bitmap(263, 134, v1_langdattab[1]);//20cb40 adress 258cba - zmeni vlajku
			if (x_D41A0_BYTEARRAY_4_struct.byteindex_10 == 1)//je 1  ne nula!
			{
				v8 = v32;
				if (v32 == 2)
				{
					v30_actual_time = j___clock();//279786 , adresa 258cd9
					//0x4a3-0x0 b
					if ((v30_actual_time - v29_old_time) / 100 > 1)//pokud ubehlo 100ms
					{
						if (!x_WORD_E24BE[9 * v31++])//2b34be
							v31 = 0;
						v29_old_time = v30_actual_time;
					}
					memset(v23ar, 0, 36);//26db3a

					v9 = &unk_E24BCx[18 * v31];//2b34bc
					qmemcpy(v23ar, v9, 0x10u);
					qmemcpy(&v23ar[0x10], v9 + 16, 2u);

					sub_7E840_draw_textbox_with_line((Bit16u *)v23ar, 83, 100);//25f840 adress 258d6a - prida text?
				}
				else if (v32 == 3)
				{
					v30_actual_time = j___clock();
					if ((v30_actual_time - v29_old_time) / 100 > 1)//pokud ubehlo 100ms
						v32 = 2;
				}
			}
			if (v41)
			{
				if (x_WORD_180660_VGA_type_resolution & 1)
					sub_90478_VGA_Blit320();
				else
					sub_75200_VGA_Blit640(480);//vykresleni //256200
			}
			else
			{
				sub_90B27_VGA_pal_fadein_fadeout((Bit8u*)x_DWORD_17DE38str.x_DWORD_17DE38, 0x20u, 0);//271b27
				v41++;
			}
			v10 = v39;
			sub_7A060_get_mouse_and_keyboard_events();//25b060 adress 258ddf
			if (v10 == 1)
			{
				if (unknown_libname_3_findnext(&langfileL, langlhandle))//258193
				{
					unknown_libname_4_find_close(&langfileL, langlhandle);
					langlhandle = unknown_libname_2_findfirst((char*)"LANGUAGE/L*.TXT", 0, &langfileL);
				}
				// L2.TXT
				v11 = sub_7F960(v36, v37, v1, langfileL.name, v1_langdattab);//adress 258dec
				v40 = v11;
				if (x_D41A0_BYTEARRAY_4_struct.byteindex_179 == v11)
				{
					if (unknown_libname_3_findnext(&langfileL, langlhandle))
					{
						unknown_libname_4_find_close(&langfileL, langlhandle);
						langlhandle = unknown_libname_2_findfirst((char*)"LANGUAGE/L*.TXT", 0, &langfileL);
					}
					v13 = sub_7F960(v36, v37, v1, langfileL.name, v1_langdattab);
				}
				else
				{
					v13 = v40;
				}
				x_D41A0_BYTEARRAY_4_struct.byteindex_179 = v13;
			}
		}
	}
	//adress 258ea1
	unknown_libname_4_find_close(&langfileL, langlhandle);//adress 258EA2
	configfile = sub_98817_open(printbuffer2, 546);
	if (configfile != NULL)
	{
		if (x_D41A0_BYTEARRAY_4_struct.setting_38402 == 1)
			x_D41A0_BYTEARRAY_4_struct.setting_38402 = 0;
		/*qmemcpy(&v25, (void *)x_D41A0_BYTEARRAY_4, 0x14u);
		qmemcpy(&v27, (void *)(x_D41A0_BYTEARRAY_4[0x14]), 2u);
		qmemcpy((char *)&v27 + 2, &x_BYTE_EB39E_keys, 8u);
		//qmemcpy(&v28, &x_BYTE_EB39E_keys + 8, 2u);//fix it
		v25 = -9;
		v26 = x_D41A0_BYTEARRAY_4_struct.byteindex_179;
		sub_98CAA_write(configfile, (Bit8u*)&v25, 32);*/
		//f7 ff ff ff 02 00 7f 00 7f 00 01 00 00 00 00 00
		//00 00 00 00 00 00 48 50 4b 4d 1c 1d 38 36 36 38

		//f7 ff ff ff 03 00 7f 00 7f 00 01 00 00 00 00 00
		//00 00 00 00 00 00 48 50 4b 4d 1c 1d 38 36 36 38
		Bit16u twobyte = 0xfff7;
		Bit8u helpbyte;
		sub_98CAA_write(configfile, (Bit8u*)&twobyte, 2);//0
		twobyte = 0xffff;
		sub_98CAA_write(configfile, (Bit8u*)&twobyte, 2);//2
		twobyte = x_D41A0_BYTEARRAY_4_struct.byteindex_179;
		sub_98CAA_write(configfile, (Bit8u*)&twobyte, 2);//4
		twobyte = x_D41A0_BYTEARRAY_4_struct.wordindex_6;
		sub_98CAA_write(configfile, (Bit8u*)&twobyte, 2);//6
		twobyte = x_D41A0_BYTEARRAY_4_struct.wordindex_8;
		sub_98CAA_write(configfile, (Bit8u*)&twobyte, 2);//8
		twobyte = x_D41A0_BYTEARRAY_4_struct.byteindex_10;
		sub_98CAA_write(configfile, (Bit8u*)&twobyte, 2);//10
		twobyte = D41A0_BYTESTR_0.word_0xc;
		sub_98CAA_write(configfile, (Bit8u*)&twobyte, 2);//12
		twobyte = 0x0000;
		sub_98CAA_write(configfile, (Bit8u*)&twobyte, 2);//14
		twobyte = 0x0000;
		sub_98CAA_write(configfile, (Bit8u*)&twobyte, 2);//16
		twobyte = 0x0000;
		sub_98CAA_write(configfile, (Bit8u*)&twobyte, 2);//18
		twobyte = 0x0000;
		sub_98CAA_write(configfile, (Bit8u*)&twobyte, 2);//20
		helpbyte = x_BYTE_EB39E_keys[0];
		sub_98CAA_write(configfile, (Bit8u*)&helpbyte, 1);//21
		helpbyte = x_BYTE_EB39E_keys[1];
		sub_98CAA_write(configfile, (Bit8u*)&helpbyte, 1);//22
		helpbyte = x_BYTE_EB39E_keys[2];
		sub_98CAA_write(configfile, (Bit8u*)&helpbyte, 1);//23
		helpbyte = x_BYTE_EB39E_keys[3];
		sub_98CAA_write(configfile, (Bit8u*)&helpbyte, 1);//24
		helpbyte = x_BYTE_EB39E_keys[4];
		sub_98CAA_write(configfile, (Bit8u*)&helpbyte, 1);//25
		helpbyte = x_BYTE_EB39E_keys[5];
		sub_98CAA_write(configfile, (Bit8u*)&helpbyte, 1);//26
		helpbyte = x_BYTE_EB39E_keys[6];
		sub_98CAA_write(configfile, (Bit8u*)&helpbyte, 1);//27
		helpbyte = x_BYTE_EB39E_keys[7];
		sub_98CAA_write(configfile, (Bit8u*)&helpbyte, 1);//28
		helpbyte = x_BYTE_EB39E_keys[8];
		sub_98CAA_write(configfile, (Bit8u*)&helpbyte, 1);//29
		helpbyte = x_BYTE_EB39E_keys[9];
		sub_98CAA_write(configfile, (Bit8u*)&helpbyte, 1);//30
		sub_98882_close(configfile);
	}
	/*LOWORD(v15) = */sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		// FIXME: types
		// v15 = (int)x_DWORD_180628b_screen_buffer;
		sub_72883_clear_graphics_320(/*(int)x_DWORD_180628b_screen_buffer, */(void *)x_DWORD_180628b_screen_buffer, 0xC8u, 0);
	}
	else
	{
		sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, 0);
	}
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_72883_clear_graphics_320(/*v15, */(void *)x_DWORD_E9C38_smalltit, 0xC8u, 0);
	else
		sub_728A9_clear_graphics_640((void *)x_DWORD_E9C38_smalltit, 0x1E0u, 0);
	sub_7B5A0_disable_enable();
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_90478_VGA_Blit320();
	else
		sub_75200_VGA_Blit640(480);
	if (langlhandle != NULL)//3551d4
	{
		sub_7AA70_load_and_decompres_dat_file(file_handling->getFilePath(MC2File::data_screens_hscreen0_dat).c_str(), (Bit8u*)x_DWORD_17DE38str.x_DWORD_17DE38, 0, 768);
		sub_7AA70_load_and_decompres_dat_file(file_handling->getFilePath(MC2File::data_screens_hscreen0_dat).c_str(), (Bit8u*)x_DWORD_17DE38str.x_DWORD_17DE40, x_DWORD_17DE38str.x_DWORD_17DEDC, 168081);
		sub_41A90_VGA_pallette_install((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38);
		sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]);//mozna xadatapointerstab
		sub_8CD27_set_cursor(xy_DWORD_17DED4_spritestr[39]);
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_9A128_copy_screen_320((void*)x_DWORD_180628b_screen_buffer, (void*)x_DWORD_E9C38_smalltit, 0xC8u);
		else
			sub_9A144_copy_screen_640((void*)x_DWORD_180628b_screen_buffer, (void*)x_DWORD_E9C38_smalltit, 0x1E0u);
		sub_7C120_draw_bitmap_640(185, 232, xy_DWORD_17DED4_spritestr[66]);
	}
	/*else
	{
	  x_DWORD_E9C38_smalltit = v38;
	}*/
	sub_7AA70_load_and_decompres_dat_file(0, 0, 0, 0);
	return 1;
}

//----- (000780F0) --------------------------------------------------------
char sub_780F0_load_game_dialog(Bit8u* a1)//0x2590f0
{
	x_WORD *v1; // ebx
	//int v2; // edx
	//char *v3; // esi
	char* save_name; // edi
	//char v5; // al
	//char v6; // al
	//int v7; // eax
	FILE* SEARCH_FILE; // esi
	FILE* FILE; // eax
	//FILE* v10; // esi
	//int16_t *v11; // edi
	int16_t v12; // ax
	//x_WORD *v13; // esi
	int v13x;
	//x_WORD *v14; // eax
	int v14x;
	int16_t v15; // si
	//char *v16; // eax
	int v16x;
	int16_t v17; // si
	char v18; // cl
	//signed int j; // esi
	int v20; // eax
	uint8_t v21; // di
	int16_t v22; // ax
	int16_t v23; // di
	//int k; // si
	//int16_t v25; // di
	char v26; // ch
	uint8_t v27; // ST10_1
	int16_t v28; // ST0C_2
	int16_t v29; // ax
	int16_t v31; // [esp-8h] [ebp-5Eh]
	uint8_t v32; // [esp-4h] [ebp-5Ah]
	//char v33; // [esp+0h] [ebp-56h]
	Bit16s v34[10]; // [esp+50h] [ebp-6h]
	//int16_t v35; // [esp+5Ah] [ebp+4h]//5
	//int16_t v36; // [esp+5Ch] [ebp+6h]//6
	//int16_t v37; // [esp+5Eh] [ebp+8h]//7
	//int16_t v38; // [esp+60h] [ebp+Ah]//8
	//char v39; // [esp+7Ch] [ebp+26h]
	int v40; // [esp+88h] [ebp+32h]
	//char v41; // [esp+90h] [ebp+3Ah]
	int v42; // [esp+94h] [ebp+3Eh]
	Bit32u dword_0; // [esp+98h] [ebp+42h]
	int v44; // [esp+9Ch] [ebp+46h]
	//int v45; // [esp+A0h] [ebp+4Ah]
	//char* v46; // [esp+A4h] [ebp+4Eh]
	int v47; // [esp+A8h] [ebp+52h]
	//int v48; // [esp+ACh] [ebp+56h]
	int v49; // [esp+B0h] [ebp+5Ah]
	char* v50; // [esp+B4h] [ebp+5Eh]
	int16_t v51; // [esp+B8h] [ebp+62h]
	int v52; // [esp+BCh] [ebp+66h]
	int v53; // [esp+C0h] [ebp+6Ah]
	int im; // [esp+C4h] [ebp+6Eh]
	int16_t v55; // [esp+C8h] [ebp+72h]
	Bit8u v56; // [esp+CCh] [ebp+76h]
	Bit8u v57; // [esp+D0h] [ebp+7Ah]

	//fix it
	v40 = 0;
	//fix it

	v42 = 0;
	v44 = 0;
	v55 = 0;
	v1 = (x_WORD *)(a1 + 26);
	v57 = sub_5BE80_test_pallette((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38, 0x3Fu, 0x3Fu, 0x3Fu);
	v56 = sub_5BE80_test_pallette((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38, 0x16u, 0x10u, 9u);
	if (x_DWORD_17DE38str.x_WORD_17DF04 == -1)
	{
		for (im = 0; im < 8; im++)
		{
			//v2 = i;
			//v48 = 43 * im;
			//v3 = (char*)x_DWORD_E9C4C_langindexbuffer[414];//(char *)x_DWORD_EA2C4;//2bb2c4 Empty
			save_name = &x_DWORD_17DE38str.x_BYTE_17DF14[43 * im];
			//v46 = &x_BYTE_17DF14[v48];
			strcpy(save_name, x_DWORD_E9C4C_langindexbuffer[414]);//(char *)x_DWORD_EA2C4;//2bb2c4 Empty
			/*do
			{
				v5 = *v3;
				*v4 = *v3;
				if (!v5)
					break;
				v6 = v3[1];
				v3 += 2;
				v4[1] = v6;
				v4 += 2;
			} while (v6);*/
			//v7 = v48;
			x_DWORD_17DE38str.x_BYTE_17DF14[41+43 * im] = 0;
			x_DWORD_17DE38str.x_BYTE_17DF14[42+43 * im] = 0;
			sprintf(printbuffer, "%c:%s/save/save%d.gam", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", im+1);
			SEARCH_FILE = sub_98817_open(printbuffer, 512);
			if (SEARCH_FILE != NULL)
			{
				sub_988A7_read(SEARCH_FILE, (Bit8u*)&dword_0, 4);
				if (dword_0 == 0xFFFFFFF7u)
				{
					sub_988A7_read(SEARCH_FILE, (Bit8u*)save_name, 20);
					x_DWORD_17DE38str.x_BYTE_17DF14[41+43 * im] = 1;
				}
				sub_98882_close(SEARCH_FILE);
			}
		}
		x_DWORD_17DE38str.x_WORD_17DF04 = 0;
	}
	v51 = sub_7BF20_draw_scroll_dialog((int16_t *)(a1 + 26));
	if ((x_BYTE)v51)
	{
		sub_7C020((x_WORD *)(a1 + 26));
		if ((x_BYTE)v51 == 1 && x_DWORD_17DE38str.x_WORD_17DF04 > 0)
		{
			sprintf(printbuffer, "%c:%s/save/save%d.gam", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", x_DWORD_17DE38str.x_WORD_17DF04);
			FILE = sub_98817_open(printbuffer, 512);
			//v10 = v9;
			if (FILE != NULL)
			{
				sub_988A7_read(FILE, (Bit8u*)&dword_0, 4);
				if (dword_0 == 0xFFFFFFF7u)
				{
					if (*(x_BYTE *)(a1 + 25))
						sub_7E640(0);
					sub_988A7_read(FILE, (Bit8u*)&x_DWORD_17DE38str.x_BYTE_17DF14[43 * (x_DWORD_17DE38str.x_WORD_17DF04 - 1)], 20);
					sub_988A7_read(FILE, (Bit8u*)x_D41A0_BYTEARRAY_4_struct.player_name_57ar, 32);
					//v11 = x_WORD_E2970;
					sub_988A7_read(FILE, (Bit8u*)x_D41A0_BYTEARRAY_4_struct.savestring_89, 32);
					//while (v11 < &x_WORD_E2970[52])
					for(int ii=0;ii<6;ii++)
					{
						sub_988A7_read(FILE, readbuffer, 17);
						v12 = *(Bit16u*)(readbuffer+12);
						//v11[6] = *(Bit16u*)(readbuffer + 12);
						x_WORD_E2970x[ii].word_12 = v12;
						if (v12 == 1)
							x_WORD_E2970x[ii].word_14 = 305;
							//v11[7] = 305;
						else
							x_WORD_E2970x[ii].word_14 = 270;
							//v11[7] = 270;
						//v11 = (int16_t *)((char *)v11 + 17);
					}
					sub_988A7_read(FILE, (Bit8u*)&D41A0_BYTESTR_0.str_0x218A_settings, 16);
					sub_988A7_read(FILE, (Bit8u*)&v42, 4);
					sub_988A7_read(FILE, (Bit8u*)&v44, 4);
					sub_988A7_read(FILE, (Bit8u*)&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.str_611, 505);
					sub_988A7_read(FILE, (Bit8u*)x_DWORD_17DBC8x, 500);
					sub_988A7_read(FILE, (Bit8u*)x_DWORD_17DDBCx, 100);
					sub_98882_close(FILE);
					//v13 = (x_WORD*)unk_E17CC_0x194;
					D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.word[1] = 0;
					v13x = 0;
					while (unk_E17CC_str_0x194[v13x].word_4)
					{
						//v13 += 11;
						//*((x_BYTE *)v13 - 4) = 2;
						unk_E17CC_str_0x194[v13x].byte_18_act = 2;
						v13x++;
					}
					//v14 = (x_WORD*)unk_E17CC_0x194;
					v14x = 0;
					v15 = 0;
					while (v15 < v42 && unk_E17CC_str_0x194[v14x].word_4)
					{
						unk_E17CC_str_0x194[v14x].byte_18_act = 1;
						//v14 += 11;
						v15++;
						//*((x_BYTE *)v14 - 4) = 1;
						v14x++;
					}
					//v16 = (char *)unk_E17CC_0x194;
					v16x = 0;
					v17 = 0;
					while (unk_E17CC_str_0x194[v16x].word_4)
					{
						if (unk_E17CC_str_0x194[v16x].byte_18_act == 1)
							x_D41A0_BYTEARRAY_4_struct.levelnumber_43w = v17;
						//v16 += 22;
						v16x++;
						v17++;
					}
					x_DWORD_17DB70str.x_BYTE_17DB8F = 1;
					memset(&x_DWORD_17DE28str, 0, 13);
					v18 = *(x_BYTE *)(a1 + 25);
					x_DWORD_17DB70str.x_WORD_17DB8A = -1;
					if (v18)
					{
						sub_81760_new_game_subdraw((type_unk_E17CC_str_0x194*)a1);
					}
					else
					{
						x_DWORD_17DE38str.x_WORD_17DF04 = -1;
						sub_77350_new_game_dialog(a1);
						*(x_DWORD *)(a1 + 4) = 2;
					}
				}
			}
		}
		x_DWORD_17DE38str.x_WORD_17DF04 = -1;
		v55 = 1;
	}
	//for (j = 1; (int16_t)j < 9; j++)
	for (int jm = 0; jm < 8; jm++)
	{
		int j = jm + 1;
		sub_6FC50(1);
		if (*(int16_t *)(a1 + 36) > 16 * (int16_t)j + 3 * sub_6FC30_get34_height())
		{
			sprintf(printbuffer, "%d.", j);
			v53 = 16 * j;
			v20 = 43 * (j - 1);
			v50 = &x_DWORD_17DE38str.x_BYTE_17DF14[v20];
			if (j == x_DWORD_17DE38str.x_WORD_17DF04)
			{
				v20 = *v1;
				v52 = v20 + 20;
				v23 = v53 + *(x_WORD *)(a1 + 28) + 16;
				v47 = v57;
				sub_2BC10_draw_text(printbuffer, v20 + 20, v23, v57);
				v32 = v47;
				v31 = v23;
				v22 = v52 + 3 * sub_6FC10_letter_width();
			}
			else
			{
				v21 = v56;
				sub_2BC10_draw_text(printbuffer, *(x_WORD *)(a1 + 26) + 20, v53 + *(x_WORD *)(a1 + 28) + 16, v56);
				v32 = v21;
				v31 = v53 + *(x_WORD *)(a1 + 28) + 16;
				v22 = *v1 + 20 + 3 * sub_6FC10_letter_width();
			}
			sub_2BC10_draw_text(v50, v22, v31, v32);
		}
	}
	if (*(x_WORD *)(a1 + 36) >= *(x_WORD *)(a1 + 34))
	{
		//for (k = 1; k < 9; k++)
		for (int km = 0; km < 8; km++)
		{
			int k = km + 1;
			v34[5] = *v1 + 20;
			//v25 = 16 * k;
			v34[6] = 16 * k + *(x_WORD *)(a1 + 28) + 16;
			v34[7] = 100;
			//v45 = k;
			v34[8] = 16;
			v26 = x_DWORD_17DE38str.x_BYTE_17DF14[41+43 * (k - 1)];
			v49 = 43 * (k - 1);
			if (v26 && sub_7B200_in_region(v34, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
			{
				if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
				{
					x_DWORD_17DE38str.x_WORD_17DF04 = k;
				}
				else
				{
					sprintf(printbuffer, "%d.", k);
					v47 = v57;
					sub_2BC10_draw_text(printbuffer, *(x_WORD *)(a1 + 26) + 20, 16 * k + *(x_WORD *)(a1 + 28) + 16, v57);
					v27 = v47;
					v28 = 16 * k + *(x_WORD *)(a1 + 28) + 16;
					v29 = sub_6FC10_letter_width();
					sub_2BC10_draw_text(&x_DWORD_17DE38str.x_BYTE_17DF14[v49], *v1 + 20 + 3 * v29, v28, v27);
				}
			}
		}
	}
	return v55;
}

//----- (00078730) --------------------------------------------------------
char sub_78730_save_game_dialog(x_WORD *a1)//259730
{
	int16_t *v1; // ebx
	int v2; // edx
	int v3; // eax
	char *v4; // esi
	char* v5; // edi
	//char v6; // al
	//char v7; // al
	FILE* file1; // esi
	char* v9; // edi
	char* v10; // esi
	//char v11; // al
	//char v12; // al
	FILE* file2; // esi
	//x_WORD *v14; // eax
	int v14x;
	signed int j; // esi
	char* v16; // edi
	//uint8_t v17; // ST10_1
	int16_t v18; // ST0C_2
	int16_t v19; // ST08_2
	int16_t v20; // ax
	int v21; // eax
	//uint8_t v22; // ST10_1
	//int16_t v23; // ST0C_2
	//int16_t v24; // ST08_2
	int16_t v25; // ax
	char* v26; // esi
	char* v27; // edi
	//char v28; // al
	//char v29; // al
	//int v30; // eax
	int v31; // edi
	uint8_t v32; // si
	int16_t v33; // ST0C_2
	int16_t v34; // ax
	int v35; // eax
	int v36; // eax
	uint8_t v37; // ST10_1
	char* v38; // eax
	char* v39; // ST0C_4
	char* v40; // ST08_4
	int16_t v41; // ST04_2
	int16_t v42; // ax
	int v43; // edx
	char* v45; // [esp-4h] [ebp-46h]
	//char v46; // [esp+0h] [ebp-42h]
	Bit16s v47[10]; // [esp+50h] [ebp+Eh]
	//int16_t v48; // [esp+5Ah] [ebp+18h]//5
	//int16_t v49; // [esp+5Ch] [ebp+1Ah]//6
	//int16_t v50; // [esp+5Eh] [ebp+1Ch]//7
	//int16_t v51; // [esp+60h] [ebp+1Eh]//8
	//char v52; // [esp+7Ch] [ebp+3Ah]
	int v53; // [esp+80h] [ebp+3Eh]
	int v54; // [esp+84h] [ebp+42h]
	int v55; // [esp+88h] [ebp+46h]
	char* v56; // [esp+8Ch] [ebp+4Ah]
	//int v57; // [esp+90h] [ebp+4Eh]
	//int v58; // [esp+94h] [ebp+52h]
	int16_t v59; // [esp+98h] [ebp+56h]
	int16_t result; // [esp+9Ch] [ebp+5Ah]
	int v61; // [esp+A0h] [ebp+5Eh]
	int v62; // [esp+A4h] [ebp+62h]
	int v63; // [esp+A8h] [ebp+66h]
	int v64; // [esp+ACh] [ebp+6Ah]
	int i; // [esp+B0h] [ebp+6Eh]
	int k; // [esp+B4h] [ebp+72h]
	uint8_t v67; // [esp+B8h] [ebp+76h]
	uint8_t v68; // [esp+BCh] [ebp+7Ah]

	//fix it
	v43 = 0;
	//fix it

	result = 0;
	v68 = sub_5BE80_test_pallette(x_DWORD_17DE38str.x_DWORD_17DE38, 0x3Fu, 0x3Fu, 0x3Fu);
	v67 = sub_5BE80_test_pallette(x_DWORD_17DE38str.x_DWORD_17DE38, 0x16u, 0x10u, 9u);
	v1 = a1 + 13;
	if (x_DWORD_17DE38str.x_WORD_17DF04 == -1)
	{
		for (i = 1; i < 9; i++)
		{
			v2 = i;
			v3 = 43 * (i - 1);
			v4 = x_DWORD_E9C4C_langindexbuffer[414];//(char *)x_DWORD_EA2C4; //Empty
			v5 = &x_DWORD_17DE38str.x_BYTE_17DF14[v3];
			v45 = &x_DWORD_17DE38str.x_BYTE_17DF14[v3];
			strcpy(v5,v4);
			/*do
			{
				v6 = v4[0];
				v5[0] = v4[0];
				if (!v6)
					break;
				v7 = v4[1];
				v4 += 2;
				v5[1] = v7;
				v5 += 2;
			} while (v7);*/
			v56 = v45;
			sprintf(printbuffer, "%c:%s/save/save%d.gam", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", v2);
			file1 = sub_98817_open(printbuffer, 512);
			if (file1 != NULL)
			{
				sub_988A7_read(file1, (Bit8u*)&v54, 4);
				if (v54 == -9)
					sub_988A7_read(file1, (Bit8u*)v56, 20);
				sub_98882_close(file1);
			}
		}
		x_DWORD_17DE38str.x_WORD_17DF04 = 0;
	}
	v59 = sub_7BF20_draw_scroll_dialog(v1);
	if (v59)
	{
		sub_7C020(v1);
		if (v59 == 1 && x_DWORD_17DE38str.x_WORD_17DF04 > 0)
		{
			v9 = &x_DWORD_17DE38str.x_BYTE_17DF14[43 * (x_DWORD_17DE38str.x_WORD_17DF04 - 1)];
			v10 = v9 + 20;
			strcpy(v9,v10);
			/*do
			{
				v11 = v10[0];
				v9[0] = v10[0];
				if (!v11)
					break;
				v12 = v10[1];
				v10 += 2;
				v9[1] = v12;
				v9 += 2;
			} while (v12);*/
			sprintf(printbuffer, "%c:%s/save/save%d.gam", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, "/netherw", x_DWORD_17DE38str.x_WORD_17DF04);
			file2 = sub_98817_open(printbuffer, 546);
			if (file2 != NULL)
			{
				//v14 = (x_WORD*)unk_E17CC_0x194;
				v14x = 0;
				v54 = -9;
				v55 = 0;
				while (unk_E17CC_str_0x194[v14x].word_4 && unk_E17CC_str_0x194[v14x].byte_18_act != 2)
				{
					//v14 += 11;
					v14x++;
					v55++;
				}
				v53 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2];
				sub_98CAA_write(file2, (Bit8u*)&v54, 4);
				sub_98CAA_write(file2, (Bit8u*)&x_DWORD_17DE38str.x_BYTE_17DF14[43 * (x_DWORD_17DE38str.x_WORD_17DF04 - 1)], 20);
				sub_98CAA_write(file2, (Bit8u*)x_D41A0_BYTEARRAY_4_struct.player_name_57ar, 32);
				sub_98CAA_write(file2, (Bit8u*)x_D41A0_BYTEARRAY_4_struct.savestring_89, 32);
				sub_98CAA_write(file2, (Bit8u*)&x_WORD_E2970x, 102);
				sub_98CAA_write(file2, (Bit8u*)&D41A0_BYTESTR_0.str_0x218A_settings, 16);
				sub_98CAA_write(file2, (Bit8u*)&v55, 4);
				sub_98CAA_write(file2, (Bit8u*)&v53, 4);
				sub_98CAA_write(file2, (Bit8u*)&D41A0_BYTESTR_0.array_0x2BDE[0].dword_0x3E6_2BE4_12228.str_611, 505);
				sub_98CAA_write(file2, (Bit8u*)x_DWORD_17DBC8x, 500);
				sub_98CAA_write(file2, (Bit8u*)x_DWORD_17DDBCx, 100);
				sub_98882_close(file2);
			}
		}
		x_DWORD_17DE38str.x_WORD_17DF04 = -1;
		result = 1;
	}
	for (j = 1; j < 9; j++)
	{
		sub_6FC50(1);
		if (a1[18] > 16 * j + 3 * sub_6FC30_get34_height())//0160:259AB7
		{
			sprintf(printbuffer, "%d.", j);
			v62 = 16 * j;
			v16 = &x_DWORD_17DE38str.x_BYTE_17DF14[43 * (j - 1)];
			if (j == x_DWORD_17DE38str.x_WORD_17DF04)
			{//draw edtited text line loc 78b10
				v20 = *v1;
				v21 = 16 * j + 20;
				v63 = v20 + 20;
				LOWORD(v21) = a1[14];
				//v57 = v68;
				//v58 = (int16_t)(v21 + 16 + v62);
				v61 = v21 + 16 + v62;
				sub_2BC10_draw_text(printbuffer, v63, v21 + 16 + v62, v68);//draw number
				//v22 = v57;
				//v23 = v58;
				//v24 = v63 + 3 * sub_6FC10_letter_width();
				sub_2BC10_draw_text(v16 + 20, v63 + 3 * sub_6FC10_letter_width(), v21 + 16 + v62, v68);//draw text
			}
			else
			{
				//v57 = v67;
				sub_2BC10_draw_text(printbuffer, a1[13] + 20, v62 + a1[14] + 16, v67);//draw number
				//v17 = v67;
				v18 = v62 + a1[14] + 16;
				v19 = *v1 + 20 + 3 * sub_6FC10_letter_width();
				sub_2BC10_draw_text(v16, v19, v18, v67);//draw text
			}
		}
	}
	if (a1[18] >= a1[17])
	{
		for (k = 1; k < 9; k++)
		{
			v47[5] = v1[0] + 20;//x pos
			v25 = a1[14];
			v64 = 16 * k;
			v47[8] = 16;//y size
			v47[7] = 90;//x size
			v47[6] = v25 + 16 + 16 * k;//y pos
			/*
			v47 =355150
			6801 0000 2000 9ff33c00620041009051100088513500051100000
			*/
			if (sub_7B200_in_region(v47, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
			{
				if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
				{
					x_DWORD_17DE38str.x_WORD_17DF04 = k;//clicked on first save
					v26 = &x_DWORD_17DE38str.x_BYTE_17DF14[43 * (k - 1)];
					v27 = v26 + 20;
					/*do
					{
					  //v28 = v26[0];
					  v27[0] = v26[0];
					  if ( !v26[0])
						break;
					  v29 = v26[1];
					  v27[1] = v26[1];
					  v26 += 2;
					  v27 += 2;
					}
					while ( v29 );*/
					strcpy((char*)v27, (const char*)v26);
					//v30 = 43 * (x_WORD_17DF04 - 1);
					x_DWORD_17DE38str.x_BYTE_17DF14[40+43 * (x_DWORD_17DE38str.x_WORD_17DF04 - 1)] = 0;
					//LOWORD(v30) = *v1;
					//v30 += 20;
					v63 = v1[0] + 20;
					//LOWORD(v30) = a1[14];
					v61 = a1[14] + 16 + v64;
					x_DWORD_17DE38str.x_BYTE_17DF14[42+43 * (x_DWORD_17DE38str.x_WORD_17DF04 - 1)] = 0;
				}
				else if (k != x_DWORD_17DE38str.x_WORD_17DF04)
				{//draw text highlight
					v31 = 43 * (k - 1);
					sprintf(printbuffer, "%d.", k);
					v32 = v68;
					sub_2BC10_draw_text(printbuffer, a1[13] + 20, v64 + a1[14] + 16, v68);
					v33 = v64 + a1[14] + 16;
					v34 = sub_6FC10_letter_width();
					sub_2BC10_draw_text(&x_DWORD_17DE38str.x_BYTE_17DF14[v31], v1[0] + 20 + 3 * v34, v33, v32);
				}
			}
		}
		if (x_DWORD_17DE38str.x_WORD_17DF04)
		{
			sub_6FC50(1);
			if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode != 1 && x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode != 28 && x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode != 14
				|| (v35 = 43 * (x_DWORD_17DE38str.x_WORD_17DF04 - 1), x_DWORD_17DE38str.x_BYTE_17DF14[42+v35]))
			{
				if (x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status)
				{
					if (sub_7C200(x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status))
					{
						v36 = 43 * (x_DWORD_17DE38str.x_WORD_17DF04 - 1);
						if (!x_DWORD_17DE38str.x_BYTE_17DF14[42+v36])
						{
							x_DWORD_17DE38str.x_BYTE_17DF14[42+v36] = 1;
							sprintf((char*)&x_DWORD_17DE38str.x_BYTE_17DF14[43 * (x_DWORD_17DE38str.x_WORD_17DF04 - 1) + 20], "%c", x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status);
							x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 0;
							x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status = 0;
						}
					}
				}
			}
			else
			{
				x_DWORD_17DE38str.x_BYTE_17DF14[42+v35] = 1;
			}
			v37 = v68;
			v38 = &x_DWORD_17DE38str.x_BYTE_17DF14[43 * (x_DWORD_17DE38str.x_WORD_17DF04 - 1)];
			v39 = v38 + 40;
			v40 = v38 + 20;
			v41 = v61;
			v42 = sub_6FC10_letter_width();
			// FIXME: types
			// sub_7F6A0((int16_t)(v63 + 3 * v42), v43, v63 + 3 * v42, v41, v40, v39, v37);
		}
	}
	return result;
}

//----- (00078E00) --------------------------------------------------------
char sub_78E00_set_player_name_dialog(/*int a1, int a2, */int16_t *a3)//259e00
{
	int v3; // eax
	int v4; // esi
	int v5; // esi
	const char *v6; // edi
	char *v7; // edx
	char v8; // al
	int16_t v9; // si
	uint8_t v10; // al
	int16_t v11; // bx
	uint8_t v12; // al
	char* v13; // esi
	char* v14; // edi
	//char v15; // al
	//char v16; // al
	char* v17; // edi
	char* v18; // esi
	//char v19; // al
	//char v20; // al
	char* v21; // edi
	char* v22; // esi
	//char v23; // al
	//char v24; // al
	int v26; // [esp+0h] [ebp-14h]
	int v27; // [esp+4h] [ebp-10h]
	char v28; // [esp+8h] [ebp-Ch]
	int v29; // [esp+Ch] [ebp-8h]
	char v30; // [esp+10h] [ebp-4h]

	v28 = 0;
	v26 = j___clock();
	/*v3 = */sub_6FC50(1);
	//LOWORD(v3) = a3[13];
	v29 = a3[13] + 10;
	//HIWORD(v3) = HIWORD(x_DWORD_17DED4);
	v3 = xy_DWORD_17DED4_spritestr[72].width;
	v27 = v29 + v3 - 22;
	v4 = a3[14] + a3[17] / 2;
	v5 = v4 - sub_6FC30_get34_height();
	v30 = sub_7BF20_draw_scroll_dialog(a3 + 13);
	if (a3[18] <= a3[17] / 2)
		goto LABEL_15;
	x_DWORD_17DE38str.x_WORD_17DEF0 = strlen((const char *)x_DWORD_17DE38str.x_DWORD_17DE50);
	if ((uint8_t)x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode < 0xFu)
	{
		if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode != 14)
		{
		LABEL_9:
			if ((uint16_t)x_DWORD_17DE38str.x_WORD_17DEF0 < 0xCu && x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status && sub_7C200(x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status))
			{
				v7 = (char *)(x_DWORD_17DE38str.x_DWORD_17DE50 + x_DWORD_17DE38str.x_WORD_17DEF0);
				v8 = x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status;
				v7[1] = 0;
				*v7 = v8;
			}
			goto LABEL_13;
		}
	LABEL_7:
		if (x_DWORD_17DE38str.x_WORD_17DEF0)
		{
			v6 = (const char *)x_DWORD_17DE38str.x_DWORD_17DE50;
			*(x_BYTE *)(strlen((const char *)x_DWORD_17DE38str.x_DWORD_17DE50) + x_DWORD_17DE38str.x_DWORD_17DE50 - 1) = 0;
			x_DWORD_17DE38str.x_WORD_17DEF0 = strlen(v6);
		}
		goto LABEL_13;
	}
	if ((uint8_t)x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode > 0xFu)
	{
		if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode != 83)
			goto LABEL_9;
		goto LABEL_7;
	}
LABEL_13:
	_strupr(x_DWORD_17DE38str.x_DWORD_17DE50);
	sub_6FC50(1);
	v9 = sub_6FC30_get34_height() + v5;
	v10 = sub_5BE80_test_pallette(x_DWORD_17DE38str.x_DWORD_17DE38, 0x16u, 0x10u, 9u);
	v11 = sub_6FC80_pre_draw_text((char *)x_DWORD_17DE38str.x_DWORD_17DE50, v29, v27, v9, v10);
	if ((v26 - x_DWORD_17DE38str.x_DWORD_17DED0) / 0xCu >= 1)
	{
		v12 = sub_5BE80_test_pallette(x_DWORD_17DE38str.x_DWORD_17DE38, 0x16u, 0x10u, 9u);
		sub_2BC10_draw_text((char*)"_", v11 + 2, v9, v12);
		x_DWORD_17DE38str.x_DWORD_17DED0 = v26;
	}
LABEL_15:
	if (v30)
	{
		if (v30 == 1)
		{
			v13 = x_DWORD_17DE38str.x_DWORD_17DE50;
			v14 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157;//wizard name
			strcpy(v14,v13);
			/*do
			{
				v15 = *v13;
				*v14 = *v13;
				if (!v15)
					break;
				v16 = v13[1];
				v13 += 2;
				v14[1] = v16;
				v14 += 2;
			} while (v16);*/
			v17 = x_D41A0_BYTEARRAY_4_struct.player_name_57ar;//38cf89
			v18 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157;//wizard name
			strcpy(v17, v18);
			/*do
			{
				v19 = *v18;
				*v17 = *v18;
				if (!v19)
					break;
				v20 = v18[1];
				v18 += 2;
				v17[1] = v20;
				v17 += 2;
			} while (v20);*/
		}
		else
		{
			*x_D41A0_BYTEARRAY_4_struct.player_name_57ar = 0;//fixed x_D41A0_BYTEARRAY_4_struct.player_name_57 = 0;
		}
		v21 = x_DWORD_17DE38str.x_DWORD_17DE50;
		v22 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157;//wizard name
		strcpy(v21, v22);
		/*do
		{
			v23 = *v22;
			*v21 = *v22;
			if (!v23)
				break;
			v24 = v22[1];
			v22 += 2;
			v21[1] = v24;
			v21 += 2;
		} while (v24);*/
		sub_7C020(a3 + 13);
		v28 = 1;
	}
	return v28;
}

//----- (00079160) --------------------------------------------------------
char sub_79160_set_joystick_dialog(Bit8u* a1)//25a160
{
	int16_t *v1; // esi
	int v2; // eax
	int v3; // eax
	int v4; // edx
	int v5; // ebx
	int v6; // ebx
	int16_t *v7; // esi
	char *v8; // ST00_4
	int v9; // ebx
	int16_t *v10; // esi
	int v11; // eax
	x_WORD *v12; // esi
	int v13; // eax
	int v14; // esi
	unsigned int v15; // ebx
	int16_t v16; // cx
	uint8_t v18; // al
	Bit16s v19[10]; // [esp+0h] [ebp-4Ch]
	//int16_t v20; // [esp+Ah] [ebp-42h] //5
	//int16_t v21; // [esp+Ch] [ebp-40h] //6
	//int16_t v22; // [esp+Eh] [ebp-3Eh] //7
	//int16_t v23; // [esp+10h] [ebp-3Ch] //8
	unsigned int v24; // [esp+2Ch] [ebp-20h]
	x_WORD *v25; // [esp+30h] [ebp-1Ch]
	int v26; // [esp+34h] [ebp-18h]
	int16_t v27; // [esp+38h] [ebp-14h]
	int v28; // [esp+3Ch] [ebp-10h]
	char v29; // [esp+40h] [ebp-Ch]
	uint8_t v30; // [esp+44h] [ebp-8h]
	uint8_t v31; // [esp+48h] [ebp-4h]

	sub_6FC50(1);//fixed

	v25 = 0;
	v27 = 0;
	v1 = (int16_t *)(a1 + 26);
	v31 = sub_5BE80_test_pallette((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38, 0x3Fu, 0x3Fu, 0x3Fu);
	v30 = sub_5BE80_test_pallette((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38, 0, 0, 0);
	BYTE1(v2) = *(x_BYTE *)(a1 + 25);
	if (!BYTE1(v2))
	{
		LOWORD(v2) = *v1;
		v26 = v2 + 10;
		//HIWORD(v3) = HIWORD(x_DWORD_17DED4);
		LOWORD(v3) = xy_DWORD_17DED4_spritestr[72].width;
		v4 = *(int16_t *)(a1 + 34);
		v28 = v26 + v3 - 22;
		v5 = *(int16_t *)(a1 + 28) + v4 / 2;
		v6 = v5 - 2 * sub_6FC30_get34_height();
		v29 = sub_7BF20_draw_scroll_dialog((int16_t *)(a1 + 26));
		if (*(x_WORD *)(a1 + 36) >= *(x_WORD *)(a1 + 34))
		{
			v7 = (int16_t *)x_BYTE_E25ED_a3;
			sub_6FC50(1);
			while (v7[6])
			{
				if (v7[7])
				{
					sub_6FC50(1);
					v8 = (char *)x_DWORD_E9C4C_langindexbuffer[v7[6]];
					v25 = v7;
					sub_6FC80_pre_draw_text(v8, v26, v28, v6, v31);
				}
				else
				{
					sub_6FC50(1);
					sub_6FC80_pre_draw_text((char *)x_DWORD_E9C4C_langindexbuffer[v7[6]], v26, v28, v6, v30);
				}
				v7 += 9;
				LOWORD(v6) = sub_6FC30_get34_height() + v6;
			}
			v9 = *(int16_t *)(a1 + 28) + *(int16_t *)(a1 + 34) / 2;
			v6 = v9 - 2 * sub_6FC30_get34_height();
			v19[5] = v26;
			v10 = (int16_t *)x_BYTE_E25ED_a3;
			v19[7] = xy_DWORD_17DED4_spritestr[72].width;
			v19[8] = sub_6FC30_get34_height();
			while (v10[6])
			{
				v19[6] = v6;
				if (sub_7B200_in_region(v19, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
				{
					if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
					{
						if (v25)
							v25[7] = 0;
						v10[7] = 1;
					}
					sub_6FC50(1);
					sub_6FC80_pre_draw_text((char *)x_DWORD_E9C4C_langindexbuffer[v10[6]], v26, v28, v6, v31);
				}
				LOWORD(v11) = sub_6FC30_get34_height();
				v10 += 9;
				v6 += v11;
			}
		}
		if (v29)
		{
			v12 = (x_WORD*)x_BYTE_E25ED_a3;
			while (v12[6])
			{
				if (v12[7])
				{
					v25 = v12;
					break;
				}
				LOWORD(v13) = sub_6FC30_get34_height();
				v12 += 9;
				v6 += v13;
			}
			if (v29 != 1)
			{
				switch (unk_18058Cstr.x_WORD_1805C2_joystick)
				{
				case 4:
				case 11:
					unk_18058Cstr.x_WORD_1805C2_joystick = 7;
					break;
				case 8:
					unk_18058Cstr.x_WORD_1805C2_joystick = 1;
					break;
				case 9:
					unk_18058Cstr.x_WORD_1805C2_joystick = 2;
					break;
				default:
					goto LABEL_41;
				}
				goto LABEL_41;
			}
			v27 = 1;
			v14 = (uint16_t)unk_18058Cstr.x_WORD_1805C2_joystick;
			if (!v25)
				goto LABEL_42;
			v15 = (uint16_t)unk_18058Cstr.x_WORD_1805C2_joystick - 1;
			v24 = 4 * v15;
			v16 = v25[8];
			if (v16 == 2)
			{
				if ((int16_t)sub_89B60_aplicate_setting(4u) == -1)
				{
					unk_18058Cstr.x_WORD_1805C2_joystick = v14;
				}
				else if (v15 <= 0xC)
				{
					//fix it JUMPOUT(__CS__, (int*) *(void **)((char *)&off_790E4 + v24));
				}
			LABEL_41:
				v27 = 1;
				goto LABEL_42;
			}
			if (v16 != 1)
			{
			LABEL_42:
				sub_7C020((x_WORD *)(a1 + 26));
				return v27;
			}
			if (sub_89B60_aplicate_setting(0xBu) != -1)
			{
				if (v15 <= 8)
					//fix it JUMPOUT(__CS__, (int*) *(void **)((char *)&off_79118 + v24));
				*(x_BYTE *)(a1 + 25) = 1;
				v27 = 0;
				goto LABEL_42;
			}
			unk_18058Cstr.x_WORD_1805C2_joystick = v14;
			sub_7C020((x_WORD *)(a1 + 26));
		}
		return v27;
	}
	v27 = 0;
	if (BYTE1(v2) >= 1u)
	{
		if (BYTE1(v2) <= 1u)
		{
			*(x_WORD *)(a1 + 38) = 439;
			*(x_WORD *)(a1 + 42) = 0;
		}
		else if (BYTE1(v2) == 2)
		{
			*(x_WORD *)(a1 + 38) = 439;
		}
	}
	sub_7BF20_draw_scroll_dialog(v1);
	if (*(x_WORD *)(a1 + 36) < *(x_WORD *)(a1 + 34))
		return v27;
	v18 = *(x_BYTE *)(a1 + 25);
	if (v18 < 2u)
	{
		if (v18 == 1)
		{
			*(x_BYTE *)(a1 + 25) = 2;
			return v27;
		}
		return v27;
	}
	if (v18 > 2u)
	{
		if (v18 != 3)
			return v27;
		*(x_BYTE *)(a1 + 25) = 0;
		*(x_WORD *)(a1 + 38) = 411;
		*(x_WORD *)(a1 + 42) = 3;
		sub_7C020((x_WORD *)(a1 + 26));
		return 1;
	}
	x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 0;
	sub_8C0E0((uint8_t(/*__fastcall*/ *)(signed int))sub_7A060_get_mouse_and_keyboard_events);
	if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == 1)
	{
		if ((uint16_t)unk_18058Cstr.x_WORD_1805C2_joystick < 0xCu)
		{
			if (unk_18058Cstr.x_WORD_1805C2_joystick == 11)
				unk_18058Cstr.x_WORD_1805C2_joystick = 7;
		}
		else if ((uint16_t)unk_18058Cstr.x_WORD_1805C2_joystick <= 0xCu)
		{
			unk_18058Cstr.x_WORD_1805C2_joystick = 1;
		}
		else if (unk_18058Cstr.x_WORD_1805C2_joystick == 13)
		{
			unk_18058Cstr.x_WORD_1805C2_joystick = 2;
		}
	}
	++*(x_BYTE *)(a1 + 25);
	return v27;
}

/*void Debug_Blit()
{
	sub_75200_VGA_Blit640(480);
}*/

//----- (00079610) --------------------------------------------------------
char sub_79610_set_keys_dialog()//25a610
{
	int v0; // eax
	int16_t v1; // si
	int16_t *v2; // ebx
	Bit8u* temp_screen_buffer; // edi
	int v4; // ST0C_4
	int v5; // ST04_4
	char* v6; // ST00_4
	x_WORD *i; // eax
	x_WORD *j; // ebx
	x_WORD *k; // eax
	x_WORD *l; // eax
	Bit8u* v13; // ebx
	Bit16s* v14; // edi
	Bit8u* m; // edi
	int16_t v16; // ax
	int v17; // eax
	char v18; // dl
	Bit8u* n; // eax
	int16_t v20; // ax
	int v21; // eax
	char v22; // dl
	Bit8u* ii; // eax
	int16_t v24; // dx
	unsigned int v25; // eax
	//int v26; // eax
	char v28[60]; // [esp+0h] [ebp-16h]
	Bit16s v29[10]; // [esp+3Ch] [ebp+26h]
	//int16_t v30; // [esp+46h] [ebp+30h]
	//int16_t v31; // [esp+48h] [ebp+32h]
	//int16_t v32; // [esp+4Ah] [ebp+34h]
	//int16_t v33; // [esp+4Ch] [ebp+36h]
	int v34; // [esp+68h] [ebp+52h]
	int v35; // [esp+6Ch] [ebp+56h]
	int v36; // [esp+70h] [ebp+5Ah]
	unsigned int v37; // [esp+74h] [ebp+5Eh]
	int v38; // [esp+78h] [ebp+62h]
	int v39; // [esp+7Ch] [ebp+66h]
	int v40; // [esp+80h] [ebp+6Ah]
	int v41; // [esp+84h] [ebp+6Eh]
	int v42; // [esp+88h] [ebp+72h]
	int v43; // [esp+8Ch] [ebp+76h]
	int v44; // [esp+90h] [ebp+7Ah]
	int v45; // [esp+94h] [ebp+7Eh]

	//HIWORD(v0) = HIWORD(x_DWORD_17DED4);
	v1 = 0;
	v39 = 359;
	v43 = 372;
	v42 = 410;
	v44 = 0;
	v41 = 0;
	v0 = xy_DWORD_17DED4_spritestr[107].height;
	v45 = 191;
	//LOWORD(v0) = (uint8_t)v0;
	v40 = v0;
	v38 = j___clock();
	v35 = v38;
	memset(v28, 0, 60);
	//v2 = (int16_t *)&unk_E28A8;
	v2 = (int16_t *)x_BYTE_E25ED_2BB;
	sub_7A110_load_hscreen(x_WORD_180660_VGA_type_resolution, 15);
	temp_screen_buffer = x_DWORD_180628b_screen_buffer;
	x_DWORD_180628b_screen_buffer = x_DWORD_E9C38_smalltit;
	while (v2[0])
	{
		v4 = v2[1];
		v5 = v2[0];
		v6 = x_DWORD_E9C4C_langindexbuffer[v2[6]];
		v2 += 9;//ok
		// FIXME: types
		// sub_7FCB0_draw_text_with_border((int)v2, v6, v5, v39, v4, 4, 0, 0);
	}
	x_DWORD_180628b_screen_buffer = temp_screen_buffer;
	sub_7B5A0_disable_enable();
	for (i = (x_WORD*)x_BYTE_E25ED_2BB; *i; *(i - 2) = 0)//delete
		i += 9;
	x_BYTE_E25ED_2BB[14] = 1;

	sub_8CD27_set_cursor(xy_DWORD_17DED4_spritestr[110]);
	while (v44 != 2)
	{
		v34 = j___clock();
		v36 = v34;
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_9A128_copy_screen_320((void*)x_DWORD_E9C38_smalltit, (void*)x_DWORD_180628b_screen_buffer, 0xC8u);
		else
			sub_9A144_copy_screen_640((void*)x_DWORD_E9C38_smalltit, (void*)x_DWORD_180628b_screen_buffer, 0x1E0u);
		//backgroung
		if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)//switch blocks
		{
			for (j = (x_WORD*)x_BYTE_E25ED_2BB; *j; j += 9)//?
			{
				v29[5] = v45;
				v29[6] = j[1] - 4;
				v29[7] = v42;
				v29[8] = v40;
				if (sub_7B200_in_region(v29, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
				{
					for (k = (x_WORD*)x_BYTE_E25ED_2BB; *k; *(k - 2) = 0)
						k += 9;//?
					j[7] = 1;
					v1 = 0;
					break;
				}
			}
		}
		v44 = sub_7E1F0_test_mouse_regions();
		if (v44 == 1)
		{
			x_D41A0_BYTEARRAY_4_struct.setting_38402 = 1;
			sub_5BCC0_set_any_variables1();
			for (l = (x_WORD*)x_BYTE_E25ED_2BB; *l; *(l - 2) = 0)
				l += 9;
			v1 = 0;
			x_BYTE_E25ED_2BB[14] = 1;
		}
		v13 = &x_BYTE_EB39E_keys[0];//2bc39e
		v14 = (Bit16s*)x_BYTE_E25ED_2BB;
		while (v13 < &x_BYTE_EB39E_keys[9] + 1)//drawing texts
		{
			memset(v28, 0, 60);
			if (!v14[7])
			{
				sub_79E10(v28, *v13);
				// FIXME: types
				// sub_7FCB0_draw_text_with_border((int)v13, v28, v43, v42, v14[1], 4, 0, 0);
			}
			v13++;
			v14 += 9;
		}
		v2 = (int16_t *)x_BYTE_E25ED_2BB;
		for (m = &x_BYTE_EB39E_keys[0]; m < &x_BYTE_EB39E_keys[9] + 1 && !v1; ++m)
		{
			v16 = v2[7];
			if (v16 >= 1u)
			{
				v37 = v34 - v38;
				if (v16 <= 1u)
				{
					memset(v28, 0, 60);
					sub_79E10((char*)v28, *m);
					// FIXME: types
					// sub_7FCB0_draw_text_with_border((int)v2, v28, v43, v42, v2[1], 4, 0, 0);
					if (v37 > 0x32)
					{
						v17 = v34;
						v2[7] = 2;
						v38 = v17;
					}
					sub_2BB40_draw_bitmap(v45, v2[1], xy_DWORD_17DED4_spritestr[107]);
					if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode && sub_79E10((char*)v28, x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode))
					{
						v18 = 0;
						if (m != &x_BYTE_EB39E_keys[6])
						{
							for (n = &x_BYTE_EB39E_keys[0]; n < &x_BYTE_EB39E_keys[9] + 1; n++)
							{
								if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == *n)
								{
									v18 = 1;
									break;
								}
							}
						}
						if (!v18)
						{
							x_D41A0_BYTEARRAY_4_struct.setting_38402 = 1;
							v2 += 9;//?
							*m = x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode;
							*(v2 - 2) = 0;
							v20 = *v2;
							x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 0;
							if (v20)
							{
								v2[7] = 1;
							}
							else
							{
								v1 = 1;
								v38 = v34;
							}
						}
					}
				}
				else if (v16 == 2)
				{
					if ((v34 - v38) > 0x32)
					{
						v21 = v34;
						v2[7] = 1;
						v38 = v21;
					}
					sub_2BB40_draw_bitmap(v45, v2[1], xy_DWORD_17DED4_spritestr[107]);
					if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode)
					{
						if (sub_79E10((char*)v28, x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode))
						{
							v22 = 0;
							if (m != &x_BYTE_EB39E_keys[9] + 1)
							{
								for (ii = &x_BYTE_EB39E_keys[0]; ii < &x_BYTE_EB39E_keys[9] + 1; ++ii)
								{
									if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == *ii)
									{
										v22 = 1;
										break;
									}
								}
							}
							if (!v22)
							{
								x_D41A0_BYTEARRAY_4_struct.setting_38402 = 1;
								*m = x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode;
								v2[7] = 0;
								x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 0;
								v24 = v2[9];
								v2 += 9;
								if (v24)
									v2[7] = 1;
								else
									v1 = 1;
							}
						}
					}
				}
			}
			v2 += 9;
		}
		//?
		if (v1 >= 1u)
		{
			v25 = v34 - v38;
			if (v1 <= 1u)
			{
				if (v25 > 0x32)
				{
					v1 = 2;
					v38 = v34;
				}
				sub_2BB40_draw_bitmap(283, 381, xy_DWORD_17DED4_spritestr[108]);
			}
			else if (v1 == 2 && v25 > 0x32)
			{
				v1 = 1;
				v38 = v34;
			}
		}
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_90478_VGA_Blit320();
		else
			sub_75200_VGA_Blit640(480);
		if (!v41)
		{
			sub_90B27_VGA_pal_fadein_fadeout(x_DWORD_17DE38str.x_DWORD_17DE38, 0x20u, 0);
			v41 = 1;
		}
		if ((v36 - v35) > 0xA)
		{
			sub_7A060_get_mouse_and_keyboard_events();
			v35 = v36;
		}
		if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == 1)
			v44 = 2;
		if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == 0x1c)
		{
			if (v1)
				v44 = 2;
		}
	}
	sub_81DB0_read_config();
	sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		sub_72883_clear_graphics_320((void *)x_DWORD_180628b_screen_buffer, 0xC8u, 0);
	}
	else
	{
		sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, 0);
	}
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_72883_clear_graphics_320((void *)x_DWORD_E9C38_smalltit, 0xC8u, 0);
	else
		sub_728A9_clear_graphics_640((void *)x_DWORD_E9C38_smalltit, 0x1E0u, 0);
	sub_7B5A0_disable_enable();
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_90478_VGA_Blit320();
	else
		sub_75200_VGA_Blit640(480);
	sub_7AA70_load_and_decompres_dat_file(file_handling->getFilePath(MC2File::data_screens_hscreen0_dat).c_str(), x_DWORD_17DE38str.x_DWORD_17DE38, 0, 768);
	sub_7AA70_load_and_decompres_dat_file(file_handling->getFilePath(MC2File::data_screens_hscreen0_dat).c_str(), x_DWORD_17DE38str.x_DWORD_17DE40, x_DWORD_17DE38str.x_DWORD_17DEDC, 168081);
	sub_7AA70_load_and_decompres_dat_file(0, 0, 0, 0);
	sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]);
	sub_41A90_VGA_pallette_install(x_DWORD_17DE38str.x_DWORD_17DE38);
	sub_8CD27_set_cursor(xy_DWORD_17DED4_spritestr[39]);
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_9A128_copy_screen_320((void*)x_DWORD_180628b_screen_buffer, (void*)x_DWORD_E9C38_smalltit, 0xC8u);
	else
		sub_9A144_copy_screen_640((void*)x_DWORD_180628b_screen_buffer, (void*)x_DWORD_E9C38_smalltit, 0x1E0u);
	return 1;
}

//----- (00079E10) --------------------------------------------------------
signed int sub_79E10(char *a1, char a2)
{
	signed int result; // eax

	result = 0;
	switch (a2)
	{
	case 12://0c
	case 13://0d
		strcpy(a1, "- ");
		result = 1;
		break;
	case 16://10
		strcpy(a1,"Q ");
		result = 1;
		break;
	case 17://11
		strcpy(a1, "W ");
		result = 1;
		break;
	case 18://12
		strcpy(a1, "E ");
		result = 1;
		break;
	case 20://14
		strcpy(a1, "T ");
		result = 1;
		break;
	case 21://15
		strcpy(a1, "Y ");
		result = 1;
		break;
	case 22://16
		strcpy(a1, "U ");
		result = 1;
		break;
	case 28://1c
		result = 1;
		strcpy(a1, "ENTER");
		break;
	case 29://1d
		result = 1;
		strcpy(a1, "CTRL");
		break;
	case 30://1e
		strcpy(a1, "A ");
		result = 1;
		break;
	case 33://21
		strcpy(a1, "F ");
		result = 1;
		break;
	case 34://22
		strcpy(a1, "G ");
		result = 1;
		break;
	case 35://23
		strcpy(a1, "H ");
		result = 1;
		break;
	case 36://24
		strcpy(a1, "J ");
		result = 1;
		break;
	case 37://25
		strcpy(a1, "K ");
		result = 1;
		break;
	case 39://27
		strcpy(a1, "; ");
		result = 1;
		break;
	case 42://2a
		result = 1;
		strcpy(a1, "Left Shift");
		break;
	case 43://2b
		strcpy(a1, "# ");
		result = 1;
		break;
	case 44://2c
		strcpy(a1, "Z ");
		result = 1;
		break;
	case 45://2d
		strcpy(a1, "X ");
		result = 1;
		break;
	case 48://30
		strcpy(a1, "B ");
		result = 1;
		break;
	case 49://31
		strcpy(a1, "N ");
		result = 1;
		break;
	case 51://33
		strcpy(a1, ", ");
		result = 1;
		break;
	case 52://34
		strcpy(a1, ". ");
		result = 1;
		break;
	case 53://35
		strcpy(a1, "/ ");
		result = 1;
		break;
	case 54://36
		result = 1;
		strcpy(a1, "Right Shift");
		break;
	case 56://38
		strcpy(a1, "Alt");
		result = 1;
		break;
	case 72://48
		result = 1;
		strcpy(a1, "UP");
		break;
	case 75://4b
		result = 1;
		strcpy(a1, "LEFT");
		break;
	case 77://4d
		result = 1;
		strcpy(a1, "RIGHT");
		break;
	case 80://50
		result = 1;
		strcpy(a1, "DOWN");
		break;
	default:
		return result;
	}
	return result;
}

//----- (0007A060) --------------------------------------------------------
void sub_7A060_get_mouse_and_keyboard_events()//25B060
{
	//char result; // al

	x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons = 0;
	if (x_WORD_180746_mouse_left_button)
		x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons = 1;
	if (x_WORD_180744_mouse_right_button)
		x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons |= 2;
	x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx = x_WORD_E3760_mouse.x;//2b4760
	x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony = x_WORD_E3760_mouse.y;//2b4762
	sub_7C050_get_keyboard_keys1();
	//result = x_BYTE_17DF10_get_key_scancode;
	x_WORD_180744_mouse_right_button = 0;
	x_WORD_180746_mouse_left_button = 0;
	x_WORD_18074A_mouse_right2_button = 0;
	x_WORD_18074C_mouse_left2_button = 0;
	//return result;
}

//----- (0007A110) --------------------------------------------------------
void sub_7A110_load_hscreen(char a1, char a2)//25b110
{
	//int v2; // eax

	x_DWORD_17DE38str.x_DWORD_17DE38 = *xadatapald0dat2.var28_begin_buffer;
	x_DWORD_17DE38str.x_WORD_17DEEC = 0;
	x_DWORD_17DE38str.x_DWORD_17DE40 = x_DWORD_180628b_screen_buffer;
	x_DWORD_17DE38str.x_DWORD_17DEE0_filedesc = NULL;
	x_DWORD_17DE38str.x_DWORD_17DEDC = 0;
	x_DWORD_17DE38str.x_DWORD_17DE48c = x_D41A0_BYTEARRAY_4_struct.heapbuffer.data();
	sub_7B5D0();//25c5d0
	std::filesystem::path path_hscreen0dat = file_handling->getFilePath(MC2File::data_screens_hscreen0_dat);

	if (a1 == 8)
	{
		switch (a2)
		{
		case 4:
			x_DWORD_17DE38str.x_DWORD_17DED8 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 0x36f44];//(Bit8u*)&loc_36F44 + x_DWORD_17DE48c;
			x_DWORD_17DE38str.x_DWORD_17DED4 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 0x36c44];//(Bit8u*)&loc_36CAA + x_DWORD_17DE48c;
			x_DWORD_17DE38str.x_DWORD_17DE4C = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 0x36f44 + 2];//(Bit8u*)&loc_36F44 + x_DWORD_17DE48c + 2;
			x_DWORD_17DE38str.x_DWORD_17DE54 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 0x36f44 + 16386];//(Bit8u*)&loc_36F44 + x_DWORD_17DE48c + 16386;
			x_DWORD_17DE38str.x_DWORD_17DEC4 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 0x36f44 + 24631];//(Bit8u*)&loc_36F44 + x_DWORD_17DE48c + 24631;
			x_DWORD_17DE38str.x_DWORD_17DE50 = (char*)&x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 0x36f44 + 24631];//(Bit8u*)&loc_36F44 + x_DWORD_17DE48c + 24631;
			x_DWORD_17DE38str.x_DWORD_17DEC0 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 0x36f44 + 22999];//(Bit8u*)&loc_36F44 + x_DWORD_17DE48c + 22999;
			qmemcpy(&x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 0x36f44 + 24631],
				//(char *)&loc_36F44 + x_DWORD_17DE48c + 24631,
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157,//wizard name
				0x20u);
			x_DWORD_E9C38_smalltit = (Bit8u*)x_DWORD_17DE38str.x_DWORD_17DE50 + 32;
			sub_7AA70_load_and_decompres_dat_file(file_handling->getFilePath(MC2File::data_screens_hscreen0_dat).c_str(), x_DWORD_17DE38str.x_DWORD_17DE38, 0, 768);
			sub_7AA70_load_and_decompres_dat_file(file_handling->getFilePath(MC2File::data_screens_hscreen0_dat).c_str(), x_DWORD_E9C38_smalltit, x_DWORD_17DE38str.x_DWORD_17DEDC, 168081);
			sub_7AA70_load_and_decompres_dat_file(file_handling->getFilePath(MC2File::data_screens_hscreen0_dat).c_str(), x_DWORD_17DE38str.x_DWORD_17DE48c, x_DWORD_17DE38str.x_DWORD_17DEDC, 102213);
			sub_7AA70_load_and_decompres_dat_file(file_handling->getFilePath(MC2File::data_screens_hscreen0_dat).c_str(), x_DWORD_17DE38str.x_DWORD_17DED4, x_DWORD_17DE38str.x_DWORD_17DEDC, 411);//19b
			sub_7AA70_load_and_decompres_dat_file(file_handling->getFilePath(MC2File::data_screens_hscreen0_dat).c_str(), x_DWORD_17DE38str.x_DWORD_17DE54, 0x13ACCA, 1226);
			sub_7AA70_load_and_decompres_dat_file(file_handling->getFilePath(MC2File::data_screens_hscreen0_dat).c_str(), x_DWORD_17DE38str.x_DWORD_17DEC0, 0x13B194, 548);//25ba70
			sub_7AA70_load_and_decompres_dat_file(0, 0, 0, 0); // this call closes the file handle
			if (x_WORD_180660_VGA_type_resolution & 1)
				sub_98709_create_index_dattab_power(x_DWORD_17DE38str.x_DWORD_17DED4, x_DWORD_17DE38str.x_DWORD_17DED8, x_DWORD_17DE38str.x_DWORD_17DE48c, xy_DWORD_17DED4_spritestr);
			else
				sub_9874D_create_index_dattab(x_DWORD_17DE38str.x_DWORD_17DED4, x_DWORD_17DE38str.x_DWORD_17DED8, x_DWORD_17DE38str.x_DWORD_17DE48c, xy_DWORD_17DED4_spritestr);
			if (x_WORD_180660_VGA_type_resolution & 1)
				sub_98709_create_index_dattab_power(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr);
			else
				sub_9874D_create_index_dattab(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr);
			x_DWORD_17DE38str.x_WORD_17DF06 = 72;
			x_DWORD_17DE38str.x_WORD_17DF08 = 68;
			x_DWORD_17DE38str.x_WORD_17DF0A = 69;
			x_DWORD_17DE38str.x_WORD_17DF0C = 70;
			x_DWORD_17DE38str.x_WORD_17DF0E = 71;
			break;
		case 6://adress 25b533
			x_DWORD_17DE38str.x_DWORD_17DE54 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 301787];//(Bit8u*)x_DWORD_17DE48c + 301787;//49adb * //44ffef
			x_DWORD_17DE38str.x_DWORD_17DEC4 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 316179];//(Bit8u*)x_DWORD_17DE48c + 316179;//4d313 //453827
			x_DWORD_17DE38str.x_DWORD_17DE58 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 316179];//x_DWORD_17DE48c + 316179; * //453827
			x_DWORD_17DE38str.x_DWORD_17DEC8 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 322754];//x_DWORD_17DE48c + 322754; * //4551d6
			x_DWORD_17DE38str.x_DWORD_17DECC = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 324380];//x_DWORD_17DE48c + 324380; //455830
			x_DWORD_17DE38str.x_DWORD_17DED4 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 324380];//(Bit8u*)x_DWORD_17DE48c + 324380; *//455830
			x_DWORD_17DE38str.x_DWORD_17DED8 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 326258];//(Bit8u*)x_DWORD_17DE48c + 326258; //455f86
			x_DWORD_17DE38str.x_DWORD_17DE60 = x_DWORD_17DE38str.x_DWORD_17DE44;//* //3f52a4
			x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 326258];//x_DWORD_17DE48c + 326258; * //455f86
			x_DWORD_17DE38str.x_DWORD_17DE3C = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 0x12C000 + 326258];//(Bit8u*)&unk_12C000 + x_DWORD_17DE48c + 326258;//* //581f86
			x_DWORD_17DE38str.x_DWORD_17DEC0 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 314541];//(Bit8u*)x_DWORD_17DE48c + 314541; * //4531c1
			x_DWORD_17DE38str.x_DWORD_17DE5C_border_bitmap = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 0x12C000 + 326258 + 0x4000];//x_DWORD_17DE3C + 0x4000;//ok *//585f86
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE54, 0x1641FC, 1214);//*
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DEC0, 0x1646BA, 589);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE58, 0x164907, 1191);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DEC8, 0x164DAE, 543);//xx
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE38, 0x13A9CA, 768);//ok
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map, 0xB2C47, 0x87D83);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE48c, 0x783BD, 103577);//ok
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DED4, 0x91856, 1027);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE3C, 0x13B3B8, 6760);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE60, 0x13CE20, 20581);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE5C_border_bitmap, 0x141E85, 13195);
			sub_7AA70_load_and_decompres_dat_file(0, 0, 0, 0);
			if (x_WORD_180660_VGA_type_resolution & 1)
			{
				sub_98709_create_index_dattab_power(x_DWORD_17DE38str.x_DWORD_17DED4, x_DWORD_17DE38str.x_DWORD_17DED8, x_DWORD_17DE38str.x_DWORD_17DE48c, xy_DWORD_17DED4_spritestr);
				sub_98709_create_index_dattab_power(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr);//here
				sub_98709_create_index_dattab_power(x_DWORD_17DE38str.x_DWORD_17DEC8, x_DWORD_17DE38str.x_DWORD_17DECC, x_DWORD_17DE38str.x_DWORD_17DE58, xy_DWORD_17DEC8_spritestr);
			}
			else
			{
				sub_9874D_create_index_dattab(x_DWORD_17DE38str.x_DWORD_17DED4, x_DWORD_17DE38str.x_DWORD_17DED8, x_DWORD_17DE38str.x_DWORD_17DE48c, xy_DWORD_17DED4_spritestr);
				sub_9874D_create_index_dattab(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr);//here
				sub_9874D_create_index_dattab(x_DWORD_17DE38str.x_DWORD_17DEC8, x_DWORD_17DE38str.x_DWORD_17DECC, x_DWORD_17DE38str.x_DWORD_17DE58, xy_DWORD_17DEC8_spritestr);
			}

			x_DWORD_17DE38str.x_WORD_17DF06 = 254;
			x_DWORD_17DE38str.x_WORD_17DF08 = 255;
			x_DWORD_17DE38str.x_WORD_17DF0A = 256;
			x_DWORD_17DE38str.x_WORD_17DF0C = 257;
			x_DWORD_17DE38str.x_WORD_17DF0E = 258;
			x_DWORD_17DE38str.x_DWORD_17DEC0 += 6;
			xy_DWORD_17DEC0_spritestr = &xy_DWORD_17DEC0_spritestr[1];
			break;
		case 7:
			x_DWORD_17DE38str.x_DWORD_17DE48c += 371200;
			x_DWORD_17DE38str.x_DWORD_17DE54 = x_DWORD_17DE38str.x_DWORD_17DE48c + 42428;
			x_DWORD_17DE38str.x_DWORD_17DEC4 = x_DWORD_17DE38str.x_DWORD_17DE48c + 50673;
			x_DWORD_17DE38str.x_DWORD_17DED4 = x_DWORD_17DE38str.x_DWORD_17DE48c + 50673;
			x_DWORD_17DE38str.x_DWORD_17DED8 = x_DWORD_17DE38str.x_DWORD_17DE48c + 50871;
			x_DWORD_17DE38str.x_DWORD_17DE3C = x_DWORD_17DE38str.x_DWORD_17DE48c + 50871;
			x_DWORD_17DE38str.x_DWORD_17DE4C = x_DWORD_17DE38str.x_DWORD_17DE48c + 51639;
			x_DWORD_17DE38str.x_DWORD_17DEC0 = x_DWORD_17DE38str.x_DWORD_17DE48c + 49041;
			x_DWORD_17DE38str.x_DWORD_17DE50 = (char*)x_DWORD_17DE38str.x_DWORD_17DE48c + 68023;
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE38, 0x42471, 768);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_D41A0_BYTEARRAY_4_struct.heapbuffer.data(), x_DWORD_17DE38str.x_DWORD_17DEDC, 82233);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE48c, 0x568AA, 21216);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DED4, 375690, 148);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE54, 0x13ACCA, 1226);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DEC0, 0x13B194, 548);
			if (x_WORD_180660_VGA_type_resolution & 1)
			{
				sub_98709_create_index_dattab_power(x_DWORD_17DE38str.x_DWORD_17DED4, x_DWORD_17DE38str.x_DWORD_17DED8, x_DWORD_17DE38str.x_DWORD_17DE48c, xy_DWORD_17DED4_spritestr);
				sub_98709_create_index_dattab_power(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr);
			}
			else
			{
				sub_9874D_create_index_dattab(x_DWORD_17DE38str.x_DWORD_17DED4, x_DWORD_17DE38str.x_DWORD_17DED8, x_DWORD_17DE38str.x_DWORD_17DE48c, xy_DWORD_17DED4_spritestr);
				sub_9874D_create_index_dattab(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr);
			}
			break;
		case 12:
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_E9C38_smalltit, 0x91C59, 134382);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE38, 0xB2947, 768);
			break;
		case 14:
			x_DWORD_17DE38str.x_DWORD_17DE54 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 224426];
			x_DWORD_17DE38str.x_DWORD_17DEC4 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 232671];
			x_DWORD_17DE38str.x_DWORD_17DED4 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 232671];
			x_DWORD_17DE38str.x_DWORD_17DED8 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 233337];
			x_DWORD_17DE38str.x_DWORD_17DE4C = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 233339];
			x_DWORD_17DE38str.x_DWORD_17DE50 = (char*)&x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 249723];
			x_DWORD_17DE38str.x_DWORD_17DEC0 = &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 231039];
			qmemcpy(
				&x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A + 249723],
				D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].array_0x39f_2BFA_12157,//wizard name
				0x20u);//fix it
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE54, 0x13ACCA, 1226);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DEC0, 0x13B194, 548);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A], 168849, 102213);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DED4, 271062, 411);//19b
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_D41A0_BYTEARRAY_4_struct.heapbuffer.data(), 0x91C59, 134382);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE38, 0xB2947, 768);
			if (x_WORD_180660_VGA_type_resolution & 1) {
				sub_98709_create_index_dattab_power(x_DWORD_17DE38str.x_DWORD_17DED4, x_DWORD_17DE38str.x_DWORD_17DED8, &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A], xy_DWORD_17DED4_spritestr);
				sub_98709_create_index_dattab_power(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr);
			}
			else
			{
				sub_9874D_create_index_dattab(x_DWORD_17DE38str.x_DWORD_17DED4, x_DWORD_17DE38str.x_DWORD_17DED8, &x_D41A0_BYTEARRAY_4_struct.heapbuffer[0x4D54A], xy_DWORD_17DED4_spritestr);
				sub_9874D_create_index_dattab(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr);
			}
			break;
		case 15:
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), (Bit8u*)x_DWORD_E9C38_smalltit, 0x145210, 126188);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), (Bit8u*)x_DWORD_17DE38str.x_DWORD_17DE38, 0x163EFC, 768);
			break;
		default:
			return;
		}
	}
}

//----- (0007AA70) --------------------------------------------------------
void sub_7AA70_load_and_decompres_dat_file(const char* path, Bit8u* filebuffer, int position, int lenght)//25ba70
{
	//FILE* result; // eax

	if (x_DWORD_17DE38str.x_DWORD_17DEE0_filedesc != NULL || (x_DWORD_17DE38str.x_DWORD_17DEE0_filedesc = sub_98817_open(path, 512)))
	{
		//result = x_DWORD_17DEE0_filedesc;
		if (x_DWORD_17DE38str.x_DWORD_17DEE0_filedesc != NULL)
		{
			if (filebuffer)
			{
				sub_9891E_seek(x_DWORD_17DE38str.x_DWORD_17DEE0_filedesc, position, 0);
				sub_988A7_read(x_DWORD_17DE38str.x_DWORD_17DEE0_filedesc, filebuffer, lenght);
				sub_5C3D0_file_decompress(filebuffer, filebuffer);
				x_DWORD_17DE38str.x_DWORD_17DEDC = lenght + position;//endbuffer
			}
			else
			{
				sub_98882_close(x_DWORD_17DE38str.x_DWORD_17DEE0_filedesc);
				x_DWORD_17DE38str.x_DWORD_17DEE0_filedesc = NULL;
			}
		}
	}
	//return result;
}

//----- (0007AB00) --------------------------------------------------------
void sub_7AB00_draw_menu_animations(/*int16_t a1,*/ /*int a2,*/ /*type_str_unk_E1748* a3,*/ uint8_t a4)//25bb00
{
	//Bit8u* v4; // esi
	int v5; // eax
	int v6; // edi
	//int16_t v7; // ax
	Bit8u* i; // ebx
	int v10; // [esp+0h] [ebp-4h]

	//HIBYTE(a1) = a4;//04
	//v4 = 0;
	type_str_unk_E1748* a3x = 0;
	if (a4 == 4u)
	{
		a3x = unk_E1748x;
	}
	else if (a4 == 6u)
	{
		a3x = unk_E1784x;
	}
	int ii = 0;
	while (a3x[ii].word_4)//fair animation
	{
		/*
		43d1be
		43d1f4 9c 213
		*/
		v5 = j___clock();
		v6 = v5;
		v10 = v5;
		sub_2BB40_draw_bitmap(a3x[ii].word_4, a3x[ii].word_6, xy_DWORD_17DED4_spritestr[a3x[ii].word_8]);
		if ((v6 - a3x[ii].dword_0) >> 2 >= 1)
		{
			//a2 = a3x[ii].word_8 + 1;
			a3x[ii].word_8++;
			//v7 = a3x[ii].byte_11;
			//a3[4] = a2;
			if (a3x[ii].byte_11 < a3x[ii].word_8)
				a3x[ii].word_8 = a3x[ii].byte_10;
			//a1 = v10;
			a3x[ii].dword_0 = v10;
		}
		ii++;
		//a3 += 6;
	}
	if (a4 == 4)//draw gold selected buttons
	{
		for (i = off_E1BAC; *((Bit32s*)(i + 10)); i += 44)
		{
			if (i[23] && i[24])
			{
				//v4 = i;
				sub_2BB40_draw_bitmap(*((Bit16s*)i + 5), *((Bit16s*)i + 6), xy_DWORD_17DED4_spritestr[i[21]]);
			}
		}
	}
	//return v4;
}


//----- (0007B200) --------------------------------------------------------
bool sub_7B200_in_region(Bit16s* a1, Bit16s testx, Bit16s testy)//25c200
{
	Bit16s minx; // dx
	Bit16s miny; // bx
	bool result; // eax

	minx = a1[5];
	result = 0;
	if (testx >= minx && testx < minx + a1[7])
	{
		miny = a1[6];
		if (testy >= miny && testy < miny + a1[8])
			result = 1;
	}
	return result;
}

bool pre_sub_7B250_draw_and_serve(Bit32u var, Bit8u* var2) {
	bool callres = true;
	switch (var) {
	case 0x258350: {
		return sub_77350_new_game_dialog(var2);//258350 - new game
		break;
	}
	case 0x258980: {
		return sub_77980_exit_dialog(var2);//exit dialog
		break;
	}
	case 0x2589e0: {
		return sub_779E0_lang_setting_dialog(var2);
		break;
	}
	case 0x2590f0: {
		return sub_780F0_load_game_dialog(var2);//2590f0 - load
		break;
	}
	case 0x259730: {
		return sub_78730_save_game_dialog((Bit16s*)var2);//259730 -save
		break;
	}
	case 0x259e00: {
		return sub_78E00_set_player_name_dialog((Bit16s*)var2);//set user name
		break;
	}
	case 0x25a160: {//set joystick
		return sub_79160_set_joystick_dialog(var2);
		break;
	}
	case 0x25a610: {//set keys
		return sub_79610_set_keys_dialog();
		break;
	}
	case 0x25dcf0: {
		return sub_7CCF0(/*var*/);
		break;
	}
	case 0x25dd30: {
		return sub_7CD30(/*var*/);
		break;
	}
	case 0x25dca0: {
		return sub_7CCA0(/*var*/);
		break;
	}
	case 0x25dda0: {
		return sub_7CDA0(/*var*/);
		break;
	}
	case 0x25dbf0: {
		return sub_7CBF0(/*var*/);
		break;
	}
	case 0x25dc40: {
		return sub_7CC40(/*var*/);
		break;
	}
	}
	return callres;
}

//----- (0007B250) --------------------------------------------------------
char /*__fastcall*/ sub_7B250_draw_and_serve(/*int a1, int a2*//*, int16_t a3*/)//25c250
{
	Bit8u* i; // esi
	char result; // al
	Bit8u* j; // esi
	char v6; // ah
	int16_t v7; // bx
	Bit8u* v8; // esi
	Bit8u* v9; // edi
	Bit8u* v10; // edi
	//int v11; // eax
	int v12; // edx
	int v13; // eax
	Bit8u v14ar[0x24]; // [esp+0h] [ebp-24h]
	//Bit8u v15[2]; // [esp+10h] [ebp-14h]//v14ar[0x10]

	//fix it
	v12 = 0;
	//fix it

	for (i = off_E1BAC; *((Bit16s*)i + 5); i += 44)
	{
		if (*((Bit16s*)i + 4) && *(Bit16s*)i)
		{
			if (pre_sub_7B250_draw_and_serve(*(Bit32u*)i, i))
			{
				*((Bit16s*)i + 4) = 0;
				sub_7B5A0_disable_enable();
			}
			if (*((Bit32s*)i + 1))
			{
				*((Bit16s*)i + 4) = 0;
				sub_6EDB0_set_mouse_position_by_res();
				sub_7A110_load_hscreen(x_WORD_180660_VGA_type_resolution, 4);
				sub_7B5A0_disable_enable();
				sub_8CD27_set_cursor(xy_DWORD_17DED4_spritestr[39]);
				if (*((Bit32s*)i + 1) == 2)
					*((Bit32s*)i + 1) = 0;
				return 1;
			}
			return 0;
		}
	}
	for (j = off_E1BAC; *((Bit16s*)j + 5); j += 44)//clear/set off_E1BAC
	{
		*((Bit16s*)j + 4) = 0;
		v6 = x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode;
		j[24] = 0;
		if (v6 == 1 && j[22] == 11)
			*((Bit16s*)j + 4) = 1;
	}
	if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == 1)
	{
		x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 0;
	}
	else
	{
		j = off_E1BAC;
		if (*(Bit16s*)&off_E1BAC[10])
		{
			while (!sub_7B200_in_region((Bit16s*)j, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony) || !j[23])
			{
				j += 44;
				if (!*((Bit16s*)j + 5))
					goto LABEL_28;
			}
			if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
			{
				sub_8F100_sound_proc19(0, 14, 127, 64, 0x64u, 0, 3u);
				*((Bit16s*)j + 4) = 1;
				sub_7B5A0_disable_enable();
			}
			else
			{
				j[24] = 1;
				x_BYTE_17DBC6 = 1;
			}
		}
	}
LABEL_28:
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10 != 1 || !x_DWORD_17DE38str.x_BYTE_17DF13 || x_WORD_E29DC)
		return 0;
	//a3 = x_BYTE_17DBC6;
	if (x_BYTE_17DBC6 == 2)
	{
		x_DWORD_17DBB8[1] = j___clock();
		if ((x_DWORD_17DBB8[1] - x_DWORD_17DBB8[0]) / 0x64u > 1)
		{
			v7 = unk_E25DC[2 + 18 * (x_WORD_17DBC4++ + 1)];
			if (!v7)
				x_WORD_17DBC4 = 0;
			x_DWORD_17DBB8[0] = x_DWORD_17DBB8[1];
		}
		memset(v14ar, 0, 36);
		v8 = &unk_E25DC[18 * x_WORD_17DBC4];
		qmemcpy(v14ar, v8, 0x10u);
		qmemcpy(&v14ar[0x10], v8 + 0x10, 2u);
		v9 = off_E1BAC;
		sub_7E840_draw_textbox_with_line((Bit16u*)v14ar, 80, 89);
		if (!*(Bit16s*)&off_E1BAC[10])
			return 0;
		do
		{
			if (v9[22] == x_BYTE_E25ED_0x[18 * x_WORD_17DBC4])
			{
				v9[24] = 1;//turn on gold selection
				return 0;
			}
			v9 += 44;
		} while (*((Bit16s*)v9 + 5));
		result = 0;
	}
	else
	{
		if (x_BYTE_17DBC6 == 3)
		{
			x_DWORD_17DBB8[1] = j___clock();
			if ((x_DWORD_17DBB8[1] - x_DWORD_17DBB8[0]) / 0x64u > 1)
			{
				x_BYTE_17DBC6 = 2;
				return 0;
			}
			return 0;
		}
		v10 = (Bit8u*)&unk_E25DC;//2b35dc
		if (*((Bit16s*)&unk_E25DC + 1))
		{
			while (v10[17] != j[22])
			{
				v10 += 9;
				if (!v10[1])
					return 0;
			}
			memset(v14ar, 0, 36);
			qmemcpy(v14ar, v10, 0x10u);
			qmemcpy(&v14ar[0x10], v10 + 8, 2u);
			sub_7E840_draw_textbox_with_line((Bit16u*)v14ar, 80, 89);
			v13 = j___clock();
			x_DWORD_17DBB8[1] = v13;
			x_DWORD_17DBB8[0] = v13;
			x_BYTE_17DBC6 = 3;
			result = 0;
		}
		else
		{
			result = 0;
		}
	}
	return result;
}

//----- (0007B5A0) --------------------------------------------------------
void sub_7B5A0_disable_enable()
{
	//_disable();
	x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons = 0;
	x_WORD_180744_mouse_right_button = 0;
	x_WORD_18074A_mouse_right2_button = 0;
	x_WORD_180746_mouse_left_button = 0;
	x_WORD_18074C_mouse_left2_button = 0;
	//_enable();
}

//----- (0007B5D0) --------------------------------------------------------
void sub_7B5D0()
{
	//int v0; // eax

	sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);
	/*v0 = (int)*/memset((void*)*xadatapald0dat2.var28_begin_buffer, 0, 768);
	//BYTE1(v0) = x_WORD_180660_VGA_type_resolution;
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_72883_clear_graphics_320(x_DWORD_180628b_screen_buffer, 0xC8u, 0);
	else
		sub_728A9_clear_graphics_640(x_DWORD_180628b_screen_buffer, 0x1E0u, 0);
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_90478_VGA_Blit320();
	else
		sub_75200_VGA_Blit640(480);
}

//----- (0007B660) --------------------------------------------------------
int sub_7B660_draw_scroll_dialog2(int a1, int a2, int16_t a3, x_WORD *a4, char* a5, char a6)//25c660
{
	//int v6; // ebx
	uint8_t v7; // al
	//Bit8u* v8; // edx
	//int16_t v9; // ax
	//int v10; // eax
	//int v11; // ecx
	//int v12; // eax
	//Bit8u* v13; // edx
	//int v14; // esi
	//int v15; // esi
	//int v16; // eax
	//Bit8u* v17; // ecx
	//int16_t v18; // bx
	//Bit8u* v19; // edx
	int16_t v20; // si
	int16_t v21; // ax
	int16_t v22; // cx
	int16_t v23; // bx
	int v24x; // edx
	//int v25x; // eax
	int v26; // eax
	int16_t v27; // cx
	//Bit8u* v28; // edx
	//Bit8u* v29; // eax
	int v30; // ebx
	uint8_t v31; // al
	Bit16s v33[9]; // [esp+0h] [ebp-4Ch]
	//int16_t v34; // [esp+Ah] [ebp-42h]
	//int16_t v35; // [esp+Ch] [ebp-40h]
	//int16_t v36; // [esp+Eh] [ebp-3Eh]
	//int16_t v37; // [esp+10h] [ebp-3Ch]
	//int v38; // [esp+2Ch] [ebp-20h]
	//int v39; // [esp+30h] [ebp-1Ch]
	//int v40; // [esp+34h] [ebp-18h]
	//int v41; // [esp+38h] [ebp-14h]
	int v42; // [esp+3Ch] [ebp-10h]
	//int v43; // [esp+40h] [ebp-Ch]
	uint8_t v44; // [esp+44h] [ebp-8h]
	uint8_t v45; // [esp+48h] [ebp-4h]
	int16_t v46; // [esp+64h] [ebp+18h]


	//HIWORD(v6) = HIWORD(a4);
	v44 = 0;
	if (!a3)
	{
		sub_7C120_draw_bitmap_640(a1, a2, xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06]);//unknown draw
		goto LABEL_31;
	}
	v45 = sub_5BE80_test_pallette(x_DWORD_17DE38str.x_DWORD_17DE38, 0x25u, 0x1Fu, 0x19u);
	//v38 = (int16_t)a2;
	//v41 = (int16_t)a1;
	sub_7C120_draw_bitmap_640(a1, a2, xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06]);//top scroll border
	v7 = sub_5BE80_test_pallette(x_DWORD_17DE38str.x_DWORD_17DE38, 0x2Au, 0x24u, 0x1Du);
	sub_7C140_draw_text_background(
		(a1 + 10),
		a2 + xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06].height - 2,
		xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06].width - 22,
		a3,
		v7);
	//v39 = v45;
	//v40 = (int16_t)(a3 + a2);
	sub_2BD10_draw_line(a1 + 10, a2, a1 + 10, a3 + a2, v45);
	//v8 = xy_DWORD_17DED4_spritestr[x_WORD_17DF06].pointer;
	//v9 = a2 + xy_DWORD_17DED4_spritestr[x_WORD_17DF06].sizey - 2;
	sub_2BD10_draw_line(a1 + xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06].width - 12, a2 + xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06].height - 2, a1 + xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06].width - 12, a2 + xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06].height - 2 + a3, v45); // to je ta linka, kterou je treba opravit
	sub_7C120_draw_bitmap_640(a1, a3 + a2, xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06]);//bottom scroll border
	if (a4[5] >= a4[4])
	{
		switch (a6)
		{
		case 3:
			//v10 = a4[0];
			//v43 = v10 + 15;
			//v12 = 6 * x_WORD_17DF0C;
			//v13 = v12 + xy_DWORD_17DED4_spritestr[0].pointer;
			//v11 = a4[4];
			//v12 = a4[1];
			//v14 = xy_DWORD_17DED4_spritestr[x_WORD_17DF0C].sizey;
			//HIWORD(v14) = (int16_t)a1 >> 15;
			//v15 = v11 + v12 - v14;
			v33[6] = a4[4] + a4[1] - xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0C].height;//12 - v35
			v33[5] = a4[0] + 15;//10 - v34
			v33[7] = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0C].width;//14 adress 25c832
			v33[8] = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0C].height;//16
			if (sub_7B200_in_region(v33, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))//icon OK
			{
				sub_7C120_draw_bitmap_640(a4[0] + 15, v33[6], xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0E]);
				if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
					v44 = 1;
			}
			else
			{
				sub_7C120_draw_bitmap_640(a4[0] + 15, v33[6], xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0C]);
			}
			//v16 = 3 * x_WORD_17DF06;
			//v16 = xy_DWORD_17DED4_spritestr[x_WORD_17DF06].sizex;
			//v6 = a4[0];
			v42 = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06].width - 12 + a4[0];
			//v17 = xy_DWORD_17DED4_spritestr[x_WORD_17DF06].pointer;
			//v16 = v42 - xy_DWORD_17DED4_spritestr[x_WORD_17DF08].sizex;
			//v33[6] = v15;
			//v18 = v42 - xy_DWORD_17DED4_spritestr[x_WORD_17DF08].sizex;
			v33[5] = v42 - xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF08].width;
			v33[7] = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF08].width;
			//v39 = x_WORD_17DF0A;
			v33[8] = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0A].height;
			if (sub_7B200_in_region(v33, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))//icon X - cancel
			{
				sub_7C120_draw_bitmap_640(v42 - xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF08].width, v33[6], xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0A]);
				if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
					v44 = 2;
			}
			else
			{
				sub_7C120_draw_bitmap_640(v42 - xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF08].width, v33[6], xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF08]);//zlom
			}
			goto LABEL_23;
		case 1:
			//v19 = xy_DWORD_17DED4_spritestr[x_WORD_17DF0C].pointer;
			v20 = *a4 + 30;
			v21 = a4[4] + a4[1];
			v22 = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0C].height;
			v33[5] = *a4 + 30;
			v23 = v21 - v22;
			v33[5] = v21 - v22;
			v33[7] = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0C].width;
			v33[8] = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0C].height;
			if (sub_7B200_in_region(v33, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
			{
				sub_7C120_draw_bitmap_640(v20, v23, xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0E]);
				if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
					v44 = 1;
				goto LABEL_23;
			}
			//v24 = (int)(int)x_DWORD_17DED4;
			v24x = x_DWORD_17DE38str.x_WORD_17DF0E;
			break;
		case 2:
			v26 = 3 * x_DWORD_17DE38str.x_WORD_17DF0C;
			v20 = *a4 + 40;
			v26 = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0C].height;
			v27 = a4[4];
			v42 = v26;
			v23 = v27 + a4[1] - v26;
			v33[6] = v27 + a4[1] - v26;
			//v39 = x_WORD_17DF08;
			//v28 = xy_DWORD_17DED4_spritestr[x_WORD_17DF0C].pointer;
			v33[5] = v20;
			v33[7] = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0C].width;
			v33[8] = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0C].height;
			if (sub_7B200_in_region(v33, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
			{
				sub_7C120_draw_bitmap_640(v20, v23, xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF0A]);
				if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
					v44 = 1;
				goto LABEL_23;
			}
			v24x = x_DWORD_17DE38str.x_WORD_17DF08;
			//v25 = (int)x_DWORD_17DED4;
			break;
		default:
			goto LABEL_23;
		}
		sub_7C120_draw_bitmap_640(v20, v23, xy_DWORD_17DED4_spritestr[v24x]);
	LABEL_23:
		if (!v44)
		{
			if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == 28)
			{
				v44 = 1;
			}
			else if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == 1)
			{
				v44 = 2;
			}
		}
	}
	sub_6FC50(1);
	//v29 = xy_DWORD_17DED4_spritestr[x_WORD_17DF06].pointer;
	v30 = a1 + 10 + xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06].width - 22;
	//v29 = xy_DWORD_17DED4_spritestr[x_WORD_17DF06].sizey;
	v46 = xy_DWORD_17DED4_spritestr[x_DWORD_17DE38str.x_WORD_17DF06].height + 2 + a2;
	if (a5)
	{
		v31 = sub_5BE80_test_pallette(x_DWORD_17DE38str.x_DWORD_17DE38, 0x16u, 0x10u, 9u);
		//"Exit Game" 16a 1c6 28 1 4c//adress 25cc27
		sub_7FCB0_draw_text_with_border(v30, a5, a1 + 10, v30, v46, 1, v31, 0);
	}
LABEL_31:
	if (v44)
		sub_8F100_sound_proc19(0, 14, 127, 64, 0x64u, 0, 3u);
	return v44;
}

//----- (0007BF20) --------------------------------------------------------
int sub_7BF20_draw_scroll_dialog(int16_t *a1)//25cf20
{
	char* v1; // esi
	int result; // eax
	int v3; // edx
	int16_t v4; // di
	int16_t v5; // cx
	//int v6; // eax
	int16_t v7; // ax

	v1 = 0;
	result = 0;
	if (!*a1)
		return result;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10 == 1)
		x_DWORD_17DE38str.x_BYTE_17DF13 = 0;
	sub_6FC50(1);
	if (!a1[7])
	{
		v4 = a1[5];
		if (v4)
		{
			if (v4 <= a1[4] - 1)
				a1[5] = v4 + 16;
			else
				a1[5] = a1[4];
		}
		else
		{
			a1[5]++;//next char
		}
		goto LABEL_14;
	}
	v5 = a1[5] - 16;
	a1[5] = v5;
	if (v5 >= 0)
	{
	LABEL_14:
		if (a1[5] > sub_6FC30_get34_height() + 10)
			v1 = x_DWORD_E9C4C_langindexbuffer[a1[6]];
		//160 1a 21 2b2cce? exit game 3
		v7 = sub_7B660_draw_scroll_dialog2(a1[0], a1[1], a1[5], a1, v1, a1[8] & 0xff);
		if (v7)
		{
			if (!a1[7])
				a1[7] = v7;
		}
		return 0;
	}
	a1[5] = 0;
	//v6 = (int)x_D41A0_BYTEARRAY_4;
	LOWORD(v3) = a1[7];
	a1[7] = 0;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10 == 1)
		x_DWORD_17DE38str.x_BYTE_17DF13 = 1;
	return v3;
}

//----- (0007C020) --------------------------------------------------------
void sub_7C020(x_WORD *a1)//25d020
{
	//x_WORD *result; // eax

	//result = a1;
	if (a1[2])
	{
		a1[3] = 0;
		a1[2] = a1[3];
	}
	a1[5] = 0;
	//return result;
}

//----- (0007C050) --------------------------------------------------------
signed int /*__fastcall*/ sub_7C050_get_keyboard_keys1()//25d050
{
	Bit8u v2; // bl
	long v3; // eax  
	//Bit8u v3h;
	//Bit8u v4; // dx
	Bit8u v4h;
	Bit8u a1h;
	long v5; // esi
	bool ctrl_or_alt_pressed; // zf
	signed int result; // eax

	x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 0;
	x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status = 0;
	a1h = 2;

	//fix - __asm { int     16h; KEYBOARD - GET SHIFT STATUS }
	v2 = VGA_get_shift_status();
	//a1 = 1;
	//v2 = a1;
	if (v2)
	{
		if (v2 & 1)//right_shift
		{
			x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 54;
		}
		else if (v2 & 2)//left_shift
		{
			x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 42;
		}
		else if (v2 & 4)//ctrl
		{
			x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 29;
		}
		else if (v2 & 8)//alt
		{
			x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 56;
		}
	}
	v3 = j___clock();
	v5 = v3;
	do
	{
		/*ctrl_or_alt_pressed = (v2 & 1) == 0;
		if ( !(v2 & 1) )
		{
		  ctrl_or_alt_pressed = (v2 & 2) == 0;
		  if ( !(v2 & 2) )
		  {
			ctrl_or_alt_pressed = (v2 & 4) == 0;
			if ( !(v2 & 4) )
			{
			  ctrl_or_alt_pressed = (v2 & 8) == 0;
			  if ( !(v2 & 8) )
				break;//if not ctrl or alt end
			}
		  }
		}
		BYTE1(v3) = 2;
		HIBYTE(v4) = 2;
		a1 = VGA_get_shift_status();
		//fix - __asm { int     16h; KEYBOARD - GET SHIFT STATUS }
		if (ctrl_or_alt_pressed)
		  HIBYTE(v4) = 1;
		v2 = v3;
		v3 = j___clock() - v5;*/
		if (!(v2 & 1) && !(v2 & 2) && !(v2 & 4) && !(v2 & 8))
			break;
		v4h = 2;
		ctrl_or_alt_pressed = VGA_get_shift_status();
		if (ctrl_or_alt_pressed)
			v4h = 1;
		//v2 = v3;
		v3 = j___clock() - v5;
	} while (v3 <= 5);
	while (1)
	{
		result = sub_9A10A_check_keyboard(/*v3*/);//adress 25d101
		//'a' - 1e61
		//'b' - 3062
		//'UP' - 4800
		//'0' - 5230
		//'ENTER' - 1c0d
		if (!result)
			break;
		//BYTE1(result) = 0;
		result = VGA_read_char_from_buffer();
		// fix - __asm { int     16h; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY }
		x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status = result;
		v3 = result >> 8;
		x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = v3;
	}
	return result;
}

//----- (0007C120) --------------------------------------------------------
void sub_7C120_draw_bitmap_640(Bit16s posx, Bit16s posy, posistruct tempstr)//25d120
{
	sub_2BB40_draw_bitmap(posx, posy, tempstr);//ebp
}

//----- (0007C140) --------------------------------------------------------
void sub_7C140_draw_text_background(Bit16s x1, Bit16s y1, Bit16s x2, Bit16s y2, uint8_t a5)//25d140
{//black line in text
	Bit16s x1d; // si
	Bit16s y1d; // bx
	Bit16s x2d; // eax
	Bit16s y2d; // dx
	//Bit16s v9; // cx

	x1d = x1;
	y1d = y1;
	x2d = x2;
	y2d = y2;
	if (x1 < 640 && y1 < 480)//neni vetsi nez obrazovka
	{
		if (y1 + y2 > 480)
			y2d = 480 - y1;
		if (x1 + x2 > 640)
			x2d = 640 - x1;
		if (x2d >= 1 && y2d >= 1)
		{
			if (y1 < 0)
			{
				y2d += y1;
				x1d = 0;
			}
			if ((x1 & 0x8000u) != 0)
			{
				x2d += x1;
				x1d = 0;
			}
			//v9 = x2d;
			//x2d += x1d;
			if (x2d+ x1d >= 1)
			{
				//x2d = y1d;
				if (y1d + y2d >= 1)
					sub_2BC80(x1d, y1d, x2d, y2d, a5);
			}
		}
	}
}

//----- (0007C200) --------------------------------------------------------
char sub_7C200(uint8_t a1)//25d200
{
	char result; // al

	result = 0;
	if (a1 == 32 || a1 >= 0x30u && a1 <= 0x39u || a1 >= 0x41u && a1 <= 0x5Au || a1 >= 0x61u && a1 <= 0x7Au)
		result = 1;
	return result;
}

//----- (0007C230) --------------------------------------------------------
int /*__fastcall*/ sub_7C230(int a1, int a2, int16_t *a3)//25d230
{
	//int16_t v3; // ax
	int v4; // edx
	x_WORD *v5; // eax
	int v6; // edx
	x_WORD *v7; // ebx
	int v8; // edx

	//fix it
	v4 = 0;
	v6 = 0;
	//fix it

	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		a3 = (int16_t *)x_DWORD_E9C38_smalltit;
		sub_9A128_copy_screen_320((void*)x_DWORD_E9C38_smalltit, (void*)x_DWORD_180628b_screen_buffer, 0xC8u);
	}
	else
	{
		sub_9A144_copy_screen_640((void*)x_DWORD_E9C38_smalltit, (void*)x_DWORD_180628b_screen_buffer, 0x1E0u);
	}
	/*v3 = */sub_7C120_draw_bitmap_640(185, 232, xy_DWORD_17DED4_spritestr[66]);
	sub_7AB00_draw_menu_animations(/*v3,*/ /*v4,*/ /*a3,*/ 4u);
	v5 = (x_WORD *)sub_7BF20_draw_scroll_dialog(x_WORD_E1F70);
	v7 = v5;
	// FIXME: types
	// // if ((x_WORD)v5)
	// {
	// 	x_WORD_E131A = 1;
	// 	/*v5 = */sub_7C020(x_WORD_E1F70);
	// }
	v8 = j___clock();
	if ((unsigned int)(v8 - x_DWORD_E208C) >> 2 >= 1)
	{
		if ((uint8_t)x_BYTE_E2097 >= x_WORD_E2094)
			++x_WORD_E2094;
		else
			x_WORD_E2094 = (uint8_t)x_BYTE_E2096;
		x_DWORD_E208C = v8;
	}
	sub_7C120_draw_bitmap_640(x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony, xy_DWORD_17DED4_spritestr[x_WORD_E2094]);
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_90478_VGA_Blit320();
	else
		sub_75200_VGA_Blit640(480);
	sub_7A060_get_mouse_and_keyboard_events();
	// FIXME: types
	// return (int16_t)v7;
	return 0;
}

//----- (0007C390) --------------------------------------------------------
signed int sub_7C390()//25d390
{
	signed int result; // eax
	int *v1; // ebx
	x_WORD *v2; // ebx
	int v3; // esi
	int16_t v4; // dx
	int16_t i; // ax
	int v6; // [esp+0h] [ebp-8h]
	char *v7; // [esp+4h] [ebp-4h]

	// FIXME: types
	// v6 = (int)x_DWORD_E9C38_smalltit;
	x_DWORD_E9C38_smalltit = (Bit8u*)x_D41A0_BYTEARRAY_4_struct.heapbuffer.data();
	v7 = (char *)(x_DWORD_E9C38_smalltit[307200]);
	x_DWORD_17DE38str.x_WORD_17DF00 = x_DWORD_17DE38str.x_WORD_17DEFE;
	qmemcpy(x_BYTE_E1BA4, x_BYTE_E1B9C, sizeof(x_BYTE_E1BA4));
	if ((uint16_t)sub_7CE50())
	{
		x_DWORD_E9C38_smalltit = (Bit8u*)v6;
		result = 1;
	}
	else
	{
		qmemcpy(x_BYTE_E1B9C, &x_DWORD_17DE38str.x_BYTE_17DE68x[11 * sub_74515() + 1], sizeof(x_BYTE_E1B9C));
		v1 = (int *)(&off_E1BAC[0x2ec] + 6 * x_DWORD_17DE38str.x_WORD_17DEF4);
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_9A128_copy_screen_320((void*)x_DWORD_E9C38_smalltit, (void*)x_DWORD_180628b_screen_buffer, 0xC8u);
		else
			sub_9A144_copy_screen_640((void*)x_DWORD_E9C38_smalltit, (void*)x_DWORD_180628b_screen_buffer, 0x1E0u);
		std::filesystem::path path_hscreen0dat = file_handling->getFilePath(MC2File::data_screens_hscreen0_dat);
		switch (x_DWORD_17DE38str.x_WORD_17DEF6)
		{
		case 1:
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), (Bit8u*)v7, *v1, v1[1]);
			sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), (Bit8u*)x_DWORD_17DE38str.x_DWORD_17DE3C, v1[2], v1[3]);
			x_DWORD_17DE38str.x_WORD_17DF02 = 0;
			x_DWORD_17DE38str.x_WORD_17DEF6 = 3;
			v2 = (Bit16s*)&off_E1BAC[0x1b8];
			v3 = sub_7CB10();
			break;
		case 2:
			x_DWORD_17DE38str.x_WORD_17DF02 += 16;
			sub_7C9D0(x_DWORD_17DE38str.x_WORD_17DF02);
			if ((uint16_t)x_DWORD_17DE38str.x_WORD_17DF02 < 0xFFu)
				goto LABEL_13;
			// FIXME: types
			// sub_7C7C0((uint8_t)x_DWORD_17DE38str.x_WORD_17DEF2, (int)x_DWORD_E9C38_smalltit);
			x_DWORD_17DE38str.x_WORD_17DEF6 = 1;
			v2 = (Bit16s*)& off_E1BAC[0x1b8];
			v3 = sub_7CB10();
			break;
		case 3:
			// FIXME: types
			// sub_7C720(x_DWORD_17DE38str.x_WORD_17DEF4, v7);
			x_DWORD_17DE38str.x_WORD_17DF02 += 16;
			sub_7C800(x_DWORD_17DE38str.x_WORD_17DF02);
			if ((uint16_t)x_DWORD_17DE38str.x_WORD_17DF02 <= 0xFEu)
				goto LABEL_13;
			x_DWORD_17DE38str.x_WORD_17DEF6 = 4;
			v2 = (Bit16s*)& off_E1BAC[0x1b8];
			v3 = sub_7CB10();
			break;
		case 5:
			// FIXME: types
			// sub_7C7C0((uint8_t)x_DWORD_17DE38str.x_WORD_17DEF2, (int)x_DWORD_E9C38_smalltit);
			x_DWORD_17DE38str.x_WORD_17DF02 = 255;
			sub_7C9D0(255);
			x_DWORD_17DE38str.x_WORD_17DEF6 = 1;
			x_DWORD_17DE38str.x_BYTE_17DE68x[0xa + 11 * x_DWORD_17DE38str.x_WORD_17DEFC] = x_DWORD_17DE38str.x_BYTE_17DE68x[0xa + 11 * sub_74515()];
			goto LABEL_13;
		default:
		LABEL_13:
			v2 = (Bit16s*)& off_E1BAC[0x1b8];
			v3 = sub_7CB10();
			break;
		}
		while (v2[5])
		{
			if (*((x_BYTE *)v2 + 23) && *((x_BYTE *)v2 + 24))
				sub_7C120_draw_bitmap_640(v2[5], v2[6], xy_DWORD_17DED4_spritestr[v2[21]]);
			v2 += 22;
		}
		sub_7C140_draw_text_background(382, 18, 16, 16, 0);
		// FIXME: types
		// sprintf((char *const)(int)x_DWORD_17DE38str.x_DWORD_17DE50, "%d", (uint16_t)x_DWORD_17DE38str.x_WORD_17DEFA);
		// FIXME: types
		// sub_7FAE0_draw_text((char *)(int)x_DWORD_17DE38str.x_DWORD_17DE50, 382, 398, 18, 0);
		sub_7D380();
		sub_7D310();
		v4 = 0;
		for (i = 0; i < 8; i++)
		{
			if (x_BYTE_E1BA4[i] != x_BYTE_E1B9C[i])
			{
				v4 = 1;
				break;
			}
		}
		if (v4 || x_DWORD_17DE38str.x_WORD_17DF00 != x_DWORD_17DE38str.x_WORD_17DEFE)
			sub_41A90_VGA_pallette_install((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38);
		x_DWORD_E9C38_smalltit = (Bit8u*)v6;
		result = v3;
	}
	return result;
}

//----- (0007C710) --------------------------------------------------------
void sub_7C710()//25d710
{
	x_DWORD_17DE38str.x_WORD_17DF02 = 0;
}

//----- (0007C720) --------------------------------------------------------
int sub_7C720(uint8_t a1, x_BYTE *a2)//25d720
{
	void **v2; // eax
	int16_t v3; // bx
	int16_t v4; // dx
	int16_t v5; // cx
	int16_t v6; // ax

	v2 = (void**)&off_E1BAC[0x2ec] + 6 * a1;
	v3 = *((x_WORD *)v2 + 9);
	v4 = *((x_WORD *)v2 + 8);
	v5 = *((x_WORD *)v2 + 10);
	v6 = *((x_WORD *)v2 + 11);
	if (v3 + v6 > 480)
		v6 = 480 - v3;
	if (v5 + v4 > 640)
		v4 = v5 + v4 - 640;
	// FIXME: types
	// return sub_85BF5(a2, (int)x_DWORD_E9C38_smalltit, v4, v3, v5, v6);
	return 0;
}

//----- (0007C7C0) --------------------------------------------------------
int sub_7C7C0(int a1, int a2)//25d7c0
{
	return sub_85C42(a2, 208, 111, 200, 369, 0x9Fu);
}

//----- (0007C800) --------------------------------------------------------
void sub_7C800(int16_t a1)//25d800
{
	int16_t v1; // bx
	uint8_t *v2; // edx
	Bit8u* v3; // eax
	uint8_t v4; // ch
	uint8_t v5; // ch
	uint8_t v6; // ch
	uint8_t *v7; // edx
	uint8_t v8; // ch
	x_BYTE *v9; // eax
	uint8_t v10; // ch
	uint8_t v11; // ch
	uint8_t v12; // cl
	uint8_t *v13; // edx
	uint8_t v14; // ch
	int v15; // eax
	uint8_t v16; // ch
	uint8_t v17; // ch
	Bit8u* v19; // [esp+4h] [ebp-4h]

	v1 = a1;
	if ((uint16_t)a1 > 0xFFu)
		v1 = 255;
	v2 = (uint8_t *)(x_DWORD_17DE38str.x_DWORD_17DE3C + 477);
	v19 = x_DWORD_17DE38str.x_DWORD_17DE38 + 765;
	v3 = (uint8_t *)(x_DWORD_17DE38str.x_DWORD_17DE38 + 477);
	while (v3 < v19)
	{
		v4 = *v2;
		if (*v3 < *v2)
			*v3 = (uint16_t)(v4 * v1) >> 8;
		else
			*v3 = v4;
		v5 = v2[1];
		if (v3[1] < v5)
			v3[1] = (uint16_t)(v5 * v1) >> 8;
		else
			v3[1] = v5;
		v6 = v2[2];
		if (v3[2] < v6)
			v3[2] = (uint16_t)(v6 * v1) >> 8;
		else
			v3[2] = v6;
		v3 += 3;
		v2 += 3;
	}
	v7 = (uint8_t *)(x_DWORD_17DE38str.x_DWORD_17DE38 + 444);
	v8 = *(x_BYTE *)(x_DWORD_17DE38str.x_DWORD_17DE3C + 444);
	v9 = (x_BYTE *)(x_DWORD_17DE38str.x_DWORD_17DE3C + 444);
	if (*(x_BYTE *)(x_DWORD_17DE38str.x_DWORD_17DE38 + 444) < v8)
		*v7 = (uint16_t)(v8 * v1) >> 8;
	else
		*v7 = v8;
	v10 = v9[1];
	if (v7[1] < v10)
		v7[1] = (uint16_t)(v10 * v1) >> 8;
	else
		v7[1] = v10;
	v11 = v9[2];
	if (v7[2] < v11)
		v7[2] = (uint16_t)(v1 * (uint8_t)v9[2]) >> 8;
	else
		v7[2] = v11;
	v12 = v7[3];
	v13 = v7 + 3;
	v14 = v9[3];
	// FIXME: types
	// v15 = (int)(v9 + 3);
	if (v12 < v14)
		*v13 = (uint16_t)(v14 * v1) >> 8;
	else
		*v13 = v14;
	v16 = *(x_BYTE *)(v15 + 1);
	if (v13[1] < v16)
		v13[1] = (uint16_t)(v16 * v1) >> 8;
	else
		v13[1] = v16;
	v17 = *(x_BYTE *)(v15 + 2);
	if (v13[2] < v17)
		v13[2] = (uint16_t)(*(uint8_t *)(v15 + 2) * v1) >> 8;
	else
		v13[2] = v17;
	sub_9A0FC_wait_to_screen_beam();
	sub_41A90_VGA_pallette_install((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38);
}

//----- (0007C9D0) --------------------------------------------------------
void sub_7C9D0(int16_t a1)//25d9d0
{
	int16_t v1; // cx
	uint8_t *i; // eax
	int16_t v3; // bx
	int v4; // eax
	int v5; // eax
	unsigned int v7; // [esp+4h] [ebp-4h]

	v1 = a1;
	if ((uint16_t)a1 > 0xFFu)
		v1 = 255;
	// FIXME: types
	// v7 = (int)x_DWORD_17DE38str.x_DWORD_17DE38 + 765;
	// FIXME: types
	// // for (i = (uint8_t *)(x_DWORD_17DE38str.x_DWORD_17DE38 + 477);
	// 	(unsigned int)i < v7;
	// 	*(i - 1) = v3 - ((uint16_t)(v3 * v1) >> 8))
	// {
	// 	*i -= (uint16_t)(v1 * *i) >> 8;
	// 	i[1] -= (uint16_t)(v1 * i[1]) >> 8;
	// 	v3 = i[2];
	// 	i += 3;
	// }
	// FIXME: types
	// v4 = (int)x_DWORD_17DE38str.x_DWORD_17DE38;
	*(x_BYTE *)(x_DWORD_17DE38str.x_DWORD_17DE38 + 447) -= (uint16_t)(v1 * *(uint8_t *)(x_DWORD_17DE38str.x_DWORD_17DE38 + 447)) >> 8;
	*(x_BYTE *)(v4 + 448) -= (uint16_t)(v1 * *(uint8_t *)(v4 + 448)) >> 8;
	*(x_BYTE *)(v4 + 449) -= (uint16_t)(v1 * *(uint8_t *)(v4 + 449)) >> 8;
	// FIXME: types
	// v5 = (int)x_DWORD_17DE38str.x_DWORD_17DE38;
	*(x_BYTE *)(x_DWORD_17DE38str.x_DWORD_17DE38 + 444) -= (uint16_t)(v1 * *(uint8_t *)(x_DWORD_17DE38str.x_DWORD_17DE38 + 444)) >> 8;
	*(x_BYTE *)(v5 + 445) -= (uint16_t)(v1 * *(uint8_t *)(v5 + 445)) >> 8;
	*(x_BYTE *)(v5 + 446) -= (uint16_t)(*(uint8_t *)(v5 + 446) * v1) >> 8;
	sub_9A0FC_wait_to_screen_beam();
	sub_41A90_VGA_pallette_install((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38);
}

//----- (0007CB10) --------------------------------------------------------
int sub_7CB10()//25db10
{
	int(**i)(); // ebx
	int result; // eax
	int(**j)(); // ebx
	int(**v3)(); // ebx

	for (i = (int(**)())(Bit16s*)&off_E1BAC[0x1b8]; *((x_WORD *)i + 5); i += 11)
	{
		if (*((x_WORD *)i + 4) && *i)
		{
			result = ((int(*)(int(**)()))*i)(i);
			if ((x_BYTE)result)
			{
				*((x_WORD *)i + 4) = 0;
				sub_7B5A0_disable_enable();
				result = 1;
			}
			else
			{
				LOWORD(result) = 0;
				*((x_WORD *)i + 4) = 0;
			}
			return result;
		}
	}
	for (j = (int(**)())(Bit16s*) &off_E1BAC[0x1b8]; *((x_WORD *)j + 5); *((x_BYTE *)j - 20) = 0)
	{
		j += 11;
		*((x_WORD *)j - 18) = 0;
	}
	v3 = (int(**)())(Bit16s*) &off_E1BAC[0x1b8];
	if (!((Bit16s*)&off_E1BAC[0x1b8])[5])
		return 0;
	while (!sub_7B200_in_region((x_WORD*)v3, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony) || !*((x_BYTE *)v3 + 23))
	{
		v3 += 11;
		if (!*((x_WORD *)v3 + 5))
			return 0;
	}
	if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
	{
		*((x_WORD *)v3 + 4) = 1;
		sub_7B5A0_disable_enable();
		sub_8F100_sound_proc19(0, 14, 127, 64, 0x64u, 0, 3u);
	}
	else
	{
		*((x_BYTE *)v3 + 24) = 1;
	}
	return 0;
}

//----- (0007CBF0) --------------------------------------------------------
char sub_7CBF0()//25dbf0
{
	x_DWORD_17DE38str.x_WORD_17DEF8 = 0;
	x_DWORD_17DE38str.x_BYTE_17DE68x[0x9+11 * x_DWORD_17DE38str.x_WORD_17DEFC] = 3;
	x_DWORD_17DE38str.x_WORD_17DF02 = 0;
	x_DWORD_17DE38str.x_WORD_17DEF6 = 2;
	x_DWORD_17DE38str.x_WORD_17DEF2 = x_DWORD_17DE38str.x_WORD_17DEF4;
	return 0;
}

//----- (0007CC40) --------------------------------------------------------
char sub_7CC40()//25dc40
{
	x_DWORD_17DE38str.x_WORD_17DF02 = 0;
	x_DWORD_17DE38str.x_WORD_17DEF8 = 1;
	x_DWORD_17DE38str.x_BYTE_17DE68x[0x9+11 * x_DWORD_17DE38str.x_WORD_17DEFC] = 4;
	x_DWORD_17DE38str.x_WORD_17DEF6 = 2;
	x_DWORD_17DE38str.x_WORD_17DEF2 = x_DWORD_17DE38str.x_WORD_17DEF4;
	return 0;
}

//----- (0007CCA0) --------------------------------------------------------
int sub_7CCA0()//25dca0
{
	int v0; // ebx
	int v1; // ebx

	v0 = x_DWORD_17DE38str.x_WORD_17DEFC;
	if (v0 == sub_74515() && x_DWORD_17DE38str.x_WORD_17DEFE == 1 || (v1 = x_DWORD_17DE38str.x_WORD_17DEFC, v1 != sub_74515()))
		x_DWORD_17DE38str.x_BYTE_17DE68x[0x9+11 * x_DWORD_17DE38str.x_WORD_17DEFC] = 1;
	return 0;
}

//----- (0007CCF0) --------------------------------------------------------
int sub_7CCF0()//25dcf0
{
	int v0; // eax
	char v1; // dl

	v0 = 11 * x_DWORD_17DE38str.x_WORD_17DEFC;
	v1 = x_DWORD_17DE38str.x_BYTE_17DE68x[0xa + v0];
	if (v1 > 50)
	{
		x_DWORD_17DE38str.x_BYTE_17DE68x[0xa + v0] = v1 - 1;
		x_DWORD_17DE38str.x_BYTE_17DE68x[0x9+11 * x_DWORD_17DE38str.x_WORD_17DEFC] = 6;
	}
	return 0;
}

//----- (0007CD30) --------------------------------------------------------
int sub_7CD30()//25dd30
{
	char *v0; // esi
	char v2[4]; // [esp+0h] [ebp-Ch]
	char v3; // [esp+4h] [ebp-8h]

	//fix save wizard name to enything

	v0 = (char*)(&off_D9204_wizards_names1)[1 + x_DWORD_17DE38str.x_BYTE_17DE68x[0xa + 11 * x_DWORD_17DE38str.x_WORD_17DEFC]];//fix it
	qmemcpy(&v2, v0, 4u);
	qmemcpy(&v3, v0 + 4, sizeof(v3));
	if (v2[0] && v2[0] != 48)
	{
		x_DWORD_17DE38str.x_BYTE_17DE68x[0xa + 11 * x_DWORD_17DE38str.x_WORD_17DEFC]++;
		x_DWORD_17DE38str.x_BYTE_17DE68x[0x9+11 * x_DWORD_17DE38str.x_WORD_17DEFC] = 6;
	}
	return 0;
}

//----- (0007CDA0) --------------------------------------------------------
int sub_7CDA0()//25dda0
{
	x_DWORD_17DE38str.x_BYTE_17DE68x[0x9+11 * x_DWORD_17DE38str.x_WORD_17DEFC] = 5;
	return 0;
}

//----- (0007CDC0) --------------------------------------------------------
int sub_7CDC0(uint8_t a1, uint8_t a2)//25ddc0
{
	x_BYTE *v2; // eax
	int v3; // edx

	v2 = (x_BYTE *)(3 * (2 * a1 + 134) + *xadatapald0dat2.var28_begin_buffer);
	v3 = 3 * a2;
	v2[0] = x_BYTE_E1711[v3];
	v2[1] = x_BYTE_E1711[1+v3];
	v2[2] = x_BYTE_E1711[2+v3];
	v2[3] = x_BYTE_E1711[27+v3];
	v2[4] = x_BYTE_E1711[28+v3];
	v2[5] = x_BYTE_E1711[29+v3];
	return 0;
}

//----- (0007CE50) --------------------------------------------------------
signed int sub_7CE50()//25de50
{
	int16_t v0; // bx
	Bit8u* v1; // esi
	Bit8u* v2; // edx
	int16_t i; // bx
	int v4; // eax
	int16_t v5; // di
	x_BYTE *v6; // esi
	int v7; // edi
	int v8; // eax
	char v9; // ST10_1
	int v10; // edi
	int v11; // eax
	char v12; // ST10_1
	int v13; // edi
	int v14; // eax
	char v15; // ST10_1
	int16_t v16; // dx
	//int v17; // eax
	char v18; // ch
	signed int v20; // [esp+0h] [ebp-Ch]

	v20 = 0;
	x_DWORD_17DE38str.x_BYTE_17DE68x[11 * x_DWORD_17DE38str.x_WORD_17DEFC] = 1;
	sub_74374();
	v0 = 0;
	sub_7438A(x_DWORD_17DE38str.x_BYTE_17DE68x, 0xBu);
	do
	{
		v1 = &x_DWORD_17DE38str.x_BYTE_17DE68x[11 * sub_74515() + 1];
		v2 = &x_DWORD_17DE38str.x_BYTE_17DE68x[11 * v0 + 1];
		qmemcpy(v2, v1, 8u);
		v0++;
		qmemcpy(x_BYTE_E131C, v2, sizeof(x_BYTE_E131C));
	} while (v0 < 8);
	for (i = 0; i < 8; i++)
	{
		v4 = 11 * i;
		if (x_DWORD_17DE38str.x_BYTE_17DE68x[v4])
		{
			switch (x_DWORD_17DE38str.x_BYTE_17DE68x[0x9+v4])
			{
			case 1:
				v5 = 0;
				while (v5 < 7)
				{
					v6 = (x_BYTE *)(3 * (2 * v5 + 134) + x_DWORD_17DE38str.x_DWORD_17DE38);
					*v6 = 0;
					v6 += 3;
					*(v6 - 2) = 0;
					*(v6 - 1) = 0;
					v6[1] = 0;
					v6[2] = 0;
					*v6 = 0;
					++v5;
					sub_41A90_VGA_pallette_install((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38);
				}
				x_DWORD_17DE38str.x_BYTE_17DE68x[11 * i] = 0;
				sub_73AA1(i);
				if (i == x_DWORD_17DE38str.x_WORD_17DEFC)
					v20 = 1;
				break;
			case 2:
				v7 = sub_74515();
				if (v7 == sub_74536())
				{
					if (i <= 0)
						x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * sub_74515() + i] = i;
					else
						x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * sub_74515() + i] = i - 1;
					v8 = sub_74515();
					v9 = sub_7D230(1, x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * v8 + i], i);
					x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * sub_74515() + i] = v9;
				}
				break;
			case 3:
				v13 = sub_74515();
				if (v13 == sub_74536() && (uint16_t)x_DWORD_17DE38str.x_WORD_17DEFE < 7u)
				{
					v14 = sub_74515();
					v15 = sub_7D230(1, x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * v14 + i], i);
					x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * sub_74515() + i] = v15;
				}
				break;
			case 4:
				v10 = sub_74515();
				if (v10 == sub_74536() && (uint16_t)x_DWORD_17DE38str.x_WORD_17DEFE < 7u)
				{
					v11 = sub_74515();
					v12 = sub_7D230(0, x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * v11 + i], i);
					x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * sub_74515() + i] = v12;
				}
				break;
			case 5:
				D41A0_BYTESTR_0.word_0xc = x_DWORD_17DE38str.x_WORD_17DEFC;
				v16 = x_DWORD_17DE38str.x_BYTE_17DE68x[0xa + 11 * sub_74515()];
				//v17 = (int)x_D41A0_BYTEARRAY_4;
				v18 = x_D41A0_BYTEARRAY_4_struct.setting_byte1_22;
				x_D41A0_BYTEARRAY_4_struct.levelnumber_43w = v16;
				x_D41A0_BYTEARRAY_4_struct.setting_byte1_22 = v18 | 0x10;
				D41A0_BYTESTR_0.word_0xe = x_DWORD_17DE38str.x_WORD_17DEFE;
				sub_7449C();
				x_WORD_E29DC = 1;
				v20 = 1;
				break;
			case 6:
				x_DWORD_17DE38str.x_BYTE_17DE68x[0xa + 11 * x_DWORD_17DE38str.x_WORD_17DEFC] = x_DWORD_17DE38str.x_BYTE_17DE68x[0xa + 11 * i];
				break;
			default:
				continue;
			}
		}
	}
	x_DWORD_17DE38str.x_BYTE_17DE68x[0x9+11 * x_DWORD_17DE38str.x_WORD_17DEFC] = 0;
	x_DWORD_17DE38str.x_WORD_17DEF4 = x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * sub_74515() + x_DWORD_17DE38str.x_WORD_17DEFC];
	sub_7D1F0();
	return v20;
}

//----- (0007D1F0) --------------------------------------------------------
void sub_7D1F0()//25e1f0
{
	int index; // eax

	index = 0;
	x_DWORD_17DE38str.x_WORD_17DEFE = 0;
	do
	{
		if (x_DWORD_17DE38str.x_BYTE_17DE68x[11 * (int16_t)index])
			x_DWORD_17DE38str.x_WORD_17DEFE++;
		index++;
	} while ((int16_t)index < 8);
	//return result;
}

//----- (0007D230) --------------------------------------------------------
signed int sub_7D230(char a1, uint8_t a2, uint8_t a3)//25e230
{
	signed int v3; // ebx
	int16_t v4; // si
	int16_t v5; // si
	int16_t v7; // [esp+0h] [ebp-8h]
	int16_t v8; // [esp+4h] [ebp-4h]

	v3 = a2;
	if (a1)
	{
		do
		{
			if ((--v3 & 0x8000u) != 0)
				v3 = 7;
			v5 = 0;
			v7 = 0;
			while (v5 < 8)
			{
				if (v5 != a3 && x_DWORD_17DE38str.x_BYTE_17DE68x[11 * v5] && x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * sub_74515() + v5] == (x_WORD)v3)
				{
					v7 = 1;
					break;
				}
				v5++;
			}
		} while (v7);
	}
	else
	{
		do
		{
			if ((int16_t)++v3 > 7)
				v3 = 0;
			v4 = 0;
			v8 = 0;
			while (v4 < 8)
			{
				if (v4 != a3 && x_DWORD_17DE38str.x_BYTE_17DE68x[11 * v4] && x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * sub_74515() + v4] == (x_WORD)v3)
				{
					v8 = 1;
					break;
				}
				v4++;
			}
		} while (v8);
	}
	return v3;
}

//----- (0007D310) --------------------------------------------------------
int sub_7D310()//25e310
{
	int16_t v0; // bx
	int result; // eax
	int v2; // eax
	int16_t v3; // [esp+0h] [ebp-4h]

	v0 = 0;
	v3 = 0;
	do
	{
		result = 11 * v0;
		if (x_DWORD_17DE38str.x_BYTE_17DE68x[result])
		{
			if (v0 != x_DWORD_17DE38str.x_WORD_17DEFC)
			{
				v2 = sub_74515();
				result = sub_7CDC0(v3++, x_DWORD_17DE38str.x_BYTE_17DE68x[0x1+11 * v2 + v0]);
			}
		}
		v0++;
	} while (v0 < 8);
	return result;
}

//----- (0007D380) --------------------------------------------------------
void sub_7D380()//25e380
{
	int v0; // eax
	//char v2; // [esp+0h] [ebp-28h]

	// FIXME: types
	// sub_85C42((int)x_DWORD_180628b_screen_buffer, 246, 14, 109, 14, 0x9Fu);
	sub_6FC50(1);
	v0 = x_DWORD_17DE38str.x_BYTE_17DE68x[0xa + 11 * x_DWORD_17DE38str.x_WORD_17DEFC];
	sprintf(printbuffer, "%d. %s", v0 - 49, off_D9204_wizards_names1[v0]);
	sub_7FAE0_draw_text(printbuffer, 246, 355, 14, 0);
}

int debugcounter_7D400=0;
//----- (0007D400) --------------------------------------------------------
void sub_7D400_draw_texts_and_play_sounds(int a1, int16_t a2, int16_t a3, char a4)//25e400
{
	//x_WORD *v4; // ebx
	int v4x;
	int v5; // edx
	//int16_t v6; // cx
	//Bit8u* i; // ebx
	int ix;
	uint8_t v8; // al
	char v9; // cl
	//x_WORD *jj; // ebx
	uint16_t v11; // ax
	int v12; // edx
	char v13; // dl
	int v14; // edx
	int v15; // edx
	Bit16s v16; // eax
	int v17; // eax
	int v18x; // edi
	//char *v20; // eax
	int v20x;
	//char *v21; // edx
	int v21x;
	//x_WORD *v22; // eax
	int v22x;
	int16_t v23; // bx
	//int16_t *k; // eax
	Bit16u v25[18]; // [esp+0h] [ebp-54h]
	//int16_t v26; // [esp+2h] [ebp-52h] v25[1]
	//int16_t v27; // [esp+4h] [ebp-50h] v25[2]
	//int16_t v28; // [esp+6h] [ebp-4Eh] v25[3]
	//int16_t v29; // [esp+8h] [ebp-4Ch] v25[4]
	//int16_t v30; // [esp+Ch] [ebp-48h] v25[5]
	//int16_t v31; // [esp+Eh] [ebp-46h] v25[6]
	Bit16s v32; // [esp+10h] [ebp-44h]
	//int v33; // [esp+24h] [ebp-30h]//22
	Bit8s v33x[22];
	//int16_t v34; // [esp+30h] [ebp-24h]//v33x[0xc]
	//int16_t v35; // [esp+32h] [ebp-22h]//v33x[0xe]
	//int v36; // [esp+34h] [ebp-20h]//v33x[0x10]

	Bit8u* v37; // [esp+3Ch] [ebp-18h]
	Bit8u* v38; // [esp+40h] [ebp-14h]
	posistruct* v38s;
	int v39; // [esp+44h] [ebp-10h]
	//x_WORD *v40; // [esp+48h] [ebp-Ch]
	//char *v41; // [esp+4Ch] [ebp-8h]
	int v40x;
	int v41x;
	int v42; // [esp+50h] [ebp-4h]

	//fix it
	v5 = 0;
	v12 = 0;
	v14 = 0;
	v15 = 0;
	//fix it

	debugcounter_7D400++;

	v42 = -1;
	//v4 = (x_WORD*)x_BYTE_E25ED_db;
	v4x = 0;
	v41x = -1;
	v40x = -1;
	v39 = j___clock();
	while (x_BYTE_E25ED_db_str[v4x].word_8)
	{
		//if (x_WORD_E1964x[0x21E] != 1 || x_BYTE_E25ED_db_str[v4x].word_12 != 85 && x_BYTE_E25ED_db_str[v4x].word_12 != 86)
		if (unk_E17CC_str_0x194[24].byte_18_act != 1 || x_BYTE_E25ED_db_str[v4x].word_12 != 85 && x_BYTE_E25ED_db_str[v4x].word_12 != 86)
			sub_81CA0(a2, v5, a2, a3, &x_BYTE_E25ED_db_str[v4x]);
		//v4 += 15;
		v4x++;
	}
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	//for (i = unk_E17CC_0x194; *((x_WORD *)i + 2); i += 22)//draw new game flag
	//unk_E17CC_str_0x194
	for (ix = 0; unk_E17CC_str_0x194[ix].word_4; ix++)//draw new game flag
	{
		v8 = unk_E17CC_str_0x194[ix].byte_18_act;
		if (v8 >= 1u)
		{
			if (v8 <= 1u)
			{
				//v41 = (char*)i;
				v41x = ix;
				sub_7E5A0_pre_draw(a2, v5, a2, a3, (Bit8u*)&unk_E17CC_str_0x194[ix], 37, 43);
			}
			else if (v8 == 2)
			{
				LOBYTE(v5) = a4;
				if (a4 == 3 || a4 == 5)
				{
					v9 = unk_E17CC_str_0x194[ix].byte_19;
					//v40 = (x_WORD*)i;
					v40x = ix;
					if (v9)
					{
						if (v9 == 1)
						{
							if (sub_7E5A0_pre_draw(a2, v5, a2, a3, (Bit8u*)&unk_E17CC_str_0x194[ix], 70, 83))
							{
								unk_E17CC_str_0x194[ix].word_16 = 33;
								unk_E17CC_str_0x194[ix].byte_19 = 2;
							}
						}
						else
						{
							sub_7E5A0_pre_draw(a2, v5, a2, a3, (Bit8u*)& unk_E17CC_str_0x194[ix], 33, 35);
						}
					}
					else
					{
						sub_8F100_sound_proc19(0, 41, 127, 64, 0x64u, 0, 2u);
						unk_E17CC_str_0x194[ix].byte_19 = 1;
					}
				}
			}
		}
		if (unk_E17CC_str_0x194[ix].byte_18_act == 2)
			break;
	}
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	//for (jj = x_WORD_E2970; jj[6]; jj = (x_WORD *)((char *)jj + 17))
	for(int jjx=0; x_WORD_E2970x[jjx].word_12;jjx++)
	{
		v11 = x_WORD_E2970x[jjx].word_12;
		if (v11 < 1u)
			continue;
		if (v11 <= 1u)
		{
			memset(v33x, 0, 22);
			*(Bit32s*)v33x = x_WORD_E2970x[jjx].dword_0;
			LOWORD(*(x_DWORD *)&v33x[0x10]) = x_WORD_E2970x[jjx].word_14;
			*(Bit16s*)&v33x[0xc] = x_WORD_E2970x[jjx].word_8;
			*(Bit16s*)&v33x[0xe] = x_WORD_E2970x[jjx].word_10;
			sub_7E5A0_pre_draw(a2, v12, a2, a3, (Bit8u*)v33x, 305, 311);
		LABEL_40:
			x_WORD_E2970x[jjx].dword_0 = *(x_DWORD *)v33x;
			x_WORD_E2970x[jjx].word_14 = *(x_DWORD *)&v33x[0x10];
			continue;
		}
		if (v11 == 2 && a4 == 3)
		{
			v13 = x_WORD_E2970x[jjx].byte_16;
			if (!v13)
			{
				sub_8F100_sound_proc19(0, 41, 127, 64, 0x64u, 0, 2u);
				x_WORD_E2970x[jjx].byte_16 = 1;
				continue;
			}
			if (v13 != 1)
			{
				memset(v33x, 0, 22);
				*(x_DWORD *)v33x = x_WORD_E2970x[jjx].dword_0;
				LOWORD(*(x_DWORD *)&v33x[0x10]) = x_WORD_E2970x[jjx].word_14;
				*(Bit16s*)&v33x[0xc] = x_WORD_E2970x[jjx].word_8;
				*(Bit16s*)&v33x[0xe] = x_WORD_E2970x[jjx].word_10;
				sub_7E5A0_pre_draw(a2, v15, a2, a3, (Bit8u*)v33x, 270, 272);
				goto LABEL_40;
			}
			memset(v33x, 0, 22);
			*(x_DWORD *)v33x = x_WORD_E2970x[jjx].dword_0;
			LOWORD(*(x_DWORD *)&v33x[0x10]) = x_WORD_E2970x[jjx].word_14;
			*(Bit16s*)&v33x[0xc] = x_WORD_E2970x[jjx].word_8;
			*(Bit16s*)&v33x[0xe] = x_WORD_E2970x[jjx].word_10;
			if (sub_7E5A0_pre_draw(a2, v14, a2, a3, (Bit8u*)v33x, 70, 83))
			{
				x_WORD_E2970x[jjx].word_14 = 270;
				x_WORD_E2970x[jjx].byte_16 = 2;
			}
			else
			{
				x_WORD_E2970x[jjx].word_14 = *(x_DWORD *)&v33x[0x10];
			}
			x_WORD_E2970x[jjx].dword_0 = *(x_DWORD *)v33x;
		}
	}
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	//LOBYTE(j) = a4;
	if (a4 == 3 && x_D41A0_BYTEARRAY_4_struct.byteindex_10 == 1)
	{
		v38 = x_DWORD_17DE38str.x_DWORD_17DEC0;
		v37 = x_DWORD_17DE38str.x_DWORD_17DEC4;
		x_DWORD_17DE38str.x_DWORD_17DEC0 = x_DWORD_17DE38str.x_DWORD_17DEC8;
		x_DWORD_17DE38str.x_DWORD_17DEC4 = x_DWORD_17DE38str.x_DWORD_17DECC;

		v38s = xy_DWORD_17DEC0_spritestr;//fixed
		xy_DWORD_17DEC0_spritestr = xy_DWORD_17DEC8_spritestr;//fixed
		/*
		posistruct* xy_DWORD_17DED4_spritestr;
posistruct* xy_DWORD_17DEC0_spritestr;
posistruct* xy_DWORD_17DEC8_spritestr;
		*/

		//HIWORD(v16) = HIWORD(x_DWORD_17DECC);
		if (x_DWORD_17DB70str.x_WORD_17DB74 == 0)
		{
			if (!x_DWORD_17DB70str.x_WORD_17DB74)
			{
				v16 = v40x != -1;
				//BYTE1(v16) = 0;
				v17 = v16 + 1;
				x_DWORD_17DB70str.x_WORD_17DB74 = v17;
				x_DWORD_17DB70str.x_DWORD_17DB70 = j___clock();
			}
		}
		else if (x_DWORD_17DB70str.x_WORD_17DB74 == 1u)
		{
			if (v41x!=-1)
			{
				if (3 == x_DWORD_17DB70str.x_BYTE_17DB8F)
				{
					memset(v25, 0, 36);
					qmemcpy(v25, unk_E24F2, 0x10u);
					qmemcpy(&v32, &unk_E24FE, 2u);
					v25[1] = unk_E17CC_str_0x194[v41x].word_12_x - 80 - a2;
					v25[2] = unk_E17CC_str_0x194[v41x].word_14_y - 60 - a3;
					v25[3] = unk_E17CC_str_0x194[v41x].word_12_x + 16 - a2;
					v25[4] = unk_E17CC_str_0x194[v41x].word_14_y - 60 - a3;
					v25[6] = unk_E17CC_str_0x194[v41x].word_12_x + 16 - a2;
					v25[7] = unk_E17CC_str_0x194[v41x].word_14_y - 4 - a3;
					v25[0] = 464;
					v18x = v40x;
					sub_7E840_draw_textbox_with_line(v25, 238, 264);
					if (v18x!=-1)
					{
						if ((v39 - x_DWORD_17DB70str.x_DWORD_17DB70) / 0x64u > 8)
						{
							x_DWORD_17DB70str.x_DWORD_17DB70 = v39;
							x_DWORD_17DB70str.x_WORD_17DB74 = 2;
						}
					}
				}
			}
		}
		else if (x_DWORD_17DB70str.x_WORD_17DB74 == 2)
		{
			if (v40x!=-1)
			{
				if (x_DWORD_17DB70str.x_BYTE_17DB8F == 3)
				{
					memset(v25, 0, 36);
					v25[1] = unk_E17CC_str_0x194[v40x].word_12_x - 80 - a2;
					v25[2] = unk_E17CC_str_0x194[v40x].word_14_y - 60 - a3;
					v25[3] = unk_E17CC_str_0x194[v40x].word_12_x + 16 - a2;
					v25[4] = unk_E17CC_str_0x194[v40x].word_14_y - 60 - a3;
					v25[6] = unk_E17CC_str_0x194[v40x].word_12_x + 16 - a2;
					v25[7] = unk_E17CC_str_0x194[v40x].word_14_y - 4 - a3;
					v25[0] = 465;
					sub_7E840_draw_textbox_with_line(v25, 238, 264);
					if (v41x!=-1)
					{
						if ((v39 - x_DWORD_17DB70str.x_DWORD_17DB70) / 0x64u > 8)
						{
							x_DWORD_17DB70str.x_DWORD_17DB70 = v39;
							x_DWORD_17DB70str.x_WORD_17DB74 = 1;
						}
					}
				}
			}
		}
		x_DWORD_17DE38str.x_DWORD_17DEC0 = v38;
		x_DWORD_17DE38str.x_DWORD_17DEC4 = v37;
		xy_DWORD_17DEC0_spritestr = v38s;
	}
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	if (x_DWORD_17DB70str.x_BYTE_17DB8E)
		return;

	if (x_DWORD_17DB70str.x_WORD_17DB8A != -1)
	{
		//v20 = (char *)unk_E17CC_0x194;
		v20x = 0;
		v21x = -1;
		while (unk_E17CC_str_0x194[v20x].word_4)
		{
			if (unk_E17CC_str_0x194[v20x].byte_18_act == 1)
				v21x = v20x;
			//v20 += 22;
			v20x++;
		}
		//v22 = (x_WORD*)unk_E17CC_0x194;
		v22x = 0;
		v23 = 0;
		while (unk_E17CC_str_0x194[v22x].word_4)
		{
			if (v23 == x_DWORD_17DB70str.x_WORD_17DB8A)
			{
				sub_7DA70(unk_E17CC_str_0x194[v22x].word_12_x, unk_E17CC_str_0x194[v22x].word_14_y, unk_E17CC_str_0x194[v21x].word_12_x, unk_E17CC_str_0x194[v21x].word_14_y, a2, a3);
				return;
			}
			//v22 += 11;
			v22x++;
			//++v23;
			v23++;
		}
		//for (k = x_WORD_E2970; k[6]; k = (int16_t *)((char *)k + 17))
		for(int kk=0; x_WORD_E2970x[kk].word_12;kk++)
		{
			if (x_DWORD_17DB70str.x_WORD_17DB8A == x_WORD_E2970x[kk].word_6)
			{
				sub_7DA70(x_WORD_E2970x[kk].word_8, x_WORD_E2970x[kk].word_10, unk_E17CC_str_0x194[x_WORD_E2970x[kk].word_4].word_12_x, unk_E17CC_str_0x194[x_WORD_E2970x[kk].word_4].word_14_y, a2, a3);
				return;
			}
		}
		return;
	}
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	if ((v41x!=-1) && (v40x!=-1))
	{
		sub_7DA70(unk_E17CC_str_0x194[v41x].word_12_x, unk_E17CC_str_0x194[v41x].word_14_y, unk_E17CC_str_0x194[v40x].word_12_x, unk_E17CC_str_0x194[v40x].word_14_y, a2, a3);
		return;
	}
	//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
	if ((v41x != -1) && (v40x != -1))
		return;
	sub_7DA70(unk_E17CC_str_0x194[v41x].word_12_x, unk_E17CC_str_0x194[v41x].word_14_y, unk_E17CC_str_0x194[23].word_12_x, unk_E17CC_str_0x194[23].word_14_y, a2, a3);
}

//----- (0007DA70) --------------------------------------------------------
void sub_7DA70(int16_t a1, int16_t a2, int16_t a3, int16_t a4, int16_t a5, int16_t a6)//25ea70 //draw player in map menu
{
	int v6; // edx
	int v7; // ebx
	int16_t v8; // ax
	int v9; // edx
	int16_t v10; // ax
	Bit8u* v11; // ebx
	int v12; // edx
	axis_3d v14x; // [esp+0h] [ebp-10h]
	//int16_t v15; // [esp+2h] [ebp-Eh]
	axis_3d v16x; // [esp+8h] [ebp-8h]
	//int16_t v17; // [esp+Ah] [ebp-6h]

	x_DWORD_17DE38str.x_WORD_17E074 = a3;
	v6 = xy_DWORD_17DED4_spritestr[37].width;
	x_DWORD_17DE38str.x_WORD_17E06C = a1;
	v7 = v6 / 2;
	v8 = v6 / 2 + a3;
	v9 = xy_DWORD_17DED4_spritestr[37].height;
	x_DWORD_17DE38str.x_WORD_17E074 = v8;
	v9 /= 2;
	x_DWORD_17DE38str.x_WORD_17E076 = v9 + a4;
	x_DWORD_17DE38str.x_WORD_17E06C = v7 + a1;
	x_DWORD_17DE38str.x_WORD_17E06E = v9 + a2;
	v16x.x = v8;
	v16x.y = v9 + a4;
	v14x.x = v7 + a1;
	v14x.y = v9 + a2;
	v10 = sub_581E0_maybe_tan2(&v16x, &v14x);
	if (v10 <= 1024 || v10 >= 1536)
	{
		if (v10 <= 1536 || v10 >= 2048)
		{
			if (v10 <= 2048 && v10 <= 0 || v10 >= 512)
			{
				if (v10 <= 512 || v10 >= 1024)
				{
					if (v10 != 2048 && v10)
					{
						if (v10 == 512)
						{
							if (x_DWORD_17DE38str.unk_17E078x[0xa] != 9)
							{
								*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 9;
								x_DWORD_17DE38str.unk_17E078x[0xb] = 12;
								x_DWORD_17DE38str.unk_17E078x[0xa] = 9;
							}
						}
						else if (v10 == 1024)
						{
							if (x_DWORD_17DE38str.unk_17E078x[0xa] != 1)
							{
								x_DWORD_17DE38str.unk_17E078x[0xa] = 1;
								*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 1;
								x_DWORD_17DE38str.unk_17E078x[0xb] = 4;
							}
						}
						else if (v10 == 1536 && x_DWORD_17DE38str.unk_17E078x[0xa] != 25)
						{
							*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 25;
							x_DWORD_17DE38str.unk_17E078x[0xa] = 25;
							x_DWORD_17DE38str.unk_17E078x[0xb] = 28;
						}
					}
					else if (x_DWORD_17DE38str.unk_17E078x[0xa] != 17)
					{
						x_DWORD_17DE38str.unk_17E078x[0xa] = 17;
						*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 17;
						x_DWORD_17DE38str.unk_17E078x[0xb] = 20;
					}
				}
				else if (x_DWORD_17DE38str.unk_17E078x[0xa] != 13)
				{
					*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 13;
					x_DWORD_17DE38str.unk_17E078x[0xa] = 13;
					x_DWORD_17DE38str.unk_17E078x[0xb] = 16;
				}
			}
			else if (x_DWORD_17DE38str.unk_17E078x[0xa] != 5)
			{
				x_DWORD_17DE38str.unk_17E078x[0xa] = 5;
				*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 5;
				x_DWORD_17DE38str.unk_17E078x[0xb] = 8;
			}
		}
		else if (x_DWORD_17DE38str.unk_17E078x[0xa] != 29)
		{
			*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 29;
			x_DWORD_17DE38str.unk_17E078x[0xb] = 32;
			x_DWORD_17DE38str.unk_17E078x[0xa] = 29;
		}
	}
	else if (x_DWORD_17DE38str.unk_17E078x[0xa] != 21)
	{
		*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 21;
		x_DWORD_17DE38str.unk_17E078x[0xa] = 21;
		x_DWORD_17DE38str.unk_17E078x[0xb] = 24;
	}
	*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[4] = x_DWORD_17DE38str.x_WORD_17E06C;
	*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[6] = x_DWORD_17DE38str.x_WORD_17E06E;
	v11 = xy_DWORD_17DED4_spritestr[*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8]].data;
	v12 = x_DWORD_17DE38str.x_WORD_17E06C - *(uint8_t *)(v11 + 4) / 2 - a5;
	sub_81260(
		(int16_t)v12,
		v12,
		x_DWORD_17DE38str.unk_17E078x,
		x_DWORD_17DE38str.x_WORD_17E06C - xy_DWORD_17DED4_spritestr[*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8]].width / 2 - a5,
		x_DWORD_17DE38str.x_WORD_17E06E - xy_DWORD_17DED4_spritestr[*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8]].height / 2 - a6);
}

//----- (0007DD70) --------------------------------------------------------
void sub_7DD70()//25ed70
{
	//int v0; // esi
	int resulty; // eax
	int16_t v2; // dx
	char v3; // bl

	//v0 = (int)x_D41A0_BYTEARRAY_4;
	//resultx = (int)unk_E17CC_0x194;
	resulty = 0;
	v2 = 0;
	while (unk_E17CC_str_0x194[resulty].word_4)
	{
		v3 = unk_E17CC_str_0x194[resulty].byte_18_act;
		unk_E17CC_str_0x194[resulty].word_20 = 0;
		if (v3 == 2)
			unk_E17CC_str_0x194[resulty].word_16 = 70;
		if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 2
			&& x_D41A0_BYTEARRAY_4_struct.levelnumber_43w == v2)
		{
			unk_E17CC_str_0x194[resulty].byte_18_act = 1;
		}
		if (unk_E17CC_str_0x194[resulty].byte_18_act == 1)
			unk_E17CC_str_0x194[resulty].word_16 = 37;
		//resultx += 22;
		unk_E17CC_str_0x194[resulty].byte_19 = 0;
		resulty++;
		v2++;
		//*(x_BYTE *)(resultx - 3) = 0;
	}
	if (x_D41A0_BYTEARRAY_4_struct.levelnumber_43w > 0x18u)
	{
		//for (result = (int)x_WORD_E2970; *(x_WORD *)(result + 12); result += 17)
		for(int ir=0; x_WORD_E2970x[ir].word_12;ir++)
		{
			if (x_D41A0_BYTEARRAY_4_struct.levelnumber_43w == x_WORD_E2970x[ir].word_6)
			{
				if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] & 2)
				{
					x_WORD_E2970x[ir].word_12 = 1;
					x_WORD_E2970x[ir].word_14 = 305;
				}
				else if (x_WORD_E2970x[ir].word_12 == 3)
				{
					x_WORD_E2970x[ir].word_12 = 2;
					x_WORD_E2970x[ir].word_14 = 70;
				}
				unk_E17CC_str_0x194[x_WORD_E2970x[ir].word_4].byte_18_act = 1;
				//result = 22 * x_WORD_E2970x[ir].word_4;
				unk_E17CC_str_0x194[x_WORD_E2970x[ir].word_4].word_16 = 37;
				break;
			}
		}
	}
	//x_D41A0_BYTEARRAY_4 = (Bit8u*)v0;
	//return result;
}


//----- (0007E0E0) --------------------------------------------------------
signed int sub_7E0E0_mouse_events()//25f0e0
{
	int v0; // esi
	//x_WORD *v2; // ebx
	int v3; // edx

	v0 = 0;
	if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == 1)
		return 2;
	//v2 = x_WORD_E1F84;
	Bit32u i = 0;
	if (!(x_WORD_E1F84[5] + (x_WORD_E1F84[6] << 16)))
		return 0;
	do
	{
		if (!(x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1) || v0)
		{//[34eee6] [34eee4] 2b2fb0
			if ((x_WORD_E1F84[i + 12] & 0xff) && sub_7B200_in_region(&x_WORD_E1F84[i], x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))//confirm language
				v3 = x_WORD_E1F84[i + 10] & 0xff;
			else
				v3 = (x_WORD_E1F84[i + 10] & 0xff00) >> 8;
			sub_2BB40_draw_bitmap(x_WORD_E1F84[i + 5], x_WORD_E1F84[i + 6], xy_DWORD_17DED4_spritestr[v3]);
		}
		else if (sub_7B200_in_region(&x_WORD_E1F84[i], x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))//change language
		{
			sub_8F100_sound_proc19(0, 14, 127, 64, 0x64u, 0, 3u);
			sub_2BB40_draw_bitmap(x_WORD_E1F84[i + 5], x_WORD_E1F84[i + 6], xy_DWORD_17DED4_spritestr[x_WORD_E1F84[i + 10] & 0xff]);//asi vykresleni stisknuteho tlacitka
			v0 = x_WORD_E1F84[i + 11] & 0xff;
		}
		i += 22;
	} while (x_WORD_E1F84[i + 10] & 0xff);
	return v0;
}

//----- (0007E1F0) --------------------------------------------------------
Bit16s sub_7E1F0_test_mouse_regions()//25f1f0
{
	Bit16s* v0; // ebx
	Bit16s v1; // esi
	//int v3; // ecx
	//int v4; // edx

	v0 = x_WORD_E2008;
	v1 = 0;
	if (!x_WORD_E2008[5])
		return 0;
	do
	{
		//v3 = xy_DWORD_17DED4_spritestr[0].pointer;
		//v4 = v0[21];
		v0[7] = xy_DWORD_17DED4_spritestr[((Bit8u*)v0)[21]].width;
		v0[8] = xy_DWORD_17DED4_spritestr[((Bit8u*)v0)[21]].height;
		if (!(x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1))
		{
			if (sub_7B200_in_region(v0, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
				sub_2BB40_draw_bitmap(v0[5], v0[6], xy_DWORD_17DED4_spritestr[((Bit8u*)v0)[21]]);
			goto LABEL_9;
		}
		if (sub_7B200_in_region(v0, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
		{
			sub_8F100_sound_proc19(0, 14, 127, 64, 0x64u, 0, 3u);
			sub_2BB40_draw_bitmap(v0[5], v0[6], xy_DWORD_17DED4_spritestr[((Bit8u*)v0)[21]]);
			v1 = ((Bit8u*)v0)[22];
			if (((Bit8u*)v0)[22])
				break;
		}
	LABEL_9:
		v0 += 22;
	} while (v0[5]);
	return v1;
}

int pre_sub_7E320(Bit32u adress, Bit8u* a1)
{
	switch (adress)
	{
	case 0x25f800: {
		return sub_7E800(a1);//25f800
	}
	case 0x25f820: {
		return sub_7E820(a1);//25f800
	}
	case 0x25f640: {
		return sub_7E640(a1);//25f800
	}
	case 0x25f620: {
		return sub_7E620(a1);//25f800
	}
	}
	mydelay(10000);
	exit(1);
}

//----- (0007E320) --------------------------------------------------------
signed int sub_7E320_draw_bitmaps_and_play_sounds(int16_t a1, int a2)//25f320
{
	Bit8u* i; // esi
	Bit8u* v3; // esi
	Bit8u* j; // esi
	Bit8u v5; // al
	Bit8u* k; // esi
	//int v8; // edi
	int v9; // edx
	//int v10; // eax
	char *v11; // edi
	posistruct* v12; // edi
	Bit8u* v13; // esi
	char v14[36]; // [esp+0h] [ebp-24h]
	//char v15; // [esp+10h] [ebp-14h]

	for (i = off_E23E0; i[25]; i += 44)//draw buttons
	{
		if (i[23])
		{
			a2 = i[21];
			sub_7C120_draw_bitmap_640(*((x_WORD *)i + 5), *((x_WORD *)i + 6), xy_DWORD_17DED4_spritestr[a2]);
		}
	}
	if (x_DWORD_17DB70str.x_BYTE_17DB8E)
		return 0;
	v3 = off_E23E0;
	if (off_E23E0[25])
	{
		do//adress 25f57c
		{
			if (*((x_WORD *)v3 + 4) && *(x_DWORD *)v3)
			{
				//v5 = (*(int(__cdecl **)(_BYTE *))v3)(v3);
				v5 = pre_sub_7E320(*(Bit32s*)v3, v3);
				LOWORD(a2) = v5;
				if (!v5)
					return 1;
				*((x_WORD *)v3 + 4) = 0;
				sub_7B5A0_disable_enable();
				return a2;
			}
			v3 += 44;
		} while (v3[25]);
		j = off_E23E0;
		if (!off_E23E0[25])
		{
			k = off_E23E0;
			goto LABEL_34;
		}
		goto LABEL_17;
	}
	for (j = off_E23E0; j[25]; *(j - 20) = 0)
	{
	LABEL_17:
		if (j[23] && j[24])
			sub_7C120_draw_bitmap_640(*((x_WORD *)j + 5), *((x_WORD *)j + 6), xy_DWORD_17DED4_spritestr[j[20]]);
		j += 44;
		*((x_WORD *)j - 18) = 0;
	}
	for (k = off_E23E0; ; k += 44)
	{
	LABEL_34:
		if (!k[25])
		{
			sub_82510(/*a1*//*, (int *)&unk_17DBA8str.unk_17DBA8*/);
			return 0;
		}
		if (k[23])
		{
			//v8 = (int)x_DWORD_17DED4;
			v9 = k[20];
			*((x_WORD *)k + 7) = xy_DWORD_17DED4_spritestr[v9].width;
			*((x_WORD *)k + 8) = xy_DWORD_17DED4_spritestr[v9].height;
			if (sub_7B200_in_region((Bit16s*)k, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
				break;
		}
	LABEL_33:
		;
	}
	if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
	{
		*((x_WORD *)k + 4) = 1;
		sub_7B5A0_disable_enable();
		sub_8F100_sound_proc19(0, 14, 127, 64, 0x64u, 0, 3u);
		goto LABEL_33;
	}
	//v10 = (int)x_D41A0_BYTEARRAY_4;
	k[24] = 1;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10 != 1)
		return 0;
	v11 = (char *)&unk_E2516;
	if (!*((x_WORD *)&unk_E2516 + 1))
		return 0;
	do//adress 25f4e7
	{
		if (v11[17] == k[22])
		{
			memset(v14, 0, 36);
			qmemcpy(v14, v11, 0x12u);
			//qmemcpy(&v15, v11 + 16, 2u);
			v12 = xy_DWORD_17DEC0_spritestr;
			v13 = x_DWORD_17DE38str.x_DWORD_17DEC4;

			xy_DWORD_17DEC0_spritestr = xy_DWORD_17DEC8_spritestr;
			x_DWORD_17DE38str.x_DWORD_17DEC4 = x_DWORD_17DE38str.x_DWORD_17DECC;
			sub_7E840_draw_textbox_with_line((Bit16u*)&v14, 238, 264);
			xy_DWORD_17DEC0_spritestr = v12;
			x_DWORD_17DE38str.x_DWORD_17DEC4 = v13;
			return 0;
		}
		v11 += 18;
	} while (*((x_WORD *)v11 + 1));
	return 0;
}

//----- (0007E5A0) --------------------------------------------------------
signed int sub_7E5A0_pre_draw(int a1, int a2, int16_t a3, int16_t a4, Bit8u* a5, int16_t a6, int16_t a7)//25f5a0
{
	int v7; // edx
	signed int v8; // esi
	int16_t v9; // ax

	v7 = j___clock();
	v8 = 0;
	if ((unsigned int)(v7 - *(x_DWORD *)a5) >> 3 >= 1)
	{
		v9 = *(x_WORD *)(a5 + 16);
		if (v9 <= a7)
		{
			*(x_WORD *)(a5 + 16) = v9 + 1;
		}
		else
		{
			v8 = 1;
			*(x_WORD *)(a5 + 16) = a6;
		}
		*(x_DWORD *)a5 = v7;
	}
	sub_7C120_draw_bitmap_640(*(x_WORD *)(a5 + 12) - a3, *(x_WORD *)(a5 + 14) - a4, xy_DWORD_17DED4_spritestr[*(int16_t *)(a5 + 16)]);
	return v8;
}

//----- (0007E620) --------------------------------------------------------
signed int sub_7E620(Bit8u* a1)//25f620
{
	*(x_WORD *)(a1 + 8) = 0;
	return 2;
}

//----- (0007E640) --------------------------------------------------------
signed int sub_7E640(Bit8u* a1)//25f640
{
	int16_t v1; // ax
	//x_WORD *i; // eax
	int ix;
	//x_WORD *j; // eax
	signed int result; // eax

	if (a1)
		v1 = sub_7BF20_draw_scroll_dialog((int16_t *)(a1 + 26));
	else
		v1 = 1;
	if (v1 == 1)
	{
		x_D41A0_BYTEARRAY_4_struct.levelnumber_43w = 0;
		memset(x_DWORD_17DBC8x, 0, 500);
		memset(x_DWORD_17DDBCx, 0, 100);
		//for (i = (x_WORD*)unk_E17CC_0x194; i[2]; *(i - 3) = 70)
		for (ix = 0; unk_E17CC_str_0x194[ix].word_4; ix++)
		{
			//*(i - 3) = 70; //6
			unk_E17CC_str_0x194[ix].word_16 = 70;
			//i += 11;			
			//*((x_BYTE *)i - 4) = 2; //4
			unk_E17CC_str_0x194[ix].byte_18_act = 2;
			//*((x_BYTE *)i - 3) = 0; //3
			unk_E17CC_str_0x194[ix].byte_19 = 0;
		}
		//for (j = x_WORD_E2970; j[6]; *((x_BYTE *)j - 1) = 0)
		for(int jj=0; x_WORD_E2970x[jj].word_12;jj++)
		{
			x_WORD_E2970x[jj].byte_16 = 0;
			//*((x_BYTE*)j - 1) = 0
			//*(x_WORD *)((char *)j - 5) = 3;
			x_WORD_E2970x[jj].word_12 = 3;
			//*(x_WORD *)((char *)j - 3) = 70;
			x_WORD_E2970x[jj].word_14 = 70;
		}
		memset(&D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.str_611, 0, 505);
		sub_86860_speak_Sound(x_WORD_1803EC);
		std::filesystem::path path_hscreen0dat = file_handling->getFilePath(MC2File::data_screens_hscreen0_dat);
		sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map, 0xB2C44 + 3, 0x87D80 + 3);
		sub_7AA70_load_and_decompres_dat_file(0, 0, 0, 0);
		x_BYTE_17E09D = 0;
		D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dw_w_b_0_2BDE_11230.byte[2] = 0;
		memset(&x_DWORD_17DB70str, 0, 56);
		*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 13;
		x_DWORD_17DE38str.x_WORD_17E06C = 0;
		x_DWORD_17DE38str.unk_17E078x[0xa] = 13;
		x_DWORD_17DE38str.x_BYTE_17E09C = 0;
		x_DWORD_17DE38str.x_WORD_17E06E = 480;
		x_DWORD_17DE38str.unk_17E078x[0xb] = 16;
		x_DWORD_17DB70str.x_BYTE_17DB8F = 1;
		if (a1)
		{
			*(x_WORD *)(a1 + 8) = 0;
			sub_7C020((x_WORD *)(a1 + 26));
		}
		result = 1;
	}
	else if (v1 == 2)
	{
		*(x_WORD *)(a1 + 8) = 0;
		sub_7C020((x_WORD *)(a1 + 26));
		result = 1;
	}
	else
	{
		result = 0;
	}
	return result;
}

//----- (0007E800) --------------------------------------------------------
char sub_7E800(Bit8u* a1)//25f800
{
	char result; // al

	result = sub_78730_save_game_dialog((Bit16s*)a1);
	if (result)
		a1[4] = 0;
	return result;
}

//----- (0007E820) --------------------------------------------------------
char sub_7E820(Bit8u* a1)//25f820
{
	char result; // al

	result = sub_780F0_load_game_dialog((Bit8u*)a1);
	if (result)
		*(x_WORD *)(a1 + 8) = 0;
	return result;
}

//----- (0007E840) --------------------------------------------------------
void sub_7E840_draw_textbox_with_line(Bit16u* a1, int16_t a2, int16_t a3)//25f840
{
	Bit16u* v3; // ebx
	int16_t v5; // si
	//int16_t v6; // di

	v3 = a1;
	if (!a1[1])
		return;
	do
	{
		if (v3[1])
		{
			v5 = v3[1];
			//v6 = v3[1];
			//zatim nic
			//18d 12a 141 ec - 18d 12a 141 ec -1
			//c4 26 11b 6a - c4 26 11b 6a -0 - chybi ocasek
			sub_81360_draw_bitmap_line(v3[3]/* + (v3[4] << 16)*/, v3[4], v3[6]/* + (v3[7] << 16)*/, v3[7], a3);//262360
			//pridany tecky
			sub_7FCB0_draw_text_with_border(v3[0], x_DWORD_E9C4C_langindexbuffer[v3[0]], v5, (v5 + 180), v3[2], 0, 0, a2);//260cb0
			/*
			Save Current Game
			Exit Game
			Select Language
			Play MultiPlayer Game
			Play Game
			Configure Joystick
			Enter Network Session
			Attempting Connection
			Empty
			Play Game
			Enter Your Player Name
			Play MultiPlayer Game
			Load A Previous Game

			Configure Keyboard controls


			*/
			//pridan ramecek s textem
		}
		v3 += 9;
	} while (v3[1]);
}

//----- (0007E8D0) --------------------------------------------------------
void sub_7E8D0(x_WORD *a1, int16_t a2, int16_t a3, int16_t a4, int16_t a5, int16_t a6, int16_t a7)//25f8d0
{
	int16_t v7; // dx
	int16_t v8; // dx
	int16_t v9; // dx
	int16_t v10; // ax
	//int result; // eax
	int16_t v12; // di
	int16_t v13; // dx

	a1[0] = a2 - a4;
	a1[1] = a3 - a5;
	a1[2] = 2 * abs(a1[0]);
	v7 = a1[0];
	a1[3] = 2 * abs(a1[1]);
	if (v7 >= 0)
	{
		if (v7)
			a1[4] = a6;
		else
			a1[4] = 0;
	}
	else
	{
		a1[4] = -a6;
	}
	v8 = a1[1];
	if (v8 >= 0)
	{
		if (v8)
			a1[5] = a7;
		else
			a1[5] = 0;
	}
	else
	{
		a1[5] = -a7;
	}
	a1[6] = a2;
	a1[7] = a3;
	v9 = a1[3];
	v10 = a1[2];
	if (v10 <= v9)
	{
		//result = v10 - (v9 >> 1);
		a1[8] = v10 - (v9 >> 1);
	}
	else
	{
		//result = v10 >> 1;
		a1[8] = v9 - v10 >> 1;
	}
	v12 = a1[6];
	a1[9] = 0;
	if (a4 >= v12)
	{
		if (a4 > v12)
			a1[10] = 1;
	}
	else
	{
		a1[10] = 2;
	}
	v13 = a1[7];
	if (a5 >= v13)
	{
		if (a5 > v13)
			a1[11] = 1;
	}
	else
	{
		a1[11] = 2;
	}
	//  return result;
}

//----- (0007E9D0) --------------------------------------------------------
signed int sub_7E9D0(x_WORD *a1, x_WORD *a2, x_WORD *a3)//25f9d0
{
	int16_t v4; // cx
	uint16_t v5; // cx
	int16_t v6; // si
	int16_t v7; // di
	uint16_t v8; // dx
	int16_t v9; // cx
	int16_t v10; // si

	if (a3[2] <= a3[3])
	{
		if (a2[0] == a3[7])
			return 1;
		if (a3[8] >= 0)
		{
			a1[0] += a3[4];
			a3[8] -= a3[3];
		}
		a2[0] += a3[5];
		v4 = a3[2];
	}
	else
	{
		if (a1[0] == a3[6])
			return 1;
		if (a3[8] >= 0)
		{
			a2[0] += a3[5];
			a3[8] -= a3[2];
		}
		a1[0] += a3[4];
		v4 = a3[3];
	}
	a3[8] += v4;
	v5 = a3[10];
	if (v5 >= 1u)
	{
		if (v5 <= 1u)
		{
			v6 = a3[6];
			if (a1[0] < v6)
				a1[0] = v6;
		}
		else if (v5 == 2)
		{
			v7 = a3[6];
			if (a1[0] > v7)
				a1[0] = v7;
		}
	}
	v8 = a3[11];
	if (v8 >= 1u)
	{
		if (v8 <= 1u)
		{
			v9 = a3[7];
			if (a2[0] < v9)
				a2[0] = v9;
		}
		else if (v8 == 2)
		{
			v10 = a3[7];
			if (a2[0] > v10)
				a2[0] = v10;
		}
	}
	return 0;
}

int debugcounter_25fae0 = 0;

//----- (0007EAE0) --------------------------------------------------------
int sub_7EAE0_new_game_draw(Bit16s* posx, Bit16s* posy, int16_t* a3, int16_t* a4, Bit8s* a5, x_WORD* a6)//25fae0
{
	char v6; // al
	int v7x; // eax
	type_x_WORD_E2970* v8x; // eax
	//char *v9; // eax
	int v9x;
	//int v10x; // ecx
	//int v11x; // edx
	//Bit16s* v12; // eax
	int v12x;
	int v13; // ecx
	int16_t v14; // dx
	//x_WORD *v15; // eax
	int v15x;
	int16_t v16; // cx
	//int16_t *i; // eax
	int v18; // ecx
	//x_WORD *j; // eax
	int jx = 0;
	int v20; // edx
	//int v21; // eax
	int v22; // edx
	int16_t v23; // cx
	//int v24; // eax
	int v25; // ST18_4
	int v26; // ST14_4
	int v28; // edx
	//int16_t v29; // cx
	//Bit16s nextposx; // dx
	//Bit16s nextposy; // dx
	int v32; // edx
	signed int v33; // eax
	int16_t v34; // dx
	char v35; // cl
	int16_t v36; // ax
	int v37; // edx
	signed int v38; // eax
	signed int v39; // eax
	//char v41; // ch
	char v42; // cl
	int v43; // ecx
	//uint8_t *v44; // edi
	int v44x;
	//int v45; // eax
	type_x_WORD_E2970* v46x; // eax
	//x_WORD *v47; // edi
	int16_t v48; // ST10_2
	int16_t v49; // ST0C_2
	int16_t v50; // ST08_2
	int16_t v51; // ax
	//int v52; // eax
	int16_t v54; // [esp-Ch] [ebp-68h]
	Bit16s v55[10]; // [esp+0h] [ebp-5Ch]
	//int16_t v56; // [esp+Ah] [ebp-52h] //5
	//int16_t v57; // [esp+Ch] [ebp-50h] //6
	//int16_t v58; // [esp+Eh] [ebp-4Eh] //7
	//int16_t v59; // [esp+10h] [ebp-4Ch] //8
	int v60; // [esp+2Ch] [ebp-30h]
	//x_WORD *v61; // [esp+30h] [ebp-2Ch]
	int v61x;
	//x_WORD *k; // [esp+34h] [ebp-28h]
	//x_WORD *v63; // [esp+38h] [ebp-24h]
	int v63x;
	//x_WORD *v64; // [esp+3Ch] [ebp-20h]
	int v64x;
	int v65; // [esp+40h] [ebp-1Ch]
	int v66; // [esp+44h] [ebp-18h]
	int v67; // [esp+48h] [ebp-14h]
	int v68; // [esp+4Ch] [ebp-10h]
	int v69; // [esp+50h] [ebp-Ch]
	//char *v70; // [esp+54h] [ebp-8h]
	int v70x;
	int v71; // [esp+58h] [ebp-4h]


	//fix it
	v22 = 0;
	v28 = 0;
	v32 = 0;
	v33 = 0;
	v37 = 0;
	v38 = 0;
	v39 = 0;
	//fix it

	v6 = *a5;
	v71 = 0;
	v67 = -1;
	switch (v6)
	{
	case 1://prepare 
		//v12 = (Bit16s*)unk_E17CC_0x194;
		v12x = 0;
		v13 = 0;
		v61x = -1;
		while (unk_E17CC_str_0x194[v12x].word_4)
		{
			if (unk_E17CC_str_0x194[v12x].byte_18_act == 1)
			{
				*posx = unk_E17CC_str_0x194[v12x].word_4;
				v61x = v12x;
				v14 = unk_E17CC_str_0x194[v12x].word_6;
				v67 = v13;
				*posy = v14;
			}
			//v12 += 11;
			v12x++;
			v13++;
		}
		//adress 25fc6f
		if ((v61x!=-1) && x_DWORD_17DB70str.x_WORD_17DB8A != -1 && v67 != x_DWORD_17DB70str.x_WORD_17DB8A)
		{
			//v15 = (x_WORD*)unk_E17CC_0x194;
			v15x = 0;
			v16 = 0;
			while (unk_E17CC_str_0x194[v15x].word_4)
			{
				if (v16 == x_DWORD_17DB70str.x_WORD_17DB8A)
				{
					*posx = unk_E17CC_str_0x194[v15x].word_4;
					*posy = unk_E17CC_str_0x194[v15x].word_6;
					*a5 = 3;
					break;
				}
				//v15 += 11;
				v15x++;
				v16++;
			}
			if (*a5 != 3)
			{
				//for (i = x_WORD_E2970; i[6]; i = (int16_t *)((char *)i + 17))
				for(int ii=0;x_WORD_E2970x[ii].word_12;ii++)
				{
					if (x_DWORD_17DB70str.x_WORD_17DB8A == x_WORD_E2970x[ii].word_6)
					{
						*posx = unk_E17CC_str_0x194[x_WORD_E2970x[ii].word_4].word_4;
						*posy = unk_E17CC_str_0x194[x_WORD_E2970x[ii].word_4].word_6;
						*a5 = 3;
						break;
					}
				}
			}
		}
		else
		{
			x_DWORD_17DB70str.x_WORD_17DB8A = -1;
		}
		memset(&x_DWORD_17DE28str, 0, 13);
		if (x_DWORD_17DB70str.x_WORD_17DB8A == -1)
		{
			v18 = 0;
			//for (j = (x_WORD*)unk_E17CC_0x194;/**(Bit32s*)&*/j[2] != 0; j += 11)
			for (jx = 0;/**(Bit32s*)&*/unk_E17CC_str_0x194[jx].word_4 != 0; jx++)
			{
				v66 = v18;
				/*if ( !j[2] )
				  break;*/
				if (unk_E17CC_str_0x194[jx].byte_18_act == 2)
				{
					*a3 = unk_E17CC_str_0x194[jx].word_4;
					*a4 = unk_E17CC_str_0x194[jx].word_6;
					if (v66)
					{
						*a5 = 2;
						/*j = (x_WORD *)*/sub_7E8D0(a6, *a3, *a4, *posx, *posy, 4, 4);
					}
					else
					{
						*posx = unk_E17CC_str_0x194[jx].word_4;
						//LOWORD(j) = j[3];
						*posy = unk_E17CC_str_0x194[jx].word_6;
						*a5 = 3;
						if (*posy > 480)
							*posy = 480;
						if (*posx > 640)
							*posx = 640;
						v20 = v66;
						*a5 = 3;
						if (v20 < 24)
						{
							x_DWORD_17DE28str.x_WORD_17DE30_posx = *posx;
							x_DWORD_17DE28str.x_WORD_17DE32_posy = *posy;
							//v21 = (int)x_D41A0_BYTEARRAY_4;
							x_DWORD_17DE28str.x_BYTE_17DE34 = ((x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x40) != 0) + 1;
							//v21 = x_DWORD_17DE28str.x_BYTE_17DE34;
							//j = (x_WORD *)j___clock();
							x_DWORD_17DE28str.x_DWORD_17DE28 = j___clock();
						}
					}
					break;
				}
				v18 = v66 + 1;
			}
			if (*a5 != 1 || x_DWORD_17DB70str.x_BYTE_17DB8E)
				goto LABEL_66;
		}
		else
		{
			memset(&x_DWORD_17DE28str, 0, 13);
			//j = (x_WORD*)&unk_E17CC[0x194];
			v23 = 0;
			//while ( j[2] )
			//for (j = (x_WORD*)unk_E17CC_0x194;j[2] != 0; j += 11)
			for (jx = 0; unk_E17CC_str_0x194[jx].word_4 != 0; jx++)
			{
				if (unk_E17CC_str_0x194[jx].byte_18_act == 2)
				{
					if (v23 < 24)
					{
						x_DWORD_17DE28str.x_WORD_17DE30_posx = *posx;
						x_DWORD_17DE28str.x_WORD_17DE32_posy = *posy;
						//v24 = (int)x_D41A0_BYTEARRAY_4;
						x_DWORD_17DE28str.x_BYTE_17DE34 = ((x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x40) != 0) + 1;
						//LOBYTE(v24) = x_DWORD_17DE28str.x_BYTE_17DE34;
						//j = (x_WORD *)j___clock();
						x_DWORD_17DE28str.x_DWORD_17DE28 = j___clock();
					}
					break;
				}
				//j += 11;
				v23++;
			}
		}
		*a5 = 3;
	LABEL_66:
		sub_81760_new_game_subdraw(&unk_E17CC_str_0x194[jx]);//draw cursor
		
		goto LABEL_92;
	case 2:
		v25 = *a4;
		v26 = *a3;
		if (sub_7E9D0(posx, posy, a6))
		{
			*a5 = 3;
			memset(&x_DWORD_17DE28str, 0, 13);
			x_DWORD_17DE28str.x_WORD_17DE30_posx = *posx;
			x_DWORD_17DE28str.x_WORD_17DE32_posy = *posy;
			x_DWORD_17DE28str.x_BYTE_17DE34 = ((x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x40) != 0) + 1;
			x_DWORD_17DE28str.x_DWORD_17DE28 = j___clock();
		}
		goto LABEL_92;
	case 3:
		if (x_DWORD_17DB70str.x_BYTE_17DB8E)
			goto LABEL_92;
		//x_WORD_E29D6 = x_DWORD_17DEE4_mouse_positionx;
		x_WORD_E29D6_not_movex = 1;
		if (x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx)//mousex>0
		{
			if (x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx < 638)
				goto LABEL_75;
			*posx += x_DWORD_17DB70str.x_WORD_17DB82_shift_step;//shift position by step
		}
		else//mousex==0
		{
			*posx -= x_DWORD_17DB70str.x_WORD_17DB82_shift_step;//shift position by step
		}
		x_WORD_E29D6_not_movex = 0;//add
		//x_WORD_E29D6 = v29;
		//*posx = nextposx;
	LABEL_75:
		if (x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony)//mousey>0
		{
			if (x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony < 478)
				goto LABEL_80;
			*posy += x_DWORD_17DB70str.x_WORD_17DB82_shift_step;//shift position by step
		}
		else//mousey==0
		{
			*posy -= x_DWORD_17DB70str.x_WORD_17DB82_shift_step;//shift position by step
		}
		x_WORD_E29D6_not_movex = 0;//shift right up or down
		//*posy = nextposy;
	LABEL_80:
		if (*posx >= 0)
		{
			if (*posx >= 638)
				*posx = 638;
		}
		else
		{
			*posx = 0;
		}
		if (*posy >= 0)
		{
			if (*posy >= 478)
				*posy = 478;
		}
		else
		{
			*posy = 0;
		}
		if (x_WORD_E29D6_not_movex)
		{
			x_DWORD_17DB70str.x_WORD_17DB82_shift_step = 0;
		}
		else
		{
			x_DWORD_17DB70str.x_WORD_17DB82_shift_step += 4;
			if (x_DWORD_17DB70str.x_WORD_17DB82_shift_step > 24)
				x_DWORD_17DB70str.x_WORD_17DB82_shift_step = 24;
		}
		goto LABEL_92;
	case 4:
		if (x_DWORD_17DB70str.x_WORD_17DB8A > 24)
		{
			v8x = sub_824E0(x_DWORD_17DB70str.x_WORD_17DB8A);
			if (!v8x)
				goto LABEL_10;
			*posx = unk_E17CC_str_0x194[v8x->word_4].word_4;
			v7x = v8x->word_4;
		}
		else
		{
			v7x = x_DWORD_17DB70str.x_WORD_17DB8A;
			*posx = unk_E17CC_str_0x194[v7x].word_4;
		}
		*posy = unk_E17CC_str_0x194[v7x].word_6;
	LABEL_10:
		if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode || x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons)
		{
			*a5 = 1;
			x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons = 0;
			x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status = 0;
			x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 0;
		}
		//v9 = (char *)unk_E17CC_0x194;
		v9x = 0;
		v64x = -1;
		v70x = 0;
		while (unk_E17CC_str_0x194[v9x].word_4)
		{
			if (unk_E17CC_str_0x194[v9x].byte_18_act == 2)
			{
				v64x = v9x;
				break;
			}
			//v9 += 22;
			v9x++;
			v70x++;
		}
		//v10x = v64x;
		if (v64x!=-1)
		{
			//LOWORD(v9) = v64[2];
			unk_E17CC_str_0x194[v64x-1].byte_18_act = 2;
			v70x = unk_E17CC_str_0x194[v64x].word_4;
			unk_E17CC_str_0x194[v64x].word_4 = 0;
		}
		sub_81760_new_game_subdraw(&unk_E17CC_str_0x194[v9x]);
		if (v64x!=-1)
		{
			//v11x = v64x;
			unk_E17CC_str_0x194[v64x - 1].byte_18_act = 1;
			unk_E17CC_str_0x194[v64x].word_4 = v70x;
		}
	LABEL_92:
		if (x_WORD_E29D6_not_movex)
		{
			sub_85C8B_draw_new_game_map_background(x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map, x_DWORD_180628b_screen_buffer, *posx, *posy, 160, 480);//draw game word map
			sub_7D400_draw_texts_and_play_sounds(*posx, *posx, *posy, *a5);//draw helps, cursor, flags
			// FIXME: types
			// /*LOWORD(v38) = */sub_81EE0_draw_and_sound_dragon_and_fire(*posx, v37, (int)posy, (int16_t)a5, *posx, *posy); // fair animation
			//LOBYTE(v38) = x_DWORD_17DB70str.x_BYTE_17DB8E;
			//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
			if (x_DWORD_17DB70str.x_BYTE_17DB8E)
			{
				// FIXME: types
				// v38 = sub_80D40_move_graphics_and_play_sounds((int16_t)posx, *posx, *posy, x_DWORD_17DB70str.x_WORD_17DB84, x_DWORD_17DB70str.x_WORD_17DB86, x_DWORD_17DB70str.x_WORD_17DB88);
				//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
				v71 = v38;
				if (v38)
				{
					v38 = 0;
					x_DWORD_17DB70str.x_BYTE_17DB8E = 0;
				}
			}
			//HIBYTE(v34) = BYTE1(x_DWORD_17DE5C_border_bitmap);
			sub_85CC3_draw_round_frame((Bit16u*)x_DWORD_17DE38str.x_DWORD_17DE5C_border_bitmap);//maybe round frame
			v34 = *a5;
			if (*a5 == 4)
			{
				v36 = x_DWORD_17DB70str.x_WORD_17DB8A;
				goto LABEL_107;
			}
			if ((x_BYTE)v34 == 5)
			{
				v36 = x_DWORD_17DB70str.x_WORD_17DB8C;
				goto LABEL_107;
			}
		}
		else
		{
			//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
			sub_85C8B_draw_new_game_map_background(x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map, x_DWORD_180628b_screen_buffer, *posx, *posy, 160, 480);
			//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
			sub_7D400_draw_texts_and_play_sounds(*posx, *posx, *posy, *a5);//draw helps, cursor, flags
			//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
			// FIXME: types
			// /*LOWORD(v33) = */sub_81EE0_draw_and_sound_dragon_and_fire(*posx, v32, (int)posy, (int16_t)a5, *posx, *posy);
			//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
			if (x_DWORD_17DB70str.x_BYTE_17DB8E)
			{
				// FIXME: types
				// v33 = sub_80D40_move_graphics_and_play_sounds((int16_t)posx, *posx, *posy, x_DWORD_17DB70str.x_WORD_17DB84, x_DWORD_17DB70str.x_WORD_17DB86, x_DWORD_17DB70str.x_WORD_17DB88);
				v71 = v33;
				if (v33)
					x_DWORD_17DB70str.x_BYTE_17DB8E = 0;
			}
			

			sub_85CC3_draw_round_frame(/*v33, posy,*/ (uint16_t *)x_DWORD_17DE38str.x_DWORD_17DE5C_border_bitmap);
			//VGA_Debug_Blit(640, 480, x_DWORD_180628b_screen_buffer);
			v34 = 1;
			v35 = *a5;
			x_WORD_E29D6_not_movex = 1;
			if (v35 == 4)
			{
				v36 = x_DWORD_17DB70str.x_WORD_17DB8A;
			LABEL_107:
				sub_82C20_drawEndGameTable(v36);
				goto LABEL_108;
			}
			if (v35 == 5)
			{
				v36 = x_DWORD_17DB70str.x_WORD_17DB8C;
				goto LABEL_107;
			}
		}
	LABEL_108:
		// FIXME: types
		// v39 = sub_7E320_draw_bitmaps_and_play_sounds(v34, (int)a5);//four buttons in corners and helps
		
		v69 = v39;
		if (!x_DWORD_17DB70str.x_BYTE_17DB8E && !v71 && !v39)
		{
			//v41 = *a5;
			if (*a5 == 3)
			{
				if (x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status == 111 || x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status == 79)
				{
					v42 = x_DWORD_17DE28str.x_BYTE_17DE34;
					if (x_DWORD_17DE28str.x_BYTE_17DE34 == 1)
					{
						v39 = x_DWORD_17DE28str.x_DWORD_17DE2C;
						x_DWORD_17DE28str.x_DWORD_17DE28 = x_DWORD_17DE28str.x_DWORD_17DE2C;
						x_DWORD_17DE28str.x_BYTE_17DE34 = 2;
						x_BYTE_17E09D = v42;
					}
					else if (x_DWORD_17DE28str.x_BYTE_17DE34 == 2)
					{
						v39 = j___clock();
						x_DWORD_17DE28str.x_DWORD_17DE2C = v39;
						x_DWORD_17DE28str.x_BYTE_17DE34 = 1;
						x_DWORD_17DE28str.x_DWORD_17DE28 = v39;
						x_BYTE_17E09D = 0;
					}
				}
				//LOBYTE(v39) = x_DWORD_17DE28str.x_BYTE_17DE34;
				if (x_DWORD_17DE28str.x_BYTE_17DE34 == 1)
				{
					v43 = j___clock();
					x_DWORD_17DE28str.x_DWORD_17DE2C = v43;
					v60 = 100;
					if ((v43 - x_DWORD_17DE28str.x_DWORD_17DE28) / 0x64u > 0xF)
					{
						x_DWORD_17DE28str.x_DWORD_17DE28 = v43;
						x_DWORD_17DE28str.x_BYTE_17DE34 = 2;
					}
					if (x_DWORD_17DE28str.x_WORD_17DE32_posy < 478)
						v54 = 280;
					else
						v54 = 60;
					//adress 2602a0

					sub_80C30_draw_texts(130, v54, 380);//divny text
					
				}
				else if (x_DWORD_17DE28str.x_BYTE_17DE34 <= 2u || x_DWORD_17DE28str.x_BYTE_17DE34 == 3)
				{
					//adress 2602a7
					sub_80C30_draw_texts(0, 0, 0);
				}
			}
		}
		if (v69 == 2 && !v71 && !x_DWORD_17DB70str.x_BYTE_17DB8E)
			v71 = v69;
		if (!v69 && !v71)
		{
			if (*a5 == 3 && !v71)
			{
				//BYTE1(v39) = x_DWORD_17DB70str.x_BYTE_17DB8E;
				if (!x_DWORD_17DB70str.x_BYTE_17DB8E)
				{
					if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
					{
						//v44 = (uint8_t *)unk_E17CC_0x194;
						v44x = 0;
						v68 = 0;
						while (unk_E17CC_str_0x194[v44x].word_4)
						{
							v55[5] = unk_E17CC_str_0x194[v44x].word_12_x - *posx;
							v55[6] = unk_E17CC_str_0x194[v44x].word_14_y - *posy;
							v55[7] = unk_E17CC_str_0x194[v44x].word_8;
							v55[8] = unk_E17CC_str_0x194[v44x].word_10;
							if (sub_7B200_in_region(v55, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
							{
								x_DWORD_17DB70str.x_WORD_17DB84 = unk_E17CC_str_0x194[v44x].word_12_x;
								x_DWORD_17DB70str.x_WORD_17DB86 = unk_E17CC_str_0x194[v44x].word_14_y;
								x_DWORD_17DB70str.x_WORD_17DB88 = unk_E17CC_str_0x194[v44x].byte_18_act;
								// FIXME: types
								// sub_80D40_move_graphics_and_play_sounds((int16_t)posx, *posx, *posy, unk_E17CC_str_0x194[v44x].word_12_x, unk_E17CC_str_0x194[v44x].word_14_y, unk_E17CC_str_0x194[v44x].byte_18_act);
								//v45 = (int)x_D41A0_BYTEARRAY_4;
								x_DWORD_17DB70str.x_BYTE_17DB8E = 1;
								x_D41A0_BYTEARRAY_4_struct.levelnumber_43w = v68;
								if (unk_E17CC_str_0x194[v44x].byte_18_act == 1)
									x_D41A0_BYTEARRAY_4_struct.setting_38545 |= 4u;
								v46x = sub_824B0(x_D41A0_BYTEARRAY_4_struct.levelnumber_43w);
								if (v46x && v46x->word_12 == 2)
									x_D41A0_BYTEARRAY_4_struct.setting_38545 |= 0x10u;
								if (x_D41A0_BYTEARRAY_4_struct.levelnumber_43w == 24)
									x_D41A0_BYTEARRAY_4_struct.setting_38545 |= 0x20u;
								break;
							}
							if (unk_E17CC_str_0x194[v44x].byte_18_act == 2)
								break;
							v44x++;// += 22;
							v68++;
						}
						if (!v71 && !x_DWORD_17DB70str.x_BYTE_17DB8E)
						{
							//v47 = x_WORD_E2970;
							int v47i = 0;
							if (x_WORD_E2970x[v47i].word_8)
							{
								while (1)
								{
									if (x_WORD_E2970x[v47i].word_12 != 3)
									{
										v55[5] = x_WORD_E2970x[v47i].word_8 - *posx;
										v55[6] = x_WORD_E2970x[v47i].word_10 - *posy;
										v55[7] = 40;
										v55[8] = 40;
										if (sub_7B200_in_region(v55, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
											break;
									}
									//v47 = (x_WORD *)((char *)v47 + 17);
									v47i++;
									if (!x_WORD_E2970x[v47i].word_8)
										goto LABEL_179;
								}
								if (x_WORD_E2970x[v47i].word_12 == 1)
									x_D41A0_BYTEARRAY_4_struct.setting_38545 |= 4u;
								x_DWORD_17DB70str.x_WORD_17DB84 = x_WORD_E2970x[v47i].word_8;
								x_DWORD_17DB70str.x_WORD_17DB86 = x_WORD_E2970x[v47i].word_10;
								v48 = x_WORD_E2970x[v47i].word_8;
								v49 = *posy;
								v50 = *posx;
								x_DWORD_17DB70str.x_WORD_17DB88 = 1;
								// FIXME: types
								// sub_80D40_move_graphics_and_play_sounds((int16_t)posx, v50, v49, v48, x_DWORD_17DB70str.x_WORD_17DB86, 1);
								v51 = x_WORD_E2970x[v47i].word_6;
								x_DWORD_17DB70str.x_BYTE_17DB8E = 1;
								x_D41A0_BYTEARRAY_4_struct.levelnumber_43w = v51;
							}
						}
					}
					else if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 2)
					{
						LOBYTE(v39) = 0;
						//v63 = (x_WORD*)unk_E17CC_0x194;
						v63x=0;
						v65 = v39;
						while (unk_E17CC_str_0x194[v63x].word_4)
						{
							v55[5] = unk_E17CC_str_0x194[v63x].word_12_x - *posx;
							v55[6] = unk_E17CC_str_0x194[v63x].word_14_y - *posy;
							v55[7] = unk_E17CC_str_0x194[v63x].word_8;
							v55[8] = unk_E17CC_str_0x194[v63x].word_10;
							if (sub_7B200_in_region(v55, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
							{
								if (unk_E17CC_str_0x194[v63x].byte_18_act == 1)
								{
									x_DWORD_17DB70str.x_WORD_17DB8C = v65;
									*a5 = 5;
									x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons = 0;
								}
								break;
							}
							//v63 += 11;
							v63x++;
							v65++;
						}
						if (*a5 != 5)
						{
							//for (k = x_WORD_E2970; k[4]; k = (x_WORD *)((char *)k + 17))
							for(int kk=0; x_WORD_E2970x[kk].word_8;kk++)
							{
								if (x_WORD_E2970x[kk].word_12 != 3)
								{
									v55[5] = x_WORD_E2970x[kk].word_8 - *posx;
									v55[6] = x_WORD_E2970x[kk].word_10 - *posy;
									v55[7] = 40;
									v55[8] = 40;
									if (sub_7B200_in_region(v55, x_DWORD_17DE38str.x_DWORD_17DEE4_mouse_positionx, x_DWORD_17DE38str.x_DWORD_17DEE8_mouse_positiony))
									{
										//v52 = (int)k;
										if (x_WORD_E2970x[kk].word_12 == 1)
										{
											*a5 = 5;
											x_DWORD_17DB70str.x_WORD_17DB8C = x_WORD_E2970x[kk].word_6;
										}
										break;
									}
								}
							}
						}
					}
				}
			}
		LABEL_179:
			if (!v71 && x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode == 1)
				v71 = 2;
		}
		return v71;
	case 5:
		if (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode || x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons)
		{
			x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons = 0;
			*a5 = 3;
			x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status = 0;
			x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 0;
		}
		goto LABEL_92;
	default:
		goto LABEL_92;
	}
}

//----- (0007F6A0) --------------------------------------------------------
int sub_7F6A0(int a1, int a2, int16_t a3, int16_t a4, char *a5, x_BYTE *a6, uint8_t a7)//2606a0
{
	Bit8u v7; // al
	int16_t v8; // si
	int v10; // [esp+0h] [ebp-4h]

	v10 = j___clock();
	v7 = x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode;
	*a6 = strlen(a5);
	if (v7 < 0xFu)
	{
		if (v7 < 1u)
			goto LABEL_12;
		if (v7 <= 1u)
			goto LABEL_16;
		if (v7 != 14)
			goto LABEL_12;
	}
	else
	{
		if (v7 <= 0xFu)
			goto LABEL_16;
		if (v7 < 0x1Cu)
			goto LABEL_12;
		if (v7 <= 0x1Cu)
			goto LABEL_16;
		if (v7 != 83)
		{
		LABEL_12:
			if (*a6 < 0xFu && x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status && sub_7C200(x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status))
			{
				a5[(uint8_t)*a6] = x_DWORD_17DE38str.x_BYTE_17DF11_last_key_status;
				a5[(uint8_t)*a6 + 1] = 0;
			}
			goto LABEL_16;
		}
	}
	if (*a6)
	{
		a5[strlen(a5) - 1] = 0;
		*a6 = strlen(a5);
	}
LABEL_16:
	_strupr(a5);
	sub_2BC10_draw_text(a5, a3, a4, a7);
	if ((v10 - x_DWORD_17DE38str.x_DWORD_17DED0) / 0xCu >= 1)
	{
		v8 = sub_6FC10_letter_width();
		sub_2BC10_draw_text((char*)"_", a3 + v8 * strlen(a5), a4, a7);
		x_DWORD_17DE38str.x_DWORD_17DED0 = v10;
	}
	return 0;
}

//----- (0007F7D0) --------------------------------------------------------
int sub_7F7D0(Bit8u** a1, Bit8u** a2, Bit8u* a3, char* langfilename, posistruct* a3dattabindex)//2607d0
{
	//int v4; // edi
	FILE* langfile; // eax
	//FILE* v6; // ebx
	//int v7; // ebx
	//Bit8u* v8; // eax
	//uint8_t v9; // bl
	//char v10; // cl
	//char v12; // [esp+0h] [ebp-5Ch]
	Bit16u langfilelenght; // [esp+50h] [ebp-Ch]
	//FILE* v14; // [esp+54h] [ebp-8h]
	//uint8_t i; // [esp+58h] [ebp-4h]

	//Bit8u a3x[5000];//fix it

	//v4 = 0;
	//fix it
	//v9=0;//fix it
	//fix it
	sprintf(printbuffer, "%c%s/%s", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, ":/NETHERW/LANGUAGE", langfilename);
	for (Bit8u i = 0; i < 2; i++)//[ebp-4]=354f70
	{
		//v4 = atoi(langfilename +1);
		//v4 = unknown_libname_1_atoi((char*)(a4 + 1));
		langfile = sub_98817_open(printbuffer, 512);//279f9e
		//v6 = langfile;
		//v14 = langfile;
		if (langfile != NULL)
		{
			langfilelenght = x_filelength(langfile);
			sub_988A7_read(langfile, a3, 4773);//2798a7
			sub_988A7_read(langfile, (a3 + 4773), 12);
			if (x_BYTE_E29E0 || x_DWORD_D41BC_langbuffer)//[2b39e0]00 || [2a51bc]00
				sub_83E80_freemem4((Bit8u*)x_DWORD_D41BC_langbuffer);
			//v7 = langfilelenght - 4785;
			x_DWORD_D41BC_langbuffer = (char*)malloc(langfilelenght - 4785);
			//x_DWORD_D41BC_langbuffer = (Bit8u*)v8;
			if (x_DWORD_D41BC_langbuffer)
			{
				x_BYTE_E29E0 = 1;
				sub_988A7_read(langfile, (Bit8u*)x_DWORD_D41BC_langbuffer, langfilelenght - 4785);
			}
			sub_98882_close(langfile);
			break;
		}
		//v9 = i;
		sprintf(printbuffer, "LANGUAGE/%s", langfilename);
	}
	*a1 = a3 + 4773;//35513c
	//v10 = x_WORD_180660_VGA_type_resolution;
	*a2 = a3 + 4785;
	//posistruct a3dattab[1000];
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_98709_create_index_dattab_power(*a1, a3 + 4785, a3, a3dattabindex);
	else
		sub_9874D_create_index_dattab(*a1, a3 + 4785, a3, a3dattabindex);
	sub_5B870_copy_sentence(x_DWORD_D41BC_langbuffer, x_DWORD_E9C4C_langindexbuffer, 471);//fix it //2a51bc //Exit Game
	return atoi(langfilename + 1);
}

//----- (0007F960) --------------------------------------------------------
int sub_7F960(Bit8u* a1, Bit8u* a2, Bit8u* a3, char* langcountstring, posistruct* a3dattabindex)
//int sub_7F7D0(Bit8u** a1, Bit8u** a2, Bit8u* a3, char* langfilename, posistruct* a3dattabindex)//2607d0
{
	Bit16u langcount; // esi
	FILE* langfile; // eax
	//FILE* v6; // ebx
	//FILE* v7; // edi
	int v8; // ebx
	//Bit8u* v9; // eax
	uint8_t v10; // bl
	//char v12; // [esp+0h] [ebp-58h]
	int v13; // [esp+50h] [ebp-8h]
	uint8_t i; // [esp+54h] [ebp-4h]

	langcount = 0;
	sprintf(printbuffer, "%c%s/%s", x_D41A0_BYTEARRAY_4_struct.harddiskchar_byte4_182, ":/NETHERW/LANGUAGE", langcountstring);
	for (i = 0; i < 2u; i = v10 + 1)
	{
		langcount = atoi((langcountstring + 1));
		langfile = sub_98817_open(printbuffer, 512);
		//v6 = v5;
		//v7 = v5;
		if (langfile != NULL)
		{
			v13 = x_filelength(langfile);
			sub_988A7_read(langfile, a3, 4773);
			sub_988A7_read(langfile, a3 + 4773, 12);
			if (x_BYTE_E29E0 || x_DWORD_D41BC_langbuffer)
				sub_83E80_freemem4((Bit8u*)x_DWORD_D41BC_langbuffer);
			v8 = v13 - 4785;
			//v9 = (Bit8u*)malloc(v13 - 4785);
			x_DWORD_D41BC_langbuffer = (char*)malloc(v13 - 4785);
			if (x_DWORD_D41BC_langbuffer)
			{
				x_BYTE_E29E0 = 1;
				sub_988A7_read(langfile, (Bit8u*)x_DWORD_D41BC_langbuffer, v8);
			}
			sub_98882_close(langfile);
			break;
		}
		v10 = i;
		sprintf(printbuffer, "LANGUAGE/%s", langcountstring);
	}
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_98709_create_index_dattab_power(a1, a2, a3, a3dattabindex);
	else
		sub_9874D_create_index_dattab(a1, a2, a3, a3dattabindex);
	sub_5B870_copy_sentence(x_DWORD_D41BC_langbuffer, x_DWORD_E9C4C_langindexbuffer, 471);//Exit Game
	return langcount;
}

//----- (0007FAE0) --------------------------------------------------------
Bit32u sub_7FAE0_draw_text(char* text, Bit16s a2, Bit16s a3, Bit16s posy, Bit8u a5)//260ae0
{
	Bit32u helpstrlen; // kr04_4
	Bit16s v6; // bx
	Bit32s posx; // ebx

	helpstrlen = strlen(text);
	v6 = a3 - a2;//ebx[ebx+1c] - 1e2 edx[ebp+18] - 12a
	if (helpstrlen == 1)
	{
		posx = a2 + v6 / 2;
	}
	else
	{
		posx = v6 / 2 + a2 - xy_DWORD_17DEC0_spritestr[65].width * helpstrlen / 2;
		sub_7FB90_draw_text(text, posx, posy, a5);//"clisk here to" 13d 138 0
	}
	return posx + xy_DWORD_17DEC0_spritestr[65].width * strlen(text);
}

//----- (0007FB90) --------------------------------------------------------
void sub_7FB90_draw_text(char* textbuffer, Bit16s posx, Bit16s posy, Bit8u color)//260b90
{
	Bit8u* temptextbuffer; // esi
	Bit16s tempposx; // ebx
	Bit16s tempposy; // di
	char v7; // ax
	int v8; // eax
	//int result; // eax
	int v10; // [esp+0h] [ebp-4h]

	temptextbuffer = (Bit8u*)textbuffer;
	tempposx = posx;
	tempposy = posy;
	if (color)
		x_WORD_E36D4 = 64;
	/*if ((posx & 0x8000u) != 0)
		tempposx = 0;*///fix
	v10 = tempposx;
	while (temptextbuffer[0] && tempposx < 640)
	{
		v7 = temptextbuffer[0];
		if (v7 < 0xAu)//formating char
		{
			if (!temptextbuffer[0])
			{
				temptextbuffer++;
				continue;
			}//goto LABEL_21;
			if (v7 == 0x9u)//tab char
			{
				v8 = xy_DWORD_17DEC0_spritestr[65].width;
				tempposx += v8;
				temptextbuffer++;
				continue;
			}
			//goto LABEL_20;
	  //LABEL_16:
			if (temptextbuffer[0])//not end char
			{
				if (color)
					sub_72C40_draw_bitmap_640_setcolor(tempposx, tempposy, xy_DWORD_17DEC0_spritestr[temptextbuffer[0]], color);
				else
					sub_7C120_draw_bitmap_640(tempposx, tempposy, xy_DWORD_17DEC0_spritestr[temptextbuffer[0]]);
			}
			v8 = xy_DWORD_17DEC0_spritestr[65].width;
			tempposx += v8;
			temptextbuffer++;
			continue;
			//goto LABEL_20;
		}
		if (v7 <= 0xAu) // formating char
		{
			tempposx = v10;
			tempposy += xy_DWORD_17DEC0_spritestr[65].height;
			{
				temptextbuffer++;
				continue;
			}//goto LABEL_21;
		}
		if (v7 == 0xDu) // formating char cariage return
		{
			temptextbuffer++;
			continue;
		}//goto LABEL_21;
		if ((v7 < 0xDu) || (v7 != 32)) // formating char
		{
			if (temptextbuffer[0])//not end char
			{
				if (color)
					sub_72C40_draw_bitmap_640_setcolor(tempposx, tempposy, xy_DWORD_17DEC0_spritestr[temptextbuffer[0]], color);
				else
					sub_7C120_draw_bitmap_640(tempposx, tempposy, xy_DWORD_17DEC0_spritestr[temptextbuffer[0]]);
			}
			v8 = xy_DWORD_17DEC0_spritestr[65].width;
			tempposx += v8;
			temptextbuffer++;
			continue;
		}//goto LABEL_16;
		/*
		if ( v7 != 32 )//not space
		{
			if (temptextbuffer[0])//not end char
			{
				if (a4)
					sub_72C40_draw_bitmap_640_setcolor(tempposx, tempposy, xy_DWORD_17DEC0_spritestr[temptextbuffer[0]], a4);
				else
					sub_7C120_draw_bitmap_640(tempposx, tempposy, xy_DWORD_17DEC0_spritestr[temptextbuffer[0]]);
			}
			v8 = xy_DWORD_17DEC0_spritestr[65].sizex;
			tempposx += v8;
			temptextbuffer++;
			continue;
		}//goto LABEL_16;*/
		//LABEL_20:
			//HIWORD(v8) = HIWORD(x_DWORD_17DEC0);
		v8 = xy_DWORD_17DEC0_spritestr[65].width;
		tempposx += v8;
		//LABEL_21:
		temptextbuffer++;
	}
	//result = v5;
	x_WORD_E36D4 = 0;
	//return result;
}

//----- (0007FCB0) --------------------------------------------------------
int sub_7FCB0_draw_text_with_border(int a1, char* a2, Bit32s a3, Bit32s a4, int a5, Bit8u a6, uint8_t a7, Bit32u a8)//260cb0
{
	int v8; // esi
	int16_t j; // di
	Bit8u v10; // eax
	int v11; // ebx
	Bit8u v12; // al
	int v13; // edi
	int16_t v14; // ST0C_2
	int v15; // eax
	int v16; // eax
	int16_t i; // di
	Bit8u v18; // eax
	Bit8u* v19; // ecx
	int16_t v20; // di
	Bit8u v21; // eax
	char v22; // al
	char v23; // ah
	char v24; // cl
	int16_t v25; // ax
	int v26; // esi
	uint8_t v27; // al
	int v28; // esi
	int16_t v29; // ST0C_2
	int v30; // eax
	Bit8u *v31; // ecx
	int16_t v32; // ax
	int16_t v33; // si
	int v34; // eax
	int16_t v35; // ST0C_2
	int16_t v36; // ST08_2
	int16_t v37; // di
	Bit8u *v38; // ecx
	int16_t v39; // si
	uint16_t v40; // ax
	int16_t v41; // di
	int v42; // eax
	int v43; // eax
	int v44; // eax
	uint8_t v45; // al
	int v46; // esi
	int16_t v47; // ST0C_2
	int v48; // edi
	int16_t v49; // ST0C_2
	int v50; // eax
	int v51; // ebx
	uint8_t v52; // al
	int16_t v53; // ST0C_2
	int v54; // ST08_4
	int v55; // eax
	int16_t v56; // si
	int16_t v57; // si
	x_BYTE *v58; // ecx
	int v59; // eax
	int16_t v60; // ax
	int v61; // edi
	int v62; // eax
	int v63; // ebx
	Bit8u *v64; // ecx
	int16_t v65; // di
	int16_t v66; // si
	int v67; // eax
	int16_t v68; // si
	int16_t v69; // ST0C_2
	int16_t v70; // ST08_2
	int v71; // eax
	x_BYTE *v72; // ecx
	int16_t l; // si
	int16_t v74; // ax
	int v75; // esi
	int v76; // eax
	int v77; // ebx
	Bit8u *v78; // ecx
	int16_t v79; // si
	int16_t v80; // ax
	int v81; // eax
	int16_t v82; // si
	int16_t v83; // ST08_2
	int v84; // eax
	Bit8u v86; // [esp-4h] [ebp-FCh]
	char* v86b; // [esp-4h] [ebp-FCh]
	char v87[180]; // [esp+0h] [ebp-F8h]
	int v88; // [esp+B4h] [ebp-44h]
	int v89; // [esp+B8h] [ebp-40h]
	int v90; // [esp+BCh] [ebp-3Ch]
	int v91; // [esp+C0h] [ebp-38h]
	//int v92; // [esp+C4h] [ebp-34h]
	Bit32s v93; // [esp+C8h] [ebp-30h]
	Bit32s v94; // [esp+CCh] [ebp-2Ch]
	int v95; // [esp+D0h] [ebp-28h]
	int v96; // [esp+D4h] [ebp-24h]
	uint16_t v97; // [esp+D8h] [ebp-20h]
	int v98; // [esp+DCh] [ebp-1Ch]
	int v99; // [esp+E0h] [ebp-18h]
	Bit32s k; // [esp+E4h] [ebp-14h]
	Bit32s v101; // [esp+E8h] [ebp-10h]
	int v102; // [esp+ECh] [ebp-Ch]
	int v103; // [esp+F0h] [ebp-8h]
	Bit32s v104; // [esp+F4h] [ebp-4h]

	//debug
	//loadfromsnapshot((char*)"0160-00260CB0", (Bit8u*)&v87, 0x354e80,180);//zbytecne
	/*loadfromsnapshot((char*)"0160-00260CB0", (Bit8u*)&a6, 0x354f6c, 1);
	loadfromsnapshot((char*)"0160-00260CB0", (Bit8u*)&a4, 0x354f64, 4);
	loadfromsnapshot((char*)"0160-00260CB0", (Bit8u*)&a3, 0x354f60, 4);
	loadfromsnapshot((char*)"0160-00260CB0", (Bit8u*)&a8, 0x354f74, 4);*/
	/*loadfromsnapshot2((char*)"0160-00260CB0", (Bit8u*)x_DWORD_17DED4, 0x34eed4, 1000);
	a2 = (Bit8u*)malloc(0x10000);
	loadfromsnapshot((char*)"0160-00260CB0", (Bit8u*)a2, 0x354f5c, 0x10000);*/
	//a5 = 0x12c;

	//debug

	//fix it
	v86 = a7;
	//fix it

	v8 = a5;
	v98 = a5;
	v102 = a5;
	v95 = 0;
	v103 = 0;
	v104 = 0;
	memset(v87, 0, 180);
	if (a6)
	{
		if (a6 == 2 || a6 == 5)
		{
			v104 = a4 - a3;
			if (a8)
			{
				v103 = xy_DWORD_17DED4_spritestr[275].width;
				v90 = xy_DWORD_17DED4_spritestr[275].width;
				v94 = v104 / v90;
				if (v104 % v90)
				{
					v16 = v103 * (v94++ + 1);
					v104 = v16;
					a4 = v16 + a3 - xy_DWORD_17DED4_spritestr[274].width;
				}
				for (i = 0; i < v104; i += v103)
					sub_7C120_draw_bitmap_640(i + a3, a5, xy_DWORD_17DED4_spritestr[275]);
				//HIWORD(v18) = HIWORD(xy_DWORD_17DED4_spritestr);
				v18 = xy_DWORD_17DED4_spritestr[275].height;
				v8 = v18 + a5;
				v19 = (x_DWORD_180628b_screen_buffer + a3 + 640 * (v18 + a5));
				for (v93 = 0;v93 < xy_DWORD_17DED4_spritestr[274].height;v93++)
				{
					for (v20 = 0;v20 < a4 - (v90 + a3);v20++)
					{
						v90 = xy_DWORD_17DED4_spritestr[274].width;
						HIBYTE(v97) = 15;
						LOBYTE(v97) = *v19;
						v19++;
						*(v19 - 1) = x_DWORD_17DE38str.x_DWORD_17DE3C[v97];
					}
					v19 += 640 - v20;
				}
				sub_7C120_draw_bitmap_640(a3, v8, xy_DWORD_17DED4_spritestr[274]);
				sub_7C120_draw_bitmap_640(a4 - xy_DWORD_17DED4_spritestr[274].width, v8, xy_DWORD_17DED4_spritestr[274]);
			}
			if (a8)
			{
				//HIWORD(v21) = HIWORD(xy_DWORD_17DED4_spritestr);
				v21 = xy_DWORD_17DED4_spritestr[274].height;
				a1 = v21 + v8;
				v98 += v21;
			}
			else
			{
				v98 = v8;
			}
		}
	}
	else
	{//ramecek s textem
		v104 = a4 - a3;//adress 260cf1
		v88 = a8;
		//v92 = (int)xy_DWORD_17DED4_spritestr;
		v103 = xy_DWORD_17DED4_spritestr[a8].width;//10
		if ((a4 - a3) % v103)
		{
			v104 = ((a4 - a3) / v103 + 1) * v103;
			a4 = v104 + a3 - xy_DWORD_17DED4_spritestr[(v88 - 1)].width;
		}
		for (j = 0; j < v104; j += v103)//ramecek - horni vodorovna linka
			sub_7C120_draw_bitmap_640(j + a3, a5, xy_DWORD_17DED4_spritestr[a8]);//25d120

//HIWORD(v10) = HIWORD(xy_DWORD_17DED4_spritestr); 
		v10 = xy_DWORD_17DED4_spritestr[a8].height;//adress 260da7
		v11 = v10 + a5;
		v98 += v10;
		v12 = sub_5BE80_test_pallette(x_DWORD_17DE38str.x_DWORD_17DE38, 0, 0, v86);
		v86 = v12;
		v13 = 6 * (a8 - 1);
		v14 = xy_DWORD_17DED4_spritestr[v13 / 6].height;
		v91 = v11;
		v90 = a3;
		sub_7C140_draw_text_background(a3, v11, v104, v14, v12);//prvni cerna linka
		sub_7C120_draw_bitmap_640(v90, v91, xy_DWORD_17DED4_spritestr[v13 / 6]);//prvni levy svisly dilek
		sub_7C120_draw_bitmap_640(a4, v91, xy_DWORD_17DED4_spritestr[v13 / 6]);//prvni pravy svisly dilek
		//HIWORD(v15) = HIWORD(xy_DWORD_17DED4_spritestr);
		v15 = xy_DWORD_17DED4_spritestr[v13 / 6].height;
		a1 = v15 + v11;
		v98 += v15;
	}
	v99 = a3;
	if (!a6)//adress 261023
		v98 = v8 + 12;
	v96 = 0;
	v101 = 0;
	for (k = 0; ; k++)
	{
		v22 = 0;
		if (a6)
		{
			v24 = a2[k];
			if (v24 == ' ' || v24==0)
			{
			LABEL_38:
				v22 = 1;
				goto LABEL_39;
			}
		}
		else
		{
			v23 = a2[k];
			if (v23 == ' ' || v23==0 || v23 == ',' || v23 == '-' || v23 == '.')
				goto LABEL_38;
		}
	LABEL_39:
		if (v22)//space in text adress 26107c
		{
			if (v101)
			{
				if (a6 && a6 != 4 && a6 != 5)//adress 261091
				{
					sub_6FC50(1/*v86*/);
					v25 = sub_6FC10_letter_width();
				}
				else
				{
					v25 = xy_DWORD_17DEC0_spritestr[65].width;
				}
				v89 = k;
				v26 = v99;
				if (v99 + v25 * (k - v96) <= a4 - 3 * v25)//adress 2610c2
				{
					v86b = &v87[strlen(v87)];
					qmemcpy(v86b, &a2[v101 + 1], v89 - v101);
				}
				else//width is higher then line size
				{
					if (a6 && a6 != 4)
					{
						if (a6 == 2)
						{
							sub_6FC50(1/*v86*/);
							v31 = &x_DWORD_180628b_screen_buffer[v26 + 640 * a1];							
							for (v32 = 0;v32 < xy_DWORD_17DED4_spritestr[274].height;v32++)
							{
								for (v33 = 0;v33 < a4 - (v99 - xy_DWORD_17DED4_spritestr[274].width);v33++)
								{
									HIBYTE(v97) = 15;
									LOBYTE(v97) = *v31;									
									v31++;
									*(v31 - 1) = x_DWORD_17DE38str.x_DWORD_17DE3C[v97];
								}								
								v31 += 640 - v33;
							}
							sub_7C120_draw_bitmap_640(v99, a1, xy_DWORD_17DED4_spritestr[274]);
							sub_7C120_draw_bitmap_640(a4, a1, xy_DWORD_17DED4_spritestr[274]);
							//HIWORD(v34) = HIWORD(xy_DWORD_17DED4_spritestr);
							v34 = xy_DWORD_17DED4_spritestr[274].height;
							a1 += v34;
							v86 = a7;
							v35 = v98;
							v36 = a4 - 2 * sub_6FC10_letter_width();
							sub_6FC80_pre_draw_text(v87, v99 + xy_DWORD_17DED4_spritestr[275].width, v36, v35, a7);
						}
						else if (a6 == 5)
						{
							if (a8)
							{
								v38 = &x_DWORD_180628b_screen_buffer[v99 + 640 * a1];
								for (v37 = 0;v37 < xy_DWORD_17DED4_spritestr[274].height;v37++)
								{
									for (v39 = 0;v39 < a4 - (xy_DWORD_17DED4_spritestr[274].width + v99); v39++)
									{
										HIBYTE(v40) = 15;
										LOBYTE(v40) = *v38;
										v38++;
										*(v38 - 1) = x_DWORD_17DE38str.x_DWORD_17DE3C[v40];
									}
									v38 += 640 - v39;
								}
								v41 = v99;
								sub_7C120_draw_bitmap_640(v99, a1, xy_DWORD_17DED4_spritestr[274]);
								v86 = *xy_DWORD_17DED4_spritestr[274].data;
								sub_7C120_draw_bitmap_640(a4 - xy_DWORD_17DED4_spritestr[274].width, a1, xy_DWORD_17DED4_spritestr[274]);
								//HIWORD(v42) = HIWORD(xy_DWORD_17DED4_spritestr);
								v42 = xy_DWORD_17DED4_spritestr[274].height;
								a1 += v42;
								//2613b3
								sub_7FAE0_draw_text(v87, v41, a4, v98, 0/*v86*/);
							}
							else
							{
								sub_7FAE0_draw_text(v87, v99, a4, v98, v86);
							}
						}
						else
						{
							sub_6FC80_pre_draw_text(v87, v99, a4, v98, a7);
						}
					}
					else
					{
						if (!a6)
						{
							v27 = sub_5BE80_test_pallette(x_DWORD_17DE38str.x_DWORD_17DE38, 0, 0, v86);
							v86 = v27;
							v28 = 6 * (a8 - 1);
							v29 = xy_DWORD_17DED4_spritestr[v28 / 6].height;
							v90 = v99;
							sub_7C140_draw_text_background(v99, a1, v104, v29, v27);
							sub_7C120_draw_bitmap_640(v90, a1, xy_DWORD_17DED4_spritestr[v28 / 6]);
							sub_7C120_draw_bitmap_640(a4, a1, xy_DWORD_17DED4_spritestr[v28 / 6]);
							//HIWORD(v30) = HIWORD(xy_DWORD_17DED4_spritestr);
							v30 = xy_DWORD_17DED4_spritestr[v28 / 6].height;
							a1 += v30;
						}
						//"click here" 12a 1e2 138 00
						sub_7FAE0_draw_text(v87, v99, a4, v98, 0/*v86*/);//adress 261197 (80197)
					}
					if (a6 && a6 != 4 && a6 != 5)
					{
						LOWORD(v44) = sub_6FC30_get34_height();
						v98 += v44 + 2;
					}
					else
					{
						//HIWORD(v43) = HIWORD(x_DWORD_17DEC0);
						v43 = xy_DWORD_17DEC0_spritestr[65].height;
						v98 += v43;
					}
					memset(v87, 0, 180);
					v86b = v87;
					qmemcpy(v87, &a2[v101 + 1], k - v101);
					v96 = v101;
				}
			}
			else
			{
				v86b = v87;
				qmemcpy(v87, a2, k + 1);//copy first text word
			}
			v101 = k;
		}
		if (!a2[k])
			break;
	}
	if (!v95)//adress 2614e2 (804e2) discoverwhich
	{
		if (a6 && a6 != 4)
		{
			sub_6FC50(1/*v86*/);
			if (a6 == 2)
			{
				sub_6FC50(1/*v86*/);				
				v58 = (x_BYTE *)(v99 + 640 * a1);
				// FIXME: types
				// v59 = (int)x_DWORD_180628b_screen_buffer;
				for (v57 = 0;v57 < xy_DWORD_17DED4_spritestr[274].height;v57++)
				{
					v58 += v59;
					for (v60 = 0;v60 < a4 - (v99 - v91);v60++)
					{
						v91 = xy_DWORD_17DED4_spritestr[274].width;
						HIBYTE(v97) = 15;
						LOBYTE(v97) = *v58;
						v58++;
						*(v58 - 1) = x_DWORD_17DE38str.x_DWORD_17DE3C[v97];
					}
					v59 = 640 - v60;
				}
				v61 = v99;
				sub_7C120_draw_bitmap_640(v99, a1, xy_DWORD_17DED4_spritestr[274]);
				sub_7C120_draw_bitmap_640(a4, a1, xy_DWORD_17DED4_spritestr[274]);
				//HIWORD(v62) = HIWORD(xy_DWORD_17DED4_spritestr);
				v62 = xy_DWORD_17DED4_spritestr[274].height;
				v63 = v62 + a1;
				sub_6FC50(1/*v86*/);
				v64 = &x_DWORD_180628b_screen_buffer[640 * v63 + v61];				
				for (v65 = 0;v65 < xy_DWORD_17DED4_spritestr[274].height;v65++)
				{					
					for (v66 = 0;v66 < a4 - (v99 - v91);v66++)
					{
						v91 = xy_DWORD_17DED4_spritestr[274].width;
						if (v66 >= a4 - (v99 - v91))
							break;
						HIBYTE(v97) = 15;
						LOBYTE(v97) = *v64;
						v64++;
						*(v64 - 1) = x_DWORD_17DE38str.x_DWORD_17DE3C[v97];
					}
					v64 += 640 - v66;
				}
				sub_7C120_draw_bitmap_640(v99, v63, xy_DWORD_17DED4_spritestr[274]);
				sub_7C120_draw_bitmap_640(a4, v63, xy_DWORD_17DED4_spritestr[274]);
				//HIWORD(v67) = HIWORD(xy_DWORD_17DED4_spritestr);
				v67 = xy_DWORD_17DED4_spritestr[274].height;
				v68 = 0;
				a1 = v67 + v63;
				while (v68 < v104)
				{
					sub_7C120_draw_bitmap_640(v68 + a3, a1, xy_DWORD_17DED4_spritestr[275]);
					v68 += v103;
				}
				v86 = a7;
				v69 = v98;
				v70 = a4 - 2 * sub_6FC10_letter_width();
				sub_6FC80_pre_draw_text(v87, v99 + xy_DWORD_17DED4_spritestr[275].width, v70, v69, a7);
			}
			else if (a6 == 5)
			{
				if (a8)
				{
					v71 = 640 * a1 + v99;
					v72 = (x_BYTE *)x_DWORD_180628b_screen_buffer;
					for (l = 0;l < xy_DWORD_17DED4_spritestr[274].height; l++)
					{
						v72 += v71;
						v74 = 0;
						for (v74 = 0;v74 < a4 - (xy_DWORD_17DED4_spritestr[274].width + v99);v74++)
						{
							HIBYTE(v97) = 15;
							LOBYTE(v97) = *v72;
							v72++;
							*(v72 - 1) = x_DWORD_17DE38str.x_DWORD_17DE3C[v97];
						}
						v71 = 640 - v74;
					}
					v75 = v99;
					sub_7C120_draw_bitmap_640(v99, a1, xy_DWORD_17DED4_spritestr[274]);
					v86 = *xy_DWORD_17DED4_spritestr[274].data;
					sub_7C120_draw_bitmap_640(a4 - xy_DWORD_17DED4_spritestr[274].width, a1, xy_DWORD_17DED4_spritestr[274]);
					//HIWORD(v76) = HIWORD(xy_DWORD_17DED4_spritestr);
					v76 = xy_DWORD_17DED4_spritestr[274].height;
					v77 = v76 + a1;
					v78 = &x_DWORD_180628b_screen_buffer[640 * v77 + v75];
					v79 = 0;
					for (v79 = 0;v79 < xy_DWORD_17DED4_spritestr[274].height;v79++)
					{
						v80 = 0;
						for (v80 = 0;v80 < a4 - (xy_DWORD_17DED4_spritestr[274].width + v99);v80++)
						{
							HIBYTE(v97) = 15;
							LOBYTE(v97) = *v78;
							v78++;
							*(v78 - 1) = x_DWORD_17DE38str.x_DWORD_17DE3C[v97];
						}
						v78 += 640 - v80;
					}
					sub_7C120_draw_bitmap_640(v99, v77, xy_DWORD_17DED4_spritestr[274]);
					v86 = *xy_DWORD_17DED4_spritestr[274].data;
					sub_7C120_draw_bitmap_640(a4 - xy_DWORD_17DED4_spritestr[274].width, v77, xy_DWORD_17DED4_spritestr[274]);
					//HIWORD(v81) = HIWORD(xy_DWORD_17DED4_spritestr);
					v81 = xy_DWORD_17DED4_spritestr[274].height;

					a1 = v81 + v77;
					for (v82 = 0;v82 < v104;v82 += v103)
					{
						v83 = v82 + a3;
						sub_7C120_draw_bitmap_640(v83, a1, xy_DWORD_17DED4_spritestr[275]);
					}
					sub_7FAE0_draw_text(v87, v99 + xy_DWORD_17DED4_spritestr[275].width, a4, v98, 0);
				}
				else
				{
					sub_7FAE0_draw_text(v87, v99, a4, v98, v86);
				}
			}
			else
			{
				sub_6FC80_pre_draw_text(v87, v99, a4, v98, a7);
			}
		}
		else
		{
			if (!a6)
			{
				v45 = sub_5BE80_test_pallette(x_DWORD_17DE38str.x_DWORD_17DE38, 0, 0, v86);
				v86 = v45;
				v46 = 6 * (a8 - 1);
				v47 = xy_DWORD_17DED4_spritestr[v46 / 6].height;
				v91 = v104;
				v48 = v99;
				v90 = a1;
				sub_7C140_draw_text_background(v99, a1, v104, v47, v45);//vykresli dalsi cerny radek
				sub_7C120_draw_bitmap_640(v48, v90, xy_DWORD_17DED4_spritestr[v46 / 6]);//vykresli dalsi levy sloupek ramecku
				v49 = v90;
				v90 = a4;
				sub_7C120_draw_bitmap_640(a4, v49, xy_DWORD_17DED4_spritestr[v46 / 6]);//vykresli dalsi pravy sloupek ramecku
				//HIWORD(v50) = HIWORD(xy_DWORD_17DED4_spritestr);
				v50 = xy_DWORD_17DED4_spritestr[v46 / 6].height;
				v51 = v50 + a1;
				v52 = sub_5BE80_test_pallette(x_DWORD_17DE38str.x_DWORD_17DE38, 0, 0, v86);//?
				v86 = v52;
				v53 = xy_DWORD_17DED4_spritestr[v46 / 6].height;
				v54 = v91;
				v91 = v51;
				sub_7C140_draw_text_background(v48, v51, v54, v53, v52);//vykresli dalsi cerny radek
				sub_7C120_draw_bitmap_640(v48, v91, xy_DWORD_17DED4_spritestr[v46 / 6]);//vykresli dalsi levy sloupek ramecku
				sub_7C120_draw_bitmap_640(v90, v91, xy_DWORD_17DED4_spritestr[v46 / 6]);//vykresli dalsi pravy sloupek ramecku
				//HIWORD(v55) = HIWORD(xy_DWORD_17DED4_spritestr);
				v55 = xy_DWORD_17DED4_spritestr[v46 / 6].height;
				v56 = 0;
				a1 = v55 + v51;
				while (v56 < v104)
				{
					sub_7C120_draw_bitmap_640(v56 + v99, a1, xy_DWORD_17DED4_spritestr[a8]);//vykresli spodni linku ramecku
					v56 += v103;
				}
			}
			sub_7FAE0_draw_text(v87, v99, a4, v98, 0/*v86*/);//prida text + mozna je to i dotazeni palety
		}
	}
	if (a6)
		return v98 - v102;
	//HIWORD(v84) = HIWORD(xy_DWORD_17DED4_spritestr);
	v84 = xy_DWORD_17DED4_spritestr[(a8 + 2)].height;

	//debug
	//compare_with_snapshot((char*)"0x45678", (Bit8u*)&v8, 0x4589, 4);
	//debug

	return a1 - v102 + v84;
}


//----- (00080C30) --------------------------------------------------------
void sub_80C30_draw_texts(int16_t a1, int16_t a2, int16_t a3)//261c30
{
	signed int v3; // ebx
	//char *v4; // eax
	int v4x;
	signed int v5; // edx
	//Bit16s* i; // eax
	uint8_t v7; // ST14_1
	int v8; // ST08_4
	int16_t v9; // ax

	v3 = -1;
	//v4 = (char *)unk_E17CC_0x194;
	v4x = 0;
	v5 = 0;
	while (unk_E17CC_str_0x194[v4x].word_4)
	{
		if (unk_E17CC_str_0x194[v4x].byte_18_act == 2)
		{
			v3 = v5;
			break;
		}
		//v4 += 22;
		v4x++;
		v5++;
	}
	if (a2 + a1 > 0)
	{
		//for (i = x_WORD_E2970; *(Bit32s*)&i[6]; i = (x_WORD *)((char *)i + 17))
		for(int ii=0; x_WORD_E2970x[ii].word_12;ii++)
		{
			if (x_WORD_E2970x[ii].word_12 != 3 && v3 == x_WORD_E2970x[ii].word_4)
			{
				x_DWORD_17DE28str.x_BYTE_17DE34 = 3;
				return;
			}
		}
		sub_6FC50(1);
		v7 = sub_5BE80_test_pallette((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38, 0x3Fu, 0x3Fu, 0x3Fu);
		v8 = (int16_t)(a1 + a3 - 3 * sub_6FC10_letter_width());
		v9 = sub_6FC10_letter_width();
		sub_7FCB0_draw_text_with_border(v3, x_DWORD_E9C4C_langindexbuffer[23 + v3], (int16_t)(a1 + 4 * v9), v8, a2, 5, v7, 1);
		//"You must explore the outer Netherworlds while you learn its magic. Your first destination is the ancient city of Jahwl."+

	}
	if (x_DWORD_17DE28str.x_BYTE_17DE34 != 3 && x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 0x40 && !x_BYTE_17E09D)
	{
		x_BYTE_17E09D = 1;
		if ((int16_t)v3 != -1)
			sub_86EB0(v3, 0, 0);
	}
}

//----- (00080D40) --------------------------------------------------------
signed int sub_80D40_move_graphics_and_play_sounds(int16_t a1, int16_t a2, int16_t a3, int16_t a4, int16_t a5, char a6)//261d40
{
	signed int v6; // ebx
	//char *v7; // eax
	int v7x;
	char v8; // dl
	int v10; // edx
	int v11; // ebx
	int16_t v12; // ax
	int v13; // edx
	int v14; // edx
	int16_t v15; // si
	int16_t v16; // ax
	char v17; // dh
	int16_t v18; // cx
	Bit8u* v19; // ecx
	int v20; // edx
	axis_3d v21x; // [esp+0h] [ebp-10h]
	//int16_t v22; // [esp+2h] [ebp-Eh]
	axis_3d v23x; // [esp+8h] [ebp-8h]
	//int16_t v24; // [esp+Ah] [ebp-6h]

	v6 = 1;
	if (x_DWORD_17DE38str.x_BYTE_17E09C >= 1u)
	{
		if (x_DWORD_17DE38str.x_BYTE_17E09C > 2u)
			return v6;
		v15 = 0;
		while (v15 < 3)
		{
			v15++;
			v6 = sub_7E9D0(&x_DWORD_17DE38str.x_WORD_17E06C, &x_DWORD_17DE38str.x_WORD_17E06E, x_DWORD_17DE38str.unk_17E084x);
		}
		v23x.x = x_DWORD_17DE38str.x_WORD_17E074;
		v23x.y = x_DWORD_17DE38str.x_WORD_17E076;
		v21x.x = x_DWORD_17DE38str.x_WORD_17E06C;
		v21x.y = x_DWORD_17DE38str.x_WORD_17E06E;
		v16 = sub_581E0_maybe_tan2(&v23x, &v21x);
		if (v16 > 1024 && v16 < 1536)
		{
			if (x_DWORD_17DE38str.unk_17E078x[0xa] != 21)
			{
				*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 21;
				x_DWORD_17DE38str.unk_17E078x[0xa] = 21;
				x_DWORD_17DE38str.unk_17E078x[0xb] = 24;
			}
			goto LABEL_54;
		}
		if (v16 <= 1536 || v16 >= 2048)
		{
			if ((v16 > 2048 || v16 > 0) && v16 < 512)
			{
				if (x_DWORD_17DE38str.unk_17E078x[0xa] != 5)
				{
					*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 5;
					x_DWORD_17DE38str.unk_17E078x[0xa] = 5;
					x_DWORD_17DE38str.unk_17E078x[0xb] = 8;
				}
				goto LABEL_54;
			}
			if (v16 <= 512 || v16 >= 1024)
			{
				switch (v16)
				{
				case 2048:
				case 0:
					if (x_DWORD_17DE38str.unk_17E078x[0xa] != 17)
					{
						*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 17;
						x_DWORD_17DE38str.unk_17E078x[0xa] = 17;
						x_DWORD_17DE38str.unk_17E078x[0xb] = 20;
					}
					goto LABEL_54;
				case 512:
					if (x_DWORD_17DE38str.unk_17E078x[0xa] == 9)
						goto LABEL_54;
					x_DWORD_17DE38str.unk_17E078x[0xa] = 9;
					v17 = 12;
					*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 9;
					goto LABEL_53;
				case 1024:
					if (x_DWORD_17DE38str.unk_17E078x[0xa] != 1)
					{
						*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 1;
						x_DWORD_17DE38str.unk_17E078x[0xa] = 1;
						x_DWORD_17DE38str.unk_17E078x[0xb] = 4;
					}
					goto LABEL_54;
				}
				if (v16 != 1536 || x_DWORD_17DE38str.unk_17E078x[0xa] == 25)
				{
				LABEL_54:
					*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[4] = x_DWORD_17DE38str.x_WORD_17E06C;
					*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[6] = x_DWORD_17DE38str.x_WORD_17E06E;
					if (a6 != 1
						&& x_DWORD_17DE38str.x_BYTE_17E09C != 2
						&& !(x_WORD)v6
						&& (abs(x_DWORD_17DE38str.x_WORD_17E06E - x_DWORD_17DE38str.x_WORD_17E072) > 8 || abs(x_DWORD_17DE38str.x_WORD_17E06C - x_DWORD_17DE38str.x_WORD_17E070) > 8))
					{
						if (x_DWORD_17DB70str.x_WORD_17DB8A == -1)
							sub_812D0_drawDotBitmap(*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[4], *(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[6]);
						x_DWORD_17DE38str.x_WORD_17E070 = x_DWORD_17DE38str.x_WORD_17E06C;
						x_DWORD_17DE38str.x_WORD_17E072 = x_DWORD_17DE38str.x_WORD_17E06E;
					}
					v19 = xy_DWORD_17DED4_spritestr[*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8]].data;
					v20 = x_DWORD_17DE38str.x_WORD_17E06C - xy_DWORD_17DED4_spritestr[*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8]].width / 2 - a2;
					sub_81260(
						(int16_t)v20,
						v20,
						x_DWORD_17DE38str.unk_17E078x,
						x_DWORD_17DE38str.x_WORD_17E06C - xy_DWORD_17DED4_spritestr[*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8]].width / 2 - a2,
						x_DWORD_17DE38str.x_WORD_17E06E - xy_DWORD_17DED4_spritestr[*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8]].height / 2 - a3);
					if ((x_WORD)v6)
						x_DWORD_17DE38str.x_BYTE_17E09C = 3;
					return v6;
				}
				v18 = 25;
				x_DWORD_17DE38str.unk_17E078x[0xa] = 25;
				v17 = 28;
			}
			else
			{
				if (x_DWORD_17DE38str.unk_17E078x[0xa] == 13)
					goto LABEL_54;
				v18 = 13;
				x_DWORD_17DE38str.unk_17E078x[0xa] = 13;
				v17 = 16;
			}
			*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = v18;
		}
		else
		{
			if (x_DWORD_17DE38str.unk_17E078x[0xa] == 29)
				goto LABEL_54;
			x_DWORD_17DE38str.unk_17E078x[0xa] = 29;
			v17 = 32;
			*(Bit16s*)&x_DWORD_17DE38str.unk_17E078x[8] = 29;
		}
	LABEL_53:
		x_DWORD_17DE38str.unk_17E078x[0xb] = v17;
		goto LABEL_54;
	}
	if (!x_DWORD_17DE38str.x_BYTE_17E09C)
	{
		if (x_DWORD_17DB70str.x_WORD_17DB8A == -1)
		{
			//v7 = (char *)unk_E17CC_0x194;
			v7x = 0;
			a1 = 0;
			x_DWORD_17DE38str.x_WORD_17E06C = 0;
			x_DWORD_17DE38str.x_WORD_17E06E = 0;
			while (unk_E17CC_str_0x194[v7x].word_4)
			{
				v8 = unk_E17CC_str_0x194[v7x].byte_18_act;
				if (v8 == 1)
				{
					x_DWORD_17DE38str.x_WORD_17E06C = unk_E17CC_str_0x194[v7x].word_12_x;
					x_DWORD_17DE38str.x_WORD_17E06E = unk_E17CC_str_0x194[v7x].word_14_y;
				}
				else if (v8 == 2 && !a1)
				{
					return 1;
				}
				//v7 += 22;
				v7x++;
				a1++;
			}
		}
		x_DWORD_17DE38str.x_WORD_17E074 = a4;
		v10 = xy_DWORD_17DED4_spritestr[37].width;
		x_DWORD_17DE38str.x_WORD_17E076 = a5;
		v11 = v10 / 2;
		v12 = v10 / 2 + a4;
		v13 = xy_DWORD_17DED4_spritestr[37].height;
		x_DWORD_17DE38str.x_WORD_17E074 = v12;
		v14 = v13 / 2;
		x_DWORD_17DE38str.x_WORD_17E076 = v14 + a5;
		if (x_DWORD_17DB70str.x_WORD_17DB8A == -1)
		{
			x_DWORD_17DE38str.x_WORD_17E06C += v11;
			x_DWORD_17DE38str.x_WORD_17E06E += v14;
		}
		sub_7E8D0(x_DWORD_17DE38str.unk_17E084x, x_DWORD_17DE38str.x_WORD_17E074, x_DWORD_17DE38str.x_WORD_17E076, x_DWORD_17DE38str.x_WORD_17E06C, x_DWORD_17DE38str.x_WORD_17E06E, 2, 2);
		x_DWORD_17DE38str.x_BYTE_17E09C = (a1 == 0) + 1;
		x_DWORD_17DE38str.x_WORD_17E070 = x_DWORD_17DE38str.x_WORD_17E06C;
		x_DWORD_17DE38str.x_WORD_17E072 = x_DWORD_17DE38str.x_WORD_17E06E;
		v6 = 0;
		if (abs(x_DWORD_17DE38str.x_WORD_17E074 - x_DWORD_17DE38str.x_WORD_17E06C) > 5 && abs(x_DWORD_17DE38str.x_WORD_17E076 - x_DWORD_17DE38str.x_WORD_17E06E) > 6)
		{
			sub_8F100_sound_proc19(0, 19, (uint8_t)x_BYTE_E1324, 64, 0x64u, 0, 2u);
			return 0;
		}
	}
	return v6;
}

//----- (00081260) --------------------------------------------------------
void sub_81260(int a1, int a2, Bit8s* a3, int16_t a4, int16_t a5)//262260
{
	int v5; // ecx

	v5 = j___clock();
	if ((unsigned int)(v5 - *(x_DWORD *)a3) >> 4 >= 1)
	{
		if (*(int16_t *)(a3 + 8) <= *(uint8_t *)(a3 + 11) - 1)
			++*(x_WORD *)(a3 + 8);
		else
			*(x_WORD *)(a3 + 8) = *(uint8_t *)(a3 + 10);
		*(x_DWORD *)a3 = v5;
	}
	sub_7C120_draw_bitmap_640(a4, a5, xy_DWORD_17DED4_spritestr[*(int16_t *)(a3 + 8)]);
}

//----- (000812D0) --------------------------------------------------------
int sub_812D0_drawDotBitmap(int16_t a1, int16_t a2)//2622d0
{
	Bit8u* temp_screen_buffer; // edi
	int16_t v3; // si
	int16_t v4; // bx
	int result; // eax

	//_disable();
	temp_screen_buffer = x_DWORD_180628b_screen_buffer;
	x_DWORD_180628b_screen_buffer = x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map;
	v3 = x_DWORD_180624_resolution_y;
	x_DWORD_180644_map_resolution2_y = 960;
	x_DWORD_180624_resolution_y = 960;
	v4 = x_DWORD_18062C_resolution_x;
	x_DWORD_180648_map_resolution2_x = 1280;
	x_DWORD_18062C_resolution_x = 1280;
	sub_7C120_draw_bitmap_640(a1, a2, xy_DWORD_17DED4_spritestr[139]);
	x_DWORD_18062C_resolution_x = v4;
	x_DWORD_180624_resolution_y = v3;
	x_DWORD_180648_map_resolution2_x = v4;
	result = v3;
	x_DWORD_180628b_screen_buffer = temp_screen_buffer;
	x_DWORD_180644_map_resolution2_y = v3;
	//_enable();
	return result;
}

//----- (00081360) --------------------------------------------------------
void sub_81360_draw_bitmap_line(Bit16s minx, Bit16s miny, Bit16s maxx, Bit16s maxy, int16_t a5)//262360
{
	Bit32s v5; // edi
	Bit32s v6; // esi
	Bit16s v7; // bx
	Bit16s v8; // ax
	//int v9; // ecx
	Bit32s v10; // eax
	Bit32s v11; // eax
	Bit32s v12; // eax
	Bit32s v13; // eax
	Bit32s v14; // eax
	Bit32s v15; // edx
	Bit32s v17; // edx
	Bit32s v18; // eax
	axis_3d v19x; // [esp+0h] [ebp-38h]
	//Bit16s v20; // [esp+2h] [ebp-36h]
	axis_3d v21x; // [esp+8h] [ebp-30h]
	//Bit16s v22; // [esp+Ah] [ebp-2Eh]
	//int v23; // [esp+10h] [ebp-28h]
	Bit32s v24; // [esp+14h] [ebp-24h]
	Bit32s v25; // [esp+18h] [ebp-20h]
	Bit32s v26; // [esp+1Ch] [ebp-1Ch]
	Bit32s v27; // [esp+20h] [ebp-18h]
	Bit32u v28; // [esp+24h] [ebp-14h]
	Bit32s v29; // [esp+28h] [ebp-10h]
	Bit32s v30; // [esp+2Ch] [ebp-Ch]
	Bit32s v31; // [esp+30h] [ebp-8h]
	Bit32s v32; // [esp+34h] [ebp-4h]

	//fix it

	//loadfromsnapshot((char*)"0160-00262360", (Bit8u*)&a6, 0x354f6c, 1);
	  //354f10->35f418 +2->35012a .. 012a
	  //354f14->354f20 +2->350168 .. 0168
	  //0168-18a=3e
	  //354f10->35f418->ec0141 .. 0141
	  //354f14->354f20->012a018d .. 018d
	  //18d-141=4c
	//a3 = 0x00000141;
	//a1 = 0x0000018d;
	//a4 = 0x000000ec;
	//a2 = 0x0000012a;
	//loadfromsnapshot2((char*)"0160-00262360", (Bit8u*)x_DWORD_17DED4, 0x34eed4, 0x300);//3e
	//x_D41A0_BYTEARRAY_4[v9 + 4] = 0x0b;
	//fix it

	v5 = minx/* & 0xffff*/;
	v6 = miny/* & 0xffff*/;
	v21x.x = minx;
	v19x.x = maxx;
	v19x.y = maxy;
	v21x.y = miny/* & 0xffff*/;
	//v20 = maxy/* & 0xffff*/;
	v7 = 0;
	v29 = 0;
	v28 = 0;
	v8 = sub_581E0_maybe_tan2(&v19x, &v21x);//2391E0
	/*minx &= 0xffff;
	miny &= 0xffff;
	maxx &= 0xffff;
	maxy &= 0xffff;*/
	if (v8 <= 1024 || v8 >= 1536)
	{
		if (v8 <= 1536 || v8 >= 2048)
		{
			if (v8 <= 2048 && v8 <= 0 || v8 >= 512)
			{
				if (v8 <= 512 || v8 >= 1024)
				{
					if (v8 != 2048 && v8)
					{
						switch (v8)
						{
						case 512:
							v7 = a5 - 3;
							break;
						case 1024:
							v7 = a5 - 5;
							break;
						case 1536:
							v7 = a5 + 3;
							break;
						}
					}
					else
					{
						v7 = a5 - 1;
					}
				}
				else
				{
					v7 = a5 - 4;
				}
			}
			else
			{
				v7 = a5 - 2;
			}
		}
		else
		{
			v7 = a5 + 2;
		}
	}
	else
	{
		v7 = a5 + 4;
	}
	v24 = maxx - minx;
	//v9 = 6 * a5;
	v25 = maxy - miny;
	//v23 = x_DWORD_17DED4[v9 + 4];
	//6*a5
	//dosbox - 258
	//toto - 64
	v31 = 2 * abs((maxx - minx) / xy_DWORD_17DED4_spritestr[a5].width);//find errors
	//v23 = x_DWORD_17DED4[v9 + 5];
	v30 = 2 * abs((maxy - miny) / xy_DWORD_17DED4_spritestr[a5].height);
	v10 = maxx - minx;
	if ((maxx - minx) >= 0)
	{
		if (maxx != minx)
		{
			//HIWORD(v10) = HIWORD(x_DWORD_17DED4);
			v10 = xy_DWORD_17DED4_spritestr[a5].width;
		}
	}
	else
	{
		//HIWORD(v11) = HIWORD(x_DWORD_17DED4);
		v11 = xy_DWORD_17DED4_spritestr[a5].width;
		v10 = -v11;
	}
	v27 = v10;
	v12 = v25;
	if ((v25 & 0x8000u) == 0)
	{
		if (v25)
		{
			v12 = xy_DWORD_17DED4_spritestr[a5].height;
		}
	}
	else
	{
		v13 = xy_DWORD_17DED4_spritestr[a5].height;
		v12 = -v13;
	}
	v26 = v12;
	if (minx >= maxx)
	{
		if (minx > maxx)
			v29 = 1;
	}
	else
	{
		v29 = 2;
	}
	if (miny >= maxy)
	{
		if (miny > maxy)
			v28 = 1;
	}
	else
	{
		v28 = 2;
	}
	if (v31 <= v30)
	{
		v14 = v30;
		v15 = v31;
	}
	else
	{
		v14 = v31;
		v15 = v30;
	}
	v32 = v15 - (v14 >> 1);
	while (1)
	{
		if (v31 <= v30)
		{
			if (v6 == maxy)
			{
				sub_7C120_draw_bitmap_640(v5, maxy, xy_DWORD_17DED4_spritestr[v7]);
				return;
			}
			if ((v32 & 0x8000u) == 0)
			{
				v5 += v27;
				v32 -= v30;
			}
			v17 = v32;
			v6 += v26;
			v18 = v31;
		}
		else
		{
			if (v5 == maxx)
			{
				sub_7C120_draw_bitmap_640(maxx, v6, xy_DWORD_17DED4_spritestr[v7]);
				return;
			}
			if ((v32 & 0x8000u) == 0)
			{
				v6 += v26;
				v32 -= v31;
			}
			v17 = v32;
			v5 += v27;
			v18 = v30;
		}
		v32 = v18 + v17;
		if (v29 >= 1u)
		{
			if (v29 <= 1u)
			{
				if (v5 < maxx)
				{
					sub_7C120_draw_bitmap_640(maxx, maxy, xy_DWORD_17DED4_spritestr[v7]);//draw ending
					//ma byt ec a 141
					return;
				}
			}
			else if (v29 == 2 && v5 > maxx)
			{
				sub_7C120_draw_bitmap_640(maxx, maxy, xy_DWORD_17DED4_spritestr[v7]);
				return;
			}
		}
		if (v28 < 1u)
			goto LABEL_70;
		if (v28 > 1u)
			break;
		if (v6 < maxy)
		{
			sub_7C120_draw_bitmap_640(maxx, maxy, xy_DWORD_17DED4_spritestr[v7]);
			return;
		}
	LABEL_70:
		//18d 12a 141 ec - 18d 12a 141 ec -1
		  //c4 26 11b 6a - c4 26 11b 6a -0 - chybi ocasek
		sub_7C120_draw_bitmap_640(v5, v6, xy_DWORD_17DED4_spritestr[a5]);
	}
	if (v28 != 2 || v6 <= maxy)
		goto LABEL_70;
	sub_7C120_draw_bitmap_640(maxx, maxy, xy_DWORD_17DED4_spritestr[v7]);//draw ending
}

//----- (00081760) --------------------------------------------------------
void sub_81760_new_game_subdraw(type_unk_E17CC_str_0x194* a1x)//262760
{
	signed int v1; // esi
	int16_t v2; // bx
	int16_t v3; // di
	//x_WORD *i; // ebx
	int ix;
	//int v5; // edx
	int v6; // edi
	//char *v7; // ebx
	int v7x;
	int16_t v8; // cx
	//char *v9; // edx
	int v9x;
	int k; // eax
	int v11; // edi
	int v12; // ebx
	char v14x[24]; // [esp+0h] [ebp-44h]
	Bit8u* temp_screen_buffer; // [esp+18h] [ebp-2Ch]
	int j; // [esp+1Ch] [ebp-28h]
	//Bit8u* v17; // [esp+20h] [ebp-24h]
	Bit16s v17x;
	Bit16s v18x; // [esp+24h] [ebp-20h]
	//Bit8u* v19; // [esp+28h] [ebp-1Ch]
	Bit16s v19x;
	//int v19y;
	int l; // [esp+2Ch] [ebp-18h]
	//Bit8u* v21; // [esp+30h] [ebp-14h]
	int v21x;
	Bit16s v22x; // [esp+34h] [ebp-10h]
	Bit16s v23x; // [esp+38h] [ebp-Ch]
	int v24; // [esp+3Ch] [ebp-8h]
	Bit16s v25x; // [esp+40h] [ebp-4h]

	// fix it
	//v17x = 0;
	//v18 = 0;
	//v19x = 0;
	// fix it

	v1 = 0;
	v24 = 0;
	if (unk_E17CC_str_0x194[24].byte_18_act == 1)
	{
		//_disable();
		temp_screen_buffer = x_DWORD_180628b_screen_buffer;
		x_DWORD_180628b_screen_buffer = x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map;
		v2 = x_DWORD_180624_resolution_y;
		x_DWORD_180644_map_resolution2_y = 960;
		x_DWORD_180624_resolution_y = 960;
		v3 = x_DWORD_18062C_resolution_x;
		x_DWORD_180648_map_resolution2_x = 1280;
		x_DWORD_18062C_resolution_x = 1280;
		sub_7C120_draw_bitmap_640(518, 17, xy_DWORD_17DED4_spritestr[285]);
		sub_7C120_draw_bitmap_640(583, 17, xy_DWORD_17DED4_spritestr[286]);
		sub_7C120_draw_bitmap_640(657, 17, xy_DWORD_17DED4_spritestr[287]);
		sub_7C120_draw_bitmap_640(696, 17, xy_DWORD_17DED4_spritestr[288]);
		sub_7C120_draw_bitmap_640(518, 88, xy_DWORD_17DED4_spritestr[289]);
		sub_7C120_draw_bitmap_640(574, 88, xy_DWORD_17DED4_spritestr[290]);
		sub_7C120_draw_bitmap_640(657, 88, xy_DWORD_17DED4_spritestr[291]);
		sub_7C120_draw_bitmap_640(706, 88, xy_DWORD_17DED4_spritestr[292]);
		sub_7C120_draw_bitmap_640(518, 156, xy_DWORD_17DED4_spritestr[293]);
		sub_7C120_draw_bitmap_640(582, 156, xy_DWORD_17DED4_spritestr[294]);
		sub_7C120_draw_bitmap_640(657, 156, xy_DWORD_17DED4_spritestr[295]);
		sub_7C120_draw_bitmap_640(703, 156, xy_DWORD_17DED4_spritestr[296]);
		x_DWORD_18062C_resolution_x = v3;
		x_DWORD_180624_resolution_y = v2;
		x_DWORD_180648_map_resolution2_x = v3;
		x_DWORD_180644_map_resolution2_y = v2;
		//HIWORD(a1) = HIWORD(v15);
		x_DWORD_180628b_screen_buffer = temp_screen_buffer;
		//_enable();
	}
	//for (i = (x_WORD*)unk_E17CC_0x194; *(Bit32s*)&i[2]; i += 11)
	for (ix = 0; unk_E17CC_str_0x194[ix].word_4; ix++)
	{
		if (unk_E17CC_str_0x194[ix].byte_18_act == 1 && !v24)
		{
			//LOWORD(a1) = unk_E17CC_str_0x194[ix].word_12;
			v17x = unk_E17CC_str_0x194[ix].word_12_x;
			//LOWORD(a1) = unk_E17CC_str_0x194[ix].word_14;
			v19x = unk_E17CC_str_0x194[ix].word_14_y;
			//v19y = v19x;
			v17x += xy_DWORD_17DED4_spritestr[37].width / 2;
			v19x += xy_DWORD_17DED4_spritestr[37].height / 2;
			v24 = 1;
		//LABEL_19:
			//v19x = v19y;
			continue;
		}
		if (v24 && unk_E17CC_str_0x194[ix].byte_18_act == 1)
		{
			//LOWORD(a1) = unk_E17CC_str_0x194[ix].word_14;
			//v5 = xy_DWORD_17DED4_spritestr[37].width;
			//v21x = unk_E17CC_str_0x194[ix].word_14;
			v6 = xy_DWORD_17DED4_spritestr[37].width / 2 + unk_E17CC_str_0x194[ix].word_12_x;
			v21x = xy_DWORD_17DED4_spritestr[37].height / 2 + unk_E17CC_str_0x194[ix].word_14_y;
			memset(v14x, 0, 24);
			sub_7E8D0((Bit16s*)v14x, v6, v21x, v17x, v19x, 2, 2);
			v25x = v17x;
			v22x = v19x;
			while (!v1)
			{
				for (j = v1; ; j = v1)
				{
					while (j < 3)
					{
						v1 = sub_7E9D0((Bit16s*)&v17x, (Bit16s*)&v19x, (Bit16s*)v14x);
						j++;
					}
					if (abs(v19x - v22x) <= 8
						&& abs(v17x - v25x) <= 8)
					{
						break;
					}
					sub_812D0_drawDotBitmap(v17x, v19x);
					v25x = v17x;
					v22x = v19x;
					if (v1)
						break;
						//goto LABEL_18;
				}
			}
		//LABEL_18:
			v19x = v21x;
			v17x = v6;
			v1 = 0;
			//goto LABEL_19;
			//v19x = v19y;
			continue;
		}
	}
	if (x_DWORD_17DB70str.x_WORD_17DB8A != -1)
	{
		//v7 = (char *)unk_E17CC_0x194;
		v7x = 0;
		v8 = 0;
		v9x = -1;
		for (k = 0; unk_E17CC_str_0x194[v7x].word_4; k++)
		{
			if (unk_E17CC_str_0x194[v7x].byte_18_act == 1)
			{
				v8 = 1;
				v9x = v7x;
			}
			if (unk_E17CC_str_0x194[v7x].byte_18_act == 2)
				break;
			//v7 += 22;
			v7x++;
		}
		if (k < 24 && v8)
		{
			//LOWORD(k) = unk_E17CC_str_0x194[v9x].word_12;
			v17x = unk_E17CC_str_0x194[v9x].word_12_x;
			//LOWORD(k) = unk_E17CC_str_0x194[v9x].word_14;
			v19x = unk_E17CC_str_0x194[v9x].word_14_y;
			v17x += xy_DWORD_17DED4_spritestr[37].width / 2;
			v19x += xy_DWORD_17DED4_spritestr[37].height / 2;
			v11 = xy_DWORD_17DED4_spritestr[37].width / 2 + unk_E17CC_str_0x194[v7x].word_12_x;
			v12 = xy_DWORD_17DED4_spritestr[37].height / 2 + unk_E17CC_str_0x194[v7x].word_14_y;
			memset(v14x, 0, 24);
			sub_7E8D0((Bit16s*)v14x, v11, v12, v17x, v19x, 2, 2);
			v1 = 0;
			v18x = v17x;
			v23x = v19x;
			while (!v1)
			{
				for (l = v1; ; l = v1)
				{
					while (l < 3)
					{
						v1 = sub_7E9D0((x_WORD*)&v17x, (x_WORD*)&v19x, (x_WORD*)v14x);
						l++;
					}
					if (abs(v19x - v23x) <= 8
						&& abs(v17x - v18x) <= 8)
					{
						break;
					}
					sub_812D0_drawDotBitmap(v17x, v19x);
					v18x = v17x;
					v23x = v19x;
					if (v1)
						return;
				}
			}
		}
	}
}

//----- (00081CA0) --------------------------------------------------------
unsigned int sub_81CA0(int a1, int a2, int16_t a3, int16_t a4, type_x_BYTE_E25ED_db_str* a5x)//262ca0
{
	unsigned int result; // eax
	uint8_t v6; // dl
	unsigned int v7; // ecx
	int v8; // eax

	result = j___clock();
	v6 = a5x->byte_20;
	v7 = result;
	if (v6 < 1u)
	{
		if (!v6)
		{
			a5x->byte_20 = 2;
			a5x->dword_0 = result;
			a5x->dword_4 = result;
		}
	}
	else if (v6 <= 1u)
	{
		if ((result - a5x->dword_4) >> 3 >= 1)
		{
			if (a5x->word_16 <= a5x->word_14 - 2)
			{
				a5x->word_16++;
			}
			else
			{
				if (a5x->byte_21 == 1)
				{
					v8 = a5x->word_22;
					a5x->byte_20 = 0;
				}
				a5x->word_16 = a5x->word_12;
			}
			a5x->dword_4 = v7;
		}
		/*result = */sub_7C120_draw_bitmap_640(
			a5x->word_8 - a3,
			a5x->word_10 - a4,
			xy_DWORD_17DED4_spritestr[a5x->word_16]);
		if (x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons & 1)
			a5x->word_16++;
	}
	else if (v6 == 2)
	{
		result = (result - a5x->dword_0) / 0x64;
		if (result > a5x->word_18)
		{
			result = a5x->word_22;
			a5x->byte_20 = 1;
			// FIXME: types
			// // if (result != -1)
			// 	result = (unsigned int)sub_8F100_sound_proc19(
			// 		0,
			// 		a5x->word_24,
			// 		(uint8_t)x_BYTE_E1324,
			// 		64,
			// 		0x64u,
			// 		a5x->word_28,
			// 		a5x->word_26);
		}
	}
	return result;
}

//----- (00081DB0) --------------------------------------------------------
void sub_81DB0_read_config()//262db0
{
	FILE* configdatfile; // ebx

	if (x_D41A0_BYTEARRAY_4_struct.setting_38402 == 1)
	{
		memset(readbuffer, 0, 32);
		// FIXME: types
		// configdatfile = sub_98817_open(file_handling->getFilePath(MC2File::config_dat).c_str(), 546);
		if (configdatfile != NULL)
		{
			qmemcpy(&readbuffer[0], (void *)&x_D41A0_BYTEARRAY_4_struct.dwordindex_0, 4);//fixed
			qmemcpy(&readbuffer[4], (void *)&x_D41A0_BYTEARRAY_4_struct.wordindex_4, 2);//fixed
			qmemcpy(&readbuffer[6], (void *)&x_D41A0_BYTEARRAY_4_struct.wordindex_6, 2);//fixed
			qmemcpy(&readbuffer[8], (void *)&x_D41A0_BYTEARRAY_4_struct.wordindex_8, 2);//fixed
			qmemcpy(&readbuffer[10], (void *)&x_D41A0_BYTEARRAY_4_struct.byteindex_10, 1);//fixed
			qmemcpy(&readbuffer[11], (void *)&x_D41A0_BYTEARRAY_4_struct.byte_brightness_11, 1);//fixed
			qmemcpy(&readbuffer[12], (void *)&x_D41A0_BYTEARRAY_4_struct.byte_brightness_12, 1);//fixed
			qmemcpy(&readbuffer[13], (void *)&x_D41A0_BYTEARRAY_4_struct.byte_brightness_13, 1);//fixed
			qmemcpy(&readbuffer[14], (void*)&x_D41A0_BYTEARRAY_4_struct.wordindex_14, 2);//fixed
			qmemcpy(&readbuffer[16], (void *)&x_D41A0_BYTEARRAY_4_struct.dwordindex_16, 4);//fixed
			qmemcpy(&readbuffer[20], (void*)x_D41A0_BYTEARRAY_4_struct.stubb, 2);//fixed
			qmemcpy(&readbuffer[22], x_BYTE_EB39E_keys, 10);//fixed
			readbuffer[0] = 0xf7;
			readbuffer[4] = x_D41A0_BYTEARRAY_4_struct.byteindex_179;
			sub_98CAA_write(configdatfile, readbuffer, 32);
			sub_98882_close(configdatfile);
		}
		x_D41A0_BYTEARRAY_4_struct.setting_38402 = 0;
	}
}

//----- (00081EE0) --------------------------------------------------------
void sub_81EE0_draw_and_sound_dragon_and_fire(int a1, int a2, int a3, int16_t a4, int16_t a5, int16_t a6)//262ee0
{
	int v6; // eax
	Bit16s* v7; // ebx
	int v8; // esi
	int16_t result; // ax
	uint8_t v10; // al
	uint8_t v11; // cl
	char v12; // ah
	int16_t v13; // ax
	uint8_t v14; // ST18_1
	int v15; // ST08_4
	int16_t v16; // ST04_2
	int v17; // ST18_4
	int v18; // ST14_4
	uint8_t v19; // ST18_1
	int v20; // ST08_4
	char v21; // dh
	int16_t v22; // ST04_2
	int v23x; // edx
	//int v24; // eax
	//x_WORD *v25; // edx
	int v25x;
	int16_t v26; // ax
	char v27; // al
	int16_t v28; // ax
	int v29; // ST18_4
	int v30; // ST14_4
	uint8_t v31; // ST18_1
	int v32; // ST08_4
	char v33; // dl
	int16_t v34; // ST04_2
	//x_WORD *v35; // edx
	int v35x;
	int16_t v36; // ax
	uint8_t v37; // al
	char v38; // ch
	int v39; // ST18_4
	int v40; // ST14_4
	int16_t v41; // ST2C_2
	int16_t v42; // ST30_2
	Bit8u* temp_screen_buffer; // ST1C_4
	int v44; // edx
	int16_t v45; // ST14_2
	int16_t v46; // ST10_2
	int16_t k; // [esp+8h] [ebp-14h]
	int16_t i; // [esp+Ch] [ebp-10h]
	int16_t j; // [esp+18h] [ebp-4h]

	v6 = j___clock();
	v7 = x_WORD_E20A4;
	v8 = v6;
	for (result = x_WORD_E20A4[11]; result; result = v7[11])
	{
		v10 = *((x_BYTE *)v7 + 42);
		if (v10 == 1)
		{
			v11 = *((x_BYTE *)v7 + 43);
			switch (v11)
			{
			case 0u:
				v12 = *((x_BYTE *)v7 + 43);
				*(x_DWORD *)v7 = v8;
				*((x_BYTE *)v7 + 43) = v12 + 1;
				break;
			case 1u:
				if ((v8 - *(x_DWORD *)v7) / 0x64u > v7[20])
					*((x_BYTE *)v7 + 43) = v11 + 1;
				break;
			case 2u:
				v7[9] = v7[11];
				v13 = v7[12];
				v7[10] = v13;
				sub_7E8D0((int16_t *)((char *)v7 + 45), v7[13], v7[14], v7[11], v13, 2, 2);
				v7[17] = v7[15];
				v14 = *((x_BYTE *)v7 + 12);
				v15 = (uint8_t)x_BYTE_E1324;
				v16 = v7[5];
				++*((x_BYTE *)v7 + 43);
				sub_8F100_sound_proc19(0, v16, v15, 64, 0x64u, 0, v14);
				break;
			case 3u:
				for (i = 0; i < 4; i++)
				{
					v17 = v7[14];
					v18 = v7[13];
					a4 = sub_7E9D0(v7 + 9, v7 + 10, (int16_t *)((char *)v7 + 45));
				}
				if ((unsigned int)(v8 - *(x_DWORD *)v7) >> 3 >= 1)
				{
					if (v7[17] <= v7[16] - 1)
						++v7[17];
					else
						v7[17] = v7[15];
					*(x_DWORD *)v7 = v8;
				}
				sub_7C120_draw_bitmap_640(v7[9] - a5, v7[10] - a6, xy_DWORD_17DED4_spritestr[v7[17]]);
				if (a4)
				{
					v7[17] = v7[18];
					v19 = *((x_BYTE *)v7 + 16);
					v20 = (uint8_t)x_BYTE_E1324;
					v21 = *((x_BYTE *)v7 + 43);
					v22 = v7[7];
					*(x_DWORD *)v7 = v8;
					*((x_BYTE *)v7 + 43) = v21 + 1;
					sub_8F100_sound_proc19(0, v22, v20, 64, 0x64u, 0, v19);
				}
				break;
			case 4u:
				a4 = 0;
				if ((unsigned int)(v8 - *(x_DWORD *)v7) >> 3 >= 1)
				{
					if (v7[17] <= v7[19] - 1)
					{
						v7[17]++;
					}
					else
					{
						a4 = 1;
						v7[17] = v7[18];
					}
					*(x_DWORD *)v7 = v8;
				}
				if (!a4)
				{
					//v23 = (int)x_DWORD_17DED4;
					v23x = v7[17];
					goto LABEL_85;
				}
				*((x_BYTE *)v7 + 43) = 0;
				break;
			}
		}
		else if (v10 == 2u)
		{
			if (x_DWORD_17DB70str.x_BYTE_17DB8F != 4)
			{
				//v25 = (x_WORD*)unk_E17CC_0x194;
				v25x = 0;
				v26 = 0;
				while (unk_E17CC_str_0x194[v25x].word_4 && unk_E17CC_str_0x194[v25x].byte_18_act != 2)
				{
					//v25 += 11;
					v25x++;
					v26++;
				}
				if (v26 == 25)
					v26 = 24;
				if (v26 == *((uint8_t *)v7 + 44))
				{
					switch (*((x_BYTE *)v7 + 43))
					{
					case 0:
						v27 = *((x_BYTE *)v7 + 43);
						*(x_DWORD *)v7 = v8;
						*((x_BYTE *)v7 + 43) = v27 + 1;
						break;
					case 1:
						goto LABEL_42;
					case 2:
						for (j = 0; j < 4; j++)
						{
							v29 = v7[14];
							v30 = v7[13];
							a4 = sub_7E9D0(v7 + 9, v7 + 10, (int16_t *)((char *)v7 + 45));
						}
						if ((unsigned int)(v8 - *(x_DWORD *)v7) >> 3 >= 1)
						{
							if (v7[17] <= v7[16] - 1)
								++v7[17];
							else
								v7[17] = v7[15];
							*(x_DWORD *)v7 = v8;
						}
						sub_7C120_draw_bitmap_640(v7[9] - a5, v7[10] - a6, xy_DWORD_17DED4_spritestr[v7[17]]);
						if (a4)
						{
							v7[17] = v7[18];
							v31 = *((x_BYTE *)v7 + 16);
							v32 = (uint8_t)x_BYTE_E1324;
							v33 = *((x_BYTE *)v7 + 43);
							v34 = v7[7];
							*(x_DWORD *)v7 = v8;
							*((x_BYTE *)v7 + 43) = v33 + 1;
							sub_8F100_sound_proc19(0, v34, v32, 64, 0x64u, 0, v31);
						}
						break;
					case 3:
						a4 = 0;
						if ((unsigned int)(v8 - *(x_DWORD *)v7) >> 3 >= 1)
						{
							if (v7[17] <= v7[19] - 1)
							{
								++v7[17];
							}
							else
							{
								a4 = 1;
								v7[17] = v7[18];
							}
							*(x_DWORD *)v7 = v8;
						}
						if (!a4)
							goto LABEL_84;
						++*((x_BYTE *)v7 + 43);
						break;
					default:
						break;
					}
				}
				else
				{
					*((x_BYTE *)v7 + 43) = 0;
				}
			}
		}
		else if (v10 == 3)
		{
			//v35 = (x_WORD*)unk_E17CC_0x194;
			v35x = 0;
			v36 = 0;
			while (unk_E17CC_str_0x194[v35x].word_4 && unk_E17CC_str_0x194[v35x].byte_18_act != 2)
			{
				//v35 += 11;
				v35x++;
				v36++;
			}
			if (v36)
				v36--;
			if (v36 == *((uint8_t *)v7 + 44))
			{
				v37 = *((x_BYTE *)v7 + 43);
				if (v37 < 1u)
				{
					if (!v37)
					{
						v38 = *((x_BYTE *)v7 + 43);
						*(x_DWORD *)v7 = v8;
						*((x_BYTE *)v7 + 43) = v38 + 1;
					}
				}
				else if (v37 <= 1u)
				{
				LABEL_42:
					v7[9] = v7[11];
					v28 = v7[12];
					v7[10] = v28;
					sub_7E8D0((int16_t *)((char *)v7 + 45), v7[13], v7[14], v7[11], v28, 2, 2);
					v7[17] = v7[15];
					++*((x_BYTE *)v7 + 43);
					sub_8F100_sound_proc19(0, v7[5], (uint8_t)x_BYTE_E1324, 64, 0x64u, 0, *((x_BYTE *)v7 + 12));
				}
				else if (v37 == 2)
				{
					for (k = 0; k < 4; k++)
					{
						v39 = v7[14];
						v40 = v7[13];
						a4 = sub_7E9D0(v7 + 9, v7 + 10, (int16_t *)((char *)v7 + 45));
					}
					if ((unsigned int)(v8 - *(x_DWORD *)v7) >> 3 >= 1)
					{
						if (v7[17] <= v7[16] - 1)
							++v7[17];
						else
							v7[17] = v7[15];
						*(x_DWORD *)v7 = v8;
					}
					if (unk_E17CC_str_0x194[24].byte_18_act == 1)
					{
						//_disable();
						v41 = x_DWORD_18062C_resolution_x;
						v42 = x_DWORD_180624_resolution_y;
						temp_screen_buffer = x_DWORD_180628b_screen_buffer;
						x_DWORD_180628b_screen_buffer = x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map;
						v44 = v7[17];
						x_DWORD_180648_map_resolution2_x = 1280;
						x_DWORD_18062C_resolution_x = 1280;
						v45 = v7[10];
						v46 = v7[9];
						x_DWORD_180644_map_resolution2_y = 960;
						x_DWORD_180624_resolution_y = 960;
						sub_7C120_draw_bitmap_640(v46, v45, xy_DWORD_17DED4_spritestr[v44]);
						x_DWORD_18062C_resolution_x = v41;
						x_DWORD_180624_resolution_y = v42;
						x_DWORD_180648_map_resolution2_x = v41;
						x_DWORD_180644_map_resolution2_y = v42;
						x_DWORD_180628b_screen_buffer = temp_screen_buffer;
						//_enable();
					}
					else
					{
					LABEL_84:
						v23x = v7[17];
						//v24 = (int)x_DWORD_17DED4;
					LABEL_85:
						sub_7C120_draw_bitmap_640(v7[9] - a5, v7[10] - a6, xy_DWORD_17DED4_spritestr[v23x]);
					}
				}
			}
			else
			{
				*((x_BYTE *)v7 + 43) = 0;
			}
		}
		v7 = (int16_t *)((char *)v7 + 69);
	}
	//return result;
}

//----- (000824B0) --------------------------------------------------------
type_x_WORD_E2970* sub_824B0(int16_t a1)//2634b0
{
	//x_WORD *result; // eax

	//result = x_WORD_E2970;
	int ri = 0;
	if (!x_WORD_E2970x[ri].word_12)
		return 0;
	while (a1 != x_WORD_E2970x[ri].word_4)
	{
		ri++;
		if (!x_WORD_E2970x[ri].word_12)
			return 0;
	}
	return &x_WORD_E2970x[ri];
}

//----- (000824E0) --------------------------------------------------------
type_x_WORD_E2970* sub_824E0(int16_t a1)//2634e0
{
	//type_x_WORD_E2970* result; // eax

	//result = x_WORD_E2970x;
	int ri=0;
	if (!x_WORD_E2970x[ri].word_12)
		return 0;
	while (a1 != x_WORD_E2970x[ri].word_6)
	{
		ri++;
		if (!x_WORD_E2970x[ri].word_12)
			return 0;
	}
	return &x_WORD_E2970x[ri];
}

//----- (00082510) --------------------------------------------------------
void sub_82510(/*int16_t a1*//*, int *a2*/)//263510
{
	int v2; // eax
	int v3; // edx
	int16_t v4; // dx
	char *v5; // esi
	Bit8u* v6; // edx
	int v7; // eax
	int v8; // ecx
	//int result; // eax
	char v10[36]; // [esp+0h] [ebp-2Ch]
	//char v11[2]; // [esp+10h] [ebp-1Ch]
	Bit8u* v12; // [esp+24h] [ebp-8h]
	Bit8u* v13; // [esp+28h] [ebp-4h]
	posistruct* v13s;

	Bit8u switchbit = 0;

	v13 = x_DWORD_17DE38str.x_DWORD_17DEC0;
	v12 = x_DWORD_17DE38str.x_DWORD_17DEC4;
	x_DWORD_17DE38str.x_DWORD_17DEC0 = x_DWORD_17DE38str.x_DWORD_17DEC8;
	x_DWORD_17DE38str.x_DWORD_17DEC4 = x_DWORD_17DE38str.x_DWORD_17DECC;

	v13s = xy_DWORD_17DEC0_spritestr;//fixed
	xy_DWORD_17DEC0_spritestr = xy_DWORD_17DEC8_spritestr;//fixed

	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10 == 1)
	{
		switchbit = unk_17DBA8str.x_BYTE_17DBB6;//*((x_BYTE *)a2 + 14);
		if (switchbit == 2)
		{
			v2 = j___clock();
			v3 = unk_17DBA8str.unk_17DBA8;
			unk_17DBA8str.unk_17DBAC = v2;
			if ((v2 - v3) / 0x64u > 1)
			{
				v4 = unk_17DBA8str.unk_17DBB4 + 1;
				unk_17DBA8str.unk_17DBB4 = v4;
				if (!unk_E2516[9 * v4 + 1])
					unk_17DBA8str.unk_17DBB4 = 0;
				unk_17DBA8str.unk_17DBA8 = unk_17DBA8str.unk_17DBAC;//a2[0] = a2[1];
			}
			memset(&v10, 0, 36);//3550c0
			v5 = (char *)&unk_E2516[9 * unk_17DBA8str.unk_17DBB4];
			v6 = off_E23E0;
			qmemcpy(&v10, v5, 0x12u);
			//qmemcpy(&v11, v5 + 0x10u, 2u);
			while (v6[25])
			{
				if (v6[23] && v6[22] == (int)(unk_E2516[8 + 9 * unk_17DBA8str.unk_17DBB4] >> 8))// x_BYTE_E2527[18 * *((int16_t *)a2 + 6)] )
				{
					v6[24] = 1;
					break;
				}
				v6 += 44;
			}
			sub_7E840_draw_textbox_with_line((Bit16u*)&v10, 238, 264);//draw help
		}
		else if (switchbit == 3)
		{
			v7 = j___clock();
			v8 = unk_17DBA8str.unk_17DBA8;
			unk_17DBA8str.unk_17DBAC = v7;
			if ((v7 - v8) / 0x64u > 1)
				unk_17DBA8str.x_BYTE_17DBB5 = 2;
		}
	}
	x_DWORD_17DE38str.x_DWORD_17DEC0 = v13;
	x_DWORD_17DE38str.x_DWORD_17DEC4 = v12;

	xy_DWORD_17DEC0_spritestr= v13s;//fixed
}


//----- (00082AB0) --------------------------------------------------------
void sub_82AB0(uint8_t a1)//263ab0
{
	//int v1; // eax
	int v2; // edx
	//int result; // eax
	//x_WORD *v4; // ebx
	int16_t i; // cx
	//int v6; // eax
	int v7; // edx

	if (a1 > 0x18u)
	{
		//v4 = x_WORD_E2970;
		int v4i = 0;
		for (i = 0; x_WORD_E2970x[v4i].word_12; i++)
		{
			//result = a1;
			if (a1 == x_WORD_E2970x[v4i].word_6)
			{
				//v6 = (int)x_D41A0_BYTEARRAY_0;
				v7 = 5 * i;
				x_DWORD_17DDBCx[v7] = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x179_377;
				x_DWORD_17DDBCx[1+v7] = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x17D_381;
				x_DWORD_17DDBCx[2+v7] = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x175_373;
				x_DWORD_17DDBCx[3+v7] = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x181_385;
				//result = *(x_DWORD *)(2124 * *(int16_t *)(x_D41A0_BYTEARRAY_0 + 12) + x_D41A0_BYTEARRAY_0 + 12621);
				x_DWORD_17DDBCx[4+v7] = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393;
			}
			v4i++;
			//v4 = (x_WORD *)((char *)v4 + 17);
		}
	}
	else
	{
		//v1 = (int)x_D41A0_BYTEARRAY_0;
		v2 = 5 * a1;
		x_DWORD_17DBC8x[v2] = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x179_377;
		x_DWORD_17DBC8x[1+v2] = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x17D_381;
		x_DWORD_17DBC8x[2+v2] = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x175_373;
		x_DWORD_17DBC8x[3+v2] = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x181_385;
		//result = *(x_DWORD *)(2124 * *(int16_t *)(x_D41A0_BYTEARRAY_0 + 12) + x_D41A0_BYTEARRAY_0 + 12621);
		x_DWORD_17DBC8x[4+v2] = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.dword_0x189_393;
	}
	//return result;
}

//----- (00082C20) --------------------------------------------------------
void sub_82C20_drawEndGameTable(int16_t a1)//263c20
{
	//x_WORD *v1; // edx
	int16_t v2; // si
	//int v3; // ebx
	int16_t v4; // bx
	int16_t v5; // si
	int v6; // edx
	int16_t v7; // bx
	unsigned int v8; // esi
	int v9; // edx
	//int v10; // eax
	int v11; // esi
	int v12; // edi
	int16_t i; // bx
	//int v14; // eax
	x_BYTE *v15; // ebx
	int16_t v16; // ax
	uint16_t v17; // dx
	int16_t j; // bx
	//int v19; // eax
	int16_t v20; // di
	signed int v21; // ebx
	int v22; // edx
	//char v23; // [esp+0h] [ebp-12h]
	char* v24x[6]; // [esp+28h] [ebp+16h] //v24x[0]
	//char* v25_spell_found; // [esp+2Ch] [ebp+1Ah]//v24x[1]
	//char* v26; // [esp+30h] [ebp+1Eh]//v24x[2]
	//char* v27; // [esp+34h] [ebp+22h]//v24x[3]
	//char* v28; // [esp+38h] [ebp+26h]//v24x[4]
	//char* v29; // [esp+3Ch] [ebp+2Ah]//v24x[5]
	int v30x[8]; // [esp+40h] [ebp+2Eh]//v30x[0]
	//int v31x[7]; // [esp+44h] [ebp+32h]//v30x[1]
	//int v32; // [esp+48h] [ebp+36h]//v30x[2]
	//int v33; // [esp+4Ch] [ebp+3Ah]//v30x[3]
	//int v34; // [esp+50h] [ebp+3Eh]//v30x[4]
	//int v35; // [esp+54h] [ebp+42h]//v30x[5]
	//int v36; // [esp+58h] [ebp+46h]//v30x[6]
	//int v37; // [esp+5Ch] [ebp+4Ah]//v30x[7]
	int v38; // [esp+60h] [ebp+4Eh]
	int v39; // [esp+64h] [ebp+52h]
	int v40; // [esp+68h] [ebp+56h]
	int v41; // [esp+6Ch] [ebp+5Ah]
	int v42; // [esp+70h] [ebp+5Eh]
	int v43; // [esp+74h] [ebp+62h]
	int v44; // [esp+78h] [ebp+66h]
	int v45; // [esp+7Ch] [ebp+6Ah]
	int v46; // [esp+80h] [ebp+6Eh]
	int v47; // [esp+84h] [ebp+72h]
	int v48; // [esp+88h] [ebp+76h]
	int v49; // [esp+8Ch] [ebp+7Ah]

	v42 = 50;
	v48 = 50;
	if (a1 > -1)
	{
		v24x[0] = (char*)off_D9204_wizards_names1[a1];
		v24x[1] = x_DWORD_E9C4C_langindexbuffer[386];//Spells found //fix it this variable not used
		v24x[2] = x_DWORD_E9C4C_langindexbuffer[385];//Accuracy
		v30x[0] = 0;
		v24x[3] = x_DWORD_E9C4C_langindexbuffer[384];//Creatures Killed
		v30x[1] = 0;
		v24x[4] = x_DWORD_E9C4C_langindexbuffer[377];//Mana
		v30x[7] = 0;
		v24x[5] = x_DWORD_E9C4C_langindexbuffer[394];//Time Taken
		if (a1 > 24)
		{
			//v1 = x_WORD_E2970;
			int v1i = 0;
			v2 = 0;
			while (x_WORD_E2970x[v1i].word_12)
			{
				if (a1 == x_WORD_E2970x[v1i].word_6)
				{
					//v3 = 5 * v2;
					v30x[2] = x_DWORD_17DDBCx[5 * v2];
					v30x[3] = x_DWORD_17DDBCx[1+ 5 * v2];
					v30x[4] = x_DWORD_17DDBCx[2+ 5 * v2];
					v30x[5] = x_DWORD_17DDBCx[3+ 5 * v2];
					v30x[6] = x_DWORD_17DDBCx[4+ 5 * v2];
				}
				//v1 = (x_WORD *)((char *)v1 + 17);
				v1i++;
				v2++;
			}
		}
		else
		{
			v30x[2] = x_DWORD_17DBC8x[5 * a1];
			v30x[3] = x_DWORD_17DBC8x[1+5 * a1];
			v30x[4] = x_DWORD_17DBC8x[2+5 * a1];
			v30x[5] = x_DWORD_17DBC8x[3+5 * a1];
			v30x[6] = x_DWORD_17DBC8x[4+5 * a1];//time of game
		}
		v4 = 1;
		v5 = strlen(v24x[0]);
		while (v4 < 6)
		{
			v6 = v4;
			if (strlen(v24x[v6]) > v5)
				v5 = strlen(v24x[v6]);
			v4++;
		}
		v7 = 1;
		v8 = strlen(v24x[0]);
		while (v7 < 6)
		{
			v9 = v7;
			if (strlen(v24x[v9]) > v8)
				v8 = strlen(v24x[v9]);
			v7++;
		}
		//HIWORD(v10) = HIWORD(x_DWORD_17DEC0);
		//LOWORD(v10) = xy_DWORD_17DEC0_spritestr[65].width;
		v11 = 2 * xy_DWORD_17DEC0_spritestr[65].width * v8;
		v12 = 320 - (int16_t)v11 / 2;
		v44 = xy_DWORD_17DED4_spritestr[275].width;
		v40 = (uint8_t)v44;
		if ((int16_t)v11 % (signed int)(uint8_t)v44)
			v11 = ((int16_t)v11 / (signed int)(uint8_t)v44 + 1) * v44;
		for (i = 0; i < (int16_t)v11; i += v44)
			sub_7C120_draw_bitmap_640(i + v12, v48, xy_DWORD_17DED4_spritestr[275]);
		//HIWORD(v14) = HIWORD(x_DWORD_17DED4);
		//LOWORD(v14) = xy_DWORD_17DED4_spritestr[275].height;
		v49 = 0;
		v48 += xy_DWORD_17DED4_spritestr[275].height;
		do
		{
			v41 = (int16_t)v12 + xy_DWORD_17DED4_spritestr[274].width;
			v39 = (int16_t)v48;
			v40 = (int16_t)v48;
			v15 = (x_BYTE *)(v41 + 640 * (int16_t)v48 + x_DWORD_180628b_screen_buffer);
			sub_7C120_draw_bitmap_640(v12, v48, xy_DWORD_17DED4_spritestr[274]);
			sub_7C120_draw_bitmap_640(v11 + v12 - xy_DWORD_17DED4_spritestr[274].width, v40, xy_DWORD_17DED4_spritestr[274]);
			v45 = 0;
			while (xy_DWORD_17DED4_spritestr[274].height > (int16_t)v45)
			{
				v16 = 0;
				while (v16 < (int16_t)v11 - 2 * xy_DWORD_17DED4_spritestr[274].width)
				{
					HIBYTE(v17) = 15;
					LOBYTE(v17) = *v15;
					v41 = v17;
					v15++;
					v16++;
					*(v15 - 1) = *(x_BYTE *)(v17 + x_DWORD_17DE38str.x_DWORD_17DE3C);
				}
				v45++;
				v15 += 640 - v16;
				v48++;
			}
			v49++;
		} while ((int16_t)v49 < 12);
		for (j = 0; j < (int16_t)v11; j += v44)
			sub_7C120_draw_bitmap_640(j + v12, v48, xy_DWORD_17DED4_spritestr[275]);
		//HIWORD(v19) = HIWORD(x_DWORD_17DED4);//fix it
		//LOWORD(v19) = xy_DWORD_17DED4_spritestr[274].width;
		v47 = 2 * xy_DWORD_17DED4_spritestr[274].width + v42;
		//LOWORD(v19) = xy_DWORD_17DED4_spritestr[65].width;
		v20 = xy_DWORD_17DEC0_spritestr[65].width + v12;
		sub_7FAE0_draw_text(v24x[0], v20, v11 - xy_DWORD_17DEC0_spritestr[65].width + v20, v47, 0);
		v21 = 1;
		v47 += 5;
		while (1)
		{
			v46 = v47 + 2;
			if ((int16_t)v21 >= 5)
			{
				sub_7FB90_draw_text(
					v24x[5],
					(int16_t)(v20 + 2 * xy_DWORD_17DEC0_spritestr[65].width),
					//v46 + 5 * *(uint8_t *)((int)x_DWORD_17DEC0 + 395) + *(uint8_t *)((int)x_DWORD_17DEC0 + 395),
					v46 + 6 * xy_DWORD_17DEC0_spritestr[v46].height,
					0);
				v39 = 60;
				v41 = v30x[6] % 3600 / 60;
				v38 = v30x[6] % 3600 / 60;
				sprintf(printbuffer, "%02d:%02d:%02d", v30x[6] / 3600, v41, v30x[6] % 3600 % 60);
				sub_7FB90_draw_text(
					printbuffer,
					(int16_t)(v20 + v11 - 14 * xy_DWORD_17DEC0_spritestr[65].width),
					//v46 + 5 * *(uint8_t *)((int)x_DWORD_17DEC0 + 395) + *(uint8_t *)((int)x_DWORD_17DEC0 + 395),
					v46 + 6 * xy_DWORD_17DEC0_spritestr[v46].height,
					0);
				return;
			}
			v22 = (int16_t)v21;
			if (v24x[v22])
				break;
		LABEL_47:
			v21++;
		}
		if (x_D41A0_BYTEARRAY_4_struct.byteindex_179 != 2)
		{
			v43 = v21 * xy_DWORD_17DEC0_spritestr[65].height;
			sub_7FB90_draw_text(v24x[v22], (int16_t)(v20 + 2 * xy_DWORD_17DEC0_spritestr[65].width), v43 + v46, 0);
			goto LABEL_46;
		}
		if ((uint16_t)v21 < 2u)
			goto LABEL_44;
		if ((uint16_t)v21 <= 2u)
		{
			sub_7FB90_draw_text(
				(char*)"Hit Accuracy",
				(int16_t)(v20 + 2 * xy_DWORD_17DEC0_spritestr[65].width),
				v46 + v21 * xy_DWORD_17DEC0_spritestr[65].height,
				0);
		}
		else
		{
			if ((x_WORD)v21 != 4)
			{
			LABEL_44:
				sub_7FB90_draw_text(
					v24x[v21],
					(int16_t)(v20 + 2 * xy_DWORD_17DEC0_spritestr[65].width),
					xy_DWORD_17DEC0_spritestr[65].height * (x_WORD)v21 + v47 + 2,
					0);
				goto LABEL_46;
			}
			sub_7FB90_draw_text(
				(char*)"Mana Collected",
				(int16_t)(v20 + 2 * xy_DWORD_17DEC0_spritestr[65].width),
				v46 + 4 * xy_DWORD_17DEC0_spritestr[65].height,
				0);
		}
	LABEL_46:
		sprintf(printbuffer, "%3d%%", v30x[1+ v21]);
		sub_7FB90_draw_text(
			printbuffer,
			(int16_t)(v20 + v11 - 8 * xy_DWORD_17DEC0_spritestr[65].width),
			v47 + 2 + v21 * xy_DWORD_17DEC0_spritestr[65].height,
			0);
		goto LABEL_47;
	}
}

//----- (000833C0) --------------------------------------------------------
void sub_833C0()//2643c0
{
	Bit8u* v1; // eax
	int v2; // edx
	signed int v3; // eax
	signed int v4; // esi
	int v5; // ebx
	int v6; // eax
	int v7; // edx
	int v8; // eax
	unsigned int v9; // eax
	int v10; // edi
	char *v11; // ecx
	int v12; // eax
	int v13; // edx
	int v14; // eax
	uint8_t v15; // al
	int v18; // [esp+0h] [ebp-14h]
	int v19; // [esp+8h] [ebp-Ch]
	int16_t v20; // [esp+Ch] [ebp-8h]
	int i; // [esp+10h] [ebp-4h]

	v2 = 0;
	v6 = 0;
	v7 = 0;
	v13 = 0;

	v19 = 0;
	v20 = 0;
	x_DWORD_17DE38str.x_DWORD_17DE38 = *xadatapald0dat2.var28_begin_buffer;
	x_DWORD_17DE38str.x_WORD_17DEEC = 0;
	x_DWORD_17DE38str.x_DWORD_17DE40 = x_DWORD_180628b_screen_buffer;
	x_DWORD_17DE38str.x_DWORD_17DEE0_filedesc = NULL;
	x_DWORD_17DE38str.x_DWORD_17DEDC = 0;
	x_DWORD_17DE38str.x_DWORD_17DE48c = x_D41A0_BYTEARRAY_4_struct.heapbuffer.data();
	sub_7B5D0();

	x_DWORD_17DE38str.x_DWORD_17DE54 = x_DWORD_17DE38str.x_DWORD_17DE48c + 0x49ADB;
	x_DWORD_17DE38str.x_DWORD_17DEC4 = x_DWORD_17DE38str.x_DWORD_17DE48c + 0x4D313;
	x_DWORD_17DE38str.x_DWORD_17DE58 = x_DWORD_17DE38str.x_DWORD_17DE48c + 0x4D313;
	x_DWORD_17DE38str.x_DWORD_17DEC8 = x_DWORD_17DE38str.x_DWORD_17DE48c + 0x4ECC2;
	x_DWORD_17DE38str.x_DWORD_17DECC = x_DWORD_17DE38str.x_DWORD_17DE48c + 0x4F31C;
	x_DWORD_17DE38str.x_DWORD_17DED4 = x_DWORD_17DE38str.x_DWORD_17DE48c + 0x4F31C;
	x_DWORD_17DE38str.x_DWORD_17DED8 = x_DWORD_17DE38str.x_DWORD_17DE48c + 0x4FA72;
	x_DWORD_17DE38str.x_DWORD_17DE60 = x_DWORD_17DE38str.x_DWORD_17DE44;
	x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map = x_DWORD_17DE38str.x_DWORD_17DE48c + 0x4FA72;
	x_DWORD_17DE38str.x_DWORD_17DE3C = x_DWORD_17DE38str.x_DWORD_17DE48c + 0x17BA72;
	x_DWORD_17DE38str.x_DWORD_17DEC0 = x_DWORD_17DE38str.x_DWORD_17DE48c + 0x4CCAD;
	x_DWORD_17DE38str.x_DWORD_17DE5C_border_bitmap = x_DWORD_17DE38str.x_DWORD_17DE48c + 0x17FA72;
	v3 = j___clock();
	v4 = v3;
	while (sub_9A10A_check_keyboard(/*v3*/))
	{
		x_BYTE_1806E4 = 0;
		/*LOBYTE(v3) = */sub_7A060_get_mouse_and_keyboard_events();
	}
	sub_8CD27_set_cursor((*filearray_2aa18c[filearrayindex_POINTERSDATTAB]._posistruct)[0]);
	std::filesystem::path path_hscreen0dat = file_handling->getFilePath(MC2File::data_screens_hscreen0_dat);
	sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), (Bit8u*)x_DWORD_17DE38str.x_DWORD_17DE54, 0x1641FC, 1214);
	sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), (Bit8u*)x_DWORD_17DE38str.x_DWORD_17DEC0, 0x1646BA, 589);
	sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), (Bit8u*)x_DWORD_17DE38str.x_DWORD_17DE58, 0x164907, 1191);
	sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), (Bit8u*)x_DWORD_17DE38str.x_DWORD_17DEC8, 0x164DAE, 543);
	sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), (Bit8u*)x_DWORD_17DE38str.x_DWORD_17DE38, 0x178B5F, 768);
	sub_7AA70_load_and_decompres_dat_file(path_hscreen0dat.c_str(), x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map, 0x16554D, 79378);
	sub_7AA70_load_and_decompres_dat_file(0, 0, 0, 0);
	/*if (x_WORD_180660_VGA_type_resolution & 1)
		sub_98709_create_index_dattab_power((Bit8u*)(int)x_DWORD_17DEC0, (Bit8u*)(int)x_DWORD_17DEC4, (Bit8u*)(int)x_DWORD_17DE54, (new posistruct));
	else
		sub_9874D_create_index_dattab((Bit8u*)(int)x_DWORD_17DEC0, (Bit8u*)(int)x_DWORD_17DEC4, (Bit8u*)(int)x_DWORD_17DE54, (new posistruct));
	*/
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		sub_98709_create_index_dattab_power(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr);
	}
	else
	{
		sub_9874D_create_index_dattab(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr);
	}

	/*if (x_WORD_180660_VGA_type_resolution & 1)
		sub_98709_create_index_dattab_power((Bit8u*)x_DWORD_17DEC8, (Bit8u*)x_DWORD_17DECC, (Bit8u*)x_DWORD_17DE58, (new posistruct));
	else
		sub_9874D_create_index_dattab((Bit8u*)x_DWORD_17DEC8, (Bit8u*)x_DWORD_17DECC, (Bit8u*)x_DWORD_17DE58, (new posistruct));*/
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		sub_98709_create_index_dattab_power(x_DWORD_17DE38str.x_DWORD_17DEC8, x_DWORD_17DE38str.x_DWORD_17DECC, x_DWORD_17DE38str.x_DWORD_17DE58, xy_DWORD_17DEC8_spritestr);
	}
	else
	{
		sub_9874D_create_index_dattab(x_DWORD_17DE38str.x_DWORD_17DEC8, x_DWORD_17DE38str.x_DWORD_17DECC, x_DWORD_17DE38str.x_DWORD_17DE58, xy_DWORD_17DEC8_spritestr);
	}

	x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 0;
	//v5 = (int)x_DWORD_17DEC0 + 6;
	x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons = 0;
	//x_DWORD_17DEC0 += 6;

	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		sub_98709_create_index_dattab_power_add(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr,6);
	}
	else
	{
		sub_9874D_create_index_dattab_add(x_DWORD_17DE38str.x_DWORD_17DEC0, x_DWORD_17DE38str.x_DWORD_17DEC4, x_DWORD_17DE38str.x_DWORD_17DE54, xy_DWORD_17DEC0_spritestr,6);
	}
	x_DWORD_17DE38str.x_DWORD_17DEC0 += 6;

	while (!x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode && !x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons)
	{
		if (x_WORD_180660_VGA_type_resolution & 1)
			sub_9A128_copy_screen_320((void*)x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map, (void*)x_DWORD_180628b_screen_buffer, 0xC8u);
		else
			sub_9A144_copy_screen_640((void*)x_DWORD_17DE38str.x_DWORD_17DE64_game_world_map, (void*)x_DWORD_180628b_screen_buffer, 0x1E0u);
		v8 = j___clock();
		v5 = v19;
		v18 = v8;
		for (i = 0; ; i += xy_DWORD_17DEC0_spritestr[65].height + 2)
		{
			v9 = (v18 - v4) / 0x64u;
			v10 = (int16_t)v5;
			v11 = (char*)off_DB558[v10];
			if (v11==NULL)//end of sequence
			{
				if (v9 > 5)
				{
					v12 = j___clock();
					v5 = 0;
					v4 = v12;
					v19 = 0;
				}
				goto LABEL_24;
			}
			if (!_stricmp(v11, "!"))
				break;
			v15 = sub_5BE80_test_pallette((uint8_t *)x_DWORD_17DE38str.x_DWORD_17DE38, 0x3Fu, 0x3Fu, 0x3Fu);
			sub_7FCB0_draw_text_with_border(v5, off_DB558[v10], 10, 620, (int16_t)(i + 200), 5, v15, 0);
			//HIWORD(v16) = HIWORD(x_DWORD_17DEC0);
			//LOWORD(v16) = xy_DWORD_17DEC0_spritestr[65].height;
			v5++;
		}
		if ((v18 - v4) / 0x64u > 2)
		{
			v14 = j___clock();
			v5++;
			v4 = v14;
			v19 = v5;
		}
	LABEL_24:
		sub_7A060_get_mouse_and_keyboard_events();
		if (v20)
		{
			if (x_WORD_180660_VGA_type_resolution & 1)
				sub_90478_VGA_Blit320();
			else
				sub_75200_VGA_Blit640(480);
		}
		else
		{
			sub_90B27_VGA_pal_fadein_fadeout((Bit8u*)x_DWORD_17DE38str.x_DWORD_17DE38, 0x20u, 0);
			v20 = 1;
		}
	}
	sub_90B27_VGA_pal_fadein_fadeout(0, 0x10u, 0);
	/*v17 = (int)*/memset((void*)*xadatapald0dat2.var28_begin_buffer, 0, 768);
	//LOBYTE(v17) = x_WORD_180660_VGA_type_resolution;
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_72883_clear_graphics_320(/*v17, */(void *)x_DWORD_180628b_screen_buffer, 0xC8u, 0);
	else
		sub_728A9_clear_graphics_640((void *)x_DWORD_180628b_screen_buffer, 0x1E0u, 0);
	if (x_WORD_180660_VGA_type_resolution & 1)
		sub_90478_VGA_Blit320();
	else
		sub_75200_VGA_Blit640(480);
	while (x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode || x_DWORD_17DE38str.x_WORD_17DEEE_mouse_buttons)
		sub_7A060_get_mouse_and_keyboard_events();
	x_DWORD_17DE38str.x_BYTE_17DF10_get_key_scancode = 0;
}

//----- (00083B50) --------------------------------------------------------
void sub_83B50()//264B50
{
	x_D41A0_BYTEARRAY_4_struct.dword_0xE6_heapsize_230 = 0x800000;
	if (x_D41A0_BYTEARRAY_4_struct.heapbuffer.size() < x_D41A0_BYTEARRAY_4_struct.dword_0xE6_heapsize_230)//2A51B2F = ff
	{
		x_BYTE_D41B5_texture_size = 32;
		x_BYTE_DB74C = 1;
		sub_9A230_set_x_WORD_E37B4(822);
		x_D41A0_BYTEARRAY_4_struct.heapbuffer.resize(x_D41A0_BYTEARRAY_4_struct.dword_0xE6_heapsize_230);
		sub_54630_load_psxblock(x_BYTE_D41B5_texture_size);
		sub_5B7A0_prepare_textures();//23C7A0
	}
}

//----- (00083CC0) --------------------------------------------------------
void sub_83CC0(char a1)//264cc0
{
	//char result; // al

	//result = a1;
	x_BYTE_E29E8 = a1;
	//  return result;
}


//----- (00083E00) --------------------------------------------------------
char sub_83E00(int a1, int a2)//264e00
{
	int *i; // eax
	char v4; // bl
	int v5; // edi

	if (a2 == *(x_DWORD *)(a1 + 4))
	{
		*(x_BYTE *)(a1 + 16) = x_BYTE_E29E8;
	}
	else
	{
		for (i = (int*)&x_DWORD_17ECA0; i < &x_DWORD_17FEA0 && i[1]; i = (int *)((char *)i + 18))
			;
		if (i == &x_DWORD_17FEA0)//problem problem
			return 0;
		i[1] = *(x_DWORD *)(a1 + 4) - a2;
		*i = a2 + *(x_DWORD *)a1;
		v4 = x_BYTE_E29E8;
		*(x_DWORD *)(a1 + 4) = a2;
		*(x_BYTE *)(a1 + 16) = v4;
		*((x_BYTE *)i + 17) = *(x_BYTE *)(a1 + 17);
		i[2] = *(x_DWORD *)(a1 + 8);
		i[3] = a1;
		v5 = *(x_DWORD *)(a1 + 8);
		// FIXME: types
		// // if (v5)
		// 	*(x_DWORD *)(v5 + 12) = (x_DWORD)i;
		// FIXME: types
		// *(x_DWORD *)(a1 + 8) = (x_DWORD)i;
	}
	return 1;
}

//----- (00083E80) --------------------------------------------------------
void sub_83E80_freemem4(Bit8u* a1)//264e80
{
	Bit8u* v1; // eax
	char v2; // bl
	int *i; // ebx

	if (a1)
	{
		v1 = (Bit8u*)&x_DWORD_17ECA0;
		v2 = 0;
		while (v1)
		{
			// FIXME: types
			// // if ((int)a1 == v1[0])//fix
			// {
			// 	v2 = 1;
			// 	*((x_BYTE *)v1 + 16) = 0;
			// 	break;
			// }
			v1 = (Bit8u*)(int *)v1[2];
		}
		if (v2 == 1)
		{
			for (i = (int*)&x_DWORD_17ECA0; i; i = (int *)i[2])
			{
				// FIXME: types
				// // if (!*((x_BYTE *)i + 16))
				// 	sub_84000((int)i);
			}
		}
		//sub_85350(); //fix
	}
}

//----- (00084000) --------------------------------------------------------
int sub_84000(int a1)//265000
{
	int result; // eax
	int v2; // edx
	int v3; // ebx

	result = a1;
	if (*(x_DWORD *)(a1 + 12))
	{
		*(x_BYTE *)(a1 + 16) = 0;
		v2 = *(x_DWORD *)(a1 + 12);
		if (*(x_BYTE *)(a1 + 17) == *(x_BYTE *)(v2 + 17) && !*(x_BYTE *)(v2 + 16))
		{
			v3 = *(x_DWORD *)(a1 + 8);
			if (v3)
				*(x_DWORD *)(v3 + 12) = v2;
			*(x_DWORD *)(*(x_DWORD *)(a1 + 12) + 8) = *(x_DWORD *)(a1 + 8);
			*(x_DWORD *)(*(x_DWORD *)(a1 + 12) + 4) += *(x_DWORD *)(a1 + 4);
			*(x_DWORD *)(a1 + 4) = 0;
		}
	}
	return result;
}

//----- (00084050) --------------------------------------------------------
void sub_84050()//265050
{
	//char v0; // sf
	//int result; // eax
	//char v2; // [esp+0h] [ebp-8h]
	//char v3; // [esp+1h] [ebp-7h]
	//char v4; // [esp+2h] [ebp-6h]
	//char v5; // [esp+3h] [ebp-5h]
	//char v6; // [esp+4h] [ebp-4h]

	/*
	//fix it
	v0 = 0;
	//fix it

	sub_840B8(0, 0, v0, 0);
	v2 = x_BYTE_E29EC;
	v4 = x_BYTE_E29ED;
	v5 = x_BYTE_E29EE;
	v6 = x_BYTE_E29EF;
	v3 = x_BYTE_E29F0;*/

	//fix computer detect speed
#ifdef FIX_DETECT_SPEED
	x_BYTE_E29EC = 5;
#endif FIX_DETECT_SPEED
	//fix computer detect speed

	if (x_BYTE_E29EC == 5)
	{
		//result = (int)x_D41A0_BYTEARRAY_4;
		x_D41A0_BYTEARRAY_4_struct.byteindex_34 = 1;
	}
	else
	{
		//result = (int)x_D41A0_BYTEARRAY_4;
		x_D41A0_BYTEARRAY_4_struct.byteindex_34 = 0;
	}
	//return result;
}

//----- (00084250) --------------------------------------------------------
bool sub_84250_load_file_array(int psindex)//265250
{
	Bit16u result; // si
	int16_t v4; // ax

	int oldpsindex = psindex;
	sub_85070(); //fix it
	result = 0;//esi=0
	if (pstr[psindex].var28_begin_buffer)
	{
		do
		{
			sub_9A2F5_freemem_of_begin_buffer(pstr[psindex++]);
		} while (pstr[psindex].var28_begin_buffer);
	}
	psindex = oldpsindex;
	while (pstr[psindex].var28_begin_buffer)
	{
		v4 = sub_9A32D_malloc_open_unpack(pstr[psindex]);//27B32d - dalo mu to 1 - set 2bab20

		if (v4 >= 0)
		{
			if (v4)
			{
				psindex++;
				continue;
			}
			//goto LABEL_10;
			sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);//install pallette for text mode(show error)
			myprintf("ERROR: File %s.\n");
		}
		else
		{
			sub_41A90_VGA_pallette_install(*xadatapald0dat2.var28_begin_buffer);//install pallette for text mode(show error)
			myprintf("ERROR: Allocation %s.\n");
		}
		myprintf("Press return to continue\n");
		result++;
		getc(stdin);
		psindex++;
	}
	return result;
}

//----- (00084300) --------------------------------------------------------
Bit32s sub_84300_load_sound(Bit8u a1)//265300
{
	FILE* file; // eax
	//FILE* v2; // ebx
	//FILE* v3; // edi
	int v4; // eax
	Bit16s v6[6]; // [esp+0h] [ebp-14h]
	Bit32s v7; // [esp+Ch] [ebp-8h]
	int v8; // [esp+10h] [ebp-4h] - musi byt asi vstup

	//fix it
	v8 = 0;
	//fix it

	if (x_BYTE_E3798_sound_active2 && x_BYTE_E37AD_actual_sound != a1)
	{
		if (x_WORD_E2A14_sound_activeh)
			sub_8D8F0_sound_proc3_endsample();
		file = sub_98817_open((char*)"SOUND/SOUND.DAT", 512);
		//v2 = v1;
		//v3 = v1;
		if (file != NULL)
		{
			sub_9891E_seek(file, 0, 2);
			v4 = myftell(file);
			sub_9891E_seek(file, v4 - 4, 0);
			sub_988A7_read(file, (Bit8u*)&v7, 4);
			sub_9891E_seek(file, v7, 0);
			sub_988A7_read(file, (Bit8u*)v6, 12);
			if (x_WORD_E37B6_sound_number < 0x336u)
			{
				if (x_WORD_E37B6_sound_number >= 0x320u)
				{
					if (x_WORD_E37B6_sound_number <= 0x320u)
					{
						v8 = 5;
					}
					else if (x_WORD_E37B6_sound_number == 811)
					{
						v8 = 4;
					}
				}
			}
			else if (x_WORD_E37B6_sound_number <= 0x336u)
			{
				v8 = 3;
			}
			else if (x_WORD_E37B6_sound_number < 0x656u)
			{
				if (x_WORD_E37B6_sound_number == 1611)
					v8 = 2;
			}
			else if (x_WORD_E37B6_sound_number <= 0x656u)
			{
				v8 = 1;
			}
			else if (x_WORD_E37B6_sound_number == 1644)
			{
				v8 = 0;
			}
			if ((a1 + 1) > v6[v8])
			{
				sub_98882_close(file);
				return 1;
			}
			sub_9891E_seek(file, 96 * a1, 1);//seek to finded sound
			if (!sub_844F0_read_and_decompress_sound(file, v8))
			{
				sub_98882_close(file);
				return 1;
			}
			x_BYTE_E37AD_actual_sound = a1;
			sub_98882_close(file);
		}
	}
	return 0;
}

//----- (000844A0) --------------------------------------------------------
void sub_844A0_sound_proc5()//2654a0
{
	int16_t v0; // bx
	Bit8u* v1; // eax
	int v2; // esi

	v0 = x_WORD_180B50;
	if (x_DWORD_E37A0_sound_buffer2 && x_DWORD_E37A8_sound_buffer1)
	{
		v1 = x_DWORD_E37A0_sound_buffer2 + 32;
		v0 = 0;
		while (v1 < x_DWORD_E37A4_sound_buffer3)
		{
			v2 = *(x_DWORD *)(v1 + 18);
			v1 += 32;
			++v0;
			// FIXME: types
			// *(x_DWORD *)(v1 - 14) = (int32_t)x_DWORD_E37A8_sound_buffer1 + v2;
		}
	}
	x_WORD_180B50 = v0;
}

//----- (000844F0) --------------------------------------------------------
char sub_844F0_read_and_decompress_sound(FILE* a1, uint8_t a2)//2654f0
{
	int v2; // ebx
	//Bit8u* v3; // eax
	char result; // al
	int v5; // eax
	Bit8u* v6; // ebx
	Bit8u* v7; // esi
	char v8[96]; // [esp+0h] [ebp-60h]//3550d8
	//char _4[96]; // [esp+4h] [ebp-5Ch]//3550dc
	//char _8[96]; // [esp+8h] [ebp-58h]
	//char _C[96]; // [esp+Ch] [ebp-54h]

	myftell(a1);
	v2 = 16 * a2;
	//3550d8 60
	sub_988A7_read(a1, (Bit8u*)v8, 96);
	if (*(x_DWORD *)&v8[v2 + 4] == -1)//ebp-5c
		return 0;
	if (!x_WORD_E2A14_sound_activeh)
	{
		x_DWORD_E37A8_sound_buffer1 = (Bit8u*)malloc(*(x_DWORD *)&v8[v2 + 12] + 256);
		x_DWORD_E37A0_sound_buffer2 = (Bit8u*)malloc(3100);
		x_WORD_E2A14_sound_activel = 1;
		if (!x_DWORD_E37A8_sound_buffer1 || !x_DWORD_E37A0_sound_buffer2)
		{
			sub_83E80_freemem4(x_DWORD_E37A8_sound_buffer1);
			sub_83E80_freemem4(x_DWORD_E37A0_sound_buffer2);
			x_WORD_E2A14_sound_activel = 0;
			result = 0;
			x_BYTE_E37AD_actual_sound = -1;
			return result;
		}
		x_DWORD_E2A18 = *(x_DWORD *)&v8[v2 + 12] + 256;
		x_WORD_E2A14_sound_activeh = 1;
		x_DWORD_E2A1C = 3100;
	}
	x_BYTE_E3798_sound_active2 = 0;
	if (!x_DWORD_E37A8_sound_buffer1 || !x_DWORD_E37A0_sound_buffer2)
		return 0;
	memset((void*)x_DWORD_E37A8_sound_buffer1, 0, x_DWORD_E2A18);
	memset((void*)x_DWORD_E37A0_sound_buffer2, 0, x_DWORD_E2A1C);
	v5 = 16 * a2;
	v6 = x_DWORD_E37A0_sound_buffer2;
	x_DWORD_E37A4_sound_buffer3 = x_DWORD_E37A0_sound_buffer2 + *(x_DWORD *)&v8[v5 + 8];
	v7 = x_DWORD_E37A8_sound_buffer1;
	sub_9891E_seek(a1, *(x_DWORD *)&v8[v5 + 4], 0);
	sub_988A7_read(a1, x_DWORD_E37A8_sound_buffer1, 8);
	if (v7[0] != 82 || v7[1] != 78 || v7[2] != 67)
	{
		sub_988A7_read(a1, (x_DWORD_E37A8_sound_buffer1 + 8), *(x_DWORD *)&v8[16 * a2 + 12] - 8);
	}
	else
	{
		sub_988A7_read(
			a1,
			(x_DWORD_E37A8_sound_buffer1 + 8),
			v7[7]
			+ ((v7[6] + ((v7[5] + (v7[4] << 8)) << 8)) << 8)
			- 8);
		sub_9894C_decompress(v7, v7);
	}
	sub_9891E_seek(a1, *(x_DWORD *)&v8[16 * a2], 0);
	sub_988A7_read(a1, x_DWORD_E37A0_sound_buffer2, 8);
	if (*v6 != 82 || v6[1] != 78 || v6[2] != 67)
	{
		sub_988A7_read(a1, (x_DWORD_E37A0_sound_buffer2 + 8), *(x_DWORD *)&v8[16 * a2 + 8] - 8);
	}
	else
	{
		sub_988A7_read(
			a1,
			(x_DWORD_E37A0_sound_buffer2 + 8),
			v6[7]
			+ ((v6[6] + ((v6[5] + (v6[4] << 8)) << 8)) << 8)
			- 8);
		sub_9894C_decompress(v6, v6);
	}
	sub_844A0_sound_proc5();
	x_BYTE_E3798_sound_active2 = 1;
	return 1;
}

//----- (00084790) --------------------------------------------------------
void sub_84790()//265790
{
	//int result; // eax

	memset(&D41A0_BYTESTR_0.str_0x3664C, 0, 1950);
	//result = (int)x_D41A0_BYTEARRAY_0;
	D41A0_BYTESTR_0.word_0x36DFA = 0;
	D41A0_BYTESTR_0.dword_0x36DF2 = 0x3A013;
	//return result;
}

//----- (000847D0) --------------------------------------------------------
char sub_847D0(type_str_0x6E8E* a1x, char a2, char a3, char a4)//2657d0
{
	int16_t v4; // dx
	uint8_t v5; // dh
	int v6x; // eax
	
	LOBYTE(v4) = 0;
	if (D41A0_BYTESTR_0.str_0x218A_settings.str_0x2196.lights_0x2196)
	{
		v5 = D41A0_BYTESTR_0.str_2FECE.byte_level_type;		
		if (v5 >= 1u && v5 <= 2u && D41A0_BYTESTR_0.word_0x36DFA < 50)
		{
			//v6 = (int)x_D41A0_BYTEARRAY_0 + 222796;
			v6x = 0;
			HIBYTE(v4) = 0;
			while (v4 < 50 && D41A0_BYTESTR_0.str_0x3664C[v6x].byte_0)
			{
				v4++;
				//v6 += 39;
				v6x++;
			}
			D41A0_BYTESTR_0.str_0x3664C[v6x].byte_0 = 1;
			D41A0_BYTESTR_0.str_0x3664C[v6x].byte_1 = a4;
			D41A0_BYTESTR_0.str_0x3664C[v6x].byte_2 = a2;
			D41A0_BYTESTR_0.str_0x3664C[v6x].byte_3 = a3;
			D41A0_BYTESTR_0.str_0x3664C[v6x].axis3d_4 = a1x->array_0x4C_76;
			D41A0_BYTESTR_0.str_0x3664C[v6x].dword_A = a1x;
			a1x->struct_byte_0xc_12_15.byte[2] |= 8u;
			memset(D41A0_BYTESTR_0.str_0x3664C[v6x].array_E, 0, 25);
			LOBYTE(v4) = 1;
			D41A0_BYTESTR_0.word_0x36DFA++;
		}
	}
	return v4;
}

//----- (00084880) --------------------------------------------------------
void sub_84880(type_str_0x3664C* a1x)//265880
{
	//int result; // eax

	a1x->byte_0 = 0;
	//result = (int)x_D41A0_BYTEARRAY_0;
	D41A0_BYTESTR_0.word_0x36DFA--;
	//return result;
}


//int debugcounter_2658a0 = 0;

//----- (000848A0) --------------------------------------------------------
void sub_848A0()//2658a0
{
	//uaxis_2d v0x; // ax
	//Bit8u* v1; // edx
	int v1x;
	int16_t v2; // bx
	int16_t v3; // si
	uaxis_2d v4x; // eax
	int16_t v31; // [esp+4h] [ebp-4h]

	//LOBYTE(v0) = D41A0_BYTESTR_0.str_2FECE.byte_level_type;	
	if (D41A0_BYTESTR_0.str_2FECE.byte_level_type >= 1u && D41A0_BYTESTR_0.str_2FECE.byte_level_type <= 2u)
	{
		//v0 = D41A0_BYTESTR_0.word_0x36DFA;
		v31 = D41A0_BYTESTR_0.word_0x36DFA;
		if (D41A0_BYTESTR_0.word_0x36DFA)
		{
			//D41A0_BYTESTR_0.str_0x3664C[v1x].
			//v1 = x_D41A0_BYTEARRAY_0 + 222796;
			v1x = 0;
			v2 = 0;
			v3 = 0;
			while (v2 < 50 && v3 < v31)
			{
				if (D41A0_BYTESTR_0.str_0x3664C[v1x].byte_0)
				{
					v4x._axis_2d.x = (D41A0_BYTESTR_0.str_0x3664C[v1x].axis3d_4.x >> 8) - 2;
					v4x._axis_2d.y = (D41A0_BYTESTR_0.str_0x3664C[v1x].axis3d_4.y >> 8) - 2;
					//v4x._axis_2d.x -=2;
					//v5 = v4;
					//LOBYTE(v4)++;							
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[0];
					v4x._axis_2d.x++;
					//v6 = v4;
					//LOBYTE(v4)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[1];
					v4x._axis_2d.x++;
					//v7 = v4;
					//LOBYTE(v4)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[2];
					v4x._axis_2d.x++;
					//v8 = v4;
					//LOBYTE(v4)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[3];
					v4x._axis_2d.x++;
					//v9 = v4;
					//HIBYTE(v4)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[4];
					v4x._axis_2d.y++;
					//v10 = v4;
					//LOBYTE(v4)--;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[5];
					v4x._axis_2d.x--;
					//v11 = v4;
					//LOBYTE(v4)--;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[6];
					v4x._axis_2d.x--;
					//v12 = v4;
					//LOBYTE(v4)--;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[7];
					v4x._axis_2d.x--;
					//v13 = v4;
					//LOBYTE(v4)--;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[8];
					v4x._axis_2d.x--;
					//v14 = v4;
					//BYTE1(v4)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[9];
					v4x._axis_2d.y++;
					//v15 = v4;
					//LOBYTE(v4)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[10];
					v4x._axis_2d.x++;
					//v16 = v4;
					//LOBYTE(v4)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[11];
					v4x._axis_2d.x++;
					//v17 = v4;
					//LOBYTE(v4)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[12];
					v4x._axis_2d.x++;
					//v18 = v4;
					//LOBYTE(v4)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[13];
					v4x._axis_2d.x++;
					//v19 = v4;
					//HIBYTE(v4)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[14];
					v4x._axis_2d.y++;
					//v20 = v4;
					//LOBYTE(v4)--;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[15];
					v4x._axis_2d.x--;
					v3++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[16];
					v4x._axis_2d.x--;
					//LOBYTE(v4)--;
					//v21 = v4;
					//LOBYTE(v4)--;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[17];
					v4x._axis_2d.x--;
					//v22 = v4;
					//LOBYTE(v4) = v4 - 1;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[18];//32
					v4x._axis_2d.x--;
					//v23 = v4;
					//HIBYTE(v0)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[19];//33
					v4x._axis_2d.y++;
					//v0x.word=v4x.word;
					//v24 = v0;
					//LOBYTE(v0)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[20];//34
					v4x._axis_2d.x++;
					//v25 = v0;
					//LOBYTE(v0)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[21];//35
					v4x._axis_2d.x++;
					//v26 = v0;
					//LOBYTE(v0)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[22];//36
					v4x._axis_2d.x++;
					//v27 = v0;
					//v28 = x_BYTE_12B4E0_shading[v0] - D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[23];
					//LOBYTE(v0)++;
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[23];//37
					//v29 = v0;
					v4x._axis_2d.x++;
					//LOBYTE(v0) = D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[24];
					x_BYTE_12B4E0_shading[v4x.word] -= D41A0_BYTESTR_0.str_0x3664C[v1x].array_E[24];//38
				}
				v2++;
				//v1 += 39;
				v1x++;
			}
		}
	}
	//return v0;
}

//int debugcounter_265b80 = 0;
//----- (00084B80) --------------------------------------------------------
void sub_84B80()//265b80
{
	//Bit8u* index; // eax
	//uint8_t v1; // dl
	type_str_0x6E8E* v2x; // esi
	int v3; // esi
	//axis_3d* v3x; // esi
	uaxis_2d v4x; // bx
	//int v5; // eax
	//Bit8u* i; // [esp+0h] [ebp-10h]
	//axis_3d* ix;
	int iy;
	//Bit8u* v7; // [esp+4h] [ebp-Ch]
	Bit16s v7x;
	int16_t v8; // [esp+8h] [ebp-8h]
	Bit16s v9; // [esp+Ch] [ebp-4h]

	//index = (int)x_D41A0_BYTEARRAY_0;
	//v1 = D41A0_BYTESTR_0.str_2FECE.byte_level_type;
	if (D41A0_BYTESTR_0.str_2FECE.byte_level_type >= 1u && D41A0_BYTESTR_0.str_2FECE.byte_level_type <= 2u)
	{
		v9 = D41A0_BYTESTR_0.word_0x36DFA;
		if (D41A0_BYTESTR_0.word_0x36DFA)
		{
			//index = x_D41A0_BYTEARRAY_0 + 222796;
			v8 = 0;
			v7x = 0;
			//for (i = x_D41A0_BYTEARRAY_0 + 222796; v8 < 50; i += 39)
			for (iy = 0; v8 < 50; iy++)
			{
				//index = v7;
				if (v7x >= v9)
					break;
				//index = i;
				if (D41A0_BYTESTR_0.str_0x3664C[iy].byte_0)
				{
					v2x = D41A0_BYTESTR_0.str_0x3664C[iy].dword_A;
					v7x++;

					//fix
					/*if (v2x == NULL)
					{
						Bit8u pom[] = {
							0xCC,0xE4,0x00,0xF0,0x0C,0x00,0x70,0x00,0x08,0x00,0x70,0x00,0x0C,0x00,0x70,0x00,
							0x08,0x00,0x70,0x00,0xCC,0xE4,0x00,0xF0,0xCC,0xE4,0x00,0xF0,0xCC,0xE4,0x00,0xF0,
							0x1C,0x11,0x41,0x07,0x20,0x11,0x41,0x07,0x68,0xFF,0x00,0xF0,0x68,0xFF,0x00,0xF0,
							0x68,0xFF,0x00,0xF0,0x68,0xFF,0x00,0xF0,0x4C,0xE7,0x00,0xF0,0x68,0xFF,0x00,0xF0,
							0xCC,0xE8,0x00,0xF0,0xAC,0xE5,0x00,0xF0,0xCC,0xE5,0x00,0xF0,0x8C,0xE9,0x00,0xF0,
						};
						v2x = (type_str_0x6E8E*)&pom;
					}*/
					/*if (v2x == NULL)
						break;*/
					if (v2x ==0)
					{
						type_str_0x6E8E FIXx;
						FIXx.dword_0x8 = 0x00700008;
						FIXx.array_0x4C_76.x = 0xe98c;
						FIXx.array_0x4C_76.y = 0xf000;
						FIXx.array_0x4C_76.z = 0xe60c;
						FIXx.struct_byte_0xc_12_15.byte[1] = 0;
						v2x = &FIXx;
					}
					//fix

					if (v2x->dword_0x8 < 0 || v2x->struct_byte_0xc_12_15.byte[1] & 4)
					{
						/*index = (Bit8u*)*/sub_84880(&D41A0_BYTESTR_0.str_0x3664C[iy]);
					}
					else
					{
						//v3x = &v2x->array_0x4C_76;
						D41A0_BYTESTR_0.str_0x3664C[iy].axis3d_4 = v2x->array_0x4C_76;
						//*(x_WORD *)(i + 8) = *(x_WORD *)(v3x + 4);
						v4x._axis_2d.x = D41A0_BYTESTR_0.str_0x3664C[iy].axis3d_4.x >> 8;
						v4x._axis_2d.y = D41A0_BYTESTR_0.str_0x3664C[iy].axis3d_4.y >> 8;
						//v5 = (int)x_D41A0_BYTEARRAY_0;
						D41A0_BYTESTR_0.dword_0x36DF2 = 9377 * D41A0_BYTESTR_0.dword_0x36DF2 + 9439;
						v3 = D41A0_BYTESTR_0.dword_0x36DF2 % D41A0_BYTESTR_0.str_0x3664C[iy].byte_3
							- D41A0_BYTESTR_0.str_0x3664C[iy].byte_3 / 2;
						v4x._axis_2d.y -= 2;
						v4x._axis_2d.x -= 2;
						//adress 265c5d
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 0, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 1, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 2, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 3, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 4, v3);
						v4x._axis_2d.y++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 5, v3);
						v4x._axis_2d.x--;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 6, v3);
						v4x._axis_2d.x--;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 7, v3);
						v4x._axis_2d.x--;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 8, v3);
						v4x._axis_2d.x--;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 9, v3);
						v4x._axis_2d.y++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 10, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 11, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 12, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 13, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 14, v3);
						v4x._axis_2d.y++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 15, v3);
						v4x._axis_2d.x--;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 16, v3);
						v4x._axis_2d.x--;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 17, v3);
						v4x._axis_2d.x--;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 18, v3);
						v4x._axis_2d.x--;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 19, v3);
						v4x._axis_2d.y++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 20, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 21, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 22, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 23, v3);
						v4x._axis_2d.x++;
						sub_84EA0(v4x, &D41A0_BYTESTR_0.str_0x3664C[iy], 24, v3);
					}
				}
				v8++;
			}
		}
	}
	//return result;
}

int debugcounter_265ea0 = 0;

//----- (00084EA0) --------------------------------------------------------
void sub_84EA0(uaxis_2d a1x, type_str_0x3664C* a2x, char a3, int16_t a4)//265ea0
{
	signed int v4; // esi
	signed int v5; // edi
	int v6; // ebx
	int v7; // ecx
	//int v8; // edx
	//signed int v9; // ebx
	int v10; // edx
	//int result; // eax
	axis_3d v12; // [esp+0h] [ebp-8h]
	//int16_t v13; // [esp+2h] [ebp-6h]
	//int16_t v14; // [esp+4h] [ebp-4h]

	v4 = 31;
	v5 = (uint8_t)x_BYTE_12B4E0_shading[a1x.word];
	v6 = 0;
	if (v5 < 63)
	{
		v12.x = (a1x._axis_2d.x << 8) + 128;
		v12.y = (a1x._axis_2d.y << 8) + 128;
		v12.z = sub_10C40_getTerrainAlt(&v12);
		v7 = sub_84FB0_3dim_scalar(&a2x->axis3d_4, &v12);//fix v7 = sub_84FB0(a2 + 4, &v12);
		if (v7 < 0x48000)
		{
			if (a2x->byte_1 & 1)
			{
				//a2x->dword_A->dword_0x8
				//v8 = *(x_DWORD *)(a2 + 10);
				//v9 = *(x_DWORD *)(v8 + 8);
				if ((a2x->dword_A==0) || a2x->dword_A->dword_0x8 <= 0)
				{
					v4 = 0;
				}
				else if (a2x->dword_A->dword_0x8 < 31)
				{
					v4 = a2x->dword_A->dword_0x8;
				}
			}
			v10 = 31 * (0x48000 - v7) / 0x48000 * a2x->byte_2;
			//v6 = a4 + ((v10 - (__CFSHL__(v10 >> 31, 7) + (v10 >> 31 << 7))) >> 7);
			v6 = a4 + ((v10 - (my_sign32(v10) << 7) + my_sign32(v10)) >> 7);
			if (v6 > v4)
				v6 = v4;
			if (v5 + v6 > 63)
				v6 = 63 - v5;
			if (v6 < 0)
				v6 = 0;
			x_BYTE_12B4E0_shading[a1x.word] += v6;
		}
	}
	//result = a2 + a3;
	a2x->array_E[a3] = v6;
	//*(x_BYTE *)(result + 14) = v6;
	//return result;
}

//----- (00084FB0) --------------------------------------------------------
int sub_84FB0_3dim_scalar(axis_3d* a1, axis_3d* a2)//265fb0
{
	//int v2; // eax
	//int v3; // edx
	//int v4; // eax

	//v2 = a1[1] - a2[1];
	//v3 = v2 * v2;
	//v4 = a1[0] - a2[0];
	return ((Bit16s)a1->x - (Bit16s)a2->x) * ((Bit16s)a1->x - (Bit16s)a2->x) + ((Bit16s)a1->y - (Bit16s)a2->y) * ((Bit16s)a1->y - (Bit16s)a2->y) + ((Bit16s)a1->z - (Bit16s)a2->z) * ((Bit16s)a1->z - (Bit16s)a2->z);
}

//----- (00085060) --------------------------------------------------------
int sub_85060(int a1)//266060
{
	return *(x_DWORD *)(a1 + 4);
}

//----- (00085070) --------------------------------------------------------
void sub_85070()//266070 // fix it 34FCA0
{
	signed int v0; // ebx
	//int *v1; // ST04_4
	signed int v2; // ebx
	//char *v3; // ST04_4
	unsigned int v4; // ebx
	int v5; // esi
	//void* v6; // eax
	//int v7; // edi
	//int v8; // edx
	int v9; // eax
	signed int i; // ebx
	//char* v11; // eax
	signed int j; // edi
	int k; // ebx
	int v14; // edx
	int v15; // eax
	signed int v16; // ebx
	int v17; // eax
	int l; // ebx
	int v19; // edx
	int v20; // eax
	void* v21; // [esp+0h] [ebp-Ch]
	int v22; // [esp+8h] [ebp-4h]

	//fix
	v9 = 0;
	//fix

	/*
	eax=1
	ecx=0
	edx=0
	*/

	if (!x_DWORD_17E0A8)//34f0a8
	{

		v21 = sub_85450_allocate_mem_pool(0x10000);
		/*
		1f01c02
		prepi se 3
		0
		1f0
		*/

		//v0 = 0;
		/*esp=355148
		espx += 4;
		[ebp-0xc(355158-c)]=v21;*/
		v0 = 0;
		do
		{
			memset(&x_DWORD_17E0A0[3 * v0++], 0, 12);
		} while (v0 < 0x100);
		v2 = 0;
		while (v2 < 0x100)
		{
			memset(&x_DWORD_17ECA0[18 * v2++], 0, 18);
		}
		v4 = 0xA0000;//(char *)&loc_A0000_vga_buffer; fix it 34FCA0 +4 //2660F9
		v5 = 0;
		/*while ( (signed int)v4 >= 0x400 )//fix it maybe
		{
		  v6 = sub_85450_allocate_mem_pool(v4);//vraci same nuly
		  if ( v6 )
		  {
			v7 = (uint16_t)v6;//vraci nulu
			v8 = (int)v6 >> 16;
			v9 = 3 * v5;
			x_DWORD_17E0A8[v9] = (int)v4;
			++v5;
			x_DWORD_17E0A4[v9] = v8;
			v4 += 0x400;
			x_DWORD_17E0A0[v9] = 16 * v7;
		  }
		  v4 -= 0x400;
		}*/
		for (i = 0x1000000; i >= 0x1000; i -= 0x1000)
		{
			x_DWORD_17E0A0[3 * v5] = (char*)malloc(i * sizeof(Bit8u));
			if (x_DWORD_17E0A0[3 * v5])
			{
				for (j = 4096; j > 0; j -= 16)
				{
					v22 = 3 * v5;
					if (x_expand(x_DWORD_17E0A0[3 * v5], i + j))
					{
						x_DWORD_17E0A8[v22] = i + j;
						x_DWORD_17E0A4[v22] = 0;
						break;
					}
				}
				i += 4096;
				v5++;
			}
		}
		for (k = 4096; k >= 16; k -= 16)
		{
			// FIXME: types
			// v14 = (int)malloc(k * sizeof(Bit8u));
			v15 = 3 * v5;
			x_DWORD_17E0A0[3 * v5] = (char*)v14;
			if (v14)
			{
				v5++;
				x_DWORD_17E0A8[v15] = k;
				k += 0x1000;
				x_DWORD_17E0A4[v15] = 0;
			}
		}
		v16 = 0;
		qsort(x_DWORD_17E0A0, v5, 12, (int(*)(const void *, const void *))sub_85060);
		do
		{
			v17 = 9 * v16++;
			*(int *)((char *)&x_DWORD_17ECA4 + 2 * v17) = 0;
		} while (v16 < 0x100);
		for (l = 0; l < v5; l++)
		{
			v19 = 18 * l;
			// FIXME: types
			// *(int *)((char *)&x_DWORD_17ECA0 + v19) = (int)x_DWORD_17E0A0[3 * l];
			*(int *)((char *)&x_DWORD_17ECA4 + v19) = x_DWORD_17E0A8[3 * l];
			// FIXME: types
			// // if (l)
			// 	*(int *)((char *)&x_DWORD_17ECAC + v19) = (int)&x_DWORD_17ECA0 + 18 * (l - 1);
			// else
			// 	*(int *)((char *)&x_DWORD_17ECAC + v19) = 0;
			v20 = 9 * l;
			// FIXME: types
			// *(int *)((char *)&x_DWORD_17ECA8 + 2 * v20) = (int)&x_DWORD_17ECA0 + 18 * (l + 1);
			x_BYTE_17ECB0[2 * v20] = 0;
			x_BYTE_17ECB1[2 * v20] = l;
		}
		*(int *)((char *)&x_DWORD_17ECA8 + 18 * (v5 - 1)) = 0;
		sub_9AD16_free_mem_pool(v21);
	}
}
//----- (00085450) --------------------------------------------------------
//void *dpmi_real_malloc( int size, ushort *selector )
void* sub_85450_allocate_mem_pool(unsigned int size)//266450 //nutno doresit
{
	/*int v1; // ebx
	int v3; // [esp+0h] [ebp-38h]
	unsigned int v4; // [esp+4h] [ebp-34h]
	int v5; // [esp+1Ch] [ebp-1Ch]
	int v6; // [esp+28h] [ebp-10h]
	int v7; // [esp+34h] [ebp-4h]

	//fix it
	v6 = 0;
	v7 = 0;
	//fix it

	v1 = 0;
	if ( a1 < 0xA0000 )
	{
	  v4 = (a1 + 15) >> 4;
	  v3 = 0x0100;
	  int386(49, (REGS*)&v3, (REGS*)&v5);
	  if ( !v7 )
		v1 = v5 | (v6 << 16);
	}
	return v1;*/
	//
	/*REGS r;

	memset(&r, 0, sizeof(r));
	r.eax = 0x0100;				// DPMI allocate DOS memory
	r.ebx = (size + 15) >> 4;	// Number of paragraphs requested
	int386(0x31, &r, &r);

	if (r.cflag)  // Failed
		return ((uint)0);

	if (selector != NULL)
		*selector = r.edx & 0xFFFF;

	return (void *)((r.eax & 0xFFFF) << 4);*/

	if (size < 0xA0000)
		return malloc(size * 16 * sizeof(Bit8u));
	else
		return 0;
	/*
	100
	1000
	35513C
	168 --selector

	1C02 --base adress
	1000 --size
	35513C
	1F0 - selector


	*/
}

//----- (000856D0) --------------------------------------------------------
int16_t sub_856D0(int a1, int a2, int16_t a3, int a4)//2666d0
{
	uint8_t v4; // dl
	uint8_t v5; // dh
	int16_t v6; // di
	int16_t v7; // si
	int v8; // eax
	int v9; // ecx
	uint8_t v10; // cl
	x_BYTE *v11; // edx
	int16_t v12; // si
	char v13; // cl
	int v14; // edi
	int v15; // esi
	x_BYTE *v16; // eax
	char v17; // ch
	bool v18; // zf
	int v19; // edx
	char v20; // cl
	char v21; // cl
	uint8_t v22; // cl
	int v23; // edi
	int v24; // eax
	x_BYTE *v25; // eax
	char v26; // ch
	uint8_t v27; // ch
	int v29; // [esp+0h] [ebp-38h]
	int v30; // [esp+8h] [ebp-30h]
	int v31; // [esp+Ch] [ebp-2Ch]
	int v32; // [esp+10h] [ebp-28h]
	int v33; // [esp+14h] [ebp-24h]
	int v34; // [esp+1Ch] [ebp-1Ch]
	int16_t v35; // [esp+24h] [ebp-14h]
	uint8_t v36; // [esp+28h] [ebp-10h]
	uint8_t v37; // [esp+2Ch] [ebp-Ch]
	uint8_t v38; // [esp+30h] [ebp-8h]

	v4 = *(x_BYTE *)(a4 + 4);
	v5 = *(x_BYTE *)(a4 + 5);
	v6 = x_DWORD_17FEC0 + a2;
	v7 = x_DWORD_17FEC8 + a3;
	v8 = -a2;
	if ((-(int16_t)a2 & 0x8000u) != 0 || (x_WORD)a2 == 0)
	{
		v36 = 0;
	}
	else
	{
		if ((int16_t)v8 >= v4)
			return v8;
		v36 = -(char)a2;
	}
	v9 = v4;
	LOWORD(v8) = v4 + v6 - x_DWORD_17FEC4;
	if ((int16_t)v8 > 0)
	{
		if ((int16_t)v8 >= v4)
			return v8;
		v4 = x_DWORD_17FEC4 - v6;
	}
	LOWORD(v8) = -a3;
	if (a3 >= 0)
	{
		v10 = 0;
	}
	else
	{
		v9 = v5;
		if ((int16_t)v8 >= v5)
			return v8;
		v10 = -(char)a3;
	}
	LOWORD(v8) = v7 + v5 - x_DWORD_17FECC;
	if ((int16_t)v8 > 0)
	{
		if ((int16_t)v8 >= v5)
			return v8;
		v5 = x_DWORD_17FECC - v7;
	}
	v37 = v4 - v36;
	BYTE1(v9) = v5 - v10;
	v8 = *(x_DWORD *)a4;
	v35 = x_DWORD_18062C_resolution_x;
	v11 = (x_BYTE *)(x_DWORD_18062C_resolution_x * (v7 + (uint8_t)v9) + x_DWORD_180628b_screen_buffer + v6 + v36);
	if ((x_BYTE)v9)
	{
		v12 = v10;
		do
		{
			while (*(x_BYTE *)v8 > 0)
				v8 += *(char *)v8 + 1;
			v13 = *(x_BYTE *)v8++;
		} while (v13 || --v12);
	}
	v14 = (int16_t)x_DWORD_18062C_resolution_x;
	// FIXME: types
	// v15 = (int)&v11[(int16_t)x_DWORD_18062C_resolution_x];
	// FIXME: types
	// v29 = (int)&v11[(int16_t)x_DWORD_18062C_resolution_x];
	LOWORD(v15) = v37;
	LOWORD(v9) = BYTE1(v9);
	v34 = v9;
	if (v36)
	{
	LABEL_68:
		if (!v36)
			goto LABEL_22;
		v38 = v36;
		while (1)
		{
			while (1)
			{
				v21 = *(x_BYTE *)v8;
				if (*(x_BYTE *)v8 > 0)
					break;
				if (!*(x_BYTE *)v8)
				{
					v15 = 0;
					goto LABEL_22;
				}
				v14 = v21;
				v9 = -v38;
				if (v14 < v9)
				{
					LOBYTE(v9) = -*(x_BYTE *)v8 - v38;
					if ((uint8_t)v9 > v37)
						LOBYTE(v9) = v37;
					v14 = (uint8_t)v9;
					v8++;
					v11 += (uint8_t)v9;
					BYTE1(v9) = 0;
					v15 -= v9;
					goto LABEL_22;
				}
				v27 = *(x_BYTE *)v8++ + v38;
				v38 = v27;
				if (!v27)
					goto LABEL_22;
			}
			v14 = v21;
			v9 = v38;
			if (v38 < v14)
				break;
			v38 -= *(x_BYTE *)v8;
			v9 = v14 + 1;
			v8 += v14 + 1;
			if (!v38)
				goto LABEL_22;
		}
		v22 = *(x_BYTE *)v8 - v38;
		if (v22 > v37)
			v22 = v37;
		// FIXME: types
		// v31 = (int)&v11[v22];
		v23 = *(char *)v8;
		v24 = v8 + 1;
		v33 = v24 + v23;
		v25 = (x_BYTE *)(v38 + v24);
		v15 -= v22;
		v14 = *(x_WORD *)(a1 + 4) & 0xC000;
		if ((uint16_t)v14 >= 0x4000u)
		{
			if ((uint16_t)v14 > 0x4000u)
			{
				if ((x_WORD)v14 != -32768)
					goto LABEL_105;
				while (1)
				{
					if (*v25 >= 1u)
					{
						if (*v25 > 1u)
						{
							if (*v25 != 2)
								goto LABEL_104;
						LABEL_103:
							v18 = (*(x_BYTE *)(a1 + 4) & 2) == 0;
							goto LABEL_104;
						}
						if (!(*(x_BYTE *)(a1 + 4) & 1))
							goto LABEL_103;
					}
				LABEL_104:
					v25++;
					v11++;
					if (!--v22)
						goto LABEL_105;
				}
			}
			while (1)
			{
				if (*v25 >= 1u)
				{
					if (*v25 > 1u)
					{
						if (*v25 != 2)
							goto LABEL_96;
					LABEL_95:
						v18 = (*(x_BYTE *)(a1 + 4) & 2) == 0;
						goto LABEL_96;
					}
					if (!(*(x_BYTE *)(a1 + 4) & 1))
						goto LABEL_95;
				}
			LABEL_96:
				v25++;
				v11++;
				if (!--v22)
				{
					v8 = v33;
					v11 = (x_BYTE *)v31;
					goto LABEL_22;
				}
			}
		}
		if ((x_WORD)v14)
		{
		LABEL_105:
			v8 = v33;
			v11 = (x_BYTE *)v31;
			goto LABEL_22;
		}
		while (1)
		{
			if (*v25 >= 1u)
			{
				if (*v25 > 1u)
				{
					if (*v25 != 2 || !(*(x_BYTE *)(a1 + 4) & 2))
						goto LABEL_88;
					v26 = *(x_BYTE *)(a1 + 7);
					goto LABEL_87;
				}
				if (*(x_BYTE *)(a1 + 4) & 1)
				{
					v26 = *(x_BYTE *)(a1 + 6);
				LABEL_87:
					*v11 = v26;
					goto LABEL_88;
				}
			}
		LABEL_88:
			v25++;
			v11++;
			if (!--v22)
				goto LABEL_105;
		}
	}
LABEL_22:
	while (2)
	{
		while (2)
		{
			if ((int16_t)v15 <= 0)
			{
				HIWORD(v15) = HIWORD(v34);
				LOWORD(v15) = v34 - 1;
				v18 = (x_WORD)v34 == 1;
				v34 = v15;
				if (v18)
					return v8;
				do
				{
					while (*(x_BYTE *)v8 > 0)
						v8 += *(char *)v8 + 1;
					v20 = *(x_BYTE *)v8++;
				} while (v20);
				v11 = (x_BYTE *)v29;
				v9 = v35;
				v14 = v29 + v35;
				LOWORD(v15) = v37;
				v29 += v35;
				goto LABEL_68;
			}
			LOBYTE(v9) = *(x_BYTE *)v8;
			if (*(x_BYTE *)v8 > 0)
			{
				if ((char)v9 >= (int16_t)v15)
					v9 = (int16_t)v15;
				else
					v9 = *(char *)v8;
				LOWORD(v14) = *(char *)v8;
				v15 -= v14;
				// FIXME: types
				// v32 = (int)&v11[(uint8_t)v9];
				v30 = *(char *)v8 + v8 + 1;
				v14 = *(x_WORD *)(a1 + 4) & 0xC000;
				v16 = (x_BYTE *)(v8 + 1);
				if ((uint16_t)v14 >= 0x4000u)
				{
					if ((uint16_t)v14 > 0x4000u)
					{
						if ((x_WORD)v14 != -32768)
							goto LABEL_58;
						while (1)
						{
							if (*v16 >= 1u)
							{
								if (*v16 > 1u)
								{
									if (*v16 != 2)
										goto LABEL_57;
								LABEL_56:
									v18 = (*(x_BYTE *)(a1 + 4) & 2) == 0;
									goto LABEL_57;
								}
								if (!(*(x_BYTE *)(a1 + 4) & 1))
									goto LABEL_56;
							}
						LABEL_57:
							v16++;
							v11++;
							LOBYTE(v9) = v9 - 1;
							if (!(x_BYTE)v9)
								goto LABEL_58;
						}
					}
					while (1)
					{
						if (*v16 >= 1u)
						{
							if (*v16 > 1u)
							{
								if (*v16 != 2)
									goto LABEL_49;
							LABEL_48:
								v18 = (*(x_BYTE *)(a1 + 4) & 2) == 0;
								goto LABEL_49;
							}
							if (!(*(x_BYTE *)(a1 + 4) & 1))
								goto LABEL_48;
						}
					LABEL_49:
						v16++;
						v11++;
						LOBYTE(v9) = v9 - 1;
						if (!(x_BYTE)v9)
						{
							v11 = (x_BYTE *)v32;
							v8 = v30;
							goto LABEL_22;
						}
					}
				}
				if ((x_WORD)v14)
				{
				LABEL_58:
					v11 = (x_BYTE *)v32;
					v8 = v30;
					continue;
				}
				while (1)
				{
					if (*v16 >= 1u)
					{
						if (*v16 > 1u)
						{
							if (*v16 != 2 || !(*(x_BYTE *)(a1 + 4) & 2))
								goto LABEL_41;
							v17 = *(x_BYTE *)(a1 + 7);
							goto LABEL_40;
						}
						if (*(x_BYTE *)(a1 + 4) & 1)
						{
							v17 = *(x_BYTE *)(a1 + 6);
						LABEL_40:
							*v11 = v17;
							goto LABEL_41;
						}
					}
				LABEL_41:
					v16++;
					v11++;
					LOBYTE(v9)--;
					if (!(x_BYTE)v9)
						goto LABEL_58;
				}
			}
			break;
		}
		if (*(x_BYTE *)v8 < 0)
		{
			LOWORD(v9) = (char)v9;
			v15 += v9;
			v9 = *(char *)v8++;
			v11 -= v9;
			continue;
		}
		break;
	}
	HIWORD(v19) = HIWORD(v34);
	LOWORD(v19) = v34 - 1;
	v18 = (x_WORD)v34 == 1;
	v34 = v19;
	if (!v18)
	{
		v11 = (x_BYTE *)v29;
		v9 = v35;
		v15 = v29 + v35;
		v8++;
		v29 += v35;
		LOWORD(v15) = v37;
		goto LABEL_68;
	}
	return v8;
}

//----- (00085AF0) --------------------------------------------------------
unsigned int *sub_85AF0(int a1)//266af0
{
	unsigned int *result; // eax
	unsigned int v2; // ecx

	result = *(unsigned int **)a1;
	if (*(x_DWORD *)a1 < *(x_DWORD *)(a1 + 4))
	{
		// FIXME: types
		// // do
		// {
		// 	v2 = *(x_DWORD *)(a1 + 8);
		// 	if (*result < v2)
		// 		*result += v2;
		// 	result = (unsigned int *)((char *)result + 6);
		// } while ((unsigned int)result < *(x_DWORD *)(a1 + 4));
	}
	return result;
}

//----- (00085B20) --------------------------------------------------------
int sub_85B20_copy_bitmap(x_BYTE *a1, x_WORD *a2, uint16_t a3)//266b20
{
	x_BYTE *v3; // esi
	x_WORD *v4; // edi
	int result; // eax
	int16_t v6; // bx
	int16_t v7; // cx
	int16_t v8; // ax
	x_BYTE *v9; // esi
	x_WORD *v10; // edi
	int16_t v11; // cx
	int16_t v12; // ax
	x_BYTE *v13; // esi
	x_WORD *v14; // edi
	signed int v15; // ecx
	x_BYTE *v16; // [esp-14h] [ebp-1Ch]
	int v17; // [esp+4h] [ebp-4h]

	//fix it
	v17 = 0;
	//fix it

	v3 = a1;
	v4 = a2;
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		sub_9A128_copy_screen_320(a1, a2, 0xC8u);
		result = v17;
	}
	else
	{
		v6 = a3 >> 1;
		do
		{
			v16 = v3;
			v7 = 40;
			do
			{
				LOBYTE(v8) = *v3;
				v9 = v3 + 1;
				HIBYTE(v8) = v8;
				*v4 = v8;
				v10 = v4 + 1;
				LOBYTE(v8) = *v9++;
				HIBYTE(v8) = v8;
				*v10 = v8;
				v10++;
				LOBYTE(v8) = *v9++;
				HIBYTE(v8) = v8;
				*v10 = v8;
				v10++;
				LOBYTE(v8) = *v9++;
				HIBYTE(v8) = v8;
				*v10 = v8;
				v10++;
				LOBYTE(v8) = *v9++;
				HIBYTE(v8) = v8;
				*v10 = v8;
				v10++;
				LOBYTE(v8) = *v9++;
				HIBYTE(v8) = v8;
				*v10 = v8;
				v10++;
				LOBYTE(v8) = *v9++;
				HIBYTE(v8) = v8;
				*v10 = v8;
				v10++;
				LOBYTE(v8) = *v9;
				v3 = v9 + 1;
				HIBYTE(v8) = v8;
				*v10 = v8;
				v4 = v10 + 1;
				--v7;
			} while (v7);
			v3 = v16;
			v11 = 40;
			do
			{
				LOBYTE(v12) = *v3;
				v13 = v3 + 1;
				HIBYTE(v12) = v12;
				*v4 = v12;
				v14 = v4 + 1;
				LOBYTE(v12) = *v13++;
				HIBYTE(v12) = v12;
				*v14 = v12;
				v14++;
				LOBYTE(v12) = *v13++;
				HIBYTE(v12) = v12;
				*v14 = v12;
				v14++;
				LOBYTE(v12) = *v13++;
				HIBYTE(v12) = v12;
				*v14 = v12;
				v14++;
				LOBYTE(v12) = *v13++;
				HIBYTE(v12) = v12;
				*v14 = v12;
				v14++;
				LOBYTE(v12) = *v13++;
				HIBYTE(v12) = v12;
				*v14 = v12;
				v14++;
				LOBYTE(v12) = *v13++;
				HIBYTE(v12) = v12;
				*v14 = v12;
				v14++;
				LOBYTE(v12) = *v13;
				v3 = v13 + 1;
				HIBYTE(v12) = v12;
				*v14 = v12;
				v4 = v14 + 1;
				v11--;
			} while (v11);
			v6--;
		} while (v6);
		if (a2 != (Bit16s*)&loc_A0000_vga_buffer && a3 >= 0x190u)
		{
			v15 = 12800;
			do
			{
				*(x_DWORD *)v4 = 0;
				v4 += 2;
				v15--;
			} while (v15);
		}
		result = v17;
	}
	return result;
}

//----- (00085BF5) --------------------------------------------------------
int sub_85BF5(x_BYTE *a1, int a2, int a3, int a4, int a5, int a6)//266bf5
{
	x_BYTE *v6; // esi
	x_BYTE *v7; // edi
	int v8; // edx
	int v9; // ecx
	int v11; // [esp+4h] [ebp-4h]

	//fix it
	v11 = 0;
	//fix it

	v6 = a1;
	v7 = (x_BYTE *)(a3 + 640 * a4 + a2);
	v8 = a6;
	do
	{
		v9 = a5;
		do
		{
			if (*v6 && *v6 != -1)
			{
				*v7++ = *v6++;
			}
			else
			{
				v6++;
				v7++;
			}
			v9++;
		} while (v9);
		v7 = &v7[-a5 + 640];
		v8--;
	} while (v8);
	return v11;
}

//----- (00085C42) --------------------------------------------------------
int sub_85C42(int a1, int a2, int a3, int a4, int a5, uint8_t a6)//266c42
{
	uint8_t *v6; // edi
	int v7; // edx
	int v8; // ecx
	int v10; // [esp+4h] [ebp-4h]

	//fix it
	v10 = 0;
	//fix it

	v6 = (uint8_t *)(a2 + 640 * a3 + a1);
	v7 = a5;
	do
	{
		v8 = a4;
		do
		{
			if (*v6 >= a6)
				*v6 = 0;
			++v6;
			--v8;
		} while (v8);
		v6 = &v6[-a4 + 640];
		--v7;
	} while (v7);
	return v10;
}

//----- (00085C8B) --------------------------------------------------------
void sub_85C8B_draw_new_game_map_background(Bit8u* a1, Bit8u* a2, int a3, int a4, int a5, int a6)//266c8b
{
	int v6; // edx
	char *v7; // edi
	char *v8; // esi

	v6 = a6;
	v7 = (char*)a2;
	v8 = (char *)(a3 + 1280 * a4 + a1);
	do
	{
		qmemcpy(v7, v8, 4 * a5);
		v7 += 4 * a5;
		v8 += 4 * a5 + 640;
		--v6;
	} while (v6);
}

//----- (00085CC3) --------------------------------------------------------
void sub_85CC3_draw_round_frame(Bit16u* buffer)//266cc3
{
	Bit16u* v3; // esi
	Bit8u* v4; // edi
	Bit16s v5; // edx
	uint16_t *v6; // ST04_4
	Bit16s v7; // ST02_2
	Bit8u* v8; // esi
	char v9; // al
	Bit8u* v10; // edx
	unsigned int v11; // ecx
	Bit8u* v12; // edi
	Bit8u* v13; // ebx
	char v14; // al
	int v15; // [esp-1Eh] [ebp-2Eh]
	Bit16s v16; // [esp-1Ah] [ebp-2Ah]
	Bit8u* v17; // [esp+0h] [ebp-10h]
	Bit8u* v18; // [esp+4h] [ebp-Ch]
	Bit8u* v19; // [esp+8h] [ebp-8h]
	int v20; // [esp+Ch] [ebp-4h]

	//fix it
	Bit16s a1 = 0;
	int a2 = 0;
	//fix it

	v3 = buffer;
	v4 = x_DWORD_180628b_screen_buffer;
	v19 = x_DWORD_180628b_screen_buffer + 306560;
	v17 = x_DWORD_180628b_screen_buffer + 640;
	v18 = x_DWORD_180628b_screen_buffer + 307200;
	v20 = 0;
	a2 = 240;
	do
	{
		while (1)
		{
			while (1)
			{
				v5 = *v3;
				v3++;
				if (v5 <= 0)
					break;
				a1 = v5;
				qmemcpy(v4, v3, v5);
				v10 = &v4[v5];
				qmemcpy(v19, v3, a1);
				v19 += a1;
				v16 = a1;
				v15 = a2;
				v11 = a1;
				v12 = v17;
				v13 = v18;
				do
				{
					v14 = *(Bit8u*)v3;
					*v12 = *(Bit8u*)v3;
					*v13 = v14;
					v3 = (Bit16u*)((Bit8u*)v3 + 1);
					v12--;
					v13--;
					v11--;
				} while (v11);
				v17 = v12;
				v18 = v13;
				v4 = v10;
				a2 = v15;
				a1 = v16;
			}
			if ((v5 & 0x8000u) == 0 && !v5)
				break;
			v5 = -v5;
			v4 += v5;
			v20 += a1 + v5;
			v19 += v5;
			v17 -= v5;
			v18 -= v5;
		}
		if (a2 > 221)
		{
			v6 = v3;
			v7 = a1;
			v8 = (Bit8u*)v3 - 3;
			v9 = *v8;
			*v4 = *v8;
			*v19 = v9;
			a1 = v7;
			v3 = v6;
		}
		v4 = &v4[0 - a1 + 640 - v20];
		v19 = &v19[0 - a1 - 640 - v20];
		v17 += v20 + a1 + 640;
		v18 = v20 + a1 + v18 - 640;
		v20 = 0;
		a2 = a2 - 1;
	} while (a2);
}

//----- (00085E40) --------------------------------------------------------
int sub_85E40()//266e40
{
	/*int16_t result; // ax

	if ( x_WORD_E2A24 )
	  return 1;
	x_DWORD_17FF10 = 4096;//ax
	x_DWORD_17FF0C = 256;//bx - size
	int386(49, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);
	x_WORD_E2A24 = x_DWORD_17FF0C;//2B3A24 AA0
	x_WORD_17FF5A = x_WORD_17FF18;//350F5A 1C8
	LOBYTE(result) = x_DWORD_17FF24 == 0;//desriptor
	HIBYTE(result) = 0;
	return result;*/
	int size = 0x1000;
	if (x_WORD_E2A24)//==0
		return 1;
	x_WORD_E2A24 = (Bit8u*)malloc(size * 16 * sizeof(Bit8u));
	return size & 0xff;
}

//----- (00085EB0) --------------------------------------------------------
int sub_85EB0_alloc_memory(int32_t a1)//266eb0 //malloc
{
	/*int16_t result; // ax

	LOWORD(x_DWORD_17FF10) = a1;
	LOWORD(x_DWORD_17FF0C) = 256;
	int386(49, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);
	if ( x_DWORD_17FF24 )
	  result = 0;
	else
	  result = x_DWORD_17FF0C;
	return result;*/

	// FIXME: types
	// x_DWORD_17FF0C = (int)malloc(a1 * 16 * sizeof(Bit8u));

	//if (x_DWORD_17FF0C > 0)return a1;
	return x_DWORD_17FF0C;
	//return (Bit8u*)malloc(a1*sizeof(Bit8u));
}

//----- (00085F00) --------------------------------------------------------
int16_t sub_85F00_free_memory(int16_t a1)//266f00
{
	/*int16_t result; // ax

	x_WORD_17FF18 = a1;
	LOWORD(x_DWORD_17FF0C) = 0x100;
	int386(49, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);
	if ( x_DWORD_17FF24 )
	  myprintf("fdm:error freeing %lx\n");
	LOBYTE(result) = x_DWORD_17FF24 == 0;
	HIBYTE(result) = 0;
	return result;*/

	//int16_t result; // ax
	free((void*)x_DWORD_17FF24);
	if (x_DWORD_17FF24)
	{
		myprintf("fdm:error freeing %lx\n");
		return 1;
	}
	return 0;
}

//----- (00085F60) --------------------------------------------------------
int sub_85F60(int a1)//266f60
{
	return 75 * BYTE1(a1) + 4500 * BYTE2(a1) + (uint8_t)a1;
}

//----- (00085FD0) --------------------------------------------------------
bool sub_85FD0()//266fd0
{
	//int v0; // ax
	// 2B3A6C - D5020000A11A0000
	//x_DWORD_E2A6C
	x_DWORD_E2A6C = sub_85EB0_alloc_memory(0x2);
	x_DWORD_E2A70 = sub_85EB0_alloc_memory(0x100);
	return x_DWORD_E2A6C && x_DWORD_E2A70;
}

//----- (00086010) --------------------------------------------------------
int sub_86010()//267010
{
	x_DWORD_17FF38 = 0;//nemeni se
	x_DWORD_17FF44 = 0x1500;//nemeni se
	x_DWORD_17FF0C = 0x300;//nemeni se
	x_DWORD_17FF10 = 0x2f;//nemeni se
	x_DWORD_17FF14 = 0;//nemeni se
	x_DWORD_17FF20 = x_DWORD_17FF28;//350f28 //nemeni se
	/*
	int386(49, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);
	*/
	if (x_DWORD_17FF10 == 0)x_DWORD_17FF38 = 0;

	x_WORD_1803EA = x_DWORD_17FF38;//0
	x_WORD_1803EC = x_DWORD_17FF40;//0
	return x_DWORD_17FF38;
}

//----- (00086180) --------------------------------------------------------
int16_t sub_86180(uint16_t a1)//267180
{
	int v1; // ecx
	int16_t result; // ax
	char *v3; // esi
	int v4; // ebx
	int16_t v5; // ax

	if (!x_DWORD_E2A6C)
		return 0;
	v1 = x_DWORD_E2A70;
	if (!x_DWORD_E2A70)
		return 0;
	v3 = (char *)(16 * x_DWORD_E2A6C);
	*v3 = 26;
	v3[1] = 0;
	v3[2] = 3;
	*(x_WORD *)(v3 + 3) = 0;
	v3[13] = 0;
	*((x_WORD *)v3 + 9) = 5;
	*((x_WORD *)v3 + 10) = 0;
	*(x_DWORD *)(v3 + 22) = 0;
	v4 = 16 * v1;
	*(x_DWORD *)(v3 + 14) = v1 << 16;
	v5 = x_DWORD_E2A6C;
	*(x_BYTE *)(16 * v1) = 6;
	x_WORD_17FF4A = v5;
	x_DWORD_17FF38 = 0;
	x_DWORD_17FF10 = 47;
	x_DWORD_17FF14 = 0;
	x_DWORD_17FF40 = a1;
	x_DWORD_17FF44 = 0x1510;
	x_DWORD_17FF0C = 0x300;
	x_DWORD_17FF20 = x_DWORD_17FF28;
	//int386(0x31, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);//return display params
	qmemcpy(unk_1803C0x, v3, 0x1Au);
	result = x_WORD_1803C3;
	unk_180498 = *(x_DWORD *)v4;
	*((x_BYTE *)&unk_180498 + 4) = *(x_BYTE *)(v4 + 4);
	return result;
}

//----- (00086270) --------------------------------------------------------
int16_t sub_86270(uint16_t a1)//267270
{
	int v1; // ecx
	int16_t result; // ax
	char *v3; // esi
	int v4; // ebx

	if (!x_DWORD_E2A6C)
		return 0;
	v1 = x_DWORD_E2A70;
	if (!x_DWORD_E2A70)
		return 0;
	v3 = (char *)(16 * x_DWORD_E2A6C);
	*v3 = 26;
	v3[1] = 0;
	v3[2] = 3;
	*(x_WORD *)(v3 + 3) = 0;
	v3[13] = 0;
	*((x_WORD *)v3 + 9) = 7;
	*((x_WORD *)v3 + 10) = 0;
	*(x_DWORD *)(v3 + 22) = 0;
	v4 = 16 * v1;
	*(x_DWORD *)(v3 + 14) = v1 << 16;
	*(x_BYTE *)(16 * v1) = 10;
	x_WORD_17FF58 = 0;
	x_WORD_17FF56 = 0;
	x_WORD_17FF4A = x_DWORD_E2A6C;
	x_DWORD_17FF38 = 0;
	x_DWORD_17FF14 = 0;
	x_DWORD_17FF10 = 47;
	x_DWORD_17FF40 = a1;
	x_DWORD_17FF44 = 0x1510;
	x_DWORD_17FF0C = 0x300;
	x_DWORD_17FF20 = x_DWORD_17FF28;
	//int386(0x31, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);//Return Physical Display Parms
	qmemcpy(unk_1803C0x, v3, 0x1Au);
	result = x_WORD_1803C3;
	*unk_180470ar = *(x_DWORD *)v4;
	*((x_WORD *)unk_180470ar + 2) = *(x_WORD *)(v4 + 4);
	*((x_BYTE *)unk_180470ar + 6) = *(x_BYTE *)(v4 + 6);
	return result;
}

//----- (00086370) --------------------------------------------------------
int16_t sub_86370(uint16_t a1, char a2)//267370
{
	int v2; // ecx
	int16_t result; // ax
	char *v4; // esi
	int v5; // ebx

	if (!x_DWORD_E2A6C)
		return 0;
	v2 = x_DWORD_E2A70;
	if (!x_DWORD_E2A70)
		return 0;
	v4 = (char *)(16 * x_DWORD_E2A6C);
	*v4 = 26;
	v4[1] = 0;
	v4[2] = 3;
	*(x_WORD *)(v4 + 3) = 0;
	v4[13] = 0;
	*((x_WORD *)v4 + 9) = 7;
	*((x_WORD *)v4 + 10) = 0;
	*(x_DWORD *)(v4 + 22) = 0;
	v5 = 16 * v2;
	*(x_DWORD *)(v4 + 14) = v2 << 16;
	*(x_BYTE *)v5 = 11;
	*(x_BYTE *)(v5 + 1) = a2;
	x_DWORD_17FF38 = 0;
	x_DWORD_17FF10 = 47;
	x_WORD_17FF4A = x_DWORD_E2A6C;
	x_DWORD_17FF14 = 0;
	x_DWORD_17FF40 = a1;
	x_DWORD_17FF44 = 0x1510;
	x_DWORD_17FF0C = 0x300;
	x_DWORD_17FF20 = x_DWORD_17FF28;
	//int386(0x31, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);//joystick, nebo grafika
	qmemcpy(unk_1803C0x, v4, 0x1Au);
	result = x_WORD_1803C3;
	*unk_180484ar = *(x_DWORD *)v5;
	*((x_WORD *)&unk_180484ar + 2) = *(x_WORD *)(v5 + 4);
	*((x_BYTE *)&unk_180484ar + 6) = *(x_BYTE *)(v5 + 6);
	return result;
}

//----- (00086460) --------------------------------------------------------
void sub_86460(Bit16u a1)//267460
{
	int v1; // ecx
	//int16_t result; // ax
	char *v3; // esi
	int v4; // ebx
	int16_t v5; // ax

	if (!x_DWORD_E2A6C)
		return;
	v1 = x_DWORD_E2A70;
	if (!x_DWORD_E2A70)
		return;
	v3 = (char *)(16 * x_DWORD_E2A6C);
	*v3 = 26;
	v3[1] = 0;
	v3[2] = 3;
	*(x_WORD *)(v3 + 3) = 0;
	v3[13] = 0;
	*((x_WORD *)v3 + 9) = 11;
	*((x_WORD *)v3 + 10) = 0;
	*(x_DWORD *)(v3 + 22) = 0;
	v4 = 16 * v1;
	*(x_DWORD *)(v3 + 14) = v1 << 16;
	v5 = x_DWORD_E2A6C;
	*(x_BYTE *)(16 * v1) = 12;
	x_WORD_17FF4A = v5;
	x_DWORD_17FF38 = 0;
	x_DWORD_17FF10 = 47;
	x_DWORD_17FF14 = 0;
	x_DWORD_17FF40 = a1;
	x_DWORD_17FF44 = 0x1510;
	x_DWORD_17FF0C = 0x300;
	x_DWORD_17FF20 = x_DWORD_17FF28;
	//int386(0x31, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);//joystick nebo grafika
	qmemcpy(unk_1803C0x, v3, 0x1Au);
	//result = x_WORD_1803C3;
	*unk_18048Bar = *(x_DWORD *)v4;
	*((x_DWORD *)&unk_18048Bar + 1) = *(x_DWORD *)(v4 + 4);
	*((x_WORD *)&unk_18048Bar + 4) = *(x_WORD *)(v4 + 8);
	*((x_BYTE *)&unk_18048Bar + 10) = *(x_BYTE *)(v4 + 10);
	//return result;
}

//----- (00086550) --------------------------------------------------------
int sub_86550()//267550
{
	/*x_DWORD_17FF38 = 0;
	x_DWORD_17FF44 = 5388;
	x_DWORD_17FF0C = 768;
	x_DWORD_17FF10 = 47;
	x_DWORD_17FF14 = 0;
	x_DWORD_17FF20 = (int)&unk_17FF28;
	int386(49, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);
	return x_DWORD_17FF38;*/
	// FIXME: types
	// return (int)malloc(768 * sizeof(Bit8u));
}

//----- (00086780) --------------------------------------------------------
char sub_86780(uint16_t a1, int a2, int a3)//267780
{
	char *v4; // esi

	if (!x_BYTE_E2A28_speek)
		return 0;
	if (!x_DWORD_E2A6C || !x_DWORD_E2A70)
		return 0;
	v4 = (char *)(16 * x_DWORD_E2A70);
	*v4 = 22;
	v4[1] = 0;
	v4[2] = -124;
	*(x_WORD *)(v4 + 3) = 0;
	v4[13] = 0;
	*(x_DWORD *)(v4 + 14) = a2;
	*(x_DWORD *)(v4 + 18) = a3;
	x_DWORD_17FF38 = 0;
	x_DWORD_17FF10 = 47;
	x_DWORD_17FF14 = 0;
	x_WORD_17FF4A = x_DWORD_E2A70;
	x_DWORD_17FF20 = x_DWORD_17FF28;
	x_DWORD_17FF40 = a1;
	x_DWORD_17FF0C = 0x300;
	x_DWORD_17FF44 = 0x1510;
	//int386(0x31, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);//joystick nebo grafika
	qmemcpy(unk_1803A8x, v4, 0x16u);
	return x_WORD_1803AB;
}

//----- (00086860) --------------------------------------------------------
char sub_86860_speak_Sound(uint16_t a1)//267860
{
	int v2; // esi
	int16_t v3; // ax

	if (!x_BYTE_E2A28_speek)
		return 0;
	if (!x_DWORD_E2A6C || !x_DWORD_E2A70)
		return 0;
	v2 = 16 * x_DWORD_E2A70;
	*(x_BYTE *)v2 = 13;
	v3 = x_DWORD_E2A70;
	*(x_BYTE *)(v2 + 1) = 0;
	*(x_BYTE *)(v2 + 2) = -123;
	*(x_WORD *)(v2 + 3) = 0;
	x_WORD_17FF4A = v3;
	x_DWORD_17FF38 = 0;
	x_DWORD_17FF10 = 47;
	x_DWORD_17FF14 = 0;
	x_DWORD_17FF20 = x_DWORD_17FF28;
	x_DWORD_17FF40 = a1;
	x_DWORD_17FF0C = 0x300;
	x_DWORD_17FF44 = 0x1510;
	//int386(0x31, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);//Return Physical Display Parms
	*unk_180452ar = *(x_DWORD *)v2;
	v2 += 4;
	*((x_DWORD *)unk_180452ar + 1) = *(x_DWORD *)v2;
	v2 += 4;
	*((x_DWORD *)unk_180452ar + 2) = *(x_DWORD *)v2;
	*((x_BYTE *)unk_180452ar + 12) = *(x_BYTE *)(v2 + 4);
	return x_WORD_180455;
}

//----- (00086930) --------------------------------------------------------
char sub_86930(uint16_t a1)//267930
{
	int v2; // esi
	int16_t v3; // ax

	if (!x_BYTE_E2A28_speek)
		return 0;
	if (!x_DWORD_E2A6C || !x_DWORD_E2A70)
		return 0;
	v2 = 16 * x_DWORD_E2A70;
	*(x_BYTE *)v2 = 13;
	v3 = x_DWORD_E2A70;
	*(x_BYTE *)(v2 + 1) = 0;
	*(x_BYTE *)(v2 + 2) = -120;
	*(x_WORD *)(v2 + 3) = 0;
	x_WORD_17FF4A = v3;
	x_DWORD_17FF38 = 0;
	x_DWORD_17FF10 = 47;
	x_DWORD_17FF14 = 0;
	x_DWORD_17FF20 = x_DWORD_17FF28;
	x_DWORD_17FF40 = a1;
	x_DWORD_17FF0C = 0x300;
	x_DWORD_17FF44 = 0x1510;
	//int386(0x31, (REGS*)&x_DWORD_17FF0C, (REGS*)&x_DWORD_17FF0C);
	*unk_180460ar = *(x_DWORD *)v2;
	v2 += 4;
	*((x_DWORD *)unk_180460ar + 1) = *(x_DWORD *)v2;
	v2 += 4;
	*((x_DWORD *)unk_180460ar + 2) = *(x_DWORD *)v2;
	*((x_BYTE *)unk_180460ar + 12) = *(x_BYTE *)(v2 + 4);
	return x_WORD_180463;
}

//----- (00086A00) --------------------------------------------------------
void sub_86A00_some_allocs()//267a00
{
	//int result; // eax
	int v1; // ebx
	int v2x; // ebx
	uint16_t v2; // bx
	int v3; // esi
	int v4; // ST04_4
	int16_t v5; // bx
	uint16_t i; // ax
	int v7; // edi
	uint16_t v8; // bx
	int v9; // eax
	uint16_t v10; // bx
	int v11; // esi
	int v12; // eax
	uint16_t v13; // ax
	int v14; // edx
	int v15; // ecx

	//sub_85E40();
	//v0 = malloc(1000 * sizeof(Bit8u));//
	//result =sub_85FD0();// fix it//2B3A6C - D5020000A11A0000

	if (sub_85FD0())//v0=1
	{
		if (sub_86010())
		{
			sub_86550();
			v1 = 0;
			while (1)
			{
				v2x = sub_86270((uint16_t)x_WORD_1803EC);
				if ((v2x & 0x8000) == 0)
					break;
				j___delay(1000);
				if ((_WORD)++v1 == 4)
					sub_86BD0_freemem1();
			}
			x_BYTE_1804A1 = x_BYTE_180471;
			v2 = (uint8_t)x_BYTE_180471;
			x_BYTE_18049E = x_BYTE_180472;
			while (v2 <= (signed int)(uint8_t)x_BYTE_180472)
			{
				sub_86370(x_WORD_1803EC, v2);
				v3 = v2;
				v4 = x_DWORD_180486;
				x_BYTE_1803EE[v2++] = (x_BYTE_18048A & 0x40) == 0;
				x_DWORD_180084[v3] = sub_85F60(v4);
			}
			v5 = 0;
			for (i = (uint8_t)x_BYTE_180471; i <= (signed int)(uint8_t)x_BYTE_180472; i++)
			{
				if (x_BYTE_1803EE[i])
					v5 = 1;
			}
			if (v5)
			{
				v7 = x_DWORD_180084[1];
				v8 = (uint8_t)x_BYTE_180471;
				while (1)
				{
					v9 = v8;
					if (v8 > (signed int)(uint8_t)x_BYTE_180472)
						break;
					++v8;
					x_DWORD_180084[v9] -= v7;
				}
				v10 = (uint8_t)x_BYTE_180471;
				while (v10 <= (signed int)(uint8_t)x_BYTE_180472)
				{
					v11 = v10;
					if (v10 == (uint8_t)x_BYTE_180472)
						v12 = sub_85F60(x_DWORD_180473) - v7;
					else
						v12 = x_DWORD_180084[1 + v11];
					x_DWORD_180214[v11] = v12;
					v13 = v10;
					v14 = x_DWORD_180084[v10];
					v15 = x_DWORD_180214[v10++];
					x_DWORD_180214[v13] = v15 - v14;
				}
				sub_86460(x_WORD_1803EC);
				x_BYTE_E2A28_speek = 1;
			}
			else
			{
				sub_86BD0_freemem1();
			}
		}
		else
		{
			sub_86BD0_freemem1();//23759B - 264CD0
		}
	}
	//return result;
}

//----- (00086BD0) --------------------------------------------------------
bool sub_86BD0_freemem1()//267bd0
{
	char result; // al
	result = 1;//fix it
	if (x_DWORD_E2A6C)//2B3A6C - D5020000A11A0000
		result = sub_85F00_free_memory(x_DWORD_E2A6C);//264CDC - 266070 
	if (x_DWORD_E2A70)
		result = sub_85F00_free_memory(x_DWORD_E2A70);
	x_BYTE_E2A28_speek = 0;
	x_DWORD_E2A6C = 0;
	x_DWORD_E2A70 = 0;
	return result;
}

//----- (00086EA0) --------------------------------------------------------
void sub_86EA0(/*int a1, int a2, int a3*/ HMDIDRIVER user)//267ea0
{
	// FIXME: types
	// sub_47760(/*a1, */(Bit32u)user/*, a3*/);
	//return 0;
}

//----- (00086EB0) --------------------------------------------------------
void sub_86EB0(uint8_t a1, uint8_t a2, char a3)//267eb0
{
	int v3; // eax
	uint8_t v4; // dl
	int v5; // eax
	int16_t v6; // bx
	int16_t v7; // ax

	v3 = 42 * a1;
	v4 = x_BYTE_DB080[v3];
	v5 = 4 * a2 + v3;
	v6 = *(int16_t *)((char *)&x_BYTE_DB080[2] + v5);
	v7 = *(int16_t *)((char *)&x_BYTE_DB080[4] + v5);
	if (v4 && v7)
	{
		if (a3)
			sub_86F70_sound_proc12(v4, v6, v7);
		else
			sub_86FF0(v4, v6, v7);
	}
}

//----- (00086F20) --------------------------------------------------------
void sub_86F20(char a1)//267f20
{
	int v1; // eax
	uint8_t v2; // dl
	int16_t v3; // bx
	int16_t v4; // ax

	v1 = 21 * ((a1 != 0) + 25);
	v2 = x_BYTE_DB080[v1 * 2];
	v3 = *(Bit16s*)&x_BYTE_DB080[2+v1*2];
	v4 = *(Bit16s*)&x_BYTE_DB080[4+v1*2];
	if (v2)
	{
		if (v4)
			sub_86F70_sound_proc12(v2, v3, v4);
	}
}

//----- (00086F70) --------------------------------------------------------
void sub_86F70_sound_proc12(uint8_t a1, int16_t a2, int16_t a3)//267f70
{
	if (x_BYTE_E2A28_speek && (x_BYTE_E37FC_music || x_BYTE_E3798_sound_active2))
	{
		//x_DWORD_180078 = sub_92600_AIL_register_timer(sub_86EA0);
		//sub_92930_AIL_set_timer_frequency(x_DWORD_180078, 0x32u);
		//sub_92BA0_AIL_start_timer(x_DWORD_180078);
		sub_86FF0(a1, a2, a3);
		//sub_92DC0_AIL_release_timer_handle(x_DWORD_180078);
	}
}

//----- (00086FF0) --------------------------------------------------------
void sub_86FF0(uint8_t a1, int16_t a2, int16_t a3)//267ff0
{
	if (x_BYTE_E2A28_speek && (x_BYTE_E37FC_music || x_BYTE_E3798_sound_active2))
	{
		x_WORD_1803E8 = a1;
		sub_86860_speak_Sound(x_WORD_1803EC);
		if ((uint16_t)x_WORD_1803E8 >= (signed int)(uint8_t)x_BYTE_1804A1
			&& (uint16_t)x_WORD_1803E8 <= (signed int)(uint8_t)x_BYTE_18049E)
		{
			if (x_BYTE_1803EE[(uint16_t)x_WORD_1803E8])
				sub_86780(x_WORD_1803EC, x_DWORD_180084[(uint16_t)x_WORD_1803E8] + a2, a3);
		}
	}
}

//----- (00087090) --------------------------------------------------------
void sub_87090()//268090
{
	signed int i; // edx
	Bit8u* result; // al
	//Bit8u* v2; // eax
	int v2x;
	int v3; // edx

	memset(&str_unk_1804B0ar, 0, 171);
	for (i = 1; i < 120 && !str_unk_1804B0ar.dword_0x66; i++)
	{
		//if (!*(Bit16s*)&array_E2A74[30 * i])
		if (!str_E2A74[i].word_0)
			str_unk_1804B0ar.dword_0x66 = i - 1;
	}
	result = (Bit8u*)sub_871E0();
	if (result)
	{
		str_unk_1804B0ar.byte_0xa2 = 1;
		str_unk_1804B0ar.type_sub_0[0].word_0x10 = 8;
		str_unk_1804B0ar.type_sub_0[0].word_0x12 = 14;
		str_unk_1804B0ar.type_sub_0[0].word_0xe = 400;
		str_unk_1804B0ar.type_sub_0[0].word_0x16 = 600;
		str_unk_1804B0ar.type_sub_0[0].word_0x18 = 80;
		str_unk_1804B0ar.type_sub_0[0].word_0x1a = 260;
		str_unk_1804B0ar.type_sub_0[0].word_0x14 = 40;
		str_unk_1804B0ar.type_sub_0[1] = str_unk_1804B0ar.type_sub_0[0];
		//qmemcpy(&unk_1804B0ar[0x33], unk_1804B0ar, 0x30u);
		//qmemcpy(&unk_1804B0ar[0x33+0x30], &str_unk_1804B0ar.type_sub_0[0].byte_0x30, 3u);
		//v2 = &array_E2A74[0x1e];
		v2x = 0;
		str_unk_1804B0ar.type_sub_0[1].word_0x1a = 370;
		str_unk_1804B0ar.type_sub_0[1].word_0x14 = 30;
		str_unk_1804B0ar.type_sub_0[1].word_0x16 = 610;
		str_unk_1804B0ar.type_sub_0[1].word_0x18 = 30;
		v3 = 0;
		while (v3 < str_unk_1804B0ar.dword_0x66)
		{
			/* *(Bit32s*)&v2[16] = *(Bit32s*)&v2[24];
			if (!v2[29])
				v2[29] = v2[28];
			v2 += 30;
			*(Bit8u*)(v2 - 18) = 0;
			v3++;
			*(Bit8u*)(v2 - 10) = 0;*/
			str_E2A74[v2x].dword_16 = str_E2A74[v2x].dword_24;
			if (!str_E2A74[v2x].byte_29)
				str_E2A74[v2x].byte_29 = str_E2A74[v2x].byte_28;
			str_E2A74[v2x].dword_12 = 0;
			str_E2A74[v2x].dword_20 = 0;
			v3++;
			v2x++;
		}
		str_unk_1804B0ar.dword_0x82 = D41A0_BYTESTR_0.dword_0x8;
		/*result = */sub_88B20();
	}
	//return result;
}

//----- (000871E0) --------------------------------------------------------
char sub_871E0()//2681e0
{
	return 1;
}

//----- (000871F0) --------------------------------------------------------
void sub_871F0()//2681f0
{
	//Bit8u* v0; // eax
	char v1; // bl
	//int v2; // eax
	//int v4; // eax

	/*v0 = (Bit8u*)*/sub_872A0();
	//BYTE1(v0) = *(Bit16s*)&str_unk_1804B0ar.byte_0x9e;
	v1 = 1;
	if (str_unk_1804B0ar.byte_0x9e & 0x10)
	{
		/*v0 = (Bit8u*)*/sub_87C10();
	}
	else
	{
		if (str_unk_1804B0ar.byte_0x9f & 0x20 || str_unk_1804B0ar.byte_0x9f & 0x10)
			v1 = 0;
		if (str_unk_1804B0ar.byte_0x9e & 2 || str_unk_1804B0ar.byte_0x9f & 0x8)
			v1 = 1;
		if (v1)
		{
			if (str_unk_1804B0ar.word_0x86)
			{
				sub_87610();
				sub_87B30();
			}
			else if (--str_unk_1804B0ar.dword_0x72 <= 0)
			{
				sub_87580();
			}
			/*v0 = */sub_87B70();
		}
		else
		{
			if (str_unk_1804B0ar.byte_0x9f & 0x10)
			{
				/*v2 = */sub_87A30();
				return;
				//return _wcpp_1_unwind_leave__132(0/*v2*/);
			}
			if (str_unk_1804B0ar.byte_0x9f & 0x20)
			{
				/*v4 = */sub_87860();
				return;
				//return _wcpp_1_unwind_leave__132(0/*v4*/);
			}
		}
	}
	//return _wcpp_1_unwind_leave__132(0/*(x_DWORD)v0*/);
}

//----- (000872A0) --------------------------------------------------------
void sub_872A0()//2682a0
{
	//int v0; // edx
	uint8_t v1; // al
	type_str_0x6E8E* v2x; // esi
	char v3; // dh
	//int v4; // ebx
	int v5; // edx
	//int v6; // ebx
	int v7; // eax
	//char v8; // cl
	//char v9; // bh
	//int result; // eax
	//char v11; // ch
	//int16_t v12; // cx
	int v13; // ebx
	//debug
	/*if (str_unk_1804B0ar.word_0x86==0x51)
		v0 = 0;*/
	//debug
	//v0 = 2124 * D41A0_BYTESTR_0.word_0xc;
	v1 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221;
	v2x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	if (v1 < 6u || v1 > 8u)
		str_unk_1804B0ar.byte_0x9e &=  0xFA;
	else
		str_unk_1804B0ar.byte_0x9e |= 5;
	*(Bit16s*)&str_unk_1804B0ar.byte_0x9e &= 0xC7FDu;
	v3 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221;
	if (v3 != 5 && v3 != 8)
	{
		str_unk_1804B0ar.dword_0x6e = 20;
		str_unk_1804B0ar.byte_0xa4 = 0;
		str_unk_1804B0ar.byte_0xa5 = -1;
	}
	else
	{
		str_unk_1804B0ar.byte_0x9e |= 2;
		//v4 = v2x->dword_0xA4_164;
		str_unk_1804B0ar.dword_0x6e = 6;
		v5 = v2x->dword_0xA4_164x->str_611.byte_0x458_1112;
		//v6 = v4 + 611;
		if (v5 != (uint8_t)str_unk_1804B0ar.byte_0xa5 || v2x->dword_0xA4_164x->str_611.byte_0x459_1113 != str_unk_1804B0ar.byte_0xa6)
		{
			v7 = x_BYTE_D94FF_spell_index[v2x->dword_0xA4_164x->str_611.byte_0x458_1112];
			if ((uint8_t)str_unk_1804B0ar.byte_0xa4 > 1u || !v2x->dword_0xA4_164x->str_611.array_0x333_819x.word[v7] || !x_BYTE_D41B6 && v7 == 25)
				sub_87C10();
			str_unk_1804B0ar.byte_0xa4 = 0;
			sub_88D40();
			str_unk_1804B0ar.dword_0x76 = 0;
		}
		str_unk_1804B0ar.byte_0xa5 = v2x->dword_0xA4_164x->str_611.byte_0x458_1112;
		str_unk_1804B0ar.byte_0xa6 = v2x->dword_0xA4_164x->str_611.byte_0x459_1113;
	}
	if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221 == 7)
	{
		str_unk_1804B0ar.byte_0x9f |= 8u;
	}
	else if (str_E2A74[str_unk_1804B0ar.word_0x86].word_0 == 12)
	{
		sub_87C10();
	}
	if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
		str_unk_1804B0ar.byte_0x9f |= 0x20u;
	if (D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221 == 3)
		str_unk_1804B0ar.byte_0x9f |= 0x10u;
	if (v2x->word_0x82_130)
		str_unk_1804B0ar.uni_0x8a.dword[0] = 0;
	else
		(str_unk_1804B0ar.uni_0x8a.dword[0])++;
	//v8 = str_unk_1804B0ar.byte_0x9f & 0xFB;
	str_unk_1804B0ar.byte_0x9f &= 0xFBu;
	if (v2x->byte_0x45_69 == 3)
		str_unk_1804B0ar.byte_0x9f = str_unk_1804B0ar.byte_0x9f | 4;
	str_unk_1804B0ar.byte_0x9e &= 0xEF;
	if (D41A0_BYTESTR_0.byte_0x36E04
		|| x_D41A0_BYTEARRAY_4_struct.byteindex_225
		|| v2x->byte_0x45_69 == 12
		|| v2x->byte_0x45_69 == 11
		|| D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221==13
		|| D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221 == 14)
	{
		//result = str_unk_1804B0ar.dword_0x6e;
		str_unk_1804B0ar.dword_0x72 = str_unk_1804B0ar.dword_0x6e;
		str_unk_1804B0ar.byte_0x9e |= 0x10;
	}
	if (str_unk_1804B0ar.word_0x86)
	{
		//adress 268509
		//result = 30 * str_unk_1804B0ar.word_0x86;
		//v12 = *(Bit16s*)&array_E2A74[30 * str_unk_1804B0ar.word_0x86]/* + result)*/;
		if (str_E2A74[str_unk_1804B0ar.word_0x86].word_0 == 2 || str_E2A74[str_unk_1804B0ar.word_0x86].word_0 == 8)
		{
			//if (!(str_unk_1804B0ar.byte_0x9f & 0x2)
			//	|| (/*result = 30 * str_unk_1804B0ar.word_0x86, */(Bit8s)array_E2A74[0x2+30 * str_unk_1804B0ar.word_0x86] >= 0)
			//	&& ((v13 = *(Bit32s*)&array_E2A74[0xc + 30 * str_unk_1804B0ar.word_0x86]) == 0
			//		|| /*(result = *(Bit32s*)&array_E2A74[0xc + 30 * str_unk_1804B0ar.word_0x86],*/ *(x_DWORD *)(v13 + 8) < 0/*)*/
			//		|| *(x_BYTE *)(v13 + 13) & 4))
			if (!(str_unk_1804B0ar.byte_0x9f & 0x2)
				|| ((Bit8s)str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[0] >= 0)
				&& (str_E2A74[str_unk_1804B0ar.word_0x86].dword_12 == 0
					|| str_E2A74[str_unk_1804B0ar.word_0x86].dword_20 < 0
					|| str_E2A74[str_unk_1804B0ar.word_0x86].dword_24 & 0x400))
			{
				/*result = */sub_87C10();
			}
		}
		if (v2x->byte_0x45_69 == 2)
			/*result = */sub_87C10();
	}
	//return result;
}

int debugcounter_sub_87580 = 0;
//----- (00087580) --------------------------------------------------------
void sub_87580()//268580
{
	int v0; // eax

	sub_87BE0();
	if (str_unk_1804B0ar.byte_0x9f & 0x4)
	{
		//sub_884D0(91, 1, &array_E2A74[0xaae], 1, 0);
  		sub_884D0(91, 1, &str_E2A74[0x5b].axis_2[1], 1, 0);
	}
	else if (str_unk_1804B0ar.byte_0x9e & 0x2)
	{
		sub_88D40();
	}
	else if (str_unk_1804B0ar.byte_0x9f & 0x8)
	{
		sub_89360();
	}
	else
	{
		sub_87CF0();
		
		//adress 2685a7
		/*Bit8u origbyte2z=0;
		Bit8u remakebyte2z=0;
		//Bit8u origbyte2y[100];
		//Bit8u remakebyte2y[100];
		//int remakepos2y[100];
		int comp20 = compare_with_sequence_array_E2A74((char*)"002685A7-002B3A74", (Bit8u*)&array_E2A74, 0x2B3A74, debugcounter_sub_87580, 0xc4e, 0xc4e, &origbyte2z, &remakebyte2z);
		*/
		
		

		v0 = sub_88450();

		/*
		//adress 2685ac
		Bit8u origbyte2z=0;
		Bit8u remakebyte2z=0;
		//Bit8u origbyte2y[100];
		//Bit8u remakebyte2y[100];
		//int remakepos2y[100];
		int comp20 = compare_with_sequence_array_E2A74((char*)"002685AC-002B3A74", (Bit8u*)&array_E2A74, 0x2B3A74, debugcounter_sub_87580, 0xc4e, 0xc4e, &origbyte2z, &remakebyte2z);
		*/

		debugcounter_sub_87580++;
		//sub_884D0(v0, 1, &array_E2A74[30 * v0 + 4], ((array_E2A74[0x2 + 30 * v0] & 4) == 0) + 1, 0);
		sub_884D0(v0, 1, &str_E2A74[v0].axis_2[1], ((str_E2A74[v0].axis_2[0] & 4) == 0) + 1, 0);
	}
}

int debugcounter_sub_87610 = 0;

//----- (00087610) --------------------------------------------------------
void sub_87610()//268610
{
	char* v0; // edi
	//int16_t *v1; // esi
	//char result; // al
	//int16_t v3; // ax
	signed int v4; // esi
	int v5; // edi
	uint8_t v6; // al
	//x_BYTE *v7; // ST04_4
	char v8; // [esp+0h] [ebp-80h]

	/*Bit8u origbyte20 = 0;
	Bit8u remakebyte20 = 0;
	int comp20;

	comp20 = compare_with_sequence((char*)"00268610-003514B0", (Bit8u*)&str_unk_1804B0ar, 0x3514b0, debugcounter_sub_87610, 0xab, 0xab, &origbyte20, &remakebyte20);
	debugcounter_sub_87610++;
	*/

	v0 = (char*)x_DWORD_E9C4C_langindexbuffer[str_unk_1804B0ar.uni_0x8a.word[2]];

	//if (str_unk_1804B0ar.uni_0x8a.word[2] == 331)
//		str_unk_1804B0ar.uni_0x8a.word[2] = 331;

	//if ((v0[0] == 'Z') && (v0[1] == 'k'))
		//v0 = v0;
	//Your current objective is to fly to a point
	//v1 = (Bit16s*)&array_E2A74[30 * str_unk_1804B0ar.word_0x86];
	//if (*((_BYTE*)v1 + 3) & 1)
	if(str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[0]&0x100)
	{
		v0 = &v8;
		// FIXME: types
		// sub_89AC0(&v8, str_unk_1804B0ar.word_0x86);
	}
	str_unk_1804B0ar.type_sub_0[0].byte_0x30 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
	str_unk_1804B0ar.type_sub_0[0].byte_0x31 = (*xadataclrd0dat.var28_begin_buffer)[0];
	str_unk_1804B0ar.type_sub_0[0].byte_0x32 = (*xadataclrd0dat.var28_begin_buffer)[0xf00];
	//result = str_unk_1804B0ar.byte_0xa3;
	switch (str_unk_1804B0ar.byte_0xa3) {
		case 1:{
			if (*(Bit16s*)& str_unk_1804B0ar.byte_0x9e & 8)
			{
				str_unk_1804B0ar.type_sub_0[0].word_0x0 = 320;
				str_unk_1804B0ar.type_sub_0[0].word_0x2 = 80;
				str_unk_1804B0ar.type_sub_0[0].word_0xc = 320;
				sub_89420(&str_unk_1804B0ar.type_sub_0[0], v0);
				sub_89520(&str_unk_1804B0ar.type_sub_0[0]);
				sub_89980(&str_unk_1804B0ar.type_sub_0[0]);
			}
			sub_2E790(
				str_unk_1804B0ar.type_sub_0[0].word_0x24,
				str_unk_1804B0ar.type_sub_0[0].word_0x26,
				str_unk_1804B0ar.type_sub_0[0].word_0x28,
				str_unk_1804B0ar.type_sub_0[0].word_0x2a,
				str_unk_1804B0ar.type_sub_0[0].byte_0x31);
			sub_895D0_draw_textbox(&str_unk_1804B0ar.type_sub_0[0], v0);
			sub_89690_draw_frame(&str_unk_1804B0ar.type_sub_0[0]);
			str_unk_1804B0ar.byte_0x9e &= 0xF7;
			break;
		}
		case 2:
		{
			str_unk_1804B0ar.type_sub_0[0].word_0x1c = str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[3];
			str_unk_1804B0ar.type_sub_0[0].word_0xc = 220;
			str_unk_1804B0ar.type_sub_0[0].word_0x1e = str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[4];
			if (str_unk_1804B0ar.byte_0x9e & 0x8)
			{
				sub_89830(&str_unk_1804B0ar.type_sub_0[0]);//here
				sub_89420(&str_unk_1804B0ar.type_sub_0[0], v0);
				sub_89520(&str_unk_1804B0ar.type_sub_0[0]);
				sub_89980(&str_unk_1804B0ar.type_sub_0[0]);
			}
			sub_898A0(&str_unk_1804B0ar.type_sub_0[0]);
			sub_2E790(
				str_unk_1804B0ar.type_sub_0[0].word_0x24,
				str_unk_1804B0ar.type_sub_0[0].word_0x26,
				str_unk_1804B0ar.type_sub_0[0].word_0x28,
				str_unk_1804B0ar.type_sub_0[0].word_0x2a,
				str_unk_1804B0ar.type_sub_0[0].byte_0x31);
			sub_895D0_draw_textbox(&str_unk_1804B0ar.type_sub_0[0], v0);
			sub_89A30_draw_line(&str_unk_1804B0ar.type_sub_0[0]);
			sub_89690_draw_frame(&str_unk_1804B0ar.type_sub_0[0]);
			str_unk_1804B0ar.byte_0x9e &= 0xF7;
			break;
		}
		case 3:
		{
			str_unk_1804B0ar.type_sub_0[0].word_0x1c = str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[3];//3
			str_unk_1804B0ar.type_sub_0[0].word_0x1e = str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[4];
			sub_89830(&str_unk_1804B0ar.type_sub_0[0]);
			sub_89920(&str_unk_1804B0ar.type_sub_0[0], str_unk_1804B0ar.byte_0xa0, &str_unk_1804B0ar.uni_0x8a.word[2]);
			sub_89520(&str_unk_1804B0ar.type_sub_0[0]);
			sub_89980(&str_unk_1804B0ar.type_sub_0[0]);
			sub_898A0(&str_unk_1804B0ar.type_sub_0[0]);
			v4 = 0;
			sub_2E790(
				str_unk_1804B0ar.type_sub_0[0].word_0x24,
				str_unk_1804B0ar.type_sub_0[0].word_0x26,
				str_unk_1804B0ar.type_sub_0[0].word_0x28,
				str_unk_1804B0ar.type_sub_0[0].word_0x2a,
				str_unk_1804B0ar.type_sub_0[0].byte_0x31);
			v5 = str_unk_1804B0ar.type_sub_0[0].word_0xa;
			while (v4 < str_unk_1804B0ar.byte_0xa0)
			{
				if (v4 == str_unk_1804B0ar.byte_0xa1)
					v6 = str_unk_1804B0ar.type_sub_0[0].byte_0x32;
				else
					v6 = str_unk_1804B0ar.type_sub_0[0].byte_0x30;
				//FireBall,Rapid Fire,Fire Storm
				sub_2BC10_draw_text(x_DWORD_E9C4C_langindexbuffer[str_unk_1804B0ar.uni_0x8a.word[2 + v4++]], str_unk_1804B0ar.type_sub_0[0].word_0x8, v5, v6);
				v5 += str_unk_1804B0ar.type_sub_0[0].word_0x12;
			}
			sub_89A30_draw_line(&str_unk_1804B0ar.type_sub_0[0]);
			sub_89690_draw_frame(&str_unk_1804B0ar.type_sub_0[0]);
			str_unk_1804B0ar.byte_0x9e &= 0xF7;
			break;
		}
		default:
		{
			str_unk_1804B0ar.byte_0x9e &= 0xF7;
			break;
		}
	}
	/*
	if (str_unk_1804B0ar.byte_0xa3 >= 2u)
	{
		if (str_unk_1804B0ar.byte_0xa3 <= 2u)//2
		{
			str_unk_1804B0ar.type_sub_0[0].word_0x1c = str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[3];
			//v3 = v1[5];
			str_unk_1804B0ar.type_sub_0[0].word_0xc = 220;
			str_unk_1804B0ar.type_sub_0[0].word_0x1e = str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[4];
			if (str_unk_1804B0ar.byte_0x9e & 0x8)
			{
				sub_89830(&str_unk_1804B0ar.type_sub_0[0]);//here
				sub_89420(&str_unk_1804B0ar.type_sub_0[0], v0);
				sub_89520(&str_unk_1804B0ar.type_sub_0[0]);
				sub_89980(&str_unk_1804B0ar.type_sub_0[0]);
			}
			sub_898A0(&str_unk_1804B0ar.type_sub_0[0]);
			sub_2E790(
				str_unk_1804B0ar.type_sub_0[0].word_0x24,
				str_unk_1804B0ar.type_sub_0[0].word_0x26,
				str_unk_1804B0ar.type_sub_0[0].word_0x28,
				str_unk_1804B0ar.type_sub_0[0].word_0x2a,
				str_unk_1804B0ar.type_sub_0[0].byte_0x31);
			sub_895D0_draw_textbox(&str_unk_1804B0ar.type_sub_0[0], v0);
		}
		else
		{
			if (str_unk_1804B0ar.byte_0xa3 != 3)
			{
				str_unk_1804B0ar.byte_0x9e &= 0xF7;
				return;
			}
			str_unk_1804B0ar.type_sub_0[0].word_0x1c = str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[3];//3
			str_unk_1804B0ar.type_sub_0[0].word_0x1e = str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[4];
			sub_89830(&str_unk_1804B0ar.type_sub_0[0]);
			sub_89920(&str_unk_1804B0ar.type_sub_0[0], str_unk_1804B0ar.byte_0xa0, &str_unk_1804B0ar.uni_0x8a.word[2]);
			sub_89520(&str_unk_1804B0ar.type_sub_0[0]);
			sub_89980(&str_unk_1804B0ar.type_sub_0[0]);
			sub_898A0(&str_unk_1804B0ar.type_sub_0[0]);
			v4 = 0;
			sub_2E790(
				str_unk_1804B0ar.type_sub_0[0].word_0x24,
				str_unk_1804B0ar.type_sub_0[0].word_0x26,
				str_unk_1804B0ar.type_sub_0[0].word_0x28,
				str_unk_1804B0ar.type_sub_0[0].word_0x2a,
				str_unk_1804B0ar.type_sub_0[0].byte_0x31);
			v5 = str_unk_1804B0ar.type_sub_0[0].word_0xa;
			while (v4 < str_unk_1804B0ar.byte_0xa0)
			{
				if (v4 == str_unk_1804B0ar.byte_0xa1)
					v6 = str_unk_1804B0ar.type_sub_0[0].byte_0x32;
				else
					v6 = str_unk_1804B0ar.type_sub_0[0].byte_0x30;
				//v7 = (x_BYTE *)x_DWORD_E9C4C_langindexbuffer[*(Bit16s*)&unk_1804B0ar[0x8e+2*(v4++)]];
				//FireBall
				//Rapid Fire
				//Fire Storm
				sub_2BC10_draw_text(x_DWORD_E9C4C_langindexbuffer[str_unk_1804B0ar.uni_0x8a.word[2+v4++]], str_unk_1804B0ar.type_sub_0[0].word_0x8, v5, v6);
				v5 += str_unk_1804B0ar.type_sub_0[0].word_0x12;
			}
		}
		sub_89A30_draw_line(&str_unk_1804B0ar.type_sub_0[0]);
		sub_89690_draw_frame(&str_unk_1804B0ar.type_sub_0[0]);
		str_unk_1804B0ar.byte_0x9e &= 0xF7;
		return;
	}
	if (str_unk_1804B0ar.byte_0xa3 == 1)
	{
		if (*(Bit16s*)&str_unk_1804B0ar.byte_0x9e & 8)
		{
			str_unk_1804B0ar.type_sub_0[0].word_0x0 = 320;
			str_unk_1804B0ar.type_sub_0[0].word_0x2 = 80;
			str_unk_1804B0ar.type_sub_0[0].word_0xc = 320;
			sub_89420(&str_unk_1804B0ar.type_sub_0[0], v0);
			sub_89520(&str_unk_1804B0ar.type_sub_0[0]);
			sub_89980(&str_unk_1804B0ar.type_sub_0[0]);
		}
		sub_2E790(
			str_unk_1804B0ar.type_sub_0[0].word_0x24,
			str_unk_1804B0ar.type_sub_0[0].word_0x26,
			str_unk_1804B0ar.type_sub_0[0].word_0x28,
			str_unk_1804B0ar.type_sub_0[0].word_0x2a,
			str_unk_1804B0ar.type_sub_0[0].byte_0x31);
		sub_895D0_draw_textbox(&str_unk_1804B0ar.type_sub_0[0], v0);
	//LABEL_21:
		sub_89690_draw_frame(&str_unk_1804B0ar.type_sub_0[0]);
	}
//LABEL_22:
	str_unk_1804B0ar.byte_0x9e &= 0xF7;
	*/
	//int comp17 = compare_with_sequence((char*)"00268858", (Bit8u*)unk_1804B0ar, 0x3514b0, debugcounter_sub_87610, 0xb0, &origbyte2z, &remakebyte2z);
	//int comp16 = compare_with_sequence_array_E2A74((char*)"00269450-2", (Bit8u*)array_E2A74, 0x2b3a74, debugcounter_sub_87610, 0xc4e, origbyte2y, remakebyte2y, remakepos2y);
	//int comp16 = compare_with_sequence_array_E2A74((char*)"00269450", (Bit8u*)array_E2A74, 0x2b3a74, debugcounter11, 0x1000, origbyte2y, remakebyte2y, remakepos2y);
	//debugcounter_sub_87580++;
	/*if (comp17 < 0xb0)
		comp17 = comp17;


	debugcounter_sub_87610++;*/
	//return result;
}

//----- (00087860) --------------------------------------------------------
void sub_87860()//268860
{
	//int16_t *v0; // eax
	//char* v1; // ebx
	//int16_t v2; // dx
	//int result; // eax

	if (str_unk_1804B0ar.byte_0xaa >= 0)
	{
		sub_87970();
		//v0 = (Bit16s*)&array_E2A74[30 * (str_unk_1804B0ar.byte_0xaa + 86)];
		//v1 = (char*)x_DWORD_E9C4C_langindexbuffer[v0[2]];

		//Options
		//Load Level
		//Save Level
		//Music Volume
		//Sound Volume


		//v2 = v0[4];
		//LOWORD(v0) = v0[5];
		str_unk_1804B0ar.type_sub_0[1].word_0x1c = str_E2A74[(str_unk_1804B0ar.byte_0xaa + 86)].axis_2[3];
		str_unk_1804B0ar.type_sub_0[1].word_0x1e = str_E2A74[(str_unk_1804B0ar.byte_0xaa + 86)].axis_2[4];
		str_unk_1804B0ar.type_sub_0[1].byte_0x30 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
		str_unk_1804B0ar.type_sub_0[1].word_0xc = 220;
		str_unk_1804B0ar.type_sub_0[1].byte_0x31 = (*xadataclrd0dat.var28_begin_buffer)[0];
		sub_89830(&str_unk_1804B0ar.type_sub_0[1]);
		sub_89420(&str_unk_1804B0ar.type_sub_0[1], (char*)x_DWORD_E9C4C_langindexbuffer[str_E2A74[(str_unk_1804B0ar.byte_0xaa + 86)].axis_2[1]]);
		sub_89520(&str_unk_1804B0ar.type_sub_0[1]);
		sub_89980(&str_unk_1804B0ar.type_sub_0[1]);
		sub_898A0(&str_unk_1804B0ar.type_sub_0[1]);
		sub_2E790(str_unk_1804B0ar.type_sub_0[1].word_0x24, str_unk_1804B0ar.type_sub_0[1].word_0x26, str_unk_1804B0ar.type_sub_0[1].word_0x28, str_unk_1804B0ar.type_sub_0[1].word_0x2a, str_unk_1804B0ar.type_sub_0[1].byte_0x31);
		sub_895D0_draw_textbox(&str_unk_1804B0ar.type_sub_0[1], (char*)x_DWORD_E9C4C_langindexbuffer[str_E2A74[(str_unk_1804B0ar.byte_0xaa + 86)].axis_2[1]]);
		sub_89A30_draw_line(&str_unk_1804B0ar.type_sub_0[1]);
		sub_89690_draw_frame(&str_unk_1804B0ar.type_sub_0[1]);
	}
	//return result;
}

//----- (00087970) --------------------------------------------------------
void sub_87970()//268970
{
	//int result; // eax
	int v1; // [esp+0h] [ebp-10h]
	int v2; // [esp+4h] [ebp-Ch]
	int v3; // [esp+8h] [ebp-8h]
	int v4; // [esp+Ch] [ebp-4h]

	sub_2FFE0(&v4, &v3, &v2, &v1);
	/**(Bit16s*)&array_E2A74[0xa1c] = v2 + v4 - 12;
	*(Bit16s*)&array_E2A74[0xa1e] = v3 + 6;
	*(Bit16s*)&array_E2A74[0xa3a] = v2 + v4 - 12;
	*(Bit16s*)&array_E2A74[0xa3c] = v1 + v3 + 6;
	*(Bit16s*)&array_E2A74[0xa58] = v4 + v2 / 2 - 12;
	*(Bit16s*)&array_E2A74[0xa5a] = v3 + 2 * v1 + 6;
	*(Bit16s*)&array_E2A74[0xa76] = v2 + v4 - 12;
	*(Bit16s*)&array_E2A74[0xa78] = v3 + 2 * v1 + 6;
	*(Bit16s*)&array_E2A74[0xa94] = v2 + v4 - 12;
	//result = v3 + 3 * v1 + 6;
	*(Bit16s*)&array_E2A74[0xa96] = v3 + 3 * v1 + 6;*/

	str_E2A74[0x56].axis_2[3] = v2 + v4 - 12;//0x56 tj 0xa14 8
	str_E2A74[0x56].axis_2[4] = v3 + 6;//0x56 tj 0xa14 a
	str_E2A74[0x57].axis_2[3] = v2 + v4 - 12;//0x57 tj 0xa32 8
	str_E2A74[0x57].axis_2[4] = v1 + v3 + 6;//0x57 tj 0xa32 a
	str_E2A74[0x58].axis_2[3] = v4 + v2 / 2 - 12;//0x58 tj 0xa50 8
	str_E2A74[0x58].axis_2[4] = v3 + 2 * v1 + 6;//0x58 tj 0xa50 a
	str_E2A74[0x59].axis_2[3] = v2 + v4 - 12;//0x59 tj 0xa6e 8
	str_E2A74[0x59].axis_2[4] = v3 + 2 * v1 + 6;//0x59 tj 0xa6e a
	str_E2A74[0x5a].axis_2[3] = v2 + v4 - 12;//0x5a tj 0xa8c 8
	str_E2A74[0x5a].axis_2[4] = v3 + 3 * v1 + 6;//0x5a tj 0xa8c a
}

//----- (00087A30) --------------------------------------------------------
void sub_87A30()//268a30
{
	//int result; // eax
	//int16_t *v1; // eax
	//int v2; // ebx
	//char* v3; // ebx

	//BYTE1(result) = str_unk_1804B0ar.byte_0xa9;
	if (str_unk_1804B0ar.byte_0xa9 > 0)
	{
		//v1 = (Bit16s*)&array_E2A74[30 * str_unk_1804B0ar.byte_0xa9];
		//v2 = v1[2];
		str_unk_1804B0ar.type_sub_0[1].word_0x1c = str_E2A74[str_unk_1804B0ar.byte_0xa9].axis_2[3];
		//v3 = (char*)x_DWORD_E9C4C_langindexbuffer[v1[2]];
		str_unk_1804B0ar.type_sub_0[1].word_0x1e = str_E2A74[str_unk_1804B0ar.byte_0xa9].axis_2[4];
		str_unk_1804B0ar.type_sub_0[1].byte_0x30 = (*xadataclrd0dat.var28_begin_buffer)[0xfff];
		str_unk_1804B0ar.type_sub_0[1].word_0xc = 220;
		str_unk_1804B0ar.type_sub_0[1].byte_0x31 = (*xadataclrd0dat.var28_begin_buffer)[0];
		sub_89830(&str_unk_1804B0ar.type_sub_0[1]);
		sub_89420(&str_unk_1804B0ar.type_sub_0[1], (char*)x_DWORD_E9C4C_langindexbuffer[str_E2A74[str_unk_1804B0ar.byte_0xa9].axis_2[1]]);
		sub_89520(&str_unk_1804B0ar.type_sub_0[1]);
		sub_89980(&str_unk_1804B0ar.type_sub_0[1]);
		sub_898A0(&str_unk_1804B0ar.type_sub_0[1]);
		sub_2E790(str_unk_1804B0ar.type_sub_0[1].word_0x24, str_unk_1804B0ar.type_sub_0[1].word_0x26, str_unk_1804B0ar.type_sub_0[1].word_0x28, str_unk_1804B0ar.type_sub_0[1].word_0x2a, str_unk_1804B0ar.type_sub_0[1].byte_0x31);
		sub_895D0_draw_textbox(&str_unk_1804B0ar.type_sub_0[1], (char*)x_DWORD_E9C4C_langindexbuffer[str_E2A74[str_unk_1804B0ar.byte_0xa9].axis_2[1]]);
		sub_89A30_draw_line(&str_unk_1804B0ar.type_sub_0[1]);
		/*result = */sub_89690_draw_frame(&str_unk_1804B0ar.type_sub_0[1]);
	}
	//return result;
}

//----- (00087B30) --------------------------------------------------------
void sub_87B30()//268b30
{
	//int result; // eax

	//if (++str_unk_1804B0ar.dword_0x76 >= str_unk_1804B0ar.dword_0x7a || /*(result = 15 * x_WORD_180536,*/ !(array_E2A74[0x2 + 30 * str_unk_1804B0ar.word_0x86] & 1/*)*/))
	if (++str_unk_1804B0ar.dword_0x76 >= str_unk_1804B0ar.dword_0x7a ||  !(str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[0] & 1))
		/*result = */sub_87C10();
	//return result;
}

//----- (00087B70) --------------------------------------------------------
void sub_87B70()//268b70
{
	//Bit8s* result; // eax
	int indexx;
	int i; // ebx
	//int v2; // edx
	//int v3; // ecx
	int v4; // edx
	//char v5; // dl

	//result = (Bit8s*)&array_E2A74[0x1e];
	indexx=1;
	//for (i = 0; i < str_unk_1804B0ar.dword_0x66; result += 0x1e)
	for (i = 0; i < str_unk_1804B0ar.dword_0x66; indexx++)
	{
		//v2 = *(Bit32s*)&result[16] + 1;
		//v3 = *(Bit32s*)&result[24];
		//(*(Bit32s*)&result[0x10])++;
		str_E2A74[indexx].dword_16++;
		//v4 = (*(Bit32s*)&result[0x10]) - (*(Bit32s*)&result[0x18]);
		v4 = str_E2A74[indexx].dword_16 - str_E2A74[indexx].dword_24;
		//if (v4 > 0 && v4 > 2 * (*(Bit32s*)&result[0x18]))
		if (v4 > 0 && v4 > 2 * str_E2A74[indexx].dword_24)
		{
			//*(Bit32s*)&result[0x10] = *(Bit32s*)&result[0x18];
			str_E2A74[indexx].dword_16 = str_E2A74[indexx].dword_24;
			//v5 = result[29] + 1;
			/*result[0x1d]++;
			if (result[0x1d] < 0)
				result[0x1d] = 0;
			if (result[0x1d] > 5)
				result[0x1d] = 5;*/
			str_E2A74[indexx].byte_29++;
			if (str_E2A74[indexx].byte_29 < 0)
				str_E2A74[indexx].byte_29 = 0;
			if (str_E2A74[indexx].byte_29 > 5)
				str_E2A74[indexx].byte_29 = 5;
		}
		i++;
	}
	//return (Bit8u*)result;
}

//----- (00087BE0) --------------------------------------------------------
void sub_87BE0()//268be0
{
	//Bit8u* result; // eax
	int index;
	int i; // edx
	char v2; // bl

	//result = array_E2A74;
	index = 0;
	for (i = 0; i < str_unk_1804B0ar.dword_0x66; str_E2A74[index].axis_2[0] = v2 & 0xFE)
	{
		v2 = str_E2A74[index+1].axis_2[0];//20
		//result += 0x1e;
		index++;
		i++;
	}//shift array_E2A74[0x02] by 1
	//return result;
}

//----- (00087C10) --------------------------------------------------------
void sub_87C10()//268c10
{
	//int result; // eax
	//int v1; // edx
	//int v2; // eax

	//result = (int)x_D41A0_BYTEARRAY_4;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
	{
		str_unk_1804B0ar.dword_0x6a = 0;
		*(Bit16s*)&str_unk_1804B0ar.byte_0x9e &= 0xFEDFu;
		//v1 = str_unk_1804B0ar.word_0x86;
		str_unk_1804B0ar.dword_0x72 = str_unk_1804B0ar.dword_0x6e;
		//v2 = 15 * str_unk_1804B0ar.word_0x86;
		//array_E2A74[0x2 + 30 * str_unk_1804B0ar.word_0x86] &= 0xFDu;
		//*(Bit32s*)&array_E2A74[0x10 + 30 * str_unk_1804B0ar.word_0x86] = 0;
		//*(Bit32s*)&array_E2A74[0xc + 30 * str_unk_1804B0ar.word_0x86] = 0;
		//array_E2A74[0x1d+ 30 * str_unk_1804B0ar.word_0x86] = array_E2A74[0x1c+ 30 * str_unk_1804B0ar.word_0x86];
		str_E2A74[str_unk_1804B0ar.word_0x86].axis_2[0] &= 0xffFDu;
		str_E2A74[str_unk_1804B0ar.word_0x86].dword_16 = 0;
		str_E2A74[str_unk_1804B0ar.word_0x86].dword_12 = 0;
		str_E2A74[str_unk_1804B0ar.word_0x86].byte_29 = str_E2A74[str_unk_1804B0ar.word_0x86].byte_28;
		/*result = */sub_889F0(str_unk_1804B0ar.word_0x86);
		str_unk_1804B0ar.word_0x86 = 0;
	}
	//return result;
}

//----- (00087CF0) --------------------------------------------------------
void sub_87CF0()//268cf0
{
	signed int v0; // ecx
	type_str_0x6E8E* v1x; // esi
	//x_WORD *v2; // edx
	uint16_t v3; // bx
	//Bit8u* v4; // edi
	type_str_0x6E8E* v5x; // eax
	signed int v6; // ebx
	int v7; // eax
	//Bit8u* v8; // eax
	//Bit8u* v9; // ebx
	int v9x;
	//char v10; // ah
	//char v11; // dh
	//Bit8u* v12; // eax
	bool v13; // zf
	int v14; // eax
	int16_t v15; // bx
	bool v16; // bl
	type_str_0x6E8E* v17x; // edx
	type_str_0x6E8E* v18x; // edx
	bool v19; // al
	char v20; // al
	signed int v21; // edx
	//Bit8u* v22; // ebx
	int v22x;
	signed int v23; // edx
	//Bit8u* v24; // ebx
	int v24x;
	char v25; // ah
	//Bit8u* result; // eax
	signed int v27; // edx
	//Bit8u* v28; // ebx
	int v28x;
	int v29; // [esp+0h] [ebp-28h]
	bool v30; // [esp+8h] [ebp-20h]
	bool v31; // [esp+Ch] [ebp-1Ch]
	bool v32; // [esp+10h] [ebp-18h]
	signed int v33; // [esp+14h] [ebp-14h]
	int v34; // [esp+18h] [ebp-10h]
	Bit32u v35; // [esp+1Ch] [ebp-Ch]
	type_str_0x6E8E* v36x; // [esp+20h] [ebp-8h]
	signed int v37; // [esp+24h] [ebp-4h]

	v34 = 0;
	v37 = -1;
	v0 = -1;
	v1x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	//v2 = (x_WORD*)v1x->dword_0xA4_164;
	v3 = v1x->dword_0xA4_164x->word_0x3A_58;
	//v4 = (Bit8u*)v2 + 611;
	if (v3)
		v5x = x_DWORD_EA3E4[v3];
	else
		v5x = 0;
	v36x = v5x;
	v6 = 0;
	v29 = 0;
	while (v6 < 26)
	{
		v7 = v1x->dword_0xA4_164x->str_611.array_0x333_819x.word[v6++] != 0;
		v29 += v7;
	}
	if (v29)
	{
		v30 = v1x->dword_0xA4_164x->str_611.array_0x333_819x.word[2] != 0;
		v32 = v1x->dword_0xA4_164x->str_611.array_0x333_819x.word[1] != 0;
		v31 = v1x->dword_0xA4_164x->str_611.array_0x333_819x.word[0] != 0;
		v0 = v1x->dword_0xA4_164x->str_611.word_0x451_1105;
		v37 = v1x->dword_0xA4_164x->str_611.word_0x453_1107;
	}
	//v8 = x_D41A0_BYTEARRAY_0 + 11 * D41A0_BYTESTR_0.word_0xc;
	if (D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[0])
		v33 = -1;
	else
		v33 = D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.word_0xc].str_3654D_byte1].str_3654C_byte0;
	v35 = 1;
	//v9 = &array_E2A74[0x1e];
	v9x = 1;
	while ((signed int)v35 <= str_unk_1804B0ar.dword_0x66)
	{
		//switch (*(x_WORD *)v9)
		switch (str_E2A74[v9x].word_0)
		{
		case 1:
			if (v35 >= 1 && (v35 <= 2 || v35 == 92))
				goto LABEL_32;
			break;
		case 2:
			//v10 = v9[2];
			if (str_E2A74[v9x].axis_2[0] & 0x18)
				str_E2A74[v9x].axis_2[0] |=1;
			break;
		case 3:
			if (v36x)
			{
				if (v35 != 35)
					goto LABEL_32;
				if (!v33)
				{
					//v12 = x_D41A0_BYTEARRAY_0;
					str_E2A74[v9x].axis_2[0] |= 1u;
					/*x_WORD_E2E96 = (*(uint16_t *)(0x2FED5 + v12) << 6) / 100
							   + *(uint8_t *)(**filearray_2aa18c[6] + 244)
							   + 60;*/
					str_E2A74[35].axis_2[3] = (D41A0_BYTESTR_0.str_2FECE.word_0x2FED5 << 6) / 100
						+ (*filearray_2aa18c[filearrayindex_MSPRDDATTAB]._posistruct)[40].width
						+ 60;
					str_E2A74[35].axis_2[4] = 38;
				}
			}
			break;
		case 5:
		case 7:
		case 0xC:
		case 0xD:
			break;
		case 6:
			v13 = (str_unk_1804B0ar.byte_0x9e & 2) == 0;
			goto LABEL_31;
		case 8:
			//v11 = v9[2];
			if (str_E2A74[v9x].axis_2[0] & 0x10 || str_E2A74[v9x].axis_2[0] & 0x40)
				str_E2A74[v9x].axis_2[0] |= 1u;
			if (str_E2A74[v9x].axis_2[0] & 0x40)
				v34++;
			break;
		default:
			v13 = v35 == 85;
		LABEL_31:
			if (!v13)
				LABEL_32 :
				str_E2A74[v9x].axis_2[0] |= 1u;
			break;
		}
		//v9 += 30;
		v9x++;
		v35++;
	}
	if (str_unk_1804B0ar.byte_0x9e & 4)
	{
		str_E2A74[2].axis_2[3] = 190;
		str_E2A74[2].axis_2[4] = 202;
	}
	else
	{
		str_E2A74[2].axis_2[3] = 64;
		str_E2A74[2].axis_2[4] = 66;
	}
	if (!v34 && !(str_unk_1804B0ar.byte_0x9e & 4))
		str_E2A74[4].axis_2[0] |= 1u;
	if (	v1x->dword_0x4 >> 2 >= v1x->dword_0x8)
		str_E2A74[5].axis_2[0] |= 1u;
	if (v1x->dword_0xA4_164x->byte_0x262_610)
		str_E2A74[3].axis_2[0] |= 1u;
	str_E2A74[10].axis_2[0] |= 4u;
	str_E2A74[11].axis_2[0] |= 4u;
	str_E2A74[12].axis_2[0] |= 4u;
	if (v29)
	{
		v14 = str_unk_1804B0ar.byte_0x9e & 0x40;
		if (str_unk_1804B0ar.byte_0x9e & 0x80)
		{
			if (v31)
			{
				str_E2A74[10].axis_2[0] |= 1u;
				if (v0 && v37)
				{
					str_E2A74[14].axis_2[0] |= 1u;
				}
				else
				{
					str_E2A74[10].axis_2[0] &= 0xFBu;
					if (v0)
						v15 = 600;
					else
						v15 = 540;
					str_E2A74[10].axis_2[3] = v15;
					str_E2A74[10].axis_2[4] = 32;
				}
			}
			else
			{
				str_E2A74[7].axis_2[0] |= 1u;
			}
			str_unk_1804B0ar.byte_0x9e &= 0x7F;
		}
		if (v14)
		{
			if (v32)
			{
				str_E2A74[11].axis_2[0] |= 1u;
				if (v0 != 1 && v37 != 1)
				{
					str_E2A74[14].axis_2[0] |= 1u;
				}
				else
				{
					str_E2A74[11].axis_2[0] &= 0xFBu;
					if (v0 == 1)
						str_E2A74[11].axis_2[3] = 540;
					else
						str_E2A74[11].axis_2[3] = 600;
					str_E2A74[11].axis_2[4] = 32;
				}
			}
			else
			{
				str_E2A74[9].axis_2[0] |= 1u;
			}
			str_unk_1804B0ar.byte_0x9e &= 0xBF;
		}
		if (v30)
		{
			if (!v36x)
			{
				str_E2A74[12].axis_2[0] |= 1u;
				if (v0 != 2 && v37 != 2)
				{
					str_E2A74[13].axis_2[0] |= 1u;
				}
				else
				{
					str_E2A74[12].axis_2[0] &= 0xFBu;
					if (v0 == 2)
						str_E2A74[12].axis_2[3] = 540;
					else
						str_E2A74[12].axis_2[3] = 600;
					str_E2A74[12].axis_2[4] = 32;
				}
			}
		}
		else
		{
			str_E2A74[8].axis_2[0] |= 1u;
		}
	}
	else
	{
		str_E2A74[6].axis_2[0] |= 1u;
	}
	if (v36x)
	{
		if (v1x->dword_0x90_144 >= x_DWORD_EA3E4[v1x->dword_0xA4_164x->str_611.array_0x333_819x.word[2]]->dword_0x8C_140 && v36x->dword_0x10_16 < 6)
			str_E2A74[14].axis_2[0] |= 1u;
		if (v1x->dword_0xA4_164x->byte_0x195_405)
			str_E2A74[17].dword_20 = 100;
		if (str_E2A74[17].dword_20)
			(str_E2A74[17].dword_20)--;
		if (str_E2A74[17].dword_20)
			str_E2A74[17].axis_2[0] |= 1u;
	}
	if (v29)
	{
		if (v0 > -1)
			str_E2A74[38].axis_2[0] |= 1u;
		if (v37 > -1)
			str_E2A74[39].axis_2[0] |= 1u;
		if (v0 > -1)
		{
			str_E2A74[40].axis_2[3] = 540;
			str_E2A74[40].axis_2[0] |= 1u;
			str_E2A74[40].axis_2[4] = 40;
			str_E2A74[42].axis_2[0] |= 1u;
			str_E2A74[42].axis_2[4] = 16;
			str_E2A74[42].axis_2[3] = 560;
		}
		v16 = 0;
		if (v0 > -1)
		{
			v17x = x_DWORD_EA3E4[v1x->dword_0xA4_164x->str_611.array_0x333_819x.word[v0]];
			if (v0 == 2)
			{
				if (v1x->dword_0x90_144 < v17x->dword_0x8C_140)
					v16 = 1;
			}
			else
			{
				v16 = sub_68D50(v17x, v1x) == 0;
			}
			if (v16)
			{
				str_E2A74[41].axis_2[3] = 540;
				str_E2A74[41].axis_2[4] = 48;
				str_E2A74[41].axis_2[0] |= 1u;
			}
		}
		if (v37 > -1 && !v16)
		{
			v18x = x_DWORD_EA3E4[v1x->dword_0xA4_164x->str_611.array_0x333_819x.word[v37]];
			v19 = v37 == 2 ? v1x->dword_0x90_144 < v18x->dword_0x8C_140 : sub_68D50(v18x, v1x) == 0;
			if (v19)
			{
				str_E2A74[41].axis_2[0] |= 1u;
				str_E2A74[41].axis_2[4] = 48;
				str_E2A74[41].axis_2[3] = 600;
			}
		}
	}
	if (v33 == -1)
	{
		v20 = 1;
		str_E2A74[80].axis_2[0] |= 1u;
		if (str_E2A74[83].axis_2[0] & 0x40)
			str_E2A74[83].axis_2[0] |= 1u;
	}
	else
	{
		v20 = 0;
		switch (v33)
		{
		case 0:
			str_E2A74[72].axis_2[0] |= 1u;
			break;
		case 1:
			str_E2A74[75].axis_2[0] |= 1u;
			break;
		case 2:
			str_E2A74[73].axis_2[0] |= 1u;
			break;
		case 3:
			str_E2A74[77].axis_2[0] |= 1u;
			break;
		case 5:
			str_E2A74[79].axis_2[0] |= 1u;
			break;
		case 7:
			str_E2A74[76].axis_2[0] |= 1u;
			break;
		case 8:
			str_E2A74[78].axis_2[0] |= 1u;
			break;
		case 9:
			str_E2A74[74].axis_2[0] |= 1u;
			break;
		default:
			break;
		}
	}
	if (str_unk_1804B0ar.uni_0x8a.dword[0] > 100)
	{
		str_E2A74[15].axis_2[0] |= 1u;
		str_E2A74[16].axis_2[0] |= 1u;
	}
	if (v20)
	{
		v21 = 1;
		//v22 = &array_E2A74[0x1e];
		v22x = 1;
		while (v21 <= str_unk_1804B0ar.dword_0x66)
		{
			if (str_E2A74[v22x].axis_2[0] & 0x4ff)
				str_E2A74[v22x].axis_2[0] &= 0xFEu;
			v21++;
			v22x++;
			//v22 += 30;
		}
	}
	if (str_unk_1804B0ar.byte_0x9e & 4)
	{
		v23 = 1;
		//v24 = &array_E2A74[0x1e];
		v24x = 1;
		while (v23 <= str_unk_1804B0ar.dword_0x66)
		{
			v25 = str_E2A74[v24x].axis_2[0];
			if (v25 & 0x20)
				str_E2A74[v24x].axis_2[0] = v25 & 0xFE;
			v23++;
			//v24 += 30;
			v24x++;
		}
	}
	//result = x_D41A0_BYTEARRAY_0;
	if (!D41A0_BYTESTR_0.str_0x218A_settings.str_0x218E.minimap_0x218E)
	{
		v27 = 1;
		//v28 = &array_E2A74[0x1e];
		v28x = 1;
		while (v27 <= str_unk_1804B0ar.dword_0x66)
		{
			if (str_E2A74[v22x].axis_2[0] & 0x2ff)
				str_E2A74[v22x].axis_2[0] &= 0xFEu;
			v27++;
			//v28 += 30;
			v28x++;
		}
	}
	//return result;
}

//int debugcounter_sub_88450 = 0;

//----- (00088450) --------------------------------------------------------
int sub_88450()//269450
{
	signed int v0; // ebx
	int v1; // edx
	//Bit8u* v2; // eax
	int v2x;
	int v3; // ecx
	int v4; // edi

	/*Bit8u origbyte2z;
	Bit8u remakebyte2z;
	Bit8u origbyte2y[100];
	Bit8u remakebyte2y[100];
	int remakepos2y[100];
	int comp15 = compare_with_sequence((char*)"00269450", (Bit8u*)unk_1804B0ar, 0x3514b0, debugcounter_sub_88450, 0xb0, &origbyte2z, &remakebyte2z);
	int comp16 = compare_with_sequence_array_E2A74((char*)"00269450-2", (Bit8u*)array_E2A74, 0x2b3a74, debugcounter_sub_88450, 0xc4e, origbyte2y, remakebyte2y, remakepos2y);
	//int comp16 = compare_with_sequence_array_E2A74((char*)"00269450", (Bit8u*)array_E2A74, 0x2b3a74, debugcounter11, 0x1000, origbyte2y, remakebyte2y, remakepos2y);
	//debugcounter_sub_87580++;
	if (comp15 < 0xb0)
		comp15 = comp15;
	if (comp16 < 0xc4e)
		comp16 = comp16;*/

	/*if (debugcounter_sub_88450 >= 0x10)
	{
		//myprintf("i:%d,", debugcounter_sub_88450);
	}*/

	if (str_unk_1804B0ar.word_0x88)
	{
		v1 = str_unk_1804B0ar.word_0x88;
		str_unk_1804B0ar.word_0x88 = 0;
	}
	else
	{
		v0 = 6;
		v1 = 0;
		while (v0 >= 0 && !v1)
		{
			//v2 = &array_E2A74[0x1e];
			v2x = 1;
			v3 = 0;
			v4 = 0;
			while (v3 < str_unk_1804B0ar.dword_0x66)
			{
				if (str_E2A74[v2x].axis_2[0] & 1
					&& v0 == str_E2A74[v2x].byte_29
					&& str_E2A74[v2x].dword_16 - str_E2A74[v2x].dword_24 > 0
					&& str_E2A74[v2x].dword_16 - str_E2A74[v2x].dword_24 > v4
					&& v3!=0x5b)//fixed
				{
					v1 = v3 + 1;
					v4 = str_E2A74[v2x].dword_16 - str_E2A74[v2x].dword_24;
					//adress 269497
				}
				v3++;
				//v2 += 0x1e;
				v2x++;
			}
			v0--;
		}
	}
	//if (v1 == 0x5c)
		//v1 = v1;//fix
	/*
	//adress 2694bc
	int comp17 = compare_with_sequence((char*)"002694BC", (Bit8u*)unk_1804B0ar, 0x3514b0, debugcounter_sub_88450, 0xb0, &origbyte2z, &remakebyte2z);
	int comp18 = compare_with_sequence_array_E2A74((char*)"002694BC-2", (Bit8u*)array_E2A74, 0x2b3a74, debugcounter_sub_88450, 0xc4e, origbyte2y, remakebyte2y, remakepos2y);
	//int comp16 = compare_with_sequence_array_E2A74((char*)"00269450", (Bit8u*)array_E2A74, 0x2b3a74, debugcounter11, 0x1000, origbyte2y, remakebyte2y, remakepos2y);
	//debugcounter_sub_87580++;
	if (comp17 < 0xb0)
		comp17 = comp17;
	if (comp18 < 0xc4e)
		comp18 = comp18;
	debugcounter_sub_88450++;*/
	return v1;
}

//----- (000884D0) --------------------------------------------------------
void sub_884D0(int a1, int16_t a2, Bit16s* a3x, char a4, char a5)//2694d0
{
	signed int i; // eax
	//char v6; // dl

	if (a1)
	{
		//str_unk_1804B0ar.dword_0x7a = *(Bit16s*)&array_E2A74[0x6 + 30 * a1];
		str_unk_1804B0ar.dword_0x7a = str_E2A74[a1].axis_2[2];
		str_unk_1804B0ar.byte_0xa3 = a4;
		str_unk_1804B0ar.word_0x86 = a1;
		str_unk_1804B0ar.byte_0x9e |= 8;
		str_unk_1804B0ar.byte_0xa1 = a5;
		str_unk_1804B0ar.dword_0x76 = 0;
		str_unk_1804B0ar.byte_0xa0 = a2;
		for (i = 0; i < a2; str_unk_1804B0ar.uni_0x8a.word[i+1] = a3x[i-1])//*(Bit16s*)(a3 + 2 * i - 2))
			i++;
		//v6 = array_E2A74[0x2 + 30 * a1] | 3;
		str_E2A74[a1].axis_2[0] |= 3;
		if (str_E2A74[a1].axis_2[0] & 8)
		{
			//LOBYTE(*(Bit16s*)&str_unk_1804B0ar.byte_0x9e) = *(Bit16s*)&str_unk_1804B0ar.byte_0x9e | 0x20;
			str_unk_1804B0ar.byte_0x9e |= 0x20;
		}
		else if (str_E2A74[a1].axis_2[0] & 0x10)
		{
			//HIBYTE(*(Bit16s*)&str_unk_1804B0ar.byte_0x9e) |= 1u;
			str_unk_1804B0ar.byte_0x9f |= 1u;
		}
	}
}

//----- (00088580) --------------------------------------------------------
void sub_88580()//269580
{
	signed int v0; // edx
	//Bit8u* result; // eax
	int index;

	v0 = 1;
	//for (result = &array_E2A74[0x1e]; v0 <= str_unk_1804B0ar.dword_0x66; result += 30)
	for (index = 1; v0 <= str_unk_1804B0ar.dword_0x66; index++)
	{
		//if (*(Bit16s*)result >= 2u && (*(Bit16s*)result <= 2u || *(Bit16s*)result == 8))
		if (str_E2A74[index].word_0 == 2 || str_E2A74[index].word_0 == 8)
		{
			str_E2A74[index].axis_2[0] &= 0xA7u;
			if (str_E2A74[index].dword_12)
			{
				if (str_E2A74[index].axis_2[0] & 2)
					str_unk_1804B0ar.byte_0x9f &= 0xFDu;
				else
					str_E2A74[index].dword_12 = 0;
			}
		}
		v0++;
	}
	//return result;
}

int debugcounter_2695e0 = 0;

//----- (000885E0) --------------------------------------------------------
void sub_885E0(type_str_0x6E8E* a1x, int a2, int a3, uint16_t a4)//2695e0
{
	signed int v4; // eax
	int v5; // edx
	char v12; // [esp+0h] [ebp-4h]

	if (debugcounter_2695e0 == 0xa)
	{
		debugcounter_2695e0++;
		debugcounter_2695e0--;
	}

	v5 = 0;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
	{
		if (!(str_E2A74[a4].axis_2[0] & 8))
		{
			if (x_WORD_180660_VGA_type_resolution & 1)
			{
				a2 *= 2;
				a3 *= 2;
			}
			if (str_E2A74[a4].axis_2[0] & 2)
			{
				if (a1x == str_E2A74[a4].dword_12 && !(*(Bit16s*)&str_unk_1804B0ar.byte_0x9e & 0x20))
				{
					str_E2A74[a4].axis_2[3] = a2;
					str_E2A74[a4].axis_2[0] |= 0x10;
					str_E2A74[a4].axis_2[4] = a3;
					str_unk_1804B0ar.byte_0x9f |= 2;
				}
			}
			else
			{
				v12 = 0;
				if (!a1x
					|| (v4 = sub_58490_radix_3d_2(
					&x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]->array_0x4C_76,
						&a1x->array_0x4C_76),
						v5 = v4,
						!str_E2A74[a4].dword_12)
					|| v4 < str_E2A74[a4].dword_20)
				{
					v12 = 1;
				}
				if (v12)
				{
					str_E2A74[a4].dword_12 = a1x;//xx
					str_E2A74[a4].dword_20 = v5;
					str_E2A74[a4].axis_2[0] |= 0x10;
				}
			}
		}
		if (a4 >= 0x51u && a4 <= 0x53u)
		{
			str_E2A74[a4].axis_2[0] |= 0x40u;
		}
	}

	debugcounter_2695e0++;
}

//----- (00088740) --------------------------------------------------------
void sub_88740(type_str_0x6E8E* a1x, int a2, int a3)//269740
{
	int v3; // esi
	type_str_0x6E8E* v4x; // edx
	uint8_t v5; // al
	uint8_t v6; // al
	uint8_t v7; // al
	uint8_t v8; // al
	//char v9; // cl
	signed int v10; // eax
	uint8_t v11; // al
	//unsigned int v12; // edi
	signed int v13; // eax
	//int v14; // esi
	//char v15; // dl
	//char v16; // dh
	//char v17; // bl
	char v18; // [esp+0h] [ebp-4h]

	v3 = 0;
	if (str_unk_1804B0ar.byte_0x9e & 1)
		return;
	v4x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	v5 = a1x->byte_0x3F_63;
	if (v5 < 5u)
	{
		if (v5 >= 2u)
		{
			if (v5 <= 2u)
			{
				v6 = a1x->byte_0x40_64;
				if (v6 >= 1u)
				{
					if (v6 <= 1u)
					{
						v3 = 27;
					}
					else if (v6 == 2)
					{
						v3 = 22;
					}
				}
			}
			else if (v5 == 3)
			{
				v11 = a1x->byte_0x40_64;
				if (v11 < 2u)
				{
					if (v11 == 1)
						v3 = 28;
				}
				else if (v11 <= 2u)
				{
					v3 = (a1x->word_0x1A_26 != v4x->word_0x1A_26) + 24;
				}
				else if (v11 == 3)
				{
					if (a1x->word_0x1A_26 == v4x->word_0x1A_26)
						v3 = 23;
					else
						v3 = 26;
				}
			}
		}
		goto LABEL_48;
	}
	if (v5 > 5u)
	{
		if (v5 >= 0xAu)
		{
			if (v5 <= 0xAu)
			{
				if (a1x->byte_0x40_64 == 39 && a1x->word_0x94_148 != v4x->word_0x1A_26)
					v3 = 18;
			}
			else if (v5 == 15 && !(a1x->struct_byte_0xc_12_15.byte[0] & 1))
			{
				v3 = 20;
			}
		}
		goto LABEL_48;
	}
	if (a1x->word_0x1A_26 != v4x->word_0x1A_26)
	{
		v7 = a1x->byte_0x40_64;
		if (v7 < 0xCu)
			goto LABEL_30;
		if (v7 > 0xEu)
		{
			if (v7 == 22)
			{
				if (a1x->byte_0x45_69 != -76 && a1x->word_0x94_148 != v4x->word_0x1A_26)
					v3 = 18;
				goto LABEL_48;
			}
		LABEL_30:
			v8 = a1x->byte_0x45_69;
			if (v8 < 0xE8u || v8 > 0xEAu)
			{
				//v9 = a1x->byte_0x49_73;
				v10 = 1;
				if ((a1x->byte_0x49_73 == 14 || a1x->byte_0x49_73 == 13) && a1x->word_0x28_40 == v4x->word_0x1A_26)
					v10 = 0;
				if (v10)
					v3 = 19;
			}
			goto LABEL_48;
		}
	}
LABEL_48:
	if (v3)
	{
		if (x_WORD_180660_VGA_type_resolution & 1)
		{
			a2 *= 2;
			a3 *= 2;
		}
		//v12 = 30 * v3;
		if (str_E2A74[v3].axis_2[0] & 2)
		{
			if (a1x == str_E2A74[v3].dword_12)
			{
				//v16 = str_unk_1804B0ar.byte_0x9f;
				if (!(str_unk_1804B0ar.byte_0x9f & 0x1))
				{
					//v17 = array_E2A74[0x2 + v12] | 8;
					str_E2A74[v3].axis_2[3] = a2;
					str_E2A74[v3].axis_2[0] |= 8;
					str_E2A74[v3].axis_2[4] = a3;
					str_unk_1804B0ar.byte_0x9f |= 2;
				}
			}
		}
		else
		{
			v18 = 0;
			v13 = sub_58490_radix_3d_2(&v4x->array_0x4C_76, &a1x->array_0x4C_76);
			if (!str_E2A74[v3].dword_12 || v13 < str_E2A74[v3].dword_20 && v13 > 1024)
				v18 = 1;
			if (v18)
			{
				//v14 = 15 * v3;
				str_E2A74[v3].dword_20 = v13;
				//v15 = array_E2A74[0x2 + 30 * v3];
				str_E2A74[v3].dword_12 = a1x;
				str_E2A74[v3].axis_2[0] |= 8;
			}
		}
	}
}

//----- (000889F0) --------------------------------------------------------
void sub_889F0(Bit16u a1)//2699f0
{
	//int result; // eax

	//result = a1;
	if (a1 < 0x15u)
	{
		if (a1 < 0x12u)
		{
			if (a1 == 15)
			{
				str_E2A74[16].byte_29 = 6;
				return;
			}
			goto LABEL_22;
		}
		if (a1 > 0x12u)
		{
			if (a1 != 19)
				goto LABEL_22;
			goto LABEL_19;
		}
	LABEL_18:
		str_unk_1804B0ar.byte_0x9e |= 0x40;
		return;
	}
	if (a1 <= 0x15u)
		goto LABEL_18;
	if (a1 < 0x1Cu)
	{
		if (a1 < 0x19u || a1 > 0x1Au)
			goto LABEL_22;
		goto LABEL_19;
	}
	if (a1 <= 0x1Cu)
		goto LABEL_19;
	if (a1 < 0x52u)
	{
	LABEL_22:
		if (str_E2A74[a1].word_0 == 7)
		{
			switch (D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[1]].str_3654C_byte0)
			{
			case 0:
				str_unk_1804B0ar.byte_0x9e |=  0x40;
				break;
			case 1:
			case 2:
			case 3:
			case 7:
			case 8:
			case 9:
				str_unk_1804B0ar.byte_0x9e |=  0x80;
				break;
			default:
				break;
			}
		}
		if (a1 == 79)
		{
			str_E2A74[2].byte_29 = 6;
			str_E2A74[81].byte_29 = 6;
		}
		return;
	}
	if (a1 <= 0x52u)
	{
	LABEL_19:
		str_unk_1804B0ar.byte_0x9e |= 0x80;
		return;
	}
	if (a1 != 93)
		goto LABEL_22;
	if (x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240]->dword_0xA4_164x->word_0x3A_58)
		str_unk_1804B0ar.word_0x88 = 94;
	//return result;
}

//----- (00088B20) --------------------------------------------------------
void sub_88B20()//269b20
{
	//Bit8u* result; // eax
	signed int v1; // edx
	//Bit8u* v2; // ebx
	int v2x;

	//result = x_D41A0_BYTEARRAY_4;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
	{
		v1 = 1;
		//v2 = &array_E2A74[0x1e];
		v2x = 1;
		while (v1 <= str_unk_1804B0ar.dword_0x66)
		{
			if (str_E2A74[v2x].word_0 == 7)
			{
				//result = (Bit8u*)(15 * v1);
				str_E2A74[v1].byte_29 = 6;
			}
			v1++;
			//v2 += 30;
			v2x++;
		}
	}
	//return result;
}

//----- (00088B60) --------------------------------------------------------
void sub_88B60()//269b60
{
	//int result; // eax

	//result = x_D41A0_BYTEARRAY_0[4];
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
		//array_E2A74[0x4eb] = 6;
		str_E2A74[41].byte_29 = 6;
	//return result;
}

//----- (00088BA0) --------------------------------------------------------
void sub_88BA0()//269ba0
{
	char result; // al
	//Bit8u* v1; // ebx

	result = -1;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
	{
		//v1 = x_D41A0_BYTEARRAY_0+11 * (D41A0_BYTESTR_0.word_0xc);
		if (!D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[0])
			result = D41A0_BYTESTR_0.struct_0x3654C[D41A0_BYTESTR_0.struct_0x3659C[D41A0_BYTESTR_0.word_0xc].array_0x3659C_byte[1]].str_3654C_byte0;
		if (result == -1)
		{
			str_unk_1804B0ar.word_0x88 = 80;
		LABEL_15:
			str_unk_1804B0ar.dword_0x6e = 8;
			/*result = */sub_87C10();
		}
		else
		{
			switch (result)
			{
			case 0:
				str_unk_1804B0ar.word_0x88 = 72;
				str_unk_1804B0ar.dword_0x6e = 8;
				/*result = */sub_87C10();
				break;
			case 1:
				str_unk_1804B0ar.word_0x88 = 75;
				str_unk_1804B0ar.dword_0x6e = 8;
				/*result = */sub_87C10();
				break;
			case 2:
				str_unk_1804B0ar.word_0x88 = 73;
				str_unk_1804B0ar.dword_0x6e = 8;
				/*result = */sub_87C10();
				break;
			case 3:
				str_unk_1804B0ar.word_0x88 = 77;
				str_unk_1804B0ar.dword_0x6e = 8;
				/*result = */sub_87C10();
				break;
			case 5:
				str_unk_1804B0ar.word_0x88 = 79;
				str_unk_1804B0ar.dword_0x6e = 8;
				/*result = */sub_87C10();
				break;
			case 7:
				str_unk_1804B0ar.word_0x88 = 76;
				str_unk_1804B0ar.dword_0x6e = 8;
				/*result = */sub_87C10();
				break;
			case 8:
				str_unk_1804B0ar.word_0x88 = 78;
				str_unk_1804B0ar.dword_0x6e = 8;
				/*result = */sub_87C10();
				break;
			case 9:
				str_unk_1804B0ar.word_0x88 = 74;
				str_unk_1804B0ar.dword_0x6e = 8;
				/*result = */sub_87C10();
				break;
			default:
				goto LABEL_15;
			}
		}
	}
	//return result;
}

//----- (00088D00) --------------------------------------------------------
void sub_88D00()//269d00
{
	//int result; // eax

	//result = (int)x_D41A0_BYTEARRAY_4;
	if (x_D41A0_BYTEARRAY_4_struct.byteindex_10)
		str_unk_1804B0ar.word_0x88 = 93;
	//return result;
}

//----- (00088D40) --------------------------------------------------------
char sub_88D40()//269d40
{
	uint16_t v0; // dx
	int v1; // ebx
	signed int v2; // eax
	int v3; // edx
	signed int v4; // ebx
	int v5; // ecx
	int v6; // edx
	int v7_ebx; // ebx
	//int v8; // edi
	int v9; // ecx
	int v10_esi; // esi
	int v11_edi; // edi
	int v12; // eax
	char v13_cl; // cl
	char v14_al;// al
	int v20__2; // [esp+0h] [ebp-2h]
	int16_t v21_A[3]; // [esp+Ch] [ebp+Ah]
	type_str_0x6E8E* v17_12x; // [esp+Fh] [ebp+12h]
	int i; // [esp+18h] [ebp+16h]
	int v23; // [esp+1Ch] [ebp+1Ah]
	type_SPELLS_BEGIN_BUFFER_str_sub* v235_1Ex; // [esp+20h] [ebp+1Eh]
	int v24_22; // [esp+24h] [ebp+22h]
	int v25; // [esp+28h] [ebp+26h]
	int v26; // [esp+2Ch] [ebp+2Ah]
	int v27_2E; // [esp+30h] [ebp+2Eh]
	int v28_32; // [esp+34h] [ebp+32h]
	int v29_36; // [esp+38h] [ebp+36h]
	//int v30_3A; // [esp+3Ch] [ebp+3Ah]
	type_SPELLS_BEGIN_BUFFER_str_sub* v31x; // [esp+40h] [ebp+3Eh]//arg_2A
	int v32; // [esp+44h] [ebp+42h]
	int v33_46; // [esp+48h] [ebp+46h]
	int v34; // [esp+4Ch] [ebp+4Ah]
	int v35_4E; // [esp+50h] [ebp+4Eh]
	type_str_0x6E8E* v36_52x; // [esp+54h] [ebp+52h]
	int v37_56; // [esp+58h] [ebp+56h]
	//int v38; // [esp+5Ch] [ebp+5Ah]//arg_46
	type_SPELLS_BEGIN_BUFFER_str_sub* v39_5Ex; // [esp+60h] [ebp+5Eh]
	type_str_0x6E8E* v40_62x; // [esp+64h] [ebp+62h]
	int v41_66; // [esp+68h] [ebp+66h]
	int v42_6A; // [esp+6Ch] [ebp+6Ah]
	int v43_6E; // [esp+70h] [ebp+6Eh]
	char v44; // [esp+78h] [ebp+76h]
	char v45; // [esp+7Ch] [ebp+7Ah]
	bool v46_7E; // [esp+80h] [ebp+7Eh]
	int j;

	v40_62x = 0;
	v45 = 0;
	v42_6A = 0;
	v34 = 0;
	v36_52x = x_DWORD_EA3E4[D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].word_0x00a_2BE4_11240];
	v0 = v36_52x->dword_0xA4_164x->word_0x3A_58;
	if (v0)
		v40_62x = x_DWORD_EA3E4[v0];
	v1 = 0;
	//v30_3A = v36_52x->dword_0xA4_164 + 611;
	v2 = 0;
	while (v2 < 26)
	{
		v3 = v36_52x->dword_0xA4_164x->str_611.array_0x333_819x.word[v2++] != 0;
		v1 += v3;
	}
	if (v1)
	{
		if (x_WORD_180660_VGA_type_resolution & 1)
			v4 = 400;
		else
			v4 = 480;
		/*v5 = *(uint8_t *)(**filearray_2aa18c[6] + 539);
		v6 = *(uint8_t *)(**filearray_2aa18c[6] + 532);*/
		v5 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].height;
		v6 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[88].width;
		v32 = v4 - 2 * v5;
		v26 = v6;		
		//v23 = *(uint8_t *)(**filearray_2aa18c[6] + 538);
		v23 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width;
		v7_ebx = v5;
		v41_66 = x_BYTE_D94FF_spell_index[v36_52x->dword_0xA4_164x->str_611.byte_0x458_1112];
		v46_7E = v36_52x->dword_0xA4_164x->str_611.array_0x333_819x.word[v41_66] != 0;
		if (D41A0_BYTESTR_0.str_2FECE.byte_level_type != 2 && v41_66 == 25)
			v46_7E = 0;
		v35_4E = v36_52x->dword_0xA4_164x->str_611.array_0x41D_1053z.byte[v41_66];
		//v8 = *(char *)(v30_3A + 501);
		//v39_5E = (char*)&(*xadataspellsdat.var28_begin_buffer)[80 * v41_66 + 2];
		v39_5Ex = SPELLS_BEGIN_BUFFER_str[v41_66].subspell;
		v43_6E = 13;
		//v20 = *(uint8_t *)(**filearray_2aa18c[6] + 982);
		v20__2 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[163].width;
		//v20 = 0;v23 = 0;  //fix it
		v9 = 3 * v20__2;
		v33_46 = v23 / 2 + v23 * ((v36_52x->dword_0xA4_164x->str_611.byte_0x458_1112) % 13) + v26;
		v43_6E = 13;
		//v10 = *(uint8_t *)(**filearray_2aa18c[6] + 983);
		v10_esi = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[163].height;
		v37_56 = v32 - v10_esi;
		v29_36 = v7_ebx / 2 + v7_ebx * ((v36_52x->dword_0xA4_164x->str_611.byte_0x458_1112) / 13) + v32;
		v11_edi = v33_46 - 3 * v20__2 / 2;
		if (v11_edi <= 640 - 3 * v20__2)
		{
			if (v11_edi < 0)
				v11_edi = 0;
		}
		else
		{
			v11_edi = 640 - v9;
		}
		v12 = v9 / 2;
		v13_cl = 0;
		v25 = v11_edi + v12;
		for (i = 0; i < 8 && !v13_cl; i++)
		{
			v44 = 2;
			v34 = 1;
			if ((uint8_t)str_unk_1804B0ar.byte_0xa4 <= 6u)
			{
				v43_6E = 4 * str_unk_1804B0ar.byte_0xa4;
				v24_22 = v10_esi / 2;
				v28_32 = v20__2 / 2;
				v27_2E = v10_esi / 2 + v37_56;
				switch (str_unk_1804B0ar.byte_0xa4) {
				case 0: {//loc_88FD9
					if (v46_7E)
						{
						//v42_6A = 85;
							v44 = 3;
							//v21_A[0] = *(_WORD *)& SPELLS_BEGIN_BUFFER_DA818[80 * v41_66 + 22];
							//v21_A[1] = *(_WORD *)& SPELLS_BEGIN_BUFFER_DA818[80 * v41_66 + 48];
							//v21_A[2] = *(_WORD *)& SPELLS_BEGIN_BUFFER_DA818[80 * v41_66 + 74];
							v21_A[0] = SPELLS_BEGIN_BUFFER_str[v41_66].subspell[0].word_0x16x;
							v21_A[1] = SPELLS_BEGIN_BUFFER_str[v41_66].subspell[1].word_0x16x;
							v21_A[2] = SPELLS_BEGIN_BUFFER_str[v41_66].subspell[2].word_0x16x;
							//*(Bit16s*)&array_E2A74[0x9fe] = v25;
							str_E2A74[85].axis_2[3] = v25;
							//*(Bit16s*)&array_E2A74[0xa00] = v37_56;
							str_E2A74[85].axis_2[4] = v37_56;
							v13_cl = 1;
							v34 = 3;
							v45 = v36_52x->dword_0xA4_164x->str_611.byte_0x459_1113;
						}
					break;
				}
				case 1: {//loc_8903C//26a03c
					if (v46_7E)
					{
						//v42_6A = 0x45;
						//v21_A[0] = *(Bit16s*)&array_E2A74[0x81a];
						v21_A[0] = str_E2A74[69].axis_2[1];
						v13_cl = 1;
						//*(Bit16s*)&array_E2A74[0x81e] = v11_edi + 33;
						str_E2A74[69].axis_2[3] = v11_edi + 33;
						if (v35_4E > 0)
							str_E2A74[69].axis_2[3] = v11_edi + 33 + v20__2;
						//*(Bit16s*)&array_E2A74[0xa + 30* v42_6A] = v37_56 + 29;
						str_E2A74[69].axis_2[4] = v37_56 + 29;
					}
					break;
				}
				case 2: {//loc_890A2
					if (v46_7E)
					{
						for (j = 0; j < 3 && !v13_cl; ++j)
						{
							v31x = &v39_5Ex[j];
							if (!(!v31x->dword_A || v40_62x && v40_62x->dword_0x90_144 >= v31x->dword_A))
							{
								//v42_6A = 70;
								//v21_A[0] = *(Bit16s*)&array_E2A74[0x838];
								v21_A[0] = str_E2A74[70].axis_2[1];
								str_E2A74[70].axis_2[3] = v11_edi + j * v20__2 + v20__2 / 2;
								v13_cl = 1;
								str_E2A74[70].axis_2[4] = v32 - v10_esi + v10_esi / 2;
							}
						}						
					}
					break;
				}
				case 3: {//loc_8914B
					if (v46_7E)
					{
						if (v35_4E)
						{
							//v42_6A = 71;
							//v21_A[0] = *(Bit16s*)&array_E2A74[0x856];
							v21_A[0] = str_E2A74[71].axis_2[1];
							str_E2A74[71].axis_2[3] = v20__2 / 2 + v11_edi + v35_4E * v20__2;
							v13_cl = 1;
							str_E2A74[71].axis_2[4] = v27_2E;
						}
					}
					break;
				}
				case 4: {//loc_89195
					if (v46_7E)
					{
						v235_1Ex = &v39_5Ex[v36_52x->dword_0xA4_164x->str_611.byte_0x459_1113];
						v14_al = !v235_1Ex->dword_A || v40_62x && v40_62x->dword_0x90_144 >= v235_1Ex->dword_A;
						if (v14_al)
						{
							//v42_6A = 40;
							//v21_A[0] = *(Bit16s*)&array_E2A74[0x4b4];
							v21_A[0] = str_E2A74[40].axis_2[1];
							str_E2A74[40].axis_2[3] = v33_46;
							v13_cl = 1;
							str_E2A74[40].axis_2[4] = v29_36 + ((v7_ebx - (__CFSHL__(v7_ebx >> 31, 2) + 4 * (v7_ebx >> 31))) >> 2);
						}
					}
					break;
				}
				case 5: {//loc_89217
					if (v46_7E)
					{
						//v42_6A = 42;
						//v21_A[0] = *(Bit16s*)&array_E2A74[0x4f0];
						v21_A[0] = str_E2A74[42].axis_2[1];
						v43_6E = v36_52x->dword_0xA4_164x->str_611.byte_0x459_1113;
						str_E2A74[42].axis_2[3] = v28_32 + v11_edi + v43_6E * v20__2;
						v13_cl = 1;
						str_E2A74[42].axis_2[4] = v27_2E;
					}
					break;
				}
				case 6: {//loc_89263
					
					if (v46_7E)
					{
						v17_12x = x_DWORD_EA3E4[v36_52x->dword_0xA4_164x->str_611.array_0x333_819x.word[v41_66]];
						if (v17_12x > x_DWORD_EA3E4[0])
						{
							if (v41_66 == 2)
							{
								if (v36_52x->dword_0x90_144 < v17_12x->dword_0x8C_140)
									v13_cl = 1;
							}
							else
							{
								v13_cl = sub_68D50(v17_12x, v36_52x) == 0;
							}
							if (v13_cl)
							{
								//v42_6A = 41;
								//v21_A[0] = *(Bit16s*)&array_E2A74[0x4d2];
								v21_A[0] = str_E2A74[41].axis_2[1];
								str_E2A74[41].axis_2[3] = v33_46;
								str_E2A74[41].axis_2[4] = v29_36 + ((v7_ebx - (__CFSHL__(v7_ebx >> 31, 2) + 4 * (v7_ebx >> 31))) >> 2);
							}
						}
					}
					break;
				}
				}
				//pre_sub_4A190(0x269d1c+(Bit8u)str_unk_1804B0ar.byte_0xa4,0);
			}
			if ((uint8_t)++str_unk_1804B0ar.byte_0xa4 > 7u)
				str_unk_1804B0ar.byte_0xa4 = 0;
		}
		if (v42_6A)
			sub_884D0(v42_6A, v34, v21_A, v44, v45);
	}
	return v42_6A;
}

//----- (00089360) --------------------------------------------------------
char sub_89360()//26a360
{
	char v0; // al
	int v1; // ebx
	//int v2; // eax
	//int v4; // [esp+0h] [ebp-4h]

	v0 = 0;
	v1 = 0;
	if (str_unk_1804B0ar.byte_0xa7)
	{
		str_unk_1804B0ar.byte_0xa7 = 0;
		if (str_unk_1804B0ar.byte_0xa8 && D41A0_BYTESTR_0.word_0xe > 1u)
		{
			//*(Bit16s*)&array_E2A74[0xb48] = str_unk_1804B0ar.word_0x9a;
			str_E2A74[96].axis_2[3] = str_unk_1804B0ar.word_0x9a;
			v1 = 96;
			//*(Bit16s*)&array_E2A74[0xb4a] = str_unk_1804B0ar.word_0x9c;
			str_E2A74[96].axis_2[4] = str_unk_1804B0ar.word_0x9c;
		}
		else
		{
			v0 = 1;
		}
	}
	else
	{
		v0 = 1;
		str_unk_1804B0ar.byte_0xa7 = 1;
	}
	if (v0)
	{
		v1 = 95;
		//*(Bit16s*)&array_E2A74[0xb2a] = str_unk_1804B0ar.word_0x96;
		str_E2A74[95].axis_2[3] = str_unk_1804B0ar.word_0x96;
		str_unk_1804B0ar.byte_0xa8 = 0;
		//*(Bit16s*)&array_E2A74[0xb2c] = str_unk_1804B0ar.word_0x98;
		str_E2A74[95].axis_2[4] = str_unk_1804B0ar.word_0x98;
	}
	if (v1)
	{
		//v2 = 15 * v1;
		//LOWORD(v2) = *(Bit16s*)&array_E2A74[0x4+30 * v1];
		//v4 = v2;
		sub_884D0(v1, 1, &str_E2A74[v1].axis_2[1], 2, 0);
	}
	return v1;
}

//----- (00089420) --------------------------------------------------------
void sub_89420(type_sub_str_unk_1804B0ar* a1x, const char *a2)//26a420
{
	int result; // eax
	unsigned int v3; // kr04_4
	signed int v4; // ecx
	signed int v5; // ebx
	unsigned int v6; // ecx
	unsigned int v7; // edx
	x_BYTE *i; // ecx
	int16_t v9; // [esp+4h] [ebp-4h]

	//result = 0;
	v3 = strlen(a2) + 1;
	v9 = 1;
	a1x->word_0x4 = 0;
	a1x->word_0x6 = 0;
	if (v3 != 1)
	{
		//HIWORD(result) = 0;
		v4 = a1x->word_0x10 * strlen(a2);
		v5 = a1x->word_0xc;
		if (v4 <= v5)
		{
			a1x->word_0x4 = v4;
		}
		else
		{
			//result = v5 / 2;
			if (v4 % v5 < v5 / 2)
			{
				while (1)
				{
					//result = v5 / 2;
					if (v4 % v5 >= v5 / 2 || v5 <= 0)
						break;
					v5 -= a1x->word_0x10;
				}
			}
			if (v5 > 0)
			{
				result = (v5 + a1x->word_0x10 - 1) / a1x->word_0x10;
				v9 = 0;
				// FIXME: types
				// v6 = (unsigned int)a2;
				// FIXME: types
				// v7 = (unsigned int)&a2[v3 - 1];
				while (v6 < v7)
				{
					// FIXME: types
					// // for (i = (x_BYTE *)(result + v6); *i != 32 && (unsigned int)i < v7; i--)
					// 	;
					// FIXME: types
					// v6 = (unsigned int)(i + 1);
					v9++;
				}
				a1x->word_0x4 = v5;
			}
		}
		//LOWORD(result) = a1x->word_0x12;
		a1x->word_0x6 = a1x->word_0x12 * v9;
	}
	//return result;
}

//----- (00089520) --------------------------------------------------------
void sub_89520(type_sub_str_unk_1804B0ar* a1x)//26a520
{
	int v1; // edi
	int v2; // ecx
	int v3; // esi
	int result; // eax
	int v5; // [esp+0h] [ebp-Ch]
	int v6; // [esp+4h] [ebp-8h]
	int v7; // [esp+8h] [ebp-4h]

	v5 = a1x->word_0x4;
	v1 = a1x->word_0x6;
	v2 = a1x->word_0x0 - v5 / 2;
	v3 = a1x->word_0x2 - v1 / 2;
	if (v2 < a1x->word_0x14)
		v2 = a1x->word_0x14;
	if (v3 < a1x->word_0x18)
		v3 = a1x->word_0x18;
	v7 = a1x->word_0x16;
	if (v2 + v5 >= v7)
		LOWORD(v2) = v7 - v5;
	v6 = a1x->word_0x1a;
	if (v3 + v1 >= v6)
		v3 = v6 - v1;
	a1x->word_0x0 = v2 + a1x->word_0x4 / 2;
	a1x->word_0x8 = v2;
	a1x->word_0xa = v3;
	result = v3 + v1 / 2;
	a1x->word_0x2 = result;
	//return result;
}

//----- (000895D0) --------------------------------------------------------
void sub_895D0_draw_textbox(type_sub_str_unk_1804B0ar* a1y, char *a2)//26a5d0
{
	char* v2; // edi
	int result; // eax
	char* i; // ebx
	char *v5; // eax
	char* v6; // edx
	char v7; // cl
	uint8_t v8; // ST0C_1
	int16_t v9; // ST04_2
	int v10; // ebx
	char v11x[1000]; // [esp+0h] [ebp-12h]
	int v12; // [esp+80h] [ebp+6Eh]
	int v13; // [esp+84h] [ebp+72h]
	char* v14; // [esp+88h] [ebp+76h]

	//a1x fix - struct Bit16u and Bit8u

	v14 = a2;
	v13 = a1y->word_0xa;
	v2 = &a2[strlen(a2)];
	result = a1y->word_0x4 / a1y->word_0x10;
	v12 = a1y->word_0x4 / a1y->word_0x10;
	if (v2 > a2)
	{
		do
		{
			for (i = (char *)(v12 + v14); i[0] != 32 && i < v2; i--)
				;
			v5 = v14;
			v6 = v11x;
			while (v5 < i)
			{
				v6++;
				v7 = *v5++;
				*(v6 - 1) = v7;
			}
			v6[0] = 0;
			v8 = a1y->byte_0x30;
			v9 = a1y->word_0x8;
			v14 = (i + 1);
			v10 = v13;
			sub_2BC10_draw_text(v11x, v9, v13, v8);
			result = a1y->word_0x12;
			v13 = result + v10;
		} while (v2 > v14);
	}
	//return result;
}

//----- (00089690) --------------------------------------------------------
void sub_89690_draw_frame(type_sub_str_unk_1804B0ar* a1x)//26a690
{
	int16_t v1; // ST0C_2
	int v2; // edi
	int v3; // esi
	int16_t v4; // bx
	int16_t v5; // bx
	//int result; // eax
	int i; // ebx
	int16_t v8; // [esp+Ch] [ebp-1Ch]
	int v9; // [esp+10h] [ebp-18h]
	int16_t v10; // [esp+14h] [ebp-14h]
	int v11; // [esp+18h] [ebp-10h]
	int v12; // [esp+1Ch] [ebp-Ch]
	int v13; // [esp+20h] [ebp-8h]
	int16_t v14; // [esp+24h] [ebp-4h]

	/*v11 = *(uint8_t *)(**filearray_2aa18c[6] + 1042);
	v12 = *(uint8_t *)(**filearray_2aa18c[6] + 1036);
	v1 = *(uint8_t *)(**filearray_2aa18c[6] + 1031);
	v10 = *(uint8_t *)(**filearray_2aa18c[6] + 1037);*/
	v11 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[173].width;
	v12 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[172].width;
	v1 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[171].height;
	v10 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[172].height;
	v2 = a1x->word_0x24 - v12;
	v3 = a1x->word_0x28 + a1x->word_0x24;
	//v14 = a1[19] - *(uint8_t *)(**filearray_2aa18c[6] + 1043);
	v14 = a1x->word_0x26 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[173].height;
	v8 = a1x->word_0x26 + a1x->word_0x2a;
	//v4 = a1[19] - *(uint8_t *)(**filearray_2aa18c[6] + 1043);
	v4 = a1x->word_0x26 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[173].height;
	v9 = a1x->word_0x6 / a1x->word_0x12;
	/*sub_2BB40_draw_bitmap(a1[18] - v12, v14, (Bit8u**)(**filearray_2aa18c[6] + 1026));
	sub_2BB40_draw_bitmap(v3, v4, (Bit8u**)(**filearray_2aa18c[6] + 1026));*/
	sub_2BB40_draw_bitmap(a1x->word_0x24 - v12, v14, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[171]);
	sub_2BB40_draw_bitmap(v3, v4, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[171]);
	v5 = v1 + v14;
	for (v13 = 0;v13 < v9; v13++)
	{
		sub_2BB40_draw_bitmap(v2, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[172]);
		sub_2BB40_draw_bitmap(v3, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[172]);
		v5 += v10;		
	}
	sub_2BB40_draw_bitmap(v2, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[171]);
	sub_2BB40_draw_bitmap(v3, v5, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[171]);
	
	for (i = v2 + v12; i < v3; i += v11)
	{
		sub_2BB40_draw_bitmap(i, v14, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[173]);
		sub_2BB40_draw_bitmap(i, v8, (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[173]);
	}
	//return result;
}

int debugcounter_sub_89830 = 0;
//----- (00089830) --------------------------------------------------------
void sub_89830(type_sub_str_unk_1804B0ar* a1x)//26a830
{
	int v1; // eax
	int16_t v2; // si
	int result; // eax
	int v4; // [esp+0h] [ebp-4h]

	if (debugcounter_sub_89830 >= 1)
		debugcounter_sub_89830 = debugcounter_sub_89830;

	v1 =a1x->word_0x1c;//64 //90
	v2 = v1 + 25;//+0x50-0x37
	v4 = a1x->word_0x1e;	//01
	if (a1x->word_0x16 < v1 + 135)//00<73+135
		v2 = v1 - 135;
	result = v4 - 94;
	if (v4 - 94 + 28 < a1x->word_0x18)
		result = v4 + 66;
	a1x->word_0x0 = v2;
	a1x->word_0x2 = result;
	debugcounter_sub_89830++;
	//return result;
}

//----- (000898A0) --------------------------------------------------------
void sub_898A0(type_sub_str_unk_1804B0ar* a1x)//26a8a0
{
	//x_WORD *result; // eax
	int v2; // ebx
	int v3; // edx
	int16_t v4; // dx
	int v5; // edx
	int v6; // ebx
	int16_t v7; // dx

	//result = a1x;
	v2 = a1x->word_0x24;
	v3 = a1x->word_0x1c;
	if (v3 >= v2 - 30)
	{
		if (v3 <= a1x->word_0x28 + v2 + 30)
			v4 = a1x->word_0x0;
		else
			v4 = a1x->word_0x28 + a1x->word_0x24;
	}
	else
	{
		v4 = a1x->word_0x24 - 2;
	}
	a1x->word_0x20 = v4;
	v5 = a1x->word_0x26;
	v6 = a1x->word_0x1e;
	if (v6 >= v5 - 30)
	{
		if (v6 > a1x->word_0x2a + v5 + 30)
		{
			a1x->word_0x22 = a1x->word_0x2a + a1x->word_0x26;
			return;// result;
		}
		v7 = a1x->word_0x2;
	}
	else
	{
		v7 = a1x->word_0x26 - 2;
	}
	a1x->word_0x22 = v7;
	//return result;
}

//----- (00089920) --------------------------------------------------------
void sub_89920(type_sub_str_unk_1804B0ar* a1x, int16_t a2, Bit16s* a3x)//26a920
{
	signed int v3; // edx
	int v4; // ebx
	//int result; // eax
	unsigned int v6; // kr04_4
	//int16_t v7; // dx

	v3 = 0;
	v4 = 0;
	while (v3 < a2)
	{
		//result = 0;
		v6 = strlen((const char *)x_DWORD_E9C4C_langindexbuffer[a3x[v3]]) + 1;
		/*
		FireBall
		Rapid Fire
		Fire Storm
		*/
		if ((signed int)(v6 - 1) > v4)
			v4 = v6 - 1;
		v3++;
	}
	//v7 = a1[9];
	a1x->word_0x4 = a1x->word_0x10 * v4;
	a1x->word_0x6 = a1x->word_0x12 * a2;
	//return result;
}

//----- (00089980) --------------------------------------------------------
void sub_89980(type_sub_str_unk_1804B0ar* a1x)//26a980
{
	int16_t v1; // di
	int v2; // ecx
	int16_t v3; // ST00_2
	int16_t v4; // ax
	int v5; // edx
	int16_t v6; // ax
	int v7; // edx
	int result; // eax

				/*v1 = *(uint8_t *)(**filearray_2aa18c[6] + 1043);
				v2 = *(uint8_t *)(**filearray_2aa18c[6] + 1037);
				v3 = *(uint8_t *)(**filearray_2aa18c[6] + 1031);
				v4 = *(uint8_t *)(**filearray_2aa18c[6] + 1042)
					* (uint16_t)((*(uint8_t *)(**filearray_2aa18c[6] + 1042) - 1 + a1[2] + 8)
				    / *(uint8_t *)(**filearray_2aa18c[6] + 1042));*/
	//filearray_2aa18c[filearrayindex_HFONT3DATTAB]._posistruct[85].width
	v1 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[173].height;//173 y
	v2 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[172].height;//172 y
	v3 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[171].height;//171 y
	v4 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[173].width
		* (uint16_t)(((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[173].width - 1 + a1x->word_0x4 + 8)/(*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[173].width);
	v5 = a1x->word_0x4;
	a1x->word_0x28 = v4;
	a1x->word_0x24 = a1x->word_0x8 - (v4 - v5) / 2;
	v6 = (v2 - 1 + a1x->word_0x6) / v2 * v2 + 2 * (v3 - v1);
	v7 = a1x->word_0x6;
	a1x->word_0x2a = v6;
	result = (v6 - v7) / 2;
	a1x->word_0x26 = a1x->word_0xa - result;
	//return result;
}

//----- (00089A30) --------------------------------------------------------
void sub_89A30_draw_line(type_sub_str_unk_1804B0ar* a1x)//26aa30
{
	int16_t v1; // si
	int16_t result = 0; // ax //fix it

	v1 = ((x_WORD_180660_VGA_type_resolution & 1) != 0) + 1;
	if (a1x->word_0x20 != a1x->word_0x0 || (result = a1x->word_0x22, result != a1x->word_0x2))
	{
		sub_2BD10_draw_line(a1x->word_0x1c, a1x->word_0x1e, a1x->word_0x20, a1x->word_0x22, *xadataclrd0dat.var28_begin_buffer[0]);
		/*result = */sub_2BD10_draw_line(a1x->word_0x1c + v1, a1x->word_0x1e, v1 + a1x->word_0x20, a1x->word_0x22, (*xadataclrd0dat.var28_begin_buffer)[0xf00]);
	}
	//return result;
}

//----- (00089AC0) --------------------------------------------------------
void sub_89AC0(x_BYTE *a1, int a2)//26aac0
{
	//int result; // eax
	signed int v3; // eax

	//result = a2;
	if ((uint16_t)a2 < 0x5Cu)
		a1[0] = 0;
	else {
		if ((uint16_t)a2 <= 0x5Cu)
		{
			// FIXME: types
			// sprintf(a1, "[F1] %s", x_DWORD_E9C4C_langindexbuffer[14]);//Toggle help on / off
			return;
		}
		if ((x_WORD)a2 == 96)
		{
			v3 = sub_61790((uint8_t)str_unk_1804B0ar.byte_0xa8);
			// FIXME: types
			// /*result = */sprintf(a1, (const char *)x_DWORD_E9C4C_langindexbuffer[353], (&off_D93A0_wizards_names2)[v3]);//Number of times you have killed %s
		}
		else
		{
			a1[0] = 0;
		}
	}
	//return result;
}

//----- (00089B60) --------------------------------------------------------
Bit16s sub_89B60_aplicate_setting(Bit8u a1)//26ab60
{
	Bit16s v1; // esi
	int16_t v2; // ax
	bool v3; // zf


	v1 = -1;
	unk_18058Cstr.x_DWORD_1805AC = 0;
	unk_18058Cstr.x_DWORD_1805A8 = 0;
	unk_18058Cstr.x_DWORD_1805A4 = 0;
	unk_18058Cstr.x_DWORD_180598 = 0;
	unk_18058Cstr.x_DWORD_180594 = 0;
	unk_18058Cstr.x_DWORD_180590 = 0;
	unk_18058Cstr.x_DWORD_1805A0 = 0;
	unk_18058Cstr.x_DWORD_18059C = 0;
	unk_18058Cstr.x_WORD_1805C8 = 0;
	switch (a1)
	{
	case 1u:
		v1 = sub_8B600(unk_18058Cstr);//fix it
		if ((int16_t)v1 != -1)
			goto LABEL_3;
		break;
	case 2u:
		if ((uint16_t)sub_75650())//fix it
		{
			v1 = 1;
			myprintf("VFX INITIALISED\n");
			unk_18058Cstr.x_WORD_1805C8 = 1;
			v2 = a1;
			unk_18058Cstr.x_DWORD_1805A0 = 0;
			unk_18058Cstr.x_DWORD_18059C = 0;
			goto LABEL_12;
		}
		break;
	case 4u:
		memset(unk_180560x, 0, 44);//fix it
		// FIXME: types
		// sub_8BB40((int)unk_180560x, 8);
		v3 = unk_180560x[0x18] == 0;
		goto LABEL_10;
	case 6u:
		memset(unk_180560x, 0, 44);//fix it
		v1 = 1;
		v2 = a1;
		goto LABEL_12;
	case 7u:
		v2 = a1;
		v1 = 1;
		goto LABEL_12;
	case 8u:
	case 9u:
	LABEL_3:
		unk_18058Cstr.x_WORD_1805C8 = 1;
		break;
	case 0xBu:
		memset(unk_180560x, 0, 44);//fix it
		// FIXME: types
		// sub_8BB40((int)unk_180560x, 4);
		v3 = unk_180560x[0x18] == 0;
	LABEL_10:
		if (!v3)//fix it
		{
			// FIXME: types
			// sub_8BBE0((int)unk_180560x);
			v1 = 1;
			v2 = a1;
		LABEL_12:
			unk_18058Cstr.x_WORD_1805C2_joystick = v2;
		}
		break;
	default:
		break;
	}
	unk_18058Cstr.x_WORD_1805C2_joystick = a1;
	if ((int16_t)v1 > 0)
		x_BYTE_E36D1 = a1;
	return v1;
}




//----- (00089D10) --------------------------------------------------------
int sub_89D10_analyze_keys()//26ad10
{
	//char v0; // bl
	//char v2; // dl
	uint8_t v3; // al
	//int v4; // eax
	type_str_611* v5; // ecx
	uint8_t v6; // al
	int v7; // ebx
	signed int v8; // edx
	int v9; // edx
	signed int v10; // eax
	signed int v11; // eax
	signed int v12; // ecx
	int v13; // eax
	signed int v14; // edx
	signed int v15; // eax
	int v16; // ecx
	signed int v17; // eax
	signed int v18; // eax
	uint8_t v19; // al
	int v20; // esi
	int v21; // ecx
	int v22; // ebx
	int v23; // eax
	int v24; // ecx
	int v25; // eax
	int64_t v26; // rax
	int64_t v27; // rax
	int16_t v28; // si
	//char v29; // dl
	//char v30; // cl
	uint8_t v31; // al
	//int v32; // edx
	uint8_t v33; // al
	type_str_611* v34; // edx
	signed int v35; // edx
	signed int v36; // eax
	char v37; // ch
	int v38; // edx
	int v39; // edx
	signed int v40; // edx
	int v41; // ebx
	signed int v42; // eax
	signed int v43; // ecx
	signed int v44; // eax
	int v45; // ebx
	int v46; // ecx
	signed int v47; // eax
	int v48; // esi
	signed int v49; // eax
	uint8_t v50; // al
	int v51; // esi
	int v52; // ecx
	int v53; // ebx
	int v54; // eax
	int v55; // ecx
	char v56; // [esp+0h] [ebp-48h]
	int v57; // [esp+34h] [ebp-14h]
	int v58; // [esp+38h] [ebp-10h]
	int v59; // [esp+3Ch] [ebp-Ch]
	int v60; // [esp+40h] [ebp-8h]
	int v61; // [esp+44h] [ebp-4h]

		



	v61 = -1;
	if (!x_BYTE_E36D0)
	{
		unk_18058Cstr.x_DWORD_1805A0 = 0;
		unk_18058Cstr.x_DWORD_18059C = 0;
		x_BYTE_E36D0 = 1;
	}
	if (!x_BYTE_E36D1)
		return v61;
	switch (unk_18058Cstr.x_WORD_1805C2_joystick)
	{
	case 1:
	case 8:
	case 12:
		unk_18058Cstr.x_WORD_1805C8 = 1;
		v61 = sub_8B790(unk_18058Cstr);
		if (unk_18058Cstr.x_WORD_1805C2_joystick != 8 && unk_18058Cstr.x_WORD_1805C2_joystick != 12)
		{
			unk_18058Cstr.x_DWORD_1805B0_mouse.x = x_WORD_E3760_mouse.x;
			unk_18058Cstr.x_DWORD_1805B0_mouse.y = x_WORD_E3760_mouse.y;
			unk_18058Cstr.x_DWORD_1805B8_mouse_position_x = x_WORD_E375C_mouse_position_x;
			unk_18058Cstr.x_DWORD_1805BC_mouse_position_y = x_WORD_E375E_mouse_position_y;
			//v0 = x_BYTE_180664[x_BYTE_EB39E_keys[0]];
			unk_18058Cstr.x_WORD_1805C0_arrow_keys = 0;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[0]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys = 1;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[1]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 2;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[2]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 4;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[3]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 8;
			unk_18058Cstr.x_DWORD_18059C = 0;
			if (x_WORD_180746_mouse_left_button)
				unk_18058Cstr.x_DWORD_18059C = 1;
			if (x_WORD_180744_mouse_right_button)
				unk_18058Cstr.x_DWORD_18059C |= 2;
			if (x_WORD_18074C_mouse_left2_button)
				unk_18058Cstr.x_DWORD_18059C |= 4;
			if (x_WORD_18074A_mouse_right2_button)
				unk_18058Cstr.x_DWORD_18059C |= 8;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[5]])
				unk_18058Cstr.x_DWORD_18059C |= 0x10;
		}
		unk_18058Cstr.x_DWORD_180594 *= 4;
		unk_18058Cstr.x_DWORD_180590 = (unk_18058Cstr.x_DWORD_180590 << 11) / 360;
		if (unk_18058Cstr.x_WORD_1805C2_joystick == 8)
			goto LABEL_53;
		if (unk_18058Cstr.x_WORD_1805C2_joystick == 12)
			goto LABEL_217;
		return v61;
	case 2:
	case 9:
	case 13:
		unk_18058Cstr.x_WORD_1805C8 = 1;
		sub_75910();
		if (unk_18058Cstr.x_WORD_1805C2_joystick != 9 && unk_18058Cstr.x_WORD_1805C2_joystick != 13)
		{
			unk_18058Cstr.x_DWORD_1805B0_mouse.x = x_WORD_E3760_mouse.x;
			unk_18058Cstr.x_DWORD_1805B0_mouse.y = x_WORD_E3760_mouse.y;
			unk_18058Cstr.x_DWORD_1805B8_mouse_position_x = x_WORD_E375C_mouse_position_x;
			unk_18058Cstr.x_DWORD_1805BC_mouse_position_y = x_WORD_E375E_mouse_position_y;
			//v2 = x_BYTE_180664[x_BYTE_EB39E_keys[0]];
			unk_18058Cstr.x_WORD_1805C0_arrow_keys = 0;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[0]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys = 1;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[1]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 2;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[2]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 4;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[3]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 8;
			unk_18058Cstr.x_DWORD_18059C = 0;
			if (x_WORD_180746_mouse_left_button)
				unk_18058Cstr.x_DWORD_18059C = 1;
			if (x_WORD_180744_mouse_right_button)
				unk_18058Cstr.x_DWORD_18059C |= 2;
			if (x_WORD_18074C_mouse_left2_button)
				unk_18058Cstr.x_DWORD_18059C |= 4;
			if (x_WORD_18074A_mouse_right2_button)
				unk_18058Cstr.x_DWORD_18059C |= 8;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[5]])
				unk_18058Cstr.x_DWORD_18059C |= 0x10;
		}
		unk_18058Cstr.x_DWORD_180590 = -2048 * x_WORD_17D6CCar[0] / 0xFFFFu & 0x7FF;
		if (x_BYTE_1806E4 == 46)
			sub_759B0_set_mouse_minmax_vert();
		if (unk_18058Cstr.x_WORD_1805C2_joystick == 9)
			goto LABEL_53;
		if (unk_18058Cstr.x_WORD_1805C2_joystick == 13)
			goto LABEL_217;
		unk_18058Cstr.x_DWORD_180594 = 0;
		return v61;
	case 4:
	LABEL_53:
		unk_18058Cstr.x_WORD_1805C0_arrow_keys = 0;
		// FIXME: types
		// sub_8BBE0((int)unk_180560x);
		goto LABEL_54;
	case 6:
		memset(&v56, 0, 50);
		// FIXME: types
		// sub_8C140(*(x_WORD *)x_DWORD_E36C4, (int)&v56);
		unk_18058Cstr.x_DWORD_180590 = *(x_DWORD *)(x_DWORD_E36C4 + 4);
		v28 = *(x_WORD *)(x_DWORD_E36C4 + 62);
		unk_18058Cstr.x_DWORD_180594 = *(x_DWORD *)(x_DWORD_E36C4 + 8);
		if (!v28)
		{
			unk_18058Cstr.x_DWORD_1805B0_mouse.x = x_WORD_E3760_mouse.x;
			unk_18058Cstr.x_DWORD_1805B0_mouse.y = x_WORD_E3760_mouse.y;
			unk_18058Cstr.x_DWORD_1805B8_mouse_position_x = x_WORD_E375C_mouse_position_x;
			unk_18058Cstr.x_DWORD_1805BC_mouse_position_y = x_WORD_E375E_mouse_position_y;
			//v29 = x_BYTE_180664[x_BYTE_EB39E_keys[0]];
			unk_18058Cstr.x_WORD_1805C0_arrow_keys = 0;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[0]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys = 1;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[1]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 2;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[2]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 4;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[3]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 8;
			unk_18058Cstr.x_DWORD_18059C = 0;
			if (x_WORD_180746_mouse_left_button)
				unk_18058Cstr.x_DWORD_18059C = 1;
			if (x_WORD_180744_mouse_right_button)
				unk_18058Cstr.x_DWORD_18059C |= 2;
			if (x_WORD_18074C_mouse_left2_button)
				unk_18058Cstr.x_DWORD_18059C |= 4;
			if (x_WORD_18074A_mouse_right2_button)
				unk_18058Cstr.x_DWORD_18059C |= 8;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[5]])
			{
				unk_18058Cstr.x_DWORD_18059C |= 0x10;
				return v61;
			}
			return v61;
		}
		if (v28 != 4)
		{
			if (v28 != 11)
				return v61;
			unk_180560x[0x1a] = *(x_BYTE *)(x_DWORD_E36C4 + 16);
			unk_180560x[0x1c] = unk_18058Cstr.x_DWORD_1805B0_mouse.x;
			unk_180560x[0x1d] = unk_18058Cstr.x_DWORD_1805B0_mouse.y;
		LABEL_218:
			if (!(unk_180560x[0x1a] & 1) || unk_180560x[0x1b] & 1)
			{
				if (!(unk_180560x[0x1a] & 1) && unk_180560x[0x1b] & 1)
				{
					LOBYTE(unk_18058Cstr.x_DWORD_18059C) = unk_18058Cstr.x_DWORD_18059C & 0xFA;
					unk_180560x[0x1b] &= 0xFEu;
				}
			}
			else
			{
				unk_18058Cstr.x_DWORD_1805B8_mouse_position_x = unk_18058Cstr.x_DWORD_1805B0_mouse.x;
				unk_18058Cstr.x_DWORD_18059C |=0xffffff05u;
				unk_18058Cstr.x_DWORD_1805BC_mouse_position_y = unk_18058Cstr.x_DWORD_1805B0_mouse.y;
				unk_180560x[0x1b] |= 1u;
			}
			if (!(unk_180560x[0x1a] & 2) || unk_180560x[0x1b] & 2)
			{
				if (!(unk_180560x[0x1a] & 2) && unk_180560x[0x1b] & 2)
				{
					unk_18058Cstr.x_DWORD_18059C |= 0xfffffff5u;
					unk_180560x[0x1b] &= 0xFDu;
				}
			}
			else
			{
				unk_18058Cstr.x_DWORD_1805B8_mouse_position_x = unk_18058Cstr.x_DWORD_1805B0_mouse.x;
				unk_18058Cstr.x_DWORD_18059C |= 0xffffff0au;
				unk_18058Cstr.x_DWORD_1805BC_mouse_position_y = unk_18058Cstr.x_DWORD_1805B0_mouse.y;
				unk_180560x[0x1b] |= 2u;
			}
			if (x_BYTE_180664[x_BYTE_EB39E_keys[5]])
			{
				unk_180560x[0x1b] &= 0xF7u;
				unk_180560x[0x1a] &= 0xF7u;
				unk_18058Cstr.x_DWORD_18059C |= 0xffffff10u;
			}
			else if (!(unk_180560x[0x1a] & 8) || unk_180560x[0x1b] & 8 || unk_18058Cstr.x_DWORD_18059C & 0x10)
			{
				if (unk_180560x[0x1a] & 8 || !(unk_180560x[0x1b] & 8) || unk_18058Cstr.x_DWORD_18059C & 0x10)
				{
					if (unk_180560x[0x1a] & 8 && unk_180560x[0x1b] & 8 && unk_18058Cstr.x_DWORD_18059C & 0x10)
					{
						unk_180560x[0x1b] &= 0xF7u;
						unk_180560x[0x1a] &= 0xF7u;
					}
					else if (!(unk_180560x[0x1a] & 8) && !(unk_180560x[0x1b] & 8) && unk_18058Cstr.x_DWORD_18059C & 0x10)
					{
						unk_18058Cstr.x_DWORD_18059C |= 0xffffffEF;
					}
				}
				else
				{
					unk_18058Cstr.x_DWORD_18059C |= 0xffffff10;
				}
			}
			else
			{
				unk_180560x[0x1b] |= 8u;
			}
			v31 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221;
			if (v31 < 5u)
			{
				if (v31 == 3)
				{
					//if ( 82 - *(uint8_t *)(**filearray_2aa18c[6] + 934) <= x_DWORD_1805B0_mouse.x )
					if (82 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].width <= unk_18058Cstr.x_DWORD_1805B0_mouse.x)
					{
					  if (unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 384 )
					  {
						if ( x_WORD_180660_VGA_type_resolution & 1 )
						  v49 = 400;
						else
						  v49 = 480;
						v60 = v49 - 72;
						if ( v49 - 46 >= unk_18058Cstr.x_DWORD_1805B0_mouse.y )
						  v50 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[260].width;
						else
						  v50 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[158].width;
						v42 = (signed int)v50 >> 2;
						/*v9 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 947) >> 1) + v60 + 26;
						v51 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1559) >> 1) + 4 + v60;*/
						v9 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[158].height >> 1) + v60 + 26;
						v51 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[260].height >> 1) + 4 + v60;
						v59 = 0;
						v60 = v51;
						v41 = 640;
						//v43 = *(uint8_t *)(**filearray_2aa18c[6] + 1559);
						v43 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[260].height;
					  }
					  else
					  {
						if ( x_WORD_180660_VGA_type_resolution & 1 )
						  v47 = 400;
						else
						  v47 = 480;
						v60 = v47 - 72;
						//v48 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 929) >> 1) + 32 + v47 - 72;
						v48 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[155].height >> 1) + 32 + v47 - 72;
						v59 = 0;
						v60 = v48;
						v41 = 640;
						v9 = v48;
						v42 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[155].width >> 2;
						v43 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[155].height >> 1;
					  }
					}
					else
					{
					  if ( x_WORD_180660_VGA_type_resolution & 1 )
						v44 = 400;
					  else
						v44 = 480;
					  v60 = v44 - 72;
					  //v45 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 935) >> 1) + 28 + v44 - 72;
					  v45 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].height >> 1) + 28 + v44 - 72;
					  v60 = v45;
					  //v59 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 934) >> 1) + 4;
					  //v46 = *(uint8_t *)(**filearray_2aa18c[6] + 935);
					  v59 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].width >> 1) + 4;
					  v46 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].height;
					  v9 = v45 + v46;
					  v43 = v46 >> 1;
					  //v42 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 934) >> 2;
					  //v41 = v59 + 640 - ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 934) >> 1);
					  v42 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].width >> 2;
					  v41 = v59 + 640 - ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].width >> 1);
					}
					goto LABEL_301;
				}
			}
			else if (v31 <= 5u || v31 == 8)
			{
				//v32 = (int)x_D41A0_BYTEARRAY_0 + 11230 + 2124 * D41A0_BYTESTR_0.word_0xc;				
				v33 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.str_611.byte_0x457_1111;
				v34 = &D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.str_611;
				if (v33)
				{
					if (v33 <= 2u)
					{
						//v58 = 3 * *(uint8_t *)(**filearray_2aa18c[6] + 982);
						v58 = 3 * (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[163].width;
						v37 = v34->byte_0x458_1112;
						if (v37 < 13)
							v38 = v37;
						else
							v38 = v37 - 13;
						/*v39 = *(uint8_t *)(**filearray_2aa18c[6] + 532)
							+ *(uint8_t *)(**filearray_2aa18c[6] + 538) * v38
							+ ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 538) >> 1)
							- (v58 >> 1);*/
						v39 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width
							+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].width * v38
							+ ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].width >> 1)
							- (v58 >> 1);
						v59 = v39;
						if (640 - v58 >= v39)
						{
							if (v39 < 0)
								v59 = 0;
						}
						else
						{
							v59 = 640 - v58;
						}
						v41 = v58 + v59;
						if (x_WORD_180660_VGA_type_resolution & 1)
							v40 = 400;
						else
							v40 = 480;
						/*v9 = v40
						   - 2 * *(uint8_t *)(**filearray_2aa18c[6] + 539)
						   - ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 539) >> 1);
						v60 = v9;
						v42 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 982) >> 2;
						v43 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 983) >> 1;*/
						v9 = v40
							- 2 * (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height
							- ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height >> 1);
						v60 = v9;
						v42 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[164].width >> 2;
						v43 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[164].height >> 1;
					}
					else
					{
						v41 = 640;
						v9 = 480;
						v42 = 12;
						v43 = 32;
						v59 = 0;
						v60 = 0;
					}
				}
				else
				{
					v41 = 640;
					v59 = 0;
					if (x_WORD_180660_VGA_type_resolution & 1)
						v35 = 400;
					else
						v35 = 480;
					//v9 = v35 - ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 539) >> 1);
					v9 = v35 - ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height>> 1);
					if (x_WORD_180660_VGA_type_resolution & 1)
						v36 = 400;
					else
						v36 = 480;
					//v60 = v36 - 2 * *(uint8_t *)(**filearray_2aa18c[6] + 539);
					//v60 += (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 539) >> 1;
					//v42 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 538) >> 2;
					//v43 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 539) >> 1;
					v60 = v36 - 2 * (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height;
					v60 += (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height >> 1;
					v42 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].width >> 2;
					v43 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height >> 1;
				}
				goto LABEL_301;
			}
			if (x_D41A0_BYTEARRAY_4_struct.byte_38546)
			{
				sub_30BE0(&v59, &v60);
				//v59 += (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1546) >> 1;
				//v52 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1547) >> 1) + v60;
				v59 += (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[258].width >> 1;
				v52 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[258].height >> 1) + v60;
				v60 = v52;
				//v42 = *(uint8_t *)(**filearray_2aa18c[6] + 1546);
				v42 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[258].width;
				v9 = v52;
				v41 = v42 + v59;
				v43 = 0;
			}
			else if (x_D41A0_BYTEARRAY_4_struct.byteindex_225)
			{
				v53 = x_D41A0_BYTEARRAY_4_struct.byteindex_186;
				v43 = 4;
				v60 = 67;
				v54 = (v53 >> 1) + (640 - v53) / 2;
				v9 = 393;
				unk_18058Cstr.x_DWORD_1805B0_mouse.x = v54;
				v41 = (v53 >> 1) + (640 - v53) / 2;
				v59 = v54;
				v42 = 0;
			}
			else if (x_D41A0_BYTEARRAY_4_struct.byte_38591)
			{
				sub_2FFE0(&v59, &v60, &v58, &v57);
				v58 -= 2;
				v41 = v58 + v59;
				v9 = 4 * v57 + 12 + v60;
				v43 = 0;
				v42 = 4;
				v60 += 4 * v57 + 12;
			}
			else if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
			{
				/*v58 = *(uint8_t *)(**filearray_2aa18c[6] + 1048);
				v57 = *(uint8_t *)(**filearray_2aa18c[6] + 1073)
					+ *(uint8_t *)(**filearray_2aa18c[6] + 1061)
					+ *(uint8_t *)(**filearray_2aa18c[6] + 1055)
					+ *(uint8_t *)(**filearray_2aa18c[6] + 1049);
				v60 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1049) >> 1) + (400 - v57) / 2 - 60;
				v59 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1048) >> 2) + (640 - v58) / 2;
				v55 = *(uint8_t *)(**filearray_2aa18c[6] + 1049);
				v9 = v57 + v60 - v55;
				v43 = v55 >> 2;
				v42 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1048) >> 2;
				v41 = v58 + v59 - ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1048) >> 1);*/
				v58 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[175].width;
				v57 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[179].height
					+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[177].height
					+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[176].height
					+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[175].height;
				v60 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[175].height >> 1) + (400 - v57) / 2 - 60;
				v59 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[175].width >> 2) + (640 - v58) / 2;
				v55 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[175].height;
				v9 = v57 + v60 - v55;
				v43 = v55 >> 2;
				v42 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[175].width >> 2;
				v41 = v58 + v59 - ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[175].width >> 1);
			}
			else
			{
				v41 = 640;
				v9 = 480;
				v43 = 32;
				v59 = 0;
				v60 = 0;
				v42 = 12;
			}
		LABEL_301:
			if (!(unk_18058Cstr.x_DWORD_18059C & 0x10)
				&& !(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
				&& !x_D41A0_BYTEARRAY_4_struct.byte_38546
				&& !x_D41A0_BYTEARRAY_4_struct.byteindex_225
				&& D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221 != 3)
			{
				if (unk_180560x[0x1a] & 4)
				{
					if (unk_180560x[0x1d] < 0)
						unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 1u;
					if (unk_180560x[0x1d] > 0)
						unk_18058Cstr.x_WORD_1805C0_arrow_keys |=0xff02;
					if (unk_180560x[0x1c] < 0)
						unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 0xff04;
					if (unk_180560x[0x1c] > 0)
						unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 0xff08;
				}
				else
				{
					x_WORD_E36CC = unk_180560x[0x1c];
					x_WORD_E36CE = unk_180560x[0x1d];
					unk_18058Cstr.x_DWORD_1805B0_mouse.x = 2 * unk_180560x[0x1c] + 320;
					unk_18058Cstr.x_DWORD_1805B0_mouse.y = 2 * unk_180560x[0x1d] + 200;
					if (x_BYTE_180664[x_BYTE_EB39E_keys[0]])
						unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 1;
					if (x_BYTE_180664[x_BYTE_EB39E_keys[1]])
						unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 2;
					if (x_BYTE_180664[x_BYTE_EB39E_keys[2]])
						unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 4;
					if (x_BYTE_180664[x_BYTE_EB39E_keys[3]])
					{
						unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 8;
						return v61;
					}
				}
				return v61;
			}
			if (unk_180560x[0x1d] >= 0)
			{
				if (unk_180560x[0x1d] > 0)
					unk_18058Cstr.x_DWORD_1805B0_mouse.y += v43;
			}
			else
			{
				unk_18058Cstr.x_DWORD_1805B0_mouse.y -= v43;
			}
			if (unk_180560x[0x1c] >= 0)
			{
				if (unk_180560x[0x1c] > 0)
					unk_18058Cstr.x_DWORD_1805B0_mouse.x += v42;
			}
			else
			{
				unk_18058Cstr.x_DWORD_1805B0_mouse.x -= v42;
			}
			if (unk_18058Cstr.x_DWORD_1805B0_mouse.x >= v59)
			{
				if (v41 < unk_18058Cstr.x_DWORD_1805B0_mouse.x)
					unk_18058Cstr.x_DWORD_1805B0_mouse.x = v41;
			}
			else
			{
				unk_18058Cstr.x_DWORD_1805B0_mouse.x = v59;
			}
			v25 = unk_18058Cstr.x_DWORD_1805B0_mouse.y;
			if (unk_18058Cstr.x_DWORD_1805B0_mouse.y < v60)
			{
				unk_18058Cstr.x_DWORD_1805B0_mouse.y = v60;
				return v61;
			}
		LABEL_157:
			if (v9 >= v25)
				return v61;
			unk_18058Cstr.x_DWORD_1805B0_mouse.y = v9;
			return v61;
		}
		unk_180560x[0x1a] = *(x_BYTE *)(x_DWORD_E36C4 + 16);
		unk_180560x[0x1c] = unk_18058Cstr.x_DWORD_1805B0_mouse.x;
		unk_180560x[0x1d] = unk_18058Cstr.x_DWORD_1805B0_mouse.y;
	LABEL_54:
		if (!(unk_180560x[0x1a] & 1) || unk_180560x[0x1b] & 1)
		{
			if (!(unk_180560x[0x1a] & 1) && unk_180560x[0x1b] & 1)
			{
				unk_18058Cstr.x_DWORD_18059C|= 0xffffffFA;
				unk_180560x[0x1b] &= 0xFEu;
			}
		}
		else
		{
			unk_18058Cstr.x_DWORD_18059C|= 0xffffff05;
			unk_18058Cstr.x_DWORD_1805B8_mouse_position_x = unk_18058Cstr.x_DWORD_1805B0_mouse.x;
			unk_180560x[0x1b] |= 1u;
			unk_18058Cstr.x_DWORD_1805BC_mouse_position_y = unk_18058Cstr.x_DWORD_1805B0_mouse.y;
		}
		if (!(unk_180560x[0x1a] & 2) || unk_180560x[0x1b] & 2)
		{
			if (!(unk_180560x[0x1a] & 2) && unk_180560x[0x1b] & 2)
			{
				unk_18058Cstr.x_DWORD_18059C |= 0xffffffF5;
				unk_180560x[0x1b] &= 0xFDu;
			}
		}
		else
		{
			unk_18058Cstr.x_DWORD_18059C |= 0xffffff0A;
			unk_18058Cstr.x_DWORD_1805B8_mouse_position_x = unk_18058Cstr.x_DWORD_1805B0_mouse.x;
			unk_180560x[0x1b] |= 2u;
			unk_18058Cstr.x_DWORD_1805BC_mouse_position_y = unk_18058Cstr.x_DWORD_1805B0_mouse.y;
		}
		if (x_BYTE_180664[x_BYTE_EB39E_keys[5]])
		{
			unk_180560x[0x1a] &= 0xF7u;
			unk_18058Cstr.x_DWORD_18059C |= 0xffffff10;
			unk_180560x[0x1b] &= 0xF7u;
		}
		else if (!(x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1))
		{
			if (!(unk_180560x[0x1a] & 8) || unk_180560x[0x1b] & 8 || unk_18058Cstr.x_DWORD_18059C & 0x10)
			{
				if (unk_180560x[0x1a] & 8 || !(unk_180560x[0x1b] & 8) || unk_18058Cstr.x_DWORD_18059C & 0x10)
				{
					if (unk_180560x[0x1a] & 8 && unk_180560x[0x1b] & 8 && unk_18058Cstr.x_DWORD_18059C & 0x10)
					{
						unk_180560x[0x1b] &= 0xF7u;
						unk_180560x[0x1a] &= 0xF7u;
					}
					else if (!(unk_180560x[0x1a] & 8) && !(unk_180560x[0x1b] & 8) && unk_18058Cstr.x_DWORD_18059C & 0x10)
					{
						unk_18058Cstr.x_DWORD_18059C |= 0xffffffEF;
					}
				}
				else
				{
					unk_18058Cstr.x_DWORD_18059C |= 0xffffff10;
				}
			}
			else
			{
				unk_180560x[0x1b] |= 8u;
			}
		}
		v3 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221;
		if (v3 < 5u)
		{
			if (v3 == 3)
			{
				if ( 82 - (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].width <= unk_18058Cstr.x_DWORD_1805B0_mouse.x ) // fix it
				{
				  if (unk_18058Cstr.x_DWORD_1805B0_mouse.x >= 384 )
				  {
					if ( x_WORD_180660_VGA_type_resolution & 1 )
					  v18 = 400;
					else
					  v18 = 480;
					v60 = v18 - 72;
					if ( v18 - 46 >= unk_18058Cstr.x_DWORD_1805B0_mouse.y )
					  v19 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[260].width;
					else
					  v19 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[158].width;
					v11 = (signed int)v19 >> 2;
					v9 = v60 + 26 + ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[158].height >> 1);
					v20 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[260].height >> 1) + 4 + v60;
					v59 = 0;
					v60 = v20;
					v7 = 640;
					v12 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[260].height;
				  }
				  else
				  {
					if ( x_WORD_180660_VGA_type_resolution & 1 )
					  v17 = 400;
					else
					  v17 = 480;
					v60 = v17 - 72;
					v9 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[155].height >> 1) + 32 + v17 - 72;
					v59 = 0;
					v60 = v9;
					v7 = 640;
					v11 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[155].width >> 2;
					v12 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[155].height >> 1;
				  }
				}
				else
				{
					if (x_WORD_180660_VGA_type_resolution & 1)
						v15 = 400;
					else
						v15 = 480;
					v60 = v15 - 72;
					//v60 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 935) >> 1) + 28 + v15 - 72;
					//v59 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 934) >> 1) + 4;
					//v16 = *(uint8_t *)(**filearray_2aa18c[6] + 935);
					v60 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].height >> 1) + 28 + v15 - 72;
					v59 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].width >> 1) + 4;
					v16 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].height;
					v9 = v60 + v16;
					v12 = v16 >> 1;
					//v11 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 934) >> 2;
					//v7 = v59 + 640 - ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 934) >> 1);
					v11 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].width >> 2;
					v7 = v59 + 640 - ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[156].width >> 1);
				}
				goto LABEL_138;
			}
		}
		else if (v3 <= 5u || v3 == 8)
		{
			//v4 = 2124 * D41A0_BYTESTR_0.word_0xc + (int)x_D41A0_BYTEARRAY_0 + 11230;
			//v5 = v4 + 1609;
			//v6 = *(x_BYTE *)(v4 + 2109);			
			v5 = &D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.str_611;
			v6 = D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].dword_0x3E6_2BE4_12228.str_611.byte_0x457_1111;
			if (!v6)
			{
				v7 = 640;
				v59 = 0;
				if (x_WORD_180660_VGA_type_resolution & 1)
					v8 = 400;
				else
					v8 = 480;
				//v9 = v8 - ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 539) >> 1);
				v9 = v8 - ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height >> 1);
				if (x_WORD_180660_VGA_type_resolution & 1)
					v10 = 400;
				else
					v10 = 480;
				//v60 = v10 - 2 * *(uint8_t *)(**filearray_2aa18c[6] + 539);
				//v60 += (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 539) >> 1;
				//v11 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 538) >> 2;
				//v12 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 539) >> 1;
				v60 = v10 - 2 * (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height;
				v60 += (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height >> 1;
				v11 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].width >> 2;
				v12 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height >> 1;
				goto LABEL_138;
			}
			if (v6 <= 2u)
			{
				//v58 = 3 * *(uint8_t *)(**filearray_2aa18c[6] + 982);
				v58 = 3 * (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[164].width;
				LOBYTE(v13) = v5->byte_0x458_1112;
				if ((char)v13 < 13)
					v13 = (char)v13;
				else
					v13 = (char)v13 - 13;
				/*v59 = *(uint8_t *)(**filearray_2aa18c[6] + 538) * v13
					+ *(uint8_t *)(**filearray_2aa18c[6] + 532)
					+ ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 538) >> 1)
					- (v58 >> 1);*/
				v59 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].width * v13
					+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[89].width
					+ ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].width >> 1)
					- (v58 >> 1);
				if (640 - v58 >= v59)
				{
					if (v59 < 0)
						v59 = 0;
				}
				else
				{
					v59 = 640 - v58;
				}
				v7 = v58 + v59;
				if (x_WORD_180660_VGA_type_resolution & 1)
					v14 = 400;
				else
					v14 = 480;
				/*v9 = v14
				   - 2 * *(uint8_t *)(**filearray_2aa18c[6] + 539)
				   - ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 539) >> 1);
				v60 = v9;
				v11 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 982) >> 2;
				v12 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 983) >> 1;*/
				v9 = v14
					- 2 * (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height
					- ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[90].height >> 1);
				v60 = v9;
				v11 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[164].width >> 2;
				v12 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[164].height >> 1;
				goto LABEL_138;
			}
			goto LABEL_137;
		}
		if (x_D41A0_BYTEARRAY_4_struct.byte_38546)
		{
			sub_30BE0(&v59, &v60);
			/*v59 += (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1546) >> 1;
			v21 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1547) >> 1) + v60;
			v60 = v21;
			v11 = *(uint8_t *)(**filearray_2aa18c[6] + 1546);*/
			v59 += (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[258].width >> 1;
			v21 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[258].height >> 1) + v60;
			v60 = v21;
			v11 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[258].width;
			v9 = v21;
			v7 = v11 + v59;
			v12 = 0;
			goto LABEL_138;
		}
		if (x_D41A0_BYTEARRAY_4_struct.byteindex_225)
		{
			v22 = x_D41A0_BYTEARRAY_4_struct.byteindex_186;
			v12 = 4;
			v60 = 67;
			v23 = (v22 >> 1) + (640 - v22) / 2;
			v9 = 393;
			unk_18058Cstr.x_DWORD_1805B0_mouse.x = v23;
			v7 = (v22 >> 1) + (640 - v22) / 2;
			v59 = v23;
			v11 = 0;
			goto LABEL_138;
		}
		if (x_D41A0_BYTEARRAY_4_struct.byte_38591)
		{
			sub_2FFE0(&v59, &v60, &v58, &v57);
			v58 -= 2;
			v7 = v58 + v59;
			v9 = 4 * v57 + 12 + v60;
			v12 = 0;
			v11 = 4;
			v60 += 4 * v57 + 12;
			goto LABEL_138;
		}
		if (x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1)
		{
			/*v58 = *(uint8_t *)(**filearray_2aa18c[6] + 1048);
			v57 = *(uint8_t *)(**filearray_2aa18c[6] + 1073)
				+ *(uint8_t *)(**filearray_2aa18c[6] + 1061)
				+ *(uint8_t *)(**filearray_2aa18c[6] + 1055)
				+ *(uint8_t *)(**filearray_2aa18c[6] + 1049);
			v60 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1049) >> 1) + (400 - v57) / 2 - 60;
			v59 = ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1048) >> 2) + (640 - v58) / 2;
			v24 = *(uint8_t *)(**filearray_2aa18c[6] + 1049);
			v9 = v57 + v60 - v24;
			v12 = v24 >> 2;
			v11 = (signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1048) >> 2;
			v7 = v58 + v59 - ((signed int)*(uint8_t *)(**filearray_2aa18c[6] + 1048) >> 1);
			goto LABEL_138;*/
			v58 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[175].width;
			v57 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[179].height
				+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[177].height
				+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[176].height
				+ (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[179].height;
			v60 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[179].height >> 1) + (400 - v57) / 2 - 60;
			v59 = ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[179].width >> 2) + (640 - v58) / 2;
			v24 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[179].height;
			v9 = v57 + v60 - v24;
			v12 = v24 >> 2;
			v11 = (*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[179].width >> 2;
			v7 = v58 + v59 - ((*filearray_2aa18c[filearrayindex_MSPRD00DATTAB]._posistruct)[179].width >> 1);
			goto LABEL_138;
		}
	LABEL_137:
		v7 = 640;
		v9 = 480;
		v12 = 32;
		v59 = 0;
		v60 = 0;
		v11 = 12;
	LABEL_138:
		if (unk_18058Cstr.x_DWORD_18059C & 0x10
			|| x_D41A0_BYTEARRAY_4_struct.setting_byte3_24 & 1
			|| x_D41A0_BYTEARRAY_4_struct.byte_38546
			|| x_D41A0_BYTEARRAY_4_struct.byteindex_225
			|| D41A0_BYTESTR_0.array_0x2BDE[D41A0_BYTESTR_0.word_0xc].byte_0x3DF_2BE4_12221 == 3)
		{
			if (unk_180560x[0x1d] >= 0)
			{
				if (unk_180560x[0x1d] > 0)
					unk_18058Cstr.x_DWORD_1805B0_mouse.y += v12;
			}
			else
			{
				unk_18058Cstr.x_DWORD_1805B0_mouse.y -= v12;
			}
			if (unk_180560x[0x1c] >= 0)
			{
				if (unk_180560x[0x1c] > 0)
					unk_18058Cstr.x_DWORD_1805B0_mouse.x += v11;
			}
			else
			{
				unk_18058Cstr.x_DWORD_1805B0_mouse.x -= v11;
			}
			if (unk_18058Cstr.x_DWORD_1805B0_mouse.x >= v59)
			{
				if (v7 < unk_18058Cstr.x_DWORD_1805B0_mouse.x)
					unk_18058Cstr.x_DWORD_1805B0_mouse.x = v7;
			}
			else
			{
				unk_18058Cstr.x_DWORD_1805B0_mouse.x = v59;
			}
			v25 = unk_18058Cstr.x_DWORD_1805B0_mouse.y;
			if (unk_18058Cstr.x_DWORD_1805B0_mouse.y < v60)
			{
				unk_18058Cstr.x_DWORD_1805B0_mouse.y = v60;
				return v61;
			}
			goto LABEL_157;
		}
		if (unk_180560x[0x1a] & 4)
		{
			if (unk_180560x[0x1d] < 0)
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 1u;
			if (unk_180560x[0x1d] > 0)
				LOBYTE(unk_18058Cstr.x_WORD_1805C0_arrow_keys) = unk_18058Cstr.x_WORD_1805C0_arrow_keys | 2;
			if (unk_180560x[0x1c] < 0)
				LOBYTE(unk_18058Cstr.x_WORD_1805C0_arrow_keys) = unk_18058Cstr.x_WORD_1805C0_arrow_keys | 4;
			if (unk_180560x[0x1c] > 0)
			{
				LOBYTE(unk_18058Cstr.x_WORD_1805C0_arrow_keys) = unk_18058Cstr.x_WORD_1805C0_arrow_keys | 8;
				return v61;
			}
		}
		else
		{
			v26 = 28 * (int16_t)(32 * unk_180560x[0x1c] + x_WORD_E36CC);
			x_WORD_E36CC = (signed int)(v26 - (__CFSHL__(HIDWORD(v26), 5) + 32 * HIDWORD(v26))) >> 5;
			v27 = 31 * (int16_t)(16 * unk_180560x[0x1d] + x_WORD_E36CE);
			x_WORD_E36CE = (signed int)(v27 - (__CFSHL__(HIDWORD(v27), 5) + 32 * HIDWORD(v27))) >> 5;
			unk_18058Cstr.x_DWORD_1805B0_mouse.x = 2 * x_WORD_E36CC + 320;
			unk_18058Cstr.x_DWORD_1805B0_mouse.y = 2 * x_WORD_E36CE + 200;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[0]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 1;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[1]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 2;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[2]])
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 4;
			if (x_BYTE_180664[x_BYTE_EB39E_keys[3]])
			{
				unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 8;
				return v61;
			}
		}
		return v61;
	case 7:
		unk_18058Cstr.x_DWORD_1805B0_mouse.x = x_WORD_E3760_mouse.x;
		unk_18058Cstr.x_DWORD_1805B0_mouse.y = x_WORD_E3760_mouse.y;
		unk_18058Cstr.x_DWORD_1805B8_mouse_position_x = x_WORD_E375C_mouse_position_x;
		unk_18058Cstr.x_DWORD_1805BC_mouse_position_y = x_WORD_E375E_mouse_position_y;
		//v30 = x_BYTE_180664[x_BYTE_EB39E_keys[0]];
		unk_18058Cstr.x_WORD_1805C0_arrow_keys = 0;
		if (x_BYTE_180664[x_BYTE_EB39E_keys[0]])
			unk_18058Cstr.x_WORD_1805C0_arrow_keys = 1;
		if (x_BYTE_180664[x_BYTE_EB39E_keys[1]])
			unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 2;
		if (x_BYTE_180664[x_BYTE_EB39E_keys[2]])
			unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 4;
		if (x_BYTE_180664[x_BYTE_EB39E_keys[3]])
			unk_18058Cstr.x_WORD_1805C0_arrow_keys |= 8;
		unk_18058Cstr.x_DWORD_18059C = 0;
		if (x_WORD_180746_mouse_left_button)
			unk_18058Cstr.x_DWORD_18059C = 1;
		if (x_WORD_180744_mouse_right_button)
			unk_18058Cstr.x_DWORD_18059C |= 2;
		if (x_WORD_18074C_mouse_left2_button)
			unk_18058Cstr.x_DWORD_18059C |= 4;
		if (x_WORD_18074A_mouse_right2_button)
			unk_18058Cstr.x_DWORD_18059C |= 8;
		if (!x_BYTE_180664[x_BYTE_EB39E_keys[5]])
			return v61;
		unk_18058Cstr.x_DWORD_18059C |= 0x10;
		return v61;
	case 11:
	LABEL_217:
		unk_18058Cstr.x_WORD_1805C0_arrow_keys = 0;
		// FIXME: types
		// sub_8BBE0((int)unk_180560x);
		goto LABEL_218;
	default:
		return v61;
	}
}

//----- (0008B5A0) --------------------------------------------------------
int sub_8B5A0()//26c5a0
{
	if (x_BYTE_E36D1)
	{
		switch (unk_18058Cstr.x_WORD_1805C2_joystick)
		{
		case 1:
			sub_8B770();
			break;
		case 9:
			sub_75900();
			break;
		default:
			break;
		}
		x_BYTE_E36D1 = 0;
	}
	return 0;
}

//----- (0008B600) --------------------------------------------------------
signed int sub_8B600(type_unk_18058Cstr a1)//26c600
{
	int v1; // edi
	char v2; // bl
	//int16_t v3; // dx
	char v4; // al
	int v5; // edx
	int v6; // eax
	int v7; // eax
	char v9x[60]; // [esp+0h] [ebp-40h]
	char v10; // [esp+3Ch] [ebp-4h]

	//fix it
	v5 = 0;
	//fix it

	v1 = sub_9AD9C(3);
	memset(v9x, 0, 60);
	memset(a1.unk_1805CE, 0, 84);
	v2 = 1;
	switch (a1.x_WORD_1805C6_vio2_analog_joy)
	{
	case 1:
		v2 = 0;
		break;
	case 3:
		v2 = 2;
		break;
	case 4:
		v2 = 3;
		break;
	default:
		break;
	}
	//v3 = a1.x_WORD_1805C4_vio1_analog_joy;
	switch (a1.x_WORD_1805C4_vio1_analog_joy)
	{
	case 1200:
		v4 = sub_8B880((int *)a1.unk_1805CE, v2, 1200, v1);
		break;
	case 2400:
		v4 = sub_8B880((int *)a1.unk_1805CE, v2, 2400, v1);
		break;
	case 4800:
		v4 = sub_8B880((int *)a1.unk_1805CE, v2, 4800, v1);
		break;
	case 9600:
		v4 = sub_8B880((int *)a1.unk_1805CE, v2, 9600, v1);
		break;
	case 19200:
		v4 = sub_8B880((int *)a1.unk_1805CE, v2, 19200, v1);
		break;
	default:
		goto LABEL_16;
	}
	v10 = v4;
LABEL_16:
	sub_9B498(v10);
	myprintf("%s.\n");
	// FIXME: types
	// sub_8BA10((int)v9x, v5, (int *)a1.unk_1805CE, v9x, v1);
	myprintf(v9x);
	myprintf("\n");
	v6 = sub_9AD9C(2);
	sub_9B038((int *)a1.unk_1805CE, (char *)&off_D1F10, v6);
	v7 = sub_9AD9C(2);
	if (!sub_9B038((int *)a1.unk_1805CE, (char*)"!M1,P,B\r", v7))
		return 1;
	sub_9B234((int *)a1.unk_1805CE);
	myprintf("Could not send Info to Tracker\n");
	return -1;
}

//----- (0008B770) --------------------------------------------------------
int sub_8B770()//26c770
{
	return sub_9B234((int *)unk_18058Cstr.unk_1805CE);
}

//----- (0008B790) --------------------------------------------------------
signed int sub_8B790(type_unk_18058Cstr a1)//26c790
{
	int v1; // eax
	signed int v2; // esi
	signed int v3; // eax
	double v4; // st7
	double v5; // st7
	int v6; // eax
	double v7; // st7
	int v8; // eax
	int v9; // ecx
	int v10; // edi
	int v11; // eax
	int v12; // ecx
	int v13; // eax
	int v14; // edx

	//fix it
	v6 = 0;
	v8 = 0;
	//fix it

	v1 = sub_9AD9C(1);
	v2 = 1;
	if (sub_9B274((x_DWORD *)((char *)a1.unk_1805CE), v1 / 2))
		v2 = -1;
	v3 = sub_9B260((x_DWORD **)((char *)a1.unk_1805CE));
	v4 = (double)*(signed int *)((char *)&a1.unk_1805CE[0xa]) * flt_D1F40;
	_CHP(v3);
	a1.x_DWORD_180590 = (signed int)v4;
	v5 = (double)*(signed int *)((char *)&a1.unk_1805CE[0x6]) * flt_D1F40;
	_CHP(v6);
	a1.x_DWORD_180594 = (signed int)v5;
	v7 = (double)*(signed int *)((char *)&a1.unk_1805CE[0xe]) * flt_D1F40;
	_CHP(v8);
	a1.x_DWORD_180598 = (signed int)v7;
	if (x_BYTE_1806E4 == 0x2e)
	{
		unk_18058Cstr.x_DWORD_1805A4 = unk_18058Cstr.x_DWORD_180590;
		unk_18058Cstr.x_DWORD_1805A8 = unk_18058Cstr.x_DWORD_180594;
		unk_18058Cstr.x_DWORD_1805AC = unk_18058Cstr.x_DWORD_180598;
	}
	else
	{
		v9 = a1.x_DWORD_180594;
		v10 = a1.x_DWORD_180598;
		v11 = a1.x_DWORD_1805A8;
		a1.x_DWORD_180590 -= a1.x_DWORD_1805A4;
		v12 = v9 - v11;
		v13 = a1.x_DWORD_1805AC;
		a1.x_DWORD_180594 = v12;
		a1.x_DWORD_180598 = v10 - v13;
	}
	v14 = -a1.x_DWORD_180594;
	a1.x_DWORD_180590 = -a1.x_DWORD_180590;
	a1.x_DWORD_180594 = v14;
	return v2;
}

//----- (0008B880) --------------------------------------------------------
char sub_8B880(int *a1, char a2, signed int a3, int a4)//26c880
{
	int v4; // esi
	char result; // al
	int v6; // eax
	int v7; // eax
	int v8; // eax
	int v9; // edx

	//fix it
	v9 = 0;
	//fix it

	switch (a2)
	{
	case 0:
		v4 = 0;
		goto LABEL_7;
	case 1:
		v4 = 1;
		goto LABEL_7;
	case 2:
		v4 = 2;
		goto LABEL_7;
	case 3:
		v4 = 3;
	LABEL_7:
		// FIXME: types
		// v6 = (int)calloc(1, 90);
		*a1 = v6;
		if (v6)
		{
			v7 = sub_9BE18(v6, v4, 1, 0x400u, 0x400u);
			if (v7)
			{
				if (v7 == -1)
				{
					myprintf("NO SERIAL\n");
					result = 1;
				}
				else
				{
					myprintf("NO MEMORY\n");
					result = 9;
				}
			}
			else
			{
				sub_9BAC4(*a1, a3);
				sub_9CCF8(*a1, 1);
				sub_9CD9C(*a1, 1);
				v8 = sub_9CCB4(*a1, 0);
				result = sub_8B980(v8, v9, (x_DWORD **)a1, a4);
			}
		}
		else
		{
			myprintf("No memory for serial data.\n");
			result = 1;
		}
		break;
	default:
		result = 1;
		break;
	}
	return result;
}

//----- (0008B980) --------------------------------------------------------
char sub_8B980(int a1, int a2, x_DWORD **a3, int a4)//26c980
{
	int v4; // edi
	bool v5; // eax
	int v6; // edx
	int v7; // esi
	int v9; // eax
	int v10; // edx
	int v11; // eax

	//fix it
	v5 = 0;
	v6 = 0;
	v10 = 0;
	//fix it

	// FIXME: types
	// v4 = j_j___clock(a1, a2, (x_DWORD)a3);
	sub_9CBBC(*a3);
	do
	{
		// FIXME: types
		// v7 = j_j___clock(v5, v6, (x_DWORD)a3);
		sub_9AEEC(a3, (char *)&off_D1F10);
		do
		{
			// FIXME: types
			// // if (!sub_9C9D0((int)*a3) && sub_9C938(*a3) == 79)
			// 	return 0;
			v9 = sub_9ADB4(1);
			// FIXME: types
			// v11 = sub_9AE04(/*v9,*/ v10, (int)a3, v7, v9);
		} while (!v11);
		// FIXME: types
		// v5 = sub_9AE04(/*v11,*/ a4, (int)a3, v4, a4);
	} while (!v5);
	return 3;
}

//----- (0008BA10) --------------------------------------------------------
char sub_8BA10(int a1, int a2, int *a3, char *a4, int a5)//26ca10
{
	int v5; // esi
	bool v6; // eax
	int v7; // edx
	int v8; // eax
	int v9; // edx
	char v10; // ah
	unsigned int i; // edx
	char v12; // cl
	double v13; // rax
	int v15; // eax
	int v16; // edx
	int v17; // eax
	int v18; // [esp+8h] [ebp-4h]

	//fix it
	v6 = 0;
	v7 = 0;
	v8 = 0;
	v9 = 0;
	v16 = 0;
	//fix it

	// FIXME: types
	// v5 = j_j___clock(a1, a2, (x_DWORD)a4);
	sub_9CBBC((x_DWORD *)*a3);
	while (2)
	{
		// FIXME: types
		// v18 = j_j___clock(v6, v7, (x_DWORD)a4);
		sub_9AEEC((x_DWORD **)a3, (char *)&off_D1F78);
		do
		{
			sub_9AEEC((x_DWORD **)a3, (char *)&off_D1F78);
			// FIXME: types
			// sub_9AE90(v8, v9, (int)a4, a3, a4, 60, a5);
			v10 = *a4;
			a4[59] = 0;
			if (v10 == 77)
			{
				for (i = 0; i < strlen(a4); i++)
				{
					v12 = a4[i];
					if (v12 == 70 || v12 == 102)
					{
						LODWORD(v13) = strtod(&a4[i + 1], 0);
						if (v13 < dbl_D1F7C)
							x_DWORD_E36C8 = 0;
						return 0;
					}
				}
				return 0;
			}
			v15 = sub_9ADB4(1);
			// FIXME: types
			// v17 = sub_9AE04(/*v18,*/ v16, (int)a4, v18, v15);
		} while (!v17);
		// FIXME: types
		// v6 = sub_9AE04(/*v17,*/ a5, (int)a4, v5, a5);
		if (!v6)
			continue;
		break;
	}
	return 3;
}

//----- (0008BB10) --------------------------------------------------------
int sub_8BB10(int a1)//26cb10
{
	int result; // eax

	result = a1;
	*(x_BYTE *)(a1 + 36) = 2;
	*(x_DWORD *)(a1 + 8) = 10000000;
	*(x_DWORD *)(a1 + 20) = 10000000;
	*(x_DWORD *)(a1 + 12) = 0;
	*(x_DWORD *)(a1 + 24) = 0;
	return result;
}

//----- (0008BB40) --------------------------------------------------------
int sub_8BB40(int a1, char a2)//26cb40
{
	int result; // eax

	*(x_BYTE *)(a1 + 37) = a2;
	result = sub_8BB10(a1);
	BYTE1(result) = a2;
	if (a2 == 8)
	{
		*(x_BYTE *)(a1 + 37) = 7;
		*(x_BYTE *)(a1 + 36) = 3;
	}
	return result;
}

//----- (0008BBE0) --------------------------------------------------------
signed int sub_8BBE0(int a1)//fix//26cbe0
{
	char v1; // dl
	uint8_t v2; // al
	char v3; // al
	signed int result; // eax
	signed int v5; // ecx
	uint8_t v6; // al
	signed int v7; // ecx
	uint8_t v8; // al
	signed int v9; // ecx
	uint8_t v10; // al
	uint8_t v11; // al
	int v12; // esi
	int v13; // esi
	int v14; // edi
	int v15; // ecx
	int v16; // eax
	int v17; // ecx
	int v18; // esi
	int v19; // eax
	int v20; // eax
	int v21; // ecx
	int v22; // esi
	int v23; // eax
	int v24; // ecx
	int v25; // edi
	int v26; // eax
	int v27; // ecx
	int v28; // esi
	int v29; // eax
	int v30; // eax
	int v31; // ecx
	int v32; // esi
	int v33; // eax
	char v34; // al
	int v35; // edx
	int v36; // esi
	uint8_t v37; // al
	int v38; // eax
	char v39; // dh
	int v40; // [esp+0h] [ebp-14h]
	int v41; // [esp+4h] [ebp-10h]
	int v42; // [esp+8h] [ebp-Ch]
	int v43; // [esp+Ch] [ebp-8h]
	uint8_t v44; // [esp+10h] [ebp-4h]
	char v45; // [esp+10h] [ebp-4h]

	//fix it
	v6 = 0;
	v8 = 0;
	v10 = 0;	
	//fix it

	v1 = 0;
	v43 = 0;
	v42 = 0;
	v41 = 0;
	v40 = 0;
	v44 = 0;
	if (*(x_BYTE *)(a1 + 36))
	{
		//_disable();
		v2 = *(x_BYTE *)(a1 + 37);
		switch (v2)
		{
		case 0u:
		LABEL_3:
			*(x_BYTE *)(a1 + 38) = 0;
			*(x_BYTE *)(a1 + 43) = 0;
			v3 = *(x_BYTE *)(a1 + 43);
			*(x_BYTE *)(a1 + 42) = v3;
			*(x_BYTE *)(a1 + 41) = v3;
			*(x_BYTE *)(a1 + 40) = v3;
			return 0;
		case 1u:
		case 2u:
		case 3u:
		case 4u:
			v5 = 10000;
			//_disable();
			v1 = 1;
			//__outx_BYTE(0x201u, v2);
			do
			{
				// v6 = __inx_BYTE(0x201u);
				if (!(v6 & 3))
					break;
				if (v6 & 1)
					++v43;
				if (v6 & 2)
					++v42;
				--v5;
			} while (v5);
			//_enable();
			v44 = v6;
			if (!v5)
				*(x_BYTE *)(a1 + 36) = 0;
			break;
		case 5u:
		case 6u:
			v7 = 10000;
			//_disable();
			v1 = 1;
			//__outx_BYTE(0x201u, v2);
			do
			{
				//v8 = __inx_BYTE(0x201u);
				
				if (!(v8 & 0xB))
					break;
				if (v8 & 1)
					v43++;
				if (v8 & 2)
					v42++;
				if (v8 & 8)
					v40++;
				v7--;
			} while (v7);
			//_enable();
			v44 = v8;
			if (!v7)
				*(x_BYTE *)(a1 + 36) = 0;
			break;
		case 7u:
			v9 = 10000;
			//_disable();
			v1 = 1;
			//__outx_BYTE(0x201u, v2);
			do
			{
				//v10 = __inx_BYTE(0x201u);

				if (!(v10 & 0xF))
					break;
				if (v10 & 1)
					++v43;
				if (v10 & 2)
					++v42;
				if (v10 & 4)
					++v41;
				if (v10 & 8)
					++v40;
				--v9;
			} while (v9);
			//_enable();
			v44 = v10;
			if (!v9)
			{
				if (*(x_BYTE *)(a1 + 36) == 3)
				{
					v1 = 123;
					*(x_BYTE *)(a1 + 37) = 2;
				}
				else
				{
					*(x_BYTE *)(a1 + 36) = 1;
				}
			}
			break;
		default:
			break;
		}
		//_enable();
	}
	v45 = (~v44 >> 4) & 0xF;
	v11 = *(x_BYTE *)(a1 + 37);
	if (v11 < 3u)
	{
		if (v11 != 1)
			goto LABEL_46;
		goto LABEL_45;
	}
	if (v11 <= 3u || v11 == 5)
		LABEL_45:
	v45 &= 3u;
LABEL_46:
	switch (*(x_BYTE *)(a1 + 36))
	{
	case 0:
		goto LABEL_3;
	case 1:
		*(x_BYTE *)(a1 + 38) = v45;
		switch (*(x_BYTE *)(a1 + 37))
		{
		case 1:
		case 2:
			goto LABEL_52;
		case 3:
		case 4:
			goto LABEL_66;
		case 5:
		case 6:
			switch (8 * v40 / *(x_DWORD *)(a1 + 32))
			{
			case 0:
				*(x_BYTE *)(a1 + 42) = 0;
				*(x_BYTE *)(a1 + 43) = -1;
				goto LABEL_66;
			case 1:
			case 2:
				*(x_BYTE *)(a1 + 42) = 1;
				break;
			case 3:
			case 4:
				*(x_BYTE *)(a1 + 42) = 0;
				*(x_BYTE *)(a1 + 43) = 1;
				goto LABEL_66;
			case 5:
			case 6:
				*(x_BYTE *)(a1 + 42) = -1;
				break;
			default:
				*(x_BYTE *)(a1 + 42) = 0;
				break;
			}
			*(x_BYTE *)(a1 + 43) = 0;
		LABEL_66:
			v14 = *(x_DWORD *)(a1 + 16);
			v15 = v43 - v14;
			if (v43 - v14 < 0)
			{
				v20 = (*(x_DWORD *)(a1 + 8) - v14) >> 3;
				v21 = v15 - v20;
				v22 = *(x_DWORD *)(a1 + 8) - v14 - 2 * v20;
				if (v21 <= 0)
				{
					if (*(x_DWORD *)(a1 + 8) - v14 == 2 * v20)
						v22 = 1;
					v23 = -127 * v21 / v22;
					if (v23 <= -127)
						*(x_BYTE *)(a1 + 40) = -127;
					else
						*(x_BYTE *)(a1 + 40) = v23;
				}
				else
				{
					*(x_BYTE *)(a1 + 40) = 0;
				}
			}
			else
			{
				v16 = (*(x_DWORD *)(a1 + 12) - v14) >> 3;
				v17 = v15 - v16;
				v18 = *(x_DWORD *)(a1 + 12) - v14 - 2 * v16;
				if (v17 >= 0)
				{
					if (*(x_DWORD *)(a1 + 12) - v14 == 2 * v16)
						v18 = 1;
					v19 = 127 * v17 / v18;
					if (v19 >= 127)
						*(x_BYTE *)(a1 + 40) = 127;
					else
						*(x_BYTE *)(a1 + 40) = v19;
				}
				else
				{
					*(x_BYTE *)(a1 + 40) = 0;
				}
			}
			v24 = v42 - *(x_DWORD *)(a1 + 28);
			if (v24 < 0)
			{
				v30 = (*(x_DWORD *)(a1 + 20) - *(x_DWORD *)(a1 + 28)) >> 3;
				v31 = v24 - v30;
				v32 = *(x_DWORD *)(a1 + 20) - *(x_DWORD *)(a1 + 28) - 2 * v30;
				if (v31 <= 0)
				{
					if (*(x_DWORD *)(a1 + 20) - *(x_DWORD *)(a1 + 28) == 2 * v30)
						v32 = 1;
					v33 = -127 * v31 / v32;
					if (v33 <= -127)
						*(x_BYTE *)(a1 + 41) = -127;
					else
						*(x_BYTE *)(a1 + 41) = v33;
					result = 0;
				}
				else
				{
					*(x_BYTE *)(a1 + 41) = 0;
					result = 0;
				}
			}
			else
			{
				v25 = *(x_DWORD *)(a1 + 28);
				v26 = (*(x_DWORD *)(a1 + 24) - v25) >> 3;
				v27 = v24 - v26;
				v28 = *(x_DWORD *)(a1 + 24) - v25 - 2 * v26;
				if (v27 >= 0)
				{
					if (*(x_DWORD *)(a1 + 24) - v25 == 2 * v26)
						v28 = 1;
					v29 = 127 * v27 / v28;
					if (v29 >= 127)
						*(x_BYTE *)(a1 + 41) = 127;
					else
						*(x_BYTE *)(a1 + 41) = v29;
					result = 0;
				}
				else
				{
					*(x_BYTE *)(a1 + 41) = 0;
					result = 0;
				}
			}
			break;
		case 7:
			if (v41 < *(x_DWORD *)(a1 + 32))
				*(x_BYTE *)(a1 + 38) |= 0x10u;
			if (v40 < *(x_DWORD *)(a1 + 32))
				*(x_BYTE *)(a1 + 38) |= 0x20u;
		LABEL_52:
			v12 = *(x_DWORD *)(a1 + 16);
			if ((v12 + *(x_DWORD *)(a1 + 8)) >> 1 <= v43)
				*(x_BYTE *)(a1 + 40) = (v12 + *(x_DWORD *)(a1 + 12)) >> 1 < v43;
			else
				*(x_BYTE *)(a1 + 40) = -1;
			v13 = *(x_DWORD *)(a1 + 28);
			if ((v13 + *(x_DWORD *)(a1 + 20)) >> 1 <= v42)
				*(x_BYTE *)(a1 + 41) = (v13 + *(x_DWORD *)(a1 + 24)) >> 1 < v42;
			else
				*(x_BYTE *)(a1 + 41) = -1;
			*(x_DWORD *)a1 = v43;
			*(x_DWORD *)(a1 + 4) = v42;
			result = 0;
			break;
		default:
			goto LABEL_123;
		}
		return result;
	case 2:
		*(x_BYTE *)(a1 + 38) = 0;
		*(x_BYTE *)(a1 + 43) = 0;
		v34 = *(x_BYTE *)(a1 + 43);
		*(x_BYTE *)(a1 + 42) = v34;
		*(x_BYTE *)(a1 + 41) = v34;
		*(x_BYTE *)(a1 + 40) = v34;
		if (!(v45 & 1)
			|| (*(x_DWORD *)(a1 + 16) = v43,
				*(x_DWORD *)(a1 + 28) = v42,
				v35 = *(x_DWORD *)(a1 + 16),
				v35 <= *(x_DWORD *)(a1 + 8))
			|| v35 >= *(x_DWORD *)(a1 + 12)
			|| (v36 = *(x_DWORD *)(a1 + 28), *(x_DWORD *)(a1 + 20) >= v36)
			|| v36 >= *(x_DWORD *)(a1 + 24))
		{
			if (v43 < *(x_DWORD *)(a1 + 8))
				*(x_DWORD *)(a1 + 8) = v43;
			if (v43 > *(x_DWORD *)(a1 + 12))
				*(x_DWORD *)(a1 + 12) = v43;
			if (v42 < *(x_DWORD *)(a1 + 20))
				*(x_DWORD *)(a1 + 20) = v42;
			if (v42 > *(x_DWORD *)(a1 + 24))
				*(x_DWORD *)(a1 + 24) = v42;
			return 1;
		}
		v37 = *(x_BYTE *)(a1 + 37);
		if (v37 < 5u)
			goto LABEL_122;
		if (v37 <= 6u)
		{
			v38 = v40;
		}
		else
		{
			if (v37 != 7)
				goto LABEL_122;
			v38 = (v40 + v41) >> 2;
		}
		*(x_DWORD *)(a1 + 32) = v38;
	LABEL_122:
		*(x_BYTE *)(a1 + 36) = 1;
	LABEL_123:
		result = 0;
		break;
	case 3:
		if (v1 == 123)
			goto LABEL_123;
		*(x_DWORD *)(a1 + 16) = v43;
		*(x_DWORD *)(a1 + 28) = v42;
		*(x_DWORD *)(a1 + 12) = v43 / 2 + v43;
		*(x_DWORD *)(a1 + 24) = v42 / 2 + v42;
		*(x_DWORD *)(a1 + 8) = v43 / 6;
		v39 = *(x_BYTE *)(a1 + 37);
		*(x_DWORD *)(a1 + 20) = v42 / 6;
		if (v39 == 7)
			*(x_DWORD *)(a1 + 32) = (v40 + v41) >> 2;
		goto LABEL_122;
	default:
		goto LABEL_123;
	}
	return result;
}

//----- (0008C0E0) --------------------------------------------------------
void sub_8C0E0(uint8_t(/*__fastcall*/ *a1)(signed int))//26d0e0
{
	signed int v1; // eax
	signed int v2; // eax

	unk_180560x[0x1a] = 0;
	while (!(unk_180560x[0x1a] & 1))
	{
		// FIXME: types
		// v1 = sub_8BBE0((int)unk_180560x);
		if (a1 && a1(v1))
			return;
	}
	while (unk_180560x[0x1a] & 1)
	{
		// FIXME: types
		// v2 = sub_8BBE0((int)unk_180560x);
		if (a1)
		{
			if (a1(v2))
				break;
		}
	}
}

//----- (0008C140) --------------------------------------------------------
char sub_8C140(uint16_t a1, int a2)//26d140
{
	int v3; // [esp+0h] [ebp-28h]
	int v4; // [esp+4h] [ebp-24h]
	int v5; // [esp+14h] [ebp-14h]
	//char v6; // [esp+1Ch] [ebp-Ch]

	memset(&v3, 0, 28);
	v4 = a1;
	v3 = 0x300;
	//segread((SREGS*)&v6);
	v5 = a2;
	//int386x(0x31, (REGS*)&v3, (REGS*)&v3, (SREGS*)&v6);
	return *(x_BYTE *)(a2 + 28);
}

//----- (0008C21F) --------------------------------------------------------
int sub_8C21F_any_graphics_command()//26d21f
{
	/*char v1; // [esp+0h] [ebp-38h]
	int v2; // [esp+1Ch] [ebp-1Ch]

	v2 = (uint16_t)x_WORD_180662_graphics_handle;
	return int386(0x10, (REGS*)&v2, (REGS*)&v1);//grafika*/
	return(0);//fix it
}

//----- (0008C2CD) --------------------------------------------------------
void sub_8C2CD()//26d2cd
{
	;
}

//----- (0008C2DE) --------------------------------------------------------
/*void sub_8C2DE()//26d2de
{
	;
}*/

//----- (0008C329) --------------------------------------------------------
int sub_8C329()//26D329
{
	int result; // eax
	x_BYTE *v1; // eax
	x_BYTE *v2; // eax

	x_DWORD_1806E8_mousex = x_WORD_E3760_mouse.x;
	x_DWORD_1806E8_mousey = x_WORD_E3760_mouse.y;//fix it

	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		x_DWORD_1806E8_mousex >>= 1;
		x_DWORD_1806E8_mousey >>= 1;
	}
	x_DWORD_1806F4_mouse_byte_index2 = (x_DWORD_1806E8_mousex >> 16) + (x_DWORD_1806E8_mousey >> 16) * x_DWORD_18062C_resolution_x;
	if (x_WORD_180660_VGA_type_resolution & 8)
	{
		HIWORD(x_DWORD_18073A) = HIWORD(x_DWORD_1806F4_mouse_byte_index2);
		sub_9951B(SHIWORD(x_DWORD_1806F4_mouse_byte_index2));//GET VIDEO STATE
	}
	unk_1806EC = x_DWORD_18062C_resolution_x - x_DWORD_1806E8_mousex;
	if ((int16_t)(x_DWORD_18062C_resolution_x - x_DWORD_1806E8_mousex) > x_WORD_18072C_cursor_sizex)
		unk_1806EC = x_WORD_18072C_cursor_sizex;
	x_WORD_1806EE = x_DWORD_180624_resolution_y - x_DWORD_1806E8_mousey;
	if ((int16_t)(x_DWORD_180624_resolution_y - x_DWORD_1806E8_mousey) > x_WORD_18072E_cursor_sizey)
		x_WORD_1806EE = x_WORD_18072E_cursor_sizey;
	x_DWORD_180714 = x_DWORD_1806F0;
	x_DWORD_180708 = (Bit8u*)&loc_A0000_vga_buffer + (uint16_t)x_DWORD_1806F4_mouse_byte_index2;
	x_DWORD_18070C = x_DWORD_180730_cursor_data;
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		for (x_WORD_180738 = 0; ; ++x_WORD_180738)
		{
			result = unk_1806EC >> 16;
			if ((signed int)(uint16_t)x_WORD_180738 >= (unk_1806EC >> 16))
				break;
			LOWORD(x_DWORD_18073A) = 0;
			while ((uint16_t)x_DWORD_18073A < (x_DWORD_1806E8_mousey >> 16))
			{
				v1 = (x_BYTE *)x_DWORD_180714++;
				*v1 = *(x_BYTE *)x_DWORD_180708;
				if (*(x_BYTE *)x_DWORD_18070C != -2)
					*(x_BYTE *)x_DWORD_180708 = *(x_BYTE *)x_DWORD_18070C;
				++x_DWORD_180708;
				++x_DWORD_18070C;
				LOWORD(x_DWORD_18073A) = x_DWORD_18073A + 1;
			}
			x_DWORD_180708 += x_DWORD_18062C_resolution_x - (x_DWORD_1806E8_mousey >> 16);
			x_DWORD_18070C += (*(int *)((char *)&x_DWORD_180730_cursor_data + 2) >> 16) - (x_DWORD_1806E8_mousey >> 16);
		}
	}
	else
	{
		for (x_WORD_180738 = 0; ; ++x_WORD_180738)
		{
			result = unk_1806EC >> 16;
			if ((signed int)(uint16_t)x_WORD_180738 >= unk_1806EC >> 16)
				break;
			LOWORD(x_DWORD_18073A) = 0;
			while ((uint16_t)x_DWORD_18073A < x_DWORD_1806E8_mousey >> 16)
			{
				v2 = (x_BYTE *)x_DWORD_180714++;
				*v2 = *(x_BYTE *)x_DWORD_180708;
				if (*(x_BYTE *)x_DWORD_18070C != -2)
					*(x_BYTE *)x_DWORD_180708 = *(x_BYTE *)x_DWORD_18070C;
				if (++x_DWORD_180708 >= (Bit8u*)0xAFFFE + 2)
				{
					++HIWORD(x_DWORD_18073A);
					sub_9951B(SHIWORD(x_DWORD_18073A));
					x_DWORD_180708 -= 0x10000;
				}
				++x_DWORD_18070C;
				LOWORD(x_DWORD_18073A) = x_DWORD_18073A + 1;
			}
			x_DWORD_180708 += x_DWORD_18062C_resolution_x - (x_DWORD_1806E8_mousey >> 16);
			if (x_DWORD_180708 >= (Bit8u*)0xAFFFE + 2)
			{
				++HIWORD(x_DWORD_18073A);
				sub_9951B(SHIWORD(x_DWORD_18073A));
				x_DWORD_180708 -= 0x10000;
			}
			x_DWORD_18070C += (*(int *)((char *)&x_DWORD_180730_cursor_data + 2) >> 16) - (x_DWORD_1806E8_mousey >> 16);
		}
	}
	return result;
}

//----- (0008C635) --------------------------------------------------------
void sub_8C635_draw_cursor()//26d635
{
	//int result; // eax
	Bit8u* v1; // eax
	Bit8u* v2; // edx

	x_DWORD_1806F8_mousex = x_WORD_E3760_mouse.x;
	//x_DWORD_1806E8_mousex = x_WORD_E3760_mouse.x;
	x_DWORD_1806F8_mousey = x_WORD_E3760_mouse.y;
	//x_DWORD_1806E8_mousey = x_WORD_E3760_mouse.y;
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		x_DWORD_1806F8_mousex >>= 1;
		x_DWORD_1806F8_mousey >>= 1;
	}
	x_DWORD_180704_mouse_byte_index1 = x_DWORD_1806F8_mousex + x_DWORD_1806F8_mousey * x_DWORD_18062C_resolution_x;
	x_DWORD_1806F4_mouse_byte_index2 = x_DWORD_180704_mouse_byte_index1;
	x_DWORD_1806FC_mouse_invx = x_DWORD_18062C_resolution_x - x_DWORD_1806F8_mousex;
	if (x_DWORD_1806FC_mouse_invx > x_WORD_18072C_cursor_sizex)//35172c je to 13001500!
		x_DWORD_1806FC_mouse_invx = x_WORD_18072C_cursor_sizex;
	unk_1806EC = x_DWORD_1806FC_mouse_invx;
	x_DWORD_1806FC_mouse_invy = x_DWORD_180624_resolution_y - x_DWORD_1806F8_mousey;
	if (x_DWORD_1806FC_mouse_invy > x_WORD_18072E_cursor_sizey)
		x_DWORD_1806FC_mouse_invy = x_WORD_18072E_cursor_sizey;
	x_WORD_1806EE = x_DWORD_1806FC_mouse_invy;
	x_DWORD_180714 = x_DWORD_180700;
	x_DWORD_180718 = x_DWORD_1806F0;
	x_DWORD_180708 = x_DWORD_180704_mouse_byte_index1 + x_DWORD_180628b_screen_buffer;
	x_DWORD_18070C = x_DWORD_180730_cursor_data;
	for (x_WORD_180738 = 0;x_WORD_180738 < x_DWORD_1806FC_mouse_invy; x_WORD_180738++)
	{
		for (x_DWORD_18073A = 0;x_DWORD_18073A < x_DWORD_1806FC_mouse_invx; x_DWORD_18073A++)
		{
			v1 = x_DWORD_180714++;//adresa1
			v1[0] = x_DWORD_180708[0];//uloz na adresu
			v2 = x_DWORD_180718++;//adresa2
			v2[0] = x_DWORD_180708[0];//uloz na adresu
			if (x_DWORD_18070C[0] != 0xfe)
				x_DWORD_180708[0] = x_DWORD_18070C[0];
			x_DWORD_180708++;//351708 - finalni obraz
			x_DWORD_18070C++;//35170c - kurzor
		}
		x_DWORD_180708 += x_DWORD_18062C_resolution_x - x_DWORD_1806FC_mouse_invx;
		x_DWORD_18070C += x_DWORD_180734 - x_DWORD_1806FC_mouse_invx;
	}
}

//----- (0008C839) --------------------------------------------------------
int sub_8C839()//26d839
{
	int result; // eax
	x_BYTE *v1; // eax
	x_BYTE *v2; // edx
	x_BYTE *v3; // eax
	x_BYTE *v4; // edx

	if (!(x_WORD_180660_VGA_type_resolution & 1))
	{
		HIWORD(x_DWORD_18073A) = HIWORD(x_DWORD_1806F4_mouse_byte_index2);
		sub_9951B(SHIWORD(x_DWORD_1806F4_mouse_byte_index2));
	}
	x_DWORD_180714 = x_DWORD_1806F0;
	x_DWORD_180708 = (Bit8u*)&loc_A0000_vga_buffer + (uint16_t)x_DWORD_1806F4_mouse_byte_index2;//graphics memory maybe
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		for (x_WORD_180738 = 0; ; ++x_WORD_180738)
		{
			result = unk_1806EC >> 16;
			if ((signed int)(uint16_t)x_WORD_180738 >= unk_1806EC >> 16)
				break;
			LOWORD(x_DWORD_18073A) = 0;
			while ((uint16_t)x_DWORD_18073A < (x_DWORD_1806E8_mousey >> 16))
			{
				v1 = (x_BYTE *)x_DWORD_180714++;
				v2 = (x_BYTE *)x_DWORD_180708++;
				*v2 = *v1;
				LOWORD(x_DWORD_18073A) = x_DWORD_18073A + 1;
			}
			x_DWORD_180708 += x_DWORD_18062C_resolution_x - (x_DWORD_1806E8_mousey >> 16);
		}
	}
	else
	{
		for (x_WORD_180738 = 0; ; ++x_WORD_180738)
		{
			result = unk_1806EC >> 16;
			if ((signed int)(uint16_t)x_WORD_180738 >= unk_1806EC >> 16)
				break;
			LOWORD(x_DWORD_18073A) = 0;
			while ((uint16_t)x_DWORD_18073A < (x_DWORD_1806E8_mousey >> 16))
			{
				v3 = (x_BYTE *)x_DWORD_180714++;
				v4 = (x_BYTE *)x_DWORD_180708++;
				*v4 = *v3;
				if (x_DWORD_180708 >= (Bit8u*)0xAFFFE + 2)
				{
					++HIWORD(x_DWORD_18073A);
					sub_9951B(SHIWORD(x_DWORD_18073A));
					x_DWORD_180708 -= 0x10000;
				}
				LOWORD(x_DWORD_18073A) = x_DWORD_18073A + 1;
			}
			x_DWORD_180708 += x_DWORD_18062C_resolution_x - (x_DWORD_1806E8_mousey >> 16);
			if (x_DWORD_180708 >= (Bit8u*)0xAFFFE + 2)
			{
				++HIWORD(x_DWORD_18073A);
				sub_9951B(SHIWORD(x_DWORD_18073A));
				x_DWORD_180708 -= 0x10000;
			}
		}
	}
	return result;
}

//----- (0008CA16) --------------------------------------------------------
int sub_8CA16()//26da16
{
	int result; // eax
	x_BYTE *v1; // eax
	x_BYTE *v2; // edx

	x_DWORD_180714 = x_DWORD_180700;
	x_DWORD_180708 = x_DWORD_180704_mouse_byte_index1 + x_DWORD_180628b_screen_buffer;
	for (x_WORD_180738 = 0; ; ++x_WORD_180738)
	{
		result = x_DWORD_1806FC_mouse_invx >> 16;
		if (x_WORD_180738 >= x_DWORD_1806FC_mouse_invx >> 16)
			break;
		LOWORD(x_DWORD_18073A) = 0;
		while (x_DWORD_18073A < x_DWORD_1806F8_mousey >> 16)
		{
			v1 = (x_BYTE *)x_DWORD_180714++;
			v2 = (x_BYTE *)x_DWORD_180708++;
			*v2 = *v1;
			LOWORD(x_DWORD_18073A) = x_DWORD_18073A + 1;
		}
		x_DWORD_180708 += x_DWORD_18062C_resolution_x - (x_DWORD_1806F8_mousex >> 16);
	}
	return result;
}

//----- (0008CACD) --------------------------------------------------------
void sub_8CACD_draw_cursor2()//26dacd
{
	if (x_DWORD_E3768)
	{
		x_DWORD_E3758 = 1;
		sub_8C635_draw_cursor();
	}
}

//----- (0008CB1F) --------------------------------------------------------
void sub_8CB1F()//26db1f
{
	x_DWORD_E3758 = 0;
}

void mouse_events(Bit32u buttons, int x, int y)
{
	sub_8CB3A(buttons, x, 0, y);//26db3a
};

int x_BYTE_E3767;
int x_DWORD_180710_mouse_buttons_states;
int x_WORD_18073E;
int word_E3764;
int x_WORD_180742;
int x_WORD_180748;
int x_WORD_180740;

//----- (0008CB3A) --------------------------------------------------------
void sub_8CB3A(Bit32u mouse_states, Bit32s mouse_posx, Bit32s a3, Bit32s mouse_posy)//26db3a
{
	//((void (*)(x_DWORD))_GETDS)((uint16_t)__DS__);
	Bit16s temp_mouse_x; // [esp+4h] [ebp-8h]
	Bit16s temp_mouse_y; // [esp+8h] [ebp-4h]
	//void *retaddr[2]; // [esp+1Ch] [ebp+10h]

	//!!!!!!!! debug
		if (mouseturnoff)
		{
			mouse_posx=0x140;
			mouse_posy=0xc8;
		}
	//!!!!!!!! debug

	temp_mouse_x = mouse_posx;
	temp_mouse_y = mouse_posy;

	if (x_DWORD_E3768)//2b4768 - 00000001
	{
		x_BYTE_E3767 = 1;
		x_DWORD_180710_mouse_buttons_states = mouse_states;//[ebp-c] - 00000001 // stav tlacitek 1 -zmena pozice
		/*if (x_WORD_180660_VGA_type_resolution & 8)
		{
			temp_mouse_x = mouse_posx >> 3;//[ss:ebp-8] 0 - x
			temp_mouse_y = mouse_posy >> 3;//[ss:ebp-4] 0 - y
			//only for text mode?
		}*/
		x_WORD_E3760_mouse.x = temp_mouse_x; //nastav x
		//mouse_state = temp_mouse_y;
		x_WORD_E3760_mouse.y = temp_mouse_y; //nastav y
		if (x_WORD_E3760_mouse.x > 638)//pokud je x>638 nastav je na 638
			x_WORD_E3760_mouse.x = 638;
		if (x_WORD_E3760_mouse.y > 478)//pokud je y>478 nastav je na 478
			x_WORD_E3760_mouse.y = 478;
		if (x_DWORD_180710_mouse_buttons_states & 2) // left button pressed
		{
			if (!x_WORD_18074C_mouse_left2_button)//first cycle after press
			{
				if (x_WORD_18073E <= 0)
				{
					//mouse_state = word_E3764;
					x_WORD_18073E = word_E3764;
				}
				else
				{
					x_WORD_180742 = 1;
				}
			}
			if (!x_WORD_18074C_mouse_left2_button && !x_WORD_180746_mouse_left_button)//first cycle after press and ...
			{
				x_WORD_180746_mouse_left_button = 1;
				x_WORD_E375C_mouse_position_x = temp_mouse_x;
				//mouse_state = temp_mouse_y;
				x_WORD_E375E_mouse_position_y = temp_mouse_y;
			}
			x_WORD_18074C_mouse_left2_button = 1;
		}
		if (x_DWORD_180710_mouse_buttons_states & 4)// left button released
			x_WORD_18074C_mouse_left2_button = 0;
		if (x_DWORD_180710_mouse_buttons_states & 8)// right button pressed
		{
			if (!x_WORD_18074A_mouse_right2_button && !x_WORD_180744_mouse_right_button)//first cycle after press and ...
			{
				x_WORD_180744_mouse_right_button = 1;
				x_WORD_E375C_mouse_position_x = temp_mouse_x;
				//mouse_state = temp_mouse_y;
				x_WORD_E375E_mouse_position_y = temp_mouse_y;
			}
			x_WORD_18074A_mouse_right2_button = 1;
		}
		if (x_DWORD_180710_mouse_buttons_states & 0x10)// right button released
			x_WORD_18074A_mouse_right2_button = 0;
		if (x_DWORD_180710_mouse_buttons_states & 0x20)// middle button pressed?
		{
			if (!x_WORD_180748 && !x_WORD_180740)
			{
				x_WORD_180740 = 1;
				x_WORD_E375C_mouse_position_x = temp_mouse_x;
				//mouse_state = temp_mouse_y;
				x_WORD_E375E_mouse_position_y = temp_mouse_y;
			}
			x_WORD_180748 = 1;
		}
		if (x_DWORD_180710_mouse_buttons_states & 0x40)// middle button released?
			x_WORD_180748 = 0;
		if (!x_DWORD_E3758)
		{
			HIWORD(x_DWORD_180734) = x_WORD_E3BA4;
			sub_8C839();//draw cursor maybe
			/*mouse_state = */sub_8C329();
			if (x_WORD_180660_VGA_type_resolution & 8)
				/*mouse_state = */sub_9951B(SHIWORD(x_DWORD_180734));
		}
	}

	
	//return MK_FP(retaddr[0], retaddr[0])(a1, a2);
}


posistruct pathstr_to_posistr(Pathstruct in)
{
	posistruct out;
	out.data = *in.var28_begin_buffer;
	out.width = *in.var28_begin_buffer[4];
	out.height = *in.var28_begin_buffer[5];
	return out;
};
//----- (0008CD27) --------------------------------------------------------
void sub_8CD27_set_cursor(posistruct a2)//26dd27
{

	//a2
	// 446f1a00 80 52 35 00 e0 9e 2b
	// 1a6f44: 78651a00 00 00
	// 1a6578: 0b0005a1a1a1a1a10005

	//int result; // eax
	unsigned int i; // [esp+0h] [ebp-10h]
	Bit32s v3; // [esp+4h] [ebp-Ch]
	//int16_t v4; // [esp+8h] [ebp-8h]
	//int v5; // [esp+Ch] [ebp-4h]
	x_DWORD_E3758 = 1;//2b4758
	//v5 = (int)x_DWORD_180628b_screen_buffer;
	Bit8u* temp_screen_buffer = x_DWORD_180628b_screen_buffer;
	x_DWORD_180628b_screen_buffer = x_DWORD_180730_cursor_data;//351730
	//x_DWORD_180730_cursor_data = x_DWORD_180628b_screen_buffer;// hack
	if (a2.data)
	{
		x_WORD_18072C_cursor_sizex = a2.width;
		x_WORD_18072E_cursor_sizey = a2.height;
	}
	else
	{
		x_WORD_18072C_cursor_sizex = 0;
		x_WORD_18072E_cursor_sizey = 0;
	}
	if (x_WORD_180660_VGA_type_resolution & 1)
	{
		x_WORD_18072C_cursor_sizex >>= 1;
		x_WORD_18072E_cursor_sizey >>= 1;
	}
	x_DWORD_18065C = x_DWORD_180650_positiony;
	x_DWORD_180640_help_screen_height = x_DWORD_180630_screen_height;
	x_DWORD_180638 = x_DWORD_18063C_sprite_sizex;
	x_DWORD_18064C_help_screen_width = x_DWORD_180634_screen_width;
	x_DWORD_180658 = x_DWORD_180648_map_resolution2_x;
	x_DWORD_180654 = x_DWORD_180644_map_resolution2_y;
	x_DWORD_180650_positiony = 0;
	x_DWORD_180630_screen_height = 64;
	x_DWORD_18063C_sprite_sizex = 0;
	x_DWORD_180634_screen_width = 64;
	x_DWORD_180648_map_resolution2_x = 64;
	x_DWORD_180644_map_resolution2_y = 64;
	//v4 = x_WORD_E36D4;
	x_WORD_E36D4 = 0;
	v3 = x_DWORD_18062C_resolution_x;
	x_DWORD_18062C_resolution_x = 64;
	//x_DWORD_180730_cursor_data = (Bit8u*)malloc(0x1000);//fix it
	for (i = 0; i < 0x1000; i++)
	{
		x_DWORD_180730_cursor_data[i] = 0xfe;
		//printf("%d",i);
	}
	if (a2.data)
		sub_8F8B0_draw_bitmap320(0, 0, a2);//2708B0 super inicializace //a2 ma byt 86 nebo a1 nema nikam ukazovat
	x_DWORD_180628b_screen_buffer = temp_screen_buffer;
	x_DWORD_18062C_resolution_x = v3;
	x_WORD_E36D4 = x_WORD_E36D4;//355230
	x_DWORD_180650_positiony = x_DWORD_18065C;
	x_DWORD_180630_screen_height = x_DWORD_180640_help_screen_height;
	x_DWORD_18063C_sprite_sizex = x_DWORD_180638;
	x_DWORD_180634_screen_width = x_DWORD_18064C_help_screen_width;
	x_DWORD_180648_map_resolution2_x = x_DWORD_180658;
	x_DWORD_180644_map_resolution2_y = x_DWORD_180654;
	//result = v5;
	//x_DWORD_180628b_screen_buffer = (Bit8u*)v5;
	x_DWORD_E3758 = 0;

	//return result;
}

//----- (0008CEDF) --------------------------------------------------------
signed int sub_8CEDF_install_mouse()//26dedf
{
	//int16_t v1; // [esp+0h] [ebp-54h]
	//int16_t v2; // [esp+1Ch] [ebp-38h]
	int16_t v3; // [esp+24h] [ebp-30h]
	void(*v4)(Bit32u a1, Bit32s a2, Bit32s a3, Bit32s a4); // [esp+28h] [ebp-2Ch]
	//int16_t v5; // [esp+38h] [ebp-1Ch]
	void(*v6)(Bit32u a1, Bit32s a2, Bit32s a3, Bit32s a4); // [esp+44h] [ebp-10h]
	//int v7; // [esp+48h] [ebp-Ch]
	int i; // [esp+4Ch] [ebp-8h]

	x_DWORD_E3768 = 0;
	//segread((SREGS*)&v5);
	//v2 = 0;
	//int386(0x33, (REGS*)&v2, (REGS*)&v1);//mouse reset
	//if ( v1 != -1 )
	//  return 0;
	//v2 = 0xc;
	v3 = 127;
	//fix it LOWORD(v7) = __CS__;
	v6 = sub_8CB3A;
	v4 = sub_8CB3A;
	//fix it v5 = __CS__;
	/*
	adress: 160:26db3a - sub_8CB3A
	mask:7f
	http://stanislavs.org/helppc/int_33-c.html
	*/
	//int386x(0x33, (REGS*)&v2, (REGS*)&v1, (SREGS*)&v5);//set mouse subroutine
	sub_8D12F_set_mouse_viewport();
	if (!x_DWORD_180730_cursor_data)
		x_DWORD_180730_cursor_data = (Bit8u*)malloc(4096);//image buffers?-blit?
	if (!x_DWORD_180700)
		x_DWORD_180700 = (Bit8u*)malloc(4096);
	if (!x_DWORD_1806F0)
		x_DWORD_1806F0 = (Bit8u*)malloc(4096);
	if (!x_DWORD_180730_cursor_data || !x_DWORD_180700 || !x_DWORD_1806F0)
		return 0;
	x_WORD_18072C_cursor_sizex = 0;
	x_WORD_18072E_cursor_sizey = 0;
	LOWORD(x_DWORD_180734) = 64;
	for (i = 0; i < 4096; i++)
		*(x_BYTE *)(i + x_DWORD_180730_cursor_data) = -2;
	if (x_DWORD_180720)
		;// fix it! sub_8CD27_set_cursor((Bit8u**)x_DWORD_180720);
	//v2 = 2;
	//int386(0x33, (REGS*)&v2, (REGS*)&v1);//hide mouse
	if (x_WORD_180660_VGA_type_resolution & 8)
	{
		//v2 = 0xF;
		v3 = 1;
		LOWORD(v4) = 1;
		//int386(0x33, (REGS*)&v2, (REGS*)&v1);//set pixel ratio
	}
	x_DWORD_E3768 = 1;//fix it
	return 1;
}

//----- (0008D12F) --------------------------------------------------------
int sub_8D12F_set_mouse_viewport()//26e12f
{
	return 0;
}

//----- (0008D290) --------------------------------------------------------
void sub_8D290_init_sound(/*char* a1*//*, int a2, int a3*/)//26e290
{
	//int (*v3)(int); // eax
	//x_DWORD *v4; // eax
	IO_PARMS v5 = {}; // [esp+4h] [ebp-3Ch]
	char v6; // [esp+1Ch] [ebp-24h]
	//errno_t v7x; // [esp+2Ch] [ebp-14h]
	char* v7;
	Bit32u v8; // [esp+34h] [ebp-Ch]
	int v9; // [esp+38h] [ebp-8h]
	char v10; // [esp+3Ch] [ebp-4h]

	//fix it
	//v7 = 0;
	//v5 = 0;
	//fix it

	//char v8x[200];
	//IO_PARMS v9x = {};

	v10 = 0;
	if (!x_BYTE_E3798_sound_active2)
		return;
	x_WORD_E37B6_sound_number = x_WORD_E37B4;
	if (!x_WORD_E37B4)
	{
		if (!x_BYTE_E37FC_music)
		{
			if (x_BYTE_E37B8)
				sub_919C0();
		}
		x_BYTE_E3798_sound_active2 = 0;
		x_BYTE_E3799_sound_card = 0;
		myprintf("\nCould not load any digital samples\n");
		return;
	}
	if (!x_BYTE_E37B8)
	{
		sub_90F60();//set 355140
		//v3 = sub_9D420(( (*)(void*))sub_83E80_freemem4);
		//((void (*)(int (*)(int)))loc_917D0)(v3);
		//test removing sub_917D0(/*v3*/);
		//fixed
		x_DWORD_181DAC[0] = 0xc8;
		x_DWORD_181DAC[1] = 0x01;//DB0
		x_DWORD_181DAC[2] = 0x800;//DB4
		x_DWORD_181DAC[3] = 0x64;//DB8
		x_DWORD_181DAC[4] = 0x10;//DBC
		x_DWORD_181DAC[5] = 0x64;//DC0
		x_DWORD_181DAC[6] = 0x28f;//DC4
		x_DWORD_181DAC[7] = 0x00;//DC8
		x_DWORD_181DAC[8] = 0x00;//DCC
		x_DWORD_181DAC[9] = 0x01;//DD0
		x_DWORD_181DAC[10] = 0x00;//DD4
		x_DWORD_181DAC[11] = 0x78;//DD8
		x_DWORD_181DAC[12] = 0x08;//DDC
		x_DWORD_181DAC[13] = 0x7f;//DE0
		x_DWORD_181DAC[14] = 0x01;//DE4
		x_DWORD_181DAC[15] = 0x00;//DE8
		x_DWORD_181DAC[16] = 0x02;//DEC
		x_DWORD_181DAC[17] = 0x01;//DF0
		x_DWORD_181DAC[18] = 0x01;//DF4

		//x_DWORD_181DB4 = 0x800;//fixed
		//x_DWORD_181DB8 = 0x64;//fixed
		//x_DWORD_181DBC = 0x10;//fixed
		//x_DWORD_181DC0 = 0x64;//fixed
		//x_DWORD_181DC4 = 0x028f;//fixed
		//x_DWORD_181DC8 = 0x00;//fixed
		//x_DWORD_181DCC = 0x00;//fixed
		//x_DWORD_181DD0 = 0x01;//fixed
		//x_DWORD_181DD4 = 0x00;//fixed
		//x_DWORD_181DD8 = 0x78;//fixed
		//x_DWORD_181DDC = 0x08;//fixed
		//x_DWORD_181DE0 = 0x7f;//fixed
		//x_DWORD_181DE4 = 0x01;//fixed
		//x_DWORD_181DE8 = 0x00;//fixed
		//x_DWORD_181DEC = 0x02;//fixed
		//x_DWORD_181DF0 = 0x01;//fixed
		//x_DWORD_181DF4 = 0x01;//fixed


		//x_DWORD_181DF8 = 0x00;//fixed
		//x_DWORD_181DFC = 0x00;//fixed
		//x_DWORD_181E00 = 0x00;//fixed
		//fixed

		x_BYTE_E37B8 = 1;
	}
	if (sub_90EE0() == -1)
	{
		x_BYTE_E3798_sound_active2 = 0;
		x_BYTE_E3799_sound_card = 0;
		if (x_BYTE_E37FC_music && x_BYTE_E37FE)
		{
			sub_99C90();
		}
		else
		{
			x_BYTE_E37FC_music = 0;
			x_BYTE_E37FD = 0;
			sub_919C0();
		}
		return;
	}
	size_t sz = 0;
	//v7x = _dupenv_s(&v7,&sz, "MDSOUND");//fix v7
	v7 = mygetenv("MDSOUND");
	if (v7)
	{
		// FIXME: types
		// sscanf((char *const)v7, "%s %x %d %d %d", (unsigned int)&v6);
		x_DWORD_180B48 = sub_93330_AIL_install_DIG_driver_file(/*(int)a1, */&v6, &v5);
		if (!x_DWORD_180B48)
		{
			if (!x_BYTE_E37FC_music)
				sub_919C0();
			sub_90F20_restore_old_directory();
			x_BYTE_E3798_sound_active2 = 0;
			x_BYTE_E3799_sound_card = 0;
			return;
		}
		sprintf(unk_180A30.driver_name, "%s", &v6);
		x_WORD_180B30 = v5.IO;//fixed
		sub_93480_AIL_uninstall_DIG_driver((unsigned int *)x_DWORD_180B48);
		v10 = 1;
	}
	else
	{
		/*x_WORD_E2A14_sound_active = 1;// sound fixed
		x_WORD_E3804 = 6;// sound fixed
		return; // sound fixed*/
		if (sub_92190_AIL_read_INI(&unk_180A30, (char*)"DIG.INI"/*, unk_180AB0, v9x*/)) // sound driver
		{
			if (!_stricmp(unk_180A30.driver_name, "None"))//351ab0
			{
				if (!x_BYTE_E37FC_music)
					sub_919C0();
				sub_90F20_restore_old_directory();
				x_BYTE_E3798_sound_active2 = 0;
				x_BYTE_E3799_sound_card = 0;
				return;
			}
			if (!sub_931F0_AIL_install_DIG_INI(/*(int)a1, */&x_DWORD_180B48))//351b48
			{
				sub_93480_AIL_uninstall_DIG_driver((unsigned int *)x_DWORD_180B48);
				v10 = 1;
			}
			//fix hqsound
			for (int i = 0; i < x_DWORD_180B48->n_samples_24; i++)
				x_DWORD_180B48->samples_23[i].start_44mhz = NULL;
			//fix hqsound

		}
		if (!v10)
		{
			if (!x_BYTE_E37FC_music)
				sub_919C0();
			sub_90F20_restore_old_directory();
			x_BYTE_E3798_sound_active2 = 0;
			x_BYTE_E3799_sound_card = 0;
			return;
		}
		sub_90F20_restore_old_directory();
	}
	sub_90F20_restore_old_directory();
	sub_8D800_sound_proc2();
	if (x_WORD_E37B6_sound_number)
	{
		if (x_WORD_E37B6_sound_number < 0x336u)
		{
			if (x_WORD_E37B6_sound_number < 0x320u)
			{
				if (!x_WORD_E37B6_sound_number)
				{
					x_BYTE_E3798_sound_active2 = 0;
					x_BYTE_E3799_sound_card = 0;
					myprintf("\nCould not load any digital samples\n");
					return;
				}
			}
			else if (x_WORD_E37B6_sound_number <= 0x320u)
			{
				x_DWORD_E37BC_sound_frequence = 11025;
				x_BYTE_E37AE = 0;
			}
			else if (x_WORD_E37B6_sound_number == 811)
			{
				x_DWORD_E37BC_sound_frequence = 11025;
				x_BYTE_E37AE = 0;
			}
		}
		else if (x_WORD_E37B6_sound_number <= 0x336u)
		{
			x_DWORD_E37BC_sound_frequence = 22050;
			x_BYTE_E37AE = 0;
		}
		else if (x_WORD_E37B6_sound_number < 0x656u)
		{
			if (x_WORD_E37B6_sound_number == 1611)
			{
				x_DWORD_E37BC_sound_frequence = 11025;
				x_BYTE_E37AE = 1;
			}
		}
		else if (x_WORD_E37B6_sound_number <= 0x656u)
		{
			x_DWORD_E37BC_sound_frequence = 22050;
			x_BYTE_E37AE = 1;
		}
		else if (x_WORD_E37B6_sound_number == 1644)
		{
			x_DWORD_E37BC_sound_frequence = 44100;
			x_BYTE_E37AE = 1;
		}
		sub_91A80_AIL_set_preference(0, 200);
		sub_91A80_AIL_set_preference(1, x_DWORD_E37BC_sound_frequence);
		sub_91A80_AIL_set_preference(3, 100);
		sub_91A80_AIL_set_preference(4, x_DWORD_E3794_sound_buffer3_lenght + 1);
		sub_91A80_AIL_set_preference(5, 127);
		sub_91A80_AIL_set_preference(6, 655);
		if (x_BYTE_E379C)
			sub_91A80_AIL_set_preference(7, 1);
		else
			sub_91A80_AIL_set_preference(7, 0);
		if (!x_BYTE_E379B)
			sub_91A80_AIL_set_preference(17, 0);
		if (x_BYTE_E37AE)
		{
			sub_91A80_AIL_set_preference(8, 1);
			sub_91A80_AIL_set_preference(9, 1);
		}
		else
		{
			sub_91A80_AIL_set_preference(8, 0);
			sub_91A80_AIL_set_preference(9, 0);
		}
		sub_90EE0();
		x_DWORD_180B48 = sub_93330_AIL_install_DIG_driver_file(/*(int)a1, */unk_180A30.driver_name, &unk_181D90);
		if (x_DWORD_180B48)//
		{
			sub_90F20_restore_old_directory();
			if (x_BYTE_E3798_sound_active2)
			{
				//x_DWORD_180B4C_end_sound_buffer3 = (Bit8u*)unk_180750_sound_buffer3 + 23 * x_DWORD_E3794_sound_buffer3_lenght;
				x_DWORD_180B4C_end_sound_buffer3_endindex = x_DWORD_E3794_sound_buffer3_lenght;
				//v8 = unk_180750_sound_buffer3;
				v8 = 0;
				v9 = 0;
				while (v8 < x_DWORD_180B4C_end_sound_buffer3_endindex)
				{
					unk_180750_sound_buffer3[v8] = sub_93510_AIL_allocate_sample_handle(x_DWORD_180B48);
					unk_180750_sound_buffer3[v8]->len_4_5[1] = 0;
					unk_180750_sound_buffer3[v8]->start_44mhz = NULL;
					v8++;
					v9++;
				}
				x_BYTE_E379A = 1;
				sub_8E470_sound_proc17_volume(x_DWORD_E37B0);
			}
		}
		else
		{
			if (!x_BYTE_E37FC_music)
				sub_919C0();
			sub_90F20_restore_old_directory();
			x_BYTE_E3798_sound_active2 = 0;
			x_BYTE_E3799_sound_card = 0;
			sub_83E80_freemem4(x_DWORD_E37A0_sound_buffer2);
			x_DWORD_E37A4_sound_buffer3 = 0;
			sub_83E80_freemem4(x_DWORD_E37A8_sound_buffer1);
		}
	}
	else
	{
		if (!x_BYTE_E37FC_music)
			sub_919C0();
		x_BYTE_E3798_sound_active2 = 0;
		x_BYTE_E3799_sound_card = 0;
		myprintf("\nCould not load any digital samples\n");
	}
}

//----- (0008D800) --------------------------------------------------------
void sub_8D800_sound_proc2()//26E800
{
	signed int v0; // [esp+4h] [ebp-4h]

	v0 = 1;
	while (v0)
	{
		v0 = sub_84300_load_sound(x_BYTE_E37AC);
		if (v0)
		{
			if (x_WORD_E37B6_sound_number < 0x336u)
			{
				if (x_WORD_E37B6_sound_number >= 0x320u)
				{
					if (x_WORD_E37B6_sound_number <= 0x320u)
					{
						x_WORD_E37B6_sound_number = 0;
						return;
					}
					if (x_WORD_E37B6_sound_number == 811)
						x_WORD_E37B6_sound_number = 800;
				}
			}
			else if (x_WORD_E37B6_sound_number <= 0x336u)
			{
				x_WORD_E37B6_sound_number = 1611;
			}
			else if (x_WORD_E37B6_sound_number < 0x656u)
			{
				if (x_WORD_E37B6_sound_number == 1611)
					x_WORD_E37B6_sound_number = 811;
			}
			else if (x_WORD_E37B6_sound_number <= 0x656u)
			{
				x_WORD_E37B6_sound_number = 822;
			}
			else if (x_WORD_E37B6_sound_number == 1644)
			{
				x_WORD_E37B6_sound_number = 1622;
			}
		}
	}
}

//----- (0008D8F0) --------------------------------------------------------
void sub_8D8F0_sound_proc3_endsample()//26e8f0
{
	Bit32u i; // [esp+0h] [ebp-4h]
	//i fix
	if (x_BYTE_E3798_sound_active2 && x_BYTE_E3799_sound_card)//ma to byt 0 a 0 2b4798
	{
		sub_8F850_sound_proc22();//270850
		for (i = 0; i < x_DWORD_180B4C_end_sound_buffer3_endindex; i++)
		{
			sub_93D00_AIL_end_sample(unk_180750_sound_buffer3[i]);//274d00
			/*//*((x_WORD *)i + 9) = 0;
			unk_180750_sound_buffer3[i]->sam_var[4] &= 0x0000ffff;
			//*(int *)((char *)i + 14) = 0;
			unk_180750_sound_buffer3[i]->sam_var[3] &= 0x0000ffff;
			unk_180750_sound_buffer3[i]->sam_var[4] &= 0xffff0000;
			//*((x_BYTE *)i + 20) = 0;
			//*((x_BYTE *)i + 21) = 0;
			unk_180750_sound_buffer3[i]->sam_var[5] &= 0xffff0000;*/
			unk_180750_sound_buffer3[i]->vol_scale_18[0][0] = 0;//18
			unk_180750_sound_buffer3[i]->flags_14 = 0;//14
			unk_180750_sound_buffer3[i]->vol_scale_18[0][2] = 0;//20
			unk_180750_sound_buffer3[i]->vol_scale_18[0][3] = 0;//21
		}
	}
	/*return */sub_9F040();
}

//----- (0008D970) --------------------------------------------------------
void /*__fastcall*/ sub_8D970_init_music(/*char* a1*//*int a1, int a2, char* a3*/)//26e970
{
	//int(*v3)(int); // eax
	//char v4; // [esp+0h] [ebp-C8h]
	IO_PARMS v5 = {}; // [esp+90h] [ebp-38h]
	char v6; // [esp+A8h] [ebp-20h]
	char* v7; // [esp+B8h] [ebp-10h]
	char v8; // [esp+C0h] [ebp-8h]

	//errno_t v7x;
	//fix it
	v7 = 0;
	//fix it

	//char v8x[200];
	//IO_PARMS v9x = {};

	v8 = 0;
	if (!x_BYTE_E37FC_music)
		return;
	if (!x_BYTE_E37B8)
	{
		sub_90F60();
		//v3 = sub_9D420((int (*)(int))sub_83E80_freemem4);
		//((void (/*__fastcall*/ *)(int (*)(int)))loc_917D0)(v3);
		x_BYTE_E37B8 = 1;
	}
	sub_91A80_AIL_set_preference(11, 120);
	sub_91A80_AIL_set_preference(12, 1);
	sub_91A80_AIL_set_preference(13, 127);
	sub_91A80_AIL_set_preference(14, 1);
	sub_91A80_AIL_set_preference(15, 0);
	sub_91A80_AIL_set_preference(16, 12);
	if (!x_BYTE_E379B)
		sub_91A80_AIL_set_preference(17, 0);
	if (!strcmp(unk_181B50, "\\"))
		sprintf(printbuffer, "%c:%sSOUND/SAMPLE", x_DWORD_181BE0 + 64, unk_181B50);
	else
		sprintf(printbuffer, "%c:%s/SOUND/SAMPLE", x_DWORD_181BE0 + 64, unk_181B50);
	sub_96AE0_AIL_set_GTL_filename_prefix((Bit8u*)printbuffer);
	if ((char)sub_90EE0() == -1)
	{
		x_BYTE_E37FC_music = 0;
		x_BYTE_E37FD = 0;
		if (x_BYTE_E3798_sound_active2 && x_BYTE_E379A)
		{
			sub_99C10_sound_proc4();
		}
		else
		{
			x_BYTE_E3798_sound_active2 = 0;
			x_BYTE_E3799_sound_card = 0;
			sub_919C0();
		}
		return;
	}
	size_t sz = 0;
	//_dupenv_s(&v7,&sz, "MDMUSIC");
	v7 = mygetenv("MDMUSIC");
	if (v7)
	{
		// FIXME: types
		// sscanf((char *const)v7, "%s %x %d %d %d", (unsigned int)&v6);
		x_DWORD_180C7C = sub_95850_AIL_install_MDI_driver_file(/*a1,*/ &v6, &v5);
		if (!x_DWORD_180C7C)
		{
			if (!x_BYTE_E3798_sound_active2)
				sub_919C0();
			sub_90F20_restore_old_directory();
			x_BYTE_E37FC_music = 0;
			x_BYTE_E37FD = 0;
			return;
		}
		sprintf(unk_180BE0, "%s", &v6);
		v8 = 1;
	}
	else
	{
		if (sub_92190_AIL_read_INI(&unk_180B60, (char*)"MDI.INI"/*,v8x,v9x*/)) //driver
		{
			if (!_stricmp(unk_180B60.driver_name, "None"))
			{
				if (!x_BYTE_E3798_sound_active2)
					sub_919C0();
				sub_90F20_restore_old_directory();
				x_BYTE_E37FC_music = 0;
				x_BYTE_E37FD = 0;
				return;
			}
			if (!sub_95710_AIL_install_MDI_INI(/*(int)a1, (int **)*/&x_DWORD_180C7C))
				v8 = 1;
		}
		if (!v8)
		{
			if (!x_BYTE_E3798_sound_active2)
				sub_919C0();
			sub_90F20_restore_old_directory();
			x_BYTE_E37FC_music = 0;
			x_BYTE_E37FD = 0;
			return;
		}
		sub_90F20_restore_old_directory();
	}
	sub_90F20_restore_old_directory();
	x_DWORD_180C78 = sub_95A30_AIL_allocate_sequence_handle(x_DWORD_180C7C);//driver
	if (!_stricmp(unk_180B60.driver_name, "ADLIB.MDI"))
	{
		x_BYTE_180C84_drivertype='f';
	LABEL_69:
		if (x_BYTE_E37FC_music && sub_8EAD0_load_music(x_BYTE_E3814))
		{
			if (x_BYTE_E3815 == 1)
			{
				sub_9FA80();
				x_BYTE_E3815 = 0;
			}
			sub_959A0_AIL_uninstall_MDI_driver(x_DWORD_180C7C);
			if (!x_BYTE_E3798_sound_active2)
				sub_919C0();
			x_BYTE_E37FC_music = 0;
			x_BYTE_E37FD = 0;
			myprintf("\nError opening music files\n");
		}
		else
		{
			x_BYTE_E37FE = 1;
			sub_8E410_sound_proc16_xmidivolume(x_DWORD_E37F8_midi_volume);
		}
		return;
	}
	if (!_stricmp(unk_180B60.driver_name, "ADLIBG.MDI"))
	{
		x_BYTE_180C84_drivertype='f';
		goto LABEL_69;
	}
	if (!_stricmp(unk_180B60.driver_name, "OPL3.MDI"))
	{
		x_BYTE_180C84_drivertype = 'f';
		goto LABEL_69;
	}
	if (!_stricmp(unk_180B60.driver_name, "PAS.MDI"))
	{
		x_BYTE_180C84_drivertype = 'f';
		goto LABEL_69;
	}
	if (!_stricmp(unk_180B60.driver_name, "PASPLUS.MDI"))
	{
		x_BYTE_180C84_drivertype = 'f';
		goto LABEL_69;
	}
	if (!_stricmp(unk_180B60.driver_name, "SBLASTER.MDI"))
	{
		x_BYTE_180C84_drivertype = 'f';
		goto LABEL_69;
	}
	if (!_stricmp(unk_180B60.driver_name, "SBPRO1.MDI"))
	{
		x_BYTE_180C84_drivertype = 'f';
		goto LABEL_69;
	}
	if (!_stricmp(unk_180B60.driver_name, "SBPRO2.MDI"))
	{
		x_BYTE_180C84_drivertype = 'f';
		goto LABEL_69;
	}
	if (!_stricmp(unk_180B60.driver_name, "ESFM.MDI"))
	{
		x_BYTE_180C84_drivertype = 'f';
		goto LABEL_69;
	}
	if (!_stricmp(unk_180B60.driver_name, "SBAWE32.MDI"))
	{
		x_BYTE_180C84_drivertype = 'w';
		sub_9F740((char*)"Bullfrog");
		if (!x_BYTE_E3815)
			x_BYTE_180C84_drivertype = 'g';
		goto LABEL_69;
	}
	if (!_stricmp(unk_180B60.driver_name, "MPU401.MDI"))
	{
		x_BYTE_180C84_drivertype = 'g';
		goto LABEL_69;
	}
	if (!_stricmp(unk_180B60.driver_name, "SNDSCAPE.MDI"))
	{
		x_BYTE_180C84_drivertype = 'g';
		goto LABEL_69;
	}
	if (!_stricmp(unk_180B60.driver_name, "MT32MPU.MDI"))
	{
		x_BYTE_180C84_drivertype = 'r';
		goto LABEL_69;
	}
	if (!sub_969A0_AIL_MDI_driver_type(x_DWORD_180C7C))
	{
		x_BYTE_180C84_drivertype = 'g';
		goto LABEL_69;
	}
	if (sub_969A0_AIL_MDI_driver_type(x_DWORD_180C7C) == 1 || sub_969A0_AIL_MDI_driver_type(x_DWORD_180C7C) == 2)
	{
		x_BYTE_180C84_drivertype = 'f';
		goto LABEL_69;
	}
	sub_959A0_AIL_uninstall_MDI_driver(x_DWORD_180C7C);
	if (!x_BYTE_E3798_sound_active2)
		sub_919C0();
	x_BYTE_E37FC_music = 0;
	x_BYTE_E37FD = 0;
	myprintf("\nError driver not supported\n");
}

//----- (0008E020) --------------------------------------------------------
void sub_8E020_sound_proc14_stopsequence()//26f020
{
	if (x_BYTE_E37FC_music && x_BYTE_E37FD && x_WORD_E3802)
	{
		if (x_BYTE_E3818)
			;// sub_92DC0_AIL_release_timer_handle(x_DWORD_180C80);
		x_BYTE_E3819 = 0;
		x_BYTE_E3818 = 0;
		x_BYTE_E3817 = 1;
		x_BYTE_E3816 = 0;
		x_BYTE_E381A = -1;
		if (sub_96170_AIL_sequence_status(x_DWORD_180C78) != 2)
		{
			sub_95DE0_AIL_stop_sequence(x_DWORD_180C78);
			sub_95F00_AIL_end_sequence(x_DWORD_180C78);
		}
		x_WORD_E3802 = 0;
	}
}

//----- (0008E160) --------------------------------------------------------
void sub_8E160_sound_proc15_startsequence(int16_t a1, uint16_t a2)//26f160
{
	//uint8_t i; // [esp+0h] [ebp-4h]

	if (x_BYTE_E37FC_music && x_BYTE_E37FD && a1 <= x_WORD_E3804 && x_WORD_E3802 != a1)
	{
		if (x_BYTE_E3818)
			;// sub_92DC0_AIL_release_timer_handle(x_DWORD_180C80);
		x_BYTE_E3819 = 0;
		x_BYTE_E3818 = 0;
		x_BYTE_E3817 = 1;
		x_BYTE_E3816 = 0;
		x_BYTE_E381A = -1;
		if (x_WORD_E3802)
		{
			if (sub_96170_AIL_sequence_status(x_DWORD_180C78) != 2)
			{
				sub_95DE0_AIL_stop_sequence(x_DWORD_180C78);
				sub_95F00_AIL_end_sequence(x_DWORD_180C78);
			}
			x_WORD_E3802 = 0;
		}
		sub_95C00_AIL_init_sequence(x_DWORD_180C78, (Bit8u*)*(Bit32u*)(x_DWORD_E3808_music_header + 32 * a1 + 18), 0, a1);
		// FIXME: types
		// sub_97670_AIL_register_trigger_callback(x_DWORD_180C78, sub_8E0D0);
		/*for ( i = 0; i < 0x10u; i++ )
		{
		  x_BYTE_180C90[i] = 0;
		  sub_98360_AIL_send_channel_voice_message(x_DWORD_180C7C, x_DWORD_180C78, i | 0xB0, 0, 0);
		  sub_98360_AIL_send_channel_voice_message(x_DWORD_180C7C, x_DWORD_180C78, i | 0xB0, 7u, 0);
		  sub_98360_AIL_send_channel_voice_message(x_DWORD_180C7C, x_DWORD_180C78, i | 0xE0, 0, 64);
		  sub_98360_AIL_send_channel_voice_message(x_DWORD_180C7C, x_DWORD_180C78, i | 0xB0, 0xBu, 127);
		  sub_98360_AIL_send_channel_voice_message(x_DWORD_180C7C, x_DWORD_180C78, i | 0xB0, 1u, 0);
		  sub_98360_AIL_send_channel_voice_message(x_DWORD_180C7C, x_DWORD_180C78, i | 0xB0, 0x5Bu, 0);
		  sub_98360_AIL_send_channel_voice_message(x_DWORD_180C7C, x_DWORD_180C78, i | 0xB0, 0x5Du, 0);
		}*/
		if (a2 < 0x7Fu)
			sub_96030_AIL_set_sequence_volume(x_DWORD_180C78, a2, 0);
		sub_95D50_AIL_start_sequence(x_DWORD_180C78, a1);
		x_WORD_E3800 = 100;
		x_WORD_E3802 = a1;
	}
}

//----- (0008E410) --------------------------------------------------------
void sub_8E410_sound_proc16_xmidivolume(Bit32s master_volume)//26f410
{
	if (x_BYTE_E37FC_music)
	{
		if (x_BYTE_E37FE)
		{
			if (master_volume != x_DWORD_E37F8_midi_volume && master_volume <= 127 && master_volume >= 0)
			{
				sub_96670_AIL_set_XMIDI_master_volume(x_DWORD_180C7C, master_volume);
				x_DWORD_E37F8_midi_volume = master_volume;
			}
		}
	}
}

//----- (0008E470) --------------------------------------------------------
int sub_8E470_sound_proc17_volume(int a1)//26f470
{
	int result = 0; // eax

	if (x_BYTE_E3798_sound_active2)
	{
		if (x_BYTE_E379A)//2b479a
		{
			result = a1;
			if (a1 != x_DWORD_E37B0 && a1 <= 127 && a1 >= 0)
			{
				sub_94650_AIL_set_digital_master_volume((x_DWORD *)x_DWORD_180B48, a1);
				result = a1;
				x_DWORD_E37B0 = a1;
			}
		}
	}
	return result;
}

//----- (0008E673) --------------------------------------------------------
int16_t sub_8E673()
{
	int16_t result; // ax

	// FIXME: types
	// sub_8F023(x_DWORD_E3840, (int)&x_WORD_E3828, 2u);
	// FIXME: types
	// sub_8F023(x_DWORD_E3840, (int)x_DWORD_E9C38_smalltit, 8u);
	while (1)
	{
		result = x_WORD_E3828;
		if (!x_WORD_E3828)
			break;
		--x_WORD_E3828;
		// FIXME: types
		// sub_8F023(x_DWORD_E3840, (int)&x_DWORD_E3824, 4u);
		// FIXME: types
		// sub_8F023(x_DWORD_E3840, (int)&x_WORD_E381C, 2u);
		switch (x_WORD_E381C)
		{
		case 7:
			sub_8E871();
			break;
		case 12:
			sub_8E948();
			break;
		case 4:
			sub_8E7D5();
			break;
		case 15:
			sub_8E9EF();
			break;
		case 16:
			sub_8E799();
			break;
		default:
			sub_8E7B7();
			break;
		}
	}
	return result;
}

//----- (0008E736) --------------------------------------------------------
int16_t sub_8E736()//26f736
{
	int16_t result; // ax

	// FIXME: types
	// sub_8F023(x_DWORD_E3840, (int)x_DWORD_E9C38_smalltit, x_DWORD_E3824 - 6);
	x_WORD_E381E = *(x_WORD *)x_DWORD_E9C38_smalltit;
	x_WORD_E3820 = *(x_WORD *)(x_DWORD_E9C38_smalltit + 2);
	result = *(x_WORD *)(x_DWORD_E9C38_smalltit + 4);
	x_WORD_E3822 = *(x_WORD *)(x_DWORD_E9C38_smalltit + 4);
	return result;
}

//----- (0008E799) --------------------------------------------------------
int sub_8E799()//26f799
{
	// FIXME: types
	// return sub_8F023(x_DWORD_E3840, (int)x_DWORD_180628b_screen_buffer, x_DWORD_E3824 - 6);
}

//----- (0008E7B7) --------------------------------------------------------
int sub_8E7B7()//26f7b7
{
	// FIXME: types
	// return sub_8F023(x_DWORD_E3840, (int)x_DWORD_E9C38_smalltit, x_DWORD_E3824 - 6);
}

//----- (0008E7D5) --------------------------------------------------------
int sub_8E7D5()//26f7d5
{
	int result; // eax

	result = sub_8F023(x_DWORD_E3840, x_DWORD_EA3C8, x_DWORD_E3824 - 6);
	x_WORD_E387A = 1;
	return result;
}

//----- (0008E7FC) --------------------------------------------------------
void sub_8E7FC()//26f7fc
{
	int16_t v0; // ax
	char *v1; // edi
	x_BYTE *v2; // esi
	int v3; // ecx
	char *v4; // edi
	char v5; // dl
	char v6; // al
	char *v7; // edi
	x_BYTE *v8; // esi
	char v9; // al
	char v10; // al
	int16_t v11; // [esp-2h] [ebp-6h]

	x_WORD_E387A = 0;
	if (x_DWORD_E383C == 1)
	{
		v0 = *(x_WORD *)x_DWORD_EA3C8;
		v1 = (char *)(x_DWORD_EA3C8 + 2);
		v2 = (x_BYTE *)x_DWORD_EA3B8;
		do
		{
			v11 = v0;
			v3 = (uint8_t)*v1;
			v4 = v1 + 1;
			v2 += v3 + v3 + v3;
			v5 = *v4;
			v1 = (char*)(x_WORD*)(v4 + 1);
			do
			{
				v6 = *v1;
				v7 = v1 + 1;
				*v2 = v6;
				v8 = v2 + 1;
				v9 = *v7++;
				*v8++ = v9;
				v10 = *v7;
				v1 = v7 + 1;
				*v8 = v10;
				v2 = v8 + 1;
				--v5;
			} while (v5);
			v0 = v11 - 1;
		} while (v11 != 1);
		sub_41A90_VGA_pallette_install((uint8_t *)x_DWORD_EA3B8);
	}
}

//----- (0008E871) --------------------------------------------------------
int16_t sub_8E871()//26f871
{
	x_WORD *v0; // esi
	x_WORD *v1; // edi
	int16_t result; // ax
	uint8_t v3; // bl
	x_BYTE *v4; // edi
	char v5; // dl
	int16_t v6; // bx
	int16_t v7; // bx
	x_WORD *v8; // [esp+0h] [ebp-10h]
	int16_t i; // [esp+6h] [ebp-Ah]
	int16_t v10; // [esp+8h] [ebp-8h]
	int v11; // [esp+Ch] [ebp-4h]

	v11 = (uint16_t)x_WORD_E3820;
	// FIXME: types
	// sub_8F023(x_DWORD_E3840, (int)x_DWORD_E9C38_smalltit, x_DWORD_E3824 - 6);
	v0 = (x_WORD *)x_DWORD_180628b_screen_buffer;
	v10 = *(x_WORD *)x_DWORD_E9C38_smalltit;
	v1 = (x_WORD *)(x_DWORD_E9C38_smalltit + 2);
	do
	{
		while (1)
		{
			result = *v1;
			++v1;
			v8 = v0;
			if (result >= 0)
				goto LABEL_6;
			if (!(result & 0x4000))
				break;
			v0 = (x_WORD *)((char *)v0 + v11 * -result);
		}
		*((x_BYTE *)v0 + v11 - 1) = result;
	LABEL_6:
		for (i = result; i; i--)
		{
			while (1)
			{
				v3 = *(x_BYTE *)v1;
				// FIXME: types
				// v4 = (char *)v1 + 1;
				v0 = (x_WORD *)((char *)v0 + v3);
				v5 = *v4;
				v1 = (x_WORD*)(v4 + 1);
				if (v5 > 0)
					break;
				v6 = *v1;
				++v1;
				do
				{
					*v0 = v6;
					++v0;
					++v5;
				} while (v5);
				if (!--i)
					goto LABEL_14;
			}
			do
			{
				v7 = *v1;
				++v1;
				*v0 = v7;
				++v0;
				--v5;
			} while (v5);
		}
	LABEL_14:
		v0 = (x_WORD *)((char *)v8 + v11);
		--v10;
	} while (v10);
	return result;
}

//----- (0008E948) --------------------------------------------------------
int sub_8E948()//26f948
{
	int v0; // ST1C_4
	int v1; // eax
	char *v2; // esi
	int v3; // edi
	int16_t v4; // ax
	int v5; // eax
	x_BYTE *v6; // esi
	char *v7; // edi
	uint8_t v8; // al
	char *v9; // esi
	unsigned int v10; // ecx
	char v11; // al
	int result; // eax
	int v13; // [esp+0h] [ebp-10h]
	int16_t i; // [esp+6h] [ebp-Ah]
	int16_t v15; // [esp+8h] [ebp-8h]

	v0 = (uint16_t)x_WORD_E3820;
	// FIXME: types
	// v1 = sub_8F023(x_DWORD_E3840, (int)x_DWORD_E9C38_smalltit, x_DWORD_E3824 - 6);
	LOWORD(v1) = *(x_WORD *)x_DWORD_E9C38_smalltit;
	// FIXME: types
	// v13 = v0 * v1 + (int)x_DWORD_180628b_screen_buffer;
	v2 = (char *)(x_DWORD_E9C38_smalltit + 4);
	v15 = *(x_WORD *)(x_DWORD_E9C38_smalltit + 2);
	do
	{
		v3 = v13;
		v4 = (uint8_t)*v2++;
		for (i = v4; i; i--)
		{
			v5 = (uint8_t)*v2;
			// FIXME: types
			// v6 = v2 + 1;
			v7 = (char *)(v5 + v3);
			v8 = *v6;
			// FIXME: types
			// v9 = v6 + 1;
			if ((v8 & 0x80u) != 0)
			{
				v10 = (uint8_t)-v8;
				v11 = *v9;
				v2 = v9 + 1;
				memset(v7, v11, v10);
				// FIXME: types
				// v3 = (int)&v7[v10];
			}
			else
			{
				qmemcpy(v7, v9, v8);
				v2 = &v9[v8];
				// FIXME: types
				// v3 = (int)&v7[v8];
			}
		}
		result = (uint16_t)x_WORD_E3820;
		v13 += (uint16_t)x_WORD_E3820;
		--v15;
	} while (v15);
	return result;
}

//----- (0008E9EF) --------------------------------------------------------
char sub_8E9EF()//26f9ef
{
	int16_t v0; // ST0C_2
	x_BYTE *v1; // esi
	char *v2; // edi
	int16_t v3; // bx
	int16_t v4; // cx
	uint8_t v5; // dl
	int16_t v6; // ax
	char v7; // dh
	char v8; // dh
	int16_t v10; // [esp+2h] [ebp-2h]

	v10 = x_WORD_E3820;
	v0 = x_WORD_E3822;
	// FIXME: types
	// sub_8F023(x_DWORD_E3840, (int)x_DWORD_E9C38_smalltit, x_DWORD_E3824 - 6);
	v1 = (x_BYTE *)x_DWORD_180628b_screen_buffer;
	v2 = (char *)x_DWORD_E9C38_smalltit;
	v3 = v0;
	do
	{
		++v2;
		v4 = v10;
		do
		{
			v5 = *v2++;
			if ((char)v5 > 0)
			{
				LOBYTE(v6) = v5;
				v4 -= v5;
			}
			else
			{
				HIBYTE(v6) = -1;
				LOBYTE(v6) = v5;
				v4 += v6;
			}
			if ((char)v5 > 0)
			{
				v8 = *v2++;
				do
				{
					*v1++ = v8;
					--v5;
				} while (v5);
			}
			else
			{
				do
				{
					v7 = *v2++;
					*v1++ = v7;
					++v5;
				} while (v5);
			}
		} while (v4);
		--v3;
	} while (v3);
	return v6;
}

//----- (0008EA7B) --------------------------------------------------------
void /*__fastcall*/ sub_8EA7B(int a1, uint16_t a2)//26fa7b
{
	int16_t v2; // dx
	int16_t v3; // cx

	if (x_DWORD_E3844)
	{
		do
		{
			do
			{
				// fix it:__asm { int     21h; DOS - GET CURRENT TIME }
				v2 = 100 * HIBYTE(a2) + (uint8_t)a2;
				v3 = v2;
				a2 = v2 - x_WORD_E3834;
			} while (!a2);
			if ((int16_t)a2 <= 0)
				a2 += 6000;
		} while (a2 < x_DWORD_E3844);
		x_WORD_E3834 = v3;
	}
}

//----- (0008EAD0) --------------------------------------------------------
signed int sub_8EAD0_load_music(int channell)//26fad0
{
	Bit16s driverarray[4]; // [esp+44h] [ebp-1Ch]
	FILE* filehandle; // [esp+50h] [ebp-10h]
	int datapos; // [esp+54h] [ebp-Ch]
	int finaldrivernumber; // [esp+58h] [ebp-8h]
	int filelenght; // [esp+5Ch] [ebp-4h]
	int channellplus; // [esp+74h] [ebp+14h]

	if (!x_BYTE_E37FC_music)
		return 0;
	sub_8E020_sound_proc14_stopsequence();
	filehandle = sub_98817_open((char*)"SOUND/MUSIC.DAT", 512);
	if (!filehandle)
		return 0;
	sub_9891E_seek(filehandle, 0, 2);
	filelenght = myftell(filehandle);
	sub_9891E_seek(filehandle, filelenght - 4, 0);
	sub_988A7_read(filehandle, (Bit8u*)&datapos, 4);
	sub_9891E_seek(filehandle, datapos, 0);
	sub_988A7_read(filehandle, (Bit8u*)driverarray, 8);
	channellplus = channell + 1;
	if (x_BYTE_180C84_drivertype < 'W')
	{
		if (x_BYTE_180C84_drivertype >= 'G')
		{
			if (x_BYTE_180C84_drivertype > 'G')
			{
				if (x_BYTE_180C84_drivertype == 'R')
					goto LABEL_21;
				goto LABEL_24;
			}
		LABEL_20:
			finaldrivernumber = 0;
			goto LABEL_24;
		}
		if (x_BYTE_180C84_drivertype != 'F')
			goto LABEL_24;
	LABEL_22:
		finaldrivernumber = 2;
		goto LABEL_24;
	}
	if (x_BYTE_180C84_drivertype <= 'W')
		goto LABEL_23;
	if (x_BYTE_180C84_drivertype < 'g')
	{
		if (x_BYTE_180C84_drivertype != 'f')
			goto LABEL_24;
		goto LABEL_22;
	}
	if (x_BYTE_180C84_drivertype <= 'g')
		goto LABEL_20;
	if (x_BYTE_180C84_drivertype >= 'r')
	{
		if (x_BYTE_180C84_drivertype > 'r')
		{
			if (x_BYTE_180C84_drivertype != 'w')
				goto LABEL_24;
		LABEL_23:
			finaldrivernumber = 3;
			goto LABEL_24;
		}
	LABEL_21:
		finaldrivernumber = 1;
	}
LABEL_24:
	if (channellplus <= driverarray[finaldrivernumber])
	{
		sub_9891E_seek(filehandle, (channellplus - 1) << 6, 1);
		if (!sub_8ED00_load_music_track(filehandle, finaldrivernumber))
		{
			sub_98882_close(filehandle);
			return 1;
		}
		sub_98882_close(filehandle);
		return 0;
	}
	sub_98882_close(filehandle);
	return 1;
}

//----- (0008EC90) --------------------------------------------------------
void sub_8EC90_get_music_sequence_count()//26fc90 // set index
{
	Bit8u* v1; // [esp+0h] [ebp-4h]

	if (x_DWORD_E3808_music_header && x_DWORD_E3810_music_data)
	{
		v1 = (Bit8u*)x_DWORD_E3808_music_header + 32;
		for (x_WORD_E3804 = 0;v1 < x_DWORD_E380C; x_WORD_E3804++)
		{
			// FIXME: types
			// *(x_DWORD *)(v1 + 18) += (int)x_DWORD_E3810_music_data;
			v1 += 32;
		}
	}
}

//----- (0008ED00) --------------------------------------------------------
char sub_8ED00_load_music_track(FILE* filehandle, Bit8u drivernumber)//26fd00
{
	Bit32s header[16]; // [esp+0h] [ebp-5Ch] //355024
	//Bit8u* midibuffer1; // [esp+40h] [ebp-1Ch]
	int filelenght; // [esp+44h] [ebp-18h]
	//Bit8u* midibuffer2; // [esp+4Ch] [ebp-10h]
	int rncsize; // [esp+50h] [ebp-Ch]
	uint8_t i; // [esp+58h] [ebp-4h]

	filelenght = myftell(filehandle);
	sub_988A7_read(filehandle, (Bit8u*)header, 64);
	if (header[1 + 4 * drivernumber] == -1)
		return 0;
	if (x_DWORD_E3810_music_data)
	{
		sub_83E80_freemem4(x_DWORD_E3810_music_data);
		x_BYTE_E37FC_music = 0;
	}
	if (x_DWORD_E3808_music_header)
	{
		sub_83E80_freemem4((Bit8u*)x_DWORD_E3808_music_header);
		x_BYTE_E37FC_music = 0;
	}
	x_DWORD_E3810_music_data = (Bit8u*)malloc(header[3 + 4 * drivernumber]);
	if (!x_DWORD_E3810_music_data)
		return 0;
	x_DWORD_E3808_music_header = (Bit8u*)malloc(header[2 + 4 * drivernumber]);
	if (!x_DWORD_E3808_music_header)
	{
		sub_83E80_freemem4(x_DWORD_E3810_music_data);
		return 0;
	}
	//midibuffer1 = x_DWORD_E3810_music_data;
	//midibuffer2 = x_DWORD_E3808_music_header;
	x_DWORD_E380C = (Bit8u*)&x_DWORD_E3808_music_header[header[2 + 4 * drivernumber]];//?
	sub_9891E_seek(filehandle, header[1 + 4 * drivernumber], 0);
	sub_988A7_read(filehandle, x_DWORD_E3810_music_data, 8);
	if (x_DWORD_E3810_music_data[0] == 'R' && x_DWORD_E3810_music_data[1] == 'N' && x_DWORD_E3810_music_data[2] == 'C')//RNC
	{
		rncsize = x_DWORD_E3810_music_data[4];
		rncsize <<= 8;
		rncsize += x_DWORD_E3810_music_data[5];
		rncsize <<= 8;
		rncsize += x_DWORD_E3810_music_data[6];
		rncsize <<= 8;
		rncsize += x_DWORD_E3810_music_data[7];
		sub_988A7_read(filehandle, (x_DWORD_E3810_music_data + 8), rncsize - 8);
		sub_9894C_decompress(x_DWORD_E3810_music_data, x_DWORD_E3810_music_data);
	}
	else
	{
		sub_988A7_read(filehandle, (x_DWORD_E3810_music_data + 8), header[3 + 4 * drivernumber] - 8);
	}
	sub_9891E_seek(filehandle, header[4 * drivernumber], 0);
	sub_988A7_read(filehandle, (Bit8u*)x_DWORD_E3808_music_header, 8);
	if (x_DWORD_E3808_music_header[0] == 'R' && x_DWORD_E3808_music_header[1] == 'N' && x_DWORD_E3808_music_header[2] == 'C')//RNC
	{
		rncsize = x_DWORD_E3808_music_header[4];
		rncsize <<= 8;
		rncsize += x_DWORD_E3808_music_header[5];
		rncsize <<= 8;
		rncsize += x_DWORD_E3808_music_header[6];
		rncsize <<= 8;
		rncsize += x_DWORD_E3808_music_header[7];
		sub_988A7_read(filehandle, (Bit8u*)(x_DWORD_E3808_music_header + 8), rncsize - 8);
		sub_9894C_decompress((Bit8u*)x_DWORD_E3808_music_header, (Bit8u*)x_DWORD_E3808_music_header);
	}
	else
	{
		sub_988A7_read(filehandle, (Bit8u*)(x_DWORD_E3808_music_header + 8), header[2 + 4 * drivernumber] - 8);
	}
	sub_8EC90_get_music_sequence_count();

	for (i = 1; i <= x_WORD_E3804; i++)//2b4804 - 6
		sub_95C00_AIL_init_sequence(x_DWORD_180C78, (Bit8u*)*(x_DWORD *)(x_DWORD_E3808_music_header + 32 * i + 18), 0, i);
	x_BYTE_E37FC_music = 1;
	return 1;
}

//----- (0008F023) --------------------------------------------------------
int sub_8F023(int a1, int a2, unsigned int a3)//270023
{
	x_BYTE *v3; // eax
	x_BYTE *v4; // edx
	unsigned int i; // [esp+4h] [ebp-4h]

	if (!x_DWORD_E387C)
		return sub_988A7_read((FILE*)a1, (Bit8u*)a2, a3);
	for (i = 0; i < a3 && x_DWORD_E3888 + i < x_DWORD_E3884; i++)
	{
		v3 = (x_BYTE *)x_DWORD_E3880++;
		v4 = (x_BYTE *)a2++;
		*v4 = *v3;
	}
	x_DWORD_E3888 += a3;
	return i;
}

//----- (0008F0AB) --------------------------------------------------------
int sub_8F0AB(FILE* a1, int a2, int a3)//26f0ab
{
	int result; // eax

	result = x_read2(a1, (Bit8u*)x_DWORD_E387C, a3);
	x_DWORD_E3880 = x_DWORD_E387C;
	x_DWORD_E3884 = result;
	x_DWORD_E3888 = 0;
	return result;
}

//----- (0008F100) --------------------------------------------------------
HSAMPLE* sub_8F100_sound_proc19(Bit32u a1, int16_t a2, int a3, int a4, uint16_t a5, char a6, uint8_t a7)//270100
{
	char v8; // [esp+0h] [ebp-18h]
	Bit32u i; // [esp+8h] [ebp-10h]
	Bit32u j; // [esp+8h] [ebp-10h]
	Bit32u k; // [esp+8h] [ebp-10h]
	Bit32u l; // [esp+8h] [ebp-10h]
	Bit32u m; // [esp+8h] [ebp-10h]
	//int **v14; // [esp+Ch] [ebp-Ch]
	HSAMPLE* v14;
	HSAMPLE* v15; // [esp+10h] [ebp-8h]

	//fix it
	v14 = 0;
	v15 = 0;
	//fix it

	if (!x_BYTE_E3798_sound_active2
		|| !x_BYTE_E3799_sound_card
		|| a2 > (signed int)x_WORD_180B50
		|| !_stricmp((const char *)(32 * a2 + x_DWORD_E37A0_sound_buffer2), "null.wav"))
	{
		return 0;
	}
	v8 = 0;
	if (a7 == 1)
	{
		v14 = 0;
		for (i = 0; i < x_DWORD_180B4C_end_sound_buffer3_endindex; i++)
		{
			if (sub_94010_AIL_sample_status(unk_180750_sound_buffer3[i]) == 2)
			{
				v14 = &unk_180750_sound_buffer3[i];
				v15 = 0;
				break;
			}
		}
	}
	else if (a7 == 2u)
	{
		v15 = 0;
		for (j = 0; j < x_DWORD_180B4C_end_sound_buffer3_endindex; j++)
		{
			if (unk_180750_sound_buffer3[j]->flags_14 == a1 && unk_180750_sound_buffer3[j]->vol_scale_18[0][0] == a2 && sub_94010_AIL_sample_status(unk_180750_sound_buffer3[j]) != 2)
			{
				v15 = &unk_180750_sound_buffer3[j];
				break;
			}
		}
		if (!v15)
		{
			v14 = 0;
			for (k = 0; k < x_DWORD_180B4C_end_sound_buffer3_endindex; k++)
			{
				if (sub_94010_AIL_sample_status(unk_180750_sound_buffer3[k]) == 2)
				{
					v14 = &unk_180750_sound_buffer3[k];
					break;
				}
			}
		}
	}
	else if (a7 == 3)
	{
		v8 = 0;
		for (l = 0; l < x_DWORD_180B4C_end_sound_buffer3_endindex; l++)
		{
			if (unk_180750_sound_buffer3[l]->flags_14 == a1 && unk_180750_sound_buffer3[l]->vol_scale_18[0][0] == a2)
			{
				v14 = &unk_180750_sound_buffer3[l];
				v15 = 0;
				v8 = 1;
				break;
			}
		}
		if (!v8)
		{
			v14 = 0;
			for (m = 0; m < x_DWORD_180B4C_end_sound_buffer3_endindex; m++)
			{
				if (sub_94010_AIL_sample_status(unk_180750_sound_buffer3[m]) == 2)
				{
					v14 = &unk_180750_sound_buffer3[m];
					v15 = 0;
					break;
				}
			}
		}
	}
	if (!v14 || v15)
		return 0;
	if (!v8)
	{
		sub_93830_AIL_init_sample(*v14);
		//4-when
		//5-see you
		//6-i am
		//a2 = 6;//debug
		#ifdef DEBUG_SOUND
		if (debug_first_sound) {
			Bit8u* debug_sound_buff = (Bit8u*) * (Bit32u*)(x_DWORD_E37A0_sound_buffer2 + 32 * a2 + 18);
			debug_printf("sub_8F100_sound_proc19:buff:\n");
			for(int i=0;i<100;i++)
				debug_printf("%02X", debug_sound_buff[i]);
			debug_printf("\n");
		}
		#endif //DEBUG_SOUND
		sub_938C0_AIL_set_sample_file(*v14, (Bit8u*)*(Bit32u*)(x_DWORD_E37A0_sound_buffer2 + 32 * a2 + 18), 1);
		//last_sample = v14[0];
	}
	sub_93E30_AIL_set_sample_volume(*v14, a3);
	sub_93ED0_AIL_set_sample_volume_pan(*v14, a4);
	sub_93D90_AIL_set_sample_playback_rate(*v14, x_DWORD_E37BC_sound_frequence * a5 / 0x64);
	sub_93F70_AIL_set_sample_loop_count(*v14, a6 + 1);
	#ifdef DEBUG_SOUND
		if (debug_first_sound) {
			Bit8u* debug_sound_buff = (Bit8u*) * (Bit32u*)(x_DWORD_E37A0_sound_buffer2 + 32 * a2 + 18);
			debug_printf("sub_8F100_sound_proc19:44mhz:\n");
			//for (int i = 0; i < 100; i++)
			//	debug_printf("%02X", ((Bit8u*)((*v14)->start_44mhz))[i]);
			debug_printf("\n");
			debug_printf("sub_8F100_sound_proc19:rate:%d\n", ((*v14)->playback_rate_15));
		}
	#endif //DEBUG_SOUND
	sub_93B50_AIL_start_sample(*v14);
	v14[0]->flags_14 = a1;
	v14[0]->vol_scale_18[0][0] = a2;
	v14[0]->status_1 = a3;
	v14[0]->len_4_5[1] = a4;
	//v14[0]->len_4_5[0] = a5;
	v14[0]->vol_scale_18[0][2] = 0;
	v14[0]->vol_scale_18[0][3] = 0; //fixed	
	return v14;
}

//----- (0008F420) --------------------------------------------------------
void sub_8F420_sound_proc20(int a1, int16_t a2)//270420
{
	Bit32u i; // [esp+0h] [ebp-4h]

	if (x_BYTE_E3798_sound_active2 && x_BYTE_E3799_sound_card)
	{
		for (i = 0; i < x_DWORD_180B4C_end_sound_buffer3_endindex; i++)
		{
			if (unk_180750_sound_buffer3[i]->flags_14 == a1 && unk_180750_sound_buffer3[i]->vol_scale_18[0][0] == a2 && sub_94010_AIL_sample_status(unk_180750_sound_buffer3[i]) != 2)
			{
				sub_93D00_AIL_end_sample(unk_180750_sound_buffer3[i]);
				return;
			}
		}
	}
}

//----- (0008F710) --------------------------------------------------------
void sub_8F710_sound_proc21(int a1, int16_t a2, signed int a3, uint8_t a4, char a5)//270710
{
	Bit32u i; // [esp+0h] [ebp-4h]

	if (x_BYTE_E3798_sound_active2 && x_BYTE_E3799_sound_card && a2 <= x_WORD_180B50)
	{
		for (i = 0; i < x_DWORD_180B4C_end_sound_buffer3_endindex; i++)
		{
			if (unk_180750_sound_buffer3[i]->flags_14 == a1 && unk_180750_sound_buffer3[i]->vol_scale_18[0][0] == a2 && sub_94010_AIL_sample_status(unk_180750_sound_buffer3[i]) != 2)
			{
				if (a3 > 0x7Fu)
					a3 = 127;
				if (a3 != unk_180750_sound_buffer3[i]->status_1)
				{
					unk_180750_sound_buffer3[i]->vol_scale_18[0][2] = 0;
					unk_180750_sound_buffer3[i]->loop_count_12 = a3;
					unk_180750_sound_buffer3[i]->vol_scale_18[0][3] = a5;
					if (a3 > unk_180750_sound_buffer3[i]->status_1)
						unk_180750_sound_buffer3[i]->vol_scale_18[0][2] = 1;
					else
						unk_180750_sound_buffer3[i]->vol_scale_18[0][2] = 2;
					if (!x_BYTE_E388D)
					{
						x_BYTE_E388D = 1;
						if (a4 <= 4u)
						{
							//x_DWORD_180CA0[0] = sub_92600_AIL_register_timer(sub_8F4B0);
							//sub_92930_AIL_set_timer_frequency(x_DWORD_180CA0[0], 30 * a4);
							//sub_92BA0_AIL_start_timer(x_DWORD_180CA0[0]);
						}
					}
				}
				return;
			}
		}
	}
}

//----- (0008F850) --------------------------------------------------------
void sub_8F850_sound_proc22()//270850
{
	if (x_BYTE_E388D)
	{
		//sub_92DC0_AIL_release_timer_handle(x_DWORD_180CA0[0]);
		x_BYTE_E388D = 0;
		for (Bit32u i = 0;i < x_DWORD_180B4C_end_sound_buffer3_endindex; i++)
		{
			unk_180750_sound_buffer3[i]->vol_scale_18[0][2] = 0;
			unk_180750_sound_buffer3[i]->vol_scale_18[0][3] = 0;
		}
	}
}

//----- (0008F8B0) --------------------------------------------------------
//void sub_8F8B0_draw_bitmap320(int16_t a1, int16_t a2, Pathstruct a3)//2708B0
void sub_8F8B0_draw_bitmap320(Bit16s posx, Bit16s posy, posistruct temppstr)//2708B0
{
	//int v4; // [esp+4h] [ebp-4h]

	//fix it
	//v4 = 0;
	//fix it

	sub_8F935_bitmap_draw_final(temppstr.width, temppstr.height, posy, posx, temppstr.data, 0, 0);//270935 // a2 je 86
	//return v4;
}

//----- (0008F8E8) --------------------------------------------------------
//void sub_8F8E8_draw_bitmap640(int16_t a1, int16_t a2, Bit8u* a3)//2708e8
void sub_8F8E8_draw_bitmap640(Bit16s posx, Bit16s posy, posistruct temppstr)//2708e8
{
	//int v4; // [esp+4h] [ebp-4h]

	//fix it
	//v4 = 0;
	//fix it

	  //esi=48c995 //buffer
	  //ebx=182
	  //ecx=121
	  //edi=3aa0a4
	  //dx=09 0b
	  //esi´48913e
	  //0
	  //0

	  //123 cd 48c80f 
	  //2708e8 354f68
	  /*
	  esi=[ebp+10]//48c80f
	  ebx=[ebp+8]//123 - nic
	  ecx=[ebp+c]//cd - a2?
	  edi=[351628]//3aa0a4
	  dl=[esi+4]//26
	  dh=[esi+5]//33
	  esi=[esi]//47ae48
	  */
	  //x_DWORD_180628b
	  //xasearchd_2bac30.var28_begin_buffer
	  //sub_8F935_bitmap_draw_final(doublebyte_conv(xasearchd_2bac30.var28_begin_buffer, a2, a1, a3, 0, 0);//270935
	sub_8F935_bitmap_draw_final(temppstr.width, temppstr.height, posy, posx, temppstr.data, 0, 0);//270935
  //return v4;
}

//----- (0008F920) --------------------------------------------------------
void sub_8F920(Bit8u a1byte1, Bit8u a1byte2, Bit16s posx, Bit16s posy, Bit8u* a4, uint8_t a5, char a6)//270920
{
	sub_8F935_bitmap_draw_final(a1byte1, a1byte2, posx, posy, a4, a5, a6);//270935
}
//----- (0008F935) --------------------------------------------------------
void sub_8F935_bitmap_draw_final(Bit8u a1byte1, Bit8u a1byte2, Bit16u tiley, int tilex, Bit8u* texture, Bit8u setbyte, char a6)//270935
{
	Bit8u* pixel_buffer_index; // edi
	x_BYTE *v7; // edi
	int v8; // ecx
	signed int v9; // eax
	x_BYTE *v10; // ebx
	char v11; // al
	char v12; // al
	char v13; // al
	x_BYTE *v14; // edi
	int v15; // ecx
	signed int v16; // eax
	x_BYTE *v17; // ebx
	char v18; // al
	char v19; // al
	char v20; // al
	Bit8u* v21_buffer_temp_index1; // edi
	char *v28; // edi
	unsigned int v29; // ecx
	signed int v30; // eax
	char *v31; // ebx
	char *v32; // edi
	char v33; // al
	char *v34; // esi
	int v35; // ebp
	x_BYTE *v36; // edi
	int v37; // ecx
	x_BYTE *v38; // ebx
	uint8_t v39; // al
	int v40; // eax
	x_BYTE *v41; // edi
	int v42; // ecx
	uint8_t i; // dl
	char v44; // al
	char v45; // al
	uint8_t v46; // of
	char v47; // dl
	uint8_t v48; // al
	char *v49; // edi
	char v50; // al
	char v51; // dl
	char v52; // al
	char v53; // dl
	unsigned int v54; // ebx
	const void *v55; // esi
	char *v61; // edi
	unsigned int v62; // ecx
	signed int v63; // eax
	char *v64; // ebx
	char *v65; // edi
	char v66; // al
	char *v67; // esi
	Bit8u v69l;
	Bit8u v69h;
	Bit8s* v70; // edi
	Bit8s* v71; // edx
	Bit8s v72l; // ecx
	char v73; // al
	char v74; // al
	bool v75; // zf
	bool v76; // sf
	char v77; // al
	char v78; // al
	int v79; // ebx
	x_BYTE *v80; // edi
	int v81; // ecx
	signed int v82; // eax
	x_BYTE *v83; // ebx
	char v84; // al
	int v85; // ebx
	x_BYTE *v86; // edi
	int v87; // ecx
	signed int v88; // eax
	x_BYTE *v89; // ebx
	char v90; // al
	x_BYTE *v91; // edi
	int v92; // ecx
	int v93; // ebx
	signed int v94; // eax
	x_BYTE *v95; // ebx
	char v96; // al
	x_BYTE *v105; // edi
	int v106; // ecx
	int v107; // ebx
	x_BYTE *v108; // ebx
	signed int v109; // eax
	char v110; // al
	x_BYTE *v111; // edi
	int v112; // ecx
	int v113; // ebx
	x_BYTE *v114; // ebx
	signed int v115; // eax
	char v116; // al
	unsigned int v117; // ebx
	x_BYTE *v118; // edi
	x_BYTE *v119; // edx
	int v120; // ecx
	char v121; // al
	char v122; // al
	char v123; // al
	char v124; // al
	int v125; // eax
	int v126; // edi
	int v127; // eax
	int v128; // eax
	int v129; // eax
	int v130; // eax
	char *v131; // [esp-4h] [ebp-Ch]
	Bit8u v132; // [esp+2h] [ebp-6h]
	uint8_t v133; // [esp+2h] [ebp-6h]
	uint8_t v134; // [esp+2h] [ebp-6h]
	uint8_t v135; // [esp+2h] [ebp-6h]
	uint8_t v137; // [esp+2h] [ebp-6h]
	uint8_t v138; // [esp+2h] [ebp-6h]
	uint8_t v139; // [esp+2h] [ebp-6h]
	char v140; // [esp+3h] [ebp-5h]
	char v141; // [esp+3h] [ebp-5h]
	x_BYTE *v142; // [esp+4h] [ebp-4h]
	char *v143; // [esp+4h] [ebp-4h]

	if (!(a1byte2))//453558
		return;
	pixel_buffer_index = x_DWORD_180628b_screen_buffer + x_DWORD_18063C_sprite_sizex + x_DWORD_18062C_resolution_x * x_DWORD_180650_positiony;
	if (x_WORD_180660_VGA_type_resolution & 1)//pokud je rozliseno 320x200 zmensi hodnoty na polovic
	{
		a1byte1 /= 2;
		a1byte2 /= 2;
		tilex /= 2;
		tiley /= 2;
	}
	if (tiley < 0)
	{
		if (x_WORD_E36D4 & 2)
		{
			v128 = tiley + a1byte2;
			v46 = __OFADD__(1, v128);
			v129 = v128 + 1;
			if (((v129 < 0) ^ v46) | (v129 == 0))
				return;
			tiley = -1;
			a1byte2 = v129;
		}
		else
		{
			v130 = tiley + a1byte2;
			if (((tiley + a1byte2 < 0) ^ __OFADD__(tiley, a1byte2)) | (tiley + a1byte2 == 0))
				return;
			a1byte2 += tiley;
			v130 = 0;
			do
			{
				while (1)
				{
					v130 = *texture++;
					if (!v130)
						break;
					if ((v130 & 0x80u) == 0)
						texture += v130;
				}
				tiley++;
			} while (tiley);
		}
	}
	else if (tiley + a1byte2 >= x_DWORD_180644_map_resolution2_y)
	{
		if (x_WORD_E36D4 & 2)
		{
			if (tiley + 1 >= x_DWORD_180644_map_resolution2_y)
				return;
			v125 = a1byte2 + tiley + 1 - x_DWORD_180644_map_resolution2_y;
			a1byte2 = x_DWORD_180644_map_resolution2_y - (tiley + 1);
			v126 = v125;
			v127 = 0;
			do
			{
				while (1)
				{
					v127 = *texture++;
					if (!v127)
						break;
					if ((v127 & 0x80u) == 0)
						texture += v127;
				}
				--v126;
			} while (v126);
			pixel_buffer_index = x_DWORD_180628b_screen_buffer;
		}
		else
		{
			if (x_DWORD_180644_map_resolution2_y <= tiley)
				return;
			a1byte2 = x_DWORD_180644_map_resolution2_y - tiley;
		}
	}
	if (tilex >= 0)
	{
		if (tilex + a1byte1 >= x_DWORD_180648_map_resolution2_x)
		{
			if (x_WORD_E36D4)
			{
				if (x_WORD_E36D4 & 1)
				{
					if (x_WORD_E36D4 & 2)
					{
						if (x_DWORD_180634_screen_width - tilex >= 0)
						{
							v79 = a1byte1 + tilex;
							v80 = (x_BYTE *)(x_DWORD_18062C_resolution_x * (a1byte2 + tiley) + v79 + pixel_buffer_index);
							v81 = 0;
							v79 = x_DWORD_180634_screen_width - v79 - 2;
							a1byte1 = v79;
							v133 = v79;
							v82 = -1;
							v83 = v80;
							do
							{
								while (1)
								{
									while (1)
									{
										v82 = *texture++;
										if ((v82 & 0x80u) == 0)
											break;
										v80 += v82;
										a1byte1 = a1byte1 - v82;
									}
									if (!v82)
										break;
									v81 = v82;
									do
									{
										v84 = *texture++;
										a1byte1 = a1byte1 + 1;
										if ((a1byte1 & 0x80u) == 0)
											*v80 = v84;
										--v80;
										--v81;
									} while (v81);
								}
								v83 -= x_DWORD_18062C_resolution_x;
								v80 = v83;
								a1byte1 = __PAIR__(a1byte2, v133) - 256;
							} while (a1byte2);
						}
					}
					else if (x_DWORD_180634_screen_width - tilex >= 0)
					{
						v85 = a1byte1 + tilex;
						v86 = (x_BYTE *)(x_DWORD_18062C_resolution_x * tiley + v85 + pixel_buffer_index);
						v87 = 0;
						v85 = x_DWORD_180634_screen_width - v85 - 2;
						a1byte1 = v85;
						v134 = v85;
						v88 = -1;
						v89 = v86;
						do
						{
							while (1)
							{
								while (1)
								{
									v88 = *texture++;
									if ((v88 & 0x80u) == 0)
										break;
									v86 += v88;
									a1byte1 = a1byte1 - v88;
								}
								if (!v88)
									break;
								v87 = v88;
								do
								{
									v90 = *texture++;
									a1byte1 = a1byte1 + 1;
									if ((a1byte1 & 0x80u) == 0)
										*v86 = v90;
									--v86;
									--v87;
								} while (v87);
							}
							v89 += x_DWORD_18062C_resolution_x;
							v86 = v89;
							a1byte1 = __PAIR__(a1byte2, v134) - 256;
						} while (a1byte2);
					}
				}
				else if (x_WORD_E36D4 & 2)
				{
					v91 = (x_BYTE *)(x_DWORD_18062C_resolution_x * (a1byte2 + tiley) + tilex + pixel_buffer_index);
					v92 = 0;
					v93 = x_DWORD_180634_screen_width - tilex;
					if (v93 >= 0)
					{
						a1byte1 = v93;
						v135 = v93;
						v94 = -1;
						v95 = v91;
						do
						{
							while (1)
							{
								while (1)
								{
									v94 = *texture++;
									if ((v94 & 0x80u) == 0)
										break;
									v91 -= v94;
									a1byte1 = v94 + a1byte1;
								}
								if (!v94)
									break;
								v92 = v94;
								do
								{
									v96 = *texture++;
									a1byte1 = a1byte1 - 1;
									if ((a1byte1 & 0x80u) == 0)
										*v91++ = v96;
									--v92;
								} while (v92);
							}
							v95 -= x_DWORD_18062C_resolution_x;
							v91 = v95;
							a1byte1 = __PAIR__(a1byte2, v135) - 256;
						} while (a1byte1);
					}
				}
			}
			else
			{
				/*for (int ii = 0;ii < a1byte1;ii++)//debug
					for (int jj = 0;jj < a1byte2;jj++)
						pixel_buffer_index[x_DWORD_18062C_resolution_x * (tiley + ii) + (tilex + jj)] = 128;
				*/
				//edi - 3c28b7

				  //v68 = tilex + pixel_buffer_index;
				  //v69 = x_DWORD_180634_screen_width - tilex;
				if (x_DWORD_180634_screen_width - tilex >= 0)
				{
					v70 = (Bit8s*)(x_DWORD_18062C_resolution_x * tiley + tilex + pixel_buffer_index);
					v69l = x_DWORD_180634_screen_width - tilex;
					v69h = a1byte2;//ebx
					v132 = v69l;//ebp-6
					v71 = v70;//edx edi
					v72l = 0;//ecx
					do
					{
						while (1)
						{
							while (1)
							{
								v73 = *texture++;
								if (v73 >= 0)
									break;
								v46 = __OFADD__(v73, v69l);//fix
								v75 = v73 + v69l == 0;//fix
								v76 = (char)(v73 + v69l) < 0;//fix
								v69l = v73 + v69l;//fix
								if (!((v76 ^ v46) | v75))
								{
									v70 -= v73;
									v77 = *texture++;
									v72l = v77;
									do
									{
										v78 = *texture++;
										v69l--;
										if ((v69l & 0x80u) == 0)//fix
											*v70++ = v78;
										v72l--;
									} while (v72l);
								}
							}
							if (!v73)
								break;
							v72l = v73;
							do
							{
								v74 = *texture++;
								v69l--;
								if ((v69l & 0x80u) == 0)//fix
									*v70++ = v74;
								v72l--;
							} while (v72l);
						}
						v71 += x_DWORD_18062C_resolution_x;
						v70 = v71;

						v69l = /*(v69l&0xff00)+*/v132;//fix
						v69h--;
					} while (v69h);//fix

				}
			}
		}
		else if (x_WORD_E36D4 & 1)
		{
			if (x_WORD_E36D4 & 2)
			{
				v7 = (x_BYTE *)(x_DWORD_18062C_resolution_x * (a1byte2 + tiley) + a1byte1 + tilex + pixel_buffer_index);
				v8 = 0;
				v9 = -1;
				v10 = v7;
				do
				{
					while (1)
					{
						while (1)
						{
							v9 = *texture++;
							if ((v9 & 0x80u) == 0)
								break;
							v7 += v9;
							v12 = *texture++;
							v8 = v12;
							do
							{
								v13 = *texture++;
								*v7-- = v13;
								--v8;
							} while (v8);
						}
						if (!v9)
							break;
						v8 = v9;
						do
						{
							v11 = *texture++;
							*v7-- = v11;
							--v8;
						} while (v8);
					}
					v10 -= x_DWORD_18062C_resolution_x;
					v7 = v10;
					--a1byte2;
				} while (a1byte2);
			}
			else
			{
				v14 = (x_BYTE *)(x_DWORD_18062C_resolution_x * tiley + a1byte1 + tilex + pixel_buffer_index);
				v15 = 0;
				v16 = -1;
				v17 = v14;
				do
				{
					while (1)
					{
						while (1)
						{
							v16 = *texture++;
							if ((v16 & 0x80u) == 0)
								break;
							v14 += v16;
							v19 = *texture++;
							v15 = v19;
							do
							{
								v20 = *texture++;
								*v14-- = v20;
								--v15;
							} while (v15);
						}
						if (!v16)
							break;
						v15 = v16;
						do
						{
							v18 = *texture++;
							*v14-- = v18;
							--v15;
						} while (v15);
					}
					v17 += x_DWORD_18062C_resolution_x;
					v14 = v17;
					--a1byte2;
				} while (a1byte2);
			}
		}
		else if (x_WORD_E36D4)
		{
			if (x_WORD_E36D4 & 2)
			{
				v28 = (char *)(x_DWORD_18062C_resolution_x * (a1byte2 + tiley) + tilex + pixel_buffer_index);
				v29 = 0;
				v30 = -1;
				v31 = v28;
				do
				{
					while (1)
					{
						while (1)
						{
							v30 = *texture++;
							if ((v30 & 0x80u) == 0)
								break;
							v32 = &v28[-v30];
							v33 = *texture;
							v34 = (char*)(texture + 1);
							v29 = v33;
							qmemcpy(v32, v34, v29);
							texture = (Bit8u*)&v34[v29];
							v28 = &v32[v29];
							v29 = 0;
						}
						if (!v30)
							break;
						v29 = v30;
						qmemcpy(v28, texture, v29);
						texture += v29;
						v28 += v29;
						v29 = 0;
					}
					v31 -= x_DWORD_18062C_resolution_x;
					v28 = v31;
					--a1byte2;
				} while (a1byte2);
			}
			else if (x_WORD_E36D4 & 4)
			{
				v35 = x_DWORD_E3890;
				v36 = (x_BYTE *)(x_DWORD_18062C_resolution_x * tiley + tilex + pixel_buffer_index);
				v37 = 0;
				v38 = v36;
				do
				{
					while (1)
					{
						while (1)
						{
							v39 = *texture++;
							if ((v39 & 0x80u) == 0)
								break;
							v36 -= (char)v39;
						}
						if (!v39)
							break;
						v37 = v39;
						v40 = v39;
						do
						{
							v40 = *texture++;
							v40 = *v36;
							*v36++ = *(x_BYTE *)(v40 + v35);
							--v37;
						} while (v37);
					}
					v38 += x_DWORD_18062C_resolution_x;
					v36 = v38;
					--a1byte2;
				} while (a1byte2);
			}
			else if (x_WORD_E36D4 & 8)
			{
				v41 = (x_BYTE *)(x_DWORD_18062C_resolution_x * tiley + tilex + pixel_buffer_index);
				v42 = 0;
				v142 = v41;
				v140 = a1byte2;
				for (i = setbyte; ; i = setbyte)
				{
					while (1)
					{
						while (1)
						{
							v44 = *texture++;
							if (v44 >= 0)
								break;
							v42 = (uint8_t)-v44;
							do
							{
								v46 = __OFSUB__(i--, 1);
								if (((i & 0x80u) != 0) ^ v46)
								{
									i = setbyte;
									++v41;
								}
								--v42;
							} while (v42);
						}
						if (!v44)
							break;
						LOBYTE(v42) = v44;
						do
						{
							v45 = *texture++;
							v46 = __OFSUB__(i--, 1);
							if (((i & 0x80u) != 0) ^ v46)
							{
								i = setbyte;
								*v41++ = v45;
							}
							--v42;
						} while (v42);
					}
					if (!--v140)
						break;
					v47 = a6;
					while (--v47 >= 0)
					{
						while (1)
						{
							do
								v48 = *texture++;
							while ((v48 & 0x80u) != 0);
							if (!v48)
								break;
							texture += v48;
						}
					}
					v142 += x_DWORD_18062C_resolution_x;
					v41 = v142;
				}
			}
			else if (x_WORD_E36D4 & 0x20)
			{
				v49 = (char *)(x_DWORD_18062C_resolution_x * tiley + tilex + pixel_buffer_index);
				v143 = v49;
				v141 = a1byte2;
				do
				{
					while (1)
					{
						while (1)
						{
							v50 = *texture++;
							if (v50 >= 0)
								break;
							v49 += (setbyte * -v50);
						}
						if (!v50)
							break;
						v51 = v50;
						do
						{
							v52 = *texture++;
							memset(v49, v52, setbyte);
							v49 += setbyte;
							v46 = __OFSUB__(v51--, 1);
						} while (!(((v51 < 0) ^ v46) | (v51 == 0)));
					}
					v53 = a6 - 1;
					if (a6 > 1)
					{
						v131 = (char*)texture;
						v54 = v49 - v143;
						do
						{
							v55 = v143;
							v143 += x_DWORD_18062C_resolution_x;
							qmemcpy(v143, (void*)v55, v54);
							v46 = __OFSUB__(v53--, 1);
						} while (!(((v53 < 0) ^ v46) | (v53 == 0)));
						texture = (Bit8u*)v131;
					}
					v143 += x_DWORD_18062C_resolution_x;
					v49 = v143;
					--v141;
				} while (v141);
			}
			else if (x_WORD_E36D4 & 0x40)
			{


				//v56 = (char *)(dword_18062C * a2 + a3 + v6);
				v21_buffer_temp_index1 = (x_DWORD_18062C_resolution_x * tiley + tilex + pixel_buffer_index);
				Bit8s v57_loc = 0;
				Bit8s v58_loc = -1;
				Bit8s* v59_loc = (Bit8s*)v21_buffer_temp_index1;
				Bit8s* v60loc = 0;
				do
				{
					while (1)
					{
						while (1)
						{
							v58_loc = texture[0];
							texture++;
							if ((v58_loc & 0x80u) == 0)
								break;
							v60loc = (Bit8s*)&v21_buffer_temp_index1[-v58_loc];
							v57_loc = texture[0];
							texture += v57_loc + 1;
							memset(v60loc, setbyte, v57_loc);
							v21_buffer_temp_index1 = (Bit8u*)&v60loc[v57_loc];
							v57_loc = 0;
						}
						if (!v58_loc)
							break;
						v57_loc = v58_loc;
						texture += v57_loc;
						memset(v21_buffer_temp_index1, setbyte, v57_loc);
						v21_buffer_temp_index1 += v57_loc;
						v57_loc = 0;
					}
					v59_loc += x_DWORD_18062C_resolution_x;
					v21_buffer_temp_index1 = (Bit8u*)v59_loc;
					--a1byte2;
				} while (a1byte2);
				/*
					v21_buffer_temp_index1 = (x_DWORD_18062C_resolution_x * tiley + tilex + pixel_buffer_index);
					Bit32u inindex = 0;
					Bit32u outindex = 0;
					Bit8s shift = 0;
					Bit8s end = 0;
					Bit8s count = texture[inindex++];
					memset(&v21_buffer_temp_index1[outindex], setbyte, count);
					//qmemcpy(&v21_buffer_temp_index1[outindex], &texture[inindex], count);
					for (Bit32u y = 1;count != 0x7f;y++)
					{
						memset(&v21_buffer_temp_index1[outindex + shift], setbyte, count);
						//qmemcpy(&v21_buffer_temp_index1[outindex + shift], &texture[inindex], count);
						inindex += count;
						end = texture[inindex++];
						if (end == 0)
						{
							count = texture[inindex++];
							if (count < 0) {
								shift = -count;
								count = texture[inindex++];
							}
							outindex += x_DWORD_18062C_resolution_x;
						}
						else {
							shift += count;
							count = end;
							if (count < 0) {
								shift -= count;
								count = texture[inindex++];
							}
						}
					}
					*/
					/*v56 = (char *)(x_DWORD_18062C_resolution_x * tiley + tilex + pixel_buffer_index);
					v57 = 0;
					v58 = -1;
					v59 = v56;
					do
					{
					  while ( 1 )
					  {
						while ( 1 )
						{
						  v58 = *texture++;
						  if ( (v58 & 0x80u) == 0 )
							break;
						  v60 = &v56[-v58];
						  v57 = *texture;
						  texture += v57 + 1;
						  memset(v60, a5, v57);
						  v56 = &v60[v57];
						  v57 = 0;
						}
						if ( !v58 )
						  break;
						v57 = v58;
						texture += v57;
						memset(v56, a5, v57);
						v56 += v57;
						v57 = 0;
					  }
					  v59 += x_DWORD_18062C_resolution_x;
					  v56 = v59;
					  --a1.byte2;
					}
					while ( a1.byte2 );*/
			}
			else
			{
				v61 = (char *)(x_DWORD_18062C_resolution_x * tiley + tilex + pixel_buffer_index);
				v62 = 0;
				v63 = -1;
				v64 = v61;
				do
				{
					while (1)
					{
						while (1)
						{
							v63 = *texture++;
							if ((v63 & 0x80u) == 0)
								break;
							v65 = &v61[-v63];
							v66 = *texture;
							v67 = (char*)(texture + 1);
							v62 = v66;
							qmemcpy(v65, v67, v62);
							texture = (Bit8u*)&v67[v62];
							v61 = &v65[v62];
							v62 = 0;
						}
						if (!v63)
							break;
						v62 = v63;
						qmemcpy(v61, texture, v62);
						texture += v62;
						v61 += v62;
						v62 = 0;
					}
					v64 += x_DWORD_18062C_resolution_x;
					v61 = v64;
					--a1byte2;
				} while (a1byte2);
			}
		}
		else
		{
			v21_buffer_temp_index1 = (x_DWORD_18062C_resolution_x * tiley + tilex + pixel_buffer_index);

			//v21 = (char *)(dword_18062C * a2 + a3 + v6);
			Bit8s v22_loc = 0;
			Bit8s v23_loc = -1;
			Bit8s* v25_loc = 0;
			Bit8s v26_loc = 0;
			Bit8s* v27_loc = 0;
			Bit8s* v24_loc = (Bit8s*)v21_buffer_temp_index1;
			do
			{
				while (1)
				{
					while (1)
					{
						v23_loc = texture[0];
						texture++;
						if ((v23_loc & 0x80u) == 0)
							break;
						v25_loc = (Bit8s*)&v21_buffer_temp_index1[-v23_loc];
						v26_loc = texture[0];
						v27_loc = (Bit8s*)(texture + 1);
						v22_loc = v26_loc;
						qmemcpy(v25_loc, v27_loc, v22_loc);
						texture = (Bit8u*)&v27_loc[v22_loc];
						v21_buffer_temp_index1 = (Bit8u*)&v25_loc[v22_loc];
						v22_loc = 0;
					}
					if (!v23_loc)
						break;
					v22_loc = v23_loc;
					qmemcpy(v21_buffer_temp_index1, texture, v22_loc);
					texture += v22_loc;
					v21_buffer_temp_index1 += v22_loc;
					v22_loc = 0;
				}
				v24_loc += x_DWORD_18062C_resolution_x;
				v21_buffer_temp_index1 = (Bit8u*)v24_loc;
				a1byte2--;
			} while (a1byte2);
			/*

			  v21_buffer_temp_index1 = (x_DWORD_18062C_resolution_x * tiley + tilex + pixel_buffer_index);

			  Bit32u inindex = 0;
			  Bit32u outindex = 0;
			  Bit8s shift = 0;
			  Bit8s end = 0;
			  Bit8s count = 0;
			  end = texture[inindex++];
			  if (end == 0)
			  {
				  count = texture[inindex++];
				  outindex ++;
				  while (count == 0) {
					  outindex += x_DWORD_18062C_resolution_x+1;
					  count = texture[inindex++];
				  }
				  if (count < 0) {
					  shift = -count;
					  count = texture[inindex++];
				  }
				  outindex += x_DWORD_18062C_resolution_x;
			  }
			  else {
				  shift += count;
				  count = end;
				  if (count < 0) {
					  shift -= count;
					  count = texture[inindex++];
				  }
			  }
			  qmemcpy(&v21_buffer_temp_index1[outindex], &texture[inindex], count);
			  for(Bit32u y=1;count!=0x7f;y++)
				  {
					qmemcpy(&v21_buffer_temp_index1[outindex + shift], &texture[inindex], count);
					inindex += count;
					end = texture[inindex++];
					if (end == 0)
					{
						count = texture[inindex++];
						while (count == 0) {
							outindex += x_DWORD_18062C_resolution_x+1;
							count = texture[inindex++];
						}
						if (count < 0) {
							shift = -count;
							count = texture[inindex++];
						}
						outindex += x_DWORD_18062C_resolution_x;
					}
					else {
						shift += count;
						count = end;
						if (count < 0) {
							shift -= count;
							count = texture[inindex++];
						}
					}
				  }
				  */
				  //v24_buffer_temp_index2 = v21_buffer_temp_index1;
				  /*
				  do
				  {
					while ( 1 )
					{
					  Bit32u index_tab=0;
					  Bit32u index_tab_v23 = 0;
					  Bit32u index_tab_v22 = 0;
					  //v23 = texture[index_tab++];
					  for (Bit32u index_tab = 0;texture[index_tab] != 0; index_tab++)
					  {
						  // 3 19 19
						  v25_buffer_temp_index3 = &v21_buffer_temp_index1[-v23];
						  //v27 = texture + 1;
						  texture[index_tab_v22] = texture[index_tab];
						  qmemcpy(v25_buffer_temp_index3, (void*)texture[index_tab+1], (int)texture[index_tab_v22]);
						  //texture = (Bit8u*)&(texture + 1 + 3);
						  v21_buffer_temp_index1 = &v25_buffer_temp_index3[texture[index_tab_v22]];
						  texture[index_tab_v22] = 0;
					  }
					  if (!v23)
						  break;
					  texture[index_tab_v22] = texture[index_tab_v23];
					  qmemcpy(v21_buffer_temp_index1, texture, texture[index_tab_v22]);
					  texture += texture[index_tab_v22];
					  v21_buffer_temp_index1 += texture[index_tab_v22];
					  texture[index_tab_v22] = 0;


					  v23 = *texture++;
					  for ( ;v23!=0;v23 = *texture++)
					  {
						// 3 19 19
						v25_buffer_temp_index3 = &v21_buffer_temp_index1[-v23];
						//v27 = texture + 1;
						v22 = *texture;
						qmemcpy(v25_buffer_temp_index3, texture + 1, v22);
						texture = (Bit8u*)&(*texture + 1+*v22);
						v21_buffer_temp_index1 = &v25_buffer_temp_index3[v22];
						v22 = 0;
					  }
					  if ( !v23 )
						break;
					  v22 = v23;
					  qmemcpy(v21_buffer_temp_index1, texture, v22);
					  texture += v22;
					  v21_buffer_temp_index1 += v22;
					  v22 = 0;
					}
					v24_buffer_temp_index2 += x_DWORD_18062C_resolution_x;
					v21_buffer_temp_index1 = v24_buffer_temp_index2;
					--a1.byte2;
				  }
				  while ( a1.byte2 );*/
		}
		return;
	}
	/*if ( !x_WORD_E36D4 )
	{
	  v97 = -tilex;
	  if (a1byte1 <= v97 )
		return;
	  v98 = (x_BYTE *)(x_DWORD_18062C_resolution_x * tiley + pixel_buffer_index);
	  v97 = a1byte2;
	  v99 = v98;
	  v136 = v97;
	  v100 = 0;
	  while ( 1 )
	  {
		while ( 1 )
		{
		  while ( 1 )
		  {
			v101 = *texture++;
			if ( v101 < 0 )
			  break;
			if ( v101 )
			{
			  v100 = v101;
			  do
			  {
				v102 = *texture++;
				v97 = v97 - 1;
				if ( (v97 & 0x80u) != 0 )
				  *v98++ = v102;
				--v100;
			  }
			  while ( v100 );
			}
			else
			{
			  v99 += x_DWORD_18062C_resolution_x;
			  v98 = v99;
			  v97 = __PAIR__(v97, v136) - 256;
			  if ( !v97 )
				return;
			}
		  }
		  if ( (char)v97 > 0 )
			break;
  LABEL_179:
		  v98 -= v101;
		  v103 = *texture++;
		  v100 = v103;
		  do
		  {
			v104 = *texture++;
			v97 = v97 - 1;
			if ( (v97 & 0x80u) != 0 )
			  *v98++ = v104;
			--v100;
		  }
		  while ( v100 );
		}
		v97 = v101 + v97;
		if ( (v97 & 0x80u) != 0 )
		{
		  v101 = v97;
		  goto LABEL_179;
		}
	  }
	}*/
	if (!(x_WORD_E36D4 & 1))
	{
		if (!(x_WORD_E36D4 & 2))
			return;
		v117 = -tilex;
		if (a1byte1 <= v117)
			return;
		v118 = (x_BYTE *)(x_DWORD_18062C_resolution_x * (a1byte2 + tiley) + pixel_buffer_index);
		v117 = a1byte2;
		v119 = v118;
		v139 = v117;
		v120 = 0;
		while (1)
		{
			while (1)
			{
				while (1)
				{
					v121 = *texture++;
					if (v121 < 0)
						break;
					if (v121)
					{
						v120 = v121;
						do
						{
							v122 = *texture++;
							v117 = v117 - 1;
							if ((v117 & 0x80u) != 0)
								*v118++ = v122;
							v120--;
						} while (v120);
					}
					else
					{
						v119 -= x_DWORD_18062C_resolution_x;
						v118 = v119;
						v117 = __PAIR__(v117, v139) - 256;
						if (!v117)
							return;
					}
				}
				if ((char)v117 > 0)
					break;
			LABEL_225:
				v118 -= v121;
				v123 = *texture++;
				v120 = v123;
				do
				{
					v124 = *texture++;
					v117 = v117 - 1;
					if ((v117 & 0x80u) != 0)
						*v118++ = v124;
					v120--;
				} while (v120);
			}
			v117 = v121 + v117;
			if ((v117 & 0x80u) != 0)
			{
				v121 = v117;
				goto LABEL_225;
			}
		}
	}
	if (x_WORD_E36D4 & 2)
	{
		v105 = (x_BYTE *)(x_DWORD_18062C_resolution_x * (a1byte2 + tiley) + a1byte1 + tilex + pixel_buffer_index);
		v106 = 0;
		v107 = a1byte1 + tilex + 1;
		if (v107 >= 0)
		{
			a1byte1 = v107;
			v137 = v107;
			v108 = v105;
			v109 = -1;
			do
			{
				while (1)
				{
					while (1)
					{
						v109 = *texture++;
						if ((v109 & 0x80u) == 0)
							break;
						v105 += v109;
						a1byte1 = v109 + a1byte1;
					}
					if (!v109)
						break;
					v106 = v109;
					do
					{
						v110 = *texture++;
						a1byte1 = a1byte1 - 1;
						if ((a1byte1 & 0x80u) == 0)
							*v105 = v110;
						v105--;
						v106--;
					} while (v106);
				}
				v108 -= x_DWORD_18062C_resolution_x;
				v105 = v108;
				a1byte1 = __PAIR__(a1byte2, v137) - 256;
			} while (a1byte2);
		}
	}
	else
	{
		v111 = (x_BYTE *)(x_DWORD_18062C_resolution_x * tiley + a1byte1 + tilex + pixel_buffer_index);
		v112 = 0;
		v113 = a1byte1 + tilex + 1;
		if (v113 >= 0)
		{
			a1byte1 = v113;
			v138 = v113;
			v114 = v111;
			v115 = -1;
			do
			{
				while (1)
				{
					while (1)
					{
						v115 = *texture++;
						if ((v115 & 0x80u) == 0)
							break;
						v111 += v115;
						a1byte1 = v115 + a1byte1;
					}
					if (!v115)
						break;
					v112 = v115;
					do
					{
						v116 = *texture++;
						a1byte1 = a1byte1 - 1;
						if ((a1byte1 & 0x80u) == 0)
							*v111 = v116;
						v111--;
						v112--;
					} while (v112);
				}
				v114 += x_DWORD_18062C_resolution_x;
				v111 = v114;
				a1byte1 = __PAIR__(a1byte1, v138) - 256;
			} while (a1byte2);
		}
	}
}

//----- (00090164) --------------------------------------------------------
void sub_90164(Bit16s x1, Bit16s y1, Bit16s x2, Bit16s y2, Bit8u a5)//271164
{
	Bit8u* pixel; // edi
	Bit16u v6; // dx
	Bit8u v7; // ebx
	int v8; // esi
	int v9; // ecx
	Bit16u v10; // [esp+0h] [ebp-4h]
	Bit16u v11; // [esp+14h] [ebp+10h]

	pixel = &x_DWORD_180628b_screen_buffer[320 * (y1 >> 1) + (x1 >> 1)];
	v6 = y2 >> 1;
	v11 = x2 >> 1;
	v10 = (320 - v11);
	if (x_WORD_E36D4 & 4)
	{
		v7 = a5;
		v8 = x_DWORD_E3890;
		do
		{
			v9 = v11;
			do
			{
				v7 = pixel[0];
				*pixel++ = *(Bit8u*)(v8 + v7);
				--v9;
			} while (v9);
			pixel += v10;
			--v6;
		} while (v6);
	}
	else
	{
		do
		{
			memset(pixel, a5, v11);
			pixel += v10 + v11;
			--v6;
		} while (v6);
	}
}

//----- (000901E4) --------------------------------------------------------
void sub_901E4(Bit16s a1, Bit16s a2, Bit16s a3, Bit16s a4, uint16_t a5)//2711e4
{
	x_BYTE *v5; // edi
	int16_t v6; // dx
	int v7; // ebx
	int v8; // esi
	int v9; // ecx
	int v10; // [esp+0h] [ebp-4h]

	v5 = (x_BYTE *)(640 * a2 + x_DWORD_180628b_screen_buffer + a1);
	v6 = a4;
	v10 = (uint16_t)(640 - a3);
	if (x_WORD_E36D4 & 4)
	{
		v7 = a5;
		v8 = x_DWORD_E3890;
		do
		{
			v9 = a3;
			do
			{
				BYTE1(v7) = *v5;
				*v5++ = *(x_BYTE *)(v7 + v8);
				v9--;
			} while (v9);
			v5 += v10;
			v6--;
		} while (v6);
	}
	else
	{
		do
		{
			memset(v5, a5, a3);
			v5 += v10 + a3;
			v6--;
		} while (v6);
	}
}

//----- (0009025C) --------------------------------------------------------
int sub_9025C(int16_t a1, int16_t a2, int16_t a3, int16_t a4, uint16_t a5, int16_t a6)//27125c
{
	int16_t v6; // bx
	int16_t v7; // cx
	int16_t v8; // dx
	x_BYTE *v10; // edi
	int v11; // eax
	unsigned int v12; // ecx
	int v13; // ecx
	int v14; // esi
	int v15; // esi
	int v16; // [esp+4h] [ebp-4h]

	//fix it
	v16 = 0;
	//fix it

	v6 = 2 * x_DWORD_180634_screen_width;
	v7 = 2 * x_DWORD_180650_positiony;
	v8 = 2 * x_DWORD_180630_screen_height;
	if (a1 < (int16_t)(2 * x_DWORD_18063C_sprite_sizex))
		a1 = 2 * x_DWORD_18063C_sprite_sizex;
	if (a3 < (int16_t)(2 * x_DWORD_18063C_sprite_sizex))
		return v16;
	if (a1 >= v6)
		return v16;
	if (a3 >= v6)
		a3 = 2 * x_DWORD_180634_screen_width;
	if (a2 < v7)
		a2 = 2 * x_DWORD_180650_positiony;
	if (a4 < v7)
		return v16;
	if (a2 >= v8)
		return v16;
	if (a4 >= v8)
		a4 = 2 * x_DWORD_180630_screen_height;
	// FIXME: types
	// // v10 = (x_BYTE *)(320 * ((unsigned int)(uint16_t)a2 >> 1)
	// 	+ (int)x_DWORD_180628b_screen_buffer
	// 	+ ((unsigned int)(uint16_t)a1 >> 1));
	v11 = a5;
	v12 = (uint16_t)a3;
	if (a3 == a1)
	{
		v13 = (uint16_t)a4;
		LOWORD(v13) = (uint16_t)(a4 - a2) >> 1;
		if (a6 & 4)
		{
			v14 = x_DWORD_E3890;
			do
			{
				BYTE1(v11) = *v10;
				*v10 = *(x_BYTE *)(v11 + v14);
				v10 += 320;
				--v13;
			} while (v13);
		}
		else
		{
			do
			{
				*v10 = a5;
				v10 += 320;
				--v13;
			} while (v13);
		}
	}
	else
	{
		LOWORD(v12) = (uint16_t)(a3 - a1) >> 1;
		if (a6 & 4)
		{
			v15 = x_DWORD_E3890;
			do
			{
				BYTE1(v11) = *v10;
				*v10++ = *(x_BYTE *)(v11 + v15);
				--v12;
			} while (v12);
		}
		else
		{
			memset(v10, a5, v12);
		}
	}
	return v16;
}

//----- (00090374) --------------------------------------------------------
int sub_90374(int16_t a1, int16_t a2, int16_t a3, int16_t a4, uint16_t a5, int16_t a6)//271374
{
	x_BYTE *v7; // edi
	int v8; // eax
	unsigned int v9; // ecx
	int v10; // ecx
	int v11; // esi
	int v12; // esi
	int v13; // [esp+4h] [ebp-4h]

	//fix it
	v13 = 0;
	//fix it

	if (a1 < (int16_t)x_DWORD_18063C_sprite_sizex)
		a1 = x_DWORD_18063C_sprite_sizex;
	if (a3 < (int16_t)x_DWORD_18063C_sprite_sizex)
		return v13;
	if (a1 >= (int16_t)x_DWORD_180634_screen_width)
		return v13;
	if (a3 >= (int16_t)x_DWORD_180634_screen_width)
		a3 = x_DWORD_180634_screen_width;
	if (a2 < (int16_t)x_DWORD_180650_positiony)
		a2 = x_DWORD_180650_positiony;
	if (a4 < (int16_t)x_DWORD_180650_positiony)
		return v13;
	if (a2 >= (int16_t)x_DWORD_180630_screen_height)
		return v13;
	if (a4 >= (int16_t)x_DWORD_180630_screen_height)
		a4 = x_DWORD_180630_screen_height;
	v7 = (x_BYTE *)(640 * (uint16_t)a2 + x_DWORD_180628b_screen_buffer + (uint16_t)a1);
	v8 = a5;
	v9 = (uint16_t)a3;
	LOWORD(v9) = a3 - a1;
	if (a3 == a1)
	{
		v10 = (uint16_t)a4;
		LOWORD(v10) = a4 - a2;
		if (a6 & 4)
		{
			v11 = x_DWORD_E3890;
			do
			{
				BYTE1(v8) = *v7;
				*v7 = *(x_BYTE *)(v8 + v11);
				v7 += 640;
				--v10;
			} while (v10);
		}
		else
		{
			do
			{
				*v7 = a5;
				v7 += 640;
				--v10;
			} while (v10);
		}
	}
	else if (a6 & 4)
	{
		v12 = x_DWORD_E3890;
		do
		{
			BYTE1(v8) = *v7;
			*v7++ = *(x_BYTE *)(v8 + v12);
			--v9;
		} while (v9);
	}
	else
	{
		memset(v7, a5, v9);
	}
	return v13;
}

//----- (00090478) --------------------------------------------------------
void sub_90478_VGA_Blit320()//271478
{
	if (!x_BYTE_E3766)
		sub_8CACD_draw_cursor2();
#ifndef debug_hide_graphics
	VGA_Blit(320, 200, x_DWORD_180628b_screen_buffer);
#endif  
	
	//set speed
	long actmillis = mygetthousandths();
	long newdelay = speedGame - (actmillis - oldmillis);//max millis is 20 millis
	if (newdelay < 0)newdelay = 0;
	if (newdelay > speedGame)newdelay = speedGame;
	mydelay(newdelay);//set speed
	oldmillis = actmillis;
	//set speed
}

//----- (000904C0) --------------------------------------------------------
char sub_904C0(float a1)//2714c0
{
	double v1; // st7
	int v2; // eax
	char result; // al
	int v4; // edx
	signed int v5; // ecx

	//fix it
	v2 = 0;
	v4 = 0;
	v5 = 0;
	//fix it

	if (a1 < 0.01)
		a1 = 0.0099999998;
	v1 = a1;
	do
	{
		IF_DPOW(v1, 1.0 / v1);
		v1 = v1 * 63.0 + 0.5;
		result = (signed int)_CHP(v2);
		x_BYTE_181504[v4] = result;
	} while (v5 < 64);
	return result;
}


//----- (00090668) --------------------------------------------------------
signed int sub_90668(int a1)//271668
{
	int v1; // edx
	signed int result; // eax
	int v3; // edx
	int v4; // ebx
	int v5; // ebx

	v1 = a1;
	if (a1)
	{
		result = 0;
		v3 = 0;
		v4 = 0;
		do
		{
			++result;
			x_WORD_1811E4[v3] = v4;
			++v3;
			v4 += 160;
		} while (result < 400);
	}
	else
	{
		result = 0;
		v5 = 80 * a1;
		do
		{
			++result;
			*(int16_t *)((char *)x_WORD_1811E4 + v1) = v5;
			v1 += 2;
			v5 += 80;
		} while (result < 400);
	}
	return result;
}

//----- (000906B4) --------------------------------------------------------
int sub_906B4()//fix bios graphics//2716b4
{
	char *v0; // edx
	signed int v1; // ebx
	char v2; // cl
	signed int v3; // ebx
	int v4; // ecx
	int v5; // eax
	//uint8_t v6; // al
	int result; // eax
	char v8; // [esp+0h] [ebp-30h]
	char v9; // [esp+1h] [ebp-2Fh]
	int v10; // [esp+1Ch] [ebp-14h]

	v8 = 0x13;
	v9 = 0;
	//x_WORD_E3908 = MEMORY[0x449];
	//int386(0x10, (REGS*)&v8, (REGS*)&v8);//Write string (BIOS after 1/10/86) (graphics)
	//sub_A0BB0((int *)&unk_E3894, 25);
	/*__outx_WORD(0x3C4u, 0x604u);
	__outx_WORD(0x3D4u, 0x14u);
	__outx_WORD(0x3D4u, 0xE317u);
	__outx_WORD(0x3CEu, 0xFF08u);
	__outx_WORD(0x3C4u, 0xF02u);*/
	v0 = (char *)&loc_A0000_vga_buffer;
	do
	{
		*(x_DWORD *)v0 = 0;
		v0 += 4;
	} while (v0 != (char*)0xB0000);
	v1 = 0;
	do
	{
		v2 = v1++ & 3;
		x_BYTE_1810A3[v1] = 1 << v2;
	} while (v1 < 320);
	sub_90668(0);
	v3 = 0;
	v4 = 0;
	do
	{
		v10 = 3;
		++v4;
		v5 = 63 * (v3 & 7) / 7 | (63 * (v3 >> 6) / 3 << 16) | (63 * ((v3 >> 3) & 7) / 7 << 8);
		++v3;
		//x_DWORD_180CA0[v4] = v5;
	} while (v3 < 256);
	//sub_90530((int)&unk_180CA4, 256, 1.2);
	//v6 = __inx_BYTE(0x3DAu);
	//__outx_BYTE(0x3C0u, 0x11u);
	//__outx_BYTE(0x3C0u, 0);
	result = 0;
	//LOBYTE(result) = __inx_BYTE(0x3DAu);
	LOBYTE(result) = 32;
	//__outx_BYTE(0x3C0u, 0x20u);
	return result;
}

//----- (00090810) --------------------------------------------------------
/*int sub_90810()//271810
{
	int result=0; // eax

	if (x_WORD_E3908)
	{
		//result = sub_905EC_any_graphics_command2(x_WORD_E3908);
		x_WORD_E3908 = 0;
	}
	return result;
}*/
Bit16s sub_90B27_VGA_pal_fadein_fadeout(Bit8u *newpalbuffer, Bit8u shadow_levels, bool singlestep)//271B27 init and nightfall
{
	//Bit8u *v3; // eax
	//Bit16u v4; // edx
	//Bit8u* v5; // eax
	//Bit16u v6; // edx
	Bit8u outbuffer[768]; // [esp+0h] [ebp-30Ch]
	Bit16u i; // [esp+300h] [ebp-Ch]
	//Bit8u j = 0;
	//Bit8u* v10; // [esp+308h] [ebp-4h]

	Bit8u zero_buffer[768];

	VGA_Init();

	if (singlestep)
	{
		if (x_BYTE_E390C_VGA_pal_not_begin)
		{
			x_WORD_181B44++;
			if (shadow_levels == x_WORD_181B44)
				x_BYTE_E390C_VGA_pal_not_begin = 0;
		}
		else
		{
			x_WORD_181B44 = 0;
			x_BYTE_E390C_VGA_pal_not_begin = 1;
			sub_A0D2C_VGA_get_pallette(x_BYTE_181544_oldpalbuffer);
			if (!newpalbuffer)
				memset(zero_buffer, 0, 768);
		}
		if (!newpalbuffer)
			newpalbuffer = zero_buffer;
		for (i = 0; i < 768; i++)
		{
			//v5 = &buffer[i];
			//LOWORD(v5) = *v5;
			//v6 = i;
			//LOWORD(v6) = x_BYTE_181544_oldpalbuffer[i];
			//v10 = &v5[-v6];
			//outbuffer[i] = x_BYTE_181544_oldpalbuffer[i] + ((unk_181B42 >> 16)* (newpalbuffer[i] - x_BYTE_181544_oldpalbuffer[i])/ shadow_levels);
			outbuffer[i] = x_BYTE_181544_oldpalbuffer[i] + ((x_WORD_181B44)* (newpalbuffer[i] - x_BYTE_181544_oldpalbuffer[i]) / shadow_levels);
		}
		sub_9A0FC_wait_to_screen_beam();
		sub_41A90_VGA_pallette_install(outbuffer);
		//return j;
	}
	else
	{
		sub_A0D2C_VGA_get_pallette(x_BYTE_181544_oldpalbuffer);
		if (!newpalbuffer)//ebp+14 - 355204
		{
			newpalbuffer = zero_buffer;
			memset(zero_buffer, 0, 768);
		}
		for (x_WORD_181B44 = 0; x_WORD_181B44 <shadow_levels; x_WORD_181B44++)
		{
			for (i = 0; i < 768; i++)
			{
				/*al=352544[i];
				dl = 352544[i];
				edx=al-dl
				eax=[352b42]>>16
				edx=edx*eax
				bl= shadow_levels
				sar edx,1f//!
				idiv ebx
				edx=352544[i]&0xff
				eax+=edx
				v8[i]=al*/


				//v3 = buffer[i];
				//LOWORD(v3) = *v3;
				//v4 = i;
				//v4 = x_BYTE_181544_oldpalbuffer[i];
				//v10 = &v3[-v4];
				//outbuffer[i] = x_BYTE_181544_oldpalbuffer[i] + ((unk_181B42 >> 16) * (newpalbuffer[i] - x_BYTE_181544_oldpalbuffer[i]) / shadow_levels);//352b42 352544
				outbuffer[i] = x_BYTE_181544_oldpalbuffer[i] + ((x_WORD_181B44) * (newpalbuffer[i] - x_BYTE_181544_oldpalbuffer[i]) / shadow_levels);//352b42 352544
			}
			sub_9A0FC_wait_to_screen_beam();
			sub_41A90_VGA_pallette_install(outbuffer);
			mydelay(10);
		}
		x_BYTE_E390C_VGA_pal_not_begin = 0;
	}

	/*if ((a1 == NULL) && (a2 == 0x10) && (a3 == 0)) {//fix it - a1 not changed
		VGA_Init();
	}*/
	//return 0;
	return x_WORD_181B44;
}
//----- (00090B27) --------------------------------------------------------
int16_t sub_90B27_VGA_pal_fadein_fadeout_orig(char *a1, uint8_t a2, char a3)
{
	/*
  char *v3; // eax
  int v4; // edx
  char *v5; // eax
  int v6; // edx
  char v8[768]; // [esp+0h] [ebp-30Ch]
  int i; // [esp+300h] [ebp-Ch]
  uint8_t *v10; // [esp+308h] [ebp-4h]

  if ( a3 )
  {
	if ( x_BYTE_E390C_VGA_pal_not_begin )
	{
	  if ( a2 == ++x_WORD_181B44 )
		x_BYTE_E390C_VGA_pal_not_begin = 0;
	}
	else
	{
	  x_WORD_181B44 = 0;
	  x_BYTE_E390C_VGA_pal_not_begin = 1;
	  sub_A0D2C_VGA_get_pallette(x_BYTE_181544_oldpalbuffer);
	  if ( !a1 )
		memset(&unk_181844, 0, 768);
	}
	if ( !a1 )
	  a1 = (char *)&unk_181844;
	for ( i = 0; (int16_t)i < 768; i++ )
	{
	  v5 = &a1[(int16_t)i];
	  LOWORD(v5) = (uint8_t)*v5;
	  v6 = (int16_t)i;
	  LOWORD(v6) = x_BYTE_181544_oldpalbuffer[(int16_t)i];
	  v10 = (uint8_t *)&v5[-v6];
	  v8[(int16_t)i] = x_BYTE_181544_oldpalbuffer[(int16_t)i]
							+ (unsigned int)((unk_181B42 >> 16)
										   * (signed int)(int16_t)((uint8_t)v5 - (uint8_t)v6)
										   / a2);
	}
	sub_9A0FC_wait_to_screen_beam();
	sub_41A90_VGA_pallette_install((uint8_t *)v8);
  }
  else
  {
	sub_A0D2C_VGA_get_pallette(x_BYTE_181544_oldpalbuffer);
	if ( !a1 )
	{
	  a1 = (char *)&unk_181844;
	  memset(&unk_181844, 0, 768);
	}
	for ( x_WORD_181B44 = 0; a2 >= x_WORD_181B44; ++x_WORD_181B44 )
	{
	  for ( i = 0; (int16_t)i < 768; i++ )
	  {
		v3 = &a1[(int16_t)i];
		LOWORD(v3) = (uint8_t)*v3;
		v4 = (int16_t)i;
		LOWORD(v4) = x_BYTE_181544_oldpalbuffer[(int16_t)i];
		v10 = (uint8_t *)&v3[-v4];
		v8[(int16_t)i] = x_BYTE_181544_oldpalbuffer[(int16_t)i]
							  + (unsigned int)((unk_181B42 >> 16)
											 * (signed int)(int16_t)((uint8_t)v3 - (uint8_t)v4)
											 / a2);
	  }
	  sub_9A0FC_wait_to_screen_beam();
	  sub_41A90_VGA_pallette_install((uint8_t *)v8);
	}
	x_BYTE_E390C_VGA_pal_not_begin = 0;
  }
  return x_WORD_181B44;*/
	return 0;
}

//----- (00090D27) --------------------------------------------------------
void sub_90D27()
{
	x_BYTE_E390C_VGA_pal_not_begin = 0;
}

//----- (00090D3F) --------------------------------------------------------
char* sub_90D3F_unload_file_array(int psindex)//271d3f
{
	char* result; // eax

	while (1)
	{
		result = pstr[psindex].path;
		if (!pstr[psindex].var28_begin_buffer)
			break;
		sub_9A2F5_freemem_of_begin_buffer(pstr[psindex]);
		psindex++;
	}
	return result;
}

void sub_90D6E_VGA_set_video_mode_320x200_and_pallette(Bit8u* pallette)//271d6e
{
	//find 351662 - 3;//fix it
	//uint8_t v2=3; // [esp+0h] [ebp-38h]
	//int v3; // [esp+1Ch] [ebp-1Ch]
			//input1 355200(180200) - 3
			//input2 35521c 00 0f 00 00 00
	//v3 = 0xf00;
	//int386(0x10, (REGS*)&v3, (REGS*)&v2);//Set video mode
	VGA_Resize(320, 200);
	if (!x_WORD_180662_graphics_handle)
		x_WORD_180662_graphics_handle = 0x13;
	//v3 = 0x13;
	x_DWORD_18062C_resolution_x = 320;
	x_DWORD_180624_resolution_y = 200;
	//int386(0x10, (REGS*)&v3, (REGS*)&v2);//Write string (BIOS after 1/10/86)

	//a1 - 3aa0a4
	sub_41A90_VGA_pallette_install(pallette);
	sub_8D12F_set_mouse_viewport();
	sub_A0D50_set_viewport(0, 0, 320, 200);
}

//----- (00090D6E) --------------------------------------------------------
void sub_90D6E_VGA_set_video_mode_320x200_and_pallette_orig(uint8_t *a1)
{
	uint8_t v2; // [esp+0h] [ebp-38h]
	//int v3; // [esp+1Ch] [ebp-1Ch]

	//fix
	v2 = 0;
	//fix

	//v3 = 0xf00;
	//int386(0x10, (REGS*)&v3, (REGS*)&v2);//Set video mode
	if (!x_WORD_180662_graphics_handle)
		x_WORD_180662_graphics_handle = v2;
	//v3 = 0x13;
	x_DWORD_18062C_resolution_x = 320;
	x_DWORD_180624_resolution_y = 200;
	//int386(0x10, (REGS*)&v3, (REGS*)&v2);//Write string (BIOS after 1/10/86)
	sub_41A90_VGA_pallette_install(a1);
	sub_8D12F_set_mouse_viewport();
	sub_A0D50_set_viewport(0, 0, 320, 200);
}

//----- (00090E07) --------------------------------------------------------
void sub_90E07_VGA_set_video_mode_640x480_and_pallette(Bit8u* pallette)//271e07
{
	//uint8_t v2; // [esp+0h] [ebp-38h]
	//int v3; // [esp+1Ch] [ebp-1Ch]

	//v3 = 0xf00;//
	//int386(0x10, (REGS*)&v3, (REGS*)&v2);//Set video mode
	VGA_Resize(640, 480);
	if (!x_WORD_180662_graphics_handle)
		x_WORD_180662_graphics_handle = 0x13;
	x_DWORD_18062C_resolution_x = 640;
	x_DWORD_180624_resolution_y = 480;
	sub_994BA_cursor_move(0x101);
	sub_41A90_VGA_pallette_install(pallette);
	sub_8D12F_set_mouse_viewport();
	sub_A0D50_set_viewport(0, 0, 640, 480);
}


void sub_90E07_VGA_set_video_mode_alt_and_pallette(Bit8u* pallette)//271e07
{
	//uint8_t v2; // [esp+0h] [ebp-38h]
	//int v3; // [esp+1Ch] [ebp-1Ch]

	//v3 = 0xf00;//
	//int386(0x10, (REGS*)&v3, (REGS*)&v2);//Set video mode
	VGA_Resize(alt_resolution_width, alt_resolution_height);
	if (!x_WORD_180662_graphics_handle)
		x_WORD_180662_graphics_handle = 0x13;
	x_DWORD_18062C_resolution_x = alt_resolution_width;
	x_DWORD_180624_resolution_y = alt_resolution_height;
	sub_994BA_cursor_move(0x101);
	sub_41A90_VGA_pallette_install(pallette);
	sub_8D12F_set_mouse_viewport();
	sub_A0D50_set_viewport(0, 0, alt_resolution_width, alt_resolution_height);
}

//----- (00090EA0) --------------------------------------------------------
int sub_90EA0(int a1, char* a2)//271ea0
{
	int result; // eax

	x_DWORD_181BE4_number_of_disc = a1;
	result = sprintf(aSound_2, (const char *)"%s", a2);//2a3228
	x_BYTE_E39A0 = 1;
	return result;
}

//----- (00090EE0) --------------------------------------------------------
int sub_90EE0()//271ee0
{
	Bit32s v1; // [esp+0h] [ebp-8h]

	x_dos_setdrive(x_DWORD_181BE4_number_of_disc, &v1);
	return x_chdir("SOUND");
}

//----- (00090F20) --------------------------------------------------------
int sub_90F20_restore_old_directory()
{
	Bit32s v1; // [esp+0h] [ebp-4h]

	x_dos_setdrive(x_DWORD_181BE0, &v1);
	return x_chdir(unk_181B50);
}

//----- (00090F60) --------------------------------------------------------
int sub_90F60()//271f60
{
	char* v0; // ST0C_4
	int result; // eax

	v0 = x_getcwd(0, 0);
	sprintf(unk_181B50, (const char *)"%s", v0 + 2);
	free((void*)v0);
	result = dos_getdrive(&x_DWORD_181BE0);//352be0
	if (!x_BYTE_E39A0)
	{
		result = x_DWORD_181BE0;
		x_DWORD_181BE4_number_of_disc = x_DWORD_181BE0;
	}
	return result;
}

//----- (00090FD0) --------------------------------------------------------
void sub_90FD0(/*char* a1*//*, int a2, char* a3*/)//271fd0
{
	//int v3; // eax
	//int v4; // edx
	//int result; // eax

	//fix it
	//v3 = 0;
	//v4 = 0;
	//fix it

	sub_8D290_init_sound(/*a1*//*, a2, (int)a3*/);
	sub_8D970_init_music(/*a1*//*v3, v4, a3*/);
	//result = _stricmp(unk_180A30.driver_name, "SB16.DIG");
	if (!_stricmp(unk_180A30.driver_name, "SB16.DIG"))
		/*result = */sub_91010();
	//return result;
}

//----- (00091010) --------------------------------------------------------
void sub_91010()
{
	int16_t result; // ax
	int16_t v1; // [esp+0h] [ebp-4h]

	result = x_WORD_180B30;
	v1 = x_WORD_180B30;
	if (x_WORD_180B30 == 544)
	{
		x_outp(x_WORD_180B30 + 4, 48);
		x_WORD_E39A4 = x_inp(v1 + 5) >> 3;
		x_outp(v1 + 4, 49);
		x_WORD_E39A6 = x_inp(v1 + 5) >> 3;
		x_outp(v1 + 4, 50);
		x_WORD_E39AC = x_inp(v1 + 5);
		x_outp(v1 + 5, 8 * x_WORD_E39A4 - 32);
		x_outp(v1 + 4, 51);
		x_WORD_E39AE = x_inp(v1 + 5);
		x_outp(v1 + 5, 8 * x_WORD_E39A6 - 32);
		x_outp(v1 + 4, 68);
		x_WORD_E39B0 = x_inp(v1 + 5);
		x_outp(v1 + 5, 96);
		x_outp(v1 + 4, 69);
		x_WORD_E39B2 = x_inp(v1 + 5);
		x_outp(v1 + 5, 96);
		x_outp(v1 + 4, 70);
		x_WORD_E39B4 = x_inp(v1 + 5);
		x_outp(v1 + 5, 120);
		x_outp(v1 + 4, 71);
		x_WORD_E39B6 = x_inp(v1 + 5);
		x_outp(v1 + 5, 120);
		if (!_stricmp(unk_180BE0, "SBAWE32.MDI"))
		{
			x_outp(v1 + 4, 52);
			x_WORD_E39A8 = x_inp(v1 + 5);
			x_outp(v1 + 5, 8 * x_WORD_E39A4 - 24);
			x_outp(v1 + 4, 53);
			x_WORD_E39AA = x_inp(v1 + 5);
			result = x_outp(v1 + 5, 8 * x_WORD_E39A6 - 24);
		}
		else if (!_stricmp(unk_180BE0, "MPU401.MDI"))
		{
			x_outp(v1 + 4, 52);
			x_WORD_E39A8 = x_inp(v1 + 5);
			x_outp(v1 + 5, 8 * x_WORD_E39A4 - 24);
			x_outp(v1 + 4, 53);
			x_WORD_E39AA = x_inp(v1 + 5);
			result = x_outp(v1 + 5, 8 * x_WORD_E39A6 - 24);
		}
		else
		{
			x_outp(v1 + 4, 52);
			x_WORD_E39A8 = x_inp(v1 + 5);
			x_outp(v1 + 5, 8 * x_WORD_E39A4 - 8);
			x_outp(v1 + 4, 53);
			x_WORD_E39AA = x_inp(v1 + 5);
			result = x_outp(v1 + 5, 8 * x_WORD_E39A6 - 8);
		}
		x_BYTE_E39B8 = 1;
	}
	//return result;
}

//----- (00091420) --------------------------------------------------------
int sub_91420()
{
	int16_t v0; // ST08_2

	v0 = x_WORD_180B30;
	x_outp(x_WORD_180B30 + 4, 50);
	x_outp(549, x_WORD_E39AC);
	x_outp(v0 + 4, 51);
	x_outp(v0 + 5, x_WORD_E39AE);
	x_outp(v0 + 4, 52);
	x_outp(v0 + 5, x_WORD_E39A8);
	x_outp(v0 + 4, 53);
	x_outp(v0 + 5, x_WORD_E39AA);
	x_outp(v0 + 4, 68);
	x_outp(v0 + 5, x_WORD_E39B0);
	x_outp(v0 + 4, 69);
	x_outp(v0 + 5, x_WORD_E39B2);
	x_outp(v0 + 4, 70);
	x_outp(v0 + 5, x_WORD_E39B4);
	x_outp(v0 + 4, 71);
	return x_outp(v0 + 5, x_WORD_E39B6);
}

//----- (000915A0) --------------------------------------------------------
void sub_915A0_sound_proc23()
{
	//bool result; // eax

	if (!x_DWORD_E39BC)
	{
		// FIXME: types
		// sub_9D590_lock_linear_region((Bit8u*)sub_915A0_sound_proc23, (unsigned int)sub_986A0_unlock_linear_region);
		sub_9D710((Bit8u*)&x_DWORD_181BF4, 4);
		sub_9D710((Bit8u*)&x_DWORD_181BF8, 4);
		sub_9D710((Bit8u*)&x_DWORD_181BF0_AIL_debugfile, 4);
		sub_9D710((Bit8u*)&x_DWORD_181BFC, 4);
		sub_9D710((Bit8u*)&x_DWORD_181C0C, 4);
		sub_9D710((Bit8u*)&x_DWORD_181C08, 4);
		sub_9D710((Bit8u*)&x_DWORD_181C10, 4);
		//sub_9D710((Bit8u*)&x_DWORD_181C00, 4);
		x_DWORD_E39BC = 1;
	}
	//return result;
}


//----- (000919C0) --------------------------------------------------------
signed int sub_919C0()
{
	signed int result; // eax
	bool v1; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v1 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v1)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_shutdown()\n");
	result = sub_9ED70();
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8))
	{
		result = sub_A16A2();
		if (!result)
			result = fclose(x_DWORD_181BF0_AIL_debugfile);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00091A80) --------------------------------------------------------
int sub_91A80_AIL_set_preference(Bit32u number, Bit32s value)//int (__stdcall *mss32_AIL_set_preference)(unsigned int, int) = 0;
{
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v5; // [esp+4h] [ebp-Ch]
	int result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v5 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v5)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_preference(%d,%d)\n", number, value);
	result = sub_9E6E0_set_preference(number, value);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %d\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00091BD0) --------------------------------------------------------
void sub_91BD0_s_plus()//fix it - remove
{
	sub_A0EEC_s_plus2();
}

//----- (00091BF0) --------------------------------------------------------
void sub_91BF0_s_minus()//fix it - remove
{
	sub_A0EF9_s_minus2();
}

//----- (00091C10) --------------------------------------------------------
Bit16u sub_91C10_AIL_get_real_vect(/*VDI_HDR* a1, int a2, int a3,*/ Bit32u vectnum/*U32       vectnum*/)//AIL_get_real_vect
{
	int v4; // eax
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v8; // [esp+4h] [ebp-Ch]
	Bit16u result; // [esp+Ch] [ebp-4h]

	//AIL_fix();

	x_DWORD_181C04++;
	v8 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && (v4 = sub_A16A2(), !v4 && sub_916F0_sound_proc24());
	if (v8)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_get_real_vect(0x%X)\n", vectnum);
	result = sub_A121D_AIL_API_get_real_vect(vectnum/*, a1, a3, a2*/);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = 0x%X\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00091D50) --------------------------------------------------------
void sub_91D50_AIL_set_real_vect(Bit32u vectnum, Bit16u real_ptr)//AIL_set_real_vect
{
	//AIL_fix();
	//signed int result; // eax
	bool v3; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v3 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v3)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_real_vect(0x%X,0x%X)\n", vectnum, real_ptr);
	sub_A1249_AIL_API_set_real_vect(vectnum, real_ptr);
	x_DWORD_181C04--;
}

//----- (00091E90) --------------------------------------------------------
void sub_91E90_AIL_restore_USE16_ISR(Bit32s a1)//AIL_restore_USE16_ISR
{
	AIL_fix();
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v2)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_restore_USE16_ISR(%d)\n", a1);
	sub_A14DB_AIL_API_restore_USE16_ISR(a1);
	x_DWORD_181C04--;
}

//----- (00091F20) --------------------------------------------------------
unsigned int sub_91F20()
{
	return sub_A1520();
}

//----- (00091F50) --------------------------------------------------------
void sub_91F50(unsigned int a1)
{
	sub_A1524(a1);
}

//----- (00091F70) --------------------------------------------------------
Bit32s sub_91F70_AIL_call_driver(AIL_DRIVER* drvr, Bit32s fn, VDI_CALL* in, VDI_CALL* out)//AIL_call_driver //272f70
{
	//AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v7; // [esp+4h] [ebp-Ch]
	int result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v7 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v7)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_call_driver(0x%X,0x%X,0x%X,0x%X)\n", drvr, fn, in, out);
	result = sub_A158B_AIL_API_call_driver(drvr, fn, in, out);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %d\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (000920D0) --------------------------------------------------------
void sub_920D0_AIL_delay(int a1)//AIL_delay
{
	//AIL_fix();
	//uint8_t result; // al
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v2)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_delay(%d)\n", a1);
	/*result = */sub_A1665_AIL_API_delay(a1);
	x_DWORD_181C04--;
	//return result;
}

//----- (00092160) --------------------------------------------------------
int sub_92160()
{
	return sub_A16A2();
}

//----- (00092190) --------------------------------------------------------
int sub_92190_AIL_read_INI(AIL_INI* INI, char* filename/*, char* a8, IO_PARMS IO*/)//AIL_read_INI // 273190
{
	int i1; // [esp+0h] [ebp-28h]
	int i2; // [esp+0h] [ebp-28h]
	int mm; // [esp+4h] [ebp-24h]
	int nn; // [esp+4h] [ebp-24h]
	int kk; // [esp+8h] [ebp-20h]
	int ll; // [esp+8h] [ebp-20h]
	int ii; // [esp+Ch] [ebp-1Ch]
	int jj; // [esp+Ch] [ebp-1Ch]
	int m; // [esp+10h] [ebp-18h]
	int n; // [esp+10h] [ebp-18h]
	int k; // [esp+14h] [ebp-14h]
	int l; // [esp+14h] [ebp-14h]
	int i; // [esp+18h] [ebp-10h]
	int j; // [esp+18h] [ebp-10h]
	bool v17; // [esp+1Ch] [ebp-Ch]
	int result; // [esp+24h] [ebp-4h]

	x_DWORD_181C04++;
	v17 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v17)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_API_read_INI(0x%X,%s)\n", INI, filename);
	result = sub_9E3A0_AIL_API_read_INI(INI, filename/*/*a8, &IO*/);
	if (result)
	{
		if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
		{
			for (i = 0; i < 0xE; i++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
			for (j = 1; j < x_DWORD_181C04; j++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Driver = %s\n", INI->driver_name);
			for (k = 0; k < 0xE; k++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
			for (l = 1; l < x_DWORD_181C04; l++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Device = %s\n", INI->device_name);
			for (m = 0; m < 0xE; m++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
			for (n = 1; n < x_DWORD_181C04; n++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "IO     = %X\n", INI->IO.IO);//*(int16_t *)(a1 + 256)
			for (ii = 0; ii < 0xE; ii++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
			for (jj = 1; jj < x_DWORD_181C04; jj++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "IRQ    = %d\n", INI->IO.IRQ);//*(int16_t *)(a1 + 258)
			for (kk = 0; kk < 0xE; kk++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
			for (ll = 1; ll < x_DWORD_181C04; ll++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "DMA_8  = %d\n", INI->IO.DMA_8_bit);//*(int16_t *)(a1 + 260)
			for (mm = 0; mm < 0xE; mm++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
			for (nn = 1; nn < x_DWORD_181C04; nn++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "DMA_16 = %d\n", INI->IO.DMA_16_bit);//*(int16_t *)(a1 + 262)
		}
	}
	else if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i1 = 0; i1 < 0xE; i1++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (i2 = 1; i2 < x_DWORD_181C04; i2++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %u\n", 0);
	}
	x_DWORD_181C04--;
	return result;
}
//----- (00092ED0) --------------------------------------------------------
IO_PARMS* sub_92ED0_AIL_get_IO_environment(AIL_DRIVER* drvr/*AIL_DRIVER *drvr  */)//AIL_get_IO_environment  
{
	AIL_fix();

	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v4; // [esp+4h] [ebp-Ch]
	IO_PARMS* result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v4 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v4)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_get_IO_environment(0x%X)\n", drvr);
	result = sub_9EB60_AIL_API_get_IO_environment(drvr);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = 0x%X\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00093010) --------------------------------------------------------
AIL_DRIVER* sub_93010_AIL_install_driver(/*int a1, */Bit8u* driver_image, Bit32s n_bytes)//AIL_install_driver //274010
{
	//AIL_fix();

	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v6; // [esp+4h] [ebp-Ch]
	AIL_DRIVER *v7; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v6 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v6)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_install_driver(0x%X,%u)\n", driver_image, n_bytes);
	v7 = sub_9E720_AIL_API_install_driver(/*a1, */driver_image, n_bytes);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = 0x%X\n", v7);
	}
	x_DWORD_181C04--;
	return v7;
}

//----- (00093160) --------------------------------------------------------
int sub_93160_AIL_uninstall_driver(AIL_DRIVER* drvr/*AIL_DRIVER *drvr  */)//AIL_uninstall_driver  
{
	//AIL_fix();

	int result; // eax
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v2)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_uninstall_driver(0x%X)\n", drvr);
	result = sub_9EA60_AIL_API_uninstall_driver(drvr);
	x_DWORD_181C04--;
	return result;
}

//----- (000931F0) --------------------------------------------------------
int sub_931F0_AIL_install_DIG_INI(/*int a1,*/ HDIGDRIVER* dig/*HDIGDRIVER *dig*/)//AIL_install_DIG_INI //2741f0
{
	//AIL_fix();

	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v5; // [esp+4h] [ebp-Ch]
	int result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v5 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v5)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_install_DIG_INI(0x%X)\n", dig);
	result = sub_A3720_AIL_API_install_DIG_INI(/*a1,*/ dig);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %d\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00093330) --------------------------------------------------------
HDIGDRIVER sub_93330_AIL_install_DIG_driver_file(/*int a1, */char* filename, IO_PARMS* IO)//AIL_install_DIG_driver_file // 274330
{
	//AIL_fix();

	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v6; // [esp+4h] [ebp-Ch]
	HDIGDRIVER result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v6 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v6)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_install_DIG_driver_file(%s,0x%X)\n", filename, IO);
	result = sub_A3600_AIL_API_install_DIG_driver_file(/*a1, */filename, IO);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = 0x%X\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00093480) --------------------------------------------------------
int sub_93480_AIL_uninstall_DIG_driver(unsigned int *dig/*HDIGDRIVER dig*/)//AIL_uninstall_DIG_driver //274480
{
	//AIL_fix();

	int result; // eax
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v2)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_uninstall_DIG_driver(0x%X)\n", dig);
	result = sub_A37A0(dig);
	x_DWORD_181C04--;
	return result;
}

//----- (00093510) --------------------------------------------------------
HSAMPLE sub_93510_AIL_allocate_sample_handle(HDIGDRIVER dig/*HDIGDRIVER dig*/)//AIL_allocate_sample_handle //00274510
{
	//AIL_fix();

	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v4; // [esp+4h] [ebp-Ch]
	HSAMPLE result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v4 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v4)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_allocate_sample_handle(0x%X)\n", dig);
	result = sub_A3820_allocate_sample_handle(dig);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = 0x%X\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (000937A0) --------------------------------------------------------
int sub_937A0_AIL_release_sample_handle(int S/*HSAMPLE S*/)//AIL_release_sample_handle //2747a0
{
	AIL_fix();

	int result; // eax
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v2)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_release_sample_handle(0x%X)\n", S);
	result = sub_A38C0_AIL_API_release_sample_handle(S);
	x_DWORD_181C04--;
	return result;
}

//----- (00093830) --------------------------------------------------------
void sub_93830_AIL_init_sample(HSAMPLE S/*HSAMPLE S*/)//AIL_init_sample //274830
{
	//AIL_fix();

	//int result; // eax
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	// FIXME: types
	// // if (v2)
	// 	dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_init_sample(0x%X)\n", (char)S);
	/*result = */sub_A38E0_init_sample(S);
	x_DWORD_181C04--;
	//return result;
}

//----- (000938C0) --------------------------------------------------------
Bit32s sub_938C0_AIL_set_sample_file(HSAMPLE S/*HSAMPLE S*/, Bit8u* file_image/*void const FAR *file_image*/, Bit32s block/*S32 block*/)//AIL_set_sample_file //2748c0
{
	//AIL_fix();

	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v6; // [esp+4h] [ebp-Ch]
	signed int result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04--;
	v6 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v6)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_sample_file(0x%X,0x%X,%d)\n", S, file_image, block);
	result = sub_A4B20_set_sample_file(S, file_image, block);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %d\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00093A10) --------------------------------------------------------
void sub_93A10_AIL_set_sample_address(HSAMPLE S, Bit8u* start, Bit32u len)//AIL_set_sample_address //274a10
{
	//AIL_fix();

	//x_DWORD *result; // eax
	bool v4; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v4 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v4)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_sample_address(0x%X,0x%X,%u)\n", S, start, len);
	/*result = */sub_A3A30_set_sample_address(S, start, len);
	x_DWORD_181C04--;
	//return result;
}

//----- (00093AB0) --------------------------------------------------------
void sub_93AB0_AIL_set_sample_type(HSAMPLE S, Bit32s a2, Bit32u a3)//AIL_set_sample_type //274ab0
{
	//AIL_fix();

	//int result; // eax
	bool v4; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v4 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v4)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_sample_type(0x%X,%d,%u)\n", S, a2, a3);
	/*result = */sub_A3A70_set_sample_type(S, a2, a3);
	x_DWORD_181C04--;
	//return result;
}

//----- (00093B50) --------------------------------------------------------
void sub_93B50_AIL_start_sample(HSAMPLE S/*HSAMPLE S*/)//AIL_start_sample //274b50
{
	//AIL_fix();
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v2)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_start_sample(0x%X)\n", S);
	sub_A3CB0_API_AIL_start_sample(S);
	x_DWORD_181C04--;
}

//----- (00093D00) --------------------------------------------------------
void sub_93D00_AIL_end_sample(HSAMPLE S/*HSAMPLE S*/)//274d00 AIL_end_sample //274d00
{
	//AIL_fix();
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v2)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_end_sample(0x%X)\n", S);
	sub_A3DA0__API_AIL_end_sample(S);
	x_DWORD_181C04--;
}

//----- (00093D90) --------------------------------------------------------
void sub_93D90_AIL_set_sample_playback_rate(HSAMPLE S, Bit32s playback_rate)//AIL_set_sample_playback_rate //274d90
{
	//AIL_fix();
	bool v3; // [esp+0h] [ebp-4h]

	x_DWORD_181C04--;
	v3 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v3)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_sample_playback_rate(0x%X,%d)\n", S, playback_rate);
	sub_A3AF0_set_sample_playback_rate(S, playback_rate);
	x_DWORD_181C04--;
}


//----- (00093E30) --------------------------------------------------------
void sub_93E30_AIL_set_sample_volume(HSAMPLE S, Bit32s volume)//AIL_set_sample_volume //274e30
{
	SOUND_set_sample_volume(S, volume);//used
}

/*

//----- (00093E30) --------------------------------------------------------
void sub_93E30_AIL_set_sample_volume_orig(HSAMPLE S, Bit32s volume)//AIL_set_sample_volume //274e30
{
	bool v3; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v3 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v3)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_sample_volume(0x%X,%d)\n", S, volume);
	sub_A3B40_set_sample_volume(S, volume);
	x_DWORD_181C04--;
}
*/

//----- (00093ED0) --------------------------------------------------------
void sub_93ED0_AIL_set_sample_volume_pan(HSAMPLE S, Bit32s volume)//AIL_set_sample_volume_pan //274ed0
{
	//AIL_fix();//used
	bool v3; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v3 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v3)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_sample_pan(0x%X,%d)\n", S, volume);
	sub_A3BB0_set_sample_volume_pan(S, volume);
	x_DWORD_181C04++;
}

//----- (00093F70) --------------------------------------------------------
void sub_93F70_AIL_set_sample_loop_count(HSAMPLE S/*HSAMPLE S*/, int loop_count/*S32 loop_count*/)//AIL_set_sample_loop_count //274f70
{
	//AIL_fix();
	bool v3; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v3 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v3)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_sample_loop_count(0x%X,%d)\n", S, loop_count);
	sub_A3C90_set_sample_loop_count(S, loop_count);
	x_DWORD_181C04--;
}

//----- (00094010) --------------------------------------------------------
Bit32u sub_94010_AIL_sample_status(HSAMPLE S)//AIL_sample_status
{
	return SOUND_sample_status(S);
}

Bit32u sub_94010_AIL_sample_status_orig(HSAMPLE S)//AIL_sample_status
{
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v4; // [esp+4h] [ebp-Ch]
	Bit32u result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v4 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v4)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_sample_status(0x%X)\n", S);
	result = sub_A3A00_sample_status(S);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %u\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

void sub_94650_AIL_set_digital_master_volume(x_DWORD *a1, Bit32s master_volume)//AIL_set_digital_master_volume
{
	SOUND_set_master_volume(master_volume);
}

//----- (00094650) --------------------------------------------------------
void sub_94650_AIL_set_digital_master_volume_orig(x_DWORD *a1, Bit32s master_volume)//AIL_set_digital_master_volume
{
	bool v3; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v3 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v3)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_digital_master_volume(0x%X,%d)\n", a1, master_volume);
	sub_A3F70_set_digital_master_volume(a1, master_volume);
	x_DWORD_181C04--;
}

//----- (00095140) --------------------------------------------------------
EOS_callback_type sub_95140_AIL_register_EOS_callback(HSAMPLE S/*HSAMPLE S*/, EOS_callback_type EOS/*AILSAMPLECB EOS*/)//AIL_register_EOS_callback
{
	AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v5; // [esp+4h] [ebp-Ch]
	EOS_callback_type result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v5 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v5)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_register_EOS_callback(0x%X,0x%X)\n", S, EOS);
	result = sub_A3EB0_register_EOS_callback(S, EOS);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = 0x%X\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (000953E0) --------------------------------------------------------
void sub_953E0_AIL_set_sample_user_data(HSAMPLE S/*HSAMPLE S*/, int index/*U32     index*/, int value/* SINTa   value*/)//AIL_set_sample_user_data
{
	AIL_fix();
	//int result; // eax
	bool v4; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v4 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v4)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_sample_user_data(0x%X,%u,%d)\n", S, index, value);
	/*result = */sub_A3F00_set_sample_user_data(S, index, value);
	x_DWORD_181C04--;
	//return result;
}

//----- (00095480) --------------------------------------------------------
int sub_95480_AIL_sample_user_data(HSAMPLE S/*HSAMPLE S*/, int index/*U32     index*/)//AIL_sample_user_data
{
	AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v5; // [esp+4h] [ebp-Ch]
	int result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v5 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v5)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_sample_user_data(0x%X,%u)\n", S, index);
	result = sub_A3F30_sample_user_data(S, index);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %d\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00095710) --------------------------------------------------------
Bit32s sub_95710_AIL_install_MDI_INI(/*int a1,*/ HMDIDRIVER *mdi)//HMDIDRIVER *mdi AIL_install_MDI_INI //276710
{
	//AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v5; // [esp+4h] [ebp-Ch]
	int result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v5 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v5)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_install_MDI_INI(0x%X)\n", mdi);
	result = sub_A78F0_AIL_API_install_MDI_INI(/*a1,*/ mdi);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %d\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00095850) --------------------------------------------------------
HMDIDRIVER sub_95850_AIL_install_MDI_driver_file(char* filename, IO_PARMS *IO)//HMDIDRIVER *mdi AIL_install_MDI_driver_file //276850
{
	//AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v6; // [esp+4h] [ebp-Ch]
	HMDIDRIVER result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v6 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v6)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_install_MDI_driver_file(%s,0x%X)\n", filename, IO);
	result = sub_A77D0_AIL_API_install_MDI_INI(filename, IO);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = 0x%X\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (000959A0) --------------------------------------------------------
int sub_959A0_AIL_uninstall_MDI_driver(HMDIDRIVER mdi/*HMDIDRIVER  mdi*/)//AIL_uninstall_MDI_driver
{
	AIL_fix();
	int result; // eax
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v2)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_uninstall_MDI_driver(0x%X)\n", mdi);
	result = sub_A7970_AIL_API_uninstall_MDI_driver(mdi);
	x_DWORD_181C04--;
	return result;
}

//----- (00095A30) --------------------------------------------------------
HSEQUENCE sub_95A30_AIL_allocate_sequence_handle(HMDIDRIVER mdi)//AIL_allocate_sequence_handle
{
	//AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v4; // [esp+4h] [ebp-Ch]
	HSEQUENCE result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v4 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v4)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_allocate_sequence_handle(0x%X)\n", mdi);
	result = sub_A7B30_AIL_API_allocate_sequence_handle(mdi);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = 0x%X\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00095C00) --------------------------------------------------------
Bit32s sub_95C00_AIL_init_sequence(HSEQUENCE S, Bit8u* start, Bit32s sequence_num, Bit32u track)//AIL_init_sequence
{
	//AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v6; // [esp+4h] [ebp-Ch]
	int result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v6 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v6)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_init_sequence(0x%X,0x%X,%d)\n", S, start, sequence_num);
	result = sub_A7C20_AIL_API_init_sequence(S, start, sequence_num, track);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %d\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00095D50) --------------------------------------------------------
void sub_95D50_AIL_start_sequence(HSEQUENCE S/*HSEQUENCE S*/, Bit32u track)//AIL_start_sequence
{
	//AIL_fix();
	//int *result; // eax
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v2)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_start_sequence(0x%X)\n", S);
	/*result = */sub_A8010_AIL_API_start_sequence(S, track);
	x_DWORD_181C04--;
	//return result;
}


//----- (00095DE0) --------------------------------------------------------
void sub_95DE0_AIL_stop_sequence(HSEQUENCE S/*HSEQUENCE S*/)//AIL_stop_sequence
{
	SOUND_stop_sequence(S->sequence_num);
}
//----- (00095E70) --------------------------------------------------------
void sub_95E70_AIL_resume_sequence(HSEQUENCE S)//AIL_resume_sequence
{
	AIL_fix();
	bool v1; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v1 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v1)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_resume_sequence(0x%X)\n", S);
	sub_A8180_AIL_API_resume_sequence(S);
	x_DWORD_181C04--;
}

//----- (00095F00) --------------------------------------------------------
void sub_95F00_AIL_end_sequence(HSEQUENCE S/*HSEQUENCE S*/)//AIL_end_sequence
{
	//AIL_fix();
	//int result; // eax
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v2)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_end_sequence(0x%X)\n", S);
	/*result = */sub_A8250_AIL_API_end_sequence(S);
	x_DWORD_181C04--;
	//return result;
}

void sub_96030_AIL_set_sequence_volume(HSEQUENCE S, Bit32s volume, Bit32s milliseconds)//AIL_set_sequence_volume
{
	SOUND_set_sequence_volume(volume);
}
/*
//----- (00096030) --------------------------------------------------------
void sub_96030_AIL_set_sequence_volume_orig(HSEQUENCE S, Bit32s volume, Bit32s milliseconds)//AIL_set_sequence_volume
{
	bool v3; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v3 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v3)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_sequence_volume(0x%X,%d,%d)\n", S, volume, milliseconds);
	sub_A8360_AIL_API_set_sequence_volume(S, volume, milliseconds);
	x_DWORD_181C04--;
}
*/
//----- (00096170) --------------------------------------------------------
int sub_96170_AIL_sequence_status(HSEQUENCE S/*HSEQUENCE S*/)//AIL_sequence_status
{
	//AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v4; // [esp+4h] [ebp-Ch]
	int result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v4 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v4)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_sequence_status(0x%X)\n", S);
	result = sub_A8410_AIL_API_sequence_status(S);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %u\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00096670) --------------------------------------------------------
void sub_96670_AIL_set_XMIDI_master_volume(HMDIDRIVER mdi, Bit32s master_volume)//AIL_set_XMIDI_master_volume
{
	SOUND_set_sequence_volume(master_volume);
	/*
	AIL_fix();
	x_DWORD_181C04++;
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24())
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_XMIDI_master_volume(0x%X,%d)\n", mdi, master_volume);
	sub_A84D0_AIL_API_set_XMIDI_master_volume(mdi, master_volume);
	x_DWORD_181C04--;
	*/
}

//----- (000969A0) --------------------------------------------------------
Bit32s sub_969A0_AIL_MDI_driver_type(HMDIDRIVER mdi)//AIL_MDI_driver_type
{
	AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v4; // [esp+4h] [ebp-Ch]
	signed int result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v4 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v4)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_MDI_driver_type(0x%X)\n", mdi);
	result = sub_A7990_AIL_API_MDI_driver_type(mdi);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %d\n", result);
	}
	return result;
}

//----- (00096AE0) --------------------------------------------------------
void sub_96AE0_AIL_set_GTL_filename_prefix(Bit8u* prefix/*char const *prefix*/)//AIL_set_GTL_filename_prefix
{
	//AIL_fix();
	//int result; // eax
	bool v2; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v2 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v2)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_set_GTL_filename_prefix(%s)\n", prefix);
	sub_A7AA0_AIL_API_set_GTL_filename_prefix(prefix);
	x_DWORD_181C04--;
	//return result;
}

//----- (00097330) --------------------------------------------------------
int sub_97330_AIL_sequence_position(x_DWORD *S/*HSEQUENCE S*/, x_DWORD *beat/*FAR *beat*/, x_DWORD *measure/*FAR *measure*/)//AIL_sequence_position
{
	AIL_fix();
	int result; // eax
	int i; // [esp+0h] [ebp-8h]
	int j; // [esp+0h] [ebp-8h]
	bool v6; // [esp+4h] [ebp-4h]

	x_DWORD_181C04++;
	v6 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v6)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_sequence_position(0x%X,0x%X,0x%X)\n", S, beat, measure);
	result = sub_A8830(S, beat, measure);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8))
	{
		result = sub_A16A2();
		if (!result)
		{
			for (i = 0; i < 0xE; i++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
			for (j = 1; j < x_DWORD_181C04; j++)
				dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
			/*result = */dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %d:%d\n", *measure + 1, *beat + 1);
		}
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00097480) --------------------------------------------------------
x_DWORD *sub_97480_AIL_branch_index(HSEQUENCE S/*HSEQUENCE S*/, int marker/*U32 marker*/)//AIL_branch_index
{
	AIL_fix();
	x_DWORD *result; // eax
	bool v3; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v3 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v3)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_branch_index(0x%X,%u)\n", S, marker);
	result = sub_A8900(S, marker);
	x_DWORD_181C04--;
	return result;
}

//----- (00097670) --------------------------------------------------------
xCALLBACK sub_97670_AIL_register_trigger_callback(HSEQUENCE S/*HSEQUENCE S*/, xCALLBACK callback/*AILTRIGGERCB   callback*/)//AIL_register_trigger_callback
{
	//AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v5; // [esp+4h] [ebp-Ch]
	xCALLBACK result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v5 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v5)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_register_trigger_callback(0x%X,0x%X)\n", S, callback);
	result = sub_A8A20_AIL_API_trigger_callback(S, callback);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = 0x%X\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00097A60) --------------------------------------------------------
int sub_97A60_AIL_register_event_callback(int mdi/*HMDIDRIVER mdi*/, int callback/*AILEVENTCB callback*/)//AIL_register_event_callback
{
	AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v5; // [esp+4h] [ebp-Ch]
	int v6; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v5 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v5)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_register_event_callback(0x%X,0x%X)\n", mdi, callback);
	v6 = sub_A8AE0(mdi, callback);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = 0x%X\n", v6);
	}
	x_DWORD_181C04--;
	return v6;
}

//----- (00097BB0) --------------------------------------------------------
int sub_97BB0_AIL_register_timbre_callback(int mdi/*HMDIDRIVER mdi*/, int callback/*AILTIMBRECB callback*/)//AIL_register_timbre_callback
{
	AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v5; // [esp+4h] [ebp-Ch]
	int result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04++;
	v5 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v5)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_register_timbre_callback(0x%X,0x%X)\n", mdi, callback);
	result = sub_A8B20(mdi, callback);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = 0x%X\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (00097F90) --------------------------------------------------------
int sub_97F90_AIL_lock_channel(x_DWORD *mdi/*HMDIDRIVER mdi*/)//AIL_lock_channel
{
	AIL_fix();
	int i; // [esp+0h] [ebp-10h]
	int j; // [esp+0h] [ebp-10h]
	bool v4; // [esp+4h] [ebp-Ch]
	int result; // [esp+Ch] [ebp-4h]

	x_DWORD_181C04--;
	v4 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v4)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_lock_channel(0x%X)\n", mdi);
	result = sub_A8BF0(mdi);
	if (x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2())
	{
		for (i = 0; i < 0xE; i++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, " \0");
		for (j = 1; j < x_DWORD_181C04; j++)
			dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "\0xfa\0");
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "Result = %d\n", result);
	}
	x_DWORD_181C04--;
	return result;
}

//----- (000980D0) --------------------------------------------------------
int sub_980D0_AIL_release_channel(x_DWORD *mdi/*HMDIDRIVER mdi*/, int channel/*S32 channel*/)//AIL_release_channel
{
	AIL_fix();
	int result; // eax
	bool v3; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v3 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v3)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_release_channel(0x%X,%d)\n", mdi, channel);
	result = sub_A8EA0(mdi, channel);
	x_DWORD_181C04--;
	return result;
}

//----- (00098170) --------------------------------------------------------
int sub_98170_AIL_map_sequence_channel(x_DWORD *S/*HSEQUENCE S*/, int seq_channel/*S32 seq_channel*/, int new_channel/*S32 new_channel*/)//AIL_map_sequence_channel
{
	AIL_fix();
	int result; // eax
	bool v4; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v4 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v4)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_map_sequence_channel(0x%X,%d,%d)\n", S, seq_channel, new_channel);
	result = sub_A9080(S, seq_channel, new_channel);
	x_DWORD_181C04--;
	return result;
}

//----- (00098360) --------------------------------------------------------
void sub_98360_AIL_send_channel_voice_message(HMDIDRIVER mdi, HSEQUENCE S, Bit32s status, Bit32s data_1, Bit32s data_2)//AIL_send_channel_voice_message // 279360
{
	AIL_fix();
	bool v6; // [esp+0h] [ebp-4h]

	x_DWORD_181C04++;
	v6 = x_DWORD_181BF4 && (x_DWORD_181C04 == 1 || x_DWORD_181BF8) && !sub_A16A2() && sub_916F0_sound_proc24();
	if (v6)
		dbgfprintf(x_DWORD_181BF0_AIL_debugfile, "AIL_send_channel_voice_message(0x%X,0x%X,0x%X,0x%X,0x%X)\n", mdi, S, status, data_1, data_2);
	sub_A9140_AIL_API_send_channel_voice_message(mdi, S, status, data_1, data_2);
	x_DWORD_181C04--;
}

//----- (000986A0) --------------------------------------------------------
bool sub_986A0_unlock_linear_region()//2796a0
{
	AIL_fix();
	bool result; // eax

	if (x_DWORD_E39BC)
	{
		// FIXME: types
		// result = sub_9D650((unsigned int)sub_915A0_sound_proc23, (unsigned int)sub_986A0_unlock_linear_region);
		x_DWORD_E39BC = 0;
	}
	return result;
}

//----- (000986E0) --------------------------------------------------------
void sub_986E0()//2796e0
{
	sub_99C90();
	sub_99C10_sound_proc4();
	if (x_BYTE_E39B8)
		sub_91420();
}

void sub_98709_create_index_dattab_power(Bit8u* tabbuffer, Bit8u* tabbufferend, Bit8u* datbuffer, posistruct* dattabindex)//279709
{
  int length = (tabbufferend - tabbuffer) / 6;
  for (int i = 0; i < length; i++)
  {
    int index = *reinterpret_cast<uint32_t*>(tabbuffer + 6*i);
    dattabindex[i].data = (datbuffer + index);
    dattabindex[i].width = tabbuffer[6 * i + 4] * 2;
    dattabindex[i].height = tabbuffer[6 * i + 5] * 2;
  }
}

void sub_98709_create_index_dattab_power_add(Bit8u* tabbuffer, Bit8u* tabbufferend, Bit8u* datbuffer, posistruct* dattabindex,int add)//279709
{
  int length = (tabbufferend - (tabbuffer+add)) / 6;
	for (int i = 0; i < length; i++)
	{
    int index = *reinterpret_cast<uint32_t*>((tabbuffer+add) + 6*i);
    dattabindex[i].data = (datbuffer + index);
		dattabindex[i].width = (tabbuffer + add)[6 * i + 4] * 2;
		dattabindex[i].height = (tabbuffer + add)[6 * i + 5] * 2;
	}
}

void sub_9874D_create_index_dattab(Bit8u* tabbuffer, Bit8u* tabbufferend, Bit8u* datbuffer, posistruct* dattabindex)//27974d
{
  int length = (tabbufferend - tabbuffer) / 6;
  for (int i = 0;i < length; i++)
  {
    int index = *reinterpret_cast<uint32_t*>(tabbuffer + 6*i);
    dattabindex[i].data = (datbuffer + index);
    dattabindex[i].width = tabbuffer[6 * i + 4];
    dattabindex[i].height = tabbuffer[6 * i + 5];
  }
}

void sub_9874D_create_index_dattab_add(Bit8u* tabbuffer, Bit8u* tabbufferend, Bit8u* datbuffer, posistruct* dattabindex,int add)//27974d
{
  int length = (tabbufferend - (tabbuffer+add)) / 6;
	for (int i = 0; i < length; i++)
	{
    int index = *reinterpret_cast<uint32_t*>((tabbuffer+add) + 6*i);
    dattabindex[i].data = (datbuffer + index);
		dattabindex[i].width = (tabbuffer + add)[6 * i + 4];
		dattabindex[i].height = (tabbuffer + add)[6 * i + 5];
	}
}

void sub_99A77_create_index_dattab_div(Bit8u* tabbuffer, Bit8u* tabbufferend, Bit8u* datbuffer, posistruct* dattabindex)//280a77
{
  int length = (tabbufferend - tabbuffer) / 6;
  for (int i = 0; i < length; i++)
  {
		dattabindex[i].data = (Bit8u*)(*(Bit32u*)(tabbuffer + 6 * i))/* + (Bit32s)datbuffer*/;//fixed
    dattabindex[i].width = tabbuffer[6 * i + 4] / 2;
    dattabindex[i].height = tabbuffer[6 * i + 5] / 2;
  }
}

void sub_99AEB_create_index_dattab_minus(Bit8u* tabbuffer, Bit8u* tabbufferend, Bit8u* datbuffer, posistruct* dattabindex)//280aeb
{
  int length = (tabbufferend - tabbuffer) / 6;
  for (int i = 0; i < length; i++)
  {
		dattabindex[i].data = (Bit8u*)(*(Bit32u*)(tabbuffer + 6 * i))/* + (Bit32s)datbuffer*/;//fixed
    dattabindex[i].width = tabbuffer[6 * i + 4];
    dattabindex[i].height = tabbuffer[6 * i + 5];
  }
}



//----- (00098790) --------------------------------------------------------
void sub_98790(uint16_t a1, uint8_t a2)//279790
{
	if (x_BYTE_E37FC_music && x_BYTE_E37FD && x_WORD_E3802 && a2 <= 0x7Fu && sub_96170_AIL_sequence_status(x_DWORD_180C78) != 2)
		sub_96030_AIL_set_sequence_volume(x_DWORD_180C78, a2, a1);
}

//----- (00098817) --------------------------------------------------------
FILE* sub_98817_open(const char* pathname, int __pmode)//279817
{
	FILE* file; // ST10_4


	if (__pmode == 0x222)
	{
		file = x_creat(pathname, 0x1c0);
		//x_setmode(v2, 0x200);
		x_close(file);
	}
	return x_sopen(pathname, __pmode, 0x40);
}

//----- (00098882) --------------------------------------------------------
int sub_98882_close(FILE* a1)//279882
{
	return x_close(a1);
}

//----- (000988A7) --------------------------------------------------------
size_t sub_988A7_read(FILE* a1, Bit8u* a2, int a3)//2798a7
{

	return x_read2(a1, a2, a3);
}

//----- (0009891E) --------------------------------------------------------
int sub_9891E_seek(FILE* filedecs, int position, char type)//27991e
{
	return x_lseek(filedecs, position, type);
}





//----- (00098AE9) --------------------------------------------------------
int16_t sub_98AE9(int16_t *a1, int a2)//279ae9
{
	int v2; // edx
	int16_t *v3; // esi
	int16_t *v4; // et0
	int16_t v5; // ax
	int16_t *v6; // esi
	int16_t v7; // bx
	int16_t v8; // ax
	int16_t v9; // cx
	int v10; // esi
	int16_t result; // ax
	uint8_t v12; // cl
	int16_t v13; // ax
	char v14; // cl

	//fix it
	v12 = 0;
	v14 = 0;
	//fix it

	v4 = a1;
	v2 = a2;
	v3 = v4;
	do
	{
		v5 = *v3;
		v6 = v3 + 1;
		v7 = x_WORD_E3B4C & v5;
		v8 = *v6;
		v3 = v6 + 1;
	} while (v8 != v7);
	v9 = v3[30];
	v10 = v2;
	result = sub_98B2C(HIBYTE(v9), v2);
	if (v12 >= 2u)
	{
		v13 = sub_98B2C(v12 - 1, v10);
		result = (1 << v14) | v13;
	}
	return result;
}

//----- (00098B2C) --------------------------------------------------------
int16_t sub_98B2C(uint8_t a1, int a2)//180804 279b2c
{
	uint8_t v2; // cl
	uint16_t v3; // ax
	uint16_t v4; // bx
	char v5; // ch
	int16_t v7; // [esp-4h] [ebp-4h]

	v2 = a1;//mov cl,al
	v3 = x_WORD_E3B4E;//ma byt 02, ale je 0//ax
	v4 = x_WORD_E3B4C;//ma byt 10bc, ale je 0//bx //push
	v7 = v4 & ((1 << v2) - 1);
	v5 = x_BYTE_E3B51 - v2;//je nula//ch-cl
	if (x_BYTE_E3B51 < v2)
	{
		v4 = __ROR2__(x_WORD_E3B4E & ((1 << x_BYTE_E3B51) - 1), x_BYTE_E3B51) |
			((uint16_t)x_WORD_E3B4C >> x_BYTE_E3B51);
		v3 = *(x_WORD *)(a2 + 2);
		v2 -= x_BYTE_E3B51;
		v5 = 16 - v2;
	}
	x_WORD_E3B4E = v3 >> v2;
	x_WORD_E3B4C = __ROR2__(v3 & ((1 << v2) - 1), v2) | (v4 >> v2);
	x_BYTE_E3B51 = v5;
	return v7;
}

//----- (00098BAF) --------------------------------------------------------
char sub_98BAF_read_huftable(int a1)//279baf
{
	int *v1; // edi
	Bit16u v2; // ax
	int v3; // ecx
	int v4; // ecx
	int *v5; // esi
	x_WORD *v6; // edi
	uint16_t v7; // bx
	uint16_t v8; // dx
	x_WORD *v9; // edi
	int16_t v10; // bx
	uint8_t v11; // cf
	int16_t v12; // ax
	uint8_t v13; // tt
	uint8_t v14; // tt
	int16_t v15; // ax
	int16_t v17; // [esp-24h] [ebp-28h]
	uint16_t v18; // [esp-22h] [ebp-26h]
	uint16_t v19; // [esp-20h] [ebp-24h]
	int *v20; // [esp-1Eh] [ebp-22h]
	int16_t v21; // [esp-1Ah] [ebp-1Eh]
	int v22; // [esp-18h] [ebp-1Ch]
	int v23; // [esp-14h] [ebp-18h]
	x_WORD *v24; // [esp-4h] [ebp-8h]

	//fix it
	v3 = 0;
	v24 = 0;

	//Bit16u ssedi[100];
	Bit32u ssedi = 0;
	//fix it

	v1 = &v23;
	v2 = sub_98B2C(5u, a1);
	if (v2)
	{
		v22 = v2;
		do
		{
			v2 = sub_98B2C(4u, a1);
			v1[ssedi++] = v2;
			/*
			*(x_BYTE *)v1 = v2;
			v1 = (int *)((char *)v1 + 1);*/
		} while (v3 != 1);
		v4 = v22;
		v22 = a1;
		v5 = &v23;
		v6 = v24;
		LOBYTE(v2) = 1;
		v7 = 0;
		v8 = -32768;
		do
		{
			v21 = v4;
			v20 = v5;
			do
			{
				if ((x_BYTE)v2 == *(x_BYTE *)v5)
				{
					v19 = v2;
					v18 = v7;
					v17 = v4;
					*v6 = (1 << v2) - 1;
					v9 = v6 + 1;
					v10 = v7 >> (16 - v2);
					LOBYTE(v4) = v2;
					v12 = 0;
					v11 = 0;
					do
					{
						v13 = __CFRCR__(v10, v11);
						v10 = __RCR__(v10, v11);
						v11 = v13;
						v14 = __CFRCL__(v12, v13);
						v12 = __RCL__(v12, v11);
						v11 = v14;
						--v4;
					} while (v4);
					*v9 = v12;
					v6 = v9 + 1;
					LOBYTE(v15) = (char *)v5 - (char *)&v17 - 16;
					HIBYTE(v15) = *(x_BYTE *)v5;
					v6[30] = v15;
					LOWORD(v4) = v17;
					v2 = v19;
					v7 = v8 + v18;
				}
				v5 = (int *)((char *)v5 + 1);
				--v4;
			} while (v4);
			v5 = v20;
			LOWORD(v4) = v21;
			v8 >>= 1;
			LOBYTE(v2) = v2 + 1;
		} while ((x_BYTE)v2 != 17);
	}
	return v2;
}

//----- (00098C48) --------------------------------------------------------
signed int sub_98C48_open_nwrite_close(const char* filename, Bit8u* buffer, Bit32u count)//279c48
{
	int result; // ST14_4
	FILE* file; // [esp+4h] [ebp-8h]

	file = sub_98817_open(filename, 546);
	if (file == NULL)
		return -1;//mozna null
	result = sub_98CAA_write(file, buffer, count);
	sub_98882_close(file);
	return result;
}

//----- (00098CAA) --------------------------------------------------------
size_t sub_98CAA_write(FILE* a1, Bit8u* a2, Bit32u a3)//279caa
{
	return x_write2(a1, a2, a3);
}

//----- (0009937E) --------------------------------------------------------
int sub_9937E_set_video_mode(int16_t a1)//27a37e
{
	/*int result; // eax
	int v2; // [esp+0h] [ebp-78h]
	int v3; // [esp+18h] [ebp-60h]
	int v4; // [esp+1Ch] [ebp-5Ch]
	int16_t v5; // [esp+22h] [ebp-56h]
	int16_t v6; // [esp+24h] [ebp-54h]
	char v7; // [esp+34h] [ebp-44h]
	int v8; // [esp+50h] [ebp-28h]
	int v9; // [esp+54h] [ebp-24h]
	int *v10; // [esp+64h] [ebp-14h]
	char v11; // [esp+6Ch] [ebp-Ch]

	memset(&v2, 0, 50);
	v5 = (unsigned int)x_DWORD_181C40_vga_init_buffer >> 4;
	v6 = (unsigned int)x_DWORD_181C40_vga_init_buffer >> 4;
	v2 = 0;
	v4 = 20225;
	v3 = a1;
	memset(&v8, 0, 28);
	memset(&v7, 0, 28);
	memset(&v11, 0, 12);
	segread((SREGS*)&v11);
	v8 = 0x300;
	v9 = 0x10;
	v10 = &v2;
	int386x(0x31, (REGS*)&v8, (REGS*)&v7, (SREGS*)&v11);//Set video mode
	x_WORD_181C44 = *(uint8_t *)(x_DWORD_181C40_vga_init_buffer + 4) + (*(uint8_t *)(x_DWORD_181C40_vga_init_buffer + 5) << 8);
	x_WORD_E3BA6 = *(uint8_t *)(x_DWORD_181C40_vga_init_buffer + 16) + (*(uint8_t *)(x_DWORD_181C40_vga_init_buffer + 17) << 8);
	x_WORD_E3BA8 = *(uint8_t *)(x_DWORD_181C40_vga_init_buffer + 18) + (*(uint8_t *)(x_DWORD_181C40_vga_init_buffer + 19) << 8);
	HIWORD(result) = HIWORD(x_DWORD_181C40_vga_init_buffer);
	LOWORD(result) = *(uint8_t *)(x_DWORD_181C40_vga_init_buffer + 20);
	x_WORD_E3BAA = (uint8_t)result + (*(uint8_t *)(x_DWORD_181C40_vga_init_buffer + 21) << 8);
	return result;*/
	return 0;//fix it
}

//----- (000994BA) --------------------------------------------------------
int sub_994BA_cursor_move(int16_t a1)//27a4ba
{
	/*char v2; // [esp+0h] [ebp-38h]
	char v3; // [esp+1Ch] [ebp-1Ch]
	char v4; // [esp+1Dh] [ebp-1Bh]
	int16_t v5; // [esp+20h] [ebp-18h]

	memset(&v3, 0, 28);
	memset(&v2, 0, 28);
	v4 = 0x4f;
	v3 = 2;
	v5 = a1;
	int386(0x10, (REGS*)&v3, (REGS*)&v2);//Set cursor position
	return sub_9937E_set_video_mode(a1);
	*/
	return 0;//fix it
}

//----- (0009951B) --------------------------------------------------------
signed int sub_9951B(int16_t a1)//27a51b //fix graphics
{
	signed int result; // eax

	x_WORD_E3BA4 = a1;
	if (a1 > 5 || a1 < 0)
	{
		/*__outx_BYTE(0x3C8u, 0);
		__outx_BYTE(0x3C9u, 0x3Fu);
		__outx_BYTE(0x3C9u, 0);
		__outx_BYTE(0x3C9u, 0);*/
	}
	//fix it:__asm { int     10h; - VIDEO - VESA SuperVGA BIOS -  VESA SuperVGA BIOS - CPU VIDEO MEMORY CONTROL }
	result = 20229;
	//fix it:__asm { int     10h; - VIDEO - VESA SuperVGA BIOS -  VESA SuperVGA BIOS - CPU VIDEO MEMORY CONTROL }
	return result;
}

//----- (000995B0) --------------------------------------------------------
int sub_995B0_test_vga_driver() //27A5B0
{

	//int v1; // [esp+0h] [ebp-7Ch]
	//int v2; // [esp+10h] [ebp-6Ch]
	//int v3; // [esp+1Ch] [ebp-60h]
	/*int16_t v4; // [esp+22h] [ebp-5Ah]
	int16_t v5; // [esp+24h] [ebp-58h]
	int v6; // [esp+34h] [ebp-48h]
	int v7; // [esp+38h] [ebp-44h]
	int *v8; // [esp+48h] [ebp-34h]
	char v9; // [esp+50h] [ebp-2Ch]
	char v10; // [esp+6Ch] [ebp-10h]

	memset(&v1, 0, 50);//3551A8
	v4 = (unsigned int)x_DWORD_181C40_vga_init_buffer >> 4;//2C03
	v5 = (unsigned int)x_DWORD_181C40_vga_init_buffer >> 4;//2C03

	//ebp-7c=0 //dword
	//ebp-60=4f//dword
	//ebp-6c=1//dword
	//v1 = 0;
	//v3 = 20224;
	//v2 = 257;
	memset(&v6, 0, 28);//3551dc
	memset(&v9, 0, 28);//3551f8
	memset(&v10, 0, 12);//355214
	segread((SREGS*)&v10);
	v6 = 0x300;
	v7 = 0x10;
	v8 = &v1;
	int386x(0x31, (REGS*)&v6, (REGS*)&v9, (SREGS*)&v10);//?video*/
	//fix! initialize video

	for (int i = 0;i < 20;i++)x_DWORD_181C40_vga_init_buffer[i] = 0x0;//fixed
	memcpy((char*)x_DWORD_181C40_vga_init_buffer, "VESA\0", 5);//fixed
	x_DWORD_181C40_vga_init_buffer[5] = 0x02;//fixed
	x_DWORD_181C40_vga_init_buffer[6] = 0x67;//fixed
	x_DWORD_181C40_vga_init_buffer[7] = 0x2f;//fixed
	x_DWORD_181C40_vga_init_buffer[9] = 0xc0;//fixed
	x_DWORD_181C40_vga_init_buffer[14] = 0xab;//fixed
	x_DWORD_181C40_vga_init_buffer[15] = 0x2e;//fixed
	x_DWORD_181C40_vga_init_buffer[17] = 0xc0;//fixed
	x_DWORD_181C40_vga_init_buffer[18] = 0x20;//fixed

	return strncmp((char*)x_DWORD_181C40_vga_init_buffer, "VESA", 4);
}

//----- (00099970) --------------------------------------------------------
void sub_99970(char a1, uint8_t a2)//27a970
{
	if (x_BYTE_E3819 && x_BYTE_E37FC_music && x_BYTE_E37FD && x_WORD_E3802 && sub_96170_AIL_sequence_status(x_DWORD_180C78) != 2 && x_BYTE_E3817 != a1)
	{
		if (x_BYTE_E3818)
			;// sub_92DC0_AIL_release_timer_handle(x_DWORD_180C80);
		x_BYTE_E3817 = a1;
		x_BYTE_E381A = -x_BYTE_E381A;
		x_BYTE_E3818 = 1;
		if (a2 <= 4u && a2 >= 1u)
		{
			//x_DWORD_180C80 = sub_92600_AIL_register_timer(sub_99830);
			//sub_92930_AIL_set_timer_frequency(x_DWORD_180C80, 30 * a2);
			//sub_92BA0_AIL_start_timer(x_DWORD_180C80);
		}
		else
		{
			//x_DWORD_180C80 = sub_92600_AIL_register_timer(sub_99830);
			//sub_92930_AIL_set_timer_frequency(x_DWORD_180C80, 0x1Eu);
			//sub_92BA0_AIL_start_timer(x_DWORD_180C80);
		}
	}
}



//----- (00099C10) --------------------------------------------------------
void sub_99C10_sound_proc4()//27ac10
{
	if (x_BYTE_E379A)
	{
		sub_8D8F0_sound_proc3_endsample();
		if (!x_BYTE_E37FE)
			sub_919C0();
		if (x_DWORD_E37A0_sound_buffer2)
		{
			sub_83E80_freemem4(x_DWORD_E37A0_sound_buffer2);
			x_DWORD_E37A4_sound_buffer3 = 0;
		}
		if (x_DWORD_E37A8_sound_buffer1)
			sub_83E80_freemem4(x_DWORD_E37A8_sound_buffer1);
		x_BYTE_E3798_sound_active2 = 0;
		x_BYTE_E3799_sound_card = 0;
		x_BYTE_E379A = 0;
	}
}

//----- (00099C90) --------------------------------------------------------
void sub_99C90()//27ac90
{
	if (x_BYTE_E37FE)
	{
		if (x_WORD_E3802)
		{
			sub_95DE0_AIL_stop_sequence((HSEQUENCE)x_DWORD_180C78);
			sub_95F00_AIL_end_sequence(x_DWORD_180C78);
			x_WORD_E3802 = 0;
		}
		if (x_BYTE_E3815 == 1)
			sub_9FA80();
		if (!x_BYTE_E379A)
			sub_919C0();
		if (x_DWORD_E3808_music_header)
		{
			sub_83E80_freemem4((Bit8u*)x_DWORD_E3808_music_header);
			x_DWORD_E380C = 0;
		}
		if (x_DWORD_E3810_music_data)
			sub_83E80_freemem4(x_DWORD_E3810_music_data);
		x_BYTE_E37FC_music = 0;
		x_BYTE_E37FD = 0;
		x_BYTE_E37FE = 0;
	}
}

//----- (00099E8E) --------------------------------------------------------
signed int sub_99E8E(uint8_t *a1, uint8_t **a2, signed int a3, int a4)//27ae8e
{
	signed int v4; // edi
	uint8_t *i; // ebx
	uint8_t v6; // al
	signed int result; // eax
	uint8_t v8; // cl
	unsigned int v9; // esi
	int v10; // eax
	unsigned int v11; // edx
	uint8_t *v12; // [esp+0h] [ebp-1Ch]
	char v13; // [esp+4h] [ebp-18h]
	uint8_t v14; // [esp+8h] [ebp-14h]

	v4 = a3;
	if (a2)
		*a2 = a1;
	for (i = a1; IsTable[(uint8_t)(*i + 1)] & 2; i++)
		;
	v14 = *i;
	if (*i == 43 || *i == 45)
		++i;
	if (!a3)
	{
		if (*i != 48 || (v6 = i[1], v6 != 120) && v6 != 88)
		{
			if (*i == 48)
				v4 = 8;
			else
				v4 = 10;
		}
		else
		{
			v4 = 16;
		}
	}
	if (v4 >= 2 && v4 <= 36)
	{
		if (v4 == 16 && *i == 48)
		{
			v8 = i[1];
			if (v8 == 120 || v8 == 88)
				i += 2;
		}
		v12 = i;
		v9 = 0;
		v13 = 0;
		while (1)
		{
			v10 = sub_99FF5(*i);
			if (v10 >= v4)
				break;
			v11 = v9;
			v9 = v10 + v4 * v9;
			if (v9 < v11)
				v13 = 1;
			++i;
		}
		if (i == v12)
			i = a1;
		if (a2)
			*a2 = i;
		if (a4 == 1 && v9 >= 0x80000000 && (v9 != 0x80000000 || v14 != 45))
			v13 = 1;
		if (v13)
		{
			//_set_errno(14);
			if (a4)
			{
				if (v14 == 45)
					result = 2147483648;
				else
					result = 0x7FFFFFFF;
			}
			else
			{
				result = -1;
			}
		}
		else
		{
			if (v14 == 45)
				v9 = 0 - v9;
			result = v9;
		}
	}
	else
	{
		//_set_errno(13);
		result = 0;
	}
	return result;
}

//----- (00099FF0) --------------------------------------------------------
signed int sub_99FF0(char* a1, uint8_t **a2, signed int a3)//27aff0
{
	return sub_99E8E((Bit8u*)a1, a2, a3, 1);
}

//----- (00099FF5) --------------------------------------------------------
int sub_99FF5(uint8_t a1)//27aff5
{
	uint8_t v2; // al

	if (a1 >= 0x30u && a1 <= 0x39u)
		return a1 - 48;
	v2 = x_tolower(a1);
	if (v2 >= 0x61u && v2 <= 0x69u)
		return v2 - 87;
	if (v2 >= 0x6Au && v2 <= 0x72u || v2 >= 0x73u && v2 <= 0x7Au)
		return v2 - 87;
	return 37;
}

//----- (0009A0FC) --------------------------------------------------------
void sub_9A0FC_wait_to_screen_beam()//27B0fc
{
	/*uint8_t result; // al

	do
	  result = __inx_BYTE(0x3DAu);
	while ( !(result & 8) );
	return result;*/
	mydelay(10);
}

//----- (0009A10A) --------------------------------------------------------
signed int /*__fastcall*/ sub_9A10A_check_keyboard(/*signed int result*/)//27B10a
{
	if (x_DWORD_E4CA4)
		return 1;
	return VGA_check_standart_input_status();
	//fix it:__asm { int     21h; DOS - CHECK STANDARD INPUT STATUS }
	/*
	on return:
	  AL = 00 if no character available
		 = FF if character available


	  - checks STDIN for available characters
	  - character is not returned
	  - if Ctrl-Break is detected INT 23 is executed
	*/
	return 0;//fix it
}

//----- (0009A128) --------------------------------------------------------
void sub_9A128_copy_screen_320(void* source, void* desc, Bit16u countlines)//27B128
{
	qmemcpy(desc, source, 320 * countlines);
}

//----- (0009A144) --------------------------------------------------------
void sub_9A144_copy_screen_640(void* source, void* desc, Bit16u countlines)//27B144
{
	qmemcpy(desc, source, 640 * countlines);
}

//----- (0009A230) --------------------------------------------------------
int sub_9A230_set_x_WORD_E37B4(int a1)//27B230
{
	int result; // eax

	result = a1;
	if ((uint16_t)a1 < 0x336u)
	{
		if ((uint16_t)a1 < 0x320u)
		{
			if (!(x_WORD)a1)
				x_WORD_E37B4 = 0;
		}
		else if ((uint16_t)a1 <= 0x320u)
		{
			x_WORD_E37B4 = 800;
		}
		else if ((x_WORD)a1 == 811)
		{
			x_WORD_E37B4 = 811;
		}
	}
	else if ((uint16_t)a1 <= 0x336u)
	{
		x_WORD_E37B4 = 822;
	}
	else if ((uint16_t)a1 < 0x656u)
	{
		if ((x_WORD)a1 == 1611)
			x_WORD_E37B4 = 1611;
	}
	else if ((uint16_t)a1 <= 0x656u)
	{
		x_WORD_E37B4 = 1622;
	}
	else if ((x_WORD)a1 == 1644)
	{
		x_WORD_E37B4 = 1644;
	}
	return result;
}

//----- (0009A2F5) --------------------------------------------------------
Bit8u* sub_9A2F5_freemem_of_begin_buffer(Pathstruct path)//27B2f5
{
	Bit8u* result; // eax
	//2bac30
	result = *path.var28_begin_buffer;//fix it 2bac30
	//result = 0;//fix it
	if (result)
	{
		sub_83E80_freemem4(*path.var28_begin_buffer);
		result = *path.var28_begin_buffer;
		*result = 0;
	}
	return result;
}

//----- (0009A32D) --------------------------------------------------------
signed int sub_9A32D_malloc_open_unpack(Pathstruct path)//27B32d
{
	sub_9A2F5_freemem_of_begin_buffer(path);
	if (path.path[0] == 0x2A)//fix
	{ // path starts with a wildcard character *
		if (path.var40_alloc_type & 1)
		{
			*(path.var28_begin_buffer) = (Bit8u*)malloc(path.var36_size_buffer);
			memset(*(path.var28_begin_buffer), 0, path.var36_size_buffer);
		}
		else
		{
			*(path.var28_begin_buffer) = (Bit8u*)malloc(path.var36_size_buffer);
			memset(*(path.var28_begin_buffer), 0, path.var36_size_buffer);
		}
		if (!(*(path.var28_begin_buffer)))
			return 0;
	}
	else
	{
		path.var36_size_buffer = (int)sub_AB9E1_get_file_unpack_size(path.path);
		if (path.var36_size_buffer <= 0)
			return 0;
		if (path.var40_alloc_type & 1) // TODO: remove this alloc_type and all the special handling surround it
		{
			*(path.var28_begin_buffer) = (Bit8u*)malloc(path.var36_size_buffer);//asi init a malloc bufferu
			memset(*(path.var28_begin_buffer), 0, path.var36_size_buffer);
		}
		else
		{
			*(path.var28_begin_buffer) = (Bit8u*)malloc(path.var36_size_buffer);//asi init a malloc bufferu
			memset(*(path.var28_begin_buffer), 0, path.var36_size_buffer);
		}
		if (!(*(path.var28_begin_buffer)))
			return -1;
		if (sub_53E60_readfile_and_decompress(path.path, path.var28_begin_buffer) != path.var36_size_buffer)
		{
			path.var28_begin_buffer = 0;
			path.var32_end_buffer = 0;
			path.var36_size_buffer = 0;
			return 0;
		}
	}
	if (path.var32_end_buffer)
		(*path.var32_end_buffer) = (*path.var28_begin_buffer) + path.var36_size_buffer;//fix ma byt 1
	return 1;
}

//----- (0009AD16) --------------------------------------------------------
int sub_9AD16_free_mem_pool(void* a1)//27Bd16
{
	free(a1);
	return 1;
}

//----- (0009AD9C) --------------------------------------------------------
int sub_9AD9C(int a1)//27Bd9c
{
	return 100 * a1;
}

//----- (0009ADB4) --------------------------------------------------------
int sub_9ADB4(int a1)//27Bdb4
{
	return 100 * a1 / 10;
}

//----- (0009AE04) --------------------------------------------------------
bool sub_9AE04(/*int eax0,*/ int edx0, int a3, int a1, int a2)//27Be04
{
	return j___clock() - a1 >= a2;
}

//----- (0009AE90) --------------------------------------------------------
char sub_9AE90(int eax0, int edx0, int ebx0, int *a1, x_BYTE *a2, int a3, int a4)//27Be90
{
	x_BYTE *v7; // esi
	int v8; // ebp
	int v9; // ebx
	int v10; // eax

	v7 = a2;
	v8 = j_j___clock(eax0, edx0, ebx0);
	v9 = 0;
	do
	{
		v10 = sub_9C9D0(*a1);
		if (!v10)
		{
			v9++;
			*v7 = sub_9C938((x_DWORD *)*a1);
			v10 = a3;
			v7++;
			if (v9 == a3)
				return 0;
		}
	} while (!sub_9AE04(/*v10,*/ a4, v9, v8, a4));
	return 3;
}

//----- (0009AEEC) --------------------------------------------------------
void sub_9AEEC(x_DWORD **a1, char *a2)//27Beec
{
	char *v2; // ebx
	char v3; // ST04_1

	v2 = a2;
	if (x_DWORD_E3DE8)
		myprintf("Writing %s\n");
	while (1)
	{
		//JUMPOUT((x_WORD)*v2, 0, (int*)&loc_9AEE8);
		//sub_9AE90(int eax0, int edx0, int ebx0, int *a1, x_BYTE *a2, int a3, int a4)
		//	sub_9AE90((x_WORD)*v2, 0, 0, 0, 0, 0, 0);//fix it
		//fix if
		v3 = *v2++;
		sub_9C810(*a1, v3);
	}
}

//----- (0009AFC4) --------------------------------------------------------
char sub_9AFC4(int a1, int a2, int a3, int *a4, int a5)//27Bfc4
{
	int v5; // edi
	int v6; // eax
	int v7; // edx

	//fix it
	v7 = 0;
	//fix it

	v5 = j_j___clock(a1, a2, (x_DWORD)a3);
	do
	{
		v6 = sub_9C9D0(*a4);
		if (!v6)
		{
			v6 = sub_9C938((x_DWORD *)*a4);
			a3 = v6;
			if (x_DWORD_E3DE8)
				/*v6 = */myprintf("Response: %c\n");
			if (a3 == 79)
				return 0;
			if (a3 == 69)
				return 8;
		}
	} while (!sub_9AE04(/*v6,*/ v7, a3, v5, a5));
	return 3;
}

//----- (0009B038) --------------------------------------------------------
char sub_9B038(int *a1, char *a2, int a3)//27C038
{
	int v3; // eax
	int v4; // edx

	//fix it
	v3 = 0;
	v4 = 0;
	//fix it

	sub_9AEEC((x_DWORD **)a1, a2);
	// FIXME: types
	// return sub_9AFC4(v3, v4, (int)a1, a1, a3);
	return '\0';
}

//----- (0009B234) --------------------------------------------------------
int sub_9B234(int *a1)//27C234
{
	int result; // eax

	if (*a1)
	{
		//fix  sub_9C58C(*a1);
		allert_error();
		//fix
		result = x_free((void*)*a1);
		*a1 = 0;
	}
	return result;
}

//----- (0009B260) --------------------------------------------------------
signed int sub_9B260(x_DWORD **a1)//27C260
{
	return sub_9C810(*a1, 83);
}

//----- (0009B274) --------------------------------------------------------
char sub_9B274(int *a1, int a2)//27C274
{
	char result; // al
	int v3; // ebp
	int v4; // esi
	char v5; // dl
	int v6; // edi
	signed int v7; // eax
	char v8; // dh
	char v9; // [esp+0h] [ebp-44h]
	uint8_t v10; // [esp+1h] [ebp-43h]
	uint8_t v11; // [esp+2h] [ebp-42h]
	uint8_t v12; // [esp+3h] [ebp-41h]
	uint8_t v13; // [esp+4h] [ebp-40h]
	uint8_t v14; // [esp+5h] [ebp-3Fh]
	uint8_t v15; // [esp+6h] [ebp-3Eh]
	uint8_t v16; // [esp+7h] [ebp-3Dh]
	uint8_t v17; // [esp+8h] [ebp-3Ch]
	uint8_t v18; // [esp+9h] [ebp-3Bh]
	uint8_t v19; // [esp+Ah] [ebp-3Ah]
	char v20; // [esp+Bh] [ebp-39h]
	int v21; // [esp+20h] [ebp-24h]
	int v22; // [esp+24h] [ebp-20h]
	int v23; // [esp+28h] [ebp-1Ch]
	int v24; // [esp+2Ch] [ebp-18h]
	int v25; // [esp+30h] [ebp-14h]

	//fix it
	v10 = 0;
	v11 = 0;
	v12 = 0;
	v13 = 0;
	v14 = 0;
	v15 = 0;
	v16 = 0;
	v17 = 0;
	v18 = 0;
	v19 = 0;
	v20 = 0;
	//fix it

	// FIXME: types
	// // if (sub_9AE90((int)&v9, a2, (int)a1, a1, &v9, 12, a2))
	// {
	// 	sub_9CBBC((x_DWORD *)*a1);
	// 	result = 3;
	// }
	// else
	// {
	// 	v3 = (int16_t)(v10 << 8) | v11;
	// 	v24 = v13 | (int16_t)(v12 << 8);
	// 	v25 = v15 | (int16_t)(v14 << 8);
	// 	v4 = v17 | (int16_t)(v16 << 8);
	// 	v5 = 0;
	// 	v6 = (int16_t)(v18 << 8) | v19;
	// 	v7 = 0;
	// 	do
	// 	{
	// 		v8 = *(&v9 + v7++);
	// 		v5 += v8;
	// 	} while (v7 < 11);
	// 	if (v5 == v20)
	// 	{
	// 		sub_AC250(
	// 			(int16_t)(v10 << 8) | v11,
	// 			v24,
	// 			v25,
	// 			v17 | (int16_t)(v16 << 8),
	// 			(int16_t)(v18 << 8) | v19,
	// 			&v23,
	// 			&v22,
	// 			&v21);
	// 		a1[1] = v3;
	// 		a1[4] = v4;
	// 		a1[5] = v6;
	// 		a1[2] = v24;
	// 		a1[3] = v25;
	// 		a1[6] = v22;
	// 		a1[7] = v23;
	// 		a1[8] = v21;
	// 		result = 0;
	// 	}
	// 	else
	// 	{
	// 		sub_9CBBC((x_DWORD *)*a1);
	// 		result = 4;
	// 	}
	// }
	return result;
}

//----- (0009B498) --------------------------------------------------------
char *sub_9B498(char a1)//27C498
{
	char *result; // eax

	switch (a1)
	{
	case 0:
		result = (char*)"Tracker initialized ok";
		break;
	case 1:
		result = (char*)"No serial port";
		break;
	case 2:
		result = (char*)"Tracker not present";
		break;
	case 3:
		result = (char*)"Tracker is not responding";
		break;
	case 4:
		result = (char*)"Tracker data is invalid";
		break;
	case 5:
		result = (char*)"Tracker header data is invalid";
		break;
	case 6:
		result = (char*)"A verified write to tracker memory failed";
		break;
	case 7:
		result = (char*)"Invalid parameter";
		break;
	case 8:
		result = (char*)"Tracker command returned an error";
		break;
	case 9:
		result = (char*)"A memory allocation failed";
		break;
	case 10:
		result = (char*)"Tracker version string is invalid";
		break;
	default:
		result = (char*)"Undefined";
		break;
	}
	return result;
}

//----- (0009B540) --------------------------------------------------------
bool sub_9B540_lock_linear_mem_region(unsigned int a1, unsigned int a2)//27C540
{
	int v3; // [esp+4h] [ebp-20h]
	unsigned int v4; // [esp+8h] [ebp-1Ch]
	int v5; // [esp+Ch] [ebp-18h]
	unsigned int v6; // [esp+14h] [ebp-10h]
	int v7; // [esp+18h] [ebp-Ch]
	int v8; // [esp+1Ch] [ebp-8h]

	//fix it
	v8 = 0;
	//fix it

	v3 = 0x600;
	v4 = a1 >> 16;
	v5 = (uint16_t)a1;
	v6 = a2 >> 16;
	v7 = (uint16_t)a2;
	//int386(0x31, (REGS*)&v3, (REGS*)&v3);//Lock Linear Region
	return v8 == 0;
}

//----- (0009B5B4) --------------------------------------------------------
bool sub_9B5B4_unlock_mem_region(unsigned int a1, unsigned int a2)//27C5B4
{
	int v3; // [esp+4h] [ebp-20h]
	unsigned int v4; // [esp+8h] [ebp-1Ch]
	int v5; // [esp+Ch] [ebp-18h]
	unsigned int v6; // [esp+14h] [ebp-10h]
	int v7; // [esp+18h] [ebp-Ch]
	int v8; // [esp+1Ch] [ebp-8h]

	//fix it
	v8 = 0;
	//fix it

	v3 = 0x601;
	v4 = a1 >> 16;
	v5 = (uint16_t)a1;
	v6 = a2 >> 16;
	v7 = (uint16_t)a2;
	//int386(0x31, (REGS*)&v3, (REGS*)&v3);//Unlock Linear Region
	return v8 == 0;
}

//----- (0009B628) --------------------------------------------------------
void sub_9B628()//27C628
{
	;
}

//----- (0009B63C) --------------------------------------------------------
int sub_9B63C(int a1)//27C63C
{
	return x_inp(a1);
}

//----- (0009B688) --------------------------------------------------------
x_WORD *sub_9B688(int a1)//27C688
{
	x_WORD *result; // eax
	int16_t v2; // dx
	int16_t v3; // t1
	signed int v4; // [esp+10h] [ebp-34h]
	x_WORD *v5; // [esp+30h] [ebp-14h]
	x_WORD *v6; // [esp+34h] [ebp-10h]
	uint8_t i; // [esp+38h] [ebp-Ch]
	char v8; // [esp+40h] [ebp-4h]

	result = (x_WORD *)a1;
	if (*(x_DWORD *)(a1 + 28))
	{
		if (*(x_DWORD *)(a1 + 20))
		{
			v6 = *(x_WORD **)(a1 + 44);
			if (!(x_inp(*(x_DWORD *)(a1 + 28) + 6) & 0x10))
			{
				result = v6;
				result[2] |= 2u;
				return result;
			}
			v6[2] &= 0xFFFDu;
		}
		result = (x_WORD *)x_inp(*(x_DWORD *)(a1 + 28) + 5);
		// FIXME: types
		// // if ((uint8_t)result & 0x20)
		// {
		// 	if (*(x_DWORD *)(a1 + 24))
		// 		v4 = 16;
		// 	else
		// 		v4 = 1;
		// 	v5 = *(x_WORD **)a1;
		// 	for (i = 0; ; i++)
		// 	{
		// 		result = v5;
		// 		if (v5[2] <= 0)
		// 			break;
		// 		result = (x_WORD *)i;
		// 		if (i >= v4)
		// 			break;
		// 		v2 = (*v5)++;
		// 		v8 = *(x_BYTE *)(v2 + *(x_DWORD *)(a1 + 4));
		// 		if (*v5 == v5[3])
		// 			*v5 = 0;
		// 		v3 = v5[2]--;
		// 		x_outp(*(x_DWORD *)(a1 + 28), v8);
		// 	}
		// }
	}
	return result;
}

//----- (0009B7E8) --------------------------------------------------------
int sub_9B7E8(int a1)//27C7E8
{
	char v4; // [esp+44h] [ebp-1Ch]

	if (*(x_DWORD *)(a1 + 28))
	{
		*(x_WORD *)(*(x_DWORD *)(a1 + 44) + 4) |= 0x10u;
		while (1)
		{
			v4 = x_inp(*(x_DWORD *)(a1 + 28) + 2);
			if (v4 & 1)
				break;
			if ((v4 & 7u) <= 6)
				;//fix it JUMPOUT(__CS__, (int*) * (&off_9B844 + (v4 & 7)));
		}
	}
	return x_outp(32, 32);
}

//----- (0009BAB0) --------------------------------------------------------
void sub_9BAB0()//27CAB0
{
	;
}

//----- (0009BAC4) --------------------------------------------------------
int sub_9BAC4(int a1, signed int a2)//27CAC4
{
	int v2; // ST50_4

	if (!*(x_DWORD *)(a1 + 28))
		return 0;
	if (a2 >= 300)
	{
		if (a2 > 115200)
			a2 = 115200;
	}
	else
	{
		a2 = 300;
	}
	v2 = 115200 / a2;
	//sub_AC449();
	x_outp(*(x_DWORD *)(a1 + 28) + 3, 131);
	x_outp(*(x_DWORD *)(a1 + 28) + 1, SBYTE1(v2));
	x_outp(*(x_DWORD *)(a1 + 28), 115200 / a2);
	x_outp(*(x_DWORD *)(a1 + 28) + 3, 3);
	//sub_AC44B();
	return 115200 / (115200 / a2);
}

//----- (0009BBFC) --------------------------------------------------------
int sub_9BBFC_unlock_and_free_memory(int a1)//27CBFC
{
	int v2; // [esp+0h] [ebp-1Ch]
	int16_t v3; // [esp+Ch] [ebp-10h]

	if (*(x_DWORD *)(a1 + 4))
	{
		v2 = 0x101;
		v3 = *(x_WORD *)(a1 + 8);
		//int386(0x31, (REGS*)&v2, (REGS*)&v2);//Free DOS Memory Block
		sub_9B5B4_unlock_mem_region(*(x_DWORD *)(a1 + 4), *(x_DWORD *)(*(x_DWORD *)a1 + 4) >> 16);
	}
	// FIXME: types
	// return (int)memset((void*)a1, 0, 10);
	return 0;
}

//----- (0009BC68) --------------------------------------------------------
signed int sub_9BC68_allocate_and_lock_memory(x_WORD *a1, int a2, unsigned int a3)//27CC68
{
	int v4; // [esp+0h] [ebp-20h]
	int v5; // [esp+4h] [ebp-1Ch]
	int v6; // [esp+Ch] [ebp-14h]
	int v7; // [esp+18h] [ebp-8h]

	//fix it
	v6 = 0;
	v7 = 0;
	//fix it

	// FIXME: types
	// *(x_DWORD *)a2 = (x_DWORD)a1;
	if (*(x_DWORD *)(a2 + 4))
		goto LABEL_5;
	v4 = 0x100;
	v5 = (signed int)(a3 + 15) >> 4;
	//int386(0x31, (REGS*)&v4, (REGS*)&v4);//Allocate DOS Memory Block
	if (!v7)
	{
		*(x_DWORD *)(a2 + 4) = 16 * (uint16_t)v4;
		*(x_WORD *)(a2 + 8) = v6;
		a1[4] = v4;
		sub_9B540_lock_linear_mem_region(*(x_DWORD *)(a2 + 4), a3);
	LABEL_5:
		*a1 = 0;
		a1[1] = 0;
		a1[2] = 0;
		a1[3] = a3;
		return 1;
	}
	return 0;
}

//----- (0009BE18) --------------------------------------------------------
int sub_9BE18(int a1, int a2, char a3, unsigned int a4, unsigned int a5)//27CE18
{
	char v5; // STFC_1
	//void (*v6)(); // eax
	int16_t v7; // dx
	char v8; // ST4C_1
	int v10; // [esp+114h] [ebp-30h]
	int v11; // [esp+118h] [ebp-2Ch]
	int v12; // [esp+11Ch] [ebp-28h]
	int v13; // [esp+120h] [ebp-24h]
	int v14; // [esp+130h] [ebp-14h]
	int64_t v15; // [esp+134h] [ebp-10h]
	int v16; // [esp+13Ch] [ebp-8h]
	int v17; // [esp+140h] [ebp-4h]

	//fix it
	v7 = 0;
	v12 = 0;
	v13 = 0;
	//fix it

	//fix  sub_9C58C(a1);
		allert_error();
	//fix

	if (a2 && a2 != 2)
	{
		if (a2 != 1 && a2 != 3)
		{
			*(x_DWORD *)(a1 + 28) = 0;
		}
		else
		{
			*(x_DWORD *)(a1 + 36) = 11;
			*(x_DWORD *)(a1 + 40) = 8;
			*(x_DWORD *)(a1 + 28) = *(uint16_t *)(2 * a2 + x_DWORD_E3DF8);
		}
	}
	else
	{
		*(x_DWORD *)(a1 + 36) = 12;
		*(x_DWORD *)(a1 + 40) = 16;
		*(x_DWORD *)(a1 + 28) = *(uint16_t *)(2 * a2 + x_DWORD_E3DF8);
	}
	if (*(x_DWORD *)(a1 + 28) && !x_DWORD_E3DFC[a2])
	{
		*(x_DWORD *)(a1 + 32) = a2;
		x_DWORD_E3DFC[a2] = a1;
		if (/*sub_9BD28_allocate_and_lock_memory2(a1)
			&& */
			sub_9BC68_allocate_and_lock_memory((x_WORD *)(*(x_DWORD *)(a1 + 44) + 16), a1, a4)
			&& sub_9BC68_allocate_and_lock_memory((x_WORD *)(*(x_DWORD *)(a1 + 44) + 6), a1 + 10, a5))
		{
			//sub_AC449();
			v16 = x_inp(*(x_DWORD *)(a1 + 28) + 3);
			*(x_DWORD *)(a1 + 66) = v16;
			v16 |= 0x80u;
			x_outp(*(x_DWORD *)(a1 + 28) + 3, v16);
			LODWORD(v15) = x_inp(*(x_DWORD *)(a1 + 28) + 1);
			HIDWORD(v15) = x_inp(*(x_DWORD *)(a1 + 28));
			if (v15)
				*(x_DWORD *)(a1 + 86) = 115200 / (((x_DWORD)v15 << 8) | HIDWORD(v15));
			else
				*(x_DWORD *)(a1 + 86) = 1200;
			v16 &= 0xFFFFFF7F;
			x_outp(*(x_DWORD *)(a1 + 28) + 3, v16);
			*(x_DWORD *)(a1 + 70) = x_inp(*(x_DWORD *)(a1 + 28) + 4);
			*(x_DWORD *)(a1 + 74) = x_inp(33);
			*(x_DWORD *)(a1 + 78) = x_inp(*(x_DWORD *)(a1 + 28) + 1);
			*(x_DWORD *)(a1 + 82) = x_inp(*(x_DWORD *)(a1 + 28) + 2);
			v5 = x_inp(33);
			x_outp(33, *(x_BYTE *)(a1 + 40) | v5);
			x_outp(*(x_DWORD *)(a1 + 28) + 4, 0);
			x_outp(*(x_DWORD *)(a1 + 28) + 1, 0);
			x_outp(*(x_DWORD *)(a1 + 28) + 2, 0);
			v10 = 0x200;
			v11 = *(x_DWORD *)(a1 + 36);
			//int386(0x31, (REGS*)&v10, (REGS*)&v10);//Get Real Mode Interrupt Vector
			*(x_WORD *)(a1 + 50) = v12;
			*(x_WORD *)(a1 + 52) = v13;
			//v6 = dos_getvect(*(x_DWORD *)(a1 + 36));
			*(x_WORD *)(a1 + 64) = v7;
			//*(x_DWORD *)(a1 + 60) = (int)v6;
			exit(0);//fix
			/*dos_setvect(
				*(x_DWORD *)(a1 + 36),
				(x_DWORD)*(void( **)())((char *)&off_E3E10 + 6 * a2),
				(uint16_t)seg_E3E14[3 * a2]);*/
			v10 = 0x201;
			v11 = *(x_DWORD *)(a1 + 36);
			v12 = (*(x_DWORD *)(a1 + 44) >> 4) & 0xFFFF;
			v13 = *(x_DWORD *)(a1 + 44) & 0xF;
			//int386(0x31, (REGS*)&v10, (REGS*)&v10);//Set Real Mode Interrupt Vector
			// FIXME: types
			// sub_9B540_lock_linear_mem_region((unsigned int)sub_9B628, (char *)sub_9BAB0 - (char *)sub_9B628);
			if (a3 & 1)
			{
				x_outp(*(x_DWORD *)(a1 + 28) + 2, 193);
				v17 = x_inp(*(x_DWORD *)(a1 + 28) + 2);
				if ((v17 & 0xF8) == 192)
				{
					*(x_DWORD *)(a1 + 24) = 1;
					*(x_WORD *)(*(x_DWORD *)(a1 + 44) + 4) |= 8u;
					x_outp(*(x_DWORD *)(a1 + 28) + 2, 65);
				}
				else
				{
					x_outp(*(x_DWORD *)(a1 + 28) + 2, 0);
				}
			}
			x_outp(*(x_DWORD *)(a1 + 28) + 1, 11);
			x_outp(*(x_DWORD *)(a1 + 28) + 4, 11);
			v8 = x_inp(33);
			x_outp(33, ~*(x_BYTE *)(a1 + 40) & v8);
			x_inp(*(x_DWORD *)(a1 + 28) + 2);
			x_inp(*(x_DWORD *)(a1 + 28));
			x_inp(*(x_DWORD *)(a1 + 28) + 5);
			x_inp(*(x_DWORD *)(a1 + 28) + 6);
			//sub_AC44B();
			sub_9CD9C(a1, 1);
			sub_9CCF8(a1, 1);
			v14 = 0;
		}
		else
		{
			//fix  sub_9C58C(a1);
			allert_error();
			//fix
			v14 = -2;
		}
	}
	else
	{
		//fix  sub_9C58C(a1);
		allert_error();
		//fix
		v14 = -1;
	}
	return v14;
}

//----- (0009C810) --------------------------------------------------------
signed int sub_9C810(x_DWORD *a1, char a2)
{
	int16_t v2; // dx
	int16_t v3; // t1
	x_WORD *v5; // [esp+0h] [ebp-8h]

	if (!a1[7])
		return 1;
	v5 = (x_WORD *)*a1;
	if (*(x_WORD *)(*a1 + 4) != *(x_WORD *)(*a1 + 6))
	{
		//sub_AC449();
		v2 = v5[1]++;
		*(x_BYTE *)(a1[1] + v2) = a2;
		if (v5[1] == v5[3])
			v5[1] = 0;
		v3 = v5[2]++;
		// FIXME: types
		// sub_9B688((int)a1);
		//sub_AC44B();
		return 1;
	}
	return 0;
}

//----- (0009C938) --------------------------------------------------------
signed int sub_9C938(x_DWORD *a1)//27d938
{
	int16_t v1; // dx
	int16_t v2; // t1
	x_WORD *v5; // [esp+4h] [ebp-8h]
	int v6; // [esp+8h] [ebp-4h]

	if (!a1[7])
		return -1;
	v5 = *(x_WORD **)((char *)a1 + 10);
	if (v5[2] <= 0)
		return -1;
	//sub_AC449();
	v1 = (*v5)++;
	v6 = *(uint8_t *)(*(x_DWORD *)((char *)a1 + 14) + v1);
	if (*v5 == v5[3])
		*v5 = 0;
	v2 = v5[2]--;
	//sub_AC44B();
	return v6;
}

//----- (0009C9D0) --------------------------------------------------------
bool sub_9C9D0(int a1)//27d9d0
{
	bool v2; // [esp+4h] [ebp-4h]

	if (*(x_DWORD *)(a1 + 28))
		v2 = *(x_WORD *)(*(x_DWORD *)(a1 + 10) + 4) == 0;
	else
		v2 = 1;
	return v2;
}

//----- (0009CBBC) --------------------------------------------------------
void sub_9CBBC(x_DWORD *a1)//27dbbc
{
	if (a1[7])
	{
		//sub_AC449();
		*(x_WORD *)(*a1 + 4) = 0;
		*(x_WORD *)*a1 = 0;
		*(x_WORD *)(*a1 + 2) = 0;
		*(x_WORD *)(*(x_DWORD *)((char *)a1 + 10) + 4) = 0;
		**(x_WORD **)((char *)a1 + 10) = 0;
		*(x_WORD *)(*(x_DWORD *)((char *)a1 + 10) + 2) = 0;
		*(x_WORD *)(a1[11] + 4) &= 0xFFFDu;
		x_inp(a1[7] + 5);
		x_inp(a1[7] + 6);
		x_inp(a1[7] + 2);
		x_inp(a1[7]);
		//sub_AC44B();
	}
}

//----- (0009CCB4) --------------------------------------------------------
int sub_9CCB4(int a1, int a2)//27dcb4
{
	int result; // eax

	if (a2)
	{
		*(x_DWORD *)(a1 + 20) = 1;
		result = *(x_DWORD *)(a1 + 44);
		*(x_WORD *)(result + 4) |= 1u;
	}
	else
	{
		*(x_DWORD *)(a1 + 20) = 0;
		result = *(x_DWORD *)(a1 + 44);
		*(x_WORD *)(result + 4) &= 0xFFFEu;
	}
	return result;
}

//----- (0009CCF8) --------------------------------------------------------
int sub_9CCF8(int a1, int a2)//27dcf8
{
	int result; // eax
	int v3; // ST18_4
	char v4; // al
	int v5; // ST08_4
	char v6; // al

	result = a1;
	if (*(x_DWORD *)(a1 + 28))
	{
		if (a2)
		{
			v3 = *(x_DWORD *)(a1 + 28) + 4;
			v4 = sub_9B63C(v3) | 1;
			result = x_outp(v3, v4);
		}
		else
		{
			v5 = *(x_DWORD *)(a1 + 28) + 4;
			v6 = sub_9B63C(v5) & 0xFE;
			result = x_outp(v5, v6);
		}
	}
	return result;
}

//----- (0009CD9C) --------------------------------------------------------
int sub_9CD9C(int a1, int a2)//27dd9c
{
	int result; // eax
	int v3; // ST18_4
	char v4; // al
	int v5; // ST08_4
	char v6; // al

	result = a1;
	if (*(x_DWORD *)(a1 + 28))
	{
		if (a2)
		{
			v3 = *(x_DWORD *)(a1 + 28) + 4;
			v4 = sub_9B63C(v3) | 2;
			result = x_outp(v3, v4);
		}
		else
		{
			v5 = *(x_DWORD *)(a1 + 28) + 4;
			v6 = sub_9B63C(v5) & 0xFD;
			result = x_outp(v5, v6);
		}
	}
	return result;
}

//----- (0009D31C) --------------------------------------------------------
int16_t /*__fastcall*/ sub_9D31C(int16_t result)//27e31c
{
	bool v1; // zf

	//fix it:__asm { int     16h; KEYBOARD - GET ENHANCED SHIFT FLAGS (AT model 339,XT2,XT286,PS) }
	x_BYTE_1806E5 = 0;
	if (result & 3)
		x_BYTE_1806E5 = 1;
	if (result & 4)
		x_BYTE_1806E5 |= 2u;
	v1 = (result & 8) == 0;
	if (result & 8)
	{
		v1 = ((uint8_t)x_BYTE_1806E5 | 4) == 0;
		x_BYTE_1806E5 |= 4u;
	}
	x_BYTE_1806E4 = 0;
	//fix it:__asm { int     16h; KEYBOARD - CHECK ENHANCED KEYSTROKE (AT model 339,XT2,XT286,PS) }
	if (!v1)
	{
		//fix it:__asm { int     16h; KEYBOARD - GET ENHANCED KEYSTROKE (AT model 339,XT2,XT286,PS) }
		x_BYTE_1806E4 = 16;
	}
	return result;
}

//----- (0009D380) --------------------------------------------------------
int sub_9D380(FILE* a1, int a2, char a3, int a4, int a5)//27e380
{
	if (a3 & 1)
	{
		memcpy((void*)a4, (const void*)(a2 + a1), a5);
	}
	else
	{
		x_lseek(a1, a2, 0);
		x_read2(a1, (Bit8u*)a4, a5);
	}
	return a5 + a2;
}


//----- (0009D450) --------------------------------------------------------
Bit8u* sub_9D450_malloc4(int a1)//27e450
{
	Bit8u* v2; // [esp+4h] [ebp-4h]

	v2 = (Bit8u*)malloc(a1);//off_E3E30_mallocx(a1);
	if (v2)
		sub_9D710(v2, a1);
	return v2;
}
// E3E30: invalid function type has been ignored

//----- (0009D490) --------------------------------------------------------
int sub_9D490_free4(void* a1, int a2)//27e490
{
	int result; // eax

	if (a1)
	{
		//sub_9D740(a1, a2);
		//result = off_E3E34_freex(a1);
		result = x_free(a1);
	}
	return result;
	//fix it
	//return 0;
}

//----- (0009D4D0) --------------------------------------------------------
signed int sub_9D4D0(int a1, Bit8u** a2, Bit32u* a3, Bit32u* a4)//27e4d0
{
	Bit8u* v6; // [esp+Ch] [ebp-4h]

	v6 = (Bit8u*)malloc(16 * a1);
	if (v6 == NULL)
		return 0;
	*a3 = 0;//(int)v6 >> 4 << 16;//fixed - remove segment
	*a2 = v6;
	*a4 = 1232;
	//sub_9D590_lock_linear_region((Bit8u*)(*a3 >> 12), (*a3 >> 12) + 16 * a1 - 1);
	return 1;
}

//----- (0009D560) --------------------------------------------------------
void sub_9D560(Bit8u* a1)//27e560
{
	sub_83E80_freemem4(a1);
}

//----- (0009D590) --------------------------------------------------------
void sub_9D590_lock_linear_region(Bit8u* a1, unsigned int a2)//27e590
{
	//unsigned int v3; // [esp+0h] [ebp-54h]
	//unsigned int v4; // [esp+4h] [ebp-50h]
	//int v5; // [esp+Ch] [ebp-48h]
	//unsigned int v6; // [esp+10h] [ebp-44h]
	//int v7; // [esp+14h] [ebp-40h]
	//unsigned int v8; // [esp+1Ch] [ebp-38h]
	int v9; // [esp+20h] [ebp-34h]
	char v10; // [esp+28h] [ebp-2Ch]
	int v11; // [esp+40h] [ebp-14h]
	//unsigned int v12; // [esp+48h] [ebp-Ch]
	//unsigned int v13; // [esp+4Ch] [ebp-8h]
	//int v14; // [esp+50h] [ebp-4h]

	//fix it
	v11 = 0;
	v9 = 0;
	v10 = 0;
	//fix it

	/*v14 = 0;
	if ( a1 >= a2 )
	  v3 = a2;
	else
	  v3 = a1;
	v13 = v3;
	if ( a1 < a2 )
	  v4 = a2;
	else
	  v4 = a1;
	v12 = v4 - v13 + 1;
	v5 = 0x600;
	v6 = v13 >> 16;
	v7 = (uint16_t)v13;
	v8 = v12 >> 16;
	v9 = (uint16_t)(v4 - v13 + 1);
	int386(0x31, (REGS*)&v5, (REGS*)&v10);//Lock Linear Region*/ // fix it
	//return v11 == 0; //fix it
}

//----- (0009D650) --------------------------------------------------------
bool sub_9D650(unsigned int a1, unsigned int a2)//27e650
{
	unsigned int v3; // [esp+0h] [ebp-54h]
	unsigned int v4; // [esp+4h] [ebp-50h]
	int v5; // [esp+Ch] [ebp-48h]
	unsigned int v6; // [esp+10h] [ebp-44h]
	int v7; // [esp+14h] [ebp-40h]
	unsigned int v8; // [esp+1Ch] [ebp-38h]
	int v9; // [esp+20h] [ebp-34h]
	//char v10; // [esp+28h] [ebp-2Ch]
	int v11; // [esp+40h] [ebp-14h]
	unsigned int v12; // [esp+48h] [ebp-Ch]
	unsigned int v13; // [esp+4Ch] [ebp-8h]
	int v14; // [esp+50h] [ebp-4h]

	//fix it
	v11 = 0;
	//fix it

	v14 = 0;
	if (a1 >= a2)
		v3 = a2;
	else
		v3 = a1;
	v13 = v3;
	if (a1 < a2)
		v4 = a2;
	else
		v4 = a1;
	v12 = v4 - v13 + 1;
	v5 = 1537;
	v6 = v13 >> 16;
	v7 = (uint16_t)v13;
	v8 = v12 >> 16;
	v9 = (uint16_t)(v4 - v13 + 1);
	//int386(49, (REGS*)&v5, (REGS*)&v10); // unlock linear region
	return v11 == 0;
}

//----- (0009D710) --------------------------------------------------------
void sub_9D710(Bit8u* a1, int a2)//27e710
{
	sub_9D590_lock_linear_region(a1, a1[a2]);
}

//----- (0009D740) --------------------------------------------------------
bool sub_9D740(unsigned int a1, int a2)//27e740
{
	return sub_9D650(a1, a2 + a1);
}

//----- (0009D770) --------------------------------------------------------
int sub_9D770(char* a1, char a2)//27e770
{
	char v3; // [esp+0h] [ebp-E0h]
	int v4; // [esp+40h] [ebp-A0h]
	unsigned int v5; // [esp+44h] [ebp-9Ch]
	int v6; // [esp+ACh] [ebp-34h]
	int v7; // [esp+C4h] [ebp-1Ch]
	int v8; // [esp+C8h] [ebp-18h]
	unsigned int i; // [esp+CCh] [ebp-14h]
	FILE* v10; // [esp+D0h] [ebp-10h]
	int v11; // [esp+D4h] [ebp-Ch]
	int v12; // [esp+D8h] [ebp-8h]
	int v13; // [esp+DCh] [ebp-4h]

	//fix it
	v4 = 0;
	v5 = 0;
	//fix it

	v13 = 8224;
	v7 = 0;
	if (a2 & 1)
	{
		v10 = (FILE*)a1;
	}
	else
	{
		v10 = x_open(a1, 512);
		if (v10 == NULL)
			return 0;
	}
	// FIXME: types
	// v12 = sub_9D380(v10, 60, a2, (int)&v8, 4);
	// FIXME: types
	// v12 = sub_9D380(v10, v8, a2, (int)&v13, 2);
	if (!strcmp((const char*)&v13, "LX"))
	{
		// FIXME: types
		// sub_9D380(v10, v8, a2, (int)&v3, 172);
		v12 = v4 + v8;
		for (i = 0; i < v5; i++)
		{
			// FIXME: types
			// v12 = sub_9D380(v10, v12, a2, (int)&v6, 24);
			v7 += v6;
		}
		if (!(a2 & 1))
			x_close((FILE*)v10);
		v7 += 15 * v5;
		v11 = v7;
	}
	else
	{
		x_close((FILE*)v10);
		v11 = 0;
	}
	return v11;
}

//----- (0009DE20) --------------------------------------------------------
signed int sub_9DE20_get_file_lenght(char* a1)//27ee20
{
	signed int v2; // [esp+0h] [ebp-Ch]
	signed int v3; // [esp+4h] [ebp-8h]
	FILE* v4; // [esp+8h] [ebp-4h]

	x_DWORD_E3E2C = 0;
	v4 = x_open(a1, 512);
	if (v4 == NULL)
	{
		x_DWORD_E3E2C = 3;
		v2 = -1;
	}
	else
	{
		v3 = x_filelength(v4);
		if (v3 == -1)
			x_DWORD_E3E2C = 5;
		x_close(v4);
		v2 = v3;
	}
	return v2;
}

//----- (0009DEA0) --------------------------------------------------------
Bit8u* sub_9DEA0_read_file(char* a1, Bit8u* a2)//27eea0
{
	Bit8u* v3; // [esp+0h] [ebp-1Ch]
	Bit8u* result; // [esp+4h] [ebp-18h]
	signed int v5; // [esp+10h] [ebp-Ch]
	FILE* v6; // [esp+14h] [ebp-8h]

	x_DWORD_E3E2C = 0;
	v5 = sub_9DE20_get_file_lenght(a1);
	if (v5 == -1)
	{
		x_DWORD_E3E2C = 3;
		result = 0;
	}
	else
	{
		if (a2)
			v3 = a2;
		else
		{
			v3 = (Bit8u*)malloc(v5);
		}
		if (v3)
		{
			v6 = x_open(a1, 512);
			if (v6 == NULL)
			{
				x_free((void*)v3);
				x_DWORD_E3E2C = 3;
				result = 0;
			}
			else if (x_read2(v6, v3, v5) == v5)
			{
				x_close(v6);
				result = v3;
			}
			else
			{
				x_free((void*)v3);
				x_DWORD_E3E2C = 5;
				result = 0;
			}
		}
		else
		{
			x_DWORD_E3E2C = 2;
			result = 0;
		}
	}
	return result;
}

//----- (0009E1B0) --------------------------------------------------------
void sub_9E1B0()
{
	//bool result; // eax

	if (!x_DWORD_E3E3C)
	{
		// FIXME: types
		// sub_9D590_lock_linear_region((Bit8u*)sub_9E1B0, (unsigned int)sub_9EDD0);
		sub_9D710((Bit8u*)x_DWORD_181C50, 64);
		sub_9D710((Bit8u*)x_DWORD_181DAC, 76);
		sub_9D710((Bit8u*)&x_BYTE_181C90, 256);
		sub_9D710((Bit8u*)&unk_181D90, 24);
		sub_9D710((Bit8u*)&x_DWORD_E3E38, 4);
		sub_9D710((Bit8u*)&x_DWORD_181DA8, 4);
		x_DWORD_E3E3C = 1;
	}
	//return result;
}

//----- (0009E2B0) --------------------------------------------------------
int sub_9E2B0(char* a1, int a2, x_DWORD *a3)
{
	int v3; // ebx
	int v5; // [esp+4h] [ebp-10h]
	int v6; // [esp+8h] [ebp-Ch]
	int j; // [esp+Ch] [ebp-8h]
	unsigned int i; // [esp+10h] [ebp-4h]

	v6 = 0;
	v5 = 1;
	for (i = 0; strlen(a1) > i; i++)
	{
		if (a1[i] == 45)
		{
			v5 = -v5;
		}
		else if (!(IsTable[a1[i] + 1] & 2))
		{
			for (j = 0; j < a2; j++)
			{
				v3 = x_BYTE_D3450[j];
				if (x_toupper(a1[i]) == v3)
				{
					v6 = a2 * v6 + j;
					break;
				}
			}
			if (j == a2)
				break;
		}
	}
	// FIXME: types
	// // if (a3)
	// 	*a3 = i + (int)a1;
	return v5 * v6;
}

//----- (0009E3A0) --------------------------------------------------------
int sub_9E3A0_AIL_API_read_INI(AIL_INI* INI, char* filename/*,char* a8*/)//27f3a0
{
	unsigned int v2; // eax
	unsigned int v3; // eax
	unsigned int v4; // eax
	unsigned int v5; // eax
	//char v7[300]; // [esp+0h] [ebp-180h]
	//char v8[200]; // [esp+80h] [ebp-100h]
	//Bit16s v9[12]; // [esp+100h] [ebp-80h]
	FILE* v9x;
	//errno_t v9y;
	//int16_t v10; // [esp+102h] [ebp-7Eh]
	//int16_t v11; // [esp+104h] [ebp-7Ch]
	//int16_t v12; // [esp+106h] [ebp-7Ah]
	char v13[80]; // [esp+118h] [ebp-68h]
	char *v14; // [esp+168h] [ebp-18h]
	char *v15; // [esp+16Ch] [ebp-14h]
	char *v16; // [esp+170h] [ebp-10h]
	unsigned int i; // [esp+174h] [ebp-Ch]
	int v18; // [esp+178h] [ebp-8h]
	//char v19[80]; // [esp+17Ch] [ebp-4h]

	memset(INI->device_name, 0, 280);
	memset(&INI->IO, -1, 24);
	//v9y = myfopen_s(&v9x,a2,(const char*) "rt");
	v9x = myopent(filename, (char*)"rt");
	if (!v9x)
		return 0;
	while (fgets(v13, 80, v9x) /*&& !(v9x[12] & 0x10)*/)//355140
	{
		for (i = strlen(v13) - 1; (i & 0x80000000) == 0 && IsTable[(v13[i] + 1)] & 2; i--)
			v13[i] = 0;
		for (i = 0; ; i++)
		{
			v2 = strlen(v13);
			if (v2 <= i || !(IsTable[(v13[i] + 1)] & 2))
				break;
		}
		v15 = &v13[i];
		while (1)
		{
			v3 = strlen(v13);
			if (v3 <= i || IsTable[(v13[i] + 1)] & 2)
				break;
			i++;
		}
		v14 = &v13[i];
		while (1)
		{
			v4 = strlen(v13);
			if (v4 <= i || !(IsTable[(v13[i] + 1)] & 2))
				break;
			i++;
		}
		v16 = &v13[i];
		v5 = strlen(v13);
		if (v5 > i)
		{
			*v14 = 0;
			if (*v15 != 59)
			{
				if (!_strnicmp(v15, "DRIVER", 7))
				{
					strcpy(INI->driver_name, v16);
				}
				else if (!_strnicmp(v15, "DEVICE", 7))
				{
					strcpy(INI->device_name, v16);
				}
				else if (!_strnicmp(v15, "IO_ADDR", 8))
				{
					INI->IO.IO = sub_9E2B0(v16, 16, 0);
				}
				else if (!_strnicmp(v15, "IRQ", 4))
				{
					INI->IO.IRQ = sub_9E2B0(v16, 10, 0);
				}
				else if (!_strnicmp(v15, "DMA_8_bit", 10))
				{
					INI->IO.DMA_8_bit = sub_9E2B0(v16, 10, 0);
				}
				else if (!_strnicmp(v15, "DMA_16_bit", 11))
				{
					INI->IO.DMA_16_bit = sub_9E2B0(v16, 10, 0);
				}
			}
		}
	}
	fclose(v9x);
	if (strlen(INI->device_name) && strlen(INI->device_name))
	{
		//qmemcpy(filename, INI->device_name, 0x118u);//fix it
		v18 = 1;
	}
	else
	{
		qmemcpy(&x_BYTE_181C90, (void*)"Corrupted .INI file\n", 0x15u);
		v18 = 0;
	}
	return v18;
}

//----- (0009E6E0) --------------------------------------------------------
int sub_9E6E0_set_preference(Bit32u number, Bit32s value)
{
	int oldvalue;
	oldvalue = x_DWORD_181DAC[number];
	x_DWORD_181DAC[number] = value;
	return oldvalue;
}

//----- (0009E720) --------------------------------------------------------
AIL_DRIVER* sub_9E720_AIL_API_install_driver(/*int a1, */Bit8u* driver_image, Bit32s n_bytes)//27f720
{
	//VDI_HDR* v3; // edx
	int v4; // ecx
	int v5; // ST0C_4
	int v6; // ST08_4
	int v7; // ST0C_4
	int v8; // ST08_4
	int v9; // ST0C_4
	int v10; // ST08_4
	AIL_DRIVER* result; // [esp+0h] [ebp-Ch]
	unsigned int i; // [esp+4h] [ebp-8h]
	AIL_DRIVER* v14; // [esp+8h] [ebp-4h]

	//fix it
	//v3 = new VDI_HDR();
	v4 = 0;
	//fix it

	v14 = (AIL_DRIVER*)sub_9D450_malloc4(sizeof(AIL_DRIVER));
	if (v14)
	{
		v14->size_3 = n_bytes;
		if (sub_9D4D0((n_bytes + 15) >> 4, (Bit8u**)&v14->buf_2, &v14->seg_0, &v14->sel_1))
		{
			memmove((void*)v14->buf_2, (const void*)driver_image, n_bytes);
			//fix it - make buf reader
			v14->VHDR_4 = (VDI_HDR*)v14->buf_2;
			if (!_strnicmp((const char*)v14->VHDR_4->ID_8, "AIL3DIG", 7))
			{
				v14->type_5 = 0;
			}
			else
			{
				if (_strnicmp((char*)v14->VHDR_4->ID_8, "AIL3MDI", 7))
				{
					qmemcpy(&x_BYTE_181C90, (void*)"Invalid driver type\n", 0x15u);
					v5 = v14->sel_1;
					v6 = v14->seg_0;
					sub_9D560((Bit8u*)v14->buf_2);
					sub_9D490_free4(v14, 44);
					return 0;
				}
				v14->type_5 = 1;
			}
			for (i = 0; i < 0x10; i++)
			{
				if (!x_DWORD_181C50[i])
				{
					x_DWORD_181C50[i] = v14;
					v14->VHDR_4->VDI_HDR_var50 = i;
					break;
				}
			}
			if (i != 16)
			{
				v14->VHDR_4->VDI_HDR_var48 = 0;
				v14->initialized_6 = 0;
				v14->PM_ISR_7 = -1;
				v14->VHDR_4->VDI_HDR_var54_prev_ISR = sub_91C10_AIL_get_real_vect(/*v3, v4, a1,*/ 102);//save old vector
				sub_91D50_AIL_set_real_vect(102, /*v14->AIL_DRIVER_var0_seg + */v14->VHDR_4->VDI_HDR_var52_this_ISR);//set new vector
				v14->destructor_9 = 0;
				v14->descriptor_10 = 0;
				sub_91F70_AIL_call_driver(v14, 768, 0, 0);
				if (v14->VHDR_4->VDI_HDR_var46 > 0)
				{
					//v14->server_8 = sub_92600_AIL_register_timer(sub_9E250);
					v14->server_8 = 1;//fix;
					if (v14->server_8 == -1)
					{
						qmemcpy(&x_BYTE_181C90, (void*)"Out of timer handles\n", 0x16u);
						sub_91D50_AIL_set_real_vect(102, v14->VHDR_4->VDI_HDR_var54_prev_ISR);
						v9 = v14->sel_1;
						v10 = (int)v14->seg_0;
						sub_9D560((Bit8u*)v14->buf_2);
						sub_9D490_free4(v14, 44);
						return 0;
					}
					//sub_92740_AIL_set_timer_user(v14->server_8, (int32_t)v14);
					//sub_92930_AIL_set_timer_frequency(v14->server_8, v14->VHDR_4->VDI_HDR_var46);
					//sub_92BA0_AIL_start_timer(v14->server_8);
				}
				else
				{
					v14->server_8 = -1;
				}
				return v14;
			}
			qmemcpy(x_BYTE_181C90, (void*)"Out of driver handles\n", 0x17u);
			v7 = v14->sel_1;
			v8 = (int)v14->seg_0;
			sub_9D560((Bit8u*)v14->buf_2);
			sub_9D490_free4(v14, 44);
			result = 0;
		}
		else
		{
			qmemcpy(x_BYTE_181C90, (void*)"Insufficient low memory\n", 0x19u);
			sub_9D490_free4(v14, 44);
			result = 0;
		}
	}
	else
	{
		strcpy(x_BYTE_181C90, "Insufficient memory for driver descriptor\n");
		result = 0;
	}
	return result;
}

//----- (0009EA60) --------------------------------------------------------
int sub_9EA60_AIL_API_uninstall_driver(AIL_DRIVER* a1)
{
	int v1; // ST0C_4
	int v2; // ST08_4
	int result; // eax
	signed int i; // [esp+0h] [ebp-4h]

	if (a1->destructor_9)
		//(*(void (**)(x_DWORD))(a1 + 36))(*(x_DWORD *)(a1 + 40));
	{
		//fix this !!! (a1->destructor_9)((HDIGDRIVER)a1->descriptor_10);
	}
	if (a1->server_8 != -1)
		;// sub_92DC0_AIL_release_timer_handle(a1->server_8);
	if (a1->initialized_6)
	{
		if (a1->PM_ISR_7 != -1)
			sub_91E90_AIL_restore_USE16_ISR(a1->PM_ISR_7);
		sub_91F70_AIL_call_driver(a1, 774, 0, 0);
	}
	sub_91D50_AIL_set_real_vect(102, 0/*(Bit8u*)*(x_DWORD *)(*(x_DWORD *)(a1 + 16) + 54)*/);//fix
	v1 = a1->sel_1;
	v2 = a1->seg_0;
	sub_9D560((Bit8u*)a1->buf_2);
	result = sub_9D490_free4(a1, 44);
	for (i = 0; i < 16; i++)
	{
		if (x_DWORD_181C50[i] == a1)
			x_DWORD_181C50[i] = 0;
		result = i;
	}
	return result;
}

//----- (0009EB60) --------------------------------------------------------
IO_PARMS* sub_9EB60_AIL_API_get_IO_environment(AIL_DRIVER *drvr)
{
	//ac_sound_get_io_environment
	char* v3; // [esp+4h] [ebp-8h]
	char* v4; // [esp+8h] [ebp-4h]

	//fix it
	v3 = 0;
	//fix it

	v4 = (char*)(*(x_DWORD *)(*(x_DWORD *)(drvr + 16) + 18) & 0xFFFF) + 16 * (*(x_DWORD *)(*(x_DWORD *)(drvr + 16) + 18) >> 16);
	if (!v4)
		return 0;
	//_dupenv_s((char**)v3,(size_t*)sizeof(v3),(char*)v4);
	v3 = mygetenv(v4);
	if (!v3)
		return 0;
	strncpy((char*)*(x_DWORD *)(drvr + 16) + 58, (const char*)v3, 128);
	if (sub_91F70_AIL_call_driver(drvr, 771, 0, 0) == -1)
		return 0;
	qmemcpy(&unk_181DF8, (void *)(*(x_DWORD *)(drvr + 16) + 22), 0x18u);
	return &unk_181DF8;
}

//----- (0009EC30) --------------------------------------------------------
void sub_9EC30()
{
	signed int i; // [esp+0h] [ebp-4h]

	sub_9E1B0();
	sub_91A80_AIL_set_preference(0, 200);
	sub_91A80_AIL_set_preference(1, 1);
	sub_91A80_AIL_set_preference(2, 0x8000);
	sub_91A80_AIL_set_preference(3, 100);
	sub_91A80_AIL_set_preference(4, 16);
	sub_91A80_AIL_set_preference(5, 100);
	sub_91A80_AIL_set_preference(6, 655);
	sub_91A80_AIL_set_preference(7, 0);
	sub_91A80_AIL_set_preference(8, 0);
	sub_91A80_AIL_set_preference(9, 1);
	sub_91A80_AIL_set_preference(10, 0);
	sub_91A80_AIL_set_preference(11, 120);
	sub_91A80_AIL_set_preference(12, 8);
	sub_91A80_AIL_set_preference(13, 127);
	sub_91A80_AIL_set_preference(14, 1);
	sub_91A80_AIL_set_preference(15, 0);
	sub_91A80_AIL_set_preference(16, 2);
	sub_91A80_AIL_set_preference(17, 1);
	sub_91A80_AIL_set_preference(18, 1);
	for (i = 0; i < 16; i++)
		x_DWORD_181C50[i] = 0;
	x_BYTE_181C90[0] = 0;
	sub_A10F4_sound_proc_irq();
}

//----- (0009ED70) --------------------------------------------------------
signed int sub_9ED70()
{
	signed int i; // [esp+0h] [ebp-8h]
	AIL_DRIVER* v2; // [esp+4h] [ebp-4h]

	for (i = 15; i >= 0; i--)
	{
		v2 = x_DWORD_181C50[i];
		if (v2)
			sub_93160_AIL_uninstall_driver(v2);
	}
	//sub_92E50_AIL_release_all_timers();
	return sub_A11E2();
}

//----- (0009EDD0) --------------------------------------------------------
bool sub_9EDD0()
{
	bool result; // eax

	if (x_DWORD_E3E3C)
	{
		// FIXME: types
		// // sub_9D650((unsigned int)sub_9E1B0, (unsigned int)sub_9EDD0);
		// sub_9D740((unsigned int)x_DWORD_181C50, 64);
		// sub_9D740((unsigned int)x_DWORD_181DAC, 76);
		// sub_9D740((unsigned int)&x_BYTE_181C90, 256);
		// sub_9D740((unsigned int)&unk_181D90, 24);
		// sub_9D740((unsigned int)&x_DWORD_E3E38, 4);
		// result = sub_9D740((unsigned int)&x_DWORD_181DA8, 4);
		x_DWORD_E3E3C = 0;
	}
	return result;
}

//----- (0009EE70) --------------------------------------------------------
int sub_9EE70()
{
	int v0; // eax

	if (!x_BYTE_E3E45 && sub_95480_AIL_sample_user_data(x_DWORD_181E10, x_DWORD_E3E40) && (unsigned int)x_DWORD_E3E40 < 8)
	{
		sub_93830_AIL_init_sample(x_DWORD_181E10);
		sub_95140_AIL_register_EOS_callback(x_DWORD_181E10, sub_9EE70);
		v0 = sub_95480_AIL_sample_user_data(x_DWORD_181E10, x_DWORD_E3E40);
		sub_938C0_AIL_set_sample_file(x_DWORD_181E10, (Bit8u*)*(x_DWORD *)(x_DWORD_E37A0_sound_buffer2 + 32 * v0 + 18), 1);
		++x_DWORD_E3E40;
		sub_93B50_AIL_start_sample(x_DWORD_181E10);
	}
	return 0;
}

//----- (0009F040) --------------------------------------------------------
void sub_9F040()
{
	//int result; // eax

	if (x_BYTE_E3E44)
	{
		x_BYTE_E3E45 = 1;
		sub_93D00_AIL_end_sample(x_DWORD_181E10);
		sub_953E0_AIL_set_sample_user_data(x_DWORD_181E10, 0, 0);
		sub_953E0_AIL_set_sample_user_data(x_DWORD_181E10, 1, 0);
		sub_953E0_AIL_set_sample_user_data(x_DWORD_181E10, 2, 0);
		sub_953E0_AIL_set_sample_user_data(x_DWORD_181E10, 3, 0);
		sub_953E0_AIL_set_sample_user_data(x_DWORD_181E10, 4, 0);
		sub_953E0_AIL_set_sample_user_data(x_DWORD_181E10, 5, 0);
		sub_953E0_AIL_set_sample_user_data(x_DWORD_181E10, 6, 0);
		sub_953E0_AIL_set_sample_user_data(x_DWORD_181E10, 7, 0);
	}
	//return result;
}

//----- (0009F110) --------------------------------------------------------
int64_t sub_9F110(int a1)
{
	int v2; // [esp+0h] [ebp-24h]
	int v3; // [esp+4h] [ebp-20h]
	int v4; // [esp+Ch] [ebp-18h]
	int v5; // [esp+18h] [ebp-Ch]
	unsigned int v6; // [esp+20h] [ebp-4h]

	//fix it
	v4 = 0;
	v5 = 0;
	//fix it

	v2 = 256;
	v3 = (a1 + 15) >> 4;
	//int386(49, (REGS*)&v2, (REGS*)&v2);
	if (v5)
		LOWORD(v6) = 0;
	else
		LOWORD(v6) = v4;
	return __PAIR__(v6, 0);
}

//----- (0009F170) --------------------------------------------------------
int sub_9F170(int a1, uint16_t a2)
{
	int v3; // [esp+0h] [ebp-20h]
	int v4; // [esp+Ch] [ebp-14h]
	int v5; // [esp+18h] [ebp-8h]
	int v6; // [esp+1Ch] [ebp-4h]

	//fix it
	v5 = 0;
	//fix it

	v3 = 257;
	v4 = a2;
	//int386(49, (REGS*)&v3, (REGS*)&v3);
	if (v5)
		v6 = -1;
	else
		v6 = 0;
	return v6;
}

//----- (0009F1D0) --------------------------------------------------------
int sub_9F1D0(int a1)
{
	int v2; // [esp+0h] [ebp-20h]
	int v3; // [esp+4h] [ebp-1Ch]
	int v4; // [esp+18h] [ebp-8h]
	int v5; // [esp+1Ch] [ebp-4h]

	//fix it
	v4 = 0;
	//fix it

	v2 = 2;
	v3 = a1;
	//int386(49, (REGS*)&v2, (REGS*)&v2);
	if (v4)
		v5 = -1;
	else
		v5 = (uint16_t)v2;
	return v5;
}

//----- (0009F220) --------------------------------------------------------
int sub_9F220(int a1)
{
	int v2; // [esp+0h] [ebp-20h]
	int v3; // [esp+4h] [ebp-1Ch]
	uint16_t v4; // [esp+8h] [ebp-18h]
	uint16_t v5; // [esp+Ch] [ebp-14h]
	int v6; // [esp+18h] [ebp-8h]
	int v7; // [esp+1Ch] [ebp-4h]

	//fix it
	v4 = 0;
	//fix it

	//fix it
	v5 = 0;
	v6 = 0;
	//fix it

	v2 = 6;
	v3 = a1;
	//int386(49, (REGS*)&v2, (REGS*)&v2);
	if (v6)
		v7 = -1;
	else
		v7 = ((signed int)v5 >> 4) + (v4 << 12);
	return v7;
}

//----- (0009F280) --------------------------------------------------------
int sub_9F280(int *a1)//a1 bude nejaky driver
{
	VDI_CALL v2; // [esp+0h] [ebp-10h]
	int16_t v3; // [esp+4h] [ebp-Ch]
	int16_t v4; // [esp+6h] [ebp-Ah]
	int16_t v5; // [esp+8h] [ebp-8h]
	int v6; // [esp+Ch] [ebp-4h]

	//fix it
	v4 = 0;
	v5 = 0;
	//fix it

	v3 = 16;
	sub_91F70_AIL_call_driver((AIL_DRIVER*)*a1, 1286, &v2, &v2);
	if (v2.AX == 0)//fix
		v6 = -1;
	else
		v6 = v4 << (v5 + 16);
	return v6;
}

//----- (0009F2E0) --------------------------------------------------------
VDI_CALL sub_9F2E0(int *a1, int a2, uint16_t a3, uint16_t a4)
{
	int64_t v4; // rax
	uint16_t v5; // ax
	VDI_CALL v7; // [esp+0h] [ebp-10h]
	int16_t v8; // [esp+4h] [ebp-Ch]
	int16_t v9; // [esp+6h] [ebp-Ah]
	int16_t v10; // [esp+8h] [ebp-8h]

	if (!*(x_DWORD *)x_BYTE_E3E54 && !*(x_WORD *)&x_BYTE_E3E54[4])
	{
		v4 = sub_9F110(4);
		*(x_WORD *)&x_BYTE_E3E54[4] = WORD2(v4);
		*(x_DWORD *)x_BYTE_E3E54 = v4;
		if (!(x_DWORD)v4 && !*(x_WORD *)&x_BYTE_E3E54[4])
		{
			v7.AX = -1;
			return v7;
		}
	}
	//__GS__ = *(x_WORD *)&x_BYTE_E3E54[4];
	__writegsx_WORD(*(unsigned int *)x_BYTE_E3E54, a4);
	v5 = sub_9F220(a3);
	//__GS__ = *(x_WORD *)&x_BYTE_E3E54[4];
	__writegsx_WORD(*(x_DWORD *)x_BYTE_E3E54 + 2, v5);
	v8 = 17;
	v9 = sub_9F220(*(uint16_t *)&x_BYTE_E3E54[4]);
	v10 = 0;
	sub_91F70_AIL_call_driver((AIL_DRIVER*)*a1, 1286, &v7, &v7);
	return v7;
}

//----- (0009F3D0) --------------------------------------------------------
int64_t sub_9F3D0(int *a1, int a2, uint16_t a3, uint16_t a4)
{
	int64_t v4; // rax
	uint16_t v5; // ax
	int v6; // ebx
	VDI_CALL v8; // [esp+0h] [ebp-14h]
	int16_t v9; // [esp+4h] [ebp-10h]
	int16_t v10; // [esp+6h] [ebp-Eh]
	int16_t v11; // [esp+8h] [ebp-Ch]
	int64_t v12; // [esp+Ch] [ebp-8h]

	if (*(x_DWORD *)x_BYTE_E3E54
		|| *(x_WORD *)&x_BYTE_E3E54[4]
		|| (v4 = sub_9F110(4), *(x_WORD *)&x_BYTE_E3E54[4] = WORD2(v4), (*(x_DWORD *)x_BYTE_E3E54 = v4) != 0)
		|| *(x_WORD *)&x_BYTE_E3E54[4])
	{
		//__GS__ = *(x_WORD *)&x_BYTE_E3E54[4];
		__writegsx_WORD(*(unsigned int *)x_BYTE_E3E54, a4);
		v5 = sub_9F220(a3);
		//__GS__ = *(x_WORD *)&x_BYTE_E3E54[4];
		__writegsx_WORD(*(x_DWORD *)x_BYTE_E3E54 + 2, v5);
		v9 = 23;
		v10 = sub_9F220(*(uint16_t *)&x_BYTE_E3E54[4]);
		v11 = 0;
		sub_91F70_AIL_call_driver((AIL_DRIVER*)*a1, 1286, &v8, &v8);
		if (v8.AX != NULL)
		{
			WORD2(v12) = 0;
			LODWORD(v12) = 0;
		}
		else
		{
			v6 = v11;
			WORD2(v12) = sub_9F1D0(v10);
			LODWORD(v12) = v6;
		}
	}
	else
	{
		WORD2(v12) = 0;
		LODWORD(v12) = 0;
	}
	return v12;
}

//----- (0009F4F0) --------------------------------------------------------
VDI_CALL sub_9F4F0(int *a1, int a2, uint16_t a3, uint16_t a4)
{
	int64_t v4; // rax
	uint16_t v5; // ax
	VDI_CALL result; // [esp+0h] [ebp-10h]
	int16_t v8; // [esp+4h] [ebp-Ch]
	int16_t v9; // [esp+6h] [ebp-Ah]
	int16_t v10; // [esp+8h] [ebp-8h]

	if (!*(x_DWORD *)x_BYTE_E3E54 && !*(x_WORD *)&x_BYTE_E3E54[4])
	{
		v4 = sub_9F110(4);
		*(x_WORD *)&x_BYTE_E3E54[4] = WORD2(v4);
		*(x_DWORD *)x_BYTE_E3E54 = v4;
		if (!(x_DWORD)v4 && !*(x_WORD *)&x_BYTE_E3E54[4])
		{
			result.AX = -1;
			return result;
		}
	}
	//__GS__ = *(x_WORD *)&x_BYTE_E3E54[4];
	__writegsx_WORD(*(unsigned int *)x_BYTE_E3E54, a4);
	v5 = sub_9F220(a3);
	//__GS__ = *(x_WORD *)&x_BYTE_E3E54[4];
	__writegsx_WORD(*(x_DWORD *)x_BYTE_E3E54 + 2, v5);
	v8 = 24;
	v9 = sub_9F220(*(uint16_t *)&x_BYTE_E3E54[4]);
	v10 = 0;
	sub_91F70_AIL_call_driver((AIL_DRIVER*)*a1, 1286, &result, &result);
	return result;
}

//----- (0009F5E0) --------------------------------------------------------
VDI_CALL sub_9F5E0(int *a1, int a2, uint16_t a3, uint16_t a4)
{
	int64_t v4; // rax
	uint16_t v5; // ax
	VDI_CALL result; // [esp+0h] [ebp-10h]
	int16_t v8; // [esp+4h] [ebp-Ch]
	int16_t v9; // [esp+6h] [ebp-Ah]
	int16_t v10; // [esp+8h] [ebp-8h]

	if (!*(x_DWORD *)x_BYTE_E3E54 && !*(x_WORD *)&x_BYTE_E3E54[4])
	{
		v4 = sub_9F110(4);
		*(x_WORD *)&x_BYTE_E3E54[4] = WORD2(v4);
		*(x_DWORD *)x_BYTE_E3E54 = v4;
		if (!(x_DWORD)v4 && !*(x_WORD *)&x_BYTE_E3E54[4])
		{
			result.AX = -1;
			return result;
		}
	}
	//__GS__ = *(x_WORD *)&x_BYTE_E3E54[4];
	__writegsx_WORD(*(unsigned int *)x_BYTE_E3E54, a4);
	v5 = sub_9F220(a3);
	//__GS__ = *(x_WORD *)&x_BYTE_E3E54[4];
	__writegsx_WORD(*(x_DWORD *)x_BYTE_E3E54 + 2, v5);
	v8 = 25;
	v9 = sub_9F220(*(uint16_t *)&x_BYTE_E3E54[4]);
	v10 = 0;
	sub_91F70_AIL_call_driver((AIL_DRIVER*)*a1, 1286, &result, &result);
	return result;
}

//----- (0009F6D0) --------------------------------------------------------
VDI_CALL sub_9F6D0(int *a1, int16_t a2)
{
	VDI_CALL result; // [esp+0h] [ebp-10h]
	int16_t v4; // [esp+4h] [ebp-Ch]
	int16_t v5; // [esp+6h] [ebp-Ah]

	sub_9F170(*(int *)x_BYTE_E3E54, *(uint16_t *)&x_BYTE_E3E54[4]);
	*(x_WORD *)&x_BYTE_E3E54[4] = 0;
	*(x_DWORD *)x_BYTE_E3E54 = 0;
	v4 = 18;
	v5 = a2;
	sub_91F70_AIL_call_driver((AIL_DRIVER*)*a1, 1286, &result, &result);
	return result;
}

//----- (0009F740) --------------------------------------------------------
void sub_9F740(char* a1)//280740
{
	int64_t v1; // rax
	int64_t v2; // rax
	int64_t v3; // rax
	//char v4; // [esp+0h] [ebp-34h]
	char v5[6]; // [esp+14h] [ebp-20h]
	char v6[6]; // [esp+1Ch] [ebp-18h]
	unsigned int v7; // [esp+24h] [ebp-10h]
	char v8; // [esp+28h] [ebp-Ch]
	int v9; // [esp+2Ch] [ebp-8h]
	int i; // [esp+30h] [ebp-4h]

	FILE* file;

	// FIXME: types
	// // if (x_BYTE_E37FC_music && !_stricmp(unk_180BE0, "SBAWE32.MDI") && !_stricmp(&x_BYTE_180C84_drivertype, "w"))
	// {
	// 	if (x_BYTE_E3815 == 1)
	// 	{
	// 		sub_9FA80();
	// 		x_BYTE_E3815 = 0;
	// 	}
	// 	char bulltemp[512] = "Bullfrog";//fix it
	// 	strcpy(bulltemp, (const char*)a1);
	// 	sprintf(printbuffer, "sound//%s.sbk", bulltemp);
	// 	file = sub_98817_open(printbuffer, 512);
	// 	if (file != NULL)
	// 	{
	// 		v7 = x_filelength(file);
	// 		v1 = sub_9F110(512);
	// 		x_WORD_181E30 = WORD2(v1);
	// 		x_DWORD_181E2C = v1;
	// 		if ((x_DWORD)v1 || x_WORD_181E30)
	// 		{
	// 			v9 = sub_9F280((int *)x_DWORD_180C7C);
	// 			if (v9 != -1)
	// 			{
	// 				*(x_WORD *)&v5[4] = x_WORD_181E30;
	// 				*(x_DWORD *)v5 = x_DWORD_181E2C;
	// 				__writegsx_DWORD(x_DWORD_181E2C, 0);
	// 				__writegsx_DWORD(*(x_DWORD *)v5 + 4, v7);
	// 				if (sub_9F2E0((int *)x_DWORD_180C7C, *(int *)v5, *(uint16_t *)&v5[4], 2u).AX == -1//fix
	// 					&& !dos_read(file, x_DWORD_181E2C, (uint16_t)x_WORD_181E30, 512, (x_DWORD)&v8))
	// 				{
	// 					v2 = sub_9F3D0((int *)x_DWORD_180C7C, x_DWORD_181E2C, x_WORD_181E30, 1u);
	// 					*(x_WORD *)&v6[4] = WORD2(v2);
	// 					*(x_DWORD *)v6 = v2;
	// 					if ((x_DWORD)v2 || *(x_WORD *)&v6[4])
	// 					{
	// 						x_lseek(file, __readgsx_DWORD(*(x_DWORD *)v6 + 2), 0);
	// 						for (i = 0; (int16_t)__readgsx_WORD(*(unsigned int *)v6) > i; i++)
	// 						{
	// 							// FIXME: types
	// 							// // if (dos_read(file, x_DWORD_181E2C, (uint16_t)x_WORD_181E30, 512, (x_DWORD)&v8)
	// 							// 	|| sub_9F4F0((int *)x_DWORD_180C7C, x_DWORD_181E2C, x_WORD_181E30, 1u).AX != -1)//fix
	// 							// {
	// 							// 	return;
	// 							// }
	// 						}
	// 						v3 = sub_9F110(__readgsx_DWORD(*(x_DWORD *)v6 + 10));
	// 						x_WORD_181E2A = WORD2(v3);
	// 						x_DWORD_181E26 = v3;
	// 						if ((x_DWORD)v3 || x_WORD_181E2A)
	// 						{
	// 							x_lseek(file, __readgsx_DWORD(*(x_DWORD *)v6 + 6), 0);
	// 							// FIXME: types
	// 							// // if (!dos_read(
	// 							// 	file,
	// 							// 	x_DWORD_181E26,
	// 							// 	(uint16_t)x_WORD_181E2A,
	// 							// 	__readgsx_DWORD(*(x_DWORD *)v6 + 10),
	// 							// 	(x_DWORD)&v8)
	// 							// 	&& sub_9F5E0((int *)x_DWORD_180C7C, x_DWORD_181E26, x_WORD_181E2A, 1u).AX == -1)//fix
	// 							// {
	// 							// 	x_BYTE_E3815 = 1;
	// 							// 	sub_98882_close(file);
	// 							// }
	// 						}
	// 					}
	// 				}
	// 			}
	// 		}
	// 	}
	// }
}

//----- (0009FA80) --------------------------------------------------------
void sub_9FA80()//280a80
{
	if (x_BYTE_E37FC_music && !_stricmp(unk_180BE0, "SBAWE32.MDI") && !_stricmp(&x_BYTE_180C84_drivertype, "w"))
	{
		sub_9F6D0((int *)x_DWORD_180C7C, 1);
		sub_9F170(x_DWORD_181E2C, x_WORD_181E30);
		sub_9F170(x_DWORD_181E26, x_WORD_181E2A);
		x_BYTE_E3815 = 0;
	}
}

//----- (000A0B24) --------------------------------------------------------
int sub_A0B24(int a1)//281b24
{
	if ((uint16_t)a1 < 0x3C4u && (uint16_t)a1 >= 0x3C0u)
	{
		if ((uint16_t)a1 <= 0x3C0u)
		{
			x_inp(986);
			x_outp(960, BYTE2(a1) | 0x20);
			return x_outp(960, SHIBYTE(a1));
		}
		if ((uint16_t)a1 >= 0x3C2u)
			return x_outp((uint16_t)a1, SHIBYTE(a1));
	}
	x_outp((uint16_t)a1, SBYTE2(a1));
	return x_outp((uint16_t)a1 + 1, SHIBYTE(a1));
}

//----- (000A0BB0) --------------------------------------------------------
int sub_A0BB0(int *a1, int a2)//281bb0
{
	int *v2; // ebx
	int v3; // esi
	char v4; // di
	int result; // eax
	int v6; // ST04_4

	v2 = a1;
	v3 = a2;
	x_outp(980, 17);
	v4 = x_inp(981);
	x_outp(980, 17);
	for (result = x_outp(981, v4 & 0x7F); --v3 != -1; result = sub_A0B24(v6))
	{
		v6 = *v2;
		++v2;
	}
	return result;
}

//----- (000A0D2C) --------------------------------------------------------
void sub_A0D2C_VGA_get_pallette(Bit8u* buffer)//281d2c
{
	Bit8u* tempbuffer = VGA_Get_pallette();
	memcpy(buffer, tempbuffer, 768);
	/*int v2; // [esp+4h] [ebp-4h]

	//fix it
	v2 = 0;
	//fix it

	__outx_BYTE(0x3C7u, 0);
	__inx_BYTEstring(0x3C9u, a1, 0x300u);
	return v2;*/
}

//----- (000A0D50) --------------------------------------------------------
void sub_A0D50_set_viewport(int16_t a1, int16_t a2, int16_t a3, int16_t a4)//281d50
{
	//int result; // eax

	x_DWORD_18063C_sprite_sizex = a1;
	x_DWORD_180650_positiony = a2;
	x_DWORD_180648_map_resolution2_x = a3;
	x_DWORD_180644_map_resolution2_y = a4;
	x_DWORD_180634_screen_width = a3 + a1;
	//result = a4;
	x_DWORD_180630_screen_height = a4 + a2;
	//return result;
}

//----- (000A0EEC) --------------------------------------------------------
void sub_A0EEC_s_plus2()//281eec
{
	x_DWORD_E3FF2++;
}

//----- (000A0EF9) --------------------------------------------------------
void sub_A0EF9_s_minus2()//281ef9
{
	x_DWORD_E3FF2--;
}



//----- (000A102C) --------------------------------------------------------
char sub_A102C(int a1)//28202c //fix
{
	unsigned int v1; // et0
	char result; // al
	unsigned int v3; // [esp-4h] [ebp-10h]
	void *retaddr; // [esp+10h] [ebp+4h]

	//fix it
	retaddr = 0;
	//fix it

	v1 = x__readeflags();
	v3 = v1;
	//_disable();
	//__outx_BYTE(0x43u, 0x36u);
	x_DWORD_E3FE6 = a1;
	//__outx_BYTE(0x40u, a1);
	result = BYTE1(a1);
	//__outx_BYTE(0x40u, BYTE1(a1));
	//_disable();
	if (BYTE1(retaddr) & 2)
		;//_enable();
	x__writeeflags(v3);
	return result;
}

//----- (000A105C) --------------------------------------------------------
char sub_A105C(unsigned int a1)//28205c
{
	int v1; // eax

	v1 = 0;
	if (a1 < 0xD68D)
		v1 = 10000 * (uint64_t)a1 / 0x20BC;
	return sub_A102C(v1);
}

//----- (000A108F) --------------------------------------------------------
void sub_A108F()//28208f
{
	unsigned int v0; // ecx
	unsigned int v1; // edi

	sub_91BD0_s_plus();
	v0 = -1;
	v1 = 0;
	do
	{
		if (x_DWORD_E3E9C[v1] && x_DWORD_E3F1C[v1] < v0)
			v0 = x_DWORD_E3F1C[v1];
		v1++;
	} while (v1 < 16);
	if (v0 != x_DWORD_E3FEA)
	{
		x_DWORD_E3FEA = v0;
		sub_A105C(v0);
		memset(x_DWORD_E3EDC, 0, 0x40u);
	}
	sub_91BF0_s_minus();
}

//----- (000A10F4) --------------------------------------------------------
void sub_A10F4_sound_proc_irq()//2820f4
{
	//unsigned int v0; // et0
	uint16_t v1; // dx
	//unsigned int v2; // [esp-8h] [ebp-14h]

	//fix
	v1 = 0;
	//fix

	//v0 = x__readeflags();
	//v2 = v0;
	//_disable();
	//x_WORD_E3FF6 = __DS__;
	sub_A18BE();
	x_DWORD_E3FEE = 0;
	x_DWORD_E3FF2 = 0;
	x_DWORD_E3FEA = -1;
	x_DWORD_E3FF8 = -1;
	memset(x_DWORD_E3E9C, 0, 0x40u);
	memset(x_DWORD_E3EDC, 0, 0x40u);
	memset(x_DWORD_E3F1C, 0, 0x40u);
	memset(x_DWORD_E3F5C, 0, 0x40u);
	/*__asm
	{
	  int     31h; DPMI Services   ax=func xxxxh //eax=200,ebx=8 - system timer?
	  int     21h; DOS - 2+ - GET INTERRUPT VECTOR
	}*/
	x_DWORD_E3FDC = 8;
	//x_WORD_E3FE0 = __DS__;
	x_DWORD_E3FE2 = v1;
	// fix it:__asm { int     21h; DOS - SET INTERRUPT VECTOR }
	x_DWORD_E3E9C[0xf] = 2;
	//sub_92890_AIL_set_timer_period(60, 54925);
	//_disable();
	//if (v2 & 0x200)
//		;// _enable();
	//x__writeeflags(v2);
}

//----- (000A11E2) --------------------------------------------------------
signed int sub_A11E2()//2821e2
{
	//unsigned int v0; // et0
	signed int result; // eax
	//unsigned int v2; // [esp-4h] [ebp-10h]

	// fix it v0 = x__readeflags();
	//v2 = v0;
	//_disable();
	//sub_A102C(0);
	result = 9480;
	// fix it:__asm { int     21h; DOS - SET INTERRUPT VECTOR }
	//_disable();
	//if (v2 & 0x200)
//		;// _enable();
	//x__writeeflags(v2);
	return result;
}

//----- (000A121D) --------------------------------------------------------
Bit16u sub_A121D_AIL_API_get_real_vect(Bit32u vectnum/*int a1, int16_t a2, int a3, int a4*/)//28221d
{
	//Bit8u* v4; // ecx
	//v4 = 0;
	//fix it:__asm { int     31h; DPMI Services   ax=func xxxxh }
	/*v4 = a4 << 16;
	LOWORD(v4) = a2;*/
	//fix it:__asm { int     21h; DOS - 2+ - GET INTERRUPT VECTOR }
	return ac_get_real_vect(vectnum);
}

//----- (000A1249) --------------------------------------------------------
void sub_A1249_AIL_API_set_real_vect(Bit32u vectnum, Bit16u real_ptr)//282249
{
	ac_set_real_vect(vectnum, real_ptr);
	//signed int result; // eax

	//result = 513;
	//fix it:__asm { int     31h; DPMI Services   ax=func xxxxh }
	//return result;
}

//----- (000A12C5) --------------------------------------------------------
// write access to const memory has been detected, the output may be wrong!
signed int sub_A12C5_sound_proc_irq(int a1, int a2, int16_t a3)//2822c5
{
	signed int result; // eax

	if (x_DWORD_E3FF8 == -1)
	{
		// FIXME: types
		// x_DWORD_A128C = (int)((char *)&unk_E4004 - ((unsigned int)&unk_E4004 & 0xFFFFFFF0) + 512);
		x_WORD_A1286 = 0;
		x_WORD_A1277 = 0;
		x_WORD_A12AC = 0;
		x_WORD_A12B3 = a3;
		// FIXME: types
		// x_WORD_A12A2 = (int16_t)((char *)&x_DWORD_A1270 - ((unsigned int)&x_DWORD_A1270 & 0xFFFFFFF0) + 74);
		x_DWORD_E3FF8 = a1;
		//fix it:__asm { int     31h; DPMI Services   ax=func xxxxh }
		x_DWORD_E3FFC = 49407;
		//x_DWORD_E4000 = __DS__;
		result = 517;
		//fix it:__asm { int     31h; DPMI Services   ax=func xxxxh }
	}
	return result;
}

//----- (000A14DB) --------------------------------------------------------
void sub_A14DB_AIL_API_restore_USE16_ISR(int a1)//2824db
{
	//signed int result; // eax

	if (a1 != -1 && a1 == x_DWORD_E3FF8)
	{
		//result = 517;
		//fix it:__asm { int     31h; DPMI Services   ax=func xxxxh }
		x_DWORD_E3FF8 = -1;
	}
	//return result;
}

//----- (000A1520) --------------------------------------------------------
unsigned int sub_A1520()//282520
{
	unsigned int v0; // et0
	unsigned int result; // eax

	v0 = x__getcallerseflags();
	result = v0;
	//_disable();
	return result;
}

//----- (000A1524) --------------------------------------------------------
void sub_A1524(unsigned int a1)//282524
{
	void *retaddr; // [esp+4h] [ebp+4h]

	//fix it
	retaddr = 0;
	//fix it

	//_disable();
	if (BYTE1(retaddr) & 2)
		;// _enable();
	x__writeeflags(a1);
}

//----- (000A158B) --------------------------------------------------------
Bit32s sub_A158B_AIL_API_call_driver(AIL_DRIVER* drvr, Bit32s fn, VDI_CALL* in, VDI_CALL* out)//28258b
{
	return ac_sound_call_driver(drvr, fn, in, out);
}

//----- (000A1665) --------------------------------------------------------
void sub_A1665_AIL_API_delay(int a1)//282665
{
	mydelay(a1);
	/*uint8_t result; // al
	uint16_t v2; // dx
	int i; // ecx
	uint8_t v4; // al

	result = MEMORY[0x463];
	v2 = MEMORY[0x463] + 6;
	for ( i = a1; i; i-- )
	{
	  do
		v4 = __inx_BYTE(v2);
	  while ( !(v4 & 8) );
	  do
		result = __inx_BYTE(v2);
	  while ( result & 8 );
	}
	return result;*/
}

//----- (000A16A2) --------------------------------------------------------
int sub_A16A2()//2826a2
{
	return x_DWORD_E3FEE;
}

//----- (000A171D) --------------------------------------------------------
void sub_A171D_release_timer_handle(Bit32s a1)//28271d
{
	sub_91BD0_s_plus();
	if (a1 != -1)
		*(int *)((char *)x_DWORD_E3E9C + a1) = 0;
	sub_91BF0_s_minus();
}

//----- (000A1744) --------------------------------------------------------
void sub_A1744_AIL_API_release_all_timers()//282744
{
	int v0; // esi
	uint8_t v1; // of

	sub_91BD0_s_plus();
	v0 = 56;
	do
	{
		//sub_92DC0_AIL_release_timer_handle(v0);
		v1 = __OFSUB__(v0, 4);
		v0 -= 4;
	} while (!((v0 < 0) ^ v1));
	sub_91BF0_s_minus();
}
/*
//----- (000A1768) --------------------------------------------------------
void sub_A1768_start_timer(HTIMER timer)//282768
{
	sub_91BD0_s_plus();
	if (timer != -1 && *(int *)((char *)x_DWORD_E3E9C + timer) == 1)
		*(int *)((char *)x_DWORD_E3E9C + timer) = 2;
	sub_91BF0_s_minus();
}
*/
//----- (000A1798) --------------------------------------------------------
void sub_A1798()//282798
{
	int v0; // esi
	uint8_t v1; // of

	sub_91BD0_s_plus();
	v0 = 56;
	do
	{
		//sub_92BA0_AIL_start_timer(v0);
		v1 = __OFSUB__(v0, 4);
		v0 -= 4;
	} while (!((v0 < 0) ^ v1));
	sub_91BF0_s_minus();
}

//----- (000A17BC) --------------------------------------------------------
void sub_A17BC_stop_timer(HTIMER timer)//2827bc
{
	sub_91BD0_s_plus();
	if (timer != -1 && *(int *)((char *)x_DWORD_E3E9C + timer) == 2)
		*(int *)((char *)x_DWORD_E3E9C + timer) = 1;
	sub_91BF0_s_minus();
}

//----- (000A17EC) --------------------------------------------------------
void sub_A17EC()//2827ec
{
	int v0; // esi
	uint8_t v1; // of

	sub_91BD0_s_plus();
	v0 = 56;
	do
	{
		//sub_92CB0_AIL_stop_timer(v0);
		v1 = __OFSUB__(v0, 4);
		v0 -= 4;
	} while (!((v0 < 0) ^ v1));
	sub_91BF0_s_minus();
}

//----- (000A1810) --------------------------------------------------------
void sub_A1810_set_timer_period(HTIMER timer, Bit32u microseconds)//282810
{
	sub_91BD0_s_plus();
	*(int *)((char *)x_DWORD_E3F1C + timer) = microseconds;
	*(int *)((char *)x_DWORD_E3EDC + timer) = 0;
	sub_A108F();
	sub_91BF0_s_minus();
}

//----- (000A1840) --------------------------------------------------------
void sub_A1840_AIL_API_set_timer_frequency(HTIMER timer, Bit32u hertz)//282840
{
	sub_91BD0_s_plus();
	//sub_92890_AIL_set_timer_period(timer, 1000000 / hertz);
	sub_91BF0_s_minus();
}

//----- (000A1870) --------------------------------------------------------
void sub_A1870(int a1, unsigned int a2)//282870
{
	int v2; // eax

	sub_91BD0_s_plus();
	if (a2)
		v2 = 10000 * (uint64_t)a2 / 0x2E9C;
	else
		v2 = 54925;
	//sub_92890_AIL_set_timer_period(a1, v2);
	sub_91BF0_s_minus();
}

//----- (000A18B2) --------------------------------------------------------
int sub_A18B2()//2828b2
{
	return x_DWORD_E3FE6;
}

//----- (000A18BE) --------------------------------------------------------
void sub_A18BE()//2828be
{
	//sub_9D590_lock_linear_region((Bit8u*)x_DWORD_E3E5C, (unsigned int)x_BYTE_E4A0C);
	//sub_9D590_lock_linear_region((Bit8u*)sub_A0EEC_s_plus2, (unsigned int)sub_A18BE);
}

//----- (000A1F90) --------------------------------------------------------
void sub_A1F90()//282f90
{
	//bool result; // eax

	if (!x_DWORD_E4A90)
	{
		// FIXME: types
		// sub_9D590_lock_linear_region((Bit8u*)sub_A1F90, (unsigned int)sub_A4260);
		sub_9D710((Bit8u*)x_BYTE_E4A0C, 128);
		sub_9D710((Bit8u*)&x_DWORD_E4A8C, 4);
		sub_9D710((Bit8u*)&x_DWORD_181E94, 4);
		sub_9D710((Bit8u*)unk_181E80x, 12);
		sub_9D710((Bit8u*)&x_DWORD_181E9C, 4);
		sub_9D710((Bit8u*)&x_DWORD_181EA0, 4);
		sub_9D710((Bit8u*)&x_DWORD_181E90, 4);
		sub_9D710((Bit8u*)&x_DWORD_181E98, 4);
		sub_9D710((Bit8u*)&x_DWORD_181E8C, 4);
		sub_B0C46();
		x_DWORD_E4A90 = 1;
	}
	//return result;
}

//----- (000A2070) --------------------------------------------------------
void sub_A2070(HDIGDRIVER a1)//283070
{
	VDI_CALL v2; // [esp+0h] [ebp-Ch]
	int16_t v3; // [esp+4h] [ebp-8h]
	int16_t v4; // [esp+6h] [ebp-6h]

	/*
	cx=5622
	dx=a20002
	si=2b6f44
	di=35001a
	*/

	if (!a1->playing_21)
	{
		v4 = a1->hw_format_6;
		v3 = a1->DMA_rate_5;
		sub_91F70_AIL_call_driver(a1->drvr_0, 1025, &v2, 0);
		a1->playing_21 = 1;
	}
}

//----- (000A20D0) --------------------------------------------------------
void sub_A20D0(HDIGDRIVER a1)//2830d0
{
	if (a1->playing_21)
	{
		sub_91F70_AIL_call_driver(a1->drvr_0, 1026, 0, 0);
		a1->playing_21 = 0;
	}
}

//----- (000A2110) --------------------------------------------------------
void sub_A2110(HSAMPLE S)//283110
{
	//int result; // eax
	//int *v2; // edx
	//int *v3; // edx
	//int *v4; // edx
	//int *v5; // edx
	//int *v6; // edx
	//int *v7; // edx
	//int *v8; // edx
	//int *v9; // edx
	//int *v10; // edx
	int v11; // [esp+0h] [ebp-24h]
	int v12; // [esp+4h] [ebp-20h]
	int v13; // [esp+8h] [ebp-1Ch]
	//int v14; // [esp+Ch] [ebp-18h]
	int v15; // [esp+14h] [ebp-10h]
	int v16; // [esp+18h] [ebp-Ch]
	int v17; // [esp+1Ch] [ebp-8h]
	signed int l; // [esp+20h] [ebp-4h]
	signed int m; // [esp+20h] [ebp-4h]
	signed int n; // [esp+20h] [ebp-4h]
	signed int i; // [esp+20h] [ebp-4h]
	signed int j; // [esp+20h] [ebp-4h]
	signed int k; // [esp+20h] [ebp-4h]

	if (S->volume_16 <= 127)
	{
		if (S->volume_16 < 0)
			S->volume_16 = 0;
	}
	else
	{
		S->volume_16 = 127;
	}
	if (S->pan_17 <= 127)
	{
		if (S->pan_17 < 0)
			S->pan_17 = 0;
	}
	else
	{
		S->pan_17 = 127;
	}
	//v14 = S->sam_var17_volume_pan;
	v17 = S->sam_var[26] * S->pan_17 / 127;
	if (v17 < 0)
		v17 = 0;
	if (v17 > 127)
		v17 = 127;
	if (S->format_13 != 1 && S->format_13 != 3)
	{//set volume table
		if (v17)
			v17++;
		if (S->sam_var[6] != 2
			&& S->sam_var[6] != 3
			&& (S->sam_var[6] && S->sam_var[6] != 1 || S->format_13 != 2 && S->format_13 != 3))
		{
			//v11 = (int)&S->sam_varw18;
			v11 = 0;
			//result = (int)S;
			if (S->flags_14 & 1)
			{
				for (i = 0; i < 32768; i += 256)
				{
					//result = v17 * i >> 7;
					/*v8 = */S->vol_scale_18[0][v11] = v17 * i >> 7;
					v11++;
					//*v8 = v17 * i >> 7;
				}
				for (j = -32768; j < 0; j += 256)
				{
					//result = v17 * i >> 7;
					/*v8 = */S->vol_scale_18[0][v11] = v17 * j >> 7;
					v11++;
					//*v8 = v17 * i >> 7;
				}
			}
			else
			{
				for (k = -32768; k < 32768; k += 256)
				{
					//result = v17 * i >> 7;
					/*v8 = */S->vol_scale_18[0][v11] = v17 * k >> 7;
					v11++;
					//*v8 = v17 * i >> 7;
				}
			}
		}
		else
		{
			//v13 = (int)&S->sam_varw18;
			//v12 = (int)&S->sam_var[274];
			v13 = 0;
			v12 = 0;
			v16 = x_BYTE_E4A0C[127 - S->pan_17];
			v15 = x_BYTE_E4A0C[S->pan_17];
			//result = (int)&S;
			if (S->flags_14 & 1)
			{
				for (l = 0; l < 32768; l += 256)
				{
					S->vol_scale_18[0][v13] = v16 * (v17 * l >> 7) >> 7;
					v13++;
					/*
								  v2 = (int *)v13;
								  v13 += 4;
								  *v2 = v16 * (v17 * l >> 7) >> 7;*/
								  //result = v15 * (v17 * l >> 7) >> 7;
					S->vol_scale_18[0][v12] = v15 * (v17 * l >> 7) >> 7;
					v12++;
					/* v3 = (int *)v12;
					 v12 += 4;
					 *v3 = v15 * (v17 * l >> 7) >> 7;*/
				}
				for (m = -32768; m < 0; m += 256)
				{
					S->vol_scale_18[0][v13] = v16 * (v17 * m >> 7) >> 7;
					v13++;
					/*v4 = (int *)v13;
					v13 += 4;
					*v4 = v16 * (v17 * m >> 7) >> 7;*/
					//result = v15 * (v17 * m >> 7) >> 7;
					S->vol_scale_18[0][v12] = v15 * (v17 * m >> 7) >> 7;
					v12++;
					/*v5 = (int *)v12;
					v12 += 4;
					*v5 = v15 * (v17 * m >> 7) >> 7;*/
				}
			}
			else
			{
				for (n = -32768; n < 32768; n += 256)
				{
					S->vol_scale_18[0][v13] = v15 * (v17 * n >> 7) >> 7;
					v13++;
					/*
				  v6 = (int *)v13;
				  v13 += 4;
				  *v6 = v16 * (v17 * n >> 7) >> 7;*/
				  //result = v15 * (v17 * n >> 7) >> 7;
					S->vol_scale_18[0][v12] = v15 * (v17 * n >> 7) >> 7;;
					v12++;
					/*
				  v7 = (int *)v12;
				  v12 += 4;
				  *v7 = v15 * (v17 * n >> 7) >> 7;*/
				}
			}
		}
	}
	else
	{//set fix volume
		S->vol_scale_18[0][0] = v17 * x_BYTE_E4A0C[127 - S->pan_17] / 127;
		//result = v17 * (uint8_t)x_BYTE_E4A0C[v14] / 127;
		S->sam_var[274] = v17 * x_BYTE_E4A0C[S->pan_17] / 127;
	}
	//return result;
}

//----- (000A2650) --------------------------------------------------------
int sub_A2650(HDIGDRIVER a1)//283650
{
	int v1; // eax
	Bit32s v2; // eax
	unsigned int v4; // [esp+0h] [ebp-44h]
	unsigned int v5; // [esp+8h] [ebp-3Ch]
	int v6[4]; // [esp+Ch] [ebp-38h]
	//int v7; // [esp+10h] [ebp-34h]//1
	//int v8; // [esp+14h] [ebp-30h]//2
	//int v9; // [esp+18h] [ebp-2Ch]//3
	int v10; // [esp+1Ch] [ebp-28h]
	int v11; // [esp+20h] [ebp-24h]
	unsigned int v12; // [esp+24h] [ebp-20h]
	int v13; // [esp+28h] [ebp-1Ch]
	int v14; // [esp+2Ch] [ebp-18h]
	Bit32s j; // [esp+30h] [ebp-14h]
	int v16; // [esp+34h] [ebp-10h]
	int v17; // [esp+38h] [ebp-Ch]
	int v18; // [esp+3Ch] [ebp-8h]
	Bit32s i; // [esp+40h] [ebp-4h]

	//fix
	v14 = 0;
	//fix
	v11 = a1->playing_21;
	if (v11)
	{
		for (i = 0; i < a1->n_samples_24; i++)
		{
			a1->samples_23[i].sam_var[548] = a1->samples_23[i].status_1;
			if (a1->samples_23[i].status_1 == 4)
				a1->samples_23[i].status_1 = 8;
		}
		sub_A20D0(a1);
		sub_B0C1A(a1);
		//dma - sub_B0B87(a1, 0);//fix
		//dma - sub_B0B87(a1, 1);//fix
	}
	v5 = 2 * x_DWORD_181DAC[7] | x_DWORD_181DAC[8];
	if (v5 <= 3)
	{
		switch (v5)
		{
		case 0u:
			v6[0] = 0;
			v6[1] = 1;
			v6[2] = 2;
			v6[3] = 3;
			break;
		case 1u:
			v6[0] = 1;
			v6[1] = 0;
			v6[2] = 3;
			v6[3] = 2;
			break;
		case 2u:
			v6[0] = 2;
			v6[1] = 3;
			v6[2] = 0;
			v6[3] = 1;
			break;
		case 3u:
			v6[0] = 3;
			v6[1] = 2;
			v6[2] = 1;
			v6[3] = 0;
			break;
		}
	}
	for (i = 0; i < 4; i++)
	{
		if (*(x_BYTE *)(v6[i] + (Bit8u*)&a1->DDT_1))
		{
			a1->hw_format_6 = v6[i];
			break;
		}
	}
	a1->hw_mode_flags_7 = *(x_DWORD *)(14 * a1->hw_mode_flags_7 + (Bit8u*)&a1->DDT_1 + 26);
	if (x_DWORD_181DAC[1] < 1)
	{
		if (!x_DWORD_181DAC[1])
		{
			a1->DMA_rate_5 = *(uint16_t *)(14 * a1->hw_format_6 + (Bit8u*)&a1->DDT_1 + 16);
			goto LABEL_33;
		}
	}
	else
	{
		if (x_DWORD_181DAC[1] == 0)
		{
			a1->DMA_rate_5 = *(uint16_t *)(14 * a1->hw_format_6 + (Bit8u*)&a1->DDT_1 + 18);
			goto LABEL_33;
		}
		if (x_DWORD_181DAC[1] == 2)
		{
			a1->DMA_rate_5 = *(uint16_t *)(14 * a1->hw_format_6 + (Bit8u*)&a1->DDT_1 + 20);
			goto LABEL_33;
		}
	}
	j = x_DWORD_181DAC[1];
	v6[0] = *(uint16_t *)(14 * a1->hw_format_6 + (Bit8u*)&a1->DDT_1 + 16);
	v6[1] = *(uint16_t *)(14 * a1->hw_format_6 + (Bit8u*)&a1->DDT_1 + 18);
	v6[2] = *(uint16_t *)(14 * a1->hw_format_6 + (Bit8u*)&a1->DDT_1 + 20);
	v13 = 0x7FFFFFFF;
	for (i = 0; i < 3; i++)
	{
		v1 = abs(j - v6[i]);
		if (v1 <= v13)
		{
			v13 = abs(j - v6[i]);
			v14 = i;
		}
	}
	a1->DMA_rate_5 = v6[v14];
LABEL_33:
	v4 = a1->hw_format_6;
	if (v4 <= 3)
	{
		switch (v4)
		{
		case 0u:
			a1->channels_per_sample_15 = 1;
			a1->bytes_per_channel_16 = 1;
			break;
		case 1u:
			a1->channels_per_sample_15 = 1;
			a1->bytes_per_channel_16 = 2;
			break;
		case 2u:
			a1->channels_per_sample_15 = 2;
			a1->bytes_per_channel_16 = 1;
			break;
		case 3u:
			a1->channels_per_sample_15 = 2;
			a1->bytes_per_channel_16 = 2;
			break;
		}
	}
	v16 = x_DWORD_181DAC[3] * a1->DMA_rate_5 / 1000;
	a1->half_buffer_size_4 = a1->channels_per_sample_15 * a1->bytes_per_channel_16 * v16;
	v18 = *(uint16_t *)(14 * a1->hw_format_6 + (Bit8u*)&a1->DDT_1 + 22);
	v17 = *(uint16_t *)(14 * a1->hw_format_6 + (Bit8u*)&a1->DDT_1 + 24);
	if (!x_DWORD_181DAC[18])
		goto LABEL_64;
	if (v17 > 2048)
		v17 = 2048;
	/*if (v18 > 2048)
	{
		strcpy_s(x_BYTE_181C90, strlen("Minimum DMA buffer size too large for VDM\n") + 1, "Minimum DMA buffer size too large for VDM\n");
		v10 = 0;
	}
	else*/
	{
	LABEL_64:
		v13 = 0x7FFFFFFF;
		for (j = 8; x_DWORD_181DAC[2] / 2 >= j; j *= 2)//00352DB4
		{
			v2 = abs(j - a1->half_buffer_size_4);
			if (v2 <= v13)
			{
				v13 = abs(j - a1->half_buffer_size_4);
				v14 = j;
			}
		}
		//adress 283b19
		a1->half_buffer_size_4 = v14;//354f64->0000800
		if (a1->half_buffer_size_4 < v18)
			a1->half_buffer_size_4 = v18;
		if (a1->half_buffer_size_4 > v17)
			a1->half_buffer_size_4 = v17;
		// FIXME: types
		// v12 = (int)a1->DMA_seg_8;
		if (x_DWORD_181DAC[18])
		{
			v12 >>= 12;
			v12 += 4095;
			v12 &= 0xFF000;
			v12 <<= 12;
		}
		a1->DST_2->DMA_buffer_A = (void*)v12;
		a1->DST_2->DMA_buffer_B = (void*)(a1->half_buffer_size_4 + v12);
		//fix get from sound buffer
		//fix a1->DMA_11_12[0] = (void*)((int)a1->DST_2.DMA_buffer_A & 0xFFFF) + 16 * ((int)a1->DST_2.DMA_buffer_A >> 16);
		//fix a1->DMA_11_12[1] = (void*)((int)a1->DST_2.DMA_buffer_B & 0xFFFF) + 16 * ((int)a1->DST_2.DMA_buffer_B >> 16);
		if (v11)
		{
			for (i = 0; i < a1->n_samples_24; i++)
				a1->samples_23[i].status_1 = a1->samples_23[i].sam_var[548];
			sub_B0C1A(a1);
			//dma sub_B0B87(a1, 0);//fix
			//dma sub_B0B87(a1, 1);//fix
			sub_A2070(a1);
		}
		v10 = 1;
	}
	return v10;
}

Bit16s envstring[0x18] = {
	220,7,01,05,-1,-1,-1,-1,
	-1,-1,-1,-1,220,05,01,05,
	-1,-1,-1,-1,-1,-1,-1,-1
};

//----- (000A2C80) --------------------------------------------------------
int sub_A2C80(HDIGDRIVER a1, IO_PARMS* a2)//283c80
{
	Bit16s v3[0x18]; // [esp+0h] [ebp-30h]
	//int16_t v4; // [esp+2h] [ebp-2Eh]
	//int16_t v5; // [esp+4h] [ebp-2Ch]
	//int16_t v6; // [esp+6h] [ebp-2Ah]
	Bit16s v7[4]; // [esp+8h] [ebp-28h]
	VDI_CALL v8; // [esp+18h] [ebp-18h]
	Bit16s v9; // [esp+1Eh] [ebp-12h]
	unsigned int i; // [esp+24h] [ebp-Ch]
	Bit16s *v11; // [esp+28h] [ebp-8h]

	//fix it
	//v4 = 0;
	//v5 = 0;
	//v6 = 0;
	//fix it

	//qmemcpy(v3, (void*)a2, 0x18u); // fix it
	if (a1->drvr_0->VHDR_4->environment_string_16)
	{
		/*
		eax = [ebp+10]//1a7884
		eax=[eax]//1a7758
		eax=[eax+10]//2c380

		eax = [ebp+10]//1a7884
		eax=[eax]//1a7758
		eax=[eax+10]//2c380
		eax=[eax+0c]>>16<<4//2c38

		eax = [ebp+10]//1a7884
		eax=[eax]//1a7758
		eax=[eax+10]//2c380//[eax+0c] je 2c38050e
		eax=[eax+0c]&&ffff//50e
		+ = 2c88e - final adress
		*/
		/*v11 = (int16_t *)((a1->var0_aildrv->AIL_DRIVER_var4_VHDR->environment_string & 0xFFFF)
						+ 16 * (a1->var0_aildrv->AIL_DRIVER_var4_VHDR->environment_string >> 16));*/
						//fixed
		v11 = envstring;//fixed
		if (v3[0] < 0)
			v3[0] = v11[0];
		if (v3[1] < 0)
			v3[1] = v11[1];
		if (v3[2] < 0)
			v3[2] = v11[2];
		if (v3[3] < 0)
			v3[3] = v11[3];
		for (i = 0; i < 4; i++)
		{
			if (v7[i] < 0)
				v7[i] = v11[2 * i + 4];
		}
	}
	qmemcpy((void *)&(a1->drvr_0->VHDR_4->IO), v3, 0x18u);
	if (x_DWORD_181DAC[9])
		v9 = 3;
	else
		v9 = 1;
	return sub_91F70_AIL_call_driver(a1->drvr_0, 772, &v8, 0);
}

//----- (000A2EA0) --------------------------------------------------------
HDIGDRIVER sub_A2EA0(AIL_DRIVER* a1, IO_PARMS IO)//283ea0
{
	int v2; // ST0C_4
	int v3; // ST08_4
	int v4; // ST0C_4
	int v5; // ST08_4
	Bit8u* v6; // eax
	int v7; // ST0C_4
	int v8; // ST08_4
	int v9; // ST0C_4
	int v10; // ST08_4
	unsigned int v11; // eax
	int v12; // ST0C_4
	int v13; // ST08_4
	Bit8u v15[0x18 * 4]; // [esp+0h] [ebp-50h]
	VDI_CALL v16/*[100]*/; // [esp+18h] [ebp-38h]
	//Bit16s v17; // [esp+1Ah] [ebp-36h]
	//uint16_t v18; // [esp+1Ch] [ebp-34h]
	//uint16_t v19; // [esp+1Eh] [ebp-32h]
	HDIGDRIVER result; // [esp+24h] [ebp-2Ch]
	int v21; // [esp+28h] [ebp-28h]
	unsigned int v22; // [esp+2Ch] [ebp-24h]
	unsigned int v23; // [esp+30h] [ebp-20h]
	unsigned int v24; // [esp+34h] [ebp-1Ch]
	int v25; // [esp+38h] [ebp-18h]
	HDIGDRIVER v26 = NULL; // [esp+3Ch] [ebp-14h]
	unsigned int v27; // [esp+40h] [ebp-10h]
	int v28; // [esp+44h] [ebp-Ch]
	int i; // [esp+48h] [ebp-8h]
	Bit8u* v30; // [esp+4Ch] [ebp-4h]
	IO_PARMS* v31; // [esp+64h] [ebp+14h]
	IO_PARMS* v32; // [esp+64h] [ebp+14h]

	//fix it
	//v17 = 0;
	//v18 = 0;
	//v19 = 0;
	v28 = 0;
	v31 = 0;
	//result = 0;
	//fix it

	sub_A1F90();//lock linear
	v26 = (_DIG_DRIVER*)sub_9D450_malloc4(sizeof(_DIG_DRIVER));
	//fixed
	v26->hw_format_6 = 0;
	v26->hw_mode_flags_7 = 0;
	//fixed
	if (v26)
	{
		v26->drvr_0 = a1;//fix it
		if (v26->drvr_0->type_5)
		{
			qmemcpy(&x_BYTE_181C90, (void*)".DIG driver required\n", 0x16u);
			sub_9D490_free4(v26, 140);
			result = 0;
		}
		else
		{
			sub_91F70_AIL_call_driver(v26->drvr_0, 769, 0, &v16);//354fa8
			//fix it! write read DDT function for next two lines
			v26->DDT_1 = (DIG_DDT*)sound_buffer[0/*v16.AX*/];//(Bit8u*)v16.AX +16 * v16.DX;//fix
			v26->DST_2 = (DIG_DST*)sound_buffer[1/*v16.BX*/];//(Bit8u*)v16.BX + 16 * v16.CX;//fix
			v26->buffer_flag_13 = (Bit16s*)v26->DST_2->active_buffer;
			v26->last_buffer_14 = -1;
			v26->playing_21 = 0;
			v26->quiet_22 = 0;
			v26->n_active_samples_25 = 0;
			v26->master_volume_26 = 127;
			memset(&unk_181D90, -1, 24);
			v28 = 0;
			if (&IO)
			{
				qmemcpy(&unk_181D90, (void*)&IO, 0x18u);
				if (sub_A2C80(v26, &IO))
				{
					v28 = 1;
					qmemcpy(v15, (void*)&IO, 0x18u);
				}
			}
			if (!v28)
			{
				v31 = sub_92ED0_AIL_get_IO_environment(v26->drvr_0);
				if (v31)
				{
					qmemcpy(&unk_181D90, v31, 0x18u);
					if (sub_A2C80(v26, v31))
					{
						v28 = 1;
						qmemcpy(v15, v31, 0x18u);
					}
				}
			}
			if (!v28 && x_DWORD_181DAC[17] == 1)
			{
				for (i = 0; (int)v26->drvr_0->VHDR_4->environment_string_16 > i; i++)//fix
				{
					v32 = (IO_PARMS*)(24 * i
						+ (v26->drvr_0->VHDR_4->environment_string_16 & 0xFFFF)//fix - 12
						+ 16 * (v26->drvr_0->VHDR_4->environment_string_16 >> 16));//fix - 12
					if (!i)
						qmemcpy(&unk_181D90, (void*)v32, 0x18u);
					// FIXME: types
					// // if (sub_A2C80(v26, v32))
					// {
					// 	v28 = 1;
					// 	qmemcpy(v15, (void*)v32, 0x18u);
					// 	break;
					// }
				}
			}
			if (v28)
			{
				qmemcpy(&unk_181D90, v15, 0x18u);
				if (x_DWORD_181DAC[18])
					v25 = 0x2000;
				else
					v25 = x_DWORD_181DAC[2];
				v26->DMA_buf_10 = 0;
				//do //fixed
				{
					if (!sub_9D4D0(1,//fixed - find true size DMA buffer
							//(v25 + 15 - (__CFSHL__((v25 + 15) >> 31, 4) + 16 * ((v25 + 15) >> 31))) >> 4,
						(Bit8u**)&v30, (Bit32u*)&v22, (Bit32u*)&v21))
					{
						qmemcpy(&x_BYTE_181C90, (void*)"Could not allocate DMA buffers\n", 0x20u);
						sub_9D490_free4(v26, 140);
						return 0;
					}
					if (v26->DMA_buf_10)
					{
						v2 = v26->DMA_sel_9;
						// FIXME: types
						// v3 = (int)v26->DMA_seg_8;
						sub_9D560((Bit8u*)v26->DMA_buf_10);
					}
					v26->DMA_buf_10 = (void*)v30;
					v26->DMA_sel_9 = v22;
					v26->DMA_seg_8 = (void*)v21;
					v27 = v22 >> 12;
					v24 = 0xF0000 & (v22 >> 12);
					v23 = 0xF0000 & (v25 + (v22 >> 12) - 1);
				}
				//while ( (0xF0000 & (v22 >> 12)) != v23 );*/ // fix allocate dma buffers
				if (sub_A2650(v26))
				{
					sub_91F70_AIL_call_driver(v26->drvr_0, 773, 0, 0);
					v26->drvr_0->initialized_6 = 1;
					v26->samples_per_buffer_18 = v26->half_buffer_size_4 / (v26->bytes_per_channel_16 * v26->channels_per_sample_15);
					v26->channels_per_buffer_17 = v26->half_buffer_size_4 / v26->bytes_per_channel_16;
					v26->build_size_19 = 4 * v26->channels_per_buffer_17;
					v6 = sub_9D450_malloc4(v26->build_size_19);
					v26->build_buffer_20 = (Bit32s*)v6;
					if (v26->build_buffer_20)
					{
						v26->n_samples_24 = x_DWORD_181DAC[4];
						v26->samples_23 = (_SAMPLE*)sub_9D450_malloc4(sizeof(_SAMPLE) * v26->n_samples_24);
						if (v26->samples_23)
						{
							for (i = 0; i < v26->n_samples_24; i++)
							{
								v26->samples_23[i].status_1 = 1;
								v26->samples_23[i].driver_0 = v26;
								v26->samples_23[i].index_sample = i;//fixed
							}
							//v11 = sub_92600_AIL_register_timer(sub_A2450);
							v11 = 1;//fix
							v26->timer_3 = v11;
							if (v26->timer_3 == -1)
							{
								qmemcpy(&x_BYTE_181C90, (void*)"Out of timer handles\n", 0x16u);
								if (a1->PM_ISR_7 != -1)
									sub_91E90_AIL_restore_USE16_ISR(a1->PM_ISR_7);
								sub_91F70_AIL_call_driver(v26->drvr_0, 774, 0, 0);
								v26->n_samples_24 = 0;
								v12 = v26->DMA_sel_9;
								// FIXME: types
								// v13 = (int)v26->DMA_seg_8;
								sub_9D560((Bit8u*)v26->DMA_buf_10);
								sub_9D490_free4(v26->samples_23, sizeof(_SAMPLE) * v26->n_samples_24);
								sub_9D490_free4(v26->build_buffer_20, v26->build_size_19);
								sub_9D490_free4(v26, 140);
								result = 0;
							}
							else
							{
								//sub_92740_AIL_set_timer_user(v26->timer_3, (int32_t)v26);
								//sub_92930_AIL_set_timer_frequency(v26->timer_3, x_DWORD_181DAC[0]);//00352DAC not zero!
								//sub_92BA0_AIL_start_timer(v26->timer_3);
								// FIXME: types
								// v26->var36_aildrv = (x_DWORD)sub_A2DE0;
								// FIXME: types
								// v26->var40_aildrv = (x_DWORD)v26;
								sub_B0C1A(v26);
								//dma sub_B0B87(v26, 0);//fix
								//dma sub_B0B87(v26, 1);//fix
								result = v26;
							}
						}
						else
						{
							qmemcpy(&x_BYTE_181C90, (void*)"Could not allocate SAMPLE structures\n", 0x26u);
							if (a1->PM_ISR_7 != -1)
								sub_91E90_AIL_restore_USE16_ISR(a1->PM_ISR_7);
							sub_91F70_AIL_call_driver(v26->drvr_0, 774, 0, 0);
							v26->n_samples_24 = 0;
							v9 = v26->DMA_sel_9;
							// FIXME: types
							// v10 = (int)v26->DMA_seg_8;
							sub_9D560((Bit8u*)v26->DMA_buf_10);
							sub_9D490_free4(v26->samples_23, v26->build_size_19);
							sub_9D490_free4(v26, 140);
							result = 0;
						}
					}
					else
					{
						qmemcpy(&x_BYTE_181C90, (void*)"Could not allocate build buffer\n", 0x21u);
						if (a1->PM_ISR_7 != -1)
							sub_91E90_AIL_restore_USE16_ISR(a1->PM_ISR_7);
						sub_91F70_AIL_call_driver(v26->drvr_0, 774, 0, 0);
						v26->n_samples_24 = 0;
						v7 = v26->DMA_sel_9;
						// FIXME: types
						// v8 = (int)v26->DMA_seg_8;
						sub_9D560((Bit8u*)v26->DMA_buf_10);
						sub_9D490_free4(v26, 140);
						result = 0;
					}
				}
				else
				{
					v4 = v26->DMA_sel_9;
					// FIXME: types
					// v5 = (int)v26->DMA_seg_8;
					sub_9D560((Bit8u*)v26->DMA_buf_10);
					sub_9D490_free4(v26, 140);
					result = 0;
				}
			}
			else
			{
				qmemcpy(&x_BYTE_181C90, (void*)"Digital sound hardware not found\n", 0x22u);
				sub_9D490_free4(v26, 140);
				result = 0;
			}
		}
	}
	else
	{
		qmemcpy(&x_BYTE_181C90, (void*)"Could not allocate memory for driver\n", 0x26u);
		result = 0;
	}
	return result;
}

//----- (000A3600) --------------------------------------------------------
HDIGDRIVER sub_A3600_AIL_API_install_DIG_driver_file(/*int a1,*/ char* filename, IO_PARMS* IO)//284600
{
	//ac_sound_install_dig_driver_file
	int v3; // eax
	HDIGDRIVER result; // [esp+0h] [ebp-10h]
	Bit8u* v6; // [esp+4h] [ebp-Ch]
	HDIGDRIVER v7; // [esp+8h] [ebp-8h]
	AIL_DRIVER *v8; // [esp+Ch] [ebp-4h]

	v6 = sub_9DEA0_read_file(filename, 0);
	if (v6)
	{
		v3 = sub_9DE20_get_file_lenght(filename);
		v8 = sub_93010_AIL_install_driver(/*a1, */v6, v3);
		/*
		chyby
		2 a 3 c095 versus 382c

		*/
		x_free((void*)v6);
		if (v8)
		{
			//   IO
			v7 = sub_A2EA0(v8, *IO);
			if (!v7)
				sub_93160_AIL_uninstall_driver(v8);
			result = v7;
		}
		else
		{
			result = 0;
		}
	}
	else
	{
		strcpy(x_BYTE_181C90, "Driver file not found\n");
		result = 0;
	}
	return result;
}

//----- (000A36B0) --------------------------------------------------------
HDIGDRIVER sub_A36B0(int a1, Bit8u* a2, int a3, IO_PARMS a4)
{
	HDIGDRIVER result; // [esp+4h] [ebp-8h]
	AIL_DRIVER *v7; // [esp+8h] [ebp-4h]

	v7 = sub_93010_AIL_install_driver(/*a1, */a2, a3);
	if (!v7)
		return 0;
	result = sub_A2EA0(v7, a4);
	if (!result)
		sub_93160_AIL_uninstall_driver(v7);
	return result;
}

//----- (000A3720) --------------------------------------------------------
int sub_A3720_AIL_API_install_DIG_INI(/*int a1, */HDIGDRIVER* dig)//284720
{
	//ac_sound_install_dig_ini
	//Bit8u v3[4096]; // [esp+0h] [ebp-11Ch]
	//char v4; // [esp+80h] [ebp-9Ch]
	//char v5; // [esp+100h] [ebp-1Ch]
	int result; // [esp+118h] [ebp-4h]

	//char filename[200];
	//IO_PARMS IO = {};
	AIL_INI a2;//fix
	//a2 = jmeno souboru
	if (sub_92190_AIL_read_INI(/*(Bit8u*)a1, */&a2, (char*)"DIG.INI"/*, filename, IO*/))
	{//3550c8 - SB16.DIG  //355148 - 220
		*dig = sub_93330_AIL_install_DIG_driver_file(/*a1, */a2.driver_name, &a2.IO);
		if (*dig)
			result = 0;
		else
			result = 2;
	}
	else
	{
		qmemcpy(&x_BYTE_181C90, (void*)"Unable to open file DIG.INI\n", 0x1Du);
		result = 1;
	}
	return result;
}

//----- (000A37A0) --------------------------------------------------------
int sub_A37A0(unsigned int *a1)
{
	return sub_93160_AIL_uninstall_driver((AIL_DRIVER*)*a1);
}

//----- (000A37C0) --------------------------------------------------------
int sub_A37C0(int a1)
{
	int v2; // [esp+4h] [ebp-8h]
	int i; // [esp+8h] [ebp-4h]

	v2 = 0;
	for (i = 0; i < *(x_DWORD *)(a1 + 96); i++)
	{
		if (*(x_DWORD *)(2196 * i + *(x_DWORD *)(a1 + 92) + 4) == 4)
			++v2;
	}
	return v2;
}

//----- (000A3820) --------------------------------------------------------
HSAMPLE sub_A3820_allocate_sample_handle(HDIGDRIVER dig)//284820
{
	HSAMPLE v1; // ST08_4
	HSAMPLE v3; // [esp+0h] [ebp-Ch]
	int i; // [esp+8h] [ebp-4h]

	sub_91BD0_s_plus();
	for (i = 0; i < dig->n_samples_24 && dig->samples_23[i].status_1 != 1; i++)
		;
	if (i == dig->n_samples_24)
	{
		qmemcpy(&x_BYTE_181C90, (void*)"Out of sample handles\n", 0x17u);
		sub_91BF0_s_minus();
		v3 = 0;
	}
	else
	{
		v1 = &dig->samples_23[i];
		sub_93830_AIL_init_sample(v1);
		sub_91BF0_s_minus();
		v3 = v1;
	}
	return v3;
}

//----- (000A38C0) --------------------------------------------------------
int sub_A38C0_AIL_API_release_sample_handle(int a1)
{
	int result; // eax

	if (a1)
	{
		result = a1;
		*(x_DWORD *)(a1 + 4) = 1;
	}
	return result;
}

//----- (000A38E0) --------------------------------------------------------
void sub_A38E0_init_sample(HSAMPLE S/*S32     format,U32     flags*/)//2848e0
{
	if (S)//fix S
	{
		S->status_1 = 2;
		S->start_2_3[0] = 0;
		S->start_2_3[1] = 0;
		//S->start_44mhz = 0;
		S->len_4_5[0] = 0;
		S->len_4_5[1] = 0;
		S->pos_6_7[0] = 0;
		S->pos_6_7[1] = 0;
		S->done_8_9[0] = 0;
		S->done_8_9[1] = 1;
		S->current_buffer_10 = 0;
		S->last_buffer_11 = -2;
		S->loop_count_12 = 1;
		S->format_13 = 0;
		S->flags_14 = 0;
		S->playback_rate_15 = 11025;
		S->volume_16 = x_DWORD_181DAC[5];
		if (S->pos_6_7[0] && S->pos_6_7[0] != 1)
			S->pan_17 = 64;
		else
			S->pan_17 = 0;
		S->sam_var[530] = 0;
		S->sam_var[531] = 0;
		S->sam_var532_EOS_ptr = 0;
		sub_A2110(S);
	}
}

//----- (000A3A00) --------------------------------------------------------
Bit32u sub_A3A00_sample_status(HSAMPLE S)
{
	int result; // [esp+0h] [ebp-4h]

	if (S)
		result = S->status_1;
	else
		result = 0;
	return result;
}

void init_hqsound(HSAMPLE S) {
	//test mark
	bool same_mark = true;
	int comparesize = sample_mark;
	if (comparesize > S->len_4_5[0])comparesize = S->len_4_5[0];
	for (int i = 0; i < comparesize; i++)
	{
		if (S->mark44mark[i] != ((Bit8u*)S->start_2_3[0])[i])
		{
			same_mark = false;
			break;
		}
	}
	//test mark

	if (!same_mark)
	{
		for (int i = 0; i < comparesize; i++)
		{
			S->mark44mark[i] = ((Bit8u*)S->start_2_3[0])[i];
		}

		if ((S->start_44mhz!=NULL)/*&& ((Bit32u)S->start_44mhz != 0xcdcdcdcd)*/)
			free(S->start_44mhz);
		if(fixspeedsound)
			S->start_44mhz = malloc(S->len_4_5[0] * 2 * 2 * 2*2);
		else
			S->start_44mhz = malloc(S->len_4_5[0] * 2 * 2*2);

		Bit16u lastval = ((Bit8u*)S->start_2_3[0])[0] * 256;
		Bit16u actval;
		Bit16s val1, val2, val3, val4;
		for (int i = 0; i < S->len_4_5[0]; i++)
		{
			actval = ((Bit8u*)S->start_2_3[0])[i] * 256;
			val1 = lastval - 0x8000;
			val3 = (lastval * 0.5 + actval * 0.5) - 0x8000;
			if (fixspeedsound) {
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[0 + i * 16]) = val1;
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[2 + i * 16]) = val1;
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[4 + i * 16]) = val1;
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[6 + i * 16]) = val1;
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[8 + i * 16]) = val3;
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[10 + i * 16]) = val3;
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[12 + i * 16]) = val3;
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[14 + i * 16]) = val3;
			}
			else {
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[0 + i * 8]) = val1;
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[2 + i * 8]) = val1;
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[4 + i * 8]) = val3;
				(*(Bit16s*) & ((Bit8u*)S->start_44mhz)[6 + i * 8]) = val3;
			}
			if (i < S->len_4_5[0] + 1)lastval = actval;
		}
		lastval = actval;
	}
};

//----- (000A3A30) --------------------------------------------------------
void sub_A3A30_set_sample_address(HSAMPLE S, Bit8u* start, Bit32u len)
{
	if (S)
	{
		S->start_2_3[0] = start;
		S->start_2_3[1] = 0;
		S->len_4_5[0] = len;
		S->len_4_5[1] = 0;
		if (hqsound)
			init_hqsound(S);
	}
}

//----- (000A3A70) --------------------------------------------------------
void sub_A3A70_set_sample_type(HSAMPLE S, Bit32s a2, Bit32u a3)//284a70
{
	if (S)
	{
		if (a2 != S->format_13 || (a3 != S->flags_14))
		{
			S->format_13 = a2;
			S->flags_14 = a3;
			sub_A2110(S);
		}
	}
}

//----- (000A3AC0) --------------------------------------------------------
Bit32s sub_A3AC0_get_sample_playback_rate(HSAMPLE S)//284ac0
{
	Bit32s result; // [esp+0h] [ebp-4h]
	if (S)
		result = S->playback_rate_15;
	else
		result = 0;
	return result;
}

//----- (000A3AF0) --------------------------------------------------------
void sub_A3AF0_set_sample_playback_rate(HSAMPLE S, Bit32s playback_rate)//284af0
{
	if (S)
	{
		S->playback_rate_15 = playback_rate;
	}
}

//----- (000A3B10) --------------------------------------------------------
Bit32s sub_A3B10_get_sample_volume(HSAMPLE S)//284b10
{
	Bit32s result; // [esp+0h] [ebp-4h]

	if (S)
		result = S->volume_16;
	else
		result = 0;
	return result;
}

//----- (000A3B40) --------------------------------------------------------
void sub_A3B40_set_sample_volume(HSAMPLE S, Bit32s volume) //284b40
{
	if (S)
	{
		//result = a2;
		if (volume != S->volume_16)
		{
			S->volume_16 = volume;
			sub_A2110(S);
		}
	}
}

//----- (000A3B80) --------------------------------------------------------
Bit32s sub_A3B80_get_sample_volume_pan(HSAMPLE S)//284b80
{
	Bit32s result; // [esp+0h] [ebp-4h]

	if (S)
		result = S->pan_17;
	else
		result = 0;
	return result;
}

//----- (000A3BB0) --------------------------------------------------------
void sub_A3BB0_set_sample_volume_pan(HSAMPLE S, Bit32s volume)//284bb0
{
	if (S)
	{
		if (volume != S->pan_17)
		{
			S->pan_17 = volume;
			sub_A2110(S);
		}
	}
}

//----- (000A3BF0) --------------------------------------------------------
int sub_A3BF0(int a1)//284bf0
{
	int v2; // [esp+0h] [ebp-4h]

	if (a1)
		v2 = *(x_DWORD *)(a1 + 4 * *(x_DWORD *)(a1 + 40) + 24);
	else
		v2 = 0;
	return v2;
}

//----- (000A3C30) --------------------------------------------------------
int sub_A3C30(int a1, int a2)//284c30
{
	int result; // eax

	if (a1)
	{
		result = a2;
		*(x_DWORD *)(4 * *(x_DWORD *)(a1 + 40) + a1 + 24) = a2;
	}
	return result;
}

//----- (000A3C60) --------------------------------------------------------
signed int sub_A3C60(int a1)//284c60
{
	signed int v2; // [esp+0h] [ebp-4h]

	if (a1)
		v2 = *(x_DWORD *)(a1 + 48);
	else
		v2 = -1;
	return v2;
}

//----- (000A3C90) --------------------------------------------------------
void sub_A3C90_set_sample_loop_count(HSAMPLE S, int loop_count)//284c90
{
	if (S)
	{
		S->loop_count_12 = loop_count;
	}
}

void sub_A3CB0_API_AIL_start_sample(HSAMPLE S)//284cb0
{
	if (S)
	{
		if (S->status_1 != 1)
		{
			S->status_1 = 4;
			SOUND_start_sample(S);
		}
	}
}

//----- (000A3D30) --------------------------------------------------------
void sub_A3D30(HSAMPLE S)//284d30
{
	if (S)
	{
		if (S->status_1 == 4)
		{
			S->status_1 = 8;
		}
	}
}

//----- (000A3D60) --------------------------------------------------------
void sub_A3D60(HSAMPLE S)//284d60
{
	if (S)
	{
		if (S->status_1 == 8)
		{
			S->status_1 = 4;
			sub_A2070(S->driver_0);
		}
	}
}

void sub_A3DA0__API_AIL_end_sample(HSAMPLE S)//284da0
{
	if (S)
	{
		if (S->status_1 != 1)
		{
			if (S->status_1 != 2)
			{
				S->status_1 = 2;
				SOUND_end_sample(S);
			}
		}
	}
}

//----- (000A3DA0) --------------------------------------------------------
void sub_A3DA0__API_AIL_end_sample_orig(HSAMPLE S)//284da0
{
	if (S)
	{
		//result = a1;
		if (S->status_1 != 1)
		{
			//result = a1;
			if (S->status_1 != 2)
			{
				S->status_1 = 2;
				if (S->sam_var[531])
					switch (S->sam_var[531]) {
					case 0: {
						//call(S);
						break;
					}
							//(*(void(**)(int))(S + 2124))(S);
					}
				if (S->sam_var532_EOS_ptr)
					S->sam_var532_EOS_ptr();
				/*switch (S->sam_var532_EOS_ptr) {
				case 0: {
					//call(S);
					break;
				}
						//(*(void(**)(int))(S + 2124))(S);
				}*/

				//result = a1;
				//if ( *(x_DWORD *)(a1 + 2128) )
				//  result = (*(int (**)(int))(a1 + 2128))(a1);
			}
		}
	}
}

//----- (000A3E10) --------------------------------------------------------
int sub_A3E10(HSAMPLE S, int a2)//284e10
{
	int v2; // ST04_4

	if (!S)
		return 0;
	v2 = S->sam_var[530];
	S->sam_var[530] = a2;
	return v2;
}

//----- (000A3E60) --------------------------------------------------------
int sub_A3E60(HSAMPLE S, int a2)//284e60
{
	int v2; // ST04_4

	if (!S)
		return 0;
	v2 = S->sam_var[531];
	S->sam_var[531] = a2;
	return v2;
}

//----- (000A3EB0) --------------------------------------------------------
EOS_callback_type sub_A3EB0_register_EOS_callback(HSAMPLE S, EOS_callback_type EOS)//284eb0
{
	EOS_callback_type result; // ST04_4
	if (!S)
		return 0;
	result = S->sam_var532_EOS_ptr;
	S->sam_var532_EOS_ptr = EOS;
	return result;
}

//----- (000A3F00) --------------------------------------------------------
void sub_A3F00_set_sample_user_data(HSAMPLE S, int index, int a3)//284f00
{
	//int result; // eax

	if (S)
	{
		//result = a3;
		//*(x_DWORD *)(4 * a2 + S + 2132) = a3;
		S->sam_var[533 + index];
	}
	//return result;
}

//----- (000A3F30) --------------------------------------------------------
int sub_A3F30_sample_user_data(HSAMPLE S, int index)//284f30
{
	int v3; // [esp+0h] [ebp-4h]

	if (S)
		v3 = S->sam_var[533 + index];
	else
		v3 = 0;
	return v3;
}

//----- (000A3F70) --------------------------------------------------------
void sub_A3F70_set_digital_master_volume(x_DWORD *a1, int a2)//284f70
{
	int i; // [esp+0h] [ebp-4h]

	a1[26] = a2;
	for (i = 0; ; i++)
	{
		if (i >= a1[24])
			break;
		if (*(x_DWORD *)(2196 * i + a1[23] + 4) != 1)
			sub_A2110((HSAMPLE)(x_DWORD *)(2196 * i + a1[23]));
	}
}

//----- (000A3FE0) --------------------------------------------------------
int sub_A3FE0(int a1)//284fe0
{
	return *(x_DWORD *)(a1 + 104);
}

//----- (000A4000) --------------------------------------------------------
char sub_A4000(x_DWORD *a1, int a2, unsigned int a3)//285000
{
	int v3; // ST04_4
	signed int v5; // [esp+Ch] [ebp-4h]

	if (a3 <= 3)
	{
		switch (a3)
		{
		case 0u:
			v5 = 1;
			break;
		case 1u:
			v5 = 2;
			break;
		case 2u:
			v5 = 2;
			break;
		case 3u:
			v5 = 4;
			break;
		}
	}
	v3 = a2 * (v5 * a1[4] / (a1[16] * a1[15])) / a1[5];
	if (a1[5] != a2 && 2 * a2 != a1[5])
		a1[5];
	return 0;
}

//----- (000A4100) --------------------------------------------------------
void sub_A4100(int *a1, int a2, int a3, int a4)//285100
{
	if (a1)
	{
		a1[a2 + 8] = a4 == 0;
		a1[a2 + 2] = a3;
		a1[a2 + 4] = a4;
		*(x_DWORD *)(&a1[a2] + 24) = 0;
		if (a4)
		{
			if (a1[1] != 4)
			{
				a1[1] = 4;
				sub_A2070((HDIGDRIVER)*a1);
			}
		}
	}
}

//----- (000A41B0) --------------------------------------------------------
signed int sub_A41B0(x_DWORD *a1)//2851b0
{
	int v1; // eax
	unsigned int v3; // [esp+0h] [ebp-8h]

	if (!a1)
		return -1;
	v3 = a1[11];
	if (v3 >= 0xFFFFFFFE)
	{
		if (v3 <= 0xFFFFFFFE)
		{
			a1[9] = 0;
			a1[11] = -1;
			return 0;
		}
		if (v3 == 0xFFFFFFFF)
		{
			a1[11] = a1[10];
			return 1;
		}
	}
	if (a1[11] == a1[10])
		return -1;
	a1[11] = a1[10];
	v1 = a1[10];
	LOBYTE(v1) = v1 ^ 1;
	return v1;
}

//----- (000A4260) --------------------------------------------------------
bool sub_A4260()//285260
{
	bool result; // eax

	if (x_DWORD_E4A90)
	{
		// FIXME: types
		// // sub_9D650((unsigned int)sub_A1F90, (unsigned int)sub_A4260);
		// sub_9D740((unsigned int)x_BYTE_E4A0C, 128);
		// sub_9D740((unsigned int)&x_DWORD_E4A8C, 4);
		// sub_9D740((unsigned int)&x_DWORD_181E94, 4);
		// sub_9D740((unsigned int)unk_181E80x, 12);
		// sub_9D740((unsigned int)&x_DWORD_181E9C, 4);
		// sub_9D740((unsigned int)&x_DWORD_181EA0, 4);
		// sub_9D740((unsigned int)&x_DWORD_181E90, 4);
		// sub_9D740((unsigned int)&x_DWORD_181E98, 4);
		// result = sub_9D740((unsigned int)&x_DWORD_181E8C, 4);
		x_DWORD_E4A90 = 0;
	}
	return result;
}

//----- (000A4330) --------------------------------------------------------
void sub_A4330()//285330
{
	//bool result; // eax

	if (!x_DWORD_E4A94)
	{
		// FIXME: types
		// sub_9D590_lock_linear_region((Bit8u*)sub_A4330, (unsigned int)sub_A4CB0);
		x_DWORD_E4A94 = 1;
	}
	//return result;
}

//----- (000A4370) --------------------------------------------------------
int sub_A4370(x_DWORD *a1)//285370
{
	return *a1 >> 8;
}

//----- (000A4390) --------------------------------------------------------
int sub_A4390(int a1)//285390
{
	int result; // eax

	if (*(x_DWORD *)(a1 + 2164))
		(*(void(**)(int))(a1 + 2164))(a1);
	if (*(x_DWORD *)(a1 + 2188) > 0)
		sub_937A0_AIL_release_sample_handle(a1);
	result = a1;
	*(x_DWORD *)(a1 + 2188) = -1;
	return result;
}

//----- (000A43E0) --------------------------------------------------------
void sub_A43E0(HSAMPLE S)//2853e0
{
	x_DWORD *v1; // [esp+4h] [ebp-8h]

	while (1)
	{
		v1 = *(x_DWORD **)(S + 2168);
		if (*(x_BYTE *)v1 <= 9u)
			break;
		// FIXME: types
		// *(x_DWORD *)(S + 2168) = (x_DWORD)(char *)v1 + sub_A4370(v1) + 4;
	}
	//JUMPOUT(__CS__, (int*) *(&off_A4400 + *(uint8_t *)v1));
}

//----- (000A47C0) --------------------------------------------------------
void sub_A47C0_sub_set_sample_file(Bit8u* file_image, HSAMPLE S)//2857c0
{
	int i; // eax
	int j; // eax
	Bit8u* v5; // [esp+0h] [ebp-8h]
	Bit8u* v6; // [esp+4h] [ebp-4h]

	v6 = file_image + 12;
	for (i = _strnicmp((const char*)(file_image + 12), "fmt ", 4); i; i = _strnicmp((const char*)v6, "fmt ", 4))
		v6 += (*(x_DWORD *)(v6 + 4) & 1) + *(x_DWORD *)(v6 + 4) + 8;
	if (*(x_WORD *)(v6 + 10) == 1 && *(x_WORD *)(v6 + 22) == 8)
	{
		sub_93AB0_AIL_set_sample_type(S, 0, 0);
	}
	else if (*(x_WORD *)(v6 + 10) == 2 && *(x_WORD *)(v6 + 22) == 8)
	{
		sub_93AB0_AIL_set_sample_type(S, 2, 0);
	}
	else if (*(x_WORD *)(v6 + 10) == 1 && *(x_WORD *)(v6 + 22) == 16)
	{
		sub_93AB0_AIL_set_sample_type(S, 1, 1);
	}
	else if (*(x_WORD *)(v6 + 10) == 2 && *(x_WORD *)(v6 + 22) == 16)
	{
		sub_93AB0_AIL_set_sample_type(S, 3, 1);
	}
	sub_93D90_AIL_set_sample_playback_rate(S, *(x_DWORD *)(v6 + 12));
	v5 = file_image + 12;
	for (j = _strnicmp((const char*)(file_image + 12), "data", 4); j; j = _strnicmp((const char*)v5, "data", 4))
		v5 += (*(x_DWORD *)(v5 + 4) & 1) + *(x_DWORD *)(v5 + 4) + 8;
	sub_93A10_AIL_set_sample_address(S, v5 + 8, *(x_DWORD *)(v5 + 4));
}

//----- (000A4970) --------------------------------------------------------
HSAMPLE sub_A4970(int a1, Bit8u* a2, int a3)//285970
{
	signed int v5; // [esp+8h] [ebp-8h]
	HSAMPLE v6; // [esp+Ch] [ebp-4h]

	sub_A4330();
	if (!_strnicmp((const char*)a2, "Creative", 8))
	{
		v5 = 0;
	}
	else
	{
		if (_strnicmp((const char*)(a2 + 8), "WAVE", 4))
		{
			qmemcpy(&x_BYTE_181C90, (void*)"Unrecognized digital audio file type\n", 0x26u);
			return 0;
		}
		v5 = 1;
	}
	v6 = sub_93510_AIL_allocate_sample_handle((HDIGDRIVER)a1);
	if (!v6)
		return 0;
	sub_93830_AIL_init_sample(v6);
	v6->sam_var[541] = 0;
	if (v5)
	{
		if (v5 == 1)
		{
			v6->sam_var[547] = 1;
			sub_95140_AIL_register_EOS_callback(v6, sub_A4920);
			sub_A47C0_sub_set_sample_file(a2, v6);
		}
	}
	else
	{
		// FIXME: types
		// v6->sam_var[542] = *(uint16_t *)(a2 + 20) + (int)a2;
		v6->sam_var[545] = a3;
		v6->sam_var[546] = a3 == -1;
		v6->sam_var[547] = 1;
		sub_95140_AIL_register_EOS_callback(v6, sub_A47A0);
		sub_A43E0(v6);
	}
	if (v6->sam_var[547] != -1)
		return v6;
	strcpy(x_BYTE_181C90, "Invalid or missing data block\n");

	return 0;
}

//----- (000A4B20) --------------------------------------------------------
Bit32s sub_A4B20_set_sample_file(HSAMPLE S, Bit8u* file_image, Bit32s block)//285b20
{
	signed int v5; // [esp+8h] [ebp-4h]
	if (!_strnicmp((const char*)file_image, "Creative", 8))
	{
		v5 = 0;
	}
	else
	{
		if (_strnicmp((const char*)(file_image + 8), "WAVE", 4))
		{
			qmemcpy(x_BYTE_181C90, (void*)"Unrecognized digital audio file type\n", 0x26u);
			return 0;
		}
		v5 = 1;
	}
	if (v5)
	{
		if (v5 == 1)
		{
			S->sam_var[547] = 0;
			sub_A47C0_sub_set_sample_file(file_image, S);
		}
	}
	else
	{
		S->sam_var542 = (Bit8u*)(*(uint16_t *)(file_image + 20) + file_image);
		S->sam_var[545] = block;
		S->sam_var[546] = block == -1;
		S->sam_var[547] = 0;
		sub_A43E0(S);
	}
	if (S->sam_var[547] != -1)
		return 1;
	strcpy(x_BYTE_181C90, "Invalid or missing data block\n");
	return 0;
}

//----- (000A4C60) --------------------------------------------------------
int sub_A4C60(int a1, int a2)//285c60
{
	int v2; // ST04_4

	if (!a1)
		return 0;
	v2 = *(x_DWORD *)(a1 + 2164);
	*(x_DWORD *)(a1 + 2164) = a2;
	return v2;
}

//----- (000A4CB0) --------------------------------------------------------
bool sub_A4CB0()//285cb0
{
	bool result; // eax

	if (x_DWORD_E4A94)
	{
		// FIXME: types
		// result = sub_9D650((unsigned int)sub_A4330, (unsigned int)sub_A4CB0);
		x_DWORD_E4A94 = 0;
	}
	return result;
}

//----- (000A4CF0) --------------------------------------------------------
void sub_A4CF0()//285cf0
{
	//bool result; // eax

	if (!x_DWORD_E4B1C)
	{
		// FIXME: types
		// sub_9D590_lock_linear_region((Bit8u*)sub_A4CF0, (unsigned int)sub_A9280);
		sub_9D710((Bit8u*)aSample, 128);
		sub_9D710((Bit8u*)&x_DWORD_E4B18, 4);
		sub_9D710((Bit8u*)&x_DWORD_181EB8, 4);
		sub_9D710((Bit8u*)&x_DWORD_181EBC, 4);
		sub_9D710((Bit8u*)&x_DWORD_181EC0, 4);
		sub_9D710((Bit8u*)&x_DWORD_181EC4, 4);
		sub_9D710((Bit8u*)&x_DWORD_181ED4, 4);
		sub_9D710((Bit8u*)&x_DWORD_181EC8, 4);
		sub_9D710((Bit8u*)&x_DWORD_181ECC, 4);
		sub_9D710((Bit8u*)&x_DWORD_181EB4, 4);
		sub_9D710((Bit8u*)&x_DWORD_181ED0, 4);
		sub_9D710((Bit8u*)&x_DWORD_181EDC, 4);
		sub_9D710((Bit8u*)&x_DWORD_181ED8, 4);
		sub_9D710((Bit8u*)&x_DWORD_181EB0, 4);
		x_DWORD_E4B1C = 1;
	}
	//return result;
}

//----- (000A4E10) --------------------------------------------------------
signed int sub_A4E10(char a1)//285e10
{
	unsigned int v2; // [esp+0h] [ebp-8h]

	v2 = a1 & 0xF0;
	if (v2 < 0xB0)
	{
		if (v2 < 0x90)
		{
			if (v2 != 128)
				return 0;
		}
		else if (v2 > 0x90 && v2 != 160)
		{
			return 0;
		}
		return 3;
	}
	if (v2 > 0xB0)
	{
		if (v2 < 0xD0)
		{
			if (v2 != 192)
				return 0;
		}
		else if (v2 > 0xD0)
		{
			if (v2 != 224)
				return 0;
			return 3;
		}
		return 2;
	}
	return 3;
}

//----- (000A4EB0) --------------------------------------------------------
void sub_A4EB0(HMDIDRIVER a1)//285eb0
{
	//HMDIDRIVER result; // eax
	VDI_CALL v2; // [esp+0h] [ebp-Ch]
	int16_t v3; // [esp+4h] [ebp-8h]

	//result = a1;
	if (a1->var106_aildrv > 0)
	{
		v3 = a1->var106_aildrv;
		sub_91F70_AIL_call_driver(a1->drvr_0, 1282, &v2, 0);
		a1->var106_aildrv = 0;
		//result = a1;
		a1->var107_aildrv = 0;
	}
	//return result;
}

//----- (000A4F10) --------------------------------------------------------
void sub_A4F10(HMDIDRIVER a1, char a2, char a3, char a4)//285f10
{
	Bit8u* v4; // ebx
	int v5; // edx
	Bit8u* v6; // ebx
	int v7; // edx
	Bit8u* v8; // ebx
	int v9; // edx
	//HMDIDRIVER result; // eax
	signed int v11; // [esp+0h] [ebp-4h]

	v11 = sub_A4E10(a2);
	if (v11 + a1->var107_aildrv > 0x200)
		sub_A4EB0(a1);
	v4 = (Bit8u*)a1->DST_2;
	v5 = a1->var107_aildrv++;
	v4[v5 + 256] = a2;
	v6 = (Bit8u*)a1->DST_2;
	v7 = a1->var107_aildrv++;
	v6[v7 + 256] = a3;
	if (v11 == 3)
	{
		v8 = (Bit8u*)a1->DST_2;
		v9 = a1->var107_aildrv++;
		v8[v9 + 256] = a4;
	}
	//result = a1;
	a1->var106_aildrv++;
	//return result;
}

//----- (000A4FD0) --------------------------------------------------------
void sub_A4FD0(int a1, int a2, unsigned int a3)//285fd0
{
	sub_A4EB0((HMDIDRIVER)a1);
	if (a3 <= 0x200)
		;//fix it:memmove(*(x_DWORD *)(a1 + 8) + 256, a2, a3);
	else
		//fix it:memmove(*(x_DWORD *)(a1 + 8) + 256, a2, 512);
		++*(x_DWORD *)(a1 + 424);
	sub_A4EB0((HMDIDRIVER)a1);
}

//----- (000A5040) --------------------------------------------------------
int sub_A5040(x_DWORD *a1)//286040
{
	char v1; // ST08_1
	signed int v3; // [esp+4h] [ebp-Ch]
	int v4; // [esp+Ch] [ebp-4h]

	v4 = 0;
	v3 = 4;
	do
	{
		v1 = *(x_BYTE *)(*a1)++;
		v4 = v1 & 0x7F | (v4 << 7);
		if (!(v1 & 0x80))
			break;
		--v3;
	} while (v3);
	return v4;
}

//----- (000A50A0) --------------------------------------------------------
unsigned int sub_A50A0(int a1)
{
	return ((a1 & 0xFF000000) >> 24)
		+ ((a1 & 0xFF0000u) >> 8)
		+ ((uint16_t)(a1 & 0xFF00) << 8)
		+ ((uint8_t)a1 << 24);
}

//----- (000A50F0) --------------------------------------------------------
Bit8u* sub_A50F0(Bit8u* a1, int a2)
{
	Bit8u* v3; // [esp+0h] [ebp-Ch]
	Bit8u* v4; // [esp+4h] [ebp-8h]
	unsigned int v5; // [esp+8h] [ebp-4h]
	Bit8u* i; // [esp+1Ch] [ebp+10h]

	v5 = 0;
	do
	{
		a1 += v5;
		if (strncmp((const char*)a1, "FORM", 4) && strncmp((const char*)a1, "CAT ", 4))
			return 0;
		v5 = sub_A50A0(*(x_DWORD *)(a1 + 4)) + 8;
	} while (strncmp((const char*)(a1 + 8), "XMID", 4));
	if (!strncmp((const char*)a1, "FORM", 4))
	{
		if (a2)
			v3 = 0;
		else
			v3 = a1;
	}
	else
	{
		v4 = v5 + a1;
		for (i = a1 + 12; i < v4; i += sub_A50A0(*(x_DWORD *)(i + 4)) + 8)
		{
			if (!strncmp((const char*)(i + 8), "XMID", 4) && --a2 == -1)
				return i;
		}
		v3 = 0;
	}
	return v3;
}

//----- (000A5210) --------------------------------------------------------
int sub_A5210(int a1, char a2, unsigned int a3)
{
	int v4; // [esp+0h] [ebp-Ch]
	int v5; // [esp+4h] [ebp-8h]
	unsigned int v6; // [esp+8h] [ebp-4h]

	v6 = a2 & 0xF0;
	v5 = a2 & 0xF;
	if (v6 < 0xC0)
	{
		if (v6 != 176)
			return -1;
		if (a3 < 0x5D)
		{
			if (a3 < 0xA)
			{
				if (a3 < 6)
				{
					if (a3 == 1)
						return *(x_DWORD *)(a1 + 4 * v5 + 640);
				}
				else
				{
					if (a3 <= 6)
						return *(x_DWORD *)(a1 + 4 * v5 + 1088);
					if (a3 == 7)
						return *(x_DWORD *)(a1 + 4 * v5 + 704);
				}
			}
			else
			{
				if (a3 <= 0xA)
					return *(x_DWORD *)(a1 + 4 * v5 + 768);
				if (a3 < 0x40)
				{
					if (a3 == 11)
						return *(x_DWORD *)(a1 + 4 * v5 + 832);
				}
				else
				{
					if (a3 <= 0x40)
						return *(x_DWORD *)(a1 + 4 * v5 + 896);
					if (a3 == 91)
						return *(x_DWORD *)(a1 + 4 * v5 + 960);
				}
			}
		}
		else
		{
			if (a3 <= 0x5D)
				return *(x_DWORD *)(a1 + 4 * v5 + 1024);
			if (a3 < 0x70)
			{
				if (a3 >= 0x6E)
				{
					if (a3 <= 0x6E)
						v4 = *(x_DWORD *)(a1 + 4 * v5 + 192);
					else
						v4 = *(x_DWORD *)(a1 + 4 * v5 + 256);
					return v4;
				}
				if (a3 == 107)
					return *(x_DWORD *)(a1 + 4 * v5 + 320);
			}
			else
			{
				if (a3 <= 0x70)
					return *(x_DWORD *)(a1 + 4 * v5 + 384);
				if (a3 < 0x73)
				{
					if (a3 == 114)
						return *(x_DWORD *)(a1 + 4 * v5 + 448);
				}
				else
				{
					if (a3 <= 0x73)
						return *(x_DWORD *)(a1 + 4 * v5 + 512);
					if (a3 == 119)
						return *(x_DWORD *)(a1 + 4 * v5 + 576);
				}
			}
		}
		return -1;
	}
	if (v6 <= 0xC0)
		return *(x_DWORD *)(a1 + 4 * v5);
	if (v6 != 224)
		return -1;
	return (*(x_DWORD *)(a1 + 4 * v5 + 128) << 7) | *(x_DWORD *)(a1 + 4 * v5 + 64);
}

//----- (000A5530) --------------------------------------------------------
x_DWORD *sub_A5530(int a1, char a2, unsigned int a3, uint8_t a4)
{
	x_DWORD *result; // eax
	int v5; // [esp+0h] [ebp-8h]
	unsigned int v6; // [esp+4h] [ebp-4h]

	v6 = a2 & 0xF0;
	result = (x_DWORD *)(a2 & 0xF);
	v5 = a2 & 0xF;
	if (v6 < 0xC0)
	{
		if (v6 == 176)
		{
			if (a3 < 0x5D)
			{
				if (a3 < 0xA)
				{
					if (a3 < 6)
					{
						if (a3 == 1)
						{
							result = (x_DWORD *)(a1 + 4 * v5);
							result[160] = a4;
						}
					}
					else if (a3 <= 6)
					{
						result = (x_DWORD *)(a1 + 4 * v5);
						result[272] = a4;
					}
					else if (a3 == 7)
					{
						result = (x_DWORD *)(a1 + 4 * v5);
						result[176] = a4;
					}
				}
				else if (a3 <= 0xA)
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[192] = a4;
				}
				else if (a3 < 0x40)
				{
					if (a3 == 11)
					{
						result = (x_DWORD *)(a1 + 4 * v5);
						result[208] = a4;
					}
				}
				else if (a3 <= 0x40)
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[224] = a4;
				}
				else if (a3 == 91)
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[240] = a4;
				}
			}
			else if (a3 <= 0x5D)
			{
				result = (x_DWORD *)(a1 + 4 * v5);
				result[256] = a4;
			}
			else if (a3 < 0x70)
			{
				if (a3 < 0x6E)
				{
					if (a3 == 107)
					{
						result = (x_DWORD *)(a1 + 4 * v5);
						result[80] = a4;
					}
				}
				else if (a3 <= 0x6E)
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[48] = a4;
				}
				else
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[64] = a4;
				}
			}
			else if (a3 <= 0x70)
			{
				result = (x_DWORD *)(a1 + 4 * v5);
				result[96] = a4;
			}
			else if (a3 < 0x73)
			{
				if (a3 == 114)
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[112] = a4;
				}
			}
			else if (a3 <= 0x73)
			{
				result = (x_DWORD *)(a1 + 4 * v5);
				result[128] = a4;
			}
			else if (a3 == 119)
			{
				result = (x_DWORD *)(a1 + 4 * v5);
				result[144] = a4;
			}
		}
	}
	else if (v6 <= 0xC0)
	{
		result = (x_DWORD *)(a1 + 4 * v5);
		*result = (uint8_t)a3;
	}
	else if (v6 == 224)
	{
		*(x_DWORD *)(a1 + 4 * v5 + 64) = (uint8_t)a3;
		result = (x_DWORD *)(a1 + 4 * v5);
		result[32] = a4;
	}
	return result;
}

//----- (000A5850) --------------------------------------------------------
void sub_A5850(HSEQUENCE S, char a2, unsigned int a3, signed int a4, int a5)//286850
{
	HMDIDRIVER result; // eax
	//int v6; // eax
	HMDIDRIVER v7; // [esp+0h] [ebp-14h]
	int v8; // [esp+4h] [ebp-10h]
	int v9; // [esp+8h] [ebp-Ch]
	signed int i; // [esp+Ch] [ebp-8h]
	signed int j; // [esp+Ch] [ebp-8h]
	x_DWORD *v12; // [esp+Ch] [ebp-8h]
	int v13; // [esp+10h] [ebp-4h]

	v7 = S->driver_0;
	v13 = a2 & 0xF0;
	v8 = a2 & 0xF;
	//result = S->chan_map_37[4 * v8];
	v9 = S->chan_map_37[4 * v8];
	// FIXME: types
	// // if (v13 == 176 || v13 == 192 || v13 == 224)
	// 	result = (HMDIDRIVER)sub_A5530((int)&S->shadow_53, v8 | v13, a3, a4);
	if (v13 != 176)
		goto LABEL_79;
	if (a5)
	{
		//result = (x_DWORD *)(S + 4 * v8);
		if (S->shadow_53.indirect[4 * v8] != -1)
		{
			a4 = S->shadow_53.indirect[4 * v8];
			//result = (x_DWORD *)(S + 4 * v8);
			S->shadow_53.indirect[4 * v8] = -1;
		}
	}
	if (a3 < 0x6F)
	{
		if (a3 < 0x6C)
		{
			if (a3 >= 6)
			{
				if (a3 <= 6)
				{
					sub_A5850(S, v8 | 0xB0, 0x64u, 0, 0);
					sub_A5850(S, v8 | 0xB0, 0x65u, 0, 0);
					sub_A5850(S, v8 | 0xB0, 0x26u, 0, 0);
				}
				else if (a3 == 7)
				{
					a4 = S->volume_14 * a4 * v7->var108_aildrv / 16129;
					if (a4 > 127)
						a4 = 127;
					if (a4 < 0)
						a4 = 0;
				}
			}
			goto LABEL_79;
		}
		if (a3 <= 0x6C)
		{
			if (S->prefix_callback_7)
				S->shadow_53.indirect[4 * v8] = (*(int(**)(HSEQUENCE, int, signed int))(S->prefix_callback_7))(S, v8, a4);
			goto LABEL_79;
		}
		if (a3 <= 0x6D)
		{
			/*result = */sub_97480_AIL_branch_index(S, a4);
		}
		else if (a4 < 64)
		{
			//result = &v7[v9];
			if (v7->lock[v9] == 1)
			{
				sub_A5F30((int*)S, v8);
				sub_980D0_AIL_release_channel((int32_t*)v7, v9 + 1);
				/*result = (x_DWORD *)*/sub_98170_AIL_map_sequence_channel((int32_t*)S, v8 + 1, v8 + 1);
			}
		}
		else
		{
			//result = &v7[v9];
			if (v7->lock[v9] != 1)
			{
				result = (HMDIDRIVER)(x_DWORD *)sub_97F90_AIL_lock_channel((int32_t*)v7);
				v12 = (int32_t*)result;
				if (result)
				{
					// FIXME: types
					// sub_98170_AIL_map_sequence_channel((int32_t*)S, v8 + 1, (int)result);
					result = (HMDIDRIVER)(x_DWORD *)S;
					// FIXME: types
					// v7->var23_aildrvx[(int)v12] = S;
				}
			}
		}
	}
	else if (a3 <= 0x6F)
	{
		//result = &v7[v9];
		if (v7->lock[v9] != 1)
		{
			if (a4 >= 64)
			{
				//result = &v7[v9];
				v7->lock[v9] = 2;
			}
			else
			{
				//result = &v7[v9];
				v7->lock[v9] = 0;
			}
		}
	}
	else if (a3 < 0x75)
	{
		if (a3 < 0x73)
			goto LABEL_79;
		if (a3 <= 0x73)
		{
			*(x_DWORD *)(S + 4 * v8 + 724) = *(uint8_t *)(a4 + *(x_DWORD *)(S + 24));
		LABEL_79:
			if (v7->lock[v9] != 1 || v7->locker[v9] == S)
			{
				if (v13 == 144)
				{
					v7->notes[v9]++;
				}
				else if (v13 == 128)
				{
					v7->notes[v9]--;
				}
				v7->user[v9] = S;
				if (v13 != 144 || S->shadow_53.c_mute[4 * v8] < 64)
				{
					if (!v7->event_trap
						|| (result = (HMDIDRIVER)(x_DWORD *)((int(*)(HMDIDRIVER, HSEQUENCE, int, unsigned int, signed int))v7->event_trap)(
							v7,
							S,
							v9 | v13,
							a3,
							(int)a4)) == 0)
					{
						/*result = (x_DWORD *)*/sub_A4F10(v7, v9 | v13, a3, a4);
					}
				}
			}
			return;
		}
		for (i = 0; i < 4; i++)
		{
			//result = (x_DWORD *)(S + 4 * i);
			if (S->FOR_loop_count_33[4 * i] == -1)
				break;
			//result = (HMDIDRIVER)(x_DWORD *)i;
		}
		if (i != 4)
		{
			S->FOR_loop_count_33[4 * i] = a4;
			//result = *(x_DWORD **)(S + 20);
			S->FOR_ptrs[4 * i] = S->EVNT_ptr_5;
		}
	}
	else if (a3 <= 0x75)
	{
		if (a4 >= 64)
		{
			for (j = 3; j >= 0; j--)
			{
				//result = (x_DWORD *)(S + 4 * j);
				if (S->FOR_loop_count_33[4 * j] != -1)
					break;
				//result = (x_DWORD *)j;
			}
			if (j != -1)
			{
				if (S->FOR_loop_count_33[4 * j])
				{
					//v6 = a1 + 4 * j;
					if (--S->FOR_loop_count_33[4 * j])
					{
						//result = (x_DWORD *)S;
						S->EVNT_ptr_5 = (Bit8u*)S->FOR_ptrs[4 * j];
					}
					else
					{
						//result = (x_DWORD *)(S + 4 * j);
						S->FOR_loop_count_33[4 * j] = -1;
					}
				}
				else
				{
					//result = (x_DWORD *)S;
					S->EVNT_ptr_5 = (Bit8u*)S->FOR_loop_count_33[4 * j];
				}
			}
		}
	}
	else if (a3 <= 0x76)
	{
		*(x_DWORD *)(S + 92) = 0;
		*(x_DWORD *)(S + 96) = 0;
		*(x_DWORD *)(S + 108) = 0;
		*(x_DWORD *)(S + 108) -= *(x_DWORD *)(S + 104);
		//result = (x_DWORD *)S;
		if (S->beat_callback_9)
			/*result = (x_DWORD *)*/(*(int(**)(HMDIDRIVER, HSEQUENCE, x_DWORD, x_DWORD))(S->beat_callback_9))(v7, S, 0, 0);
	}
	else
	{
		if (a3 != 119)
			goto LABEL_79;
		//result = (x_DWORD *)S;
		if (S->trigger_callback_8_32)
			/*result = (x_DWORD *)*/(*(int(**)(HSEQUENCE, int, signed int))(S->trigger_callback_8_32))(S, v8, a4);
	}
}

//----- (000A5E50) --------------------------------------------------------
void sub_A5E50(HSEQUENCE S)
{
	int v1; // eax
	int v3; // [esp+0h] [ebp-8h]
	signed int i; // [esp+4h] [ebp-4h]

	v3 = 0;
	for (i = 0; i < 32; i++)
	{
		if (S->seq_342[i] != -1)
		{
			sub_A5850(S, S->seq_342[i] | 0x80, S->seq_374[i], 0, 0);
			S->seq_342[i] = -1;
			v3++;
		}
	}
	S->seq_341 = 0;
	/*LOBYTE(v1) = */sub_A4EB0((HMDIDRIVER)S->driver_0);
	if (v3)
	{
		v1 = sub_92160();
		if (!v1)
			/*LOBYTE(v1) = */sub_920D0_AIL_delay(3);
	}
	//return v1;
}

//----- (000A5F30) --------------------------------------------------------
void sub_A5F30(int *a1, int a2)
{
	signed int i; // [esp+0h] [ebp-4h]

	for (i = 0; i < 32; i++)
	{
		if (a1[i + 342] == a2)
		{
			sub_A5850((HSEQUENCE)a1, a1[i + 342] | 0x80, a1[i + 374], 0, 0);
			a1[i + 342] = -1;
		}
	}
	return sub_A4EB0((HMDIDRIVER)*a1);
}

//----- (000A5FD0) --------------------------------------------------------
void sub_A5FD0(int a1, int a2)
{
	x_DWORD *result; // eax

	if (*(x_DWORD *)(a1 + 4 * a2 + 660) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 0x72u, *(x_DWORD *)(a1 + 4 * a2 + 660), 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 212) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xC0, *(x_DWORD *)(a1 + 4 * a2 + 212), 0, 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 340) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xE0, *(x_DWORD *)(a1 + 4 * a2 + 276), *(x_DWORD *)(a1 + 4 * a2 + 340), 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 532) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 0x6Bu, *(x_DWORD *)(a1 + 4 * a2 + 532), 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 468) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 0x6Fu, *(x_DWORD *)(a1 + 4 * a2 + 468), 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 596) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 0x70u, *(x_DWORD *)(a1 + 4 * a2 + 596), 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 852) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 1u, *(x_DWORD *)(a1 + 4 * a2 + 852), 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 916) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 7u, *(x_DWORD *)(a1 + 4 * a2 + 916), 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 980) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 0xAu, *(x_DWORD *)(a1 + 4 * a2 + 980), 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 1044) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 0xBu, *(x_DWORD *)(a1 + 4 * a2 + 1044), 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 1108) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 0x40u, *(x_DWORD *)(a1 + 4 * a2 + 1108), 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 1172) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 0x5Bu, *(x_DWORD *)(a1 + 4 * a2 + 1172), 0);
	if (*(x_DWORD *)(a1 + 4 * a2 + 1236) != -1)
		sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 0x5Du, *(x_DWORD *)(a1 + 4 * a2 + 1236), 0);
	result = (x_DWORD *)(a1 + 4 * a2);
	if (result[325] != -1)
		/*result = (int32_t*)*/sub_A5850((HSEQUENCE)a1, a2 | 0xB0, 6u, *(x_DWORD *)(a1 + 4 * a2 + 1300), 0);
}

//----- (000A6370) --------------------------------------------------------
void sub_A6370(HSEQUENCE a1)//287370
{
	//x_DWORD *result; // eax
	signed int i; // [esp+0h] [ebp-4h]
	signed int j; // [esp+0h] [ebp-4h]
	signed int k; // [esp+0h] [ebp-4h]

	for (i = 0; i < 16; i++)
		a1->chan_map_37[i] = i;
	memset((void*)&a1->shadow_53, -1, sizeof(CTRL_LOG));
	for (j = 0; j < 4; j++)
		a1->FOR_loop_count_33[j] = -1;
	for (k = 0; k < 32; k++)
		a1->seq_342[k] = -1;
	a1->seq_341 = 0;
	a1->interval_count_12 = 0;
	a1->beat_count_23 = 0;
	a1->measure_count_24 = -1;
	a1->beat_fraction_27 = 0;
	a1->time_fraction_26 = 0;
	a1->time_numerator_25 = 4;
	a1->time_per_beat_28 = 8000000;
	//result = a1;
	a1->interval_num_13 = 0;
	//return result;
}

//----- (000A6490) --------------------------------------------------------
void sub_A6490(HSEQUENCE S)
{
	//x_DWORD *result; // eax

	sub_A6370(S);
	//result = a1;
	S->EVNT_ptr_5 = (Bit8u*)S->EVNT_4 + 8;
	//return result;
}

//----- (000A64C0) --------------------------------------------------------
void sub_A64C0(HSEQUENCE S)
{
	for (Bit32s i = 0; i < 16; i++)
	{
		if (S->shadow_53.pan[i] != -1)
			sub_A5850(S, i | 0xB0, 7u, S->shadow_53.pan[i], 0);
	}
}

void sub_A6530(HMDIDRIVER a1)//287530
{
	//int result; // eax
	//SEQUENCE v2; // eax
	int v3; // eax
	HSEQUENCE v4; // eax
	HSEQUENCE v5; // eax
	HSEQUENCE v6; // eax
	HSEQUENCE v7; // esi
	uint8_t *v8; // edx

	//result = (int)a1;
	if (!a1->disable_5 && !x_DWORD_E4B18)
	{
		x_DWORD_E4B18 = 1;
		x_DWORD_181EC4 = a1->n_sequences_7;
		for (x_DWORD_181EB8 = a1->sequences_6; ; x_DWORD_181EB8 += 1816)
		{
			if (!x_DWORD_181EC4)
			{
				/*result = */sub_A4EB0(a1);
				x_DWORD_E4B18 = 0;
				//return result;
				return;
			}
			if (*(_DWORD *)(x_DWORD_181EB8 + 4) == 4)
			{
				x_DWORD_181ED4 = 0;
				++*(_DWORD *)(x_DWORD_181EB8 + 52);
				*(_DWORD *)(x_DWORD_181EB8 + 88) += *(_DWORD *)(x_DWORD_181EB8 + 72);
				while (*(_DWORD *)(x_DWORD_181EB8 + 88) >= 100)
				{
					*(_DWORD *)(x_DWORD_181EB8 + 88) -= 100;
					if (*(_DWORD *)(x_DWORD_181EB8 + 1364) > 0)
					{
						for (x_DWORD_181EBC = 0; x_DWORD_181EBC < 32; x_DWORD_181EBC++)
						{
							if (*(_DWORD *)(x_DWORD_181EB8 + 4 * x_DWORD_181EBC + 1368) != -1)
							{
								//v2 = x_DWORD_181EB8[4 * x_DWORD_181EBC];
								if (--x_DWORD_181EB8->note_time[x_DWORD_181EBC] <= 0)
								{
									v3 = *(_DWORD *)(x_DWORD_181EB8 + 4 * x_DWORD_181EBC + 1368);
									LOBYTE(v3) = v3 | 0x80;
									sub_A5850(x_DWORD_181EB8, v3, *(_DWORD *)(4 * x_DWORD_181EBC + x_DWORD_181EB8 + 1496), 0, 0);
									*(_DWORD *)(x_DWORD_181EB8 + 4 * x_DWORD_181EBC + 1368) = -1;
									v4 = x_DWORD_181EB8;
									if (!--*(_DWORD *)(v4 + 1364))
										break;
								}
							}
						}
					}
					v5 = x_DWORD_181EB8;
					if (--*(_DWORD *)(v5 + 48) <= 0)
					{
						while (1)
						{
							while (1)
							{
								x_DWORD_181ED0 = **(uint8_t **)(x_DWORD_181EB8 + 20);
								if ((unsigned int)x_DWORD_181ED0 < 0x80 || x_DWORD_181ED4)
								{
									if (!x_DWORD_181ED4)
									{
										v8 = (uint8_t *)(*(_DWORD *)(x_DWORD_181EB8 + 20))++;
										*(_DWORD *)(x_DWORD_181EB8 + 48) = *v8;
									}
									goto LABEL_62;
								}
								if ((unsigned int)x_DWORD_181ED0 >= 0xF7)
									break;
								if (x_DWORD_181ED0 != 240)
									goto LABEL_49;
							LABEL_48:
								x_DWORD_181EB0 = *(_DWORD *)(x_DWORD_181EB8 + 20) + 1;
								x_DWORD_181ED8 = sub_A5040(&x_DWORD_181EB0);
								x_DWORD_181ED8 += x_DWORD_181EB0 - *(_DWORD *)(x_DWORD_181EB8 + 20);
								// FIXME: types
								// sub_A4FD0((int)a1, *(_DWORD *)(x_DWORD_181EB8 + 20), x_DWORD_181ED8);
								*(_DWORD *)(x_DWORD_181EB8 + 20) += x_DWORD_181ED8;
							}
							if ((unsigned int)x_DWORD_181ED0 <= 0xF7)
								goto LABEL_48;
							if (x_DWORD_181ED0 == 255)
							{
								x_DWORD_181EDC = *(uint8_t *)(*(_DWORD *)(x_DWORD_181EB8 + 20) + 1);
								*(_DWORD *)(x_DWORD_181EB8 + 20) += 2;
								x_DWORD_181ED8 = sub_A5040((int32_t*)x_DWORD_181EB8 + 20);
								if ((unsigned int)x_DWORD_181EDC < 0x51)
								{
									if (x_DWORD_181EDC == 47)
									{
										x_DWORD_181ED4 = 1;
										if (*(_DWORD *)(x_DWORD_181EB8 + 44)
											&& (v6 = x_DWORD_181EB8, --*(_DWORD *)(v6 + 44), !*(_DWORD *)(v6 + 44)))
										{
											sub_95DE0_AIL_stop_sequence(x_DWORD_181EB8);
											*(_DWORD *)(x_DWORD_181EB8 + 4) = 2;
											if (*(_DWORD *)(x_DWORD_181EB8 + 40))
												(*(void(__cdecl **)(HSEQUENCE))(x_DWORD_181EB8 + 40))(x_DWORD_181EB8);
										}
										else
										{
											*(_DWORD *)(x_DWORD_181EB8 + 20) = *(_DWORD *)(x_DWORD_181EB8 + 16) + 8;
											*(_DWORD *)(x_DWORD_181EB8 + 92) = 0;
											*(_DWORD *)(x_DWORD_181EB8 + 96) = -1;
											*(_DWORD *)(x_DWORD_181EB8 + 108) = 0;
											if (*(_DWORD *)(x_DWORD_181EB8 + 36))
												(*(void(__cdecl **)(_DWORD, HSEQUENCE, _DWORD, _DWORD))(x_DWORD_181EB8 + 36))(
													*(_DWORD *)x_DWORD_181EB8,
													x_DWORD_181EB8,
													0,
													0);
										}
									}
								}
								else if ((unsigned int)x_DWORD_181EDC <= 0x51)
								{
									x_DWORD_181ECC = *(uint8_t *)(*(_DWORD *)(x_DWORD_181EB8 + 20) + 2)
										+ (**(uint8_t **)(x_DWORD_181EB8 + 20) << 16)
										+ (*(uint8_t *)(*(_DWORD *)(x_DWORD_181EB8 + 20) + 1) << 8);
									*(_DWORD *)(x_DWORD_181EB8 + 112) = 16 * x_DWORD_181ECC;
								}
								else if (x_DWORD_181EDC == 88)
								{
									*(_DWORD *)(x_DWORD_181EB8 + 100) = **(uint8_t **)(x_DWORD_181EB8 + 20);
									x_DWORD_181ECC = *(uint8_t *)(*(_DWORD *)(x_DWORD_181EB8 + 20) + 1) - 2;
									x_DWORD_181EC8 = 16000000 / x_DWORD_181DAC[11];
									if (x_DWORD_181ECC >= 0)
									{
										*(_DWORD *)(x_DWORD_181EB8 + 104) = x_DWORD_181EC8 << x_DWORD_181ECC;
									}
									else
									{
										x_DWORD_181ECC = -x_DWORD_181ECC;
										*(_DWORD *)(x_DWORD_181EB8 + 104) = x_DWORD_181EC8 >> x_DWORD_181ECC;
									}
									*(_DWORD *)(x_DWORD_181EB8 + 108) = 0;
									*(_DWORD *)(x_DWORD_181EB8 + 108) -= *(_DWORD *)(x_DWORD_181EB8 + 104);
									*(_DWORD *)(x_DWORD_181EB8 + 92) = 0;
									++*(_DWORD *)(x_DWORD_181EB8 + 96);
									if (*(_DWORD *)(x_DWORD_181EB8 + 36))
										(*(void(__cdecl **)(_DWORD, HSEQUENCE, _DWORD, _DWORD))(x_DWORD_181EB8 + 36))(
											*(_DWORD *)x_DWORD_181EB8,
											x_DWORD_181EB8,
											*(_DWORD *)(x_DWORD_181EB8 + 92),
											*(_DWORD *)(x_DWORD_181EB8 + 96));
								}
								*(_DWORD *)(x_DWORD_181EB8 + 20) += x_DWORD_181ED8;
							}
							else
							{
							LABEL_49:
								x_DWORD_181EB4 = x_DWORD_181ED0 & 0xF;
								x_DWORD_181ED0 &= 0xF0u;
								sub_A5850(
									x_DWORD_181EB8,
									**(uint8_t **)(x_DWORD_181EB8 + 20),
									*(uint8_t *)(*(_DWORD *)(x_DWORD_181EB8 + 20) + 1),
									*(uint8_t *)(*(_DWORD *)(x_DWORD_181EB8 + 20) + 2),
									1);
								if (x_DWORD_181ED0 == 144)
								{
									for (x_DWORD_181EBC = 0;
										x_DWORD_181EBC < 32 && *(_DWORD *)(x_DWORD_181EB8 + 4 * x_DWORD_181EBC + 1368) != -1;
										++x_DWORD_181EBC)
									{
										;
									}
									if (x_DWORD_181EBC == 32)
									{
										qmemcpy(x_BYTE_181C90, (void*)"Internal note queue overflow\n\0", 0x1Eu);
										sub_95DE0_AIL_stop_sequence(x_DWORD_181EB8);
										//result = x_DWORD_181EB8;
										*(_DWORD *)(x_DWORD_181EB8 + 4) = 2;
										x_DWORD_E4B18 = 0;
										//return result;
										return;
									}
									++*(_DWORD *)(x_DWORD_181EB8 + 1364);
									*(_DWORD *)(4 * x_DWORD_181EBC + x_DWORD_181EB8 + 1368) = x_DWORD_181EB4;
									*(_DWORD *)(4 * x_DWORD_181EBC + x_DWORD_181EB8 + 1496) = *(uint8_t *)(*(_DWORD *)(x_DWORD_181EB8 + 20)
										+ 1);
									*(_DWORD *)(x_DWORD_181EB8 + 20) += 3;
									*(_DWORD *)(x_DWORD_181EB8 + 4 * x_DWORD_181EBC + 1624) = sub_A5040((int32_t*)x_DWORD_181EB8 + 20);
								}
								else
								{
									v7 = x_DWORD_181EB8;
									*(_DWORD *)(v7 + 20) += sub_A4E10(**(uint8_t **)(x_DWORD_181EB8 + 20));
								}
							}
						}
					}
				LABEL_62:
					if (!x_DWORD_181ED4)
					{
						*(_DWORD *)(x_DWORD_181EB8 + 108) += *(_DWORD *)(x_DWORD_181EB8 + 104);
						if (*(_DWORD *)(x_DWORD_181EB8 + 108) >= *(_DWORD *)(x_DWORD_181EB8 + 112))
						{
							*(_DWORD *)(x_DWORD_181EB8 + 108) -= *(_DWORD *)(x_DWORD_181EB8 + 112);
							if (++*(_DWORD *)(x_DWORD_181EB8 + 92) >= *(_DWORD *)(x_DWORD_181EB8 + 100))
							{
								*(_DWORD *)(x_DWORD_181EB8 + 92) = 0;
								++*(_DWORD *)(x_DWORD_181EB8 + 96);
							}
							if (*(_DWORD *)(x_DWORD_181EB8 + 36))
							{
								sub_97330_AIL_sequence_position((int32_t*)x_DWORD_181EB8, &x_DWORD_181EBC, &x_DWORD_181EC0);
								(*(void(__cdecl **)(_DWORD, HSEQUENCE, int, int))(x_DWORD_181EB8 + 36))(
									*(_DWORD *)x_DWORD_181EB8,
									x_DWORD_181EB8,
									x_DWORD_181EBC,
									x_DWORD_181EC0);
							}
						}
					}
				}
				if (!x_DWORD_181ED4)
				{
					if (*(_DWORD *)(x_DWORD_181EB8 + 56) != *(_DWORD *)(x_DWORD_181EB8 + 60))
					{
						*(_DWORD *)(x_DWORD_181EB8 + 64) += *(_DWORD *)(*(_DWORD *)x_DWORD_181EB8 + 16);
						do
						{
							if (*(_DWORD *)(x_DWORD_181EB8 + 64) < *(_DWORD *)(x_DWORD_181EB8 + 68))
								break;
							*(_DWORD *)(x_DWORD_181EB8 + 64) -= *(_DWORD *)(x_DWORD_181EB8 + 68);
							if (*(_DWORD *)(x_DWORD_181EB8 + 60) <= *(_DWORD *)(x_DWORD_181EB8 + 56))
								--*(_DWORD *)(x_DWORD_181EB8 + 56);
							else
								++*(_DWORD *)(x_DWORD_181EB8 + 56);
						} while (*(_DWORD *)(x_DWORD_181EB8 + 56) != *(_DWORD *)(x_DWORD_181EB8 + 60));
						if (!(*(_BYTE *)(x_DWORD_181EB8 + 52) & 7))
							sub_A64C0(x_DWORD_181EB8);
					}
					if (*(_DWORD *)(x_DWORD_181EB8 + 72) != *(_DWORD *)(x_DWORD_181EB8 + 76))
					{
						*(_DWORD *)(x_DWORD_181EB8 + 80) += *(_DWORD *)(*(_DWORD *)x_DWORD_181EB8 + 16);
						do
						{
							if (*(_DWORD *)(x_DWORD_181EB8 + 80) < *(_DWORD *)(x_DWORD_181EB8 + 84))
								break;
							*(_DWORD *)(x_DWORD_181EB8 + 80) -= *(_DWORD *)(x_DWORD_181EB8 + 84);
							if (*(_DWORD *)(x_DWORD_181EB8 + 76) <= *(_DWORD *)(x_DWORD_181EB8 + 72))
								--*(_DWORD *)(x_DWORD_181EB8 + 72);
							else
								++*(_DWORD *)(x_DWORD_181EB8 + 72);
						} while (*(_DWORD *)(x_DWORD_181EB8 + 72) != *(_DWORD *)(x_DWORD_181EB8 + 76));
					}
				}
			}
			--x_DWORD_181EC4;
		}
	}
	//return result;
	return;
}

//----- (000A6E00) --------------------------------------------------------
int sub_A6E00_sound_proc25(HMDIDRIVER a1, IO_PARMS* a2)//287e00
{
	IO_PARMS v3; // [esp+0h] [ebp-24h]
	/*int16_t v4; // [esp+2h] [ebp-22h]
	int16_t v5; // [esp+4h] [ebp-20h]
	int16_t v6; // [esp+6h] [ebp-1Eh]*/
	//int v7; // [esp+8h] [ebp-1Ch]
	unsigned int i; // [esp+1Ch] [ebp-8h]
	IO_PARMS v9; // [esp+20h] [ebp-4h]


	qmemcpy(&v3, (void*)a2, 0x18u);
	if (1/*a1->var0_aildrv->AIL_DRIVER_var4_VHDR->environment_string*//**(x_WORD *)(*(x_DWORD *)(*a1 + 16) + 16)*/)//fixed
	{
		/*v9 = (int16_t *)((a1->var0_aildrv->AIL_DRIVER_var4_VHDR->VDI_HDR_var12) & 0xFFFF
					   + 16 * a1->var0_aildrv->AIL_DRIVER_var4_VHDR->VDI_HDR_var12 >> 16);
		*/
		v9.IO = 0x220;
		v9.IRQ = -1;
		v9.DMA_8_bit = -1;
		v9.DMA_16_bit = -1;
		v9.IO_reserved[0] = -1;
		v9.IO_reserved[1] = -1;
		v9.IO_reserved[2] = -1;
		v9.IO_reserved[3] = -1;//fixed
		if (v3.IO < 1)
			v3.IO = v9.IO;
		if (v3.IRQ < 1)
			v3.IRQ = v9.IRQ;
		if (v3.DMA_8_bit < 1)
			v3.DMA_8_bit = v9.DMA_8_bit;
		if (v3.DMA_16_bit < 1)
			v3.DMA_16_bit = v9.DMA_16_bit;
		for (i = 0; i < 4; i++)
		{
			if (v3.IO_reserved[i] < 1)
				v3.IO_reserved[i] = v9.IO_reserved[i];
		}
	}
	qmemcpy((void *)&a1->drvr_0->VHDR_4->IO, &v3, 0x18u);
	return sub_91F70_AIL_call_driver(a1->drvr_0, 772, 0, 0);
}

//----- (000A6FB0) --------------------------------------------------------
HMDIDRIVER sub_A6FB0_sound_proc26(AIL_DRIVER* a1, IO_PARMS *a2)//287fb0
{
	int64_t v2; // rtt
	unsigned int v3; // eax
	IO_PARMS v5; // [esp+0h] [ebp-3Ch]
	VDI_CALL v6; // [esp+18h] [ebp-24h]
	//uint16_t v7; // [esp+1Ah] [ebp-22h]
	//uint16_t v8; // [esp+1Ch] [ebp-20h]
	//uint16_t v9; // [esp+1Eh] [ebp-1Eh]
	HMDIDRIVER v10; // [esp+24h] [ebp-18h]
	Bit8u* v11; // [esp+28h] [ebp-14h]
	const char* v11x = ".OPL\0";
	HMDIDRIVER v12; // [esp+2Ch] [ebp-10h]
	int v13; // [esp+30h] [ebp-Ch]
	int i; // [esp+34h] [ebp-8h]
	x_BYTE *v15; // [esp+38h] [ebp-4h]
	void *v16; // [esp+50h] [ebp+14h]
	const void *v17; // [esp+50h] [ebp+14h]

	//fix it
	v15 = 0;
	v16 = 0;
	v10 = 0;
	//fix it

	sub_A4CF0();
	v12 = (HMDIDRIVER)sub_9D450_malloc4(sizeof(_MDI_DRIVER));
	if (v12)
	{
		v12->drvr_0 = a1;
		if (v12->drvr_0->type_5 == 1)
		{
			sub_91F70_AIL_call_driver(v12->drvr_0, 769, 0, &v6);
			//v12->var1_aildrv = sound_buffer[v6.AX];//v6.AX + 16 * v6.DX;
			v12->DST_2 = (MDI_DST*)sound_buffer[0/*v6.BX*/];//v6.BX + 16 * v6.CX;
			//v11 = sound_buffer[*v12->var1_aildrv];//(x_BYTE *)((*(x_DWORD *)v12[1] & 0xFFFF) + 16 * (*(x_DWORD *)v12[1] >> 16));

			v11 = 0;
			if (v11)
			{
				if (*v11)
				{
					//_dupenv_s((char**)v15,(size_t*)sizeof(v11),(char*)v11);
					// FIXME: types
					// v15 = mygetenv((const char*)v11);
					if (v15)
					{
						// FIXME: types
						// // if (*v15)
						// 	strncpy((char*)v12->DST_2, v15, 128);
					}
				}
			}
			//v11 = (Bit8u*)v12->var0_aildrv->AIL_DRIVER_var4_VHDR->mdiapplendix;//(x_BYTE *)((*(x_DWORD *)(v12[1] + 4) & 0xFFFF) + 16 * (*(x_DWORD *)(v12[1] + 4) >> 16));

			if (v11x && *v11x)
			{
				strcpy((char*)v12->DST_2->GTL_filename, aSample);
				strcpy((char*)v12->DST_2->GTL_filename + strlen((const char*)aSample), (const char*)v11x);
			}
			else
			{
				*(x_BYTE *)(v12->DST_2 + 128) = 0;
			}
			memset(&unk_181D90, -1, 24);
			v13 = 0;
			if (a2)
			{
				qmemcpy(&unk_181D90, (void*)a2, 0x18u);
				if (sub_A6E00_sound_proc25(v12, a2))
				{
					v13 = 1;
					qmemcpy(&v5, (void*)a2, 0x18u);
				}
			}
			if (!v13)
			{
				v16 = sub_92ED0_AIL_get_IO_environment(v12->drvr_0);
				if (v16)
				{
					qmemcpy(&unk_181D90, v16, 0x18u);
					if (sub_A6E00_sound_proc25(v12, (IO_PARMS*)v16))
					{
						v13 = 1;
						qmemcpy(&v5, v16, 0x18u);
					}
				}
			}
			if (!v13 && x_DWORD_181DAC[17] == 1)
			{
				for (i = 0; *(uint16_t *)v12->drvr_0->VHDR_4->environment_string_16 > i; i++)
				{
					v17 = (const void *)(24 * i
						+ (v12->drvr_0->VHDR_4->VDI_HDR_var12 & 0xFFFF)
						+ 16 * v12->drvr_0->VHDR_4->VDI_HDR_var12);
					if (!i)
						qmemcpy(&unk_181D90, (void*)v17, 0x18u);
					if (sub_A6E00_sound_proc25(v12, (IO_PARMS*)v17))
					{
						v13 = 1;
						qmemcpy(&v5, (void*)v17, 0x18u);
						break;
					}
				}
			}
			if (v13)
			{
				qmemcpy(&unk_181D90, &v5, 0x18u);
				sub_91F70_AIL_call_driver(v12->drvr_0, 773, 0, 0);
				v12->drvr_0->initialized_6 = 1;
				sub_91F70_AIL_call_driver(v12->drvr_0, 1281, 0, &v6);
				if (v6.AX)
				{
					v12->n_sequences_7 = x_DWORD_181DAC[12];
					v12->sequences_6 = (HSEQUENCE)sub_9D450_malloc4(sizeof(SEQUENCE) * v12->n_sequences_7);
					if (v12->sequences_6)
					{
						for (i = 0; i < v12->n_sequences_7; i++)
						{
							v12->sequences_6[i].status_1 = 1;
							v12->sequences_6[i].driver_0 = v12;
						}
						v12->var104_aildrv = 0;
						v12->var105_aildrv = 0;
						v12->var106_aildrv = 0;
						v12->var107_aildrv = 0;
						LODWORD(v2) = 1000000;
						HIDWORD(v2) = 1000000 >> 31;
						v12->interval_time_4 = v2 / x_DWORD_181DAC[11];
						v12->disable_5 = 0;
						v12->var108_aildrv = 127;
						/*for ( i = 0; i < 16; i++ )
						{
						  v12[i + 8] = 0;
						  v12[i + 24] = 0;
						  v12[i + 40] = 0;
						  v12[i + 56] = 0;
						  v12[i + 72] = 0;
						  v12[i + 88] = 0;
						}*/
						//v3 = sub_92600_AIL_register_timer(sub_A6530);
						v3 = 1;//fix
						v12->timer_3 = v3;
						if (v12->timer_3 == -1)
						{
							qmemcpy(&x_BYTE_181C90, (void*)"Out of timer handles\n", 0x16u);
							sub_91F70_AIL_call_driver(v12->drvr_0, 774, 0, 0);
							v12->drvr_0->initialized_6 = 0;
							sub_9D490_free4((void*)v12->sequences_6, 1816 * v12->n_sequences_7);
							sub_9D490_free4(v12, 468);
							v10 = 0;
						}
						else
						{
							//sub_92740_AIL_set_timer_user(v12->timer_3, (int32_t)v12);
							v12->drvr_0->destructor_9 = sub_A6F30;
							v12->drvr_0->descriptor_10 = v12;
							for (i = 0; i < 16; i++)
							{
								sub_A4F10(v12, i | 0xB0, 114, 0);
								sub_A4F10(v12, i | 0xC0, 0, 0);
								sub_A4F10(v12, i | 0xE0, 0, 64);
								sub_A4F10(v12, i | 0xB0, 112, 0);
								sub_A4F10(v12, i | 0xB0, 1, 0);
								sub_A4F10(v12, i | 0xB0, 7, x_DWORD_181DAC[13]);
								sub_A4F10(v12, i | 0xB0, 10, 64);
								sub_A4F10(v12, i | 0xB0, 11, 127);
								sub_A4F10(v12, i | 0xB0, 64, 0);
								sub_A4F10(v12, i | 0xB0, 91, 40);
								sub_A4F10(v12, i | 0xB0, 93, 0);
								sub_A4F10(v12, i | 0xB0, 100, 0);
								sub_A4F10(v12, i | 0xB0, 101, 0);
								sub_A4F10(v12, i | 0xB0, 38, 0);
								sub_A4F10(v12, i | 0xB0, 6, x_DWORD_181DAC[16]);
								sub_A4EB0(v12);
								if (!(i & 3))
									sub_920D0_AIL_delay(3);
							}
							//sub_92930_AIL_set_timer_frequency(v12->timer_3, x_DWORD_181DAC[11]);
							//sub_92BA0_AIL_start_timer(v12->timer_3);
							v10 = v12;
						}
					}
					else
					{
						qmemcpy(&x_BYTE_181C90, (void*)"Could not allocate SEQUENCE structures\n", 0x28u);
						sub_91F70_AIL_call_driver(v12->drvr_0, 774, 0, 0);
						v12->drvr_0->initialized_6 = 0;
						sub_9D490_free4(v12, 468);
						v10 = 0;
					}
				}
				else
				{
					qmemcpy(&x_BYTE_181C90, (void*)"Could not initialize instrument manager\n", 0x29u);
					sub_91F70_AIL_call_driver(v12->drvr_0, 774, 0, 0);
					v12->drvr_0->initialized_6 = 0;
					sub_9D490_free4(v12, 468);
					v10 = 0;
				}
			}
			else
			{
				qmemcpy(&x_BYTE_181C90, (void*)"XMIDI sound hardware not found\n", 0x20u);
				sub_9D490_free4(v12, 468);
				v10 = 0;
			}
		}
		else
		{
			qmemcpy(&x_BYTE_181C90, (void*)".MDI driver required\n", 0x16u);
			sub_9D490_free4(v12, 468);
			v10 = 0;
		}
	}
	else
	{
		qmemcpy(&x_BYTE_181C90, (void*)"Could not allocate memory for driver\n", 0x26u);
		v10 = 0;
	}

	return v10;
}

//----- (000A77D0) --------------------------------------------------------
HMDIDRIVER sub_A77D0_AIL_API_install_MDI_INI(char* filename, IO_PARMS *IO)//2887d0
{
	int v3; // eax
	HMDIDRIVER v5; // [esp+0h] [ebp-10h]
	Bit8u* v6; // [esp+4h] [ebp-Ch]
	HMDIDRIVER v7; // [esp+8h] [ebp-8h]
	AIL_DRIVER *v8; // [esp+Ch] [ebp-4h]

	v6 = sub_9DEA0_read_file(filename, 0);
	if (v6)
	{
		v3 = sub_9DE20_get_file_lenght(filename);
		v8 = sub_93010_AIL_install_driver(/*(int)a1,*/ v6, v3);
		x_free((void*)v6);
		if (v8)
		{
			v7 = sub_A6FB0_sound_proc26(v8, IO);
			if (!v7)
				sub_93160_AIL_uninstall_driver((AIL_DRIVER*)v8);
			v5 = v7;
		}
		else
		{
			v5 = 0;
		}
	}
	else
	{
		strcpy(x_BYTE_181C90, "Driver file not found\n");
		v5 = 0;
	}
	return v5;
}

//----- (000A7880) --------------------------------------------------------
HMDIDRIVER sub_A7880_sound_proc27(int a1, Bit8u* a2, int a3, IO_PARMS* a4)
{
	HMDIDRIVER v6; // [esp+4h] [ebp-8h]
	AIL_DRIVER *v7; // [esp+8h] [ebp-4h]

	v7 = sub_93010_AIL_install_driver(/*a1, */a2, a3);
	if (!v7)
		return 0;
	v6 = sub_A6FB0_sound_proc26(v7, a4);
	if (!v6)
		sub_93160_AIL_uninstall_driver((AIL_DRIVER*)v7);
	return v6;
}

//----- (000A78F0) --------------------------------------------------------
Bit32s sub_A78F0_AIL_API_install_MDI_INI(/*int a1, */HMDIDRIVER *mdi) //2888f0
{
	AIL_INI v3; // [esp+0h] [ebp-11Ch]
	//char v4; // [esp+80h] [ebp-9Ch]
	//char v5; // [esp+100h] [ebp-1Ch]
	int result; // [esp+118h] [ebp-4h]

	/*char v8x[200];
	IO_PARMS v9x = {};*/

	if (sub_92190_AIL_read_INI(&v3, (char*)"MDI.INI"/*,v8x,v9x*/))
	{
		*mdi = sub_95850_AIL_install_MDI_driver_file(v3.driver_name, &v3.IO);
		if (*mdi)
			result = 0;
		else
			result = 2;
	}
	else
	{
		qmemcpy(&x_BYTE_181C90, (void*)"Unable to open file MDI.INI\n", 0x1Du);
		result = 1;
	}
	return result;
}

//----- (000A7970) --------------------------------------------------------
int sub_A7970_AIL_API_uninstall_MDI_driver(HMDIDRIVER mdi)//288970
{
	return sub_93160_AIL_uninstall_driver(mdi->drvr_0);
	return 0;
}

//----- (000A7990) --------------------------------------------------------
Bit32s sub_A7990_AIL_API_MDI_driver_type(HMDIDRIVER mdi)//288990
{
	int v3; // [esp+4h] [ebp-4h]
	char *v4; // [esp+4h] [ebp-4h]

	const char* v4help = ".OPL";//fix;

	if (mdi->drvr_0->VHDR_4->driver_version_8 >= 0x112u)
	{
		v3 = mdi->drvr_0->VHDR_4->VDI_HDR_var46;
		if (!_stricmp((const char*)v3, "Tandy 3-voice music"))
			return 3;
		if (!_stricmp((const char*)v3, "IBM internal speaker music"))
			return 3;
	}
	/*v4 = (x_BYTE *)((*(x_DWORD *)(mdi[1] + 4) & 0xFFFF) + 16 * (*(x_DWORD *)(mdi[1] + 4) >> 16));
	if ( !v4 || !*v4 )
	  return 0;*/ // fix
	v4 = (char*)v4help;
	if (!_stricmp(v4, ".AD"))
		return mdi->drvr_0->size_3 <= 0x5000u;
	if (!_stricmp(v4, ".OPL"))
		return 2;
	return 0;
}

//----- (000A7AA0) --------------------------------------------------------
void sub_A7AA0_AIL_API_set_GTL_filename_prefix(Bit8u* a1)//288aa0
{
	int samplesize; // eax
	int i; // [esp+0h] [ebp-4h]

	strcpy(aSample, (const char*)a1);
	samplesize = strlen(aSample) - 1;
	for (i = samplesize; i; i--)
	{
		if (aSample[i] == 92)
		{
			samplesize = strlen(aSample) - 1;
			if (samplesize == i)
			{
				samplesize = i;
				aSample[i] = 0;
			}
			return;
		}
		if (aSample[i] == 46)
		{
			samplesize = i;
			aSample[i] = 0;
			return;
		}
		samplesize = i;
	}
	return;
}

//----- (000A7B30) --------------------------------------------------------
HSEQUENCE sub_A7B30_AIL_API_allocate_sequence_handle(HMDIDRIVER mdi)//288b30
{
	HSEQUENCE v1; // ST08_4
	HSEQUENCE v3; // [esp+0h] [ebp-Ch]
	int i; // [esp+8h] [ebp-4h]

	//fix it
	v3 = 0;
	//fix it

	sub_91BD0_s_plus();
	for (i = 0; i < mdi->n_sequences_7 && mdi->sequences_6[i].status_1 != 1; i++)
		;
	if (i == mdi->n_sequences_7)
	{
		qmemcpy(&x_BYTE_181C90, (void*)"Out of sequence handles\n", 0x19u);
		sub_91BF0_s_minus();
		v3 = 0;
	}
	else
	{
		v1 = &mdi->sequences_6[i];
		v1->status_1 = 2;
		sub_A6370(v1);
		v1->EOS_10 = 0;
		sub_91BF0_s_minus();
		v3 = v1;
	}
	return v3;
}

//----- (000A7BF0) --------------------------------------------------------
void sub_A7BF0_sound_proc33(HSEQUENCE S)//288bf0
{
	if (S)
	{
		sub_95DE0_AIL_stop_sequence(S);
		S->status_1 = 1;
	}
}

Bit32s sub_A7C20_AIL_API_init_sequence(HSEQUENCE S, void* start, Bit32s sequence_num, Bit32u track) {
	//S->ICA_6 = 0;
	//S->prefix_callback_7 = 0;
	//S->trigger_callback_8_32 = 0;
	//S->beat_callback_9 = 0;
	//S->EOS_10 = 0;
	S->loop_count_11 = 1;
	S->volume_14 = x_DWORD_181DAC[13];
	S->volume_target_15 = x_DWORD_181DAC[13];
	S->volume_period_17 = 0;
	S->volume_accum_16 = 0;
	/*S->tempo_percent_18 = 100;
	S->tempo_target_19 = 100;
	S->tempo_period_21 = 0;
	S->tempo_accum_20 = 0;
	S->tempo_error_22 = 0;*/
	S->sequence_num = sequence_num;
	SOUND_init_MIDI_sequence(x_DWORD_E3810_music_data, x_DWORD_E3808_music_header, track - 1);
	return 1;
}

//----- (000A7C20) --------------------------------------------------------
Bit32s sub_A7C20_AIL_API_init_sequence_orig(HSEQUENCE S, void* start, Bit32s sequence_num)
{
	VDI_CALL v4; // [esp+0h] [ebp-30h]
	Bit32u v5; // [esp+2h] [ebp-2Eh]
	int v6; // [esp+Ch] [ebp-24h]
	int v7; // [esp+10h] [ebp-20h]
	unsigned int v8; // [esp+14h] [ebp-1Ch]
	x_WORD *v9; // [esp+18h] [ebp-18h]
	unsigned int v10; // [esp+1Ch] [ebp-14h]
	unsigned int i; // [esp+20h] [ebp-10h]
	unsigned int v12; // [esp+24h] [ebp-Ch]
	Bit8u* v13; // [esp+28h] [ebp-8h]
	Bit8u* v14; // [esp+2Ch] [ebp-4h]
	//int v14i;//delete

	//fix it
	v5 = 0;
	v14 = 0;
	//fix it

	if (!S)
		return 0;
	S->status_1 = 2;
	v14 = sub_A50F0((Bit8u*)start, sequence_num);
	if (v14)
	{
		v10 = sub_A50A0(*(x_DWORD *)(v14 + 4)) + 8;
		v13 = v10 + v14;
		v14 += 12;
		S->TIMB_2 = 0;
		S->RBRN_3 = 0;
		S->EVNT_4 = 0;
		while (v14 < v13)
		{
			if (!strncmp((const char*)v14, "TIMB", 4))
				S->TIMB_2 = v14;
			if (!strncmp((const char*)v14, "RBRN", 4))
				S->RBRN_3 = (Bit8u*)v14;
			if (!strncmp((const char*)v14, "EVNT", 4))
				S->EVNT_4 = v14;
			v14 += sub_A50A0(*(x_DWORD *)(v14 + 4)) + 8;
		}
		if (S->EVNT_4)
		{
			S->ICA_6 = 0;
			S->prefix_callback_7 = 0;
			S->trigger_callback_8_32 = 0;
			S->beat_callback_9 = 0;
			S->EOS_10 = 0;
			S->loop_count_11 = 1;
			sub_A6490(S);
			S->volume_14 = x_DWORD_181DAC[13];
			S->volume_target_15 = x_DWORD_181DAC[13];
			S->volume_period_17 = 0;
			S->volume_accum_16 = 0;
			S->tempo_percent_18 = 100;
			S->tempo_target_19 = 100;
			S->tempo_period_21 = 0;
			S->tempo_accum_20 = 0;
			S->tempo_error_22 = 0;
			if (S->TIMB_2)
			{
				memmove(unk_181EE0x, (void*)S->TIMB_2, 512);
				v9 = (x_WORD*)unk_181EE0x;
				if (S->driver_0->var105_aildrv)
				{
					v12 = 0;
					while ((uint16_t)v9[4] > v12)
					{
						v7 = v9[v12 + 5] & 0xFF;
						v8 = (v9[v12 + 5] & 0xFF00u) >> 8;
						if ((*(int(**)(_MDI_DRIVER*, unsigned int, int))(S->driver_0->var105_aildrv))(S->driver_0, v8, v7))
						{
							for (i = v12 + 1; (uint16_t)v9[4] > i; i++)
								v9[i + 4] = v9[i + 5];
							--v9[4];
							if (*((x_BYTE *)v9 + 5) >= 2u)
							{
								*((x_BYTE *)v9 + 5) -= 2;
							}
							else
							{
								*((x_BYTE *)v9 + 5) -= 2;
								--*((x_BYTE *)v9 + 4);
							}
						}
						else
						{
							v12++;
						}
					}
				}
				if (v9[4])
				{
					if (sub_92160())
					{
						strcpy(x_BYTE_181C90, "No timbres loaded\n");
						v6 = -1;
					}
					else
					{
						S->driver_0->disable_5++;
						sub_A4EB0(S->driver_0);
						memmove((void*)(&S->driver_0->DST_2->MIDI_data), v9, 512);
						sub_91F70_AIL_call_driver(S->driver_0->drvr_0, 1283, 0, &v4);
						S->driver_0->disable_5--;
						if (v4.AX != -1)
						{
							v6 = 1;
						}
						else
						{
							sprintf(x_BYTE_181C90, "Driver could not install timbre bank %u, patch %u\n", v5 >> 8, v5);
							v6 = -1;
						}
					}
				}
				else
				{
					v6 = 1;
				}
			}
			else
			{
				v6 = 1;
			}
		}
		else
		{
			qmemcpy(&x_BYTE_181C90, (void*)"Invalid XMIDI sequence\n", 0x18u);
			v6 = 0;
		}
	}
	else
	{
		qmemcpy(&x_BYTE_181C90, (void*)"Invalid XMIDI sequence\n", 0x18u);
		v6 = 0;
	}
	return v6;
}


void sub_A8010_AIL_API_start_sequence(HSEQUENCE S, Bit32u track)//289010
{
	if (S)
	{
		if (S->status_1 != 1)
		{
			sub_95DE0_AIL_stop_sequence(S);
			SOUND_start_sequence(track - 1);
			S->status_1 = 4;
		}
	}

}

//----- (000A8010) --------------------------------------------------------
void sub_A8010_AIL_API_start_sequence_orig(HSEQUENCE S)//289010
{
	//int *result; // eax

	//fix it
	//result = 0;
	//fix it

	if (S)
	{
		//result = S;
		if (S->status_1 != 1)
		{
			sub_95DE0_AIL_stop_sequence(S);
			sub_A6490(S);
			//result = a1;
			S->status_1 = 4;
		}
	}
	//return result;
}

void sub_A8050_AIL_API_stop_sequence(HSEQUENCE S)//289050
{
	//int v2; // [esp+0h] [ebp-Ch]
	//signed int i; // [esp+4h] [ebp-8h]
	//HMDIDRIVER v4; // [esp+8h] [ebp-4h]

	if (S)
	{
		if (S->status_1 == 4)
		{
			S->status_1 = 8;
			SOUND_pause_sequence(S->sequence_num);
		}
	}
}

//----- (000A8050) --------------------------------------------------------
void sub_A8050_AIL_API_stop_sequence_orig(HSEQUENCE S)//289050
{
	//int result; // eax
	int v2; // [esp+0h] [ebp-Ch]
	signed int i; // [esp+4h] [ebp-8h]
	HMDIDRIVER v4; // [esp+8h] [ebp-4h]

	if (S)
	{
		//result = (int)S;
		if (S->status_1 == 4)
		{
			S->status_1 = 8;
			sub_A5E50(S);
			//result = *a1;
			v4 = (HMDIDRIVER)S->driver_0;
			for (i = 0; i < 16; i++)
			{
				v2 = S->chan_map_37[i];
				if (S->seq_277[i] >= 64)
					sub_A4F10((HMDIDRIVER)v4, v2 | 0xB0, 64, 0);
				if (S->seq_117[i] >= 64)
					v4->DST_2->MIDI_data[v2] = 0;//v4[v2 + 8]
				if (S->seq_149[i] >= 64)
					sub_A4F10((HMDIDRIVER)v4, v2 | 0xB0, 112, 0);
				if (S->seq_101[i] >= 64)
					sub_980D0_AIL_release_channel((int32_t*)v4, v2 + 1);
				//result = i;
			}
		}
	}
	//return result;
}

void sub_A8180_AIL_API_resume_sequence(HSEQUENCE S)//289180
{
	if (S && S->status_1 == 8)
	{
		S->status_1 = 4;
		SOUND_resume_sequence(S->sequence_num);
	}
}

//----- (000A8180) --------------------------------------------------------
void sub_A8180_AIL_API_resume_sequence_orig(x_DWORD *a1)//289180
{
	signed int v1; // [esp+0h] [ebp-10h]
	int v2; // [esp+4h] [ebp-Ch]
	signed int i; // [esp+8h] [ebp-8h]
	int j; // [esp+8h] [ebp-8h]
	x_DWORD *v5; // [esp+Ch] [ebp-4h]

	if (a1 && a1[1] == 8)
	{
		v5 = (x_DWORD *)*a1;
		for (i = 0; i < 16; i++)
		{
			if (a1[i + 101] >= 64)
			{
				v2 = sub_97F90_AIL_lock_channel(v5) - 1;
				if (v2 == -1)
					v1 = i;
				else
					v1 = v2;
				a1[i + 37] = v1;
			}
		}
		// FIXME: types
		// // for (j = 0; j < 16; j++)
		// 	sub_A5FD0((int)a1, j);
		a1[1] = 4;
	}
}

void sub_A8250_AIL_API_end_sequence(HSEQUENCE S)//289250
{
	if (S)
	{
		if (S->status_1 != 1)
		{
			sub_95DE0_AIL_stop_sequence(S);
			S->status_1 = 2;
			SOUND_stop_sequence(S->sequence_num);
		}
	}
}

//----- (000A8250) --------------------------------------------------------
void sub_A8250_AIL_API_end_sequence_orig(HSEQUENCE S)//289250
{
	//int result; // eax

	if (S)
	{
		//result = a1;
		if ((int)S->status_1 != 1)
		{
			sub_95DE0_AIL_stop_sequence(S);
			S->status_1 = 2;
			//result = a1;
			if (S->EOS_10)
				/*result =*/ (*(int(**)(HSEQUENCE))(S->EOS_10))(S);
		}
	}
	//return result;
}

//----- (000A82A0) --------------------------------------------------------
int sub_A82A0(int a1, int a2)//2892a0
{
	int result; // eax

	if (a1)
	{
		result = a2;
		*(x_DWORD *)(a1 + 44) = a2;
	}
	return result;
}

//----- (000A82C0) --------------------------------------------------------
void sub_A82C0(x_DWORD *a1, int a2, int a3)//2892c0
{
	if (a1)
	{
		++*(x_DWORD *)(*a1 + 20);
		a1[19] = a2;
		if (a1[18] == a1[19])
		{
			--*(x_DWORD *)(*a1 + 20);
		}
		else
		{
			if (a3)
			{
				a1[21] = 1000 * a3 / abs(a1[18] - a1[19]);
				a1[20] = 0;
			}
			else
			{
				a1[18] = a1[19];
			}
			--*(x_DWORD *)(*a1 + 20);
		}
	}
}

//----- (000A8360) --------------------------------------------------------
void sub_A8360_AIL_API_set_sequence_volume(HSEQUENCE S, Bit32s volume, Bit32s milliseconds)//289360
{
	if (S)
	{
		S->driver_0->disable_5++;
		S->volume_target_15 = volume;
		if (S->volume_14 == S->volume_target_15)
		{
			S->driver_0->disable_5--;
		}
		else
		{
			if (milliseconds)
			{
				S->volume_period_17 = 1000 * milliseconds / abs(S->volume_14 - S->volume_target_15);
				S->volume_accum_16 = 0;
			}
			else
			{
				S->volume_14 = S->volume_target_15;
			}
			sub_A64C0(S);
			S->driver_0->disable_5--;
		}
	}
}

//----- (000A8410) --------------------------------------------------------
int sub_A8410_AIL_API_sequence_status(HSEQUENCE S)
{
	int v2; // [esp+0h] [ebp-4h]

	if (S)
		v2 = S->status_1;
	else
		v2 = 0;
	return v2;
}

//----- (000A8440) --------------------------------------------------------
signed int sub_A8440(int a1)
{
	signed int v2; // [esp+0h] [ebp-4h]

	if (a1)
		v2 = *(x_DWORD *)(a1 + 44);
	else
		v2 = -1;
	return v2;
}

//----- (000A8470) --------------------------------------------------------
int sub_A8470(int a1)
{
	int v2; // [esp+0h] [ebp-4h]

	if (a1)
		v2 = *(x_DWORD *)(a1 + 72);
	else
		v2 = 0;
	return v2;
}

//----- (000A84A0) --------------------------------------------------------
int sub_A84A0(int a1)
{
	int v2; // [esp+0h] [ebp-4h]

	if (a1)
		v2 = *(x_DWORD *)(a1 + 56);
	else
		v2 = 0;
	return v2;
}

//----- (000A84D0) --------------------------------------------------------
void sub_A84D0_AIL_API_set_XMIDI_master_volume(HMDIDRIVER mdi, Bit32s master_volume)
{
	Bit32s result; // eax
	int v3; // [esp+0h] [ebp-8h]
	HSEQUENCE v4; // [esp+4h] [ebp-4h]

	result = mdi->master_volume;
	if (result != master_volume)
	{
		mdi->master_volume = master_volume;
		mdi->disable_5++;
		v3 = mdi->n_sequences_7;
		v4 = mdi->sequences_6;
		while (v3)
		{
			if (*(x_DWORD *)(v4 + 4) == 4)
				sub_A64C0(v4);
			v3--;
			v4 += 1816;
		}
		mdi->disable_5--;
	}
}

//----- (000A8550) --------------------------------------------------------
int sub_A8550(int a1)
{
	return *(x_DWORD *)(a1 + 432);
}

//----- (000A8570) --------------------------------------------------------
int sub_A8570_sound_proc39(int *a1, int16_t a2, int16_t a3)
{
	VDI_CALL v4; // [esp+0h] [ebp-10h]
	int16_t v5; // [esp+4h] [ebp-Ch]

	v5 = (a2 << 8) | a3;
	return sub_91F70_AIL_call_driver((AIL_DRIVER*)*a1, 1284, &v4, 0);
}

//----- (000A85B0) --------------------------------------------------------
VDI_CALL sub_A85B0_sound_proc40(int *a1, int a2, int a3)
{
	VDI_CALL result; // [esp+0h] [ebp-10h]
	Bit32u v5; // [esp+2h] [ebp-Eh]

	//fix it
	v5 = 0;
	//fix it

	if (a1[105] && ((int(*)(int *, int, int))a1[105])(a1, a2, a3))
	{
		result.AX = 1;
		return result;
	}
	x_BYTE_E4B2A = a3;
	x_BYTE_E4B2B = a2;
	++a1[5];
	sub_A4EB0((HMDIDRIVER)a1);
	memmove((void*)(a1[2] + 256), aTimb_0, 12);
	sub_91F70_AIL_call_driver((AIL_DRIVER*)*a1, 1283, 0, &result);
	--a1[5];
	if (!result.AX)
		sprintf(x_BYTE_181C90, "Driver could not install timbre bank %u, patch %u\n", v5 >> 8, v5);
	return result;
}

//----- (000A8690) --------------------------------------------------------
int sub_A8690_sound_proc41(int *a1, int16_t a2, int16_t a3)
{
	VDI_CALL v4; // [esp+0h] [ebp-Ch]
	int16_t v5; // [esp+4h] [ebp-8h]
	int16_t v6; // [esp+6h] [ebp-6h]

	v5 = (a2 << 8) | a3;
	v6 = 1;
	return sub_91F70_AIL_call_driver((AIL_DRIVER*)*a1, 1285, &v4, 0);
}

//----- (000A86D0) --------------------------------------------------------
int sub_A86D0_sound_proc42(int *a1, int16_t a2, int16_t a3)
{
	VDI_CALL v4; // [esp+0h] [ebp-Ch]
	int16_t v5; // [esp+4h] [ebp-8h]
	int16_t v6; // [esp+6h] [ebp-6h]

	v5 = (a2 << 8) | a3;
	v6 = 0;
	return sub_91F70_AIL_call_driver((AIL_DRIVER*)*a1, 1285, &v4, 0);
}

//----- (000A8710) --------------------------------------------------------
int sub_A8710(int a1)
{
	int v2; // [esp+4h] [ebp-8h]
	int i; // [esp+8h] [ebp-4h]

	v2 = 0;
	for (i = 0; i < *(x_DWORD *)(a1 + 28); i++)
	{
		if (*(x_DWORD *)(1816 * i + *(x_DWORD *)(a1 + 24) + 4) == 4)
			++v2;
	}
	return v2;
}

//----- (000A8770) --------------------------------------------------------
int sub_A8770(int a1, char a2, unsigned int a3)
{
	int v4; // [esp+0h] [ebp-4h]

	if (a1)
		v4 = sub_A5210(a1 + 212, (a2 - 1) | 0xB0, a3);
	else
		v4 = -1;
	return v4;
}

//----- (000A87C0) --------------------------------------------------------
int sub_A87C0(int a1, int a2)
{
	int v4; // [esp+4h] [ebp-8h]
	signed int i; // [esp+8h] [ebp-4h]

	if (!a1)
		return 0;
	v4 = 0;
	for (i = 0; i < 16; i++)
	{
		if (a2 - 1 == *(x_DWORD *)(4 * i + a1 + 1368))
			++v4;
	}
	return v4;
}

//----- (000A8830) --------------------------------------------------------
int sub_A8830(x_DWORD *a1, x_DWORD *a2, x_DWORD *a3)
{
	int result; // eax
	int v4; // [esp+0h] [ebp-10h]
	int i; // [esp+4h] [ebp-Ch]
	int v6; // [esp+8h] [ebp-8h]
	int v7; // [esp+Ch] [ebp-4h]

	if (a1)
	{
		++*(x_DWORD *)(*a1 + 20);
		v7 = a1[23];
		v6 = a1[24];
		v4 = a1[27];
		for (i = 0; i < x_DWORD_181DAC[14]; i++)
		{
			v4 += a1[26];
			if (v4 >= a1[28])
			{
				v4 -= a1[28];
				if (++v7 >= a1[25])
				{
					v7 = 0;
					++v6;
				}
			}
		}
		if (v6 < 0)
			v6 = 0;
		if (a3)
			*a3 = v6;
		if (a2)
			*a2 = v7;
		result = *a1;
		--*(x_DWORD *)(result + 20);
	}
	return result;
}

//----- (000A8900) --------------------------------------------------------
x_DWORD *sub_A8900(HSEQUENCE S, int a2)
{
	x_DWORD *result; // eax
	int v3; // [esp+0h] [ebp-Ch]
	signed int i; // [esp+4h] [ebp-8h]
	signed int v5; // [esp+8h] [ebp-4h]
	signed int j; // [esp+8h] [ebp-4h]

	//fix it
	result = 0;
	//fix it

	if (S)
	{
		result = (x_DWORD*)S;
		if (S->RBRN_3)
		{
			v5 = *(int16_t *)(&S->RBRN_3[8]);
			v3 = S->RBRN_3[10];
			for (i = 0; i < v5 && *(uint16_t *)(v3 + 6 * i) != a2; i++)
				;
			result = (x_DWORD *)i;
			if (i != v5)
			{
				//S->EVNT_ptr_5 = (int)*(x_DWORD *)(6 * i + v3 + 2) + /*(Bit8u*)&*/S->EVNT_4+8; // fix it
			  //result = S;
				S->interval_count_12 = 0;
				if (!x_DWORD_181DAC[15])
				{
					for (j = 0; j < 4; j++)
					{
						S->FOR_loop_count_33[j] = -1;
						//result = (x_DWORD *)j;
					}
				}
			}
		}
	}
	return result;
}

//----- (000A89E0) --------------------------------------------------------
int sub_A89E0(int a1, int a2)
{
	int v2; // ST04_4

	if (!a1)
		return 0;
	v2 = *(x_DWORD *)(a1 + 28);
	*(x_DWORD *)(a1 + 28) = a2;
	return v2;
}

//----- (000A8A20) --------------------------------------------------------
xCALLBACK sub_A8A20_AIL_API_trigger_callback(HSEQUENCE S, xCALLBACK a2)
{
	xCALLBACK v2; // ST04_4

	if (!S)
		return 0;
	v2 = S->trigger_callback_8_32;
	S->trigger_callback_8_32 = a2;
	return v2;
}

//----- (000A8A60) --------------------------------------------------------
int sub_A8A60(int a1, int a2)
{
	int v2; // ST04_4

	if (!a1)
		return 0;
	v2 = *(x_DWORD *)(a1 + 40);
	*(x_DWORD *)(a1 + 40) = a2;
	return v2;
}

//----- (000A8AA0) --------------------------------------------------------
int sub_A8AA0(int a1, int a2)
{
	int v2; // ST04_4

	if (!a1)
		return 0;
	v2 = *(x_DWORD *)(a1 + 36);
	*(x_DWORD *)(a1 + 36) = a2;
	return v2;
}

//----- (000A8AE0) --------------------------------------------------------
int sub_A8AE0(int a1, int a2)
{
	int v2; // ST04_4

	v2 = *(x_DWORD *)(a1 + 416);
	*(x_DWORD *)(a1 + 416) = a2;
	return v2;
}

//----- (000A8B20) --------------------------------------------------------
int sub_A8B20(int a1, int a2)
{
	int v2; // ST04_4

	v2 = *(x_DWORD *)(a1 + 420);
	*(x_DWORD *)(a1 + 420) = a2;
	return v2;
}

//----- (000A8B60) --------------------------------------------------------
int sub_A8B60(int a1, int a2, int a3)
{
	int result; // eax

	if (a1)
	{
		result = a3;
		*(x_DWORD *)(4 * a2 + a1 + 1752) = a3;
	}
	return result;
}

//----- (000A8B90) --------------------------------------------------------
int sub_A8B90(int a1, int a2)
{
	int v3; // [esp+0h] [ebp-4h]

	if (a1)
		v3 = *(x_DWORD *)(a1 + 4 * a2 + 1752);
	else
		v3 = 0;
	return v3;
}

//----- (000A8BD0) --------------------------------------------------------
int sub_A8BD0(int a1, int a2)
{
	int result; // eax

	if (a1)
	{
		result = a2;
		*(x_DWORD *)(a1 + 24) = a2;
	}
	return result;
}

//----- (000A8BF0) --------------------------------------------------------
int sub_A8BF0(x_DWORD *a1)
{
	int v2; // [esp+0h] [ebp-18h]
	int v3; // [esp+4h] [ebp-14h]
	signed int v4; // [esp+8h] [ebp-10h]
	signed int v5; // [esp+Ch] [ebp-Ch]
	signed int k; // [esp+10h] [ebp-8h]
	signed int i; // [esp+14h] [ebp-4h]
	signed int j; // [esp+14h] [ebp-4h]
	int v9; // [esp+14h] [ebp-4h]

	++a1[5];
	v5 = -1;
	v4 = 0x7FFFFFFF;
	for (i = 8; i >= 1; i--)
	{
		if (i != 9 && a1[i + 8] != 1 && a1[i + 8] != 2 && a1[i + 88] < v4)
		{
			v4 = a1[i + 88];
			v5 = i;
		}
	}
	if (v5 == -1)
	{
		for (j = 8; j >= 1; j--)
		{
			if (j != 9 && a1[j + 8] != 1 && a1[j + 88] < v4)
			{
				v4 = a1[j + 88];
				v5 = j;
			}
		}
	}
	if (v5 == -1)
	{
		--a1[5];
		v2 = 0;
	}
	else
	{
		sub_A4F10((HMDIDRIVER)a1, v5 | 0xB0, 64, 0);
		v9 = a1[7];
		v3 = a1[6];
		while (v9)
		{
			if (*(x_DWORD *)(v3 + 4) != 1)
			{
				for (k = 0; k < 32; k++)
				{
					if (*(x_DWORD *)(v3 + 4 * k + 1368) != -1 && *(x_DWORD *)(v3 + 4 * *(x_DWORD *)(v3 + 4 * k + 1368) + 148) == v5)
					{
						sub_A5850((HSEQUENCE)v3, *(unsigned int *)(v3 + 4 * k + 1368) | 0x80, *(x_DWORD *)(v3 + 4 * k + 1496), 0, 0);
						*(x_DWORD *)(v3 + 4 * k + 1368) = -1;
					}
				}
			}
			--v9;
			v3 += 1816;
		}
		a1[v5 + 72] = a1[v5 + 8];
		a1[v5 + 8] = 1;
		a1[v5 + 24] = 0;
		a1[v5 + 40] = a1[v5 + 56];
		--a1[5];
		v2 = v5 + 1;
	}
	return v2;
}

//----- (000A8EA0) --------------------------------------------------------
int sub_A8EA0(x_DWORD *a1, int a2)
{
	int result; // eax
	int v3; // [esp+0h] [ebp-10h]
	int v4; // [esp+4h] [ebp-Ch]
	signed int i; // [esp+8h] [ebp-8h]
	int v6; // [esp+Ch] [ebp-4h]

	v4 = a2 - 1;
	// FIXME: types
	// result = (int)&a1[a2 - 1];
	if (*(x_DWORD *)(result + 32) == 1)
	{
		++a1[5];
		a1[v4 + 8] = a1[v4 + 72];
		a1[v4 + 56] = a1[v4 + 40];
		sub_A4F10((HMDIDRIVER)a1, v4 | 0xB0, 64, 0);
		v6 = a1[7];
		v3 = a1[6];
		while (v6)
		{
			if (*(x_DWORD *)(v3 + 4) != 1)
			{
				for (i = 0; i < 32; i++)
				{
					if (*(x_DWORD *)(v3 + 4 * i + 1368) != -1 && *(x_DWORD *)(v3 + 4 * *(x_DWORD *)(v3 + 4 * i + 1368) + 148) == v4)
					{
						sub_A5850((HSEQUENCE)v3, *(unsigned int *)(v3 + 4 * i + 1368) | 0x80, *(x_DWORD *)(v3 + 4 * i + 1496), 0, 0);
						*(x_DWORD *)(v3 + 4 * i + 1368) = -1;
					}
				}
			}
			--v6;
			v3 += 1816;
		}
		if (a1[v4 + 40])
		{
			if (*(x_DWORD *)(a1[v4 + 40] + 4) != 1)
				sub_A5FD0(a1[v4 + 40], v4);
		}
		// FIXME: types
		// result = (int)a1;
		--*(x_DWORD *)(result + 20);
	}
	return result;
}

//----- (000A9080) --------------------------------------------------------
int sub_A9080(x_DWORD *a1, int a2, int a3)
{
	int result; // eax

	if (a1)
	{
		a1[a2 + 36] = a3 - 1;
		result = 4 * a3 + *a1;
		if (*(x_DWORD *)(result + 28) == 1)
		{
			result = *(x_DWORD *)(4 * a3 + *a1 + 92);
			if ((x_DWORD *)result != a1)
			{
				// FIXME: types
				// result = (int)a1;
				// FIXME: types
				// *(x_DWORD *)(*a1 + 4 * a3 + 92) = (x_DWORD)a1;
			}
		}
	}
	return result;
}

//----- (000A9100) --------------------------------------------------------
int sub_A9100(int a1, int a2)
{
	int v3; // [esp+0h] [ebp-4h]

	if (a1)
		v3 = *(x_DWORD *)(a1 + 4 * a2 + 144) + 1;
	else
		v3 = 0;
	return v3;
}

void sub_A9140_AIL_API_send_channel_voice_message(HMDIDRIVER mdi, HSEQUENCE S, Bit32s status, Bit32s data_1, Bit32s data_2)//28a140
{
	//test_midi_play((Bit8u*)mdi->DST_2->MIDI_data);
}

//----- (000A9140) --------------------------------------------------------
void sub_A9140_AIL_API_send_channel_voice_message_orig(HMDIDRIVER mdi, HSEQUENCE S, Bit32s status, Bit32s data_1, Bit32s data_2)//28a140
{
	//x_DWORD *result; // eax

	mdi->disable_5++;
	if (S)
	{
		sub_A5850(S, status, data_1, data_2, 0);
	}
	else
	{
		if ((status & 0xF0) == 176 && data_1 == 7)
		{
			data_2 = mdi->master_volume * data_2 / 127;
			if (data_2 > 127)
				data_2 = 127;
			if (data_2 < 0)
				data_2 = 0;
		}
		if (!mdi->event_trap || !((int(*)(HMDIDRIVER, x_DWORD, int, unsigned int, int))mdi->event_trap)(mdi, 0, status, data_1, data_2))
			sub_A4F10(mdi, status, data_1, data_2);
	}
	sub_A4EB0(mdi);
	mdi->disable_5--;
}

//----- (000A9230) --------------------------------------------------------
int sub_A9230(int a1, int a2)
{
	int v2; // eax
	int result; // eax
	int v4; // [esp+4h] [ebp-4h]

	++*(x_DWORD *)(a1 + 20);
	v4 = a2 + 1;
	v2 = sub_A5040(&v4);
	sub_A4FD0(a1, a2, v4 - a2 + v2);
	result = a1;
	--*(x_DWORD *)(result + 20);
	return result;
}

//----- (000A9280) --------------------------------------------------------
bool sub_A9280()
{
	bool result; // eax

	if (x_DWORD_E4B1C)
	{
		// FIXME: types
		// // sub_9D650((unsigned int)sub_A4CF0, (unsigned int)sub_A9280);
		// sub_9D740((unsigned int)aSample, 128);
		// sub_9D740((unsigned int)&x_DWORD_E4B18, 4);
		// sub_9D740((unsigned int)&x_DWORD_181EB8, 4);
		// sub_9D740((unsigned int)&x_DWORD_181EBC, 4);
		// sub_9D740((unsigned int)&x_DWORD_181EC4, 4);
		// sub_9D740((unsigned int)&x_DWORD_181ED4, 4);
		// sub_9D740((unsigned int)&x_DWORD_181EC8, 4);
		// sub_9D740((unsigned int)&x_DWORD_181ECC, 4);
		// sub_9D740((unsigned int)&x_DWORD_181EB4, 4);
		// sub_9D740((unsigned int)&x_DWORD_181ED0, 4);
		// sub_9D740((unsigned int)&x_DWORD_181EDC, 4);
		// sub_9D740((unsigned int)&x_DWORD_181ED8, 4);
		// result = sub_9D740((unsigned int)&x_DWORD_181EB0, 4);
		x_DWORD_E4B1C = 0;
	}
	return result;
}

//----- (000A9590) --------------------------------------------------------
void sub_A9590()
{
	//bool result; // eax

	if (!x_DWORD_E4B2C)
	{
		// FIXME: types
		// sub_9D590_lock_linear_region((Bit8u*)sub_A9590, (unsigned int)sub_AA620);
		x_DWORD_E4B2C = 1;
	}
	//return result;
}

//----- (000A95D0) --------------------------------------------------------
x_DWORD *sub_A95D0(int a1, char a2, unsigned int a3, uint8_t a4)
{
	x_DWORD *result; // eax
	int v5; // [esp+0h] [ebp-8h]
	unsigned int v6; // [esp+4h] [ebp-4h]

	v6 = a2 & 0xF0;
	result = (x_DWORD *)(a2 & 0xF);
	v5 = a2 & 0xF;
	if (v6 < 0xC0)
	{
		if (v6 == 176)
		{
			if (a3 < 0x5B)
			{
				if (a3 < 7)
				{
					if (a3 >= 1)
					{
						if (a3 <= 1)
						{
							result = (x_DWORD *)(a1 + 4 * v5);
							result[160] = a4;
						}
						else if (a3 == 6)
						{
							result = (x_DWORD *)(a1 + 4 * v5);
							result[272] = a4;
						}
					}
				}
				else if (a3 <= 7)
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[176] = a4;
				}
				else if (a3 < 0xB)
				{
					if (a3 == 10)
					{
						result = (x_DWORD *)(a1 + 4 * v5);
						result[192] = a4;
					}
				}
				else if (a3 <= 0xB)
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[208] = a4;
				}
				else if (a3 == 64)
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[224] = a4;
				}
			}
			else if (a3 <= 0x5B)
			{
				result = (x_DWORD *)(a1 + 4 * v5);
				result[240] = a4;
			}
			else if (a3 < 0x70)
			{
				if (a3 < 0x6E)
				{
					if (a3 == 93)
					{
						result = (x_DWORD *)(a1 + 4 * v5);
						result[256] = a4;
					}
				}
				else if (a3 <= 0x6E)
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[48] = a4;
				}
				else
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[64] = a4;
				}
			}
			else if (a3 <= 0x70)
			{
				result = (x_DWORD *)(a1 + 4 * v5);
				result[96] = a4;
			}
			else if (a3 < 0x73)
			{
				if (a3 == 114)
				{
					result = (x_DWORD *)(a1 + 4 * v5);
					result[112] = a4;
				}
			}
			else if (a3 <= 0x73)
			{
				result = (x_DWORD *)(a1 + 4 * v5);
				result[128] = a4;
			}
			else if (a3 == 119)
			{
				result = (x_DWORD *)(a1 + 4 * v5);
				result[144] = a4;
			}
		}
	}
	else if (v6 <= 0xC0)
	{
		result = (x_DWORD *)(a1 + 4 * v5);
		*result = (uint8_t)a3;
	}
	else if (v6 == 224)
	{
		*(x_DWORD *)(a1 + 4 * v5 + 64) = (uint8_t)a3;
		result = (x_DWORD *)(a1 + 4 * v5);
		result[32] = a4;
	}
	return result;
}

//----- (000A98D0) --------------------------------------------------------
x_DWORD *sub_A98D0(x_DWORD *a1, int a2, int a3)
{
	signed int v5; // [esp+4h] [ebp-8h]
	x_DWORD *v6; // [esp+8h] [ebp-4h]

	v6 = a1;
	v5 = 0;
	while (1)
	{
		if (v5 >= 512)
			return 0;
		if (*v6 == -1)
			return 0;
		if (*v6 == a2 && v6[1] == a3)
			break;
		++v5;
		v6 += 8;
	}
	return v6;
}

//----- (000A9950) --------------------------------------------------------
void sub_A9950(int a1, int a2)//28a950
{
	int v2; // ST0C_4

	v2 = *(x_DWORD *)(a1 + 4 * a2 + 1304);
	sub_93E30_AIL_set_sample_volume(
		(HSAMPLE)*(x_DWORD **)(a1 + 4 * a2 + 1236),
		*(x_DWORD *)(a1 + 4 * a2 + 1560) * (*(x_DWORD *)(a1 + 4 * v2 + 852) * *(x_DWORD *)(4 * v2 + a1 + 724) / 127) / 127);
	return sub_93ED0_AIL_set_sample_volume_pan((HSAMPLE)*(x_DWORD **)(a1 + 4 * a2 + 1236), *(x_DWORD *)(a1 + 4 * v2 + 788));
}

//----- (000A9A30) --------------------------------------------------------
void sub_A9A30(int a1, int a2)//28aa30
{
	int v3; // [esp+0h] [ebp-2Ch]
	int v4; // [esp+0h] [ebp-2Ch]
	signed int v5; // [esp+4h] [ebp-28h]
	int v6; // [esp+10h] [ebp-1Ch]
	int v7; // [esp+14h] [ebp-18h]
	int v8; // [esp+18h] [ebp-14h]
	int v9; // [esp+18h] [ebp-14h]
	int v10; // [esp+1Ch] [ebp-10h]
	int v11; // [esp+20h] [ebp-Ch]
	int v12; // [esp+28h] [ebp-4h]

	v12 = *(x_DWORD *)(a1 + 4 * a2 + 1304);
	v8 = *(x_DWORD *)(a1 + 4 * a2 + 1496);
	v11 = *(x_DWORD *)(a1 + 4 * a2 + 1368);
	v3 = (*(x_DWORD *)(a1 + 4 * v12 + 148) << 7) | *(x_DWORD *)(a1 + 4 * v12 + 84);
	if (v3 <= 0x2000)
	{
		if (v3 >= 0x2000)
		{
			v4 = 0;
			v5 = 0;
		}
		else
		{
			v4 = 0x2000 - v3;
			v5 = -1;
		}
	}
	else
	{
		v4 = v3 - 0x1FFF;
		v5 = 1;
	}
	v10 = v5 * *(x_DWORD *)(a1 + 4 * v12 + 1108) + v11;
	if (v10 < 0)
		v10 = 0;
	if (v10 > 127)
		v10 = 127;
	v7 = x_DWORD_A9390[v11];
	v6 = ((v4 * (x_DWORD_A9390[v10] - v7)
		- (__CFSHL__(v4 * (x_DWORD_A9390[v10] - v7) >> 31, 13)
			+ (v4 * (x_DWORD_A9390[v10] - v7) >> 31 << 13))) >> 13)
		+ v7;
	if (v12 == 9)
		v9 = v6 * v8 / v7;
	else
		v9 = v6 * (v7 * v8 / x_DWORD_A9390[*(x_DWORD *)(a1 + 4 * a2 + 1432)]) / v7;
	sub_93D90_AIL_set_sample_playback_rate((HSAMPLE)*(x_DWORD *)(a1 + 4 * a2 + 1236), v9);
}

//----- (000AA310) --------------------------------------------------------
x_DWORD *sub_AA310(int a1, int a2, int a3, signed int a4)//28b310
{
	signed int v5; // [esp+0h] [ebp-10h]
	x_DWORD *v6; // [esp+4h] [ebp-Ch]
	signed int i; // [esp+8h] [ebp-8h]
	signed int j; // [esp+8h] [ebp-8h]
	int k; // [esp+8h] [ebp-8h]
	x_DWORD *v10; // [esp+Ch] [ebp-4h]

	sub_A9590();
	v10 = (x_DWORD *)sub_9D450_malloc4(1692);
	if (v10)
	{
		v10[1] = a1;
		*v10 = a2;
		v10[2] = a3;
		// FIXME: types
		// v10[3] = sub_97A60_AIL_register_event_callback(a2, (int)sub_A9C50);
		// FIXME: types
		// v10[4] = sub_97BB0_AIL_register_timbre_callback(a2, (int)sub_A9C00);
		// FIXME: types
		// *(x_DWORD *)(a2 + 436) = (x_DWORD)v10;
		for (i = 0; i < 16; i++)
		{
			v10[i + 5] = 0;
			v10[i + 21] = 0;
			v10[i + 37] = 64;
			v10[i + 117] = 0;
			v10[i + 181] = 127;
			v10[i + 197] = 64;
			v10[i + 213] = 127;
			v10[i + 277] = x_DWORD_181DAC[16];
		}
		for (v10[325] = 0; ; ++v10[325])
		{
			v5 = a4 <= 16 ? a4 : 16;
			if (v10[325] >= v5)
				break;
			// FIXME: types
			// v10[v10[325] + 309] = (x_DWORD)sub_93510_AIL_allocate_sample_handle((HDIGDRIVER)v10[1]);
			if (!v10[v10[325] + 309])
				break;
		}
		for (j = 0; j < 16; j++)
			v10[j + 293] = 0;
		for (k = 0; k < v10[325]; k++)
			v10[k + 326] = -1;
		v10[422] = 0;
		v6 = v10;
	}
	else
	{
		qmemcpy(&x_BYTE_181C90, (void*)"Insufficient memory for HWAVE descriptor\n", 0x2Au);
		v6 = 0;
	}
	return v6;
}

//----- (000AA590) --------------------------------------------------------
int sub_AA590(int *a1)//28b590
{
	int i; // [esp+0h] [ebp-4h]

	for (i = 0; i < a1[325]; i++)
		sub_937A0_AIL_release_sample_handle(a1[i + 309]);
	sub_97A60_AIL_register_event_callback(*a1, a1[3]);
	sub_97BB0_AIL_register_timbre_callback(*a1, a1[4]);
	return sub_9D490_free4(a1, 1692);
}

//----- (000AA620) --------------------------------------------------------
bool sub_AA620()//28b620
{
	bool result; // eax

	if (x_DWORD_E4B2C)
	{
		// FIXME: types
		// result = sub_9D650((unsigned int)sub_A9590, (unsigned int)sub_AA620);
		x_DWORD_E4B2C = 0;
	}
	return result;
}

//----- (000AB9E1) --------------------------------------------------------
signed int sub_AB9E1_get_file_unpack_size(char* a1)//28c9e1
{
	Bit8u v2[10]; // [esp+0h] [ebp-1Ch]
	uint8_t v3; // [esp+4h] [ebp-18h]
	uint8_t v4; // [esp+5h] [ebp-17h]
	uint8_t v5; // [esp+6h] [ebp-16h]
	uint8_t v6; // [esp+7h] [ebp-15h]
	char v9; // [esp+Ah] [ebp-12h]
	char v10; // [esp+Bh] [ebp-11h]
	int ret_size; // [esp+14h] [ebp-8h]
	FILE* file; // [esp+18h] [ebp-4h]

	//fix it
	v3 = 0;
	v4 = 0;
	v5 = 0;
	v6 = 0;
	v9 = 0;
	v10 = 0;
	//fix it

	ret_size = -1;
	//v7 = 'R';
	//v8 = 'N';
	//v9 = 'C';
	//v10 = 1;
	//v11 = 0;
	file = sub_98817_open(a1, 512);
	if (file == NULL)
		return -1;
	sub_988A7_read(file, v2, 8);
	if (!strncmp((const char*)v2, (const char*)"RNC\1", 4))
	{
		ret_size = v2[4] << 8;//reverse size in rnc format
		ret_size += v2[5];
		ret_size <<= 8;
		ret_size += v2[6];
		ret_size <<= 8;
		ret_size += v2[7];
	}
	else
	{
		ret_size = x_filelength(file);
	}
	sub_98882_close(file);
	return ret_size;
}

//----- (000AC24B) --------------------------------------------------------
int sub_AC24B()//28d24b
{
	return 0;
}

//----- (000AC250) --------------------------------------------------------
signed int sub_AC250(int a1, int a2, int a3, int a4, int a5, x_DWORD *a6, x_DWORD *a7, signed int *a8)//28d250
{
	signed int result; // eax
	int v9; // ebx
	int v10; // esi
	int v11; // ebp
	int v12; // edi
	int v13; // ecx
	int v14; // eax
	int v15; // [esp+Ch] [ebp-24h]
	int v16; // [esp+10h] [ebp-20h]
	int v17; // [esp+14h] [ebp-1Ch]
	int v18; // [esp+18h] [ebp-18h]
	int v19; // [esp+1Ch] [ebp-14h]

	//fix it
	v16 = 0;
	v18 = 0;
	//fix it

	if (x_DWORD_E4CCC)
		goto LABEL_8;
	result = sub_B1138(x_DWORD_182188, 3);
	if (result)
	{
		result = sub_B1138(x_DWORD_1821A0, 3);
		if (result)
		{
			result = sub_B1138(x_DWORD_1821B8, 3);
			if (result)
			{
				result = sub_B1138(x_DWORD_1821D0, 6);
				if (result)
				{
					result = sub_B1138(x_DWORD_1821E8, 6);
					if (result)
					{
						x_DWORD_E4CCC = 1;
					LABEL_8:
						v19 = sub_B11E8(x_DWORD_182188, a1);
						v9 = sub_B11E8(x_DWORD_1821A0, a2);
						v10 = sub_B11E8(x_DWORD_1821B8, a3);
						// FIXME: types
						// // v11 = sub_B11E8(
						// 	x_DWORD_1821D0,
						// 	((uint64_t)(51471 * a4) >> 32 != 0) + ((uint64_t)(51471 * a4) >> 14));
						// v12 = sub_B11E8(
						// 	x_DWORD_1821E8,
						// 	((uint64_t)(51471 * a5) >> 32 != 0) + ((uint64_t)(51471 * a5) >> 14));
						// sub_B14F8(&v17, v11);
						// sub_B14F8(&v15, v12);
						// v13 = ((uint64_t)(v9 * (int64_t)v18) >> 32 != 0)
						// 	+ ((uint64_t)(v9 * (int64_t)v18) >> 14)
						// 	- (((uint64_t)(v10 * (int64_t)v17) >> 32 != 0)
						// 		+ ((uint64_t)(v10 * (int64_t)v17) >> 14));
						// v14 = sub_B1304(
						// 	((uint64_t)(v10 * (int64_t)v18) >> 32 != 0)
						// 	+ ((uint64_t)(v10 * (int64_t)v18) >> 14)
						// 	+ ((uint64_t)(v9 * (int64_t)v17) >> 32 != 0)
						// 	+ ((uint64_t)(v9 * (int64_t)v17) >> 14),
						// 	((uint64_t)(v19 * (int64_t)v16) >> 32 != 0)
						// 	+ ((uint64_t)(v19 * (int64_t)v16) >> 14)
						// 	- (((uint64_t)(v13 * (int64_t)v15) >> 32 != 0)
						// 		+ ((uint64_t)(v13 * (int64_t)v15) >> 14)));
						// *a6 = ((uint64_t)((signed int)&unk_E52EE * (int64_t)v14) >> 32 != 0)
						// 	+ ((uint64_t)((signed int)&unk_E52EE * (int64_t)v14) >> 14);
						// *a7 = ((uint64_t)((signed int)&unk_E52EE * (int64_t)v11) >> 32 != 0)
						// 	+ ((uint64_t)((signed int)&unk_E52EE * (int64_t)v11) >> 14);
						// result = ((uint64_t)((signed int)&unk_E52EE * (int64_t)v12) >> 32 != 0)
						// 	+ ((uint64_t)((signed int)&unk_E52EE * (int64_t)v12) >> 14);
						*a8 = result;
						return result;
					}
				}
			}
		}
	}
	return result;
}

//----- (000AC449) --------------------------------------------------------
/*void sub_AC449()//28d449
{
	_disable();
}

//----- (000AC44B) --------------------------------------------------------
void sub_AC44B()//28d44b
{
	_enable();
}*/

//----- (000AC70E) --------------------------------------------------------
int16_t sub_AC70E()//28d70e
{
	x_DWORD *v0; // ebx
	int v1; // edx
	int v2; // ecx
	int v3; // eax
	int v4; // edx
	int v5; // ecx
	int v6; // edx
	x_DWORD v8[2]; // [esp+0h] [ebp-8h]

	//fix
	v1 = 0;
	v2 = 0;
	v4 = 0;
	v5 = 0;
	v6 = 0;
	//fix

	x_BYTE_E3E28 = 3;
	x_BYTE_E4D18 = 1;
	//__asm { smsw    x_WORD_E4D16 }
	x_WORD_E4D16 &= 6u;
	x__sidt(v8);
	v0 = (x_DWORD *)(*(x_DWORD *)((char *)v8 + 2) + 56);
	if (x_BYTE_E4CB4)
	{
		sub_AC7D9();
		//__ES__ = x_WORD_E3B9A;
		// FIXME: types
		// *MK_FP(x_WORD_E3B9A, (unsigned int)v0) = v1;
		v0[1] = v2;
		LOWORD(v3) = sub_AC843();
	}
	else if (x_BYTE_E4CB2)
	{
		if (x_BYTE_E4CB2 == 9)
		{
			sub_AC7D9();
			*v0 = v4;
			v0[1] = v5;
			LOWORD(v3) = (*(int(/*__fastcall*/ **)(signed int, int, signed int))(x_DWORD_E3B94 + 48))(3586, v4, 4);
		}
		else if (x_BYTE_E4CB2 == 1)
		{
			// FIXME: types
			// LOWORD(v3) = _hook387(0, x_WORD_E3B98, (x_DWORD)v0);
		}
		else
		{
			// FIXME: types
			// v3 = _hook387(0, 0, (x_DWORD)v0);
			if ((x_BYTE)v3 != 1)
				;// LOWORD(v3) = sub_AC7F6(v3, v6, (int)v0);
		}
	}
	else
	{
		//v8[1] = (uint16_t)__DS__;
		// fix it:__asm { int     21h; DOS - SET INTERRUPT VECTOR }
		LOWORD(v3) = -3324;
		//fix it: __asm { int     21h; DOS - Novell Advanced NetWare 2.0+ - FILE SERVER FILE COPY }
	}
	return v3;
}

//----- (000AC7D9) --------------------------------------------------------
void sub_AC7D9()//28d7d9
{
	;
}

//----- (000AC843) --------------------------------------------------------
int16_t sub_AC843()//28d843
{
	int16_t result; // ax

	result = 9525;
	// fix it:__asm { int     21h; DOS - SET INTERRUPT VECTOR }
	x_DWORD_E4CD0 |= 4u;
	x_DWORD_E4CD0 &= 0xFFFFFFFD;
	//fix it:__asm { int     21h; DOS - }
	return result;
}

//----- (000AC8DD) --------------------------------------------------------
int16_t sub_AC8DD()//28d8dd
{
	int16_t result; // ax
	uint32_t v1; // ecx

	result = 9476;
	// fix it:__asm { int     21h; DOS - SET INTERRUPT VECTOR }
	if (x_BYTE_E4CB2 >= 3)
		return sub_AC918();
	v1 = x__readcr0();
	v1 &= 0xFFFFFFF9;
	LOWORD(v1) = x_WORD_E4D16 | v1;
	x__writecr0(v1);
	return result;
}

//----- (000AC918) --------------------------------------------------------
int16_t sub_AC918()//28d918
{
	int16_t result; // ax

	result = 9525;
	// fix it:__asm { int     21h; DOS - SET INTERRUPT VECTOR }
	x_DWORD_E4CD0 = (uint16_t)x_WORD_E4D16;
	//fix it:__asm { int     21h; DOS - }
	return result;
}

//----- (000AC9C3) --------------------------------------------------------
/*void *sub_AC9C3()//28d9c3
{
	return &unk_182204;
}*/

//----- (000AC9C9) --------------------------------------------------------
/*void *sub_AC9C9()//28d9c9
{
	return &unk_182200;
}*/

//----- (000ACB61) --------------------------------------------------------
signed int sub_ACB61(int a1, uint8_t *a2, int *a3)//28db61
{
	int *v3; // edi
	int v4; // ebp
	uint8_t *v5; // ebx
	uint8_t *v6; // ecx
	int v7; // ebx
	int v8; // eax
	uint8_t *v9; // eax
	unsigned int v10; // ebx
	int v11; // eax
	signed int result; // eax
	int v13; // [esp-4h] [ebp-18h]
	signed int v14; // [esp+0h] [ebp-14h]

	v3 = a3;
	v4 = 0;
	v14 = 0;
	*(x_BYTE *)(a1 + 16) &= 0xFDu;
	while (1)
	{
		v5 = a2;
		v6 = a2++ + 1;
		v7 = *v5;
		if (!v7)
			break;
		if (IsTable[(uint8_t)(v7 + 1)] & 2)
		{
			v4 += sub_ACE56(a1);
		}
		else if (v7 == 37)
		{
			v9 = sub_ACD79(v6, a1);
			a2 = v9;
			v10 = *v9;
			if (*v9)
				a2 = v9 + 1;
			if (v10 < 0x65)
			{
				if (v10 < 0x58)
				{
					if (v10 < 0x45)
					{
						if (v10 == 37)
						{
							v8 = (*(int(**)(int))a1)(a1);
							if (v8 != 37)
							{
							LABEL_7:
								if (!(*(x_BYTE *)(a1 + 16) & 2))
									(*(void(**)(int, int))(a1 + 4))(v8, a1);
								break;
							}
						}
					}
					else if (v10 <= 0x45 || v10 == 71)
					{
					LABEL_45:
						//sub_AD1E8(a1, v3);
						goto LABEL_50;
					}
				}
				else
				{
					if (v10 <= 0x58)
					{
					LABEL_44:
						//sub_AD52B(a1, v3, 16, 1);
						goto LABEL_50;
					}
					if (v10 >= 0x63)
					{
						if (v10 > 0x63)
						{
							v13 = 1;
							goto LABEL_40;
						}
						//v11 = sub_ACE8D((x_WORD *)a1, a1, v3);
						v11 = 0;//fixed
					LABEL_50:
						if (v11 <= 0)
							break;
						v4 += v11;
						if (*(x_BYTE *)(a1 + 16) & 1)
							++v14;
						goto LABEL_55;
					}
					if (v10 == 91)
					{
						//sub_AD0E2((x_BYTE *)a1, a1, v3, (x_BYTE**)&a2);
						goto LABEL_50;
					}
				}
			}
			else
			{
				if (v10 <= 0x67)
					goto LABEL_45;
				if (v10 < 0x70)
				{
					if (v10 < 0x6E)
					{
						if (v10 == 105)
						{
							//sub_AD52B(a1, v3, 0, 1);
							goto LABEL_50;
						}
					}
					else
					{
						if (v10 > 0x6E)
						{
							//sub_AD52B(a1, v3, 8, 1);
							goto LABEL_50;
						}
						//sub_AD033(a1, v3, v4);
					}
				}
				else
				{
					if (v10 <= 0x70)
						goto LABEL_44;
					if (v10 < 0x75)
					{
						if (v10 == 115)
						{
							//sub_ACF1A((x_BYTE *)a1, a1, v3);
							goto LABEL_50;
						}
					}
					else
					{
						if (v10 <= 0x75)
						{
							v13 = 0;
						LABEL_40:
							//sub_AD52B(a1, v3, 10, v13);
							goto LABEL_50;
						}
						if (v10 == 120)
							goto LABEL_44;
					}
				}
			}
		}
		else
		{
			v8 = (*(int(**)(int))a1)(a1);
			if (v8 != v7)
				goto LABEL_7;
			++v4;
		}
	LABEL_55:
		if (*(x_BYTE *)(a1 + 16) & 2)
		{
			if (*a2 == 37)
			{
				++a2;
				a2 = sub_ACD79(a2, a1);
				if (*a2 == 110)
					;// sub_AD033(a1, v3, v4);
			}
			break;
		}
	}
	if (v14 || !(*(x_BYTE *)(a1 + 16) & 2))
		result = v14;
	else
		result = -1;
	return result;
}

//----- (000ACD79) --------------------------------------------------------
uint8_t *sub_ACD79(uint8_t *a1, int a2)//28dd79
{
	uint8_t *result; // eax
	char v3; // dl
	int v4; // edx
	uint8_t v5; // cl
	int v6; // [esp+0h] [ebp-Ch]

	result = a1;
	v3 = *(x_BYTE *)(a2 + 16) | 1;
	*(x_DWORD *)(a2 + 12) = -1;
	*(x_BYTE *)(a2 + 16) = v3;
	*(x_BYTE *)(a2 + 16) = v3 & 3;
	if (*a1 == 42)
	{
		result = a1 + 1;
		*(x_BYTE *)(a2 + 16) &= 0xFEu;
	}
	v6 = *result;
	if (IsTable[(uint8_t)(v6 + 1)] & 0x20)
	{
		v4 = 0;
		do
		{
			++result;
			v4 = v6 - 48 + 10 * v4;
			v6 = *result;
		} while (IsTable[(uint8_t)(v6 + 1)] & 0x20);
		*(x_DWORD *)(a2 + 12) = v4;
	}
	if (*result == 78)
	{
		*(x_BYTE *)(a2 + 16) |= 8u;
	}
	else
	{
		if (*result != 70)
			goto LABEL_12;
		*(x_BYTE *)(a2 + 16) |= 4u;
	}
	++result;
LABEL_12:
	v5 = *result;
	if (*result < 0x68u)
	{
		if (v5 == 76)
		{
			++result;
			*(x_BYTE *)(a2 + 16) |= 0x40u;
		}
	}
	else if (*result <= 0x68u)
	{
		++result;
		*(x_BYTE *)(a2 + 16) |= 0x10u;
	}
	else if (v5 >= 0x6Cu && (v5 <= 0x6Cu || v5 == 119))
	{
		++result;
		*(x_BYTE *)(a2 + 16) |= 0x20u;
	}
	return result;
}

//----- (000ACE56) --------------------------------------------------------
int sub_ACE56(int a1)//28de56
{
	int i; // esi
	int v2; // eax

	for (i = 0; ; i++)
	{
		v2 = (*(int(**)(int))a1)(a1);
		if (!(IsTable[(uint8_t)(v2 + 1)] & 2))
			break;
	}
	if (!(*(x_BYTE *)(a1 + 16) & 2))
		(*(void(**)(int, int))(a1 + 4))(v2, a1);
	return i;
}

//----- (000AD09E) --------------------------------------------------------
x_BYTE *sub_AD09E(x_BYTE *a1, int a2)//28e09e
{
	int v2; // eax
	x_BYTE *v3; // ebx

	memset((void*)a2, 0, 32);
	v2 = (uint8_t)*a1;
	v3 = a1 + 1;
	if (*a1)
	{
		do
		{
			*(x_BYTE *)((v2 >> 3) + a2) |= x_BYTE_D3EA0[v2 & 7];
			v2 = (uint8_t)*v3;
			if (!*v3)
				break;
			++v3;
		} while (v2 != 93);
	}
	return v3;
}

//----- (000AD754) --------------------------------------------------------
int sub_AD754(signed int a1)//28e754
{
	int result; // eax
	signed int v2; // eax

	if (a1 >= 48 && a1 <= 57)
		return a1 - 48;
	v2 = x_tolower(a1);
	if (v2 < 97 || v2 > 102)
		result = 16;
	else
		result = v2 - 87;
	return result;
}

//----- (000AD783) --------------------------------------------------------
int sub_AD783(int a1)//28e783
{
	int v1; // eax
	int result; // eax

	v1 = *(x_DWORD *)(a1 + 12);
	*(x_DWORD *)(a1 + 12) = v1 - 1;
	if (!v1 || (result = (*(int(**)(int))a1)(a1), *(x_BYTE *)(a1 + 16) & 2))
		result = -1;
	return result;
}

//----- (000AEAF5) --------------------------------------------------------
int sub_AEAF5()//28faf5
{
	return x_DWORD_E4C90;
}

//----- (000AEF40) --------------------------------------------------------
int sub_AEF40(int a1, x_BYTE *a2, int *a3)//28ff40
{
	int v3; // eax
	int result; // eax

	do
	{
		v3 = *a3;
		++a3;
		result = v3 ^ 0x8000;
		*a2++ = BYTE1(result);
		--a1;
	} while (a1);
	return result;
}

//----- (000AEF51) --------------------------------------------------------
int sub_AEF51(int a1, x_BYTE *a2, int *a3)//28ff51
{
	int result; // eax

	do
	{
		result = *a3;
		++a3;
		*a2++ = BYTE1(result);
		--a1;
	} while (a1);
	return result;
}

//----- (000AEF5D) --------------------------------------------------------
int sub_AEF5D(int a1, x_WORD *a2, int *a3)//28ff5d
{
	int v3; // eax
	int v4; // edx
	int result; // eax

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		result = v3 ^ 0x8000;
		BYTE1(v4) ^= 0x80u;
		LOBYTE(v4) = BYTE1(result);
		*a2 = v4;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AEF7C) --------------------------------------------------------
int sub_AEF7C(int a1, x_WORD *a2, int *a3)//28ff7c
{
	int result; // eax
	int v4; // edx

	do
	{
		result = *a3;
		v4 = a3[1];
		a3 += 2;
		LOBYTE(v4) = BYTE1(result);
		*a2 = v4;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AEF90) --------------------------------------------------------
char sub_AEF90(int a1, x_WORD *a2, int *a3)//28ff90
{
	int v3; // eax
	int v4; // edx
	int16_t v5; // ax

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		HIBYTE(v5) = BYTE1(v3) ^ 0x80;
		LOBYTE(v5) = BYTE1(v4) ^ 0x80;
		*a2 = v5;
		++a2;
		--a1;
	} while (a1);
	return v5;
}

//----- (000AEFAF) --------------------------------------------------------
char sub_AEFAF(int a1, x_WORD *a2, int *a3)//28ffaf
{
	int v3; // edx
	int v4; // eax

	do
	{
		v4 = *a3;
		v3 = a3[1];
		a3 += 2;
		LOBYTE(v4) = BYTE1(v3);
		*a2 = v4;
		++a2;
		--a1;
	} while (a1);
	return v4;
}

//----- (000AEFC3) --------------------------------------------------------
int sub_AEFC3(int a1, x_BYTE *a2, x_BYTE *a3, int *a4)//28ffc3
{
	int v4; // eax
	int v5; // edx
	int result; // eax

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		result = v4 ^ 0x8000;
		*a3 = BYTE1(result);
		*a2 = BYTE1(v5) ^ 0x80;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AEFE0) --------------------------------------------------------
int sub_AEFE0(int a1, x_BYTE *a2, x_BYTE *a3, int *a4)//28ffe0
{
	int result; // eax
	int v5; // edx

	do
	{
		result = *a4;
		v5 = a4[1];
		a4 += 2;
		*a3 = BYTE1(result);
		*a2 = BYTE1(v5);
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AEFF2) --------------------------------------------------------
int sub_AEFF2(int a1, x_BYTE *a2, x_BYTE *a3, int *a4)//28fff2
{
	int v4; // eax
	int v5; // edx
	int result; // eax

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		result = v4 ^ 0x8000;
		*a3 = BYTE1(v5) ^ 0x80;
		*a2 = BYTE1(result);
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF00F) --------------------------------------------------------
int sub_AF00F(int a1, x_BYTE *a2, x_BYTE *a3, int *a4)//29000f
{
	int result; // eax
	int v5; // edx

	do
	{
		result = *a4;
		v5 = a4[1];
		a4 += 2;
		*a3 = BYTE1(v5);
		*a2 = BYTE1(result);
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF021) --------------------------------------------------------
int sub_AF021(int a1, x_WORD *a2, int *a3)//290021
{
	int v3; // eax
	int result; // eax

	do
	{
		v3 = *a3;
		++a3;
		result = v3 ^ 0x8000;
		*a2 = result;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF035) --------------------------------------------------------
int sub_AF035(int a1, x_WORD *a2, int *a3)//290035
{
	int result; // eax

	do
	{
		result = *a3;
		++a3;
		*a2 = result;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF044) --------------------------------------------------------
int16_t sub_AF044(int a1, x_WORD *a2, int *a3)//290044
{
	int v3; // eax
	int16_t result; // ax
	char v5; // t0

	do
	{
		v3 = *a3;
		++a3;
		LOWORD(v3) = v3 ^ 0x8000;
		v5 = v3;
		LOBYTE(result) = BYTE1(v3);
		HIBYTE(result) = v5;
		*a2 = result;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF05A) --------------------------------------------------------
int16_t sub_AF05A(int a1, x_WORD *a2, int *a3)//29005a
{
	int v3; // eax
	int16_t result; // ax
	char v5; // t0

	do
	{
		v3 = *a3;
		++a3;
		v5 = v3;
		LOBYTE(result) = BYTE1(v3);
		HIBYTE(result) = v5;
		*a2 = result;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF06B) --------------------------------------------------------
int sub_AF06B(int a1, x_WORD *a2, int *a3)//29006b
{
	int v3; // eax
	int v4; // edx
	int result; // eax

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		result = v3 ^ 0x8000;
		*a2 = result;
		a2[1] = v4 ^ 0x8000;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF08C) --------------------------------------------------------
int sub_AF08C(int a1, x_WORD *a2, int *a3)//29008c
{
	int result; // eax
	int v4; // edx

	do
	{
		result = *a3;
		v4 = a3[1];
		a3 += 2;
		*a2 = result;
		a2[1] = v4;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF0A2) --------------------------------------------------------
int sub_AF0A2(int a1, x_WORD *a2, int *a3)//2900a2
{
	int v3; // eax
	int v4; // edx
	int result; // eax

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		result = v3 ^ 0x8000;
		*a2 = v4 ^ 0x8000;
		a2[1] = result;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF0C3) --------------------------------------------------------
int sub_AF0C3(int a1, x_WORD *a2, int *a3)//2900c3
{
	int result; // eax
	int v4; // edx

	do
	{
		result = *a3;
		v4 = a3[1];
		a3 += 2;
		*a2 = v4;
		a2[1] = result;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF0D9) --------------------------------------------------------
int sub_AF0D9(int a1, x_WORD *a2, int *a3)//2900d9
{
	int v3; // eax
	int v4; // edx
	int result; // eax
	char v6; // t0
	char v7; // t1

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		result = v3 ^ 0x8000;
		LOWORD(v4) = v4 ^ 0x8000;
		v6 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v6;
		v7 = v4;
		LOBYTE(v4) = BYTE1(v4);
		BYTE1(v4) = v7;
		*a2 = result;
		a2[1] = v4;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF0FE) --------------------------------------------------------
int sub_AF0FE(int a1, x_WORD *a2, int *a3)//2900fe
{
	int v3; // edx
	int result; // eax
	char v5; // t0
	char v6; // t1

	do
	{
		result = *a3;
		v3 = a3[1];
		a3 += 2;
		v5 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v5;
		v6 = v3;
		LOBYTE(v3) = BYTE1(v3);
		BYTE1(v3) = v6;
		*a2 = result;
		a2[1] = v3;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF118) --------------------------------------------------------
int sub_AF118(int a1, x_WORD *a2, int *a3)//290118
{
	int v3; // eax
	int v4; // edx
	int result; // eax
	char v6; // t0
	char v7; // t1

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		result = v3 ^ 0x8000;
		LOWORD(v4) = v4 ^ 0x8000;
		v6 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v6;
		v7 = v4;
		LOBYTE(v4) = BYTE1(v4);
		BYTE1(v4) = v7;
		*a2 = v4;
		a2[1] = result;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF13D) --------------------------------------------------------
int sub_AF13D(int a1, x_WORD *a2, int *a3)
{
	int v3; // edx
	int result; // eax
	char v5; // t0
	char v6; // t1

	do
	{
		result = a3[0];
		v3 = a3[1];
		a3 += 2;
		v5 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v5;
		v6 = v3;
		LOBYTE(v3) = BYTE1(v3);
		BYTE1(v3) = v6;
		a2[0] = v3;
		a2[1] = result;
		a2 += 2;
		a1--;
	} while (a1);
	return result;
}

//----- (000AF157) --------------------------------------------------------
int sub_AF157(int a1, x_WORD *a2, x_WORD *a3, int *a4)
{
	int v4; // eax
	int v5; // edx
	int result; // eax

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		result = v4 ^ 0x8000;
		*a3 = result;
		*a2 = v5 ^ 0x8000;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF17A) --------------------------------------------------------
int sub_AF17A(int a1, x_WORD *a2, x_WORD *a3, int *a4)
{
	int result; // eax
	int v5; // edx

	do
	{
		result = *a4;
		v5 = a4[1];
		a4 += 2;
		*a3 = result;
		*a2 = v5;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF192) --------------------------------------------------------
int sub_AF192(int a1, x_WORD *a2, x_WORD *a3, int *a4)
{
	int v4; // eax
	int v5; // edx
	int result; // eax

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		result = v4 ^ 0x8000;
		*a3 = v5 ^ 0x8000;
		*a2 = result;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF1B5) --------------------------------------------------------
int sub_AF1B5(int a1, x_WORD *a2, x_WORD *a3, int *a4)
{
	int result; // eax
	int v5; // edx

	do
	{
		result = *a4;
		v5 = a4[1];
		a4 += 2;
		*a3 = v5;
		*a2 = result;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF1CD) --------------------------------------------------------
int sub_AF1CD(int a1, x_WORD *a2, x_WORD *a3, int *a4)
{
	int v4; // eax
	int v5; // edx
	int result; // eax
	char v7; // t0
	char v8; // t1

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		result = v4 ^ 0x8000;
		LOWORD(v5) = v5 ^ 0x8000;
		v7 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v7;
		v8 = v5;
		LOBYTE(v5) = BYTE1(v5);
		BYTE1(v5) = v8;
		*a3 = result;
		*a2 = v5;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF1F4) --------------------------------------------------------
int sub_AF1F4(int a1, x_WORD *a2, x_WORD *a3, int *a4)
{
	int v4; // edx
	int result; // eax
	char v6; // t0
	char v7; // t1

	do
	{
		result = *a4;
		v4 = a4[1];
		a4 += 2;
		v6 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v6;
		v7 = v4;
		LOBYTE(v4) = BYTE1(v4);
		BYTE1(v4) = v7;
		*a3 = result;
		*a2 = v4;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF210) --------------------------------------------------------
int sub_AF210(int a1, x_WORD *a2, x_WORD *a3, int *a4)
{
	int v4; // eax
	int v5; // edx
	int result; // eax
	char v7; // t0
	char v8; // t1

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		result = v4 ^ 0x8000;
		LOWORD(v5) = v5 ^ 0x8000;
		v7 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v7;
		v8 = v5;
		LOBYTE(v5) = BYTE1(v5);
		BYTE1(v5) = v8;
		*a3 = v5;
		*a2 = result;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF237) --------------------------------------------------------
int sub_AF237(int a1, x_WORD *a2, x_WORD *a3, int *a4)
{
	int v4; // edx
	int result; // eax
	char v6; // t0
	char v7; // t1

	do
	{
		result = *a4;
		v4 = a4[1];
		a4 += 2;
		v6 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v6;
		v7 = v4;
		LOBYTE(v4) = BYTE1(v4);
		BYTE1(v4) = v7;
		*a3 = v4;
		*a2 = result;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF253) --------------------------------------------------------
int sub_AF253(int a1, x_BYTE *a2, signed int *a3)
{
	signed int v3; // eax
	int result; // eax

	do
	{
		v3 = *a3;
		++a3;
		if (v3 > 0x7FFF)
		{
			v3 = 0x7FFF;
		}
		else if (v3 < -32768)
		{
			v3 = -32768;
		}
		result = v3 ^ 0x8000;
		*a2++ = BYTE1(result);
		--a1;
	} while (a1);
	return result;
}

//----- (000AF280) --------------------------------------------------------
signed int sub_AF280(int a1, x_BYTE *a2, signed int *a3)
{
	signed int result; // eax

	do
	{
		result = *a3;
		++a3;
		if (result > 0x7FFF)
		{
			result = 0x7FFF;
		}
		else if (result < -32768)
		{
			result = -32768;
		}
		*a2++ = BYTE1(result);
		--a1;
	} while (a1);
	return result;
}

//----- (000AF2A8) --------------------------------------------------------
int sub_AF2A8(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	signed int v4; // edx
	int result; // eax
	int16_t v6; // dx

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		if (v3 > 0x7FFF)
		{
			v3 = 0x7FFF;
		}
		else if (v3 < -32768)
		{
			v3 = -32768;
		}
		if (v4 > 0x7FFF)
		{
			BYTE1(v4) = 127;
		}
		else if (v4 < -32768)
		{
			BYTE1(v4) = -128;
		}
		result = v3 ^ 0x8000;
		HIBYTE(v6) = BYTE1(v4) ^ 0x80;
		LOBYTE(v6) = BYTE1(result);
		*a2 = v6;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF301) --------------------------------------------------------
signed int sub_AF301(int a1, x_WORD *a2, signed int *a3)
{
	signed int result; // eax
	signed int v4; // edx

	do
	{
		result = *a3;
		v4 = a3[1];
		a3 += 2;
		if (result > 0x7FFF)
		{
			result = 0x7FFF;
		}
		else if (result < -32768)
		{
			result = -32768;
		}
		if (v4 > 0x7FFF)
		{
			BYTE1(v4) = 127;
		}
		else if (v4 < -32768)
		{
			BYTE1(v4) = -128;
		}
		LOBYTE(v4) = BYTE1(result);
		*a2 = v4;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF34F) --------------------------------------------------------
char sub_AF34F(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	signed int v4; // edx
	int16_t v5; // ax

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		if (v3 > 0x7FFF)
		{
			BYTE1(v3) = 127;
		}
		else if (v3 < -32768)
		{
			BYTE1(v3) = -128;
		}
		if (v4 > 0x7FFF)
		{
			BYTE1(v4) = 127;
		}
		else if (v4 < -32768)
		{
			BYTE1(v4) = -128;
		}
		HIBYTE(v5) = BYTE1(v3) ^ 0x80;
		LOBYTE(v5) = BYTE1(v4) ^ 0x80;
		*a2 = v5;
		++a2;
		--a1;
	} while (a1);
	return v5;
}

//----- (000AF3A8) --------------------------------------------------------
char sub_AF3A8(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	signed int v4; // edx

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		if (v3 > 0x7FFF)
		{
			BYTE1(v3) = 127;
		}
		else if (v3 < -32768)
		{
			BYTE1(v3) = -128;
		}
		if (v4 > 0x7FFF)
		{
			BYTE1(v4) = 127;
		}
		else if (v4 < -32768)
		{
			BYTE1(v4) = -128;
		}
		LOBYTE(v3) = BYTE1(v4);
		*a2 = v3;
		++a2;
		--a1;
	} while (a1);
	return v3;
}

//----- (000AF3F6) --------------------------------------------------------
int sub_AF3F6(int a1, x_BYTE *a2, x_BYTE *a3, signed int *a4)
{
	signed int v4; // eax
	signed int v5; // edx
	int result; // eax

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		if (v4 > 0x7FFF)
		{
			v4 = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			v4 = -32768;
		}
		if (v5 > 0x7FFF)
		{
			BYTE1(v5) = 127;
		}
		else if (v5 < -32768)
		{
			BYTE1(v5) = -128;
		}
		result = v4 ^ 0x8000;
		*a3 = BYTE1(result);
		*a2 = BYTE1(v5) ^ 0x80;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF44D) --------------------------------------------------------
signed int sub_AF44D(int a1, x_BYTE *a2, x_BYTE *a3, signed int *a4)
{
	signed int result; // eax
	signed int v5; // edx

	do
	{
		result = *a4;
		v5 = a4[1];
		a4 += 2;
		if (result > 0x7FFF)
		{
			result = 0x7FFF;
		}
		else if (result < -32768)
		{
			result = -32768;
		}
		if (v5 > 0x7FFF)
		{
			BYTE1(v5) = 127;
		}
		else if (v5 < -32768)
		{
			BYTE1(v5) = -128;
		}
		*a3 = BYTE1(result);
		*a2 = BYTE1(v5);
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF499) --------------------------------------------------------
int sub_AF499(int a1, x_BYTE *a2, x_BYTE *a3, signed int *a4)
{
	signed int v4; // eax
	signed int v5; // edx
	int result; // eax

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		if (v4 > 0x7FFF)
		{
			v4 = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			v4 = -32768;
		}
		if (v5 > 0x7FFF)
		{
			BYTE1(v5) = 127;
		}
		else if (v5 < -32768)
		{
			BYTE1(v5) = -128;
		}
		result = v4 ^ 0x8000;
		*a3 = BYTE1(v5) ^ 0x80;
		*a2 = BYTE1(result);
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF4F0) --------------------------------------------------------
signed int sub_AF4F0(int a1, x_BYTE *a2, x_BYTE *a3, signed int *a4)
{
	signed int result; // eax
	signed int v5; // edx

	do
	{
		result = *a4;
		v5 = a4[1];
		a4 += 2;
		if (result > 0x7FFF)
		{
			result = 0x7FFF;
		}
		else if (result < -32768)
		{
			result = -32768;
		}
		if (v5 > 0x7FFF)
		{
			BYTE1(v5) = 127;
		}
		else if (v5 < -32768)
		{
			BYTE1(v5) = -128;
		}
		*a3 = BYTE1(v5);
		*a2 = BYTE1(result);
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF53C) --------------------------------------------------------
int sub_AF53C(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	int result; // eax

	do
	{
		v3 = *a3;
		++a3;
		if (v3 > 0x7FFF)
		{
			v3 = 0x7FFF;
		}
		else if (v3 < -32768)
		{
			v3 = -32768;
		}
		result = v3 ^ 0x8000;
		*a2 = result;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF56C) --------------------------------------------------------
signed int sub_AF56C(int a1, x_WORD *a2, signed int *a3)
{
	signed int result; // eax

	do
	{
		result = *a3;
		++a3;
		if (result > 0x7FFF)
		{
			result = 0x7FFF;
		}
		else if (result < -32768)
		{
			result = -32768;
		}
		*a2 = result;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF597) --------------------------------------------------------
int16_t sub_AF597(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	int16_t v4; // ax
	int16_t result; // ax
	char v6; // t0

	do
	{
		v3 = *a3;
		++a3;
		if (v3 > 0x7FFF)
		{
			LOWORD(v3) = 0x7FFF;
		}
		else if (v3 < -32768)
		{
			LOWORD(v3) = -32768;
		}
		v4 = v3 ^ 0x8000;
		v6 = v4;
		LOBYTE(result) = HIBYTE(v4);
		HIBYTE(result) = v6;
		*a2 = result;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF5C9) --------------------------------------------------------
int16_t sub_AF5C9(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	int16_t result; // ax
	char v5; // t0

	do
	{
		v3 = *a3;
		++a3;
		if (v3 > 0x7FFF)
		{
			LOWORD(v3) = 0x7FFF;
		}
		else if (v3 < -32768)
		{
			LOWORD(v3) = -32768;
		}
		v5 = v3;
		LOBYTE(result) = BYTE1(v3);
		HIBYTE(result) = v5;
		*a2 = result;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF5F6) --------------------------------------------------------
int sub_AF5F6(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	signed int v4; // edx
	int result; // eax

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		if (v3 > 0x7FFF)
		{
			v3 = 0x7FFF;
		}
		else if (v3 < -32768)
		{
			v3 = -32768;
		}
		if (v4 > 0x7FFF)
		{
			LOWORD(v4) = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			LOWORD(v4) = -32768;
		}
		result = v3 ^ 0x8000;
		*a2 = result;
		a2[1] = v4 ^ 0x8000;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF651) --------------------------------------------------------
signed int sub_AF651(int a1, x_WORD *a2, signed int *a3)
{
	signed int result; // eax
	signed int v4; // edx

	do
	{
		result = *a3;
		v4 = a3[1];
		a3 += 2;
		if (result > 0x7FFF)
		{
			result = 0x7FFF;
		}
		else if (result < -32768)
		{
			result = -32768;
		}
		if (v4 > 0x7FFF)
		{
			LOWORD(v4) = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			LOWORD(v4) = -32768;
		}
		*a2 = result;
		a2[1] = v4;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF6A1) --------------------------------------------------------
int sub_AF6A1(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	signed int v4; // edx
	int result; // eax

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		if (v3 > 0x7FFF)
		{
			v3 = 0x7FFF;
		}
		else if (v3 < -32768)
		{
			v3 = -32768;
		}
		if (v4 > 0x7FFF)
		{
			LOWORD(v4) = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			LOWORD(v4) = -32768;
		}
		result = v3 ^ 0x8000;
		*a2 = v4 ^ 0x8000;
		a2[1] = result;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF6FC) --------------------------------------------------------
signed int sub_AF6FC(int a1, x_WORD *a2, signed int *a3)
{
	signed int result; // eax
	signed int v4; // edx

	do
	{
		result = *a3;
		v4 = a3[1];
		a3 += 2;
		if (result > 0x7FFF)
		{
			result = 0x7FFF;
		}
		else if (result < -32768)
		{
			result = -32768;
		}
		if (v4 > 0x7FFF)
		{
			LOWORD(v4) = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			LOWORD(v4) = -32768;
		}
		*a2 = v4;
		a2[1] = result;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF74C) --------------------------------------------------------
int sub_AF74C(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	signed int v4; // edx
	int16_t v5; // dx
	int result; // eax
	char v7; // t0
	char v8; // t1

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		if (v3 > 0x7FFF)
		{
			v3 = 0x7FFF;
		}
		else if (v3 < -32768)
		{
			v3 = -32768;
		}
		if (v4 > 0x7FFF)
		{
			LOWORD(v4) = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			LOWORD(v4) = -32768;
		}
		result = v3 ^ 0x8000;
		v5 = v4 ^ 0x8000;
		v7 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v7;
		v8 = v5;
		LOBYTE(v5) = HIBYTE(v5);
		HIBYTE(v5) = v8;
		*a2 = result;
		a2[1] = v5;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF7AB) --------------------------------------------------------
int16_t sub_AF7AB(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	signed int v4; // edx
	int16_t result; // ax
	char v6; // t0
	int16_t v7; // dx
	char v8; // t1

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		if (v3 > 0x7FFF)
		{
			LOWORD(v3) = 0x7FFF;
		}
		else if (v3 < -32768)
		{
			LOWORD(v3) = -32768;
		}
		if (v4 > 0x7FFF)
		{
			LOWORD(v4) = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			LOWORD(v4) = -32768;
		}
		v6 = v3;
		LOBYTE(result) = BYTE1(v3);
		HIBYTE(result) = v6;
		v8 = v4;
		LOBYTE(v7) = BYTE1(v4);
		HIBYTE(v7) = v8;
		*a2 = result;
		a2[1] = v7;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF7FF) --------------------------------------------------------
int sub_AF7FF(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	signed int v4; // edx
	int16_t v5; // dx
	int result; // eax
	char v7; // t0
	char v8; // t1

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		if (v3 > 0x7FFF)
		{
			v3 = 0x7FFF;
		}
		else if (v3 < -32768)
		{
			v3 = -32768;
		}
		if (v4 > 0x7FFF)
		{
			LOWORD(v4) = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			LOWORD(v4) = -32768;
		}
		result = v3 ^ 0x8000;
		v5 = v4 ^ 0x8000;
		v7 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v7;
		v8 = v5;
		LOBYTE(v5) = HIBYTE(v5);
		HIBYTE(v5) = v8;
		*a2 = v5;
		a2[1] = result;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF85E) --------------------------------------------------------
int16_t sub_AF85E(int a1, x_WORD *a2, signed int *a3)
{
	signed int v3; // eax
	signed int v4; // edx
	int16_t result; // ax
	char v6; // t0
	int16_t v7; // dx
	char v8; // t1

	do
	{
		v3 = *a3;
		v4 = a3[1];
		a3 += 2;
		if (v3 > 0x7FFF)
		{
			LOWORD(v3) = 0x7FFF;
		}
		else if (v3 < -32768)
		{
			LOWORD(v3) = -32768;
		}
		if (v4 > 0x7FFF)
		{
			LOWORD(v4) = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			LOWORD(v4) = -32768;
		}
		v6 = v3;
		LOBYTE(result) = BYTE1(v3);
		HIBYTE(result) = v6;
		v8 = v4;
		LOBYTE(v7) = BYTE1(v4);
		HIBYTE(v7) = v8;
		*a2 = v7;
		a2[1] = result;
		a2 += 2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF8B2) --------------------------------------------------------
int sub_AF8B2(int a1, x_WORD *a2, x_WORD *a3, signed int *a4)
{
	signed int v4; // eax
	signed int v5; // edx
	int result; // eax

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		if (v4 > 0x7FFF)
		{
			v4 = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			v4 = -32768;
		}
		if (v5 > 0x7FFF)
		{
			LOWORD(v5) = 0x7FFF;
		}
		else if (v5 < -32768)
		{
			LOWORD(v5) = -32768;
		}
		result = v4 ^ 0x8000;
		*a3 = result;
		*a2 = v5 ^ 0x8000;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF90F) --------------------------------------------------------
signed int sub_AF90F(int a1, x_WORD *a2, x_WORD *a3, signed int *a4)
{
	signed int result; // eax
	signed int v5; // edx

	do
	{
		result = *a4;
		v5 = a4[1];
		a4 += 2;
		if (result > 0x7FFF)
		{
			result = 0x7FFF;
		}
		else if (result < -32768)
		{
			result = -32768;
		}
		if (v5 > 0x7FFF)
		{
			LOWORD(v5) = 0x7FFF;
		}
		else if (v5 < -32768)
		{
			LOWORD(v5) = -32768;
		}
		*a3 = result;
		*a2 = v5;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF961) --------------------------------------------------------
int sub_AF961(int a1, x_WORD *a2, x_WORD *a3, signed int *a4)
{
	signed int v4; // eax
	signed int v5; // edx
	int result; // eax

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		if (v4 > 0x7FFF)
		{
			v4 = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			v4 = -32768;
		}
		if (v5 > 0x7FFF)
		{
			LOWORD(v5) = 0x7FFF;
		}
		else if (v5 < -32768)
		{
			LOWORD(v5) = -32768;
		}
		result = v4 ^ 0x8000;
		*a3 = v5 ^ 0x8000;
		*a2 = result;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AF9BE) --------------------------------------------------------
signed int sub_AF9BE(int a1, x_WORD *a2, x_WORD *a3, signed int *a4)
{
	signed int result; // eax
	signed int v5; // edx

	do
	{
		result = *a4;
		v5 = a4[1];
		a4 += 2;
		if (result > 0x7FFF)
		{
			result = 0x7FFF;
		}
		else if (result < -32768)
		{
			result = -32768;
		}
		if (v5 > 0x7FFF)
		{
			LOWORD(v5) = 0x7FFF;
		}
		else if (v5 < -32768)
		{
			LOWORD(v5) = -32768;
		}
		*a3 = v5;
		*a2 = result;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AFA10) --------------------------------------------------------
int sub_AFA10(int a1, x_WORD *a2, x_WORD *a3, signed int *a4)
{
	signed int v4; // eax
	signed int v5; // edx
	int16_t v6; // dx
	int result; // eax
	char v8; // t0
	char v9; // t1

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		if (v4 > 0x7FFF)
		{
			v4 = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			v4 = -32768;
		}
		if (v5 > 0x7FFF)
		{
			LOWORD(v5) = 0x7FFF;
		}
		else if (v5 < -32768)
		{
			LOWORD(v5) = -32768;
		}
		result = v4 ^ 0x8000;
		v6 = v5 ^ 0x8000;
		v8 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v8;
		v9 = v6;
		LOBYTE(v6) = HIBYTE(v6);
		HIBYTE(v6) = v9;
		*a3 = result;
		*a2 = v6;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AFA71) --------------------------------------------------------
int16_t sub_AFA71(int a1, x_WORD *a2, x_WORD *a3, signed int *a4)
{
	signed int v4; // eax
	signed int v5; // edx
	int16_t result; // ax
	char v7; // t0
	int16_t v8; // dx
	char v9; // t1

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		if (v4 > 0x7FFF)
		{
			LOWORD(v4) = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			LOWORD(v4) = -32768;
		}
		if (v5 > 0x7FFF)
		{
			LOWORD(v5) = 0x7FFF;
		}
		else if (v5 < -32768)
		{
			LOWORD(v5) = -32768;
		}
		v7 = v4;
		LOBYTE(result) = BYTE1(v4);
		HIBYTE(result) = v7;
		v9 = v5;
		LOBYTE(v8) = BYTE1(v5);
		HIBYTE(v8) = v9;
		*a3 = result;
		*a2 = v8;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AFAC7) --------------------------------------------------------
int sub_AFAC7(int a1, x_WORD *a2, x_WORD *a3, signed int *a4)
{
	signed int v4; // eax
	signed int v5; // edx
	int16_t v6; // dx
	int result; // eax
	char v8; // t0
	char v9; // t1

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		if (v4 > 0x7FFF)
		{
			v4 = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			v4 = -32768;
		}
		if (v5 > 0x7FFF)
		{
			LOWORD(v5) = 0x7FFF;
		}
		else if (v5 < -32768)
		{
			LOWORD(v5) = -32768;
		}
		result = v4 ^ 0x8000;
		v6 = v5 ^ 0x8000;
		v8 = result;
		LOBYTE(result) = BYTE1(result);
		BYTE1(result) = v8;
		v9 = v6;
		LOBYTE(v6) = HIBYTE(v6);
		HIBYTE(v6) = v9;
		*a3 = v6;
		*a2 = result;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AFB28) --------------------------------------------------------
int16_t sub_AFB28(int a1, x_WORD *a2, x_WORD *a3, signed int *a4)
{
	signed int v4; // eax
	signed int v5; // edx
	int16_t result; // ax
	char v7; // t0
	int16_t v8; // dx
	char v9; // t1

	do
	{
		v4 = *a4;
		v5 = a4[1];
		a4 += 2;
		if (v4 > 0x7FFF)
		{
			LOWORD(v4) = 0x7FFF;
		}
		else if (v4 < -32768)
		{
			LOWORD(v4) = -32768;
		}
		if (v5 > 0x7FFF)
		{
			LOWORD(v5) = 0x7FFF;
		}
		else if (v5 < -32768)
		{
			LOWORD(v5) = -32768;
		}
		v7 = v4;
		LOBYTE(result) = BYTE1(v4);
		HIBYTE(result) = v7;
		v9 = v5;
		LOBYTE(v8) = BYTE1(v5);
		HIBYTE(v8) = v9;
		*a3 = v8;
		*a2 = result;
		++a3;
		++a2;
		--a1;
	} while (a1);
	return result;
}

//----- (000AFB7E) --------------------------------------------------------
int sub_AFB7E(int result, x_DWORD *a2, x_BYTE *a3)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	BYTE1(result) = *a3;
	// 	result ^= 0x8000u;
	// 	++a3;
	// 	*a2 += (int16_t)result;
	// 	++a2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFB9F) --------------------------------------------------------
int sub_AFB9F(int result, x_DWORD *a2, x_BYTE *a3)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	BYTE1(result) = *a3;
	// 	result ^= 0x8000u;
	// 	++a3;
	// 	*a2 += (int16_t)result;
	// 	a2[1] += (int16_t)result;
	// 	a2 += 2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFBC3) --------------------------------------------------------
int sub_AFBC3(int result, int16_t a2, x_DWORD *a3, x_BYTE *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	BYTE1(result) = *a4;
	// 	HIBYTE(a2) = a4[1];
	// 	result ^= 0x8000u;
	// 	a2 ^= 0x8000u;
	// 	a4 += 2;
	// 	*a3 += (int16_t)result;
	// 	a3[1] += a2;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFBF5) --------------------------------------------------------
int sub_AFBF5(int result, int16_t a2, x_DWORD *a3, x_BYTE *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	HIBYTE(a2) = *a4;
	// 	BYTE1(result) = a4[1];
	// 	result ^= 0x8000u;
	// 	a2 ^= 0x8000u;
	// 	a4 += 2;
	// 	*a3 += (int16_t)result;
	// 	a3[1] += a2;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFC27) --------------------------------------------------------
int16_t sub_AFC27(x_DWORD *a1, x_WORD *a2)
{
	int16_t result; // ax

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a2 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a2 ^ 0x8000;
	// 	++a2;
	// 	*a1 += result;
	// 	++a1;
	// } while ((unsigned int)a1 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFC4B) --------------------------------------------------------
int16_t sub_AFC4B(x_DWORD *a1, x_WORD *a2)
{
	int16_t result; // ax

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a2 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a2 ^ 0x8000;
	// 	++a2;
	// 	*a1 += result;
	// 	a1[1] += result;
	// 	a1 += 2;
	// } while ((unsigned int)a1 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFC72) --------------------------------------------------------
int16_t sub_AFC72(x_DWORD *a1, x_WORD *a2)
{
	int16_t result; // ax
	int16_t v3; // bx

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a2 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a2 ^ 0x8000;
	// 	v3 = a2[1] ^ 0x8000;
	// 	a2 += 2;
	// 	*a1 += result;
	// 	a1[1] += v3;
	// 	a1 += 2;
	// } while ((unsigned int)a1 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFCA6) --------------------------------------------------------
int16_t sub_AFCA6(x_DWORD *a1, x_WORD *a2)
{
	int16_t result; // ax
	int16_t v3; // bx

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a2 >= x_DWORD_E4E24)
	// 		break;
	// 	result = a2[1] ^ 0x8000;
	// 	v3 = *a2 ^ 0x8000;
	// 	a2 += 2;
	// 	*a1 += result;
	// 	a1[1] += v3;
	// 	a1 += 2;
	// } while ((unsigned int)a1 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFCDA) --------------------------------------------------------
int16_t sub_AFCDA(int16_t result, x_DWORD *a2, x_BYTE *a3)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	HIBYTE(result) = *a3++;
	// 	*a2 += result;
	// 	++a2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFCF6) --------------------------------------------------------
int16_t sub_AFCF6(int16_t result, x_DWORD *a2, x_BYTE *a3)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	HIBYTE(result) = *a3++;
	// 	*a2 += result;
	// 	a2[1] += result;
	// 	a2 += 2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFD15) --------------------------------------------------------
int16_t sub_AFD15(int16_t result, int16_t a2, x_DWORD *a3, x_BYTE *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	HIBYTE(result) = *a4;
	// 	HIBYTE(a2) = a4[1];
	// 	a4 += 2;
	// 	*a3 += result;
	// 	a3[1] += a2;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFD3C) --------------------------------------------------------
int16_t sub_AFD3C(int16_t result, int16_t a2, x_DWORD *a3, x_BYTE *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	HIBYTE(a2) = *a4;
	// 	HIBYTE(result) = a4[1];
	// 	a4 += 2;
	// 	*a3 += result;
	// 	a3[1] += a2;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFD63) --------------------------------------------------------
int16_t sub_AFD63(x_DWORD *a1, int16_t *a2)
{
	int16_t result; // ax

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a2 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a2;
	// 	++a2;
	// 	*a1 += result;
	// 	++a1;
	// } while ((unsigned int)a1 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFD82) --------------------------------------------------------
int16_t sub_AFD82(x_DWORD *a1, int16_t *a2)
{
	int16_t result; // ax

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a2 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a2;
	// 	++a2;
	// 	*a1 += result;
	// 	a1[1] += result;
	// 	a1 += 2;
	// } while ((unsigned int)a1 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFDA4) --------------------------------------------------------
int16_t sub_AFDA4(x_DWORD *a1, int16_t *a2)
{
	int16_t result; // ax
	int16_t v3; // bx

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a2 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a2;
	// 	v3 = a2[1];
	// 	a2 += 2;
	// 	*a1 += result;
	// 	a1[1] += v3;
	// 	a1 += 2;
	// } while ((unsigned int)a1 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFDCD) --------------------------------------------------------
int16_t sub_AFDCD(x_DWORD *a1, int16_t *a2)
{
	int16_t v2; // bx
	int16_t result; // ax

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a2 >= x_DWORD_E4E24)
	// 		break;
	// 	v2 = *a2;
	// 	result = a2[1];
	// 	a2 += 2;
	// 	*a1 += result;
	// 	a1[1] += v2;
	// 	a1 += 2;
	// } while ((unsigned int)a1 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFDF6) --------------------------------------------------------
int sub_AFDF6(int result, unsigned int a2, x_DWORD *a3, x_BYTE *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	BYTE1(result) = *a4;
	// 	result ^= 0x8000u;
	// 	a4 = (x_BYTE *)((qx_WORD_E4E30 + __PAIR__((unsigned int)a4, a2)) >> 32);
	// 	a2 += qx_WORD_E4E30;
	// 	*a3 += (int16_t)result;
	// 	++a3;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFE22) --------------------------------------------------------
int sub_AFE22(int result, unsigned int a2, x_DWORD *a3, x_BYTE *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	BYTE1(result) = *a4;
	// 	result ^= 0x8000u;
	// 	a4 = (x_BYTE *)((qx_WORD_E4E30 + __PAIR__((unsigned int)a4, a2)) >> 32);
	// 	a2 += qx_WORD_E4E30;
	// 	*a3 += (int16_t)result;
	// 	a3[1] += (int16_t)result;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFE51) --------------------------------------------------------
int sub_AFE51(int result, unsigned int a2, int16_t a3, x_DWORD *a4, x_BYTE *a5)
{
	int v5; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	BYTE1(result) = *a5;
	// 	HIBYTE(a3) = a5[1];
	// 	result ^= 0x8000u;
	// 	a3 ^= 0x8000u;
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a2) >> 32;
	// 	a2 += qx_WORD_E4E30;
	// 	a5 += *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1);
	// 	*a4 += (int16_t)result;
	// 	a4[1] += a3;
	// 	a4 += 2;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFE91) --------------------------------------------------------
int sub_AFE91(int result, unsigned int a2, int16_t a3, x_DWORD *a4, x_BYTE *a5)
{
	int v5; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	HIBYTE(a3) = *a5;
	// 	BYTE1(result) = a5[1];
	// 	result ^= 0x8000u;
	// 	a3 ^= 0x8000u;
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a2) >> 32;
	// 	a2 += qx_WORD_E4E30;
	// 	a5 += *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1);
	// 	*a4 += (int16_t)result;
	// 	a4[1] += a3;
	// 	a4 += 2;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFED1) --------------------------------------------------------
int16_t sub_AFED1(unsigned int a1, x_DWORD *a2, x_WORD *a3)
{
	int16_t result; // ax
	int v4; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a3 ^ 0x8000;
	// 	v4 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a1) >> 32;
	// 	a1 += qx_WORD_E4E30;
	// 	a3 = (x_WORD *)((char *)a3 + *((x_DWORD *)&qx_WORD_E4E30 + v4 + 1));
	// 	*a2 += result;
	// 	++a2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFF03) --------------------------------------------------------
int16_t sub_AFF03(unsigned int a1, x_DWORD *a2, x_WORD *a3)
{
	int16_t result; // ax
	int v4; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a3 ^ 0x8000;
	// 	v4 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a1) >> 32;
	// 	a1 += qx_WORD_E4E30;
	// 	a3 = (x_WORD *)((char *)a3 + *((x_DWORD *)&qx_WORD_E4E30 + v4 + 1));
	// 	*a2 += result;
	// 	a2[1] += result;
	// 	a2 += 2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFF38) --------------------------------------------------------
int16_t sub_AFF38(unsigned int a1, x_DWORD *a2, x_WORD *a3)
{
	int16_t result; // ax
	int16_t v4; // bx
	int v5; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a3 ^ 0x8000;
	// 	v4 = a3[1] ^ 0x8000;
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a1) >> 32;
	// 	a1 += qx_WORD_E4E30;
	// 	a3 = (x_WORD *)((char *)a3 + *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1));
	// 	*a2 += result;
	// 	a2[1] += v4;
	// 	a2 += 2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFF7A) --------------------------------------------------------
int16_t sub_AFF7A(unsigned int a1, x_DWORD *a2, x_WORD *a3)
{
	int16_t result; // ax
	int16_t v4; // bx
	int v5; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	result = a3[1] ^ 0x8000;
	// 	v4 = *a3 ^ 0x8000;
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a1) >> 32;
	// 	a1 += qx_WORD_E4E30;
	// 	a3 = (x_WORD *)((char *)a3 + *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1));
	// 	*a2 += result;
	// 	a2[1] += v4;
	// 	a2 += 2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFFBC) --------------------------------------------------------
int16_t sub_AFFBC(int16_t result, unsigned int a2, x_DWORD *a3, x_BYTE *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	HIBYTE(result) = *a4;
	// 	a4 = (x_BYTE *)((qx_WORD_E4E30 + __PAIR__((unsigned int)a4, a2)) >> 32);
	// 	a2 += qx_WORD_E4E30;
	// 	*a3 += result;
	// 	++a3;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000AFFE3) --------------------------------------------------------
int16_t sub_AFFE3(int16_t result, unsigned int a2, x_DWORD *a3, x_BYTE *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	HIBYTE(result) = *a4;
	// 	a4 = (x_BYTE *)((qx_WORD_E4E30 + __PAIR__((unsigned int)a4, a2)) >> 32);
	// 	a2 += qx_WORD_E4E30;
	// 	*a3 += result;
	// 	a3[1] += result;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B000D) --------------------------------------------------------
int16_t sub_B000D(int16_t result, unsigned int a2, int16_t a3, x_DWORD *a4, x_BYTE *a5)
{
	int v5; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	HIBYTE(result) = *a5;
	// 	HIBYTE(a3) = a5[1];
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a2) >> 32;
	// 	a2 += qx_WORD_E4E30;
	// 	a5 += *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1);
	// 	*a4 += result;
	// 	a4[1] += a3;
	// 	a4 += 2;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0042) --------------------------------------------------------
int16_t sub_B0042(int16_t result, unsigned int a2, int16_t a3, x_DWORD *a4, x_BYTE *a5)
{
	int v5; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	HIBYTE(a3) = *a5;
	// 	HIBYTE(result) = a5[1];
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a2) >> 32;
	// 	a2 += qx_WORD_E4E30;
	// 	a5 += *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1);
	// 	*a4 += result;
	// 	a4[1] += a3;
	// 	a4 += 2;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0077) --------------------------------------------------------
int16_t sub_B0077(unsigned int a1, x_DWORD *a2, int16_t *a3)
{
	int16_t result; // ax
	int v4; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a3;
	// 	v4 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a1) >> 32;
	// 	a1 += qx_WORD_E4E30;
	// 	a3 = (int16_t *)((char *)a3 + *((x_DWORD *)&qx_WORD_E4E30 + v4 + 1));
	// 	*a2 += result;
	// 	++a2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000B00A4) --------------------------------------------------------
int16_t sub_B00A4(unsigned int a1, x_DWORD *a2, int16_t *a3)
{
	int16_t result; // ax
	int v4; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a3;
	// 	v4 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a1) >> 32;
	// 	a1 += qx_WORD_E4E30;
	// 	a3 = (int16_t *)((char *)a3 + *((x_DWORD *)&qx_WORD_E4E30 + v4 + 1));
	// 	*a2 += result;
	// 	a2[1] += result;
	// 	a2 += 2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000B00D4) --------------------------------------------------------
int16_t sub_B00D4(unsigned int a1, x_DWORD *a2, int16_t *a3)
{
	int16_t result; // ax
	int16_t v4; // bx
	int v5; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a3;
	// 	v4 = a3[1];
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a1) >> 32;
	// 	a1 += qx_WORD_E4E30;
	// 	a3 = (int16_t *)((char *)a3 + *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1));
	// 	*a2 += result;
	// 	a2[1] += v4;
	// 	a2 += 2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000B010B) --------------------------------------------------------
int16_t sub_B010B(unsigned int a1, x_DWORD *a2, int16_t *a3)
{
	int16_t v3; // bx
	int16_t result; // ax
	int v5; // ebp

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	v3 = *a3;
	// 	result = a3[1];
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a1) >> 32;
	// 	a1 += qx_WORD_E4E30;
	// 	a3 = (int16_t *)((char *)a3 + *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1));
	// 	*a2 += result;
	// 	a2[1] += v3;
	// 	a2 += 2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0142) --------------------------------------------------------
char sub_B0142(int a1, int a2, x_DWORD *a3, x_BYTE *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a1) = *a4++;
	// 	*a3 += *(x_DWORD *)(a2 + 4 * a1);
	// 	++a3;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B015E) --------------------------------------------------------
char sub_B015E(int a1, int a2, x_DWORD *a3, x_BYTE *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a1) = *a4++;
	// 	*a3 += *(x_DWORD *)(a2 + 4 * a1);
	// 	a3[1] += *(x_DWORD *)(a2 + 4 * a1 + 1024);
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B0184) --------------------------------------------------------
char sub_B0184(int a1, int a2, int a3, x_DWORD *a4, x_BYTE *a5)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a1) = *a5;
	// 	LOBYTE(a3) = a5[1];
	// 	a5 += 2;
	// 	*a4 += *(x_DWORD *)(a2 + 4 * a1);
	// 	*a4 += *(x_DWORD *)(a2 + 4 * a3 + 1024);
	// 	++a4;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B01AE) --------------------------------------------------------
char sub_B01AE(int a1, int a2, int a3, x_DWORD *a4, x_BYTE *a5)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a1) = *a5;
	// 	LOBYTE(a3) = a5[1];
	// 	a5 += 2;
	// 	*a4 += *(x_DWORD *)(a2 + 4 * a1);
	// 	a4[1] += *(x_DWORD *)(a2 + 4 * a3 + 1024);
	// 	a4 += 2;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B01D9) --------------------------------------------------------
char sub_B01D9(int a1, int a2, int a3, x_DWORD *a4, x_BYTE *a5)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a3) = *a5;
	// 	LOBYTE(a1) = a5[1];
	// 	a5 += 2;
	// 	*a4 += *(x_DWORD *)(a2 + 4 * a1);
	// 	*a4 += *(x_DWORD *)(a2 + 4 * a3 + 1024);
	// 	++a4;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B0203) --------------------------------------------------------
char sub_B0203(int a1, int a2, int a3, x_DWORD *a4, x_BYTE *a5)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a3) = *a5;
	// 	LOBYTE(a1) = a5[1];
	// 	a5 += 2;
	// 	*a4 += *(x_DWORD *)(a2 + 4 * a1);
	// 	a4[1] += *(x_DWORD *)(a2 + 4 * a3 + 1024);
	// 	a4 += 2;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B022E) --------------------------------------------------------
int sub_B022E(int result, x_DWORD *a2, x_DWORD *a3, x_WORD *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = *a4;
	// 	result ^= 0x8000u;
	// 	++a4;
	// 	*a3 += *a2 * (signed int)(int16_t)result >> 7;
	// 	++a3;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0258) --------------------------------------------------------
int sub_B0258(int result, x_DWORD *a2, x_DWORD *a3, x_WORD *a4)
{
	// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = *a4;
	// 	result ^= 0x8000u;
	// 	++a4;
	// 	*a3 += *a2 * (signed int)(int16_t)result >> 7;
	// 	a3[1] += a2[256] * (signed int)(int16_t)result >> 7;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0292) --------------------------------------------------------
int sub_B0292(int result, x_DWORD *a2, x_DWORD *a3, x_WORD *a4)
{
	int16_t v4; // bx

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = *a4;
	// 	result ^= 0x8000u;
	// 	v4 = a4[1] ^ 0x8000;
	// 	a4 += 2;
	// 	*a3 += *a2 * (signed int)(int16_t)result >> 7;
	// 	*a3 += a2[256] * (signed int)v4 >> 7;
	// 	++a3;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B02D5) --------------------------------------------------------
int sub_B02D5(int result, x_DWORD *a2, x_DWORD *a3, x_WORD *a4)
{
	int16_t v4; // bx

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = *a4;
	// 	result ^= 0x8000u;
	// 	v4 = a4[1] ^ 0x8000;
	// 	a4 += 2;
	// 	*a3 += *a2 * (signed int)(int16_t)result >> 7;
	// 	a3[1] += a2[256] * (signed int)v4 >> 7;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0319) --------------------------------------------------------
int sub_B0319(int result, x_DWORD *a2, x_DWORD *a3, x_WORD *a4)
{
	int16_t v4; // bx

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = a4[1];
	// 	result ^= 0x8000u;
	// 	v4 = *a4 ^ 0x8000;
	// 	a4 += 2;
	// 	*a3 += *a2 * (signed int)(int16_t)result >> 7;
	// 	*a3 += a2[256] * (signed int)v4 >> 7;
	// 	++a3;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B035C) --------------------------------------------------------
int sub_B035C(int result, x_DWORD *a2, x_DWORD *a3, x_WORD *a4)
{
	int16_t v4; // bx

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = a4[1];
	// 	result ^= 0x8000u;
	// 	v4 = *a4 ^ 0x8000;
	// 	a4 += 2;
	// 	*a3 += *a2 * (signed int)(int16_t)result >> 7;
	// 	a3[1] += a2[256] * (signed int)v4 >> 7;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B03A0) --------------------------------------------------------
int16_t sub_B03A0(x_DWORD *a1, x_DWORD *a2, int16_t *a3)
{
	int16_t result; // ax

// FIXME: types
	// // do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a3;
	// 	++a3;
	// 	*a2 += *a1 * (signed int)result >> 7;
	// 	++a2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000B03C5) --------------------------------------------------------
int16_t sub_B03C5(x_DWORD *a1, x_DWORD *a2, int16_t *a3)
{
	int16_t result; // ax

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a3;
	// 	++a3;
	// 	*a2 += *a1 * (signed int)result >> 7;
	// 	a2[1] += a1[256] * (signed int)result >> 7;
	// 	a2 += 2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000B03FA) --------------------------------------------------------
int16_t sub_B03FA(x_DWORD *a1, x_DWORD *a2, int16_t *a3)
{
	int16_t result; // ax
	int16_t v4; // bx

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a3;
	// 	v4 = a3[1];
	// 	a3 += 2;
	// 	*a2 += *a1 * (signed int)result >> 7;
	// 	*a2 += a1[256] * (signed int)v4 >> 7;
	// 	++a2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0432) --------------------------------------------------------
int16_t sub_B0432(x_DWORD *a1, x_DWORD *a2, int16_t *a3)
{
	int16_t result; // ax
	int16_t v4; // bx

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a3;
	// 	v4 = a3[1];
	// 	a3 += 2;
	// 	*a2 += *a1 * (signed int)result >> 7;
	// 	a2[1] += a1[256] * (signed int)v4 >> 7;
	// 	a2 += 2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000B046B) --------------------------------------------------------
int16_t sub_B046B(x_DWORD *a1, x_DWORD *a2, int16_t *a3)
{
	int16_t v3; // bx
	int16_t result; // ax

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	v3 = *a3;
	// 	result = a3[1];
	// 	a3 += 2;
	// 	*a2 += *a1 * (signed int)result >> 7;
	// 	*a2 += a1[256] * (signed int)v3 >> 7;
	// 	++a2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000B04A3) --------------------------------------------------------
int16_t sub_B04A3(x_DWORD *a1, x_DWORD *a2, int16_t *a3)
{
	int16_t v3; // bx
	int16_t result; // ax

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a3 >= x_DWORD_E4E24)
	// 		break;
	// 	v3 = *a3;
	// 	result = a3[1];
	// 	a3 += 2;
	// 	*a2 += *a1 * (signed int)result >> 7;
	// 	a2[1] += a1[256] * (signed int)v3 >> 7;
	// 	a2 += 2;
	// } while ((unsigned int)a2 < x_DWORD_E4E2C);
	return result;
}

//----- (000B04DC) --------------------------------------------------------
char sub_B04DC(int a1, int a2, unsigned int a3, x_DWORD *a4, x_BYTE *a5)
{
	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a1) = *a5;
	// 	a5 = (x_BYTE *)((qx_WORD_E4E30 + __PAIR__((unsigned int)a5, a3)) >> 32);
	// 	a3 += qx_WORD_E4E30;
	// 	*a4 += *(x_DWORD *)(a2 + 4 * a1);
	// 	++a4;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B0503) --------------------------------------------------------
char sub_B0503(int a1, int a2, unsigned int a3, x_DWORD *a4, x_BYTE *a5)
{
	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a1) = *a5;
	// 	a5 = (x_BYTE *)((qx_WORD_E4E30 + __PAIR__((unsigned int)a5, a3)) >> 32);
	// 	a3 += qx_WORD_E4E30;
	// 	*a4 += *(x_DWORD *)(a2 + 4 * a1);
	// 	a4[1] += *(x_DWORD *)(a2 + 4 * a1 + 1024);
	// 	a4 += 2;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B0534) --------------------------------------------------------
char sub_B0534(int a1, int a2, unsigned int a3, int a4, x_DWORD *a5, x_BYTE *a6)
{
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a6 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a1) = *a6;
	// 	LOBYTE(a4) = a6[1];
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a3) >> 32;
	// 	a3 += qx_WORD_E4E30;
	// 	a6 += *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1);
	// 	*a5 += *(x_DWORD *)(a2 + 4 * a1);
	// 	*a5 += *(x_DWORD *)(a2 + 4 * a4 + 1024);
	// 	++a5;
	// } while ((unsigned int)a5 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B056C) --------------------------------------------------------
char sub_B056C(int a1, int a2, unsigned int a3, int a4, x_DWORD *a5, x_BYTE *a6)
{
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a6 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a1) = *a6;
	// 	LOBYTE(a4) = a6[1];
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a3) >> 32;
	// 	a3 += qx_WORD_E4E30;
	// 	a6 += *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1);
	// 	*a5 += *(x_DWORD *)(a2 + 4 * a1);
	// 	a5[1] += *(x_DWORD *)(a2 + 4 * a4 + 1024);
	// 	a5 += 2;
	// } while ((unsigned int)a5 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B05A5) --------------------------------------------------------
char sub_B05A5(int a1, int a2, unsigned int a3, int a4, x_DWORD *a5, x_BYTE *a6)
{
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a6 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a4) = *a6;
	// 	LOBYTE(a1) = a6[1];
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a3) >> 32;
	// 	a3 += qx_WORD_E4E30;
	// 	a6 += *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1);
	// 	*a5 += *(x_DWORD *)(a2 + 4 * a1);
	// 	*a5 += *(x_DWORD *)(a2 + 4 * a4 + 1024);
	// 	++a5;
	// } while ((unsigned int)a5 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B05DD) --------------------------------------------------------
char sub_B05DD(int a1, int a2, unsigned int a3, int a4, x_DWORD *a5, x_BYTE *a6)
{
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a6 >= x_DWORD_E4E24)
	// 		break;
	// 	LOBYTE(a4) = *a6;
	// 	LOBYTE(a1) = a6[1];
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a3) >> 32;
	// 	a3 += qx_WORD_E4E30;
	// 	a6 += *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1);
	// 	*a5 += *(x_DWORD *)(a2 + 4 * a1);
	// 	a5[1] += *(x_DWORD *)(a2 + 4 * a4 + 1024);
	// 	a5 += 2;
	// } while ((unsigned int)a5 < x_DWORD_E4E2C);
	return a1;
}

//----- (000B0616) --------------------------------------------------------
int sub_B0616(int result, x_DWORD *a2, unsigned int a3, x_DWORD *a4, x_WORD *a5)
{
	int v5; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = *a5;
	// 	result ^= 0x8000u;
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a3) >> 32;
	// 	a3 += qx_WORD_E4E30;
	// 	a5 = (x_WORD *)((char *)a5 + *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1));
	// 	*a4 += *a2 * (signed int)(int16_t)result >> 7;
	// 	++a4;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return result;
}

//----- (000B064E) --------------------------------------------------------
int sub_B064E(int result, x_DWORD *a2, unsigned int a3, x_DWORD *a4, x_WORD *a5)
{
	int v5; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = *a5;
	// 	result ^= 0x8000u;
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a3) >> 32;
	// 	a3 += qx_WORD_E4E30;
	// 	a5 = (x_WORD *)((char *)a5 + *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1));
	// 	*a4 += *a2 * (signed int)(int16_t)result >> 7;
	// 	a4[1] += a2[256] * (signed int)(int16_t)result >> 7;
	// 	a4 += 2;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0696) --------------------------------------------------------
int sub_B0696(int result, x_DWORD *a2, unsigned int a3, x_DWORD *a4, x_WORD *a5)
{
	int16_t v5; // bx
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = *a5;
	// 	result ^= 0x8000u;
	// 	v5 = a5[1] ^ 0x8000;
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a3) >> 32;
	// 	a3 += qx_WORD_E4E30;
	// 	a5 = (x_WORD *)((char *)a5 + *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1));
	// 	*a4 += *a2 * (signed int)(int16_t)result >> 7;
	// 	*a4 += a2[256] * (signed int)v5 >> 7;
	// 	++a4;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return result;
}

//----- (000B06E7) --------------------------------------------------------
int sub_B06E7(int result, x_DWORD *a2, unsigned int a3, x_DWORD *a4, x_WORD *a5)
{
	int16_t v5; // bx
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = *a5;
	// 	result ^= 0x8000u;
	// 	v5 = a5[1] ^ 0x8000;
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a3) >> 32;
	// 	a3 += qx_WORD_E4E30;
	// 	a5 = (x_WORD *)((char *)a5 + *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1));
	// 	*a4 += *a2 * (signed int)(int16_t)result >> 7;
	// 	a4[1] += a2[256] * (signed int)v5 >> 7;
	// 	a4 += 2;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0739) --------------------------------------------------------
int sub_B0739(int result, x_DWORD *a2, unsigned int a3, x_DWORD *a4, x_WORD *a5)
{
	int16_t v5; // bx
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = a5[1];
	// 	result ^= 0x8000u;
	// 	v5 = *a5 ^ 0x8000;
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a3) >> 32;
	// 	a3 += qx_WORD_E4E30;
	// 	a5 = (x_WORD *)((char *)a5 + *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1));
	// 	*a4 += *a2 * (signed int)(int16_t)result >> 7;
	// 	*a4 += a2[256] * (signed int)v5 >> 7;
	// 	++a4;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return result;
}

//----- (000B078A) --------------------------------------------------------
int sub_B078A(int result, x_DWORD *a2, unsigned int a3, x_DWORD *a4, x_WORD *a5)
{
	int16_t v5; // bx
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a5 >= x_DWORD_E4E24)
	// 		break;
	// 	LOWORD(result) = a5[1];
	// 	result ^= 0x8000u;
	// 	v5 = *a5 ^ 0x8000;
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a3) >> 32;
	// 	a3 += qx_WORD_E4E30;
	// 	a5 = (x_WORD *)((char *)a5 + *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1));
	// 	*a4 += *a2 * (signed int)(int16_t)result >> 7;
	// 	a4[1] += a2[256] * (signed int)v5 >> 7;
	// 	a4 += 2;
	// } while ((unsigned int)a4 < x_DWORD_E4E2C);
	return result;
}

//----- (000B07DC) --------------------------------------------------------
int16_t sub_B07DC(x_DWORD *a1, unsigned int a2, x_DWORD *a3, int16_t *a4)
{
	int16_t result; // ax
	int v5; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a4;
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a2) >> 32;
	// 	a2 += qx_WORD_E4E30;
	// 	a4 = (int16_t *)((char *)a4 + *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1));
	// 	*a3 += *a1 * (signed int)result >> 7;
	// 	++a3;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B080F) --------------------------------------------------------
int16_t sub_B080F(x_DWORD *a1, unsigned int a2, x_DWORD *a3, int16_t *a4)
{
	int16_t result; // ax
	int v5; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a4;
	// 	v5 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a2) >> 32;
	// 	a2 += qx_WORD_E4E30;
	// 	a4 = (int16_t *)((char *)a4 + *((x_DWORD *)&qx_WORD_E4E30 + v5 + 1));
	// 	*a3 += *a1 * (signed int)result >> 7;
	// 	a3[1] += a1[256] * (signed int)result >> 7;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0852) --------------------------------------------------------
int16_t sub_B0852(x_DWORD *a1, unsigned int a2, x_DWORD *a3, int16_t *a4)
{
	int16_t result; // ax
	int16_t v5; // bx
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a4;
	// 	v5 = a4[1];
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a2) >> 32;
	// 	a2 += qx_WORD_E4E30;
	// 	a4 = (int16_t *)((char *)a4 + *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1));
	// 	*a3 += *a1 * (signed int)result >> 7;
	// 	*a3 += a1[256] * (signed int)v5 >> 7;
	// 	++a3;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0898) --------------------------------------------------------
int16_t sub_B0898(x_DWORD *a1, unsigned int a2, x_DWORD *a3, int16_t *a4)
{
	int16_t result; // ax
	int16_t v5; // bx
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	result = *a4;
	// 	v5 = a4[1];
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a2) >> 32;
	// 	a2 += qx_WORD_E4E30;
	// 	a4 = (int16_t *)((char *)a4 + *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1));
	// 	*a3 += *a1 * (signed int)result >> 7;
	// 	a3[1] += a1[256] * (signed int)v5 >> 7;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B08DF) --------------------------------------------------------
int16_t sub_B08DF(x_DWORD *a1, unsigned int a2, x_DWORD *a3, int16_t *a4)
{
	int16_t v4; // bx
	int16_t result; // ax
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	v4 = *a4;
	// 	result = a4[1];
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a2) >> 32;
	// 	a2 += qx_WORD_E4E30;
	// 	a4 = (int16_t *)((char *)a4 + *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1));
	// 	*a3 += *a1 * (signed int)result >> 7;
	// 	*a3 += a1[256] * (signed int)v4 >> 7;
	// 	++a3;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0925) --------------------------------------------------------
int16_t sub_B0925(x_DWORD *a1, unsigned int a2, x_DWORD *a3, int16_t *a4)
{
	int16_t v4; // bx
	int16_t result; // ax
	int v6; // ebp

	// FIXME: types
	// do
	// {
	// 	if ((unsigned int)a4 >= x_DWORD_E4E24)
	// 		break;
	// 	v4 = *a4;
	// 	result = a4[1];
	// 	v6 = ((unsigned int)qx_WORD_E4E30 + (uint64_t)a2) >> 32;
	// 	a2 += qx_WORD_E4E30;
	// 	a4 = (int16_t *)((char *)a4 + *((x_DWORD *)&qx_WORD_E4E30 + v6 + 1));
	// 	*a3 += *a1 * (signed int)result >> 7;
	// 	a3[1] += a1[256] * (signed int)v4 >> 7;
	// 	a3 += 2;
	// } while ((unsigned int)a3 < x_DWORD_E4E2C);
	return result;
}

//----- (000B0B87) --------------------------------------------------------
int sub_B0B87(HDIGDRIVER a1, int a2)
{
	int v2; // eax
	int *v3; // esi
	int v4; // ecx
	Bit8u* v5; // edi
	int v6; // eax

	//fix
	v5 = 0;
	//fix

	v2 = a1->hw_mode_flags_7 & 0xF;
	if (a1->hw_format_6 == 2 || a1->hw_format_6 == 3)
		v2 |= 0x10u;
	if (a1->hw_format_6 == 1 || a1->hw_format_6 == 3)
		v2 |= 0x20u;
	if (a1->n_active_samples_25 > 1u)
		v2 |= 0x40u;
	x_DWORD_E4E1C = v2;
	v3 = (int *)a1->build_buffer_20;
	v4 = a1->samples_per_buffer_18;
	if (a1->hw_mode_flags_7 & 0x20)
	{
		x_DWORD_E4E1C |= 8u;
		// FIXME: types
		// v5 = (Bit8u*)(a2 * (a1->half_buffer_size_4 >> 1) + (int)a1->DMA_11_12[0]);//fix
	}
	else
	{
		//v5 = (x_BYTE *)a1[a2 + 11];//fix it!
		v5 = (Bit8u*)a1->DMA_11_12[a2];//fix it

		if (a1->hw_mode_flags_7 & 8)
			v6 = a1->half_buffer_size_4;
	}
	return ((int(*)(int, x_BYTE *, int *))off_AEB40[x_DWORD_E4E1C])(v4, (int8_t*)v5, v3);
}

//----- (000B0C1A) --------------------------------------------------------
void sub_B0C1A(HDIGDRIVER a1)
{
	/*Bit8u* v1; // edi
	unsigned int v3; // ST00_4

	v1 = (Bit8u*)a1->build_buffer_20;
	v3 = a1->build_size_19;
	memset(v1, 0, a1->build_size_19 & 3);
	memset(&v1[v3 & 3], 0, 4 * (v3 >> 2));*/
	//fix it
}

//----- (000B0C46) --------------------------------------------------------
void sub_B0C46()
{
	// FIXME: types
	// sub_9D590_lock_linear_region((Bit8u*)&x_DWORD_E4E1C, (unsigned int)&x_WORD_E4E3C);
	// FIXME: types
	// sub_9D590_lock_linear_region((Bit8u*)off_AEB40, (unsigned int)sub_B0C46);
}

//----- (000B0CC8) --------------------------------------------------------
char *sub_B0CC8()
{
	void *retaddr; // [esp+0h] [ebp+0h]

	return (char *)&retaddr - x_DWORD_E4C94;
}

//----- (000B0D80) --------------------------------------------------------
void sub_B0D80()
{
	x_DWORD_E731C = 0x8000;
}

//----- (000B1138) --------------------------------------------------------
signed int sub_B1138(signed int *a1, signed int a2)
{
	signed int result; // eax
	signed int v3; // eax
	int v4; // edx
	signed int v5; // eax

	// FIXME: types
	// result = (int)calloc(a2, 4);
	*a1 = result;
	if (result)
	{
		// FIXME: types
		// result = (int)calloc(a2, 4);
		a1[1] = result;
		if (result)
		{
			a1[2] = a2;
			v3 = 0;
			if (a1[2] > 0)
			{
				v4 = 0;
				do
				{
					*(x_DWORD *)(*a1 + v4) = 0x4000;
					++v3;
					v4 += 4;
				} while (v3 < a1[2]);
			}
			a1[3] = *a1;
			v5 = *a1;
			a1[4] = 4 * (a1[2] - 1) + *a1;
			a1[5] = v5 - 4;
			result = 1;
		}
	}
	return result;
}

//----- (000B11E8) --------------------------------------------------------
int sub_B11E8(x_DWORD *a1, int a2)
{
	x_DWORD *v2; // eax
	x_DWORD *v3; // esi
	int v4; // edx
	x_DWORD *v5; // ecx

	v2 = (x_DWORD *)a1[3];
	v3 = v2;
	// FIXME: types
	// a1[3] = (x_DWORD)(v2 + 1);
	*v2 = a2;
	if (*a1 + 4 * a1[2] == a1[3])
		a1[3] = *a1;
	v4 = 0;
	do
	{
		v5 = v2;
		--v2;
		v4 += *v5;
		if (v2 == (x_DWORD *)a1[5])
			v2 = (x_DWORD *)a1[4];
	} while (v2 != v3);
	return v4 / a1[2];
}

//----- (000B12A4) --------------------------------------------------------
int sub_B12A4(int a1)
{
	int v1; // edx
	int v2; // eax
	int v3; // eax
	int v4; // ecx
	uint64_t v5; // rax
	int result; // eax

	if (a1 >= 0)
		v1 = a1;
	else
		v1 = -a1;
	v2 = v1 >> 6;
	if (v1 >> 6 < 256)
	{
		v4 = x_DWORD_E7724[v2];
		v5 = (v1 & 0x3F) * (int64_t)((char *)x_DWORD_E7724[1+v2] - v4);
		v3 = v4 + (HIDWORD(v5) != 0) + (v5 >> 6);
	}
	else
	{
		v3 = x_DWORD_E7724[0x100];
	}
	result = v3 >> 14;
	if (a1 < 0)
		result = -result;
	return result;
}

//----- (000B1304) --------------------------------------------------------
int sub_B1304(int a1, int a2)
{
	int result; // eax
	unsigned int v3; // edx
	int v4; // ecx
	int v5; // esi

	result = a1;
	if (a1 || a2)
	{
		if (a1 >= 0)
		{
			v4 = a1;
			v3 = 0;
		}
		else
		{
			v3 = 1;
			v4 = -a1;
		}
		if (a2 >= 0)
		{
			v5 = a2;
		}
		else
		{
			LOBYTE(v3) = v3 | 2;
			v5 = -a2;
		}
		if (v4 >= v5)
		{
			switch (v3)
			{
			case 0u:
			case 2u:
				result = 25735 - sub_B12A4(((int64_t)a2 << 14) / a1);
				break;
			case 1u:
			case 3u:
				result = -25735 - sub_B12A4(((int64_t)a2 << 14) / a1);
				break;
			default:
				result = 0;
				break;
			}
		}
		else if (v3 < 2)
		{
			result = sub_B12A4(((int64_t)a1 << 14) / a2);
		}
		else if (v3 <= 2)
		{
			result = sub_B12A4(((int64_t)a1 << 14) / a2) + 51471;
		}
		else if (v3 == 3)
		{
			result = sub_B12A4(((int64_t)a1 << 14) / a2) - 51471;
		}
		else
		{
			result = 0;
		}
	}
	return result;
}

//----- (000B1414) --------------------------------------------------------
int sub_B1414(int a1)
{
	int v1; // edx
	int v2; // eax
	int v3; // eax
	int v4; // ecx
	uint64_t v5; // rax
	int result; // eax

	if (a1 >= 0)
		v1 = ((int64_t)a1 << 14) / 25735;
	else
		v1 = -(signed int)(((int64_t)a1 << 14) / 25735);
	v2 = v1 >> 6;
	if (v1 >> 6 < 256)
	{
		v4 = x_DWORD_E7320[v2];
		v5 = (v1 & 0x3F) * (int64_t)(x_DWORD_E7320[1 + v2] - v4);
		v3 = v4 + (HIDWORD(v5) != 0) + (v5 >> 6);
	}
	else
	{
		v3 = x_DWORD_E7320[0x100];
	}
	result = v3 >> 14;
	if (a1 < 0)
		result = -result;
	return result;
}

//----- (000B148C) --------------------------------------------------------
int sub_B148C(int a1)
{
	signed int v1; // edx
	int v3; // eax

	v1 = a1 % 102943;
	if (a1 % 102943 < 0)
		v1 += 102943;
	if (v1 <= 25735)
		return sub_B1414(v1);
	if (v1 <= 51471)
		return sub_B1414(51471 - v1);
	if (v1 > 77207)
		v3 = sub_B1414(102943 - v1);
	else
		v3 = sub_B1414(v1 - 51471);
	return -v3;
}

//----- (000B14F8) --------------------------------------------------------
int sub_B14F8(int *a1, int a2)
{
	int result; // eax

	*a1 = sub_B148C(a2);
	result = sub_B148C(a2 + 25735);
	a1[1] = result;
	return result;
}

//----- (000B1D8C) --------------------------------------------------------
char sub_B1D8C(int a1, int a2, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	x_DWORD *v17; // ebx
	signed int v18; // edx
	int v19; // eax
	uint8_t v20; // cf
	int v21; // eax

	v17 = (x_DWORD *)(a2 + a1 + 28);
	v18 = -256;
	v19 = *(x_DWORD *)(a2 + a1 + 32);
	v20 = __CFSHL__(v19, 25);
	v21 = v19 << 25;
	if (v20)
	{
		if (!v21 && !*v17)
			v18 = -512;
		v20 = __CFADD__(*(x_DWORD *)(a2 + a1 + 32), 256);
		*(x_DWORD *)(a2 + a1 + 32) += 256;
		if (v20)
		{
			*(x_DWORD *)(a2 + a1 + 32) = 2147483648;
			++*(x_WORD *)(a2 + a1 + 36);
		}
	}
	*(x_DWORD *)(a2 + a1 + 32) &= v18;
	*v17 = 0;
	//return sub_B1C58((int16_t)v17, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
	return 1;
}

//----- (000B1E11) --------------------------------------------------------
char sub_B1E11(int a1, int a2, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int16_t v17; // bx

	*(x_WORD *)(a1 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + a2 + 2);
	*(x_WORD *)(a1 + 8) |= *(x_WORD *)((char *)&x_DWORD_B1860[19] + a2 + 2);
	v17 = *(x_WORD *)((char *)x_DWORD_B1858 + *(uint16_t *)((char *)&off_B1854 + a2 + 2) + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v17;
	//return sub_B1C58(v17, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
	return 1;
}

//----- (000B1E68) --------------------------------------------------------
/*int sub_B1E68(int result, int a2, x_BYTE *a3)
{
	int v3; // [esp-80h] [ebp-80h]
	int v4; // [esp-14h] [ebp-14h]
	int v5; // [esp-10h] [ebp-10h]
	int v6; // [esp-Ch] [ebp-Ch]

	a3[4] |= result;
	if (!((uint8_t)result & *a3))
	{
		v6 = a2;
		v5 = (uint16_t)__ES__;
		v4 = (uint16_t)__DS__;
		qmemcpy(&v3, a3, 0x6Cu);
		result = off_E4CBD(BYTE1(result));
		qmemcpy(a3, &v3, 0x6Cu);
	}
	return result;
}*/

//----- (000B1EB6) --------------------------------------------------------
void sub_B1EB6(int a1)
{
	int v1; // ebx

	v1 = *(x_DWORD *)(a1 + 40);
}

//----- (000B1EBC) --------------------------------------------------------
void sub_B1EBC(int a1)
{
	int v1; // ebx

	v1 = *(x_DWORD *)(a1 + 36);
}

//----- (000B1EC2) --------------------------------------------------------
void sub_B1EC2(int a1)
{
	int v1; // ebx

	v1 = *(x_DWORD *)(a1 + 32);
}

//----- (000B1EC8) --------------------------------------------------------
void sub_B1EC8(int a1)
{
	int v1; // ebx

	v1 = *(x_DWORD *)(a1 + 28);
}

//----- (000B1ECE) --------------------------------------------------------
void sub_B1ECE(int a1)
{
	int v1; // ebx

	v1 = *(x_DWORD *)(a1 + 24);
}

//----- (000B1ED6) --------------------------------------------------------
void sub_B1ED6(int *a1)
{
	int v1; // ebx

	v1 = *a1;
}

//----- (000B1EDC) --------------------------------------------------------
void sub_B1EDC(int a1)
{
	int v1; // ebx

	v1 = *(x_DWORD *)(a1 + 16);
}

//----- (000B1EE2) --------------------------------------------------------
void sub_B1EE2(int a1)
{
	int v1; // ebx

	v1 = *(x_DWORD *)(a1 + 12);
}

//----- (000B1EE8) --------------------------------------------------------
void sub_B1EE8(int a1, char *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 40) + *a2;
}

//----- (000B1EF0) --------------------------------------------------------
void sub_B1EF0(int a1, char *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 36) + *a2;
}

//----- (000B1EF8) --------------------------------------------------------
void sub_B1EF8(int a1, char *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 32) + *a2;
}

//----- (000B1F00) --------------------------------------------------------
void sub_B1F00(int a1, char *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 28) + *a2;
}

//----- (000B1F08) --------------------------------------------------------
void sub_B1F08(int a1, char *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 24) + *a2;
}

//----- (000B1F12) --------------------------------------------------------
void sub_B1F12(int a1, char *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 20) + *a2;
}

//----- (000B1F1C) --------------------------------------------------------
void sub_B1F1C(int a1, char *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 16) + *a2;
}

//----- (000B1F24) --------------------------------------------------------
void sub_B1F24(int a1, char *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 12) + *a2;
}

//----- (000B1F2C) --------------------------------------------------------
void sub_B1F2C(int a1, x_DWORD *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 40) + *a2;
}

//----- (000B1F35) --------------------------------------------------------
void sub_B1F35(int a1, x_DWORD *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 36) + *a2;
}

//----- (000B1F3E) --------------------------------------------------------
void sub_B1F3E(int a1, x_DWORD *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 32) + *a2;
}

//----- (000B1F47) --------------------------------------------------------
void sub_B1F47(int a1, x_DWORD *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 28) + *a2;
}

//----- (000B1F50) --------------------------------------------------------
void sub_B1F50(int a1, x_DWORD *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 24) + *a2;
}

//----- (000B1F5B) --------------------------------------------------------
void sub_B1F5B(int a1, x_DWORD *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 20) + *a2;
}

//----- (000B1F66) --------------------------------------------------------
void sub_B1F66(int a1, x_DWORD *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 16) + *a2;
}

//----- (000B1F6F) --------------------------------------------------------
void sub_B1F6F(int a1, x_DWORD *a2)
{
	int v2; // ebx

	v2 = *(x_DWORD *)(a1 + 12) + *a2;
}

//----- (000B1F78) --------------------------------------------------------
int sub_B1F78(uint8_t a1, unsigned int a2, int a3, x_BYTE *a4)
{
	int result; // eax
	unsigned int v5; // edx
	int v6; // ebx
	unsigned int v7; // [esp-4h] [ebp-4h]

	//fix it
	result = 0;
	//fix it

	LOBYTE(a2) = *a4;
	v7 = a2;
	LOWORD(a2) = (a1 >> 3) & 0x18 | *a4 & 7;
	((void(*)(int))off_B1964[a2])(a3);
	v5 = v7;
	if ((v7 & 0x38) != 32)
	{
		LOBYTE(v5) = v7 & 0x38;
		v6 = (*(x_DWORD *)(a3 - (v5 >> 1) + 40) << ((uint8_t)v7 >> 6)) + a2;
	}
	return result;
}

//----- (000B1FB5) --------------------------------------------------------
int sub_B1FB5(int a1, int a2, signed int *a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	sub_B3BA6(*a3, a1 + 108);
	// FIXME: types
	// v3 = sub_B337C(a2 + a1 + 28, a1 + 108, (int)a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B1FD4) --------------------------------------------------------
int sub_B1FD4(int a1, int a2, signed int *a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	sub_B3BA6(*a3, a1 + 108);
	// FIXME: types
	// v3 = sub_B37B0(a2 + a1 + 28, a1 + 108, (int)a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B1FF3) --------------------------------------------------------
char sub_B1FF3(int a1, int a2, signed int *a3, int16_t bx0, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int16_t v19; // dx
	int v21; // eax

	sub_B3BA6(*a3, a1 + 108);
	v21 = sub_B3542(a2 + a1 + 28, a1 + 108);
	v19 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v19) |= *((x_BYTE *)&x_DWORD_B1860[37] + v21 + 3);
	*(x_WORD *)(a1 + 4) = v19;
	//return sub_B1C58(bx0, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B200F) --------------------------------------------------------
char sub_B200F(int a1, int a2, signed int *a3, int _4, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int16_t v18; // dx
	int v20; // eax

	sub_B3BA6(*a3, a1 + 108);
	v20 = sub_B3542(a2 + a1 + 28, a1 + 108);
	v18 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v18) |= *((x_BYTE *)&x_DWORD_B1860[37] + v20 + 3);
	*(x_WORD *)(a1 + 4) = v18;
	return sub_B1E11(a1, a2, _4, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B2069) --------------------------------------------------------
int sub_B2069(int a1, int a2, signed int *a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	sub_B3BA6(*a3, a1 + 108);
	// FIXME: types
	// v3 = sub_B35DB(a2 + a1 + 28, a1 + 108, (x_BYTE *)a1, (int)a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B2088) --------------------------------------------------------
int sub_B2088(int a1, int a2, signed int *a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	sub_B3BA6(*a3, a1 + 108);
	// FIXME: types
	// v3 = sub_B35DB(a1 + 108, a2 + a1 + 28, (x_BYTE *)a1, (int)a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B20A7) --------------------------------------------------------
char sub_B20A7(int a1, int a2, signed int *a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v18; // edi
	int16_t v19; // bx
	int16_t v20; // bx

	v18 = *(uint16_t *)((char *)x_DWORD_B1858 + a2);
	v19 = *(x_WORD *)((char *)x_DWORD_B1858 + v18 + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v19;
	v20 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v18 + 2);
	*(x_WORD *)(a1 + 8) &= v20;
	sub_B3BA6(*a3, v18 + a1 + 28);
	//return sub_B1C58(v20, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B20E1) --------------------------------------------------------
char sub_B20E1(int a1, int a2, int *a3, int16_t bx0, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	*a3 = sub_B3A60(a2 + a1 + 28);
	//return sub_B1C58(bx0, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B20F2) --------------------------------------------------------
char sub_B20F2(int a1, int a2, int *esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	*esi0 = sub_B3A60(a2 + a1 + 28);
	//return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
	return 1;
}

//----- (000B2103) --------------------------------------------------------
char sub_B2103(void *a1, const void *a2, int16_t bx0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	qmemcpy(a1, (void*)a2, 0x1Cu);
	//return sub_B1C58(bx0, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
	return 1;
}

//----- (000B2121) --------------------------------------------------------
char sub_B2121(int a1, int16_t *a2)
{
	int16_t v18; // ax
	int16_t v19; // ax

	v18 = *a2;
	*(x_WORD *)a1 = *a2;
	v19 = v18 & 0x300;
	// if (v19 == 768)
	// {
	// 	;// *(x_DWORD*)(a1 + 118) = (x_DWORD)sub_B1C58;
	// }
	// else if (v19 == 512)
	// {
	// 	// FIXME: types
	// 	// *(x_DWORD *)(a1 + 118) = (x_DWORD)sub_B1DC8;
	// }
	// else
	// {
	// 	// FIXME: types
	// 	// *(x_DWORD *)(a1 + 118) = (x_DWORD)sub_B1D8C;
	// }
	return 1;
}

//----- (000B2161) --------------------------------------------------------
char sub_B2161(const void *a1, void *a2)
{
	qmemcpy(a2, (void*)a1, 0x1Cu);
	return 1;
}

//----- (000B2175) --------------------------------------------------------
char sub_B2175(x_WORD *a1, x_WORD *a2)
{
	*a2 = *a1;
	return 1;
}

//----- (000B2183) --------------------------------------------------------
int sub_B2183(int a1, int a2, int *a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	sub_B399A(*a3, a1 + 108);
	// FIXME: types
	// v3 = sub_B337C(a2 + a1 + 28, a1 + 108, (int)a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B21A2) --------------------------------------------------------
int sub_B21A2(int a1, int a2, int *a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	sub_B399A(*a3, a1 + 108);
	// FIXME: types
	// v3 = sub_B37B0(a2 + a1 + 28, a1 + 108, (int)a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B21C1) --------------------------------------------------------
char sub_B21C1(int a1, int a2, int *a3, int16_t bx0, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int16_t v19; // dx
	int v21; // eax

	sub_B399A(*a3, a1 + 108);
	v21 = sub_B3542(a2 + a1 + 28, a1 + 108);
	v19 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v19) |= *((x_BYTE *)&x_DWORD_B1860[37] + v21 + 3);
	*(x_WORD *)(a1 + 4) = v19;
	//return sub_B1C58(bx0, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B21DD) --------------------------------------------------------
char sub_B21DD(int a1, int a2, int *esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int16_t v18; // dx
	int v20; // eax

	sub_B399A(*esi0, a1 + 108);
	v20 = sub_B3542(a2 + a1 + 28, a1 + 108);
	v18 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v18) |= *((x_BYTE *)&x_DWORD_B1860[37] + v20 + 3);
	*(x_WORD *)(a1 + 4) = v18;
	return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B2275) --------------------------------------------------------
char sub_B2275(int a1, int a2, int *a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v18; // edi
	int16_t v19; // bx
	int16_t v20; // bx

	v18 = *(uint16_t *)((char *)x_DWORD_B1858 + a2);
	v19 = *(x_WORD *)((char *)x_DWORD_B1858 + v18 + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v19;
	v20 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v18 + 2);
	*(x_WORD *)(a1 + 8) &= v20;
	sub_B399A(*a3, v18 + a1 + 28);
	//return sub_B1C58(v20, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B22AF) --------------------------------------------------------
char sub_B22AF(x_WORD *a1, int a2, x_DWORD *a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v18; // ST08_4
	int v19; // ST04_4
	int v20; // ST00_4
	int v21; // eax
	x_DWORD *v22; // ebx

	//fix it
	v21 = 0;
	//fix it

	v18 = *(x_DWORD *)((char *)a1 + a2 + 28);
	v19 = *(x_DWORD *)((char *)a1 + a2 + 32);
	v20 = *(x_DWORD *)((char *)a1 + a2 + 34);
	// FIXME: types
	// sub_B3C6B((unsigned int)a1 + a2 + 28, *a1 & 0xC00);
	sub_B392B((int*)a1 + a2 + 28);
	*a3 = v21;
	v22 = (x_DWORD *)((char *)a1 + a2 + 28);
	*(x_DWORD *)((char *)v22 + 6) = v20;
	v22[1] = v19;
	*v22 = v18;
	//return sub_B1C58((int16_t)v22, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B22EB) --------------------------------------------------------
char sub_B22EB(int a1, int a2, x_DWORD *esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int v18; // eax

	//fix it
	v18 = 0;
	//fix it

	sub_B3C6B(a2 + a1 + 28, *(x_WORD *)a1 & 0xC00);
	sub_B392B((int*)a2 + a1 + 28);
	*esi0 = v18;
	return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B230F) --------------------------------------------------------
int sub_B230F(int a1, int a2, int64_t *a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	sub_B39E0(*a3, a1 + 108, (x_BYTE *)a1);
	// FIXME: types
	// v3 = sub_B337C(a2 + a1 + 28, a1 + 108, (int)a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B2332) --------------------------------------------------------
int sub_B2332(int a1, int a2, int64_t *a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	sub_B39E0(*a3, a1 + 108, (x_BYTE *)a1);
	// FIXME: types
	// v3 = sub_B37B0(a2 + a1 + 28, a1 + 108, (int)a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B2355) --------------------------------------------------------
char sub_B2355(int a1, int a2, int64_t *a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int16_t v18; // dx
	int v20; // eax

	sub_B39E0(*a3, a1 + 108, (x_BYTE *)a1);
	v20 = sub_B3542(a2 + a1 + 28, a1 + 108);
	v18 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v18) |= *((x_BYTE *)&x_DWORD_B1860[37] + v20 + 3);
	*(x_WORD *)(a1 + 4) = v18;
	//return sub_B1C58(a1 + 108, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B2375) --------------------------------------------------------
char sub_B2375(int a1, int a2, int64_t *esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int16_t v18; // dx
	int v20; // eax

	sub_B39E0(*esi0, a1 + 108, (x_BYTE *)a1);
	v20 = sub_B3542(a2 + a1 + 28, a1 + 108);
	v18 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v18) |= *((x_BYTE *)&x_DWORD_B1860[37] + v20 + 3);
	*(x_WORD *)(a1 + 4) = v18;
	return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B2421) --------------------------------------------------------
char sub_B2421(int a1, int a2, int a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v18; // edi
	int16_t v19; // bx
	int16_t v20; // bx

	v18 = *(uint16_t *)((char *)x_DWORD_B1858 + a2);
	v19 = *(x_WORD *)((char *)x_DWORD_B1858 + v18 + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v19;
	v20 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v18 + 2);
	*(x_WORD *)(a1 + 8) &= v20;
	*(x_DWORD *)(v18 + a1 + 28) = *(x_DWORD *)a3;
	*(x_DWORD *)(v18 + a1 + 32) = *(x_DWORD *)(a3 + 4);
	*(x_WORD *)(v18 + a1 + 36) = *(x_WORD *)(a3 + 8);
	//return sub_B1C58(v20, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B2468) --------------------------------------------------------
char sub_B2468(int a1, int a2, int64_t *a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v18; // edi
	int16_t v19; // bx
	int v20; // ebx

	v18 = *(uint16_t *)((char *)x_DWORD_B1858 + a2);
	v19 = *(x_WORD *)((char *)x_DWORD_B1858 + v18 + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v19;
	*(x_WORD *)(a1 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + v18 + 2);
	v20 = v18 + a1 + 28;
	sub_B39E0(*a3, v20, (x_BYTE *)a1);
	//return sub_B1C58(v20, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B24A6) --------------------------------------------------------
char sub_B24A6(x_BYTE *a1, int a2, int *a3, int16_t bx0, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v19; // edx

	//fix it
	v19 = 0;
	//fix it

	*a3 = sub_B3ADF((int64_t *)&a1[a2 + 28], a1);
	a3[1] = v19;
	//return sub_B1C58(bx0, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B24BB) --------------------------------------------------------
char sub_B24BB(int a1, int a2, int esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	*(x_DWORD *)esi0 = *(x_DWORD *)(a2 + a1 + 28);
	*(x_DWORD *)(esi0 + 4) = *(x_DWORD *)(a2 + a1 + 32);
	*(x_WORD *)(esi0 + 8) = *(x_WORD *)(a2 + a1 + 36);
	return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B24D9) --------------------------------------------------------
char sub_B24D9(int a1, int a2, int *esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int v18; // edx

	//fix it
	v18 = 0;
	//fix it

	*esi0 = sub_B3ADF((int64_t *)(a2 + a1 + 28), (x_BYTE *)a1);
	esi0[1] = v18;
	return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B24EE) --------------------------------------------------------
char sub_B24EE(x_DWORD *a1, x_DWORD *a2, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	x_DWORD *v17; // esi
	unsigned int v18; // ebx
	signed int v19; // ecx
	x_DWORD *v20; // esi

	qmemcpy(a1, (void*)a2, 0x1Cu);
	v17 = a2 + 7;
	v18 = 10 * ((a1[1] & 0x3800u) >> 11);
	v19 = 8;
	do
	{
		*(x_DWORD *)((char *)a1 + v18 + 28) = *v17;
		v20 = v17 + 1;
		*(x_DWORD *)((char *)a1 + v18 + 32) = *v20;
		++v20;
		*(x_WORD *)((char *)a1 + v18 + 36) = *(x_WORD *)v20;
		v17 = (x_DWORD *)((char *)v20 + 2);
		v18 = *(uint16_t *)((char *)&off_B1854 + v18 + 2);
		--v19;
	} while (v19);
	//return sub_B1C58(v18, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
	return 1;
}

//----- (000B2560) --------------------------------------------------------
char sub_B2560(int a1, x_WORD *a2, int16_t bx0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	*a2 = *(x_WORD *)(a1 + 4);
	//return sub_B1C58(bx0, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
	return 1;
}

//----- (000B256E) --------------------------------------------------------
int sub_B256E(int a1, int a2, int16_t *a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	sub_B399A(*a3, a1 + 108);
	// FIXME: types
	// v3 = sub_B337C(a2 + a1 + 28, a1 + 108, (int)a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B258F) --------------------------------------------------------
int sub_B258F(int a1, int a2, int16_t *a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	sub_B399A(*a3, a1 + 108);
	// FIXME: types
	// v3 = sub_B37B0(a2 + a1 + 28, a1 + 108, (int)a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B25B0) --------------------------------------------------------
char sub_B25B0(int a1, int a2, int16_t *a3, int16_t bx0, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int16_t v19; // dx
	int v21; // eax

	sub_B399A(*a3, a1 + 108);
	v21 = sub_B3542(a2 + a1 + 28, a1 + 108);
	v19 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v19) |= *((x_BYTE *)&x_DWORD_B1860[37] + v21 + 3);
	*(x_WORD *)(a1 + 4) = v19;
	//return sub_B1C58(bx0, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B25CE) --------------------------------------------------------
char sub_B25CE(int a1, int a2, int16_t *esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int16_t v18; // dx
	int v20; // eax

	sub_B399A(*esi0, a1 + 108);
	v20 = sub_B3542(a2 + a1 + 28, a1 + 108);
	v18 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v18) |= *((x_BYTE *)&x_DWORD_B1860[37] + v20 + 3);
	*(x_WORD *)(a1 + 4) = v18;
	return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B2670) --------------------------------------------------------
char sub_B2670(int a1, int a2, int16_t *a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v18; // edi
	int16_t v19; // bx
	int16_t v20; // bx

	v18 = *(uint16_t *)((char *)x_DWORD_B1858 + a2);
	v19 = *(x_WORD *)((char *)x_DWORD_B1858 + v18 + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v19;
	v20 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v18 + 2);
	*(x_WORD *)(a1 + 8) &= v20;
	sub_B399A(*a3, v18 + a1 + 28);
	//return sub_B1C58(v20, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B26AC) --------------------------------------------------------
char sub_B26AC(x_WORD *a1, int a2, x_WORD *a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v18; // eax
	x_DWORD *v19; // ebx
	int v21; // [esp-Ch] [ebp-Ch]
	int v22; // [esp-8h] [ebp-8h]
	int v23; // [esp-4h] [ebp-4h]

	//fix it
	v18 = 0;
	//fix it

	v23 = *(x_DWORD *)((char *)a1 + a2 + 28);
	v22 = *(x_DWORD *)((char *)a1 + a2 + 32);
	v21 = *(x_DWORD *)((char *)a1 + a2 + 34);
	// FIXME: types
	// sub_B3C6B((unsigned int)a1 + a2 + 28, *a1 & 0xC00);
	sub_B392B((int*)a1 + a2 + 28);
	if ((int16_t)v18 != v18)
		LOWORD(v18) = -32768;
	*a3 = v18;
	v19 = (x_DWORD *)((char *)a1 + a2 + 28);
	*(x_DWORD *)((char *)v19 + 6) = v21;
	v19[1] = v22;
	*v19 = v23;
	//return sub_B1C58((int16_t)v19, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B26F4) --------------------------------------------------------
char sub_B26F4(int a1, int a2, x_WORD *esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int v18; // eax

	//fix it
	v18 = 0;
	//fix it

	sub_B3C6B(a2 + a1 + 28, *(x_WORD *)a1 & 0xC00);
	sub_B392B((int*)a2 + a1 + 28);
	if ((int16_t)v18 != v18)
		LOWORD(v18) = -32768;
	*esi0 = v18;
	return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B2729) --------------------------------------------------------
char sub_B2729(int a1, int a2, unsigned int *a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v18; // edi
	int16_t v19; // bx
	int16_t v20; // bx

	v18 = *(uint16_t *)((char *)x_DWORD_B1858 + a2);
	v19 = *(x_WORD *)((char *)x_DWORD_B1858 + v18 + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v19;
	v20 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v18 + 2);
	*(x_WORD *)(a1 + 8) &= v20;
	sub_B39AB(*a3, v18 + a1 + 28);
	//return sub_B1C58(v20, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B2768) --------------------------------------------------------
char sub_B2768(int a1, int a2, int *esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	sub_B3C6B(a2 + a1 + 28, *(x_WORD *)a1 & 0xC00);
	*esi0 = sub_B3930((int *)(a2 + a1 + 28));
	return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B2791) --------------------------------------------------------
/*void sub_B2791()
{
	JUMPOUT((int*)&loc_B27B9);
}*/

//----- (000B27BE) --------------------------------------------------------
int sub_B27BE(int a1, int a2, int a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	v3 = sub_B337C(a2 + a1 + 28, a3 + a1 + 28, a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B27D3) --------------------------------------------------------
int sub_B27D3(int a1, int a2, int a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	v3 = sub_B37B0(a2 + a1 + 28, a3 + a1 + 28, a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B27E8) --------------------------------------------------------
char sub_B27E8(int a1, int a2, int a3, int16_t bx0, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int16_t v19; // dx
	int v21; // eax

	v21 = sub_B3542(a2 + a1 + 28, a3 + a1 + 28);
	v19 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v19) |= *((x_BYTE *)&x_DWORD_B1860[37] + v21 + 3);
	*(x_WORD *)(a1 + 4) = v19;
	//return sub_B1C58(bx0, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B27FA) --------------------------------------------------------
char sub_B27FA(int a1, int a2, int esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int16_t v18; // dx
	int v20; // eax

	v20 = sub_B3542(a2 + a1 + 28, esi0 + a1 + 28);
	v18 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v18) |= *((x_BYTE *)&x_DWORD_B1860[37] + v20 + 3);
	*(x_WORD *)(a1 + 4) = v18;
	return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B280C) --------------------------------------------------------
/*int sub_B280C(int a1, int a2, int a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v3 = 0;
	v4 = 0;
	//fix it

	sub_B336E(a2 + a1 + 28, a3 + a1 + 28);
	return (*(int( **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}*/

//----- (000B2821) --------------------------------------------------------
/*int sub_B2821(int a1, int a2, int a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v3 = 0;
	v4 = 0;
	//fix it

	sub_B336E(a3 + a1 + 28, a2 + a1 + 28);
	return (*(int( **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}*/

//----- (000B2836) --------------------------------------------------------
int sub_B2836(int a1, int a2, int a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	v3 = sub_B35DB(a2 + a1 + 28, a3 + a1 + 28, (x_BYTE *)a1, a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B284B) --------------------------------------------------------
int sub_B284B(int a1, int a2, int a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	v3 = sub_B35DB(a3 + a1 + 28, a2 + a1 + 28, (x_BYTE *)a1, a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a2 + a1 + 28);
}

//----- (000B2860) --------------------------------------------------------
char sub_B2860(int a1, int a2, int a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v18; // edi
	int16_t v19; // bx
	int16_t v20; // bx

	v18 = *(uint16_t *)((char *)x_DWORD_B1858 + a2);
	v19 = *(x_WORD *)((char *)x_DWORD_B1858 + v18 + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v19;
	v20 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v18 + 2);
	*(x_WORD *)(a1 + 8) &= v20;
	*(x_DWORD *)(v18 + a1 + 28) = *(x_DWORD *)(a3 + a1 + 28);
	*(x_DWORD *)(v18 + a1 + 32) = *(x_DWORD *)(a3 + a1 + 32);
	*(x_WORD *)(v18 + a1 + 36) = *(x_WORD *)(a3 + a1 + 36);
	//return sub_B1C58(v20, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B28A8) --------------------------------------------------------
char sub_B28A8(int a1, int a2, int a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v18; // ebx
	int v19; // esi
	int16_t v20; // ax

	v18 = a2 + a1 + 28;
	v19 = a3 + a1 + 28;
	*(x_DWORD *)v19 = x_InterlockedExchange((volatile long *)v18, *(x_DWORD *)v19);
	*(x_DWORD *)(v19 + 4) = x_InterlockedExchange((volatile long *)(a2 + a1 + 32), *(x_DWORD *)(v19 + 4));
	v20 = *(x_WORD *)(a2 + a1 + 36);
	*(x_WORD *)(v18 + 8) = *(x_WORD *)(v19 + 8);
	*(x_WORD *)(v19 + 8) = v20;
	//return sub_B1C58(v18, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B2912) --------------------------------------------------------
char sub_B2912(int a1, int a2, int16_t bx0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int16_t v18; // dx
	int v20; // eax

	*(x_DWORD *)(a1 + 108) = x_DWORD_B184C[0];
	*(x_DWORD *)(a1 + 112) = x_DWORD_B184C[1];
	// FIXME: function pointer arithmetic
	//*(x_WORD *)(a1 + 116) = (x_WORD)off_B1854;
	v20 = sub_B3542(a2 + a1 + 28, a1 + 108);
	v18 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v18) |= *((x_BYTE *)&x_DWORD_B1860[37] + v20 + 3);
	*(x_WORD *)(a1 + 4) = v18;
	//return sub_B1C58(bx0, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
	return 1;
}

//----- (000B2951) --------------------------------------------------------
char sub_B2951(int a1, int a2, int a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int v18; // edi
	int16_t v19; // bx
	int16_t v20; // bx
	int v21; // esi
	char result; // al
	int v23; // edi
	int16_t v24; // bx
	int16_t v25; // bx
	int v26; // esi
	int v27; // edi
	int16_t v28; // bx
	int16_t v29; // bx
	int v30; // esi
	int v31; // edi
	int16_t v32; // bx
	int16_t v33; // bx
	int v34; // esi
	int v35; // edi
	int16_t v36; // bx
	int16_t v37; // bx
	int v38; // esi
	int v39; // edi
	int16_t v40; // bx
	int16_t v41; // bx
	int v42; // esi
	int v43; // edi
	int16_t v44; // bx
	int v45; // esi
	int16_t v46; // bx

	switch (a1)
	{
	case 0:
		v18 = *(uint16_t *)((char *)x_DWORD_B1858 + a3);
		v19 = *(x_WORD *)((char *)x_DWORD_B1858 + v18 + 2);
		*(x_WORD *)(a2 + 4) &= 0xC7FFu;
		*(x_WORD *)(a2 + 4) |= v19;
		v20 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v18 + 2);
		*(x_WORD *)(a2 + 8) &= v20;
		v21 = v18 + a2 + 28;
		*(x_DWORD *)v21 = 0;
		*(x_DWORD *)(v21 + 4) = 2147483648;
		*(x_WORD *)(v21 + 8) = 0x3FFF;
		//result = sub_B1C58(v20, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
		break;
	case 1:
		v23 = *(uint16_t *)((char *)x_DWORD_B1858 + a3);
		v24 = *(x_WORD *)((char *)x_DWORD_B1858 + v23 + 2);
		*(x_WORD *)(a2 + 4) &= 0xC7FFu;
		*(x_WORD *)(a2 + 4) |= v24;
		v25 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v23 + 2);
		*(x_WORD *)(a2 + 8) &= v25;
		v26 = v23 + a2 + 28;
		*(x_DWORD *)v26 = -853832962;
		*(x_DWORD *)(v26 + 4) = -728074165;
		*(x_WORD *)(v26 + 8) = 0x4000;
		//result = sub_B1C58(v25, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
		break;
	case 2:
		v27 = *(uint16_t *)((char *)x_DWORD_B1858 + a3);
		v28 = *(x_WORD *)((char *)x_DWORD_B1858 + v27 + 2);
		*(x_WORD *)(a2 + 4) &= 0xC7FFu;
		*(x_WORD *)(a2 + 4) |= v28;
		v29 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v27 + 2);
		*(x_WORD *)(a2 + 8) &= v29;
		v30 = v27 + a2 + 28;
		*(x_DWORD *)v30 = 1545072828;
		*(x_DWORD *)(v30 + 4) = -1196803287;
		*(x_WORD *)(v30 + 8) = 0x3FFF;
		//result = sub_B1C58(v29, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
		break;
	case 3:
		v31 = *(uint16_t *)((char *)x_DWORD_B1858 + a3);
		v32 = *(x_WORD *)((char *)x_DWORD_B1858 + v31 + 2);
		*(x_WORD *)(a2 + 4) &= 0xC7FFu;
		*(x_WORD *)(a2 + 4) |= v32;
		v33 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v31 + 2);
		*(x_WORD *)(a2 + 8) &= v33;
		v34 = v31 + a2 + 28;
		*(x_DWORD *)v34 = 560513589;
		*(x_DWORD *)(v34 + 4) = -922690910;
		*(x_WORD *)(v34 + 8) = 0x4000;
		//result = sub_B1C58(v33, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
		break;
	case 4:
		v35 = *(uint16_t *)((char *)x_DWORD_B1858 + a3);
		v36 = *(x_WORD *)((char *)x_DWORD_B1858 + v35 + 2);
		*(x_WORD *)(a2 + 4) &= 0xC7FFu;
		*(x_WORD *)(a2 + 4) |= v36;
		v37 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v35 + 2);
		*(x_WORD *)(a2 + 8) &= v37;
		v38 = v35 + a2 + 28;
		*(x_DWORD *)v38 = -70256743;
		*(x_DWORD *)(v38 + 4) = -1709139324;
		*(x_WORD *)(v38 + 8) = 16381;
		//result = sub_B1C58(v37, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
		break;
	case 5:
		v39 = *(uint16_t *)((char *)x_DWORD_B1858 + a3);
		v40 = *(x_WORD *)((char *)x_DWORD_B1858 + v39 + 2);
		*(x_WORD *)(a2 + 4) &= 0xC7FFu;
		*(x_WORD *)(a2 + 4) |= v40;
		v41 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v39 + 2);
		*(x_WORD *)(a2 + 8) &= v41;
		v42 = v39 + a2 + 28;
		*(x_DWORD *)v42 = -774932052;
		*(x_DWORD *)(v42 + 4) = -1317922825;
		*(x_WORD *)(v42 + 8) = 16382;
		//result = sub_B1C58(v41, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
		break;
	case 6:
		v43 = *(uint16_t *)((char *)x_DWORD_B1858 + a3);
		v44 = *(x_WORD *)((char *)x_DWORD_B1858 + v43 + 2);
		*(x_WORD *)(a2 + 4) &= 0xC7FFu;
		*(x_WORD *)(a2 + 4) |= v44;
		*(x_WORD *)(a2 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + v43 + 2);
		v45 = v43 + a2 + 28;
		*(x_DWORD *)v45 = 0;
		*(x_DWORD *)(v45 + 4) = 0;
		*(x_WORD *)(v45 + 8) = 0;
		*(x_WORD *)(a2 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + v43 + 2);
		v46 = *(x_WORD *)((char *)&x_DWORD_B1860[18] + v43);
		*(x_WORD *)(a2 + 8) |= v46;
		//result = sub_B1C58(v46, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
		break;
	}
	result = 1;//fixed
	return result;
}

//----- (000B2B6C) --------------------------------------------------------
char sub_B2B6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int16_t a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int16_t a21)
{
	int v21; // eax
	char result; // al
	int16_t v23; // bx
	int v24; // eax
	int v25; // edi
	int16_t v26; // bx
	int16_t v27; // bx
	int v28; // esi

	switch (a3)
	{
	case 0:
		v21 = sub_B4718(a5 + a4 + 28, a1, a3, a2);
		result = (*(int(/*__fastcall*/ **)(int))(a4 + 118))(v21);
		break;
	case 1:
		*(x_WORD *)(a4 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + a5 + 2);
		*(x_WORD *)(a4 + 8) |= *(x_WORD *)((char *)&x_DWORD_B1860[19] + a5 + 2);
		v23 = *(x_WORD *)((char *)x_DWORD_B1858 + *(uint16_t *)((char *)&off_B1854 + a5 + 2) + 2);
		*(x_WORD *)(a4 + 4) &= 0xC7FFu;
		*(x_WORD *)(a4 + 4) |= v23;
		v24 = sub_B41F9(a5 + a4 + 28, (x_BYTE *)a4, a6);
		result = (*(int(/*__fastcall*/ **)(int))(a4 + 118))(v24);
		break;
	case 2:
		sub_B46E2(a5 + a4 + 28);
		v25 = *(uint16_t *)((char *)x_DWORD_B1858 + a5);
		v26 = *(x_WORD *)((char *)x_DWORD_B1858 + v25 + 2);
		*(x_WORD *)(a4 + 4) &= 0xC7FFu;
		*(x_WORD *)(a4 + 4) |= v26;
		v27 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + v25 + 2);
		*(x_WORD *)(a4 + 8) &= v27;
		v28 = v25 + a4 + 28;
		*(x_DWORD *)v28 = 0;
		*(x_DWORD *)(v28 + 4) = 2147483648;
		*(x_WORD *)(v28 + 8) = 0x3FFF;
		//result = sub_B1C58(v27, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
		break;
	}
	return result;
}


//----- (000B2E71) --------------------------------------------------------
int sub_B2E71(int a1, int a2, int a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	v3 = sub_B337C(a3 + a1 + 28, a2 + a1 + 28, a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a3 + a1 + 28);
}

//----- (000B2E86) --------------------------------------------------------
int sub_B2E86(int a1, int a2, int a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	v3 = sub_B37B0(a3 + a1 + 28, a2 + a1 + 28, a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a3 + a1 + 28);
}

//----- (000B2EC5) --------------------------------------------------------
int sub_B2EC5(int a1, int a2, int a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	v3 = sub_B35DB(a2 + a1 + 28, a3 + a1 + 28, (x_BYTE *)a1, a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a3 + a1 + 28);
}

//----- (000B2EDA) --------------------------------------------------------
int sub_B2EDA(int a1, int a2, int a3)
{
	int v3; // eax
	int v4; // edx

	//fix it
	v4 = 0;
	//fix it

	v3 = sub_B35DB(a3 + a1 + 28, a2 + a1 + 28, (x_BYTE *)a1, a3);
	return (*(int(/*__fastcall*/ **)(int, int, int))(a1 + 118))(v3, v4, a3 + a1 + 28);
}

//----- (000B2EEF) --------------------------------------------------------
char sub_B2EEF(int a1, int a2, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int16_t v17; // bx

	*(x_WORD *)(a1 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + a2 + 2);
	v17 = *(x_WORD *)((char *)&x_DWORD_B1860[19] + a2 + 2);
	*(x_WORD *)(a1 + 8) |= v17;
	//return sub_B1C58(v17, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
	return 1;
}

//----- (000B2F0E) --------------------------------------------------------
char sub_B2F0E(int a1, int a2, int a3, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int16_t v18; // bx

	*(x_DWORD *)(a3 + a1 + 28) = *(x_DWORD *)(a2 + a1 + 28);
	*(x_DWORD *)(a3 + a1 + 32) = *(x_DWORD *)(a2 + a1 + 32);
	*(x_WORD *)(a3 + a1 + 36) = *(x_WORD *)(a2 + a1 + 36);
	v18 = *(x_WORD *)((char *)&x_DWORD_B1860[17] + a3 + 2);
	*(x_WORD *)(a1 + 8) &= v18;
	//return sub_B1C58(v18, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B2F3A) --------------------------------------------------------
char sub_B2F3A(int a1, int a2, int a3, int16_t bx0, int a4, int16_t a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int16_t a18)
{
	int16_t v19; // dx
	int v21; // eax

	v21 = sub_B3542(a2 + a1 + 28, a3 + a1 + 28);
	v19 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v19) |= *((x_BYTE *)&x_DWORD_B1860[37] + v21 + 3);
	*(x_WORD *)(a1 + 4) = v19;
	//return sub_B1C58(bx0, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	return 1;
}

//----- (000B2F4C) --------------------------------------------------------
char sub_B2F4C(int a1, int a2, int esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	int16_t v18; // dx
	int v20; // eax

	v20 = sub_B3542(a2 + a1 + 28, esi0 + a1 + 28);
	v18 = *(x_WORD *)(a1 + 4) & 0xB8FF;
	HIBYTE(v18) |= *((x_BYTE *)&x_DWORD_B1860[37] + v20 + 3);
	*(x_WORD *)(a1 + 4) = v18;
	return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B2F5E) --------------------------------------------------------
char sub_B2F5E(int a1, int a2, int esi0, int a3, int16_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int16_t a17)
{
	*(x_DWORD *)(esi0 + a1 + 28) = *(x_DWORD *)(a2 + a1 + 28);
	*(x_DWORD *)(esi0 + a1 + 32) = *(x_DWORD *)(a2 + a1 + 32);
	*(x_WORD *)(esi0 + a1 + 36) = *(x_WORD *)(a2 + a1 + 36);
	*(x_WORD *)(a1 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + esi0 + 2);
	return sub_B1E11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

//----- (000B2F8A) --------------------------------------------------------
int sub_B2F8A(int a1, int a2, int a3)
{
	int v3; // eax
	int16_t v4; // bx

	v3 = sub_B337C(a3 + a1 + 28, a2 + a1 + 28, a3);
	*(x_WORD *)(a1 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + a2 + 2);
	*(x_WORD *)(a1 + 8) |= *(x_WORD *)((char *)&x_DWORD_B1860[19] + a2 + 2);
	v4 = *(x_WORD *)((char *)x_DWORD_B1858 + *(uint16_t *)((char *)&off_B1854 + a2 + 2) + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v4;
	return (*(int(/*__fastcall*/ **)(int))(a1 + 118))(v3);
}

//----- (000B2FD5) --------------------------------------------------------
int sub_B2FD5(int a1, int a2, int a3)//293fd5
{
	int v3; // eax
	int16_t v4; // bx

	v3 = sub_B37B0(a3 + a1 + 28, a2 + a1 + 28, a3);
	*(x_WORD *)(a1 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + a2 + 2);
	*(x_WORD *)(a1 + 8) |= *(x_WORD *)((char *)&x_DWORD_B1860[19] + a2 + 2);
	v4 = *(x_WORD *)((char *)x_DWORD_B1858 + *(uint16_t *)((char *)&off_B1854 + a2 + 2) + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v4;
	return (*(int(/*__fastcall*/ **)(int))(a1 + 118))(v3);
}

//----- (000B3020) --------------------------------------------------------
/*void sub_B3020(int a1, int a2, int a3)
{
	JUMPOUT(__CS__, (int*) *(&off_B3028 + a3));
}*/

//----- (000B30A9) --------------------------------------------------------
/*int sub_B30A9(int a1, int a2, int a3)//2940a9
{
	int16_t v3; // bx

	sub_B336E(a2 + a1 + 28, a3 + a1 + 28);
	*(x_WORD *)(a1 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + a2 + 2);
	*(x_WORD *)(a1 + 8) |= *(x_WORD *)((char *)&x_DWORD_B1860[19] + a2 + 2);
	v3 = *(x_WORD *)((char *)x_DWORD_B1858 + *(uint16_t *)((char *)&off_B1854 + a2 + 2) + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v3;
	return (*(int(**)(void))(a1 + 118))();
}*/

//----- (000B30F4) --------------------------------------------------------
/*int sub_B30F4(int a1, int a2, int a3)//2940f4
{
	int16_t v3; // bx

	sub_B336E(a3 + a1 + 28, a2 + a1 + 28);
	*(x_WORD *)(a1 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + a2 + 2);
	*(x_WORD *)(a1 + 8) |= *(x_WORD *)((char *)&x_DWORD_B1860[19] + a2 + 2);
	v3 = *(x_WORD *)((char *)x_DWORD_B1858 + *(uint16_t *)((char *)&off_B1854 + a2 + 2) + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v3;
	return (*(int(**)(void))(a1 + 118))();
}*/

//----- (000B313F) --------------------------------------------------------
int sub_B313F(int a1, int a2, int a3)//29413f
{
	int v3; // eax
	int16_t v4; // bx

	v3 = sub_B35DB(a2 + a1 + 28, a3 + a1 + 28, (x_BYTE *)a1, a3);
	*(x_WORD *)(a1 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + a2 + 2);
	*(x_WORD *)(a1 + 8) |= *(x_WORD *)((char *)&x_DWORD_B1860[19] + a2 + 2);
	v4 = *(x_WORD *)((char *)x_DWORD_B1858 + *(uint16_t *)((char *)&off_B1854 + a2 + 2) + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v4;
	return (*(int(/*__fastcall*/ **)(int))(a1 + 118))(v3);
}

//----- (000B318A) --------------------------------------------------------
int sub_B318A(int a1, int a2, int a3)//29418a
{
	int v3; // eax
	int16_t v4; // bx

	v3 = sub_B35DB(a3 + a1 + 28, a2 + a1 + 28, (x_BYTE *)a1, a3);
	*(x_WORD *)(a1 + 8) &= *(x_WORD *)((char *)&x_DWORD_B1860[17] + a2 + 2);
	*(x_WORD *)(a1 + 8) |= *(x_WORD *)((char *)&x_DWORD_B1860[19] + a2 + 2);
	v4 = *(x_WORD *)((char *)x_DWORD_B1858 + *(uint16_t *)((char *)&off_B1854 + a2 + 2) + 2);
	*(x_WORD *)(a1 + 4) &= 0xC7FFu;
	*(x_WORD *)(a1 + 4) |= v4;
	return (*(int(/*__fastcall*/ **)(int))(a1 + 118))(v3);
}

//----- (000B31D5) --------------------------------------------------------
/*void sub_B31D5()//2941d5
{
	JUMPOUT((int*)&loc_B335E);
}*/

//----- (000B336E) --------------------------------------------------------
/*void sub_B336E(int a1, int a2)//29436e
{
	int16_t v2; // si

	v2 = *(x_WORD *)(a2 + 8) ^ 0x8000;
	JUMPOUT((int*)&loc_B3383);
}*/

//----- (000B337C) --------------------------------------------------------
int sub_B337C(int a1, int a2, int a3)//29437c
{
	int v3; // ebx
	int v4; // esi
	int result; // eax
	int v6; // edx

	//fix it
	v6 = 0;
	//fix it

	LOWORD(a3) = *(x_WORD *)(a2 + 8);
	v3 = *(x_DWORD *)a2;
	v4 = a3 << 16;
	LOWORD(v4) = *(x_WORD *)(a1 + 8);
	result = sub_B33D6(*(_QWORD *)a1, *(x_DWORD *)(a2 + 4), *(x_DWORD *)a2, v4);
	*(x_DWORD *)v3 = result;
	*(x_DWORD *)(v3 + 4) = v6;
	*(x_WORD *)(v3 + 8) = v4;
	return result;
}

//----- (000B33A6) --------------------------------------------------------
int /*__userpurge*/ sub_B33A6(int a1, int a2, int a3, int a4, int16_t a5)//2943a6
{
	int v5; // esi
	int result; // eax
	int v7; // edx

	//fix it
	v7 = 0;
	//fix it

	LOWORD(a2) = a5;
	v5 = a2 << 16;
	LOWORD(v5) = *(x_WORD *)(a1 + 8);
	result = sub_B33D6(*(_QWORD *)a1, a4, a3, v5);
	*(x_DWORD *)a3 = result;
	*(x_DWORD *)(a3 + 4) = v7;
	*(x_WORD *)(a3 + 8) = v5;
	return result;
}

//----- (000B33D6) --------------------------------------------------------
int sub_B33D6(uint64_t a1, int a2, int32_t a3, int a4)//2943d6
{
	uint8_t v4; // cf
	int16_t v5; // si
	int v6; // ecx
	int v7; // esi
	int v8; // et0
	int v9; // edi
	unsigned int v10; // ecx
	int16_t v11; // bp
	int v12; // edi
	int v13; // edi
	bool v14; // cf
	int v15; // ecx
	int v16; // et1
	int v17; // et2
	int v18; // edi
	int v19; // ebx
	char v20; // ch
	int v21; // ebx
	int v22; // edi
	uint8_t v23; // cf
	uint8_t v24; // tt
	int v25; // ett
	int v26; // ett
	int16_t v27; // bp
	uint8_t v28; // tt
	uint8_t v29; // tt
	uint8_t v30; // cf
	int v31; // eax
	uint8_t v32; // tt
	int v33; // ett
	uint8_t v34; // cf
	int v35; // ett
	int v37; // [esp-Ch] [ebp-Ch]

	if (!a1)
	{
		v4 = __CFADD__((x_WORD)a4, (x_WORD)a4);
		v5 = 2 * a4;
		if (!v5)
		{
			LODWORD(a1) = a3;
			return a1;
		}
		LOWORD(a4) = __RCR__(v5, v4);
	}
	if (a2 || a3 || a4 & 0x7FFF0000)
	{
		v8 = a2;
		v6 = a4;
		v7 = v8;
		v9 = __ROL4__(v6, 16) >> 16;
		v10 = (v6 >> 16) & 0x80007FFF;
		v11 = v10;
		v12 = __ROL4__(v9 & 0x80007FFF, 16);
		v10 = __ROL4__(v10, 16);
		LOWORD(v10) = v12 + v10;
		v13 = __ROL4__(v12, 16);
		v15 = __ROL4__(v10, 16);
		v14 = (uint16_t)v15 < (uint16_t)v13;
		LOWORD(v15) = v15 - v13;
		if (!(x_WORD)v15)
			goto LABEL_42;
		if (v14)
		{
			v11 = v13;
			LOWORD(v15) = -(int16_t)v15;
			v16 = a1;
			LODWORD(a1) = a3;
			a3 = v16;
			v17 = HIDWORD(a1);
			HIDWORD(a1) = v7;
			v7 = v17;
		}
		if ((uint16_t)v15 > 0x40u)
		{
			LODWORD(a1) = a3;
		}
		else
		{
		LABEL_42:
			BYTE1(v15) = 0;
			if (v15 < 0)
			{
				BYTE1(v15) = -1;
				a3 = -a3;
				v7 = -v7 - (a3 != 0);
			}
			v18 = 0;
			if ((x_BYTE)v15)
			{
				v37 = a3;
				v19 = 0;
				if ((uint8_t)v15 >= 0x20u)
				{
					LOBYTE(v19) = (x_DWORD)a1 != 0;
					v18 = v19;
					if ((x_BYTE)v15 == 64)
					{
						v18 = HIDWORD(a1) | v19;
						HIDWORD(a1) = 0;
					}
					a1 = HIDWORD(a1);
				}
				v18 |= __PAIR__((uint32_t)a1, (uint32_t)0) >> v15;
				LODWORD(a1) = a1 >> v15;
				HIDWORD(a1) = (uint64_t)HIDWORD(a1) >> v15;
				a3 = v37;
			}
			v4 = __CFADD__(__PAIR__(v7, a3), a1);
			a1 += __PAIR__(v7, a3);
			v20 = v4 + BYTE1(v15);
			if (v20 < 0)
			{
				if ((x_BYTE)v15 == 64)
					a1 += (v18 & 0x7FFFFFFF) != 0;
				LODWORD(a1) = -(signed int)a1;
				HIDWORD(a1) = 0 - HIDWORD(a1) - ((x_DWORD)a1 != 0);
				v20 = 0;
			}
			v21 = a1;
			LOBYTE(v21) = v20 | a1;
			if (HIDWORD(a1) | v21 && v11)
			{
				if (v20)
				{
				LABEL_31:
					v27 = v11 + 1;
					if (v27 == 0x7FFF)
						goto LABEL_43;
					v28 = __CFRCR__(HIDWORD(a1), 1);
					HIDWORD(a1) = __RCR__(HIDWORD(a1), 1);
					v4 = v28;
					v29 = __CFRCR__(a1, v28);
					LODWORD(a1) = __RCR__(a1, v4);
					if (v29)
					{
						v30 = __CFADD__(v18, v18);
						if (!(2 * v18))
						{
							v31 = __ROR4__(a1, 1);
							v32 = __CFSHL__(v31, 1);
							LODWORD(a1) = __ROL4__(v31, 1);
							v30 = v32;
						}
						v33 = v30;
						v4 = __CFADD__(v30, (x_DWORD)a1);
						LODWORD(a1) = v33 + a1;
						v35 = v4;
						v34 = __CFADD__(v4, HIDWORD(a1));
						HIDWORD(a1) += v35;
						if (v34)
						{
							LODWORD(a1) = __RCR__(a1, __CFRCR__(HIDWORD(a1), v34));
							if (v27 == 0x7FFE)
								LABEL_43:
							LODWORD(a1) = 0;
						}
					}
				}
				else
				{
					v22 = __ROL4__(v18, 1);
					v24 = v22 & 1;
					v18 = __ROR4__(v22, 1);
					v23 = v24;
					while (--v11)
					{
						v25 = v23 + (x_DWORD)a1;
						v4 = __CFADD__(v23, (x_DWORD)a1) | __CFADD__((x_DWORD)a1, v25);
						LODWORD(a1) = a1 + v25;
						v26 = v4 + HIDWORD(a1);
						v23 = __CFADD__(v4, HIDWORD(a1)) | __CFADD__(HIDWORD(a1), v26);
						HIDWORD(a1) += v26;
						if (v23)
							goto LABEL_31;
					}
				}
			}
		}
	}
	return a1;
}

//----- (000B3542) --------------------------------------------------------
int /*__fastcall*/ sub_B3542(int a1, int a2)//294542
{
	int v2; // esi
	bool v3; // cf
	bool v4; // zf
	int v5; // edi
	int v6; // eax
	int result; // eax
	int v8; // edi
	int v9; // eax

	if ((*(x_WORD *)(a1 + 8) | 0x8000) == -1 && *(x_DWORD *)a1 | 2 * *(x_DWORD *)(a1 + 4)
		|| (*(x_WORD *)(a2 + 8) | 0x8000) == -1 && *(x_DWORD *)a2 | 2 * *(x_DWORD *)(a2 + 4))
	{
		return 2;
	}
	v2 = *(x_DWORD *)(a1 + 6);
	if ((v2 ^ *(x_DWORD *)(a2 + 6)) >= 0)
	{
		LOWORD(v2) = *(x_WORD *)(a1 + 8);
		v3 = (uint16_t)v2 < *(x_WORD *)(a2 + 8);
		v4 = (x_WORD)v2 == *(x_WORD *)(a2 + 8);
		if ((x_WORD)v2 == *(x_WORD *)(a2 + 8))
		{
			v3 = *(_QWORD *)a1 < *(_QWORD *)a2;
			v4 = *(_QWORD *)a1 == *(_QWORD *)a2;
		}
		v5 = 0;
		if (v4)
			return v5;
		v6 = __RCR__(a1, v3);
		v2 ^= v6;
		return -2 * __CFADD__(v2, v2) + 1;
	}
	v8 = *(x_DWORD *)(a2 + 4) | *(x_DWORD *)(a1 + 4) | *(x_DWORD *)a2 | *(x_DWORD *)a1;
	LOWORD(a1) = *(x_WORD *)(a1 + 8);
	v9 = a1 << 16;
	LOWORD(v9) = *(x_WORD *)(a2 + 8);
	result = v8 | v9 & 0x7FFF7FFF;
	if (result)
		return -2 * __CFADD__(v2, v2) + 1;
	return result;
}

//----- (000B35DB) --------------------------------------------------------
int sub_B35DB(int a1, int a2, x_BYTE *a3, int a4)//2945db
{
	unsigned int v4; // ebx
	int v5; // esi
	int result; // eax
	int v7; // edx

	//fix it
	v7 = 0;
	//fix it

	LOWORD(a4) = *(x_WORD *)(a2 + 8);
	v4 = *(x_DWORD *)a2;
	v5 = a4 << 16;
	LOWORD(v5) = *(x_WORD *)(a1 + 8);
	result = sub_B3605(*(_QWORD *)a1, *(x_DWORD *)(a2 + 4), *(x_DWORD *)a2, a3, v5);
	*(x_DWORD *)v4 = result;
	*(x_DWORD *)(v4 + 4) = v7;
	*(x_WORD *)(v4 + 8) = v5;
	return result;
}

//----- (000B3605) --------------------------------------------------------
int sub_B3605(uint64_t a1, int a2, unsigned int a3, x_BYTE *a4, int a5)//294605
{
	bool v5; // cf
	int16_t v6; // si
	int v7; // ecx
	signed int v8; // esi
	int v9; // et0
	int v10; // edi
	int v11; // ecx
	int v12; // edi
	int v13; // ecx
	uint16_t v14; // di
	unsigned int v15; // ecx
	unsigned int v16; // edi
	unsigned int v17; // esi
	unsigned int v18; // ebx
	uint64_t v19; // rax
	int v20; // ecx
	int v21; // et2
	uint64_t v22; // rax
	int v23; // ecx
	int v24; // edi
	unsigned int i; // esi
	unsigned int v26; // edi
	int v27; // esi
	unsigned int v28; // eax
	uint64_t v29; // rax
	int v30; // et1
	uint64_t v31; // rax
	int v32; // ecx
	int v33; // edi
	unsigned int j; // esi
	uint16_t v35; // di
	char v36; // cl
	x_BYTE v38[12]; // [esp-20h] [ebp-20h]
	uint64_t v39; // [esp-14h] [ebp-14h]
	uint16_t v40; // [esp-Ch] [ebp-Ch]

	if (a2 || a3 || a5 & 0x7FFF0000)
	{
		if (!a1)
		{
			v5 = __CFADD__((x_WORD)a5, (x_WORD)a5);
			v6 = 2 * a5;
			if (!v6)
				return a1;
			LOWORD(a5) = __RCR__(v6, v5);
		}
		v9 = a2;
		v7 = a5;
		v8 = v9;
		v10 = __ROL4__((__ROL4__(v7, 16) >> 16) & 0x80007FFF, 16);
		v11 = __ROL4__((v7 >> 16) & 0x80007FFF, 16);
		LOWORD(v10) = v11 + v10;
		v12 = __ROL4__(v10, 16);
		v13 = __ROL4__(v11, 16);
		if (!(x_WORD)v12)
		{
			do
			{
				a1 *= 2;
				LOWORD(v12) = v12 - 1;
			} while ((a1 & 0x8000000000000000) == 0);
		}
		if (!(x_WORD)v13)
		{
			do
			{
				v8 = __PAIR__((unsigned int)v8, a3) >> 31;
				a3 *= 2;
				LOWORD(v13) = v13 - 1;
			} while (v8 >= 0);
		}
		v14 = v12 - v13 + 0x3FFF;
		if ((v14 & 0x8000u) != 0 || v14 < 0x7FFFu)
		{
			if ((int16_t)v14 >= -64)
			{
				v40 = v14;
				v39 = __PAIR__(v8, a3);
				v15 = v8;
				v16 = HIDWORD(a1);
				v17 = a1;
				LODWORD(a1) = 0;
				if (v15 <= HIDWORD(a1))
				{
					HIDWORD(a1) -= v15;
					LODWORD(a1) = 1;
				}
				*(x_DWORD *)&v38[8] = a1;
				*(x_DWORD *)&v38[4] = __PAIR__(HIDWORD(a1), v17) / v15;
				LODWORD(a1) = a3;
				v18 = __PAIR__(HIDWORD(a1), v17) / v15;
				v19 = v18 * (uint64_t)(unsigned int)a1;
				v21 = v19;
				LODWORD(v19) = v15;
				v20 = v21;
				v22 = HIDWORD(v19) + v18 * (uint64_t)(unsigned int)v19;
				if (v38[8] & 1)
					v22 += v39;
				v23 = -v20;
				v24 = (__PAIR__(v16, v17) - __PAIR__(HIDWORD(v22), (v23 != 0) + (unsigned int)v22)) >> 32;
				for (i = v17 - ((v23 != 0) + v22); v24; v24 += (uint8_t)v5)
				{
					--*(_QWORD *)&v38[4];
					v5 = __CFADD__(v39, __PAIR__(i, v23));
					i = (v39 + __PAIR__(i, v23)) >> 32;
					v23 += v39;
				}
				v26 = i;
				v27 = v23;
				if (HIDWORD(v39) <= v26)
				{
					v26 -= HIDWORD(v39);
					++*(_QWORD *)&v38[4];
				}
				v28 = __PAIR__(v26, v23) / HIDWORD(v39);
				*(x_DWORD *)v38 = v28;
				if (v28)
				{
					v29 = v28 * (uint64_t)(unsigned int)v39;
					v30 = v29;
					v31 = HIDWORD(v29) + (unsigned int)(__PAIR__(v26, v23) / HIDWORD(v39)) * (uint64_t)HIDWORD(v39);
					v32 = -v30;
					v33 = (__PAIR__(v26, v27) - __PAIR__(HIDWORD(v31), (v30 != 0) + (unsigned int)v31)) >> 32;
					for (j = v27 - ((v30 != 0) + v31); v33; v33 += (uint8_t)v5)
					{
						v5 = (*(_QWORD *)v38)-- < 1u;
						v38[8] -= v5;
						v5 = __CFADD__(v39, __PAIR__(j, v32));
						j = (v39 + __PAIR__(j, v32)) >> 32;
						v32 += v39;
					}
				}
				a1 = *(_QWORD *)v38;
				v35 = v40 - 1;
				if (v38[8] & 1)
				{
					HIDWORD(a1) = __RCR__(*(x_DWORD *)&v38[4], v38[8] & 1);
					LODWORD(a1) = __RCR__(*(x_DWORD *)v38, __CFRCR__(*(x_DWORD *)&v38[4], v38[8] & 1));
					v35 = v40;
				}
				if ((int16_t)v35 <= 0)
				{
					if (v35)
						v36 = -(char)v35;
					else
						v36 = 1;
					LODWORD(a1) = a1 >> v36;
				}
			}
			else
			{
				LODWORD(a1) = 0;
			}
		}
		else
		{
			LODWORD(a1) = 0;
		}
	}
	else if (a1 || (WORD1(a1) = HIWORD(a5), 2 * (x_WORD)a5))
	{
		LOWORD(a1) = -31996;
		//sub_B1E68(a1, 0, a4);
		LODWORD(a1) = 0;
	}
	else
	{
		LOWORD(a1) = -32511;
		//sub_B1E68(a1, 0, a4);
		LODWORD(a1) = 0;
	}
	return a1;
}

//----- (000B37B0) --------------------------------------------------------
int sub_B37B0(int a1, int a2, int a3)//2947b0
{
	unsigned int v3; // ebx
	int v4; // esi
	int result; // eax
	int v6; // edx

	//fix it
	v6 = 0;
	//fix it

	LOWORD(a3) = *(x_WORD *)(a2 + 8);
	v3 = *(x_DWORD *)a2;
	v4 = a3 << 16;
	LOWORD(v4) = *(x_WORD *)(a1 + 8);
	result = sub_B37DA(*(_QWORD *)a1, *(x_DWORD *)(a2 + 4), *(x_DWORD *)a2, v4);
	*(x_DWORD *)v3 = result;
	*(x_DWORD *)(v3 + 4) = v6;
	*(x_WORD *)(v3 + 8) = v4;
	return result;
}

//----- (000B37DA) --------------------------------------------------------
int sub_B37DA(uint64_t a1, unsigned int a2, unsigned int a3, int a4)//2947da
{
	bool v4; // cf
	int16_t v5; // si
	int v6; // ecx
	unsigned int v7; // esi
	unsigned int v8; // et0
	unsigned int v9; // ecx
	uint16_t v10; // cx
	unsigned int v11; // ST08_4
	uint64_t v12; // ST00_8
	uint64_t v13; // rax
	int v14; // esi
	int v15; // et1
	unsigned int v16; // ecx
	uint64_t v17; // rax
	unsigned int v18; // ecx
	unsigned int v19; // edi
	uint64_t v20; // rax
	uint64_t v21; // kr08_8
	int v22; // ebx
	uint16_t v23; // cx
	bool v24; // cf
	int v25; // ett
	uint8_t v26; // cf
	int v27; // ett
	uint8_t v28; // tt
	int16_t v29; // cx
	uint16_t v31; // [esp-Ch] [ebp-Ch]

	if (!a1)
	{
		v4 = __CFADD__((x_WORD)a4, (x_WORD)a4);
		v5 = 2 * a4;
		if (!v5)
			return a1;
		LOWORD(a4) = __RCR__(v5, v4);
	}
	if (a2 || a3 || a4 & 0x7FFF0000)
	{
		v8 = a2;
		v6 = a4;
		v7 = v8;
		v9 = ((__ROL4__(v6, 16) >> 16) & 0x80007FFF) + ((v6 >> 16) & 0x80007FFF);
		v4 = (uint16_t)v9 < 0x3FFEu;
		v10 = v9 - 16382;
		if (!v4 && v10 >= 0x7FFFu)
			goto LABEL_30;
		if ((int16_t)v10 < -64)
		{
			LODWORD(a1) = 0;
			return a1;
		}
		v31 = v10;
		v11 = v7;
		v12 = a1;
		v13 = a3 * (uint64_t)(unsigned int)a1;
		v15 = v13;
		LODWORD(v13) = v7;
		v14 = v15;
		v16 = HIDWORD(v13);
		v17 = (unsigned int)v12 * (uint64_t)(unsigned int)v13;
		v4 = __CFADD__((unsigned int)v17, __PAIR__(HIDWORD(v17), v16));
		v19 = (v17 + v16) >> 32;
		v18 = v17 + v16;
		v20 = HIDWORD(v12) * (uint64_t)a3;
		v21 = v20 + __PAIR__(v19, v18);
		a1 = __PAIR__(
			__CFADD__(v20, __PAIR__(v19, v18)) + (unsigned int)(uint8_t)v4,
			(v20 + __PAIR__(v19, v18)) >> 32)
			+ v11 * (uint64_t)HIDWORD(v12);
		v22 = v21;
		v23 = v31;
		if ((a1 & 0x8000000000000000) == 0)
		{
			v4 = __CFADD__(__PAIR__((uint16_t)a1, (uint16_t)v21), __PAIR__((uint16_t)a1, (uint16_t)v21));
			LODWORD(a1) = __PAIR__((uint16_t)a1, (uint16_t)v21) >> 31;
			v22 = 2 * v21;
			HIDWORD(a1) += (uint8_t)v4 + HIDWORD(a1);
			v23 = v31 - 1;
		}
		v24 = __CFADD__(v22, v22);
		if (__CFADD__(v22, v22))
		{
			if (!(2 * v22))
			{
				v24 = v14 != 0;
				if (!v14)
					v24 = a1 & 1;
			}
			v25 = (uint8_t)v24;
			v4 = __CFADD__((uint8_t)v24, (x_DWORD)a1);
			LODWORD(a1) = v25 + a1;
			v27 = (uint8_t)v4;
			v26 = __CFADD__((uint8_t)v4, HIDWORD(a1));
			HIDWORD(a1) += v27;
			if (v26)
			{
				v28 = __CFRCR__(HIDWORD(a1), v26);
				HIDWORD(a1) = __RCR__(HIDWORD(a1), v26);
				LODWORD(a1) = __RCR__(a1, v28);
				if (++v23 == 0x7FFF)
				{
				LABEL_30:
					LODWORD(a1) = 0;
					return a1;
				}
			}
		}
		if ((int16_t)v23 <= 0)
		{
			if (v23)
				v29 = -v23;
			else
				LOBYTE(v29) = 1;
			LODWORD(a1) = a1 >> v29;
		}
	}
	else
	{
		LODWORD(a1) = 0;
	}
	return a1;
}

//----- (000B392B) --------------------------------------------------------
void sub_B392B(int* a1)//29492b
{
	//JUMPOUT((int*)&loc_B3933);
	sub_B3930(a1,0x1f);
}

//----- (000B3930) --------------------------------------------------------
int /*__fastcall*/ sub_B3930(int *a1,Bit8u bl)//294930
{
	int16_t v1; // cx
	uint8_t v2; // of
	int16_t v3; // cx
	int v4; // ebx
	unsigned int v5; // eax
	uint8_t v6; // cf
	char v7; // ch
	char v8; // cl
	char v9; // ch
	int result; // eax

	v1 = a1[2] & 0x7FFF;
	v2 = __OFSUB__(v1, 16382);
	v3 = v1 - 16382;
	if ((v3 < 0) ^ v2)
		return 0;
	if (v3 > 32 || (char)v3 > 32)
		return 2147483648;
	HIBYTE(v3) = (*((x_BYTE *)a1 + 9) >> 1) | bl;
	v4 = *a1;
	v5 = a1[1];
	HIBYTE(v3) = __RCR__(HIBYTE(v3), __CFADD__(v4, v4));
	if ((x_BYTE)v3 == 32)
	{
		v6 = __CFADD__(HIBYTE(v3), HIBYTE(v3));
		v7 = 2 * HIBYTE(v3);
	}
	else
	{
		v7 = 2 * HIBYTE(v3);
		v6 = __CFADD__(v5 << v3, v5 << v3);
		v5 = (uint64_t)v5 << v3 >> 32;
	}
	v8 = __RCR__(-1, v6);
	v9 = v8 & v7;
	result = __CFADD__(v9, v9) + v5;
	if (__CFADD__(2 * v9, 2 * v9))
		result = -result;
	return result;
}

//----- (000B399A) --------------------------------------------------------
int /*__fastcall*/ sub_B399A(int a1, int a2)//29499a
{
	if (a1 < 0)
		//JUMPOUT((int*)&loc_B39B3);
		sub_B39AB(a1, a2, 0xbfff);
	return sub_B39AB(a1, a2);
}

//----- (000B39AB) --------------------------------------------------------
int /*__fastcall*/ sub_B39AB(unsigned int a1, int a2,Bit32u edx)//2949ab
{
	int v2; // ebx
	Bit32u v3; // ecx
	unsigned int v4; // eax
	int16_t v5; // cx
	unsigned int v6; // edx
	int result; // eax

	v2 = a2;
	if (a1)
	{
		x_BitScanReverse(&v3, a1);//FIX IT!
		v4 = a1 << (31 - v3);
		v5 = (uint8_t)v3 + edx;
		v6 = v4;
	}
	else
	{
		v6 = 0;
		v5 = 0;
	}
	result = 0;
	*(x_DWORD *)v2 = 0;
	*(x_DWORD *)(v2 + 4) = v6;
	*(x_WORD *)(v2 + 8) = v5;
	return result;
}

//----- (000B39E0) --------------------------------------------------------
int sub_B39E0(int64_t a1, int a2, x_BYTE *a3)//2949e0
{
	int v3; // ecx
	int64_t v4; // rax
	int v5; // ecx
	bool v6; // zf
	unsigned int v7; // ST00_4
	unsigned int v8; // edx
	int v9; // et0
	int16_t v10; // cx

	//fix it
	v8 = 0;
	//fix it

	v3 = HIDWORD(a1);
	v4 = a1 << 11;
	v5 = v3 >> 20;
	LOWORD(v5) = v5 & 0x7FF;
	if ((x_WORD)v5)
	{
		if ((x_WORD)v5 == 2047)
		{
			LOWORD(v5) = 0x7FFF;
			v6 = (v4 & 0x7FFFFFFF00000000) == 0;
			if (!(v4 & 0x7FFFFFFF00000000))
				v6 = (x_DWORD)v4 == 0;
			if (!v6)
			{
				v7 = v4;
				LOWORD(v4) = -32511;
				//sub_B1E68(v4, v5, a3);
				v4 = __PAIR__(v8, v7) | 0x4000000000000000;
			}
		}
		else
		{
			LOWORD(v5) = v5 + 15360;
		}
		HIDWORD(v4) |= 0x80000000;
	}
	else if (v4)
	{
		LOWORD(v5) = 15361;
		if (!HIDWORD(v4))
		{
			v9 = v4;
			LODWORD(v4) = 0;
			HIDWORD(v4) = v9;
			LOWORD(v5) = 15329;
		}
		while (v4 >= 0)
		{
			v4 *= 2;
			LOWORD(v5) = v5 - 1;
		}
	}
	else
	{
		v5 = 0;
	}
	*(_QWORD *)a2 = v4;
	v10 = __RCR__(2 * v5, __CFADD__(v5, v5));
	*(x_WORD *)(a2 + 8) = v10;
	return v4;
}

//----- (000B3A60) --------------------------------------------------------
int /*__fastcall*/ sub_B3A60(int a1)//294a60
{
	int v1; // ebx
	signed int v2; // edx
	unsigned int v3; // eax
	unsigned int v4; // ecx
	uint8_t v5; // cf
	int result; // eax
	int16_t v7; // bx
	int16_t v8; // cx
	uint64_t v9; // rt0

	v1 = a1;
	v2 = -256;
	v3 = *(x_DWORD *)(a1 + 4);
	v4 = v3 << 25;
	LOWORD(v4) = *(x_WORD *)(v1 + 8);
	if (__CFSHL__(v3, 25))
	{
		if (!(v3 << 25) && !*(x_DWORD *)v1)
			v2 = -512;
		v5 = __CFADD__(v3, 256);
		v3 += 256;
		if (v5)
		{
			v3 = 2147483648;
			LOWORD(v4) = v4 + 1;
		}
	}
	result = v2 & v3;
	v7 = v4;
	v8 = v4 & 0x7FFF;
	if (v8)
	{
		if (v8 == 0x7FFF)
		{
			result = __RCR__(((unsigned int)(2 * result) >> 8) | 0xFF000000, __CFADD__(v7, v7));
		}
		else
		{
			LOWORD(v4) = v8 - 16256;
			if ((v4 & 0x8000u) == 0)
			{
				if ((int16_t)v4 < 255)
				{
					LODWORD(v9) = 2 * result;
					HIDWORD(v9) = v4;
					result = __RCR__(v9 >> 8, __CFADD__(v7, v7));
				}
				else
				{
					result = __RCR__(-16777216, __CFADD__(v7, v7));
				}
			}
			else
			{
				result = 0;
			}
		}
	}
	return result;
}

//----- (000B3ADF) --------------------------------------------------------
int sub_B3ADF(int64_t *a1, x_BYTE *a2)//294adf
{
	int16_t v2; // cx
	uint64_t v3; // rax
	signed int v4; // esi
	uint8_t v5; // cf
	uint16_t v6; // cx
	int result; // eax
	uint8_t v8; // cl
	int v9; // ST00_4

	v2 = *((x_WORD *)a1 + 4);
	v3 = *a1;
	v4 = -2048;
	if (__CFSHL__(v3, 22))
	{
		if (!((x_DWORD)v3 << 22))
			v4 = -4096;
		v5 = __CFADD__(v3, 2048);
		v3 += 2048;
		if (v5)
		{
			HIDWORD(v3) = 2147483648;
			++v2;
		}
	}
	LODWORD(v3) = v4 & v3;
	v6 = (v2 & 0x7FFF) - 15360;
	if (v6 >= 0x7FFu)
	{
		if (v6 < 0xC400u)
		{
			result = v3 >> 11;
			if (v6 != 17407)
			{
				v9 = result;
				LOWORD(result) = -31736;
				//sub_B1E68(result, v6, a2);
				result = v9;
			}
		}
		else if ((int16_t)v6 < -52)
		{
			result = 0;
		}
		else
		{
			v8 = 12 - v6;
			if (v8 >= 0x20u)
			{
				v8 -= 32;
				v4 = v3;
				v3 = HIDWORD(v3);
			}
			result = ((unsigned int)(__PAIR__((uint32_t)v3, (uint32_t)v4) >> v8)
				+ __PAIR__((uint32_t)(v3 >> (v8 & 0x1F)), (uint32_t)(__PAIR__((uint32_t)v3, (uint32_t)v4) >> v8))) >> 32;
		}
	}
	else if (v6)
	{
		result = v3 >> 11;
	}
	else
	{
		result = v3 >> 12;
	}
	return result;
}

//----- (000B3BA6) --------------------------------------------------------
signed int /*__fastcall*/ sub_B3BA6(signed int result, int a2)//294ba6
{
	signed int v2; // ecx
	signed int v3; // eax

	v2 = result >> 23;
	LOWORD(v2) = (uint8_t)(result >> 23);
	if ((uint8_t)(result >> 23))
	{
		v3 = result << 8;
		if ((x_BYTE)v2 == -1)
		{
			LOWORD(v2) = -1;
			v3 &= 0x7FFFFFFFu;
			if (v3)
				v3 |= 0x40000000u;
		}
		else
		{
			LOWORD(v2) = v2 + 16256;
		}
		LOWORD(v2) = __RCR__(2 * v2, __CFADD__(v2, v2));
		result = v3 | 0x80000000;
	}
	*(x_DWORD *)a2 = 0;
	*(x_DWORD *)(a2 + 4) = result;
	*(x_WORD *)(a2 + 8) = v2;
	return result;
}

//----- (000B3C6B) --------------------------------------------------------
unsigned int /*__fastcall*/ sub_B3C6B(unsigned int result, int16_t a2)//294c6b
{
	unsigned int v2; // edi
	int v3; // ebx
	bool v4; // zf
	int16_t v5; // bx
	uint8_t v6; // of
	int16_t v7; // bx
	int v8; // ecx
	bool v9; // sf
	int v10; // eax
	unsigned int v11; // ecx
	uint8_t v12; // tt
	bool v13; // zf
	uint8_t v14; // cf
	int v15; // et0
	int v16; // esi
	int v17; // eax
	unsigned int v18; // esi
	uint8_t v19; // tt
	bool v20; // zf
	uint8_t v21; // cf
	int v22; // et0

	v2 = result;
	v3 = *(uint16_t *)(result + 8);
	v4 = a2 == 1024;
	if (a2 != 1024)
		v4 = a2 == 2048;
	if (v4 && (v3 & 0x8000) != 0)
		a2 ^= 0xC00u;
	if (a2 == 3072)
		a2 = 1024;
	v5 = v3 & 0x7FFF;
	v6 = __OFSUB__(v5, 16447);
	v7 = v5 - 16447;
	if ((v7 < 0) ^ v6)
	{
		v8 = *(x_DWORD *)result;
		v6 = __OFADD__(32, v7);
		v9 = (int16_t)(v7 + 32) < 0;
		LOWORD(v3) = v7 + 32;
		if (!((uint8_t)v9 ^ v6))
		{
			v10 = x_DWORD_B3BEB[v3];
			v11 = v10 & v8;
			*(x_DWORD *)v2 ^= v11;
			result = v10 + 1;
			if (a2 == 1024)
				return result;
			if (!a2)
			{
				v11 *= 2;
				if (result > v11)
					return result;
				if (result == v11)
				{
					v12 = __CFSHL__(result, 1);
					result = __ROL4__(result, 1);
					if (v12)
						v13 = (result & *(x_DWORD *)(v2 + 4)) == 0;
					else
						v13 = (result & *(x_DWORD *)v2) == 0;
					if (v13)
						return result;
					result = __ROR4__(result, 1);
				}
			}
			if (v11)
			{
				v14 = __CFADD__(result, *(_QWORD *)v2);
				*(_QWORD *)v2 += result;
				if (v14)
				{
					v15 = __RCR__(*(x_DWORD *)(v2 + 4), v14);
					*(x_DWORD *)(v2 + 4) = v15;
					++*(x_WORD *)(v2 + 8);
				}
			}
			return result;
		}
		*(x_DWORD *)result = 0;
		v16 = *(x_DWORD *)(result + 4);
		v6 = __OFADD__(32, (x_WORD)v3);
		v9 = (int16_t)(v3 + 32) < 0;
		LOWORD(v3) = v3 + 32;
		if ((uint8_t)v9 ^ v6)
		{
			if (a2 != 1024 && (a2 || (x_WORD)v3 == -1 && (v16 != 0x80000000 || v8)))
			{
				*(x_DWORD *)(result + 4) = 2147483648;
				*(x_WORD *)(result + 8) |= 0x3FFFu;
			}
			else
			{
				result = 0;
				*(x_DWORD *)(v2 + 4) = 0;
				*(x_WORD *)(v2 + 8) = 0;
			}
			return result;
		}
		v17 = x_DWORD_B3BEB[v3];
		v18 = v17 & v16;
		*(x_DWORD *)(v2 + 4) ^= v18;
		result = v17 + 1;
		if (a2 == 1024)
			return result;
		if (!a2)
		{
			v19 = __CFSHL__(v8, 1);
			v8 = __ROL4__(v8, 1);
			v18 += v19 + v18;
			if (result > v18)
				return result;
			if (result == v18)
			{
				if (v8)
				{
				LABEL_35:
					v21 = __CFADD__(result, *(x_DWORD *)(v2 + 4));
					*(x_DWORD *)(v2 + 4) += result;
					if (v21)
					{
						v22 = __RCR__(*(x_DWORD *)(v2 + 4), v21);
						*(x_DWORD *)(v2 + 4) = v22;
						++*(x_WORD *)(v2 + 8);
					}
					return result;
				}
				v14 = __CFADD__(result, result);
				v20 = 2 * result == 0;
				result *= 2;
				if (!v14)
					v20 = (result & *(x_DWORD *)(v2 + 4)) == 0;
				if (v20)
					return result;
				result >>= 1;
			}
		}
		if (!(v18 | v8))
			return result;
		goto LABEL_35;
	}
	return result;
}

//----- (000B3DF8) --------------------------------------------------------
int16_t sub_B3DF8(int a1, int a2, int a3, x_BYTE *a4, int a5)//294df8
{
	char v5; // ch
	char v6; // dl
	char v7; // ch

	//fix it
	v7 = 0;
	//fix it

	if (2 * *(x_WORD *)(a1 + 8))
	{
		if (2 * *(x_WORD *)(a2 + 8))
		{
			v5 = *(x_BYTE *)(a1 + 9);
			sub_B35DB(a1, a2, a4, a5);
			LOWORD(a1) = sub_B3EAE(a3, a4, a5);
			v6 = *(x_BYTE *)(a3 + 9);
			if (v7 < 0)
			{
				if (v6 > 0)
					LOWORD(a1) = sub_B33A6(a3, a5, 560513589, -921707870, 49152);
			}
			else if (v6 < 0)
			{
				LOWORD(a1) = sub_B33A6(a3, a5, 560513589, -921707870, 0x4000);
			}
		}
		else
		{
			LOWORD(a1) = *(x_WORD *)(a1 + 8) & 0x8000 | 0x3FFF;
			*(x_WORD *)(a3 + 8) = a1;
			*(x_DWORD *)(a3 + 4) = -921707870;
			*(x_DWORD *)a3 = 560513589;
		}
	}
	else if (*(x_BYTE *)(a2 + 9) >= 0)
	{
		*(x_WORD *)(a3 + 8) = 0;
		*(x_DWORD *)(a3 + 4) = 0;
		*(x_DWORD *)a3 = 0;
	}
	else
	{
		*(x_WORD *)(a3 + 8) = 0x4000;
		*(x_DWORD *)(a3 + 4) = -921707870;
		*(x_DWORD *)a3 = 560513589;
	}
	return a1;
}

//----- (000B3EAE) --------------------------------------------------------
int16_t /*__spoils<ecx>*/ sub_B3EAE(int a1, x_BYTE *a2, int a3)//294eae
{
	int v3; // edi
	char v4; // cl
	int16_t result; // ax
	int v6; // edx
	uint16_t v7; // ax
	uint8_t v8; // cf
	bool v9; // zf
	unsigned int v10; // eax
	int v11; // esi
	int v12; // edx
	int v13; // ST08_4
	int v14; // ST04_4
	int v15; // ST00_4
	uint64_t v16; // rax
	uint64_t v17; // rax
	int v18; // ebx
	int v19; // edx
	char v20; // cl
	uint8_t v21; // ch
	char v22; // ch

	//fix it
	v6 = 0;
	v12 = 0;
	v19 = 0;
	v20 = 0;
	v21 = 0;
	//fix it

	v3 = a1;
	v4 = *(x_BYTE *)(a1 + 9);
	*(x_BYTE *)(v3 + 9) &= 0x7Fu;
	if (*(x_WORD *)(a1 + 8) != 0x3FFF || *(x_DWORD *)(a1 + 4) != 0x80000000 || *(x_DWORD *)a1)
	{
		if (*(x_WORD *)(a1 + 8) >= 0x3FFF)
		{
			LOWORD(a3) = *(x_WORD *)(a1 + 8);
			a3 <<= 16;
			LOWORD(a3) = 0x3FFF;
			*(x_DWORD *)a1 = sub_B3605(0x8000000000000000, *(x_DWORD *)(a1 + 4), *(x_DWORD *)a1, a2, a3);
			*(x_DWORD *)(v3 + 4) = v6;
			*(x_WORD *)(v3 + 8) = 0x3FFF;
		}
		v7 = *(x_WORD *)(v3 + 8);
		v8 = v7 < 0x3FFDu;
		v9 = v7 == 16381;
		if (v7 == 16381)
		{
			v10 = *(x_DWORD *)(v3 + 4);
			v8 = v10 < 0x8930A2F4;
			v9 = v10 == -1993301260;
			if (v10 == -1993301260)
			{
				v8 = *(x_DWORD *)v3 < 0xF66AB09B;
				v9 = *(x_DWORD *)v3 == -160780133;
			}
		}
		if (!(v8 | (uint8_t)v9))
		{
			HIWORD(v11) = 0x3FFF;
			LOWORD(v11) = *(x_WORD *)(v3 + 8);
			v13 = sub_B33D6(*(_QWORD *)v3, -575416510, -1033546850, v11);
			v14 = v12;
			v15 = v11;
			HIWORD(v11) = 0x3FFF;
			LOWORD(v11) = *(x_WORD *)(v3 + 8);
			LODWORD(v16) = sub_B37DA(*(_QWORD *)v3, 0xDDB3D742, 0xC265539E, v11);
			v11 = __ROL4__(v11, 16);
			LOWORD(v11) = -16385;
			v11 = __ROL4__(v11, 16);
			LODWORD(v17) = sub_B33D6(v16, 2147483648, 0, v11);
			v18 = v15 << 16;
			LOWORD(v18) = v11;
			a3 = v18;
			*(x_DWORD *)v3 = sub_B3605(v17, v14, v13, a2, v18);
			*(x_DWORD *)(v3 + 4) = v19;
			*(x_WORD *)(v3 + 8) = v18;
		}
		// FIXME: called with wrong types
		// result = sub_B4A2A((int *)v3, (int)&x_WORD_B3D9E, a3);
		v8 = v21 & 1;
		v22 = v21 >> 1;
		if (v8)
			result = sub_B33A6(v3, a3, 1805331491, -2046127679, 16382);
		if (v22 & 1)
		{
			result = sub_B33A6(v3, a3, 560513589, -921707870, 49151);
			*(x_BYTE *)(v3 + 9) ^= 0x80u;
		}
		if (v20 < 0)
			*(x_BYTE *)(v3 + 9) ^= 0x80u;
	}
	else
	{
		*(x_DWORD *)a1 = 560513589;
		*(x_DWORD *)(a1 + 4) = -921707870;
		LOBYTE(result) = -2;
		HIBYTE(result) = v4 & 0x80 | 0x3F;
		*(x_WORD *)(v3 + 8) = result;
	}
	return result;
}

//----- (000B4011) --------------------------------------------------------
int sub_B4011(int a1, int a2, int a3)//295011
{
	int result; // eax
	int v4; // ST00_4
	int16_t v5; // si
	int v6; // edx

	//fix it
	v6 = 0;
	//fix it

	if (!*(x_WORD *)(a1 + 8) && !*(x_DWORD *)(a1 + 4) && !*(x_DWORD *)a1)
		return 0;
	if (*(x_WORD *)(a2 + 8) || *(x_DWORD *)(a2 + 4) || *(x_DWORD *)a2)
	{
		v4 = a1;
		v5 = *(x_WORD *)(a1 + 8);
		LOWORD(a3) = *(x_WORD *)(a2 + 8);
		*(x_DWORD *)a1 = sub_B4077(*(_QWORD *)a1, *(x_DWORD *)(a2 + 4), *(x_DWORD *)a2, a3, v5);
		*(x_DWORD *)(v4 + 4) = v6;
		*(x_WORD *)(v4 + 8) = v5;
		result = a3;
	}
	else
	{
		*(x_DWORD *)a1 = 0;
		*(x_DWORD *)(a1 + 4) = 0;
		*(x_WORD *)(a1 + 8) = 0;
		result = 0;
	}
	return result;
}

//----- (000B4077) --------------------------------------------------------
int sub_B4077(int64_t a1, unsigned int a2, unsigned int a3, int16_t a4, int16_t a5)//295077
{
	int v5; // esi
	int v6; // edi
	uint8_t v7; // of
	int v8; // esi
	int v9; // edi
	bool v10; // cf
	int v11; // esi
	int v12; // ett

	v5 = a5 & 0x7FFF;
	v6 = a4 & 0x7FFF;
	v7 = __OFSUB__(v5, v6);
	v8 = v5 - v6;
	if (!((v8 < 0) ^ v7))
	{
		v9 = 0;
	LABEL_3:
		v10 = a2 < HIDWORD(a1);
		if (a2 == HIDWORD(a1) && (v10 = a3 < (unsigned int)a1, a3 == (x_DWORD)a1) || v10)
		{
		LABEL_6:
			a1 -= __PAIR__(a2, a3);
			v10 = 1;
		}
		while (1)
		{
			v9 += (uint8_t)v10 + v9;
			v7 = __OFSUB__(v8--, 1);
			if ((v8 < 0) ^ v7)
				break;
			v10 = __CFADD__(a1, a1);
			a1 *= 2;
			if (v10)
				goto LABEL_6;
			v10 = 0;
			if (a1 < 0)
				goto LABEL_3;
		}
		v11 = 0;
		if (a1)
		{
			while (a1 >= 0)
			{
				v12 = (a1 + (uint64_t)(unsigned int)a1) >> 32;
				LODWORD(a1) = 2 * a1;
				HIDWORD(a1) += v12;
				--v11;
			}
		}
	}
	return a1;
}

//----- (000B41E0) --------------------------------------------------------
int sub_B41E0(int a1, x_BYTE *a2, int a3)//2951e0
{
	int v3; // ST0C_4

	v3 = a1;
	sub_B33A6(a1, a3, 0, 2147483648, 0x3FFF);
	return sub_B41F9(v3, a2, a3);
}

//----- (000B41F9) --------------------------------------------------------
int sub_B41F9(int a1, x_BYTE *a2, int a3)//2951f9
{
	int v3; // ST00_4
	int v4; // eax
	int v5; // edx
	int v6; // ST00_4
	int v7; // esi
	int result; // eax
	int v9; // edx

	//fix it
	v5 = 0;
	v9 = 0;
	//fix it

	v3 = a1;
	sub_B423C(a1, a2);
	v4 = v3;
	v6 = v5;
	sub_B37B0(v4, v5, a3);
	LOWORD(a3) = *(x_WORD *)(v6 + 8);
	v7 = a3 << 16;
	LOWORD(v7) = 0x3FFF;
	result = sub_B37DA(0xB8AA3B295C17F0BD, *(x_DWORD *)(v6 + 4), *(x_DWORD *)v6, v7);
	*(x_DWORD *)v6 = result;
	*(x_DWORD *)(v6 + 4) = v9;
	*(x_WORD *)(v6 + 8) = 0x3FFF;
	return result;
}

//----- (000B423C) --------------------------------------------------------
int sub_B423C(int a1, x_BYTE *a2)//29523c
{
	int v2; // edi
	uint64_t v3; // rax
	uint64_t v4; // rax
	bool v5; // cf
	bool v6; // zf
	uint64_t v7; // kr00_8
	int v8; // esi
	int v9; // eax
	int v10; // edx
	uint64_t v11; // rax
	uint64_t v12; // kr08_8
	int v13; // edx
	unsigned int v14; // eax
	int v15; // edx
	unsigned int v16; // ST08_4
	int v17; // ST04_4
	int v18; // eax
	int v19; // edx
	uint64_t v20; // rax
	uint64_t v21; // rax
	uint64_t v22; // rax
	uint64_t v23; // rax
	int v24; // esi
	int result; // eax
	int v26; // edx
	int v27; // ecx
	int v28; // ST18_4
	int v29; // ST14_4
	int16_t v30; // ST10_2
	int v31; // esi
	uint64_t v32; // rax
	int v33; // edx
	int v34; // ST18_4
	int v35; // ST14_4
	int16_t v36; // ST10_2
	int v37; // esi
	uint64_t v38; // rax
	int v39; // [esp+Ch] [ebp-18h]

	//fix it
	v10 = 0;
	v11 = 0;
	v13 = 0;
	v14 = 0;
	v15 = 0;
	v20 = 0;
	v26 = 0;
	v33 = 0;
	//fix it

	v2 = a1;
	v39 = *(uint16_t *)(a1 + 8) - 16382;
	*(x_WORD *)(a1 + 8) = 16382;
	LODWORD(v3) = *(x_DWORD *)a1;
	HIDWORD(v3) = *(x_DWORD *)(v2 + 4);
	LODWORD(v4) = sub_B33D6(v3, 2147483648, 0, -1073856514);
	v5 = *(x_WORD *)(v2 + 8) < 0x3FFEu;
	v6 = *(x_WORD *)(v2 + 8) == 16382;
	if (*(x_WORD *)(v2 + 8) == 16382)
	{
		v5 = *(x_DWORD *)(v2 + 4) < 0xB504F333;
		v6 = *(x_DWORD *)(v2 + 4) == -1257966797;
		if (*(x_DWORD *)(v2 + 4) == -1257966797)
		{
			v5 = *(x_DWORD *)v2 < 0xF9DE6484;
			v6 = *(x_DWORD *)v2 == -102865788;
		}
	}
	if ((uint8_t)v5 | (uint8_t)v6)
	{
		*(_QWORD *)v2 = v4;
		*(x_WORD *)(v2 + 8) = 16382;
		--v39;
	}
	else
	{
		LODWORD(v4) = sub_B33D6(v4, 2147483648, 0, -1073856514);
	}
	v7 = v4;
	v8 = (uint16_t)(*(x_WORD *)(v2 + 8) - 1) | 0x3FFE0000;
	v9 = sub_B33D6(*(_QWORD *)v2, 2147483648, 0, v8);
	v8 <<= 16;
	LOWORD(v8) = 16382;
	LODWORD(v11) = sub_B3605(v7, v10, v9, a2, v8);
	v12 = v11;
	v8 <<= 16;
	LOWORD(v8) = 16382;
	*(x_DWORD *)v2 = sub_B37DA(v11, HIDWORD(v11), v11, v8);
	*(x_DWORD *)(v2 + 4) = v13;
	*(x_WORD *)(v2 + 8) = 16382;
	// FIXME: called with wrong type
	// sub_B49D8((int)&x_DWORD_B41B8, v8);
	v16 = v14;
	v17 = v15;
	v18 = *(x_DWORD *)v2;
	v19 = *(x_DWORD *)(v2 + 4);
	LOWORD(v8) = *(x_WORD *)(v2 + 8);
	// FIXME: called with wrong type
	// sub_B49D8((int)&x_WORD_B419A, v8);
	v8 = __ROL4__(v8, 16);
	LOWORD(v8) = 16382;
	v8 = __ROL4__(v8, 16);
	LODWORD(v21) = sub_B3605(v20, v17, v16, a2, v8);
	v8 = __ROL4__(v8, 16);
	LOWORD(v8) = *(x_WORD *)(v2 + 8);
	v8 = __ROL4__(v8, 16);
	LODWORD(v22) = sub_B37DA(v21, *(x_DWORD *)(v2 + 4), *(x_DWORD *)v2, v8);
	v8 = __ROL4__(v8, 16);
	LOWORD(v8) = 16382;
	v8 = __ROL4__(v8, 16);
	LODWORD(v23) = sub_B37DA(v22, HIDWORD(v12), v12, v8);
	v8 = __ROL4__(v8, 16);
	LOWORD(v8) = 16382;
	v24 = __ROL4__(v8, 16);
	result = sub_B33D6(v23, SHIDWORD(v12), v12, v24);
	v27 = v39;
	if (v39)
	{
		v28 = result;
		v29 = v26;
		v30 = v24;
		sub_B399A(v27, v2);
		v31 = *(uint16_t *)(v2 + 8) | 0xBFF20000;
		LODWORD(v32) = sub_B37DA(*(_QWORD *)v2, 0xDE8082E3, 0x865435Cu, v31);
		v31 = __ROL4__(v31, 16);
		LOWORD(v31) = v30;
		v31 = __ROL4__(v31, 16);
		v34 = sub_B33D6(v32, v29, v28, v31);
		v35 = v33;
		v36 = v31;
		v37 = *(uint16_t *)(v2 + 8) | 0x3FFE0000;
		LODWORD(v38) = sub_B37DA(*(_QWORD *)v2, 0xB1800000, 0, v37);
		v37 = __ROL4__(v37, 16);
		LOWORD(v37) = v36;
		v24 = __ROL4__(v37, 16);
		result = sub_B33D6(v38, v35, v34, v24);
	}
	*(x_DWORD *)v2 = result;
	*(x_DWORD *)(v2 + 4) = v26;
	*(x_WORD *)(v2 + 8) = v24;
	return result;
}

//----- (000B44D4) --------------------------------------------------------
int sub_B44D4(int a1, int a2)//2954d4
{
	int v2; // ST10_4
	int16_t v3; // si
	int v4; // edx
	char v5; // al
	int v6; // edi
	int v7; // esi
	int16_t v8; // ax
	int v9; // ecx
	int16_t v10; // ax
	int16_t v11; // ST04_2
	uint64_t v12; // rax
	uint64_t v13; // rax
	int v14; // esi
	char v15; // cl
	bool v16; // zf
	int v17; // ecx
	unsigned int v18; // ebx
	int v20; // [esp+0h] [ebp-18h]
	int v21; // [esp+0h] [ebp-18h]
	int v22; // [esp+4h] [ebp-14h]
	int16_t v23; // [esp+4h] [ebp-14h]
	uint64_t v24; // [esp+Ch] [ebp-Ch]
	int16_t v25; // [esp+14h] [ebp-4h]
	x_BYTE savedregs[20]; // [esp+18h] [ebp+0h]

	//fix it
	v4 = 0;
	v12 = 0;
	//fix it

	v2 = (uint16_t)((*(x_WORD *)(a1 + 8) & 0x7FFF) - 16382);
	v22 = a2;
	v20 = a1;
	v3 = *(x_WORD *)(a1 + 8);
	*(x_DWORD *)a1 = sub_B4077(*(_QWORD *)a1, 0xC90FDAA2, 0x2168C235u, 16382, v3);
	*(x_DWORD *)(v20 + 4) = v4;
	*(x_WORD *)(v20 + 8) = v3;
	v5 = -2;
	v6 = v20;
	v7 = v22;
	if (*(x_BYTE *)(v20 + 9) < 0)
	{
		sub_B33A6(v20, v22, 560513589, -921707870, 16382);
		v5 = -3;
	}
	HIBYTE(v8) = v22;
	LOBYTE(v8) = ((v22 & 2) + v5) & 7;
	v23 = v8;
	if (v8 & 1)
	{
		sub_B33A6(v6, v7, 560513589, -921707870, 49150);
		*(x_BYTE *)(v6 + 9) ^= 0x80u;
	}
	v9 = (uint16_t)(*(x_WORD *)(v6 + 8) - 16382);
	if ((int16_t)v9 >= -32)
	{
		if ((v9 & 0x8000u) == 0)
			LOWORD(v9) = 0;
		LOWORD(v9) = -(int16_t)v9;
		if ((int16_t)v9 > 8)
			LOWORD(v9) = 8;
		LOWORD(v9) = x_WORD_B44C2[v9];
		v21 = v9;
		HIBYTE(v10) = HIBYTE(v23);
		LOBYTE(v10) = (v23 + 1) & 2;
		if ((x_BYTE)v10 || HIBYTE(v23) == 1)
		{
			v11 = v10;
			LOWORD(v7) = *(x_WORD *)(v6 + 8);
			v7 <<= 16;
			LOWORD(v7) = *(x_WORD *)(v6 + 8);
			sub_B37DA(*(_QWORD *)v6, *(x_DWORD *)(v6 + 4), *(x_DWORD *)v6, v7);
			// FIXME: called with wrong type
			// sub_B49D8((int)x_DWORD_B4468 + 10 * v21, v7);
			v24 = v12;
			v25 = v7;
			v10 = v11;
		}
		// FIXME: called with wrong types
		// if (!(x_BYTE)v10 || HIBYTE(v10) == 1)
		// 	sub_B4A2A((int *)v6, (int)&x_WORD_B440E[5 * v21], v7);
	}
	else
	{
		v24 = 0x8000000000000000;
		v25 = 0x3FFF;
	}
	if (((x_BYTE)v23 + 1) & 2)
	{
		v13 = v24;
		LOWORD(v7) = v25;
	}
	else
	{
		v13 = *(_QWORD *)v6;
		LOWORD(v7) = *(x_WORD *)(v6 + 8);
	}
	if (v23 & 4)
		LOWORD(v7) = v7 ^ 0x8000;
	if (HIBYTE(v23) == 1)
	{
		v14 = __ROL4__(v7, 16);
		v15 = v23 + 2;
		if (((x_BYTE)v23 + 3) & 2)
		{
			v16 = (v15 & 4) == 0;
			v17 = HIDWORD(v24);
			v18 = v24;
			LOWORD(v14) = v25;
		}
		else
		{
			v16 = (v15 & 4) == 0;
			v18 = *(x_DWORD *)v6;
			v17 = *(x_DWORD *)(v6 + 4);
			LOWORD(v14) = *(x_WORD *)(v6 + 8);
		}
		if (!v16)
			v14 ^= 0x8000u;
		v7 = __ROL4__(v14, 16);
		if (v18 || v17 || v7 & 0x7FFF0000)
		{
			LODWORD(v13) = sub_B3605(v13, v17, v18, savedregs, v7);
		}
		else
		{
			v13 = 0x8000000000000000;
			LOWORD(v7) = v7 | 0x7FFF;
		}
	}
	*(_QWORD *)v6 = v13;
	*(x_WORD *)(v6 + 8) = v7;
	return v13;
}

//----- (000B46CB) --------------------------------------------------------
int /*__fastcall*/ sub_B46CB(int a1)//2956cb
{
	return sub_B44D4(a1, 0);
}

//----- (000B46D5) --------------------------------------------------------
int /*__fastcall*/ sub_B46D5(int a1)//2956d5
{
	return sub_B44D4(a1, 2);
}

//----- (000B46E2) --------------------------------------------------------
int /*__fastcall*/ sub_B46E2(int a1)//2956e2
{
	return sub_B44D4(a1, 1);
}

//----- (000B4718) --------------------------------------------------------
int /*__fastcall*/ sub_B4718(int a1, int a2, int a3, int a4)//295718
{
	int v4; // edi
	signed int v5; // esi
	int16_t v6; // cx
	bool v7; // zf
	uint16_t v8; // bx
	int v9; // ecx
	int64_t v10; // rax
	uint8_t v11; // cf
	int16_t v12; // bx
	int v13; // esi
	uint64_t v14; // rax
	int v15; // esi
	uint64_t v16; // rax
	int32_t v17; // edx
	int v18; // esi
	uint64_t v19; // rax
	int v20; // esi
	uint64_t v21; // rax
	uint64_t v22; // rax
	int v23; // esi
	uint64_t v24; // rax
	int32_t v25; // edx
	int v26; // esi
	uint64_t v27; // rax
	int v28; // eax
	int v29; // edx
	unsigned int v30; // ecx
	int(*v31)(); // esi
	int v32; // eax
	uint64_t v33; // rax
	int v34; // et0
	int v35; // edx
	int v36; // esi
	int v38; // [esp-2Ch] [ebp-38h]
	int v39; // [esp-28h] [ebp-34h]
	unsigned int v40; // [esp-24h] [ebp-30h]
	int v41; // [esp-20h] [ebp-2Ch]
	int v42; // [esp-1Ch] [ebp-28h]
	int v43;
	int(*v43_2)();
	int v44; // [esp-14h] [ebp-20h]
	int v45; // [esp-10h] [ebp-1Ch]
	int v46; // [esp-8h] [ebp-14h]

	//fix it
	v14 = 0;
	v17 = 0;
	v22 = 0;
	v25 = 0;
	v29 = 0;
	v35 = 0;
	//fix it

	v46 = a4;
	v4 = a1;
	v5 = 0;
	v6 = *(x_WORD *)(a1 + 8);
	*(x_BYTE *)(v4 + 9) &= 0x7Fu;
	v7 = *(x_WORD *)(a1 + 8) == 0;
	if (!*(x_WORD *)(a1 + 8))
		v7 = *(_QWORD *)a1 == 0;
	if (v7)
	{
		v9 = 0;
	}
	else
	{
		if (v6 < 0)
		{
			v5 = -1;
			sub_B33A6(a1, -1, 0, 2147483648, 49151);
			*(x_BYTE *)(v4 + 9) ^= 0x80u;
		}
		v8 = *(x_WORD *)(v4 + 8) + 4;
		v9 = 0;
		v10 = *(_QWORD *)v4;
		while (v8 >= 0x3FFFu)
		{
			v11 = __CFADD__(v10, v10);
			v10 *= 2;
			v9 += v11 + v9;
			--v8;
		}
		if (v10)
		{
			while (v10 >= 0)
			{
				v10 *= 2;
				--v8;
			}
			v12 = v8 - 4;
		}
		else
		{
			v12 = 0;
		}
		*(_QWORD *)v4 = v10;
		*(x_WORD *)(v4 + 8) = v12;
	}
	v45 = v5;
	v44 = v9;
	LOWORD(v5) = *(x_WORD *)(v4 + 8);
	v13 = v5 << 16;
	LOWORD(v13) = *(x_WORD *)(v4 + 8);
	LODWORD(v14) = sub_B37DA(*(_QWORD *)v4, *(x_DWORD *)(v4 + 4), *(x_DWORD *)v4, v13);
	v42 = HIDWORD(v14);
	v43 = v14;
	v41 = v13;
	v15 = (uint16_t)v13 | 0x40030000;
	LODWORD(v16) = x_InterlockedExchange((volatile long*)&v43, sub_B33D6(v14, -1501390215, 468852620, v15));
	HIDWORD(v16) = x_InterlockedExchange((volatile long*)&v42, v17);
	v18 = (uint16_t)x_InterlockedExchange((volatile long*)&v41, v15) | 0x3FFA0000;
	LODWORD(v19) = sub_B37DA(v16, 0xEC96F0D6, 0x9D7BFDBu, v18);
	v20 = (uint16_t)v18 | 0x40010000;
	LODWORD(v21) = sub_B33D6(v19, -422247142, -449388153, v20);
	v20 = __ROL4__(v20, 16);
	LOWORD(v20) = *(x_WORD *)(v4 + 8);
	v20 = __ROL4__(v20, 16);
	LODWORD(v22) = sub_B37DA(v21, *(x_DWORD *)(v4 + 4), *(x_DWORD *)v4, v20);
	v39 = HIDWORD(v22);
	v40 = v22;
	v38 = v20;
	v23 = __ROL4__(v20 ^ 0x8000, 16);
	LOWORD(v23) = v41;
	v23 = __ROL4__(v23, 16);
	LODWORD(v24) = x_InterlockedExchange((volatile long*)&v40, sub_B33D6(v22, v42, v43, v23));
	HIDWORD(v24) = x_InterlockedExchange((volatile long*)&v39, v25);
	//fix it:v26 = __ROL4__(x_InterlockedExchange(&v38, v23), 16);
	LOWORD(v26) = v41;
	v26 = __ROL4__(v26, 16);
	LODWORD(v27) = sub_B33D6(v24, v42, v43, v26);
	v26 = __ROL4__(v26, 16);
	LOWORD(v26) = v38;
	v26 = __ROL4__(v26, 16);
	v28 = sub_B3605(v27, v39, v40, (x_BYTE*)&v41, v26);
	*(x_DWORD *)v4 = v28;
	*(x_DWORD *)(v4 + 4) = v29;
	*(x_WORD *)(v4 + 8) = v26;
	v30 = v44;
	v31 = sub_B46F0; // FIXME: no function pointers
	while (v30)
	{
		v11 = v30 & 1;
		v30 >>= 1;
		if (v11)
		{
			v44 = v30;
			v43_2 = v31;
			LOWORD(v28) = *(x_WORD *)(v4 + 8);
			v32 = v28 << 16;
			LOWORD(v32) = *((x_WORD *)v31 + 4);
			HIDWORD(v33) = *((x_DWORD *)v31 + 1);
			v34 = v32;
			LODWORD(v33) = *(x_DWORD *)v31;
			v28 = sub_B37DA(v33, *(x_DWORD *)(v4 + 4), *(x_DWORD *)v4, v34);
			*(x_DWORD *)v4 = v28;
			*(x_DWORD *)(v4 + 4) = v35;
			*(x_WORD *)(v4 + 8) = v34;
			v31 = v43_2;
			v30 = v44;
		}
		// v31 = (int(*)())((char *)v31 + 10);  // FIXME: no pointer arithmetic with function pointers
	}
	v36 = v45;
	*(x_WORD *)(v4 + 8) += v45;
	return sub_B33A6(v4, v36, 0, 2147483648, 49151);
}

//----- (000B48EC) --------------------------------------------------------
int /*__fastcall*/ sub_B48EC(uint64_t a1)//2958ec
{
	int16_t v1; // cx
	unsigned int v2; // ebx
	uint16_t v3; // cx
	int16_t v4; // cx
	unsigned int v5; // edi
	int16_t v6; // cx
	int16_t v7; // cx
	uint8_t v8; // tt
	unsigned int v9; // ecx
	unsigned int v10; // esi
	unsigned int v11; // eax
	unsigned int v12; // edx
	uint64_t v13; // rt2
	unsigned int v14; // esi
	int v15; // esi
	unsigned int v16; // ecx
	int v17; // eax
	uint8_t v18; // cf
	uint8_t v19; // tt
	int v20; // eax
	uint8_t v21; // tt
	x_DWORD *v23; // [esp-10h] [ebp-18h]

	v1 = *(x_WORD *)(a1 + 8);
	v2 = *(x_DWORD *)a1;
	if (*(x_DWORD *)a1)
		goto LABEL_7;
	if (*(x_DWORD *)(a1 + 4))
	{
		if (v1 == 0x7FFF)
			return a1;
	LABEL_7:
		if ((v1 & 0x7FFF) == 0x7FFF)
			goto LABEL_5;
		v18 = __CFADD__(v1, v1);
		v3 = 2 * v1;
		if (v18)
			goto LABEL_5;
		v4 = v3 >> 1;
		if (v4 && !__CFADD__(*(x_DWORD *)(a1 + 4), *(x_DWORD *)(a1 + 4)))
		{
		LABEL_4:
			*(x_WORD *)(a1 + 8) = -1;
			*(x_DWORD *)(a1 + 4) = 0;
			*(x_DWORD *)a1 = 0;
		LABEL_5:
			*(x_BYTE *)(a1 + 7) |= 0xC0u;
			return a1;
		}
		HIDWORD(a1) = *(x_DWORD *)(a1 + 4);
		v5 = 0;
		v23 = (x_DWORD *)a1;
		v6 = v4 - 0x3FFF;
		v18 = v6 & 1;
		v7 = v6 >> 1;
		if (!v18)
		{
			v18 = BYTE4(a1) & 1;
			HIDWORD(a1) >>= 1;
			v8 = __CFRCR__(v2, v18);
			v2 = __RCR__(v2, v18);
			v5 = __RCR__(0, v8);
		}
		*(x_WORD *)(a1 + 8) = v7 + 0x3FFF;
		v9 = HIDWORD(a1);
		LODWORD(a1) = v2;
		v10 = __RCR__(HIDWORD(a1)++, 1);
		if (HIDWORD(a1))
		{
			--HIDWORD(a1);
			while (1)
			{
				v13 = a1 % v10;
				v11 = a1 / v10;
				v12 = v13;
				v14 = v10 - 1;
				if (v14 <= v11)
					break;
				v10 = __RCR__(v11 + v14 + 1, __CFADD__(v11, v14 + 1));
				a1 = __PAIR__(v9, v2);
			}
			v15 = v14 + 1;
			v16 = v11;
			v17 = __PAIR__(v12, v5) / (unsigned int)v15;
			v10 = v16 + v15;
		}
		else
		{
			v18 = v2 < v10;
			if (v2 == v10)
			{
			LABEL_21:
				*v23 = a1;
				v23[1] = v10 + v18;
				return a1;
			}
			v17 = __PAIR__(v2, v5) / v10;
		}
		v19 = __CFRCR__(v10, 1);
		v10 = __RCR__(v10, 1);
		v18 = v19;
		v21 = __CFRCR__(v17, v19);
		v20 = __RCR__(v17, v18);
		v18 = __CFADD__(v21, v20);
		LODWORD(a1) = v21 + v20;
		goto LABEL_21;
	}
	if (2 * v1)
		goto LABEL_4;
	return a1;
}

//----- (000B49D8) --------------------------------------------------------
// FIXME: called with wrong types
// void sub_B49D8(int a1, int a2)//2959d8
// {
// 	int v2; // edi
// 	uint64_t v3; // rax
// 	int v4; // esi
// 	uint64_t v5; // rax
// 	unsigned int vars0; // [esp+0h] [ebp+0h]
// 	unsigned int vars4; // [esp+4h] [ebp+4h]
// 	int16_t vars8; // [esp+8h] [ebp+8h]
// 	int varsC; // [esp+Ch] [ebp+Ch]

// 	//fix it
// 	vars8 = 0;
// 	vars0 = 0;
// 	vars4 = 0;
// 	varsC = 0;
// 	//fix it

// 	v2 = a1;
// 	v3 = *(_QWORD *)a1;
// 	LOWORD(a2) = *(x_WORD *)(a1 + 8);
// 	do
// 	{
// 		v4 = __ROL4__(a2, 16);
// 		LOWORD(v4) = vars8;
// 		v4 = __ROL4__(v4, 16);
// 		LODWORD(v5) = sub_B37DA(v3, vars4, vars0, v4);
// 		v2 += 10;
// 		v4 = __ROL4__(v4, 16);
// 		LOWORD(v4) = *(x_WORD *)(v2 + 8);
// 		a2 = __ROL4__(v4, 16);
// 		LODWORD(v3) = sub_B33D6(v5, *(x_DWORD *)(v2 + 4), *(x_DWORD *)v2, a2);
// 		--varsC;
// 	} while (varsC);
// }

//----- (000B4A2A) --------------------------------------------------------
// FIXME: called with wrong types
// int sub_B4A2A(int *a1, int a2, int a3)//295a2a
// {
// 	int v3; // ST00_4
// 	int *v4; // edi
// 	uint64_t v5; // rax
// 	int v6; // esi
// 	uint64_t v7; // rax
// 	int result; // eax
// 	int v9; // edx


// 	//fix it
// 	v7 = 0;
// 	v9 = 0;
// 	//fix it

// 	v3 = a2;
// 	v4 = a1;
// 	LODWORD(v5) = *a1;
// 	HIDWORD(v5) = v4[1];
// 	LOWORD(a3) = *((x_WORD *)v4 + 4);
// 	v6 = a3 << 16;
// 	LOWORD(v6) = *((x_WORD *)v4 + 4);
// 	sub_B37DA(v5, v4[1], v5, v6);
// 	sub_B49D8(v3, v6);
// 	v6 = __ROL4__(v6, 16);
// 	LOWORD(v6) = *((x_WORD *)v4 + 4);
// 	v6 = __ROL4__(v6, 16);
// 	result = sub_B37DA(v7, v4[1], *v4, v6);
// 	*v4 = result;
// 	v4[1] = v9;
// 	*((x_WORD *)v4 + 4) = v6;
// 	return result;
// }

//----- (000B4F46) --------------------------------------------------------
void /*__spoils<edx,ecx>*/ sub_B4F46()//295f46
{
	if (!x_WORD_E7C58 && x_BYTE_E3E28)
	{
		if (x_BYTE_E4CB2)
		{
			if (x_BYTE_E4CB2 == 1)
			{
				_DOS4G_hook_init();
			}
			else if (x_BYTE_E4CB2 == 9)
			{
				_Intel_hook_init();
			}
			else
			{
				_Phar_hook_init();
			}
		}
		else
		{
			;//_Ergo_hook_init((uint16_t)__DS__, (uint16_t)__ES__);
		}
		//sub_B5000();
	}
}

//----- (000B4FA3) --------------------------------------------------------
void /*__spoils<edx,ecx>*/ sub_B4FA3()//295fa3
{
	if (x_WORD_E7C58)
	{
		if (x_BYTE_E4CB2)
		{
			if (x_BYTE_E4CB2 == 1)
			{
				_DOS4G_hook_fini();
			}
			else if (x_BYTE_E4CB2 == 9)
			{
				_Intel_hook_fini();
			}
			else
			{
				_Phar_hook_fini();
			}
		}
		else
		{
			;// _Ergo_hook_fini((uint16_t)__DS__);
		}
	}
}

//----- (000B5128) --------------------------------------------------------
void sub_B5128(int16_t a1, int a2, double *a3, double a4)//296128
{
	bool v4; // zf

	if (a1 != -9734 && a1 != -9743)
	{
		v4 = a1 == -9736;
		if (a1 != -9736)
			v4 = a1 == -9739;
		if (!v4 && (a1 & 0x310) != 784)
		{
			if ((a1 & 0x110) == 272)
			{
				/*__asm
				{
				  fstp    st
				  fldz
				}*/
				if ((a1 & 0xC0) != -64)
					sub_B5250(a1, a3, a4);
				/*if ( a1 & 8 )
				  __asm { fstp    st }*/
			}
			else if ((a1 & 0x130) == 48)
			{
				*(x_WORD *)(a2 + 8);
			}
		}
	}
}
// B516D: inconsistent fpu stack

//----- (000B51B3) --------------------------------------------------------
void sub_B51B3(int16_t a1, int a2, double *a3, int16_t a4, double a5)//2961b3
{
	int16_t v5; // dx
	double v6; // st7

	if (a1 != -9731)
	{
		if ((a1 & 0x110) == 272)
		{
			v6 = sub_B5205(SHIBYTE(a1), a2, a4, a5);
			if ((a1 & 0xC0) != -64)
				sub_B5250(a1, a3, v6);
			/*if ( a1 & 8 )
			  __asm { fstp    st }*/
		}
		else if ((a1 & 0xC0) == -64)
		{
			HIBYTE(v5) = HIBYTE(a1) & 1;
			LOBYTE(v5) = a1 & 0xC0;
			sub_B522B(v5, a1, unk_E7C64x);
		}
		else
		{
			sub_B5205(SHIBYTE(a1), a2, a4, a5);
		}
	}
}
// B51CB: inconsistent fpu stack

//----- (000B5205) --------------------------------------------------------
double sub_B5205(char a1, int a2, int16_t a3, double a4)//296205
{
	bool v4; // c0
	char v5; // c2
	bool v6; // c3
	double result; // st7

	v4 = a4 < 0.0;
	v5 = 0;
	v6 = a4 == 0.0;
	*(x_WORD *)(a2 + 20) = a3;
	if (a1 & 4)
		result = dbl_E7C6E;
	else
		result = flt_E7C76;
	if (*(x_WORD *)(a2 + 20) & 0x100)
		result = -result;
	return result;
}

//----- (000B522B) --------------------------------------------------------
int64_t sub_B522B(int a1, int16_t a2, int _ESI)//29622b
{
	uint8_t v3; // of
	int64_t result; // rax
	int v5; // [esp-4h] [ebp-4h]

	if (a2 & 0x400)
		LOBYTE(a1) = a2 & 7;
	else
		LOBYTE(a1) = 0;
	v5 = a1;
	while (1)
	{
		v3 = __OFSUB__((x_BYTE)a1, 1);
		LOBYTE(a1) = a1 - 1;
		if (((a1 & 0x80u) != 0) ^ v3)
			break;
		// fix it__asm { fincstp }
	}
	/* fix it__asm
	{
	  fstp    st
	  fld     tx_BYTE ptr [esi]
	}*/
	HIDWORD(result) = v5;
	while (1)
	{
		v3 = __OFSUB__(BYTE4(result)--, 1);
		if (((result & 0x8000000000) != 0) ^ v3)
			break;
		//fix it: __asm { fdecstp }
	}
	return result;
}
// B523E: inconsistent fpu stack

//----- (000B5250) --------------------------------------------------------
double sub_B5250(char a1, double *a2, double result)//296250
{
	if (a1 & 4)
		*a2 = result;
	else
		*(float *)a2 = result;
	return result;
}

//----- (000B5C5B) --------------------------------------------------------
int sub_B5C5B()//296c5b
{
	return 0;
}

//----- (000B5C60) --------------------------------------------------------
int sub_B5C60_getTerrainAlt2(Bit16u a1, Bit16u a2)//296c60
{
	Bit16u v2; // ebx
	int v3; // edx
	int v4; // eax
	int v5; // esi
	int v6; // esi
	int result; // eax
	int v8; // esi
	int v9; // eax
	int v10; // esi
	int v11; // esi
	int v12; // edi

	v2 = HIBYTE(a1);
	HIBYTE(v2) = HIBYTE(a2);
	v3 = LOBYTE(a2);
	if ((HIBYTE(a1) + HIBYTE(a2)) & 1)
	{
		if(uint8_t(v3) > uint8_t(v3 + a1))
		{
			HIBYTE(v2) = HIBYTE(a2) + 1;
			v4 = x_BYTE_11B4E0_height[v2];
			LOBYTE(v2)++;
			v8 = x_BYTE_11B4E0_height[v2];
			LOBYTE(v3) = ~(x_BYTE)a2;
			HIBYTE(v2) = HIBYTE(a2);
			v6 = v3 * (x_BYTE_11B4E0_height[v2] - v8) + (uint8_t)a1 * (v8 - v4);
		}
		else
		{
			v4 = x_BYTE_11B4E0_height[v2];
			LOBYTE(v2)++;
			v5 = (uint8_t)a1 * (x_BYTE_11B4E0_height[v2] - v4);
			LOBYTE(v2)--;
			HIBYTE(v2) = HIBYTE(a2) + 1;
			v6 = (uint8_t)a2 * (x_BYTE_11B4E0_height[v2] - v4) + v5;
		}
		result = (v6 >> 3) + 32 * v4;
	}
	else
	{
		if ((uint8_t)a1 <= (uint8_t)v3)
		{
			v9 = x_BYTE_11B4E0_height[v2];
			HIBYTE(v2) = HIBYTE(a2) + 1;
			v12 = x_BYTE_11B4E0_height[v2];
			LOBYTE(v2)++;
			v11 = (uint8_t)a2 * (v12 - v9) + (uint8_t)a1 * (x_BYTE_11B4E0_height[v2] - v12);
		}
		else
		{
			v9 = x_BYTE_11B4E0_height[v2];
			LOBYTE(v2)++;
			v10 = x_BYTE_11B4E0_height[v2];
			HIBYTE(v2) = HIBYTE(a2) + 1;
			v11 = (uint8_t)a2 * (x_BYTE_11B4E0_height[v2] - v10) + (uint8_t)a1 * (v10 - v9);
		}
		result = (v11 >> 3) + 32 * v9;
	}
	return result;
}

//----- (000B5D68) --------------------------------------------------------
int sub_B5D68(int16_t a1, int16_t a2)//296d68
{
	int v2; // ebx
	int v3; // edx
	int v4; // eax
	int v5; // esi
	int v6; // esi
	int result; // eax
	int v8; // esi
	int v9; // eax
	int v10; // esi
	int v11; // esi
	int v12; // edi

	v2 = HIBYTE(a1);
	HIBYTE(v2) = HIBYTE(a2);
	v3 = (uint8_t)a2;
	if ((HIBYTE(a1) + HIBYTE(a2)) & 1)
	{
		if (__CFADD__((x_BYTE)v3, (x_BYTE)a1))
		{
			HIBYTE(v2) = HIBYTE(a2) + 1;
			v4 = (uint8_t)x_BYTE_14B4E0[v2];
			LOBYTE(v2) = v2 + 1;
			v8 = (uint8_t)x_BYTE_14B4E0[v2];
			LOBYTE(v3) = ~(x_BYTE)a2;
			BYTE1(v2) = HIBYTE(a2);
			v6 = v3 * ((uint8_t)x_BYTE_14B4E0[v2] - v8) + (uint8_t)a1 * (v8 - v4);
		}
		else
		{
			v4 = (uint8_t)x_BYTE_14B4E0[v2];
			LOBYTE(v2) = v2 + 1;
			v5 = (uint8_t)a1 * ((uint8_t)x_BYTE_14B4E0[v2] - v4);
			LOBYTE(v2) = v2 - 1;
			HIBYTE(v2) = HIBYTE(a2) + 1;
			v6 = (uint8_t)a2 * ((uint8_t)x_BYTE_14B4E0[v2] - v4) + v5;
		}
		result = (v6 >> 3) + 32 * v4;
	}
	else
	{
		if ((uint8_t)a1 <= (uint8_t)v3)
		{
			v9 = (uint8_t)x_BYTE_14B4E0[v2];
			HIBYTE(v2) = HIBYTE(a2) + 1;
			v12 = (uint8_t)x_BYTE_14B4E0[v2];
			LOBYTE(v2)++;
			v11 = (uint8_t)a2 * (v12 - v9) + (uint8_t)a1 * ((uint8_t)x_BYTE_14B4E0[v2] - v12);
		}
		else
		{
			v9 = (uint8_t)x_BYTE_14B4E0[v2];
			LOBYTE(v2)++;
			v10 = (uint8_t)x_BYTE_14B4E0[v2];
			HIBYTE(v2) = HIBYTE(a2) + 1;
			v11 = (uint8_t)a2 * ((uint8_t)x_BYTE_14B4E0[v2] - v10) + (uint8_t)a1 * (v10 - v9);
		}
		result = (v11 >> 3) + 32 * v9;
	}
	return result;
}

//----- (000B5E70) --------------------------------------------------------
void /*__spoils<ecx>*/ sub_B5E70_decompress_terrain_map_level(int16_t a1, uint16_t a2, int16_t a3, Bit32s a4)//296e70
{
	Bit16u v3; // ebx
	int16_t v4; // cx
	//char v5; // sf
	//char v6; // of
	Bit8s v7; // [esp+1h] [ebp-3h]
	Bit8s v8; // [esp+1h] [ebp-3h]
	Bit8s v9; // [esp+2h] [ebp-2h]
	Bit8s v10; // [esp+2h] [ebp-2h]
	Bit8s v11; // [esp+3h] [ebp-1h]
	//Bit8u savedregs[20]; // [esp+4h] [ebp+0h]

	x_WORD_15B4E0_source[a2] = a3;//32c4e0 //first seed
	v11 = 7;
	do
	{
		v3 = a2;
		v4 = (1 << v11);
		v7 = 1 << (7 - v11);
		do
		{
			v9 = 1 << (7 - v11);
			do
			{
				sub_B5EFA(v4, &v3, a4, &a1);//355220
				v9--;
			} while (v9);
			v3 += (v4 + v4) << 8;
			v7--;
		} while (v7);
		v8 = 1 << (7 - v11);
		do
		{
			v10 = 1 << (7 - v11);
			do
			{
				sub_B5F8F(v4, &v3, a4, &a1);
				v10--;
			} while (v10);
			v3 += (v4 + v4) << 8;
			v8--;
		} while (v8);
		v11--;
		//v6 = __OFSUB__(v11, 1);
		//v5 = (v11-- - 1) < 0;
	} while (v11 >= 0/*!(v5 ^ v6)*/);
}

//----- (000B5EFA) --------------------------------------------------------
void sub_B5EFA(int16_t a1, Bit16u* a2, Bit32s a3, int16_t* a4)//296EFA
{
	Bit16s v4; // di
	//int16_t v5; // di
	//int16_t v6; // di
	Bit16u v7; // si
	Bit32u v8; // di
	//int16_t result; // ax

	v4 = x_WORD_15B4E0_source[*a2];
	LOBYTE(*a2) += (a1 + a1);
	v4 += x_WORD_15B4E0_source[*a2];
	*a2 += (a1 + a1) << 8;
	v4 += x_WORD_15B4E0_source[*a2];
	LOBYTE(*a2) -= (a1 + a1);
	v4 += x_WORD_15B4E0_source[*a2];
	LOBYTE(*a2) += a1;
	*a2 -= a1 << 8;
	v7 = 9377 * *a4 + 9439;
	*a4 = v7;
	v8 = v7 % (Bit16u)(2 * a3 + 1)
		+ v7 % (Bit16u)((a1 << 6) + 1)
		+ (v4 >> 2)
		- 32 * a1
		- a3;
	//result = v8;
	if (!x_WORD_15B4E0_source[*a2])
		x_WORD_15B4E0_source[*a2] = v8;
	LOBYTE(*a2) += a1;
	*a2 -= a1 << 8;
	//return result;
}

//----- (000B5F8F) --------------------------------------------------------
void sub_B5F8F(int16_t a1, Bit16u* a2, Bit32s a3, int16_t* a4)//296f8f
{
	int16_t v4; // di
	//int16_t v5; // di
	//int16_t v6; // di
	Bit16u v7; // si
	Bit16u v7b; // si
	Bit16u v8; // ax
	Bit16s v9; // di
	//int16_t v10; // di
	//int16_t v11; // di
	Bit32u v12; // di
	//int16_t result; // ax
	Bit16u v14; // [esp-2h] [ebp-2h]

	v4 = x_WORD_15B4E0_source[*a2];
	v14 = v4;
	LOBYTE(*a2) += a1;
	*a2 -= a1 << 8;
	v4 += x_WORD_15B4E0_source[*a2];
	LOBYTE(*a2) += a1;
	*a2 += a1 << 8;
	v4 += x_WORD_15B4E0_source[*a2];
	LOBYTE(*a2) -= a1;
	*a2 += a1 << 8;
	v4 += x_WORD_15B4E0_source[*a2];
	v7 = 9377 * *a4 + 9439;
	//*a4 = v7;
	//2ae9*24a1
	v8 = v7 % (Bit16u)(2 * a3 + 1)
		+ v7 % (Bit16u)((a1 << 6) + 1)
		+ (Bit16u)(v4 >> 2)
		- 32 * a1
		- a3;
	//(Bit16u)(v4 >> 2)-(a1*32)+v7 % (Bit16u)((a1 << 6) + 1)-a3+v7 % (Bit16u)(2 * a3 + 1)
	v9 = x_WORD_15B4E0_source[*a2];
	*a2 -= a1 << 8;
	if (!x_WORD_15B4E0_source[*a2])
		x_WORD_15B4E0_source[*a2] = v8;
	v9 += v14;
	LOBYTE(*a2) -= (a1 + a1);
	*a2 += a1 << 8;
	v9 += x_WORD_15B4E0_source[*a2];
	LOBYTE(*a2) += a1;
	*a2 += a1 << 8;
	v9 += x_WORD_15B4E0_source[*a2];
	*a2 -= a1 << 8;
	v7b = 9377 * v7 + 9439;
	*a4 = v7b;
	v12 = v7b % (uint16_t)(2 * a3 + 1)
		+ v7b % (uint16_t)((a1 << 6) + 1)
		+ (Bit16u)(v9 >> 2)
		- 32 * a1
		- a3;
	//result = v12;
	if (!x_WORD_15B4E0_source[*a2])
		x_WORD_15B4E0_source[*a2] = v12;
	*a2 -= a1 << 8;
	LOBYTE(*a2) += (a1 + a1);
	//return result;
}

int debugcounter_297253 = 0;
//----- (000B6253) --------------------------------------------------------
void /*__spoils<ecx>*/ sub_B6253_draw_triangle(x_DWORD *a1, x_DWORD *a2, x_DWORD *a3)//297253
{
	x_DWORD *v3; // esi
	x_DWORD *v4; // edi
	x_DWORD *v5; // ecx
	int v6; // eax
	int v7; // ebx
	int v8; // edx
	int v9; // eax
	int v10; // ebx
	int v11; // ebx
	int v12; // ebx
	int v13; // ebx
	int v14; // eax
	int v15; // ebx
	bool v16; // zf
	bool v17; // sf
	uint8_t v18; // of
	int v19; // ebx
	int v20; // ebx
	int v21; // eax
	int v22; // ebx
	int v23; // ecx
	int v24; // edx
	int v25; // esi
	int v26; // ST48_4
	int v27; // ebx
	x_DWORD *v28; // edi
	int v29; // edi
	int v30; // edi
	unsigned int v31; // eax
	int v32; // eax
	int v33; // ebx
	bool v34; // zf
	int v35; // ebx
	int v36; // ebx
	int v37; // eax
	int v38; // ebx
	int v39; // ecx
	int v40; // edx
	int v41; // ST48_4
	int v42; // ebx
	x_DWORD *v43; // edi
	int v44; // edi
	int v45; // edi
	int v46; // eax
	int v47; // ebx
	bool v48; // zf
	int v49; // ebx
	int v50; // eax
	int v51; // ebx
	int v52; // esi
	int v53; // ST48_4
	int v54; // ebx
	x_DWORD *v55; // edi
	int v56; // edi
	int v57; // edi
	int v58; // eax
	int v59; // ebx
	int v60; // ST48_4
	int v61; // ebx
	x_DWORD *v62; // edi
	int v63; // edi
	int v64; // edi
	int v65; // eax
	int v66; // ebx
	int v67; // ebx
	int v68; // ebx
	int v69; // eax
	int v70; // ebx
	bool v71; // zf
	int v72; // ebx
	int v73; // ebx
	int v74; // eax
	int v75; // ebx
	int v76; // ecx
	int v77; // edx
	int v78; // esi
	int v79; // ST48_4
	int v80; // eax
	int *v81; // edi
	int v82; // edi
	int v83; // edi
	int v84; // eax
	int v85; // ebx
	bool v86; // zf
	int v87; // ebx
	int v88; // ebx
	int v89; // eax
	int v90; // ebx
	int v91; // ecx
	int v92; // edx
	int v93; // ST48_4
	int v94; // eax
	int *v95; // edi
	int v96; // edi
	int v97; // edi
	int v98; // eax
	int v99; // ebx
	bool v100; // zf
	int v101; // ebx
	int v102; // eax
	int v103; // ebx
	int v104; // esi
	int v105; // ST48_4
	int v106; // eax
	int *v107; // edi
	int v108; // edi
	int v109; // edi
	int v110; // eax
	int v111; // ebx
	int v112; // ST48_4
	int v113; // eax
	int *v114; // edi
	int v115; // edi
	int v116; // edi
	int v117; // eax
	int v118; // ebx
	int v119; // ebx
	int v120; // eax
	int v121; // ebx
	int v122; // ecx
	int v123; // edx
	int v124; // esi
	int v125; // edi
	x_DWORD *v126; // edi
	int v127; // ebx
	int v128; // eax
	int v129; // ebx
	int v130; // ecx
	int v131; // edx
	int v132; // edi
	x_DWORD *v133; // edi
	int v134; // eax
	int v135; // ebx
	int v136; // esi
	int v137; // edi
	x_DWORD *v138; // edi
	int v139; // eax
	int v140; // ebx
	int v141; // edi
	x_DWORD *v142; // edi
	int v143; // eax
	int v144; // ebx
	int v145; // ebx
	int v146; // eax
	int v147; // ebx
	int v148; // ecx
	int v149; // edx
	int v150; // esi
	int v151; // edi
	x_DWORD *v152; // edi
	int v153; // ebx
	int v154; // eax
	int v155; // ebx
	int v156; // ecx
	int v157; // edx
	int v158; // edi
	x_DWORD *v159; // edi
	int v160; // eax
	int v161; // ebx
	int v162; // esi
	int v163; // edi
	x_DWORD *v164; // edi
	int v165; // eax
	int v166; // ebx
	int v167; // edi
	x_DWORD *v168; // edi
	uint16_t *v169; // esi
	char *v170; // edx
	char v171; // al
	int v172; // ebx
	signed int v173; // ecx
	char *v174; // edi
	uint16_t *v175; // esi
	int v176; // ecx
	x_BYTE *v177; // edi
	unsigned int v178; // eax
	int16_t v179; // bx
	uint8_t v180; // cf
	uint16_t v181; // bx
	int16_t v182; // bx
	char v183; // ah
	int16_t v184; // cx
	int16_t v185; // bx
	char v186; // ah
	int16_t v187; // cx
	int16_t v188; // bx
	char v189; // ah
	int16_t v190; // cx
	int16_t v191; // bx
	char v192; // ah
	int16_t v193; // cx
	int16_t v194; // bx
	char v195; // ah
	int16_t v196; // cx
	int16_t v197; // bx
	char v198; // ah
	int16_t v199; // cx
	int16_t v200; // bx
	char v201; // ah
	int16_t v202; // cx
	int16_t v203; // bx
	char v204; // ah
	int16_t v205; // cx
	int16_t v206; // bx
	char v207; // ah
	int16_t v208; // cx
	int16_t v209; // bx
	char v210; // ah
	int16_t v211; // cx
	int16_t v212; // bx
	char v213; // ah
	int16_t v214; // cx
	int16_t v215; // bx
	char v216; // ah
	int16_t v217; // cx
	int16_t v218; // bx
	char v219; // ah
	int16_t v220; // cx
	int16_t v221; // bx
	char v222; // ah
	int16_t v223; // cx
	int16_t v224; // bx
	char v225; // ah
	int16_t v226; // cx
	uint16_t *v227; // esi
	int v228; // eax
	int v229; // ebx
	int v230; // ecx
	x_BYTE *v231; // edi
	int v232; // eax
	unsigned int v233; // eax
	int v234; // edx
	unsigned int v235; // eax
	int v236; // esi
	char v237; // al
	int v238; // edx
	int16_t v239; // cx
	char v240; // al
	int v241; // edx
	int16_t v242; // cx
	char v243; // al
	int v244; // edx
	int16_t v245; // cx
	char v246; // al
	int v247; // edx
	int16_t v248; // cx
	char v249; // al
	int v250; // edx
	int16_t v251; // cx
	char v252; // al
	int v253; // edx
	int16_t v254; // cx
	char v255; // al
	int v256; // edx
	int16_t v257; // cx
	char v258; // al
	int v259; // edx
	int16_t v260; // cx
	char v261; // al
	int v262; // edx
	int16_t v263; // cx
	char v264; // al
	int v265; // edx
	int16_t v266; // cx
	char v267; // al
	int v268; // edx
	int16_t v269; // cx
	char v270; // al
	int v271; // edx
	int16_t v272; // cx
	char v273; // al
	int v274; // edx
	int16_t v275; // cx
	char v276; // al
	int v277; // edx
	int16_t v278; // cx
	char v279; // al
	int v280; // edx
	int16_t v281; // cx
	char v282; // al
	uint16_t *v283; // esi
	int v284; // eax
	int v285; // ebx
	int v286; // ecx
	x_BYTE *v287; // edi
	int v288; // eax
	unsigned int v289; // eax
	int v290; // edx
	unsigned int v291; // eax
	int v292; // esi
	char v293; // al
	int v294; // edx
	int16_t v295; // cx
	char v296; // al
	int v297; // edx
	int16_t v298; // cx
	char v299; // al
	int v300; // edx
	int16_t v301; // cx
	char v302; // al
	int v303; // edx
	int16_t v304; // cx
	char v305; // al
	int v306; // edx
	int16_t v307; // cx
	char v308; // al
	int v309; // edx
	int16_t v310; // cx
	char v311; // al
	int v312; // edx
	int16_t v313; // cx
	char v314; // al
	int v315; // edx
	int16_t v316; // cx
	char v317; // al
	int v318; // edx
	int16_t v319; // cx
	char v320; // al
	int v321; // edx
	int16_t v322; // cx
	char v323; // al
	int v324; // edx
	int16_t v325; // cx
	char v326; // al
	int v327; // edx
	int16_t v328; // cx
	char v329; // al
	int v330; // edx
	int16_t v331; // cx
	char v332; // al
	int v333; // edx
	int16_t v334; // cx
	char v335; // al
	int v336; // edx
	int16_t v337; // cx
	char v338; // al
	uint16_t *v339; // esi
	int v340; // ecx
	x_BYTE *v341; // edi
	unsigned int v342; // eax
	int16_t v343; // bx
	uint16_t v344; // bx
	int16_t v345; // bx
	int16_t v346; // cx
	int16_t v347; // bx
	int16_t v348; // cx
	int16_t v349; // bx
	int16_t v350; // cx
	int16_t v351; // bx
	int16_t v352; // cx
	int16_t v353; // bx
	int16_t v354; // cx
	int16_t v355; // bx
	int16_t v356; // cx
	int16_t v357; // bx
	int16_t v358; // cx
	int16_t v359; // bx
	int16_t v360; // cx
	int16_t v361; // bx
	int16_t v362; // cx
	int16_t v363; // bx
	int16_t v364; // cx
	int16_t v365; // bx
	int16_t v366; // cx
	int16_t v367; // bx
	int16_t v368; // cx
	int16_t v369; // bx
	int16_t v370; // cx
	int16_t v371; // bx
	int16_t v372; // cx
	int16_t v373; // bx
	int16_t v374; // cx
	unsigned int v375; // eax
	int v376; // ebx
	char *v377; // esi
	int v378; // ecx
	Bit8u* v379; // edi
	int v380; // eax
	int v381; // ecx
	unsigned int v382; // eax
	int v383; // edx
	int v384; // ecx
	int16_t v385; // cx
	int16_t v386; // bp
	int v387; // esi
	x_BYTE *v388; // edi
	int v389; // ebp
	unsigned int v390; // eax
	int v391; // ebx
	char *v392; // esi
	int v393; // ecx
	Bit8u* v394; // edi
	int v395; // eax
	int v396; // ecx
	unsigned int v397; // eax
	int v398; // edx
	int v399; // ecx
	int16_t v400; // cx
	int16_t v401; // bp
	int v402; // esi
	x_BYTE *v403; // edi
	int v404; // ebp
	uint16_t *v405; // esi
	int v406; // eax
	int v407; // ebx
	int v408; // ecx
	x_BYTE *v409; // edi
	int v410; // eax
	unsigned int v411; // eax
	int v412; // edx
	unsigned int v413; // eax
	int v414; // esi
	int v415; // edx
	int16_t v416; // cx
	int v417; // edx
	int16_t v418; // cx
	int v419; // edx
	int16_t v420; // cx
	int v421; // edx
	int16_t v422; // cx
	int v423; // edx
	int16_t v424; // cx
	int v425; // edx
	int16_t v426; // cx
	int v427; // edx
	int16_t v428; // cx
	int v429; // edx
	int16_t v430; // cx
	int v431; // edx
	int16_t v432; // cx
	int v433; // edx
	int16_t v434; // cx
	int v435; // edx
	int16_t v436; // cx
	int v437; // edx
	int16_t v438; // cx
	int v439; // edx
	int16_t v440; // cx
	int v441; // edx
	int16_t v442; // cx
	int v443; // edx
	int16_t v444; // cx
	uint16_t *v445; // esi
	int v446; // eax
	int v447; // ebx
	int v448; // ecx
	x_BYTE *v449; // edi
	int v450; // eax
	unsigned int v451; // eax
	int v452; // edx
	unsigned int v453; // eax
	int v454; // esi
	int v455; // edx
	int16_t v456; // cx
	int v457; // edx
	int16_t v458; // cx
	int v459; // edx
	int16_t v460; // cx
	int v461; // edx
	int16_t v462; // cx
	int v463; // edx
	int16_t v464; // cx
	int v465; // edx
	int16_t v466; // cx
	int v467; // edx
	int16_t v468; // cx
	int v469; // edx
	int16_t v470; // cx
	int v471; // edx
	int16_t v472; // cx
	int v473; // edx
	int16_t v474; // cx
	int v475; // edx
	int16_t v476; // cx
	int v477; // edx
	int16_t v478; // cx
	int v479; // edx
	int16_t v480; // cx
	int v481; // edx
	int16_t v482; // cx
	int v483; // edx
	int16_t v484; // cx
	uint16_t *v485; // esi
	int v486; // eax
	int v487; // ebx
	int v488; // ecx
	x_BYTE *v489; // edi
	int v490; // eax
	unsigned int v491; // eax
	int v492; // edx
	unsigned int v493; // eax
	int v494; // esi
	int v495; // edx
	int16_t v496; // cx
	int v497; // edx
	int16_t v498; // cx
	int v499; // edx
	int16_t v500; // cx
	int v501; // edx
	int16_t v502; // cx
	int v503; // edx
	int16_t v504; // cx
	int v505; // edx
	int16_t v506; // cx
	int v507; // edx
	int16_t v508; // cx
	int v509; // edx
	int16_t v510; // cx
	int v511; // edx
	int16_t v512; // cx
	int v513; // edx
	int16_t v514; // cx
	int v515; // edx
	int16_t v516; // cx
	int v517; // edx
	int16_t v518; // cx
	int v519; // edx
	int16_t v520; // cx
	int v521; // edx
	int16_t v522; // cx
	int v523; // edx
	int16_t v524; // cx
	uint16_t *v525; // esi
	int v526; // eax
	int v527; // ebx
	int v528; // ecx
	x_BYTE *v529; // edi
	int v530; // eax
	unsigned int v531; // eax
	int v532; // edx
	unsigned int v533; // eax
	int v534; // esi
	int v535; // edx
	int16_t v536; // cx
	int v537; // edx
	int16_t v538; // cx
	int v539; // edx
	int16_t v540; // cx
	int v541; // edx
	int16_t v542; // cx
	int v543; // edx
	int16_t v544; // cx
	int v545; // edx
	int16_t v546; // cx
	int v547; // edx
	int16_t v548; // cx
	int v549; // edx
	int16_t v550; // cx
	int v551; // edx
	int16_t v552; // cx
	int v553; // edx
	int16_t v554; // cx
	int v555; // edx
	int16_t v556; // cx
	int v557; // edx
	int16_t v558; // cx
	int v559; // edx
	int16_t v560; // cx
	int v561; // edx
	int16_t v562; // cx
	int v563; // edx
	int16_t v564; // cx
	uint16_t *v565; // esi
	int v566; // eax
	int v567; // ebx
	int v568; // ecx
	x_BYTE *v569; // edi
	int v570; // eax
	unsigned int v571; // eax
	int v572; // edx
	unsigned int v573; // eax
	int v574; // esi
	int v575; // edx
	int16_t v576; // cx
	int v577; // edx
	int16_t v578; // cx
	int v579; // edx
	int16_t v580; // cx
	int v581; // edx
	int16_t v582; // cx
	int v583; // edx
	int16_t v584; // cx
	int v585; // edx
	int16_t v586; // cx
	int v587; // edx
	int16_t v588; // cx
	int v589; // edx
	int16_t v590; // cx
	int v591; // edx
	int16_t v592; // cx
	int v593; // edx
	int16_t v594; // cx
	int v595; // edx
	int16_t v596; // cx
	int v597; // edx
	int16_t v598; // cx
	int v599; // edx
	int16_t v600; // cx
	int v601; // edx
	int16_t v602; // cx
	int v603; // edx
	int16_t v604; // cx
	uint16_t *v605; // esi
	x_BYTE *v606; // edx
	int v607; // eax
	int v608; // ebx
	int v609; // ecx
	x_BYTE *i; // edi
	int16_t v611; // cx
	int16_t v612; // cx
	int16_t v613; // cx
	int16_t v614; // cx
	int16_t v615; // cx
	int16_t v616; // cx
	int16_t v617; // cx
	int16_t v618; // cx
	int16_t v619; // cx
	int16_t v620; // cx
	int16_t v621; // cx
	int16_t v622; // cx
	int16_t v623; // cx
	int16_t v624; // cx
	int16_t v625; // cx
	uint16_t *v626; // esi
	x_BYTE *v627; // edx
	int v628; // eax
	int v629; // ebx
	int v630; // ecx
	x_BYTE *j; // edi
	int16_t v632; // cx
	int16_t v633; // cx
	int16_t v634; // cx
	int16_t v635; // cx
	int16_t v636; // cx
	int16_t v637; // cx
	int16_t v638; // cx
	int16_t v639; // cx
	int16_t v640; // cx
	int16_t v641; // cx
	int16_t v642; // cx
	int16_t v643; // cx
	int16_t v644; // cx
	int16_t v645; // cx
	int16_t v646; // cx
	uint16_t *v647; // esi
	int v648; // edx
	int v649; // ecx
	x_BYTE *v650; // edi
	unsigned int v651; // eax
	int16_t v652; // bx
	uint16_t v653; // bx
	int16_t v654; // bx
	int16_t v655; // cx
	int16_t v656; // bx
	int16_t v657; // cx
	int16_t v658; // bx
	int16_t v659; // cx
	int16_t v660; // bx
	int16_t v661; // cx
	int16_t v662; // bx
	int16_t v663; // cx
	int16_t v664; // bx
	int16_t v665; // cx
	int16_t v666; // bx
	int16_t v667; // cx
	int16_t v668; // bx
	int16_t v669; // cx
	int16_t v670; // bx
	int16_t v671; // cx
	int16_t v672; // bx
	int16_t v673; // cx
	int16_t v674; // bx
	int16_t v675; // cx
	int16_t v676; // bx
	int16_t v677; // cx
	int16_t v678; // bx
	int16_t v679; // cx
	int16_t v680; // bx
	int16_t v681; // cx
	int16_t v682; // bx
	int16_t v683; // cx
	uint16_t *v684; // esi
	int v685; // edx
	int v686; // ecx
	x_BYTE *v687; // edi
	unsigned int v688; // eax
	int16_t v689; // bx
	uint16_t v690; // bx
	int16_t v691; // bx
	int16_t v692; // cx
	int16_t v693; // bx
	int16_t v694; // cx
	int16_t v695; // bx
	int16_t v696; // cx
	int16_t v697; // bx
	int16_t v698; // cx
	int16_t v699; // bx
	int16_t v700; // cx
	int16_t v701; // bx
	int16_t v702; // cx
	int16_t v703; // bx
	int16_t v704; // cx
	int16_t v705; // bx
	int16_t v706; // cx
	int16_t v707; // bx
	int16_t v708; // cx
	int16_t v709; // bx
	int16_t v710; // cx
	int16_t v711; // bx
	int16_t v712; // cx
	int16_t v713; // bx
	int16_t v714; // cx
	int16_t v715; // bx
	int16_t v716; // cx
	int16_t v717; // bx
	int16_t v718; // cx
	int16_t v719; // bx
	int16_t v720; // cx
	uint16_t *v721; // esi
	int v722; // eax
	int v723; // ebx
	int v724; // ecx
	x_BYTE *v725; // edi
	int v726; // eax
	unsigned int v727; // eax
	int v728; // edx
	unsigned int v729; // eax
	int v730; // esi
	int v731; // edx
	int16_t v732; // cx
	int v733; // edx
	int16_t v734; // cx
	int v735; // edx
	int16_t v736; // cx
	int v737; // edx
	int16_t v738; // cx
	int v739; // edx
	int16_t v740; // cx
	int v741; // edx
	int16_t v742; // cx
	int v743; // edx
	int16_t v744; // cx
	int v745; // edx
	int16_t v746; // cx
	int v747; // edx
	int16_t v748; // cx
	int v749; // edx
	int16_t v750; // cx
	int v751; // edx
	int16_t v752; // cx
	int v753; // edx
	int16_t v754; // cx
	int v755; // edx
	int16_t v756; // cx
	int v757; // edx
	int16_t v758; // cx
	int v759; // edx
	int16_t v760; // cx
	uint16_t *v761; // esi
	int v762; // eax
	int v763; // ebx
	int v764; // ecx
	x_BYTE *v765; // edi
	int v766; // eax
	unsigned int v767; // eax
	int v768; // edx
	unsigned int v769; // eax
	int v770; // esi
	int v771; // edx
	int16_t v772; // cx
	int v773; // edx
	int16_t v774; // cx
	int v775; // edx
	int16_t v776; // cx
	int v777; // edx
	int16_t v778; // cx
	int v779; // edx
	int16_t v780; // cx
	int v781; // edx
	int16_t v782; // cx
	int v783; // edx
	int16_t v784; // cx
	int v785; // edx
	int16_t v786; // cx
	int v787; // edx
	int16_t v788; // cx
	int v789; // edx
	int16_t v790; // cx
	int v791; // edx
	int16_t v792; // cx
	int v793; // edx
	int16_t v794; // cx
	int v795; // edx
	int16_t v796; // cx
	int v797; // edx
	int16_t v798; // cx
	int v799; // edx
	int16_t v800; // cx
	uint16_t *v801; // esi
	unsigned int v802; // eax
	int v803; // ebx
	int v804; // ecx
	x_BYTE *v805; // edi
	int v806; // eax
	int v807; // ecx
	unsigned int v808; // eax
	int v809; // edx
	int v810; // ecx
	int v811; // esi
	int v812; // edx
	int v813; // ecx
	int v814; // edx
	int v815; // ecx
	int v816; // edx
	int v817; // ecx
	int v818; // edx
	int v819; // ecx
	int v820; // edx
	int v821; // ecx
	int v822; // edx
	int v823; // ecx
	int v824; // edx
	int v825; // ecx
	int v826; // edx
	int v827; // ecx
	int v828; // edx
	int v829; // ecx
	int v830; // edx
	int v831; // ecx
	int v832; // edx
	int v833; // ecx
	int v834; // edx
	int v835; // ecx
	int v836; // edx
	int v837; // ecx
	int v838; // edx
	int v839; // ecx
	int v840; // edx
	int v841; // ecx
	uint16_t *v842; // esi
	unsigned int v843; // eax
	int v844; // ebx
	int v845; // ecx
	x_BYTE *v846; // edi
	int v847; // eax
	int v848; // ecx
	unsigned int v849; // eax
	int v850; // edx
	int v851; // ecx
	int v852; // esi
	int v853; // edx
	int v854; // ecx
	int v855; // edx
	int v856; // ecx
	int v857; // edx
	int v858; // ecx
	int v859; // edx
	int v860; // ecx
	int v861; // edx
	int v862; // ecx
	int v863; // edx
	int v864; // ecx
	int v865; // edx
	int v866; // ecx
	int v867; // edx
	int v868; // ecx
	int v869; // edx
	int v870; // ecx
	int v871; // edx
	int v872; // ecx
	int v873; // edx
	int v874; // ecx
	int v875; // edx
	int v876; // ecx
	int v877; // edx
	int v878; // ecx
	int v879; // edx
	int v880; // ecx
	int v881; // edx
	int v882; // ecx
	uint16_t *v883; // esi
	int v884; // eax
	int v885; // ebx
	int v886; // ecx
	x_BYTE *v887; // edi
	int v888; // eax
	unsigned int v889; // eax
	int v890; // edx
	unsigned int v891; // eax
	int v892; // esi
	int v893; // edx
	int16_t v894; // cx
	int v895; // edx
	int16_t v896; // cx
	int v897; // edx
	int16_t v898; // cx
	int v899; // edx
	int16_t v900; // cx
	int v901; // edx
	int16_t v902; // cx
	int v903; // edx
	int16_t v904; // cx
	int v905; // edx
	int16_t v906; // cx
	int v907; // edx
	int16_t v908; // cx
	int v909; // edx
	int16_t v910; // cx
	int v911; // edx
	int16_t v912; // cx
	int v913; // edx
	int16_t v914; // cx
	int v915; // edx
	int16_t v916; // cx
	int v917; // edx
	int16_t v918; // cx
	int v919; // edx
	int16_t v920; // cx
	int v921; // edx
	int16_t v922; // cx
	uint16_t *v923; // esi
	int v924; // eax
	int v925; // ebx
	int v926; // ecx
	x_BYTE *v927; // edi
	int v928; // eax
	unsigned int v929; // eax
	int v930; // edx
	unsigned int v931; // eax
	int v932; // esi
	int v933; // edx
	int16_t v934; // cx
	int v935; // edx
	int16_t v936; // cx
	int v937; // edx
	int16_t v938; // cx
	int v939; // edx
	int16_t v940; // cx
	int v941; // edx
	int16_t v942; // cx
	int v943; // edx
	int16_t v944; // cx
	int v945; // edx
	int16_t v946; // cx
	int v947; // edx
	int16_t v948; // cx
	int v949; // edx
	int16_t v950; // cx
	int v951; // edx
	int16_t v952; // cx
	int v953; // edx
	int16_t v954; // cx
	int v955; // edx
	int16_t v956; // cx
	int v957; // edx
	int16_t v958; // cx
	int v959; // edx
	int16_t v960; // cx
	int v961; // edx
	int16_t v962; // cx
	uint16_t *v963; // esi
	unsigned int v964; // eax
	int v965; // ebx
	int v966; // ecx
	x_BYTE *v967; // edi
	int v968; // eax
	int v969; // ecx
	unsigned int v970; // eax
	int v971; // edx
	int v972; // ecx
	int v973; // esi
	int v974; // edx
	int v975; // ecx
	int v976; // edx
	int v977; // ecx
	int v978; // edx
	int v979; // ecx
	int v980; // edx
	int v981; // ecx
	int v982; // edx
	int v983; // ecx
	int v984; // edx
	int v985; // ecx
	int v986; // edx
	int v987; // ecx
	int v988; // edx
	int v989; // ecx
	int v990; // edx
	int v991; // ecx
	int v992; // edx
	int v993; // ecx
	int v994; // edx
	int v995; // ecx
	int v996; // edx
	int v997; // ecx
	int v998; // edx
	int v999; // ecx
	int v1000; // edx
	int v1001; // ecx
	int v1002; // edx
	int v1003; // ecx
	uint16_t *v1004; // esi
	unsigned int v1005; // eax
	int v1006; // ebx
	int v1007; // ecx
	x_BYTE *v1008; // edi
	int v1009; // eax
	int v1010; // ecx
	unsigned int v1011; // eax
	int v1012; // edx
	int v1013; // ecx
	int v1014; // esi
	int v1015; // edx
	int v1016; // ecx
	int v1017; // edx
	int v1018; // ecx
	int v1019; // edx
	int v1020; // ecx
	int v1021; // edx
	int v1022; // ecx
	int v1023; // edx
	int v1024; // ecx
	int v1025; // edx
	int v1026; // ecx
	int v1027; // edx
	int v1028; // ecx
	int v1029; // edx
	int v1030; // ecx
	int v1031; // edx
	int v1032; // ecx
	int v1033; // edx
	int v1034; // ecx
	int v1035; // edx
	int v1036; // ecx
	int v1037; // edx
	int v1038; // ecx
	int v1039; // edx
	int v1040; // ecx
	int v1041; // edx
	int v1042; // ecx
	int v1043; // edx
	int v1044; // ecx
	uint16_t *v1045; // esi
	unsigned int v1046; // eax
	int v1047; // ebx
	int v1048; // ecx
	char *v1049; // edi
	int v1050; // eax
	int v1051; // ecx
	unsigned int v1052; // eax
	int v1053; // edx
	int v1054; // ecx
	int v1055; // esi
	char v1056; // al
	int v1057; // edx
	int v1058; // ecx
	char v1059; // al
	int v1060; // edx
	int v1061; // ecx
	char v1062; // al
	int v1063; // edx
	int v1064; // ecx
	char v1065; // al
	int v1066; // edx
	int v1067; // ecx
	char v1068; // al
	int v1069; // edx
	int v1070; // ecx
	char v1071; // al
	int v1072; // edx
	int v1073; // ecx
	char v1074; // al
	int v1075; // edx
	int v1076; // ecx
	char v1077; // al
	int v1078; // edx
	int v1079; // ecx
	char v1080; // al
	int v1081; // edx
	int v1082; // ecx
	char v1083; // al
	int v1084; // edx
	int v1085; // ecx
	char v1086; // al
	int v1087; // edx
	int v1088; // ecx
	char v1089; // al
	int v1090; // edx
	int v1091; // ecx
	char v1092; // al
	int v1093; // edx
	int v1094; // ecx
	char v1095; // al
	int v1096; // edx
	int v1097; // ecx
	char v1098; // al
	int v1099; // edx
	int v1100; // ecx
	char v1101; // al
	Bit8u* v1102; // [esp+0h] [ebp-88h]
	int v1103; // [esp+4h] [ebp-84h]
	int v1104; // [esp+4h] [ebp-84h]
	int v1105; // [esp+4h] [ebp-84h]
	int v1106; // [esp+4h] [ebp-84h]
	int v1107; // [esp+8h] [ebp-80h]
	int v1108; // [esp+8h] [ebp-80h]
	int v1109; // [esp+8h] [ebp-80h]
	int v1110; // [esp+8h] [ebp-80h]
	int v1111; // [esp+Ch] [ebp-7Ch]
	int v1112; // [esp+Ch] [ebp-7Ch]
	int v1113; // [esp+10h] [ebp-78h]
	int v1114; // [esp+10h] [ebp-78h]
	int v1115; // [esp+10h] [ebp-78h]
	int v1116; // [esp+10h] [ebp-78h]
	int v1117; // [esp+14h] [ebp-74h]
	int v1118; // [esp+14h] [ebp-74h]
	int v1119; // [esp+18h] [ebp-70h]
	int v1120; // [esp+18h] [ebp-70h]
	int v1121; // [esp+1Ch] [ebp-6Ch]
	int v1122; // [esp+1Ch] [ebp-6Ch]
	int v1123; // [esp+20h] [ebp-68h]
	int v1124; // [esp+24h] [ebp-64h]
	int v1125; // [esp+28h] [ebp-60h]
	int v1126; // [esp+28h] [ebp-60h]
	int v1127; // [esp+28h] [ebp-60h]
	int v1128; // [esp+28h] [ebp-60h]
	int v1129; // [esp+28h] [ebp-60h]
	int v1130; // [esp+28h] [ebp-60h]
	int v1131; // [esp+28h] [ebp-60h]
	int v1132; // [esp+28h] [ebp-60h]
	int v1133; // [esp+2Ch] [ebp-5Ch]
	int v1134; // [esp+2Ch] [ebp-5Ch]
	int v1135; // [esp+30h] [ebp-58h]
	int v1136; // [esp+34h] [ebp-54h]
	int v1137; // [esp+34h] [ebp-54h]
	int v1138; // [esp+34h] [ebp-54h]
	int v1139; // [esp+34h] [ebp-54h]
	int v1140; // [esp+34h] [ebp-54h]
	int v1141; // [esp+34h] [ebp-54h]
	int v1142; // [esp+34h] [ebp-54h]
	int v1143; // [esp+34h] [ebp-54h]
	int v1144; // [esp+38h] [ebp-50h]
	int v1145; // [esp+38h] [ebp-50h]
	int v1146; // [esp+3Ch] [ebp-4Ch]
	int v1147; // [esp+40h] [ebp-48h]
	int v1148; // [esp+40h] [ebp-48h]
	int v1149; // [esp+40h] [ebp-48h]
	int v1150; // [esp+40h] [ebp-48h]
	int v1151; // [esp+40h] [ebp-48h]
	int v1152; // [esp+40h] [ebp-48h]
	int v1153; // [esp+40h] [ebp-48h]
	int v1154; // [esp+40h] [ebp-48h]
	int v1155; // [esp+44h] [ebp-44h]
	int v1156; // [esp+44h] [ebp-44h]
	int v1157; // [esp+48h] [ebp-40h]
	int v1158; // [esp+48h] [ebp-40h]
	int v1159; // [esp+48h] [ebp-40h]
	int v1160; // [esp+48h] [ebp-40h]
	int v1161; // [esp+48h] [ebp-40h]
	int v1162; // [esp+48h] [ebp-40h]
	int v1163; // [esp+48h] [ebp-40h]
	int v1164; // [esp+48h] [ebp-40h]
	int v1165; // [esp+4Ch] [ebp-3Ch]
	int v1166; // [esp+4Ch] [ebp-3Ch]
	int v1167; // [esp+4Ch] [ebp-3Ch]
	int v1168; // [esp+4Ch] [ebp-3Ch]
	int v1169; // [esp+4Ch] [ebp-3Ch]
	int v1170; // [esp+4Ch] [ebp-3Ch]
	int v1171; // [esp+4Ch] [ebp-3Ch]
	int v1172; // [esp+4Ch] [ebp-3Ch]
	int v1173; // [esp+4Ch] [ebp-3Ch]
	int v1174; // [esp+4Ch] [ebp-3Ch]
	int v1175; // [esp+4Ch] [ebp-3Ch]
	int v1176; // [esp+4Ch] [ebp-3Ch]
	int v1177; // [esp+4Ch] [ebp-3Ch]
	int v1178; // [esp+4Ch] [ebp-3Ch]
	int v1179; // [esp+4Ch] [ebp-3Ch]
	int v1180; // [esp+4Ch] [ebp-3Ch]
	int v1181; // [esp+4Ch] [ebp-3Ch]
	int v1182; // [esp+4Ch] [ebp-3Ch]
	int v1183; // [esp+50h] [ebp-38h]
	int v1184; // [esp+50h] [ebp-38h]
	int v1185; // [esp+50h] [ebp-38h]
	int v1186; // [esp+50h] [ebp-38h]
	int v1187; // [esp+50h] [ebp-38h]
	int v1188; // [esp+50h] [ebp-38h]
	int v1189; // [esp+50h] [ebp-38h]
	int v1190; // [esp+54h] [ebp-34h]
	int v1191; // [esp+54h] [ebp-34h]
	int v1192; // [esp+54h] [ebp-34h]
	int v1193; // [esp+54h] [ebp-34h]
	int v1194; // [esp+58h] [ebp-30h]
	int v1195; // [esp+58h] [ebp-30h]
	int v1196; // [esp+58h] [ebp-30h]
	int v1197; // [esp+58h] [ebp-30h]
	int v1198; // [esp+58h] [ebp-30h]
	int v1199; // [esp+58h] [ebp-30h]
	int v1200; // [esp+58h] [ebp-30h]
	int v1201; // [esp+58h] [ebp-30h]
	int v1202; // [esp+58h] [ebp-30h]
	int v1203; // [esp+58h] [ebp-30h]
	int v1204; // [esp+58h] [ebp-30h]
	int v1205; // [esp+58h] [ebp-30h]
	int v1206; // [esp+58h] [ebp-30h]
	int v1207; // [esp+58h] [ebp-30h]
	int v1208; // [esp+58h] [ebp-30h]
	int v1209; // [esp+58h] [ebp-30h]
	int v1210; // [esp+58h] [ebp-30h]
	int v1211; // [esp+58h] [ebp-30h]
	int v1212; // [esp+58h] [ebp-30h]
	int v1213; // [esp+58h] [ebp-30h]
	int v1214; // [esp+58h] [ebp-30h]
	int v1215; // [esp+58h] [ebp-30h]
	int v1216; // [esp+58h] [ebp-30h]
	int v1217; // [esp+58h] [ebp-30h]
	int v1218; // [esp+58h] [ebp-30h]
	int v1219; // [esp+58h] [ebp-30h]
	int v1220; // [esp+58h] [ebp-30h]
	int v1221; // [esp+58h] [ebp-30h]
	int v1222; // [esp+58h] [ebp-30h]
	int v1223; // [esp+58h] [ebp-30h]
	int v1224; // [esp+58h] [ebp-30h]
	int v1225; // [esp+58h] [ebp-30h]
	int v1226; // [esp+58h] [ebp-30h]
	int v1227; // [esp+58h] [ebp-30h]
	int v1228; // [esp+58h] [ebp-30h]
	int v1229; // [esp+58h] [ebp-30h]
	int v1230; // [esp+58h] [ebp-30h]
	int v1231; // [esp+58h] [ebp-30h]
	int v1232; // [esp+58h] [ebp-30h]
	int v1233; // [esp+58h] [ebp-30h]
	int v1234; // [esp+58h] [ebp-30h]
	int v1235; // [esp+58h] [ebp-30h]
	int v1236; // [esp+58h] [ebp-30h]
	int v1237; // [esp+58h] [ebp-30h]
	int v1238; // [esp+58h] [ebp-30h]
	int v1239; // [esp+58h] [ebp-30h]
	int v1240; // [esp+58h] [ebp-30h]
	int v1241; // [esp+58h] [ebp-30h]
	int v1242; // [esp+58h] [ebp-30h]
	int v1243; // [esp+58h] [ebp-30h]
	int v1244; // [esp+58h] [ebp-30h]
	int v1245; // [esp+58h] [ebp-30h]
	int v1246; // [esp+58h] [ebp-30h]
	int v1247; // [esp+58h] [ebp-30h]
	int v1248; // [esp+58h] [ebp-30h]
	int v1249; // [esp+58h] [ebp-30h]
	int v1250; // [esp+58h] [ebp-30h]
	int v1251; // [esp+58h] [ebp-30h]
	int v1252; // [esp+58h] [ebp-30h]
	int v1253; // [esp+58h] [ebp-30h]
	int v1254; // [esp+58h] [ebp-30h]
	int v1255; // [esp+58h] [ebp-30h]
	int v1256; // [esp+58h] [ebp-30h]
	int v1257; // [esp+58h] [ebp-30h]
	int v1258; // [esp+58h] [ebp-30h]
	int v1259; // [esp+58h] [ebp-30h]
	int v1260; // [esp+58h] [ebp-30h]
	int v1261; // [esp+58h] [ebp-30h]
	int v1262; // [esp+58h] [ebp-30h]
	int v1263; // [esp+58h] [ebp-30h]
	int v1264; // [esp+58h] [ebp-30h]
	int v1265; // [esp+58h] [ebp-30h]
	int v1266; // [esp+58h] [ebp-30h]
	int v1267; // [esp+58h] [ebp-30h]
	int v1268; // [esp+58h] [ebp-30h]
	int v1269; // [esp+58h] [ebp-30h]
	int v1270; // [esp+58h] [ebp-30h]
	int v1271; // [esp+58h] [ebp-30h]
	int v1272; // [esp+58h] [ebp-30h]
	int v1273; // [esp+58h] [ebp-30h]
	uint16_t *v1274; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1275; // [esp+5Ch] [ebp-2Ch]
	char *v1276; // [esp+5Ch] [ebp-2Ch]
	char *v1277; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1278; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1279; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1280; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1281; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1282; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1283; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1284; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1285; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1286; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1287; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1288; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1289; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1290; // [esp+5Ch] [ebp-2Ch]
	uint16_t *v1291; // [esp+5Ch] [ebp-2Ch]
	char v1292; // [esp+62h] [ebp-26h]
	char v1293; // [esp+62h] [ebp-26h]
	char v1294; // [esp+62h] [ebp-26h]
	char v1295; // [esp+62h] [ebp-26h]
	char v1296; // [esp+63h] [ebp-25h]
	char v1297; // [esp+63h] [ebp-25h]
	bool v1298; // [esp+63h] [ebp-25h]
	bool v1299; // [esp+63h] [ebp-25h]
	bool v1300; // [esp+64h] [ebp-24h]
	bool v1301; // [esp+64h] [ebp-24h]
	
	//if(debugafterload)
	{
		if (debugcounter_297253>= 0xd1) {
			debugcounter_297253++;
			debugcounter_297253--;
		}
		debugcounter_297253++;
	}

	//fix it
	v1045 = 0;
	v1124 = 0;
	v1135 = 0;
	//fix it

	v3 = a1;
	v4 = a2;
	v5 = a3;
	v6 = a1[1];
	v7 = a2[1];
	v8 = a3[1];
	if (v6 == v7)
	{
		if (v6 == v8)
			return;
		if (v6 >= v8)
		{
			if (*a1 <= *a2)
				return;
			v3 = a3;
			v4 = a1;
			v5 = a2;
			goto LABEL_234;
		}
		if (*a2 <= *a1)
			return;
		goto LABEL_277;
	}
	if (v6 <= v7)
	{
		if (v6 != v8)
		{
			if (v6 >= v8)
			{
				v3 = a3;
				v4 = a1;
				v5 = a2;
			LABEL_24:
				v9 = v3[1];
				v1190 = v9;
				if (v9 >= 0)
				{
					if (v9 >= x_DWORD_DE568)
						return;
					v1102 = x_DWORD_DE554 + x_DWORD_DE560_ScreenWidth * v9;
					v1292 = 0;
				}
				else
				{
					v1102 = x_DWORD_DE554;
					v1292 = 1;
				}
				v10 = v5[1];
				v1300 = v10 > x_DWORD_DE568;
				v11 = v10 - v9;
				v1113 = v11;
				v1123 = v11;
				v12 = v4[1];
				v1296 = v12 > x_DWORD_DE568;
				v13 = v12 - v9;
				v1117 = v13;
				v1103 = ((*v5 - *v3) << 16) / v1113;
				if (((*v4 - *v3) << 16) / v13 > v1103)
				{
					v1107 = ((*v4 - *v3) << 16) / v13;
					v1111 = ((*v5 - *v4) << 16) / (v5[1] - v4[1]);
					v1119 = v5[1] - v4[1];
					v1121 = *v4 << 16;
					switch (x_BYTE_E126D)
					{
					case 0:
					case 0xE:
					case 0xF:
						v58 = *v3 << 16;
						v59 = *v3 << 16;
						if (!v1292)
						{
							if (v1300)
							{
								v63 = x_DWORD_DE568 - v1190;
								v1123 = x_DWORD_DE568 - v1190;
								if (v1296)
								{
									v1117 = x_DWORD_DE568 - v1190;
								}
								else
								{
									v18 = __OFSUB__(v63, v1117);
									v64 = v63 - v1117;
									v1296 = (v64 < 0) ^ v18 | (v64 == 0);
									v1119 = v64;
								}
							}
							goto LABEL_121;
						}
						v18 = __OFSUB__(v1123, -v1190);
						v16 = v1123 == -v1190;
						v17 = v1123 + v1190 < 0;
						v1123 += v1190;
						if (!((uint8_t)(v17 ^ v18) | (uint8_t)v16))
						{
							v1160 = -v1190;
							if (-v1190 - v1117 >= 0)
							{
								v1119 -= v1160 - v1117;
								v60 = v1160 - v1117;
								v58 += v1103 * v60 + v1117 * v1103;
								v61 = v1111 * v60 + v1121;
								if (v1300)
								{
									v1119 = x_DWORD_DE568;
									v1123 = x_DWORD_DE568;
								}
								v62 = (x_DWORD*)unk_DE56Cx;
								goto LABEL_124;
							}
							v1117 += v1190;
							v58 += v1103 * v1160;
							v59 += v1160 * v1107;
							if (v1300)
							{
								v1123 = x_DWORD_DE568;
								if (v1296)
								{
									v1117 = x_DWORD_DE568;
								}
								else
								{
									v1296 = x_DWORD_DE568 <= v1117;
									v1119 = x_DWORD_DE568 - v1117;
								}
							}
						LABEL_121:
							v62 = (x_DWORD*)unk_DE56Cx;
							do
							{
								v62[0] = v58;
								v58 += v1103;
								v62[1] = v59;
								v59 += v1107;
								v62 += 5;
								v1117--;
							} while (v1117);
							v61 = v1121;
						LABEL_124:
							if (v1296)
							{
								v31 = (uint8_t)x_BYTE_E126D;
							}
							else
							{
								do
								{
									v62[0] = v58;
									v58 += v1103;
									v62[1] = v61;
									v61 += v1111;
									v62 += 5;
									--v1119;
								} while (v1119);
								v31 = (uint8_t)x_BYTE_E126D;
							}
							goto LABEL_53;
						}
						return;
					case 1:
					case 4:
					case 0x10:
					case 0x11:
						v46 = v13 * (int64_t)(*v3 - *v5) / v1113;
						v47 = *v4 - *v3;
						v18 = __OFADD__(v46, v47);
						v48 = v46 + v47 == 0;
						v17 = v46 + v47 < 0;
						v49 = v46 + v47;
						if ((uint8_t)v17 ^ v18)
							return;
						if (!v48)
							v1146 = (signed int)(v4[4] + (uint64_t)(v1117 * (int64_t)(v3[4] - v5[4]) / v1113) - v3[4])
							/ (v49 + 1);
						v1148 = (v5[4] - v3[4]) / v1113;
						v50 = *v3 << 16;
						v51 = *v3 << 16;
						v52 = v3[4];
						if (v1292)
						{
							v18 = __OFSUB__(v1123, -v1190);
							v16 = v1123 == -v1190;
							v17 = v1123 + v1190 < 0;
							v1123 += v1190;
							if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
								return;
							v1159 = -v1190;
							if (-v1190 - v1117 >= 0)
							{
								v1119 -= v1159 - v1117;
								v53 = v1159 - v1117;
								v50 += v1103 * v53 + v1117 * v1103;
								v54 = v1111 * v53 + v1121;
								v52 += v53 * v1148 + v1117 * v1148;
								if (v1300)
								{
									v1119 = x_DWORD_DE568;
									v1123 = x_DWORD_DE568;
								}
								v55 = (x_DWORD*)unk_DE56Cx;
							LABEL_102:
								if (v1296)
								{
									v31 = (uint8_t)x_BYTE_E126D;
								}
								else
								{
									do
									{
										v55[0] = v50;
										v50 += v1103;
										v55[1] = v54;
										v54 += v1111;
										v55[4] = v52;
										v52 += v1148;
										v55 += 5;
										v1119--;
									} while (v1119);
									v31 = (uint8_t)x_BYTE_E126D;
								}
								goto LABEL_53;
							}
							v1117 += v1190;
							v50 += v1103 * v1159;
							v51 += v1159 * v1107;
							v52 += v1159 * v1148;
							if (v1300)
							{
								v1123 = x_DWORD_DE568;
								if (v1296)
								{
									v1117 = x_DWORD_DE568;
								}
								else
								{
									v1296 = x_DWORD_DE568 <= v1117;
									v1119 = x_DWORD_DE568 - v1117;
								}
							}
						}
						else if (v1300)
						{
							v56 = x_DWORD_DE568 - v1190;
							v1123 = x_DWORD_DE568 - v1190;
							if (v1296)
							{
								v1117 = x_DWORD_DE568 - v1190;
							}
							else
							{
								v18 = __OFSUB__(v56, v1117);
								v57 = v56 - v1117;
								v1296 = (v57 < 0) ^ v18 | (v57 == 0);
								v1119 = v57;
							}
						}
						v55 = (x_DWORD*)unk_DE56Cx;
						do
						{
							v55[0] = v50;
							v50 += v1103;
							v55[1] = v51;
							v51 += v1107;
							v55[4] = v52;
							v52 += v1148;
							v55 += 5;
							--v1117;
						} while (v1117);
						v54 = v1121;
						goto LABEL_102;
					case 2:
					case 3:
					case 7:
					case 8:
					case 9:
					case 0xA:
					case 0xB:
					case 0xC:
					case 0xD:
					case 0x12:
					case 0x13:
					case 0x16:
					case 0x17:
						v32 = v13 * (int64_t)(*v3 - *v5) / v1113;
						v33 = *v4 - *v3;
						v18 = __OFADD__(v32, v33);
						v34 = v32 + v33 == 0;
						v17 = v32 + v33 < 0;
						v35 = v32 + v33;
						if ((uint8_t)v17 ^ v18)
							return;
						if (!v34)
						{
							v36 = v35 + 1;
							v1124 = (signed int)(v4[2] + (uint64_t)(v1117 * (int64_t)(v3[2] - v5[2]) / v1113) - v3[2])
								/ v36;
							v1135 = (signed int)(v4[3] + (uint64_t)(v1117 * (int64_t)(v3[3] - v5[3]) / v1113) - v3[3])
								/ v36;
						}
						v1126 = (v5[2] - v3[2]) / v1113;
						v1137 = (v5[3] - v3[3]) / v1113;
						v37 = v3[0] << 16;
						v38 = v3[0] << 16;
						v39 = v3[2];
						v40 = v3[3];
						if (v1292)
						{
							v18 = __OFSUB__(v1123, -v1190);
							v16 = v1123 == -v1190;
							v17 = v1123 + v1190 < 0;
							v1123 += v1190;
							if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
								return;
							v1158 = -v1190;
							if (-v1190 - v1117 >= 0)
							{
								v1119 -= v1158 - v1117;
								v41 = v1158 - v1117;
								v37 += v1103 * v41 + v1117 * v1103;
								v42 = v1111 * v41 + v1121;
								v39 += v41 * v1126 + v1117 * v1126;
								v40 += v41 * v1137 + v1117 * v1137;
								if (v1300)
								{
									v1119 = x_DWORD_DE568;
									v1123 = x_DWORD_DE568;
								}
								v43 = (x_DWORD*)unk_DE56Cx;
							LABEL_77:
								if (v1296)
								{
									v31 = (uint8_t)x_BYTE_E126D;
								}
								else
								{
									do
									{
										v43[0] = v37;
										v37 += v1103;
										v43[1] = v42;
										v42 += v1111;
										v43[2] = v39;
										v39 += v1126;
										v43[3] = v40;
										v40 += v1137;
										v43 += 5;
										v1119--;
									} while (v1119);
									v31 = (uint8_t)x_BYTE_E126D;
								}
								goto LABEL_53;
							}
							v1117 += v1190;
							v37 += v1103 * v1158;
							v38 += v1158 * v1107;
							v39 += v1158 * v1126;
							v40 += v1158 * v1137;
							if (v1300)
							{
								v1123 = x_DWORD_DE568;
								if (v1296)
								{
									v1117 = x_DWORD_DE568;
								}
								else
								{
									v1296 = x_DWORD_DE568 <= v1117;
									v1119 = x_DWORD_DE568 - v1117;
								}
							}
						}
						else if (v1300)
						{
							v44 = x_DWORD_DE568 - v1190;
							v1123 = x_DWORD_DE568 - v1190;
							if (v1296)
							{
								v1117 = x_DWORD_DE568 - v1190;
							}
							else
							{
								v18 = __OFSUB__(v44, v1117);
								v45 = v44 - v1117;
								v1296 = (v45 < 0) ^ v18 | (v45 == 0);
								v1119 = v45;
							}
						}
						v43 = (x_DWORD*)unk_DE56Cx;
						do
						{
							v43[0] = v37;
							v37 += v1103;
							v43[1] = v38;
							v38 += v1107;
							v43[2] = v39;
							v39 += v1126;
							v43[3] = v40;
							v40 += v1137;
							v43 += 5;
							v1117--;
						} while (v1117);
						v42 = v1121;
						goto LABEL_77;
					case 5:
					case 6:
					case 0x14:
					case 0x15:
					case 0x18:
					case 0x19:
					case 0x1A:
						v14 = v13 * (int64_t)(*v3 - *v5) / v1113;
						v15 = *v4 - *v3;
						v18 = __OFADD__(v14, v15);
						v16 = v14 + v15 == 0;
						v17 = v14 + v15 < 0;
						v19 = v14 + v15;
						if ((uint8_t)v17 ^ v18)
							return;
						if (!v16)
						{
							v20 = v19 + 1;
							v1124 = (signed int)(v4[2] + (uint64_t)(v1117 * (int64_t)(v3[2] - v5[2]) / v1113) - v3[2])
								/ v20;
							v1135 = (signed int)(v4[3] + (uint64_t)(v1117 * (int64_t)(v3[3] - v5[3]) / v1113) - v3[3])
								/ v20;
							v1146 = (signed int)(v4[4] + (uint64_t)(v1117 * (int64_t)(v3[4] - v5[4]) / v1113) - v3[4])
								/ v20;
						}
						v1125 = (v5[2] - v3[2]) / v1113;
						v1136 = (v5[3] - v3[3]) / v1113;
						v1147 = (v5[4] - v3[4]) / v1113;
						v21 = v3[0] << 16;
						v22 = v3[0] << 16;
						v23 = v3[2];
						v24 = v3[3];
						v25 = v3[4];
						if (v1292)
						{
							v18 = __OFSUB__(v1123, -v1190);
							v16 = v1123 == -v1190;
							v17 = v1123 + v1190 < 0;
							v1123 += v1190;
							if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
								return;
							v1157 = -v1190;
							if (-v1190 - v1117 >= 0)
							{
								v1119 -= v1157 - v1117;
								v26 = v1157 - v1117;
								v21 += v1103 * v26 + v1117 * v1103;
								v27 = v1111 * v26 + v1121;
								v23 += v26 * v1125 + v1117 * v1125;
								v24 += v26 * v1136 + v1117 * v1136;
								v25 += v26 * v1147 + v1117 * v1147;
								if (v1300)
								{
									v1119 = x_DWORD_DE568;
									v1123 = x_DWORD_DE568;
								}
								v28 = (x_DWORD*)unk_DE56Cx;
							LABEL_51:
								if (v1296)
								{
									v31 = (uint8_t)x_BYTE_E126D;
								}
								else
								{
									do
									{
										v28[0] = v21;
										v21 += v1103;
										v28[1] = v27;
										v27 += v1111;
										v28[2] = v23;
										v23 += v1125;
										v28[3] = v24;
										v24 += v1136;
										v28[4] = v25;
										v25 += v1147;
										v28 += 5;
										--v1119;
									} while (v1119);
									v31 = (uint8_t)x_BYTE_E126D;
								}
								goto LABEL_53;
							}
							v1117 += v1190;
							v21 += v1103 * v1157;
							v22 += v1157 * v1107;
							v23 += v1157 * v1125;
							v24 += v1157 * v1136;
							v25 += v1157 * v1147;
							if (v1300)
							{
								v1123 = x_DWORD_DE568;
								if (v1296)
								{
									v1117 = x_DWORD_DE568;
								}
								else
								{
									v1296 = x_DWORD_DE568 <= v1117;
									v1119 = x_DWORD_DE568 - v1117;
								}
							}
						}
						else if (v1300)
						{
							v29 = x_DWORD_DE568 - v1190;
							v1123 = x_DWORD_DE568 - v1190;
							if (v1296)
							{
								v1117 = x_DWORD_DE568 - v1190;
							}
							else
							{
								v18 = __OFSUB__(v29, v1117);
								v30 = v29 - v1117;
								v1296 = (v30 < 0) ^ v18 | (v30 == 0);
								v1119 = v30;
							}
						}
						v28 = (x_DWORD*)unk_DE56Cx;
						do
						{
							v28[0] = v21;
							v21 += v1103;
							v28[1] = v22;
							v22 += v1107;
							v28[2] = v23;
							v23 += v1125;
							v28[3] = v24;
							v24 += v1136;
							v28[4] = v25;
							v25 += v1147;
							v28 += 5;
							v1117--;
						} while (v1117);
						v27 = v1121;
						goto LABEL_51;
					}
				}
				return;
			}
			if (v7 != v8)
			{
				if (v7 <= v8)
					goto LABEL_24;
				goto LABEL_129;
			}
			if (*a2 <= *a3)
				return;
		LABEL_234:
			v117 = v3[1];
			v1192 = v117;
			if (v117 >= 0)
			{
				if (v117 >= x_DWORD_DE568)
					return;
				v1102 = x_DWORD_DE554 + x_DWORD_DE560_ScreenWidth * v117;
				v1294 = 0;
			}
			else
			{
				v1102 = x_DWORD_DE554;
				v1294 = 1;
			}
			v118 = v5[1];
			v1298 = v118 > x_DWORD_DE568;
			v1115 = v118 - v117;
			v1123 = v118 - v117;
			v1105 = ((*v5 - *v3) << 16) / (v118 - v117);
			v1109 = ((*v4 - *v3) << 16) / (v118 - v117);
			switch (x_BYTE_E126D)
			{
			case 0:
			case 0xE:
			case 0xF:
				v139 = *v3 << 16;
				v140 = *v3 << 16;
				if (v1294)
				{
					v141 = -v1192;
					v1115 += v1192;
					v18 = __OFSUB__(v1123, -v1192);
					v16 = v1123 == -v1192;
					v17 = v1123 + v1192 < 0;
					v1123 += v1192;
					if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
						return;
					v139 += v1105 * v141;
					v140 += v141 * v1109;
					if (v1298)
					{
						v1123 = x_DWORD_DE568;
						v1115 = x_DWORD_DE568;
					}
				}
				else if (v1298)
				{
					v1123 = x_DWORD_DE568 - v1192;
					v1115 = x_DWORD_DE568 - v1192;
				}
				v142 = (x_DWORD*)unk_DE56Cx;
				do
				{
					v142[0] = v139;
					v139 += v1105;
					v142[1] = v140;
					v140 += v1109;
					v142 += 5;
					v1115--;
				} while (v1115);
				v31 = (uint8_t)x_BYTE_E126D;
				goto LABEL_53;
			case 1:
			case 4:
			case 0x10:
			case 0x11:
				v1146 = (v4[4] - v5[4]) / (*v4 - *v5);
				v1152 = (v5[4] - v3[4]) / v1123;
				v134 = *v3 << 16;
				v135 = *v3 << 16;
				v136 = v3[4];
				if (v1294)
				{
					v137 = -v1192;
					v1115 += v1192;
					v18 = __OFSUB__(v1123, -v1192);
					v16 = v1123 == -v1192;
					v17 = v1123 + v1192 < 0;
					v1123 += v1192;
					if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
						return;
					v134 += v1105 * v137;
					v135 += v137 * v1109;
					v136 += v137 * v1152;
					if (v1298)
					{
						v1123 = x_DWORD_DE568;
						v1115 = x_DWORD_DE568;
					}
				}
				else if (v1298)
				{
					v1123 = x_DWORD_DE568 - v1192;
					v1115 = x_DWORD_DE568 - v1192;
				}
				v138 = (x_DWORD*)unk_DE56Cx;
				do
				{
					v138[0] = v134;
					v134 += v1105;
					v138[1] = v135;
					v135 += v1109;
					v138[4] = v136;
					v136 += v1152;
					v138 += 5;
					v1115--;
				} while (v1115);
				v31 = (uint8_t)x_BYTE_E126D;
				goto LABEL_53;
			case 2:
			case 3:
			case 7:
			case 8:
			case 9:
			case 0xA:
			case 0xB:
			case 0xC:
			case 0xD:
			case 0x12:
			case 0x13:
			case 0x16:
			case 0x17:
				v127 = *v4 - *v5;
				v1124 = (v4[2] - v5[2]) / v127;
				v1135 = (v4[3] - v5[3]) / v127;
				v1130 = (v5[2] - v3[2]) / v1123;
				v1141 = (v5[3] - v3[3]) / v1123;
				v128 = *v3 << 16;
				v129 = *v3 << 16;
				v130 = v3[2];
				v131 = v3[3];
				if (v1294)
				{
					v132 = -v1192;
					v1115 += v1192;
					v18 = __OFSUB__(v1123, -v1192);
					v16 = v1123 == -v1192;
					v17 = v1123 + v1192 < 0;
					v1123 += v1192;
					if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
						return;
					v128 += v1105 * v132;
					v129 += v132 * v1109;
					v130 += v132 * v1130;
					v131 += v132 * v1141;
					if (v1298)
					{
						v1123 = x_DWORD_DE568;
						v1115 = x_DWORD_DE568;
					}
				}
				else if (v1298)
				{
					v1123 = x_DWORD_DE568 - v1192;
					v1115 = x_DWORD_DE568 - v1192;
				}
				v133 = (x_DWORD*)unk_DE56Cx;
				do
				{
					v133[0] = v128;
					v128 += v1105;
					v133[1] = v129;
					v129 += v1109;
					v133[2] = v130;
					v130 += v1130;
					v133[3] = v131;
					v131 += v1141;
					v133 += 5;
					v1115--;
				} while (v1115);
				v31 = (uint8_t)x_BYTE_E126D;
				goto LABEL_53;
			case 5:
			case 6:
			case 0x14:
			case 0x15:
			case 0x18:
			case 0x19:
			case 0x1A:
				v119 = *v4 - *v5;
				v1124 = (v4[2] - v5[2]) / v119;
				v1135 = (v4[3] - v5[3]) / v119;
				v1146 = (v4[4] - v5[4]) / v119;
				v1129 = (v5[2] - v3[2]) / v1123;
				v1140 = (v5[3] - v3[3]) / v1123;
				v1151 = (v5[4] - v3[4]) / v1123;
				v120 = *v3 << 16;
				v121 = *v3 << 16;
				v122 = v3[2];
				v123 = v3[3];
				v124 = v3[4];
				if (v1294)
				{
					v125 = -v1192;
					v1115 += v1192;
					v18 = __OFSUB__(v1123, -v1192);
					v16 = v1123 == -v1192;
					v17 = v1123 + v1192 < 0;
					v1123 += v1192;
					if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
						return;
					v120 += v1105 * v125;
					v121 += v125 * v1109;
					v122 += v125 * v1129;
					v123 += v125 * v1140;
					v124 += v125 * v1151;
					if (v1298)
					{
						v1123 = x_DWORD_DE568;
						v1115 = x_DWORD_DE568;
					}
				}
				else if (v1298)
				{
					v1123 = x_DWORD_DE568 - v1192;
					v1115 = x_DWORD_DE568 - v1192;
				}
				v126 = (x_DWORD*)unk_DE56Cx;
				do
				{
					v126[0] = v120;
					v120 += v1105;
					v126[1] = v121;
					v121 += v1109;
					v126[2] = v122;
					v122 += v1129;
					v126[3] = v123;
					v123 += v1140;
					v126[4] = v124;
					v124 += v1151;
					v126 += 5;
					v1115--;
				} while (v1115);
				v31 = (uint8_t)x_BYTE_E126D;
				goto LABEL_53;
			}
		}
		if (*a1 <= *a3)
			return;
		v3 = a3;
		v4 = a1;
		v5 = a2;
	LABEL_277:
		v143 = v3[1];
		v1193 = v143;
		if (v143 >= 0)
		{
			if (v143 >= x_DWORD_DE568)
				return;
			v1102 = x_DWORD_DE554 + x_DWORD_DE560_ScreenWidth * v143;
			v1295 = 0;
		}
		else
		{
			v1102 = x_DWORD_DE554;
			v1295 = 1;
		}
		v144 = v5[1];
		v1299 = v144 > x_DWORD_DE568;
		v1116 = v144 - v143;
		v1123 = v144 - v143;
		v1106 = ((*v5 - *v3) << 16) / (v144 - v143);
		v1110 = ((*v5 - *v4) << 16) / (v144 - v143);
		switch (x_BYTE_E126D)
		{
		case 0:
		case 0xE:
		case 0xF:
			v165 = *v3 << 16;
			v166 = *v4 << 16;
			if (v1295)
			{
				v167 = -v1193;
				v1116 += v1193;
				v18 = __OFSUB__(v1123, -v1193);
				v16 = v1123 == -v1193;
				v17 = v1123 + v1193 < 0;
				v1123 += v1193;
				if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
					return;
				v165 += v1106 * v167;
				v166 += v167 * v1110;
				if (v1299)
				{
					v1123 = x_DWORD_DE568;
					v1116 = x_DWORD_DE568;
				}
			}
			else if (v1299)
			{
				v1123 = x_DWORD_DE568 - v1193;
				v1116 = x_DWORD_DE568 - v1193;
			}
			v168 = (x_DWORD*)unk_DE56Cx;
			do
			{
				v168[0] = v165;
				v165 += v1106;
				v168[1] = v166;
				v166 += v1110;
				v168 += 5;
				v1116--;
			} while (v1116);
			v31 = (uint8_t)x_BYTE_E126D;
			goto LABEL_53;
		case 1:
		case 4:
		case 0x10:
		case 0x11:
			v1146 = (v4[4] - v3[4]) / (*v4 - *v3);
			v1154 = (v5[4] - v3[4]) / v1123;
			v160 = *v3 << 16;
			v161 = *v4 << 16;
			v162 = v3[4];
			if (v1295)
			{
				v163 = -v1193;
				v1116 += v1193;
				v18 = __OFSUB__(v1123, -v1193);
				v16 = v1123 == -v1193;
				v17 = v1123 + v1193 < 0;
				v1123 += v1193;
				if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
					return;
				v160 += v1106 * v163;
				v161 += v163 * v1110;
				v162 += v163 * v1154;
				if (v1299)
				{
					v1123 = x_DWORD_DE568;
					v1116 = x_DWORD_DE568;
				}
			}
			else if (v1299)
			{
				v1123 = x_DWORD_DE568 - v1193;
				v1116 = x_DWORD_DE568 - v1193;
			}
			v164 = (x_DWORD*)unk_DE56Cx;
			do
			{
				v164[0] = v160;
				v160 += v1106;
				v164[1] = v161;
				v161 += v1110;
				v164[4] = v162;
				v162 += v1154;
				v164 += 5;
				--v1116;
			} while (v1116);
			v31 = (uint8_t)x_BYTE_E126D;
			goto LABEL_53;
		case 2:
		case 3:
		case 7:
		case 8:
		case 9:
		case 0xA:
		case 0xB:
		case 0xC:
		case 0xD:
		case 0x12:
		case 0x13:
		case 0x16:
		case 0x17:
			v153 = *v4 - *v3;
			v1124 = (v4[2] - v3[2]) / v153;
			v1135 = (v4[3] - v3[3]) / v153;
			v1132 = (v5[2] - v3[2]) / v1123;
			v1143 = (v5[3] - v3[3]) / v1123;
			v154 = *v3 << 16;
			v155 = *v4 << 16;
			v156 = v3[2];
			v157 = v3[3];
			if (v1295)
			{
				v158 = -v1193;
				v1116 += v1193;
				v18 = __OFSUB__(v1123, -v1193);
				v16 = v1123 == -v1193;
				v17 = v1123 + v1193 < 0;
				v1123 += v1193;
				if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
					return;
				v154 += v1106 * v158;
				v155 += v158 * v1110;
				v156 += v158 * v1132;
				v157 += v158 * v1143;
				if (v1299)
				{
					v1123 = x_DWORD_DE568;
					v1116 = x_DWORD_DE568;
				}
			}
			else if (v1299)
			{
				v1123 = x_DWORD_DE568 - v1193;
				v1116 = x_DWORD_DE568 - v1193;
			}
			v159 = (x_DWORD*)unk_DE56Cx;
			do
			{
				v159[0] = v154;
				v154 += v1106;
				v159[1] = v155;
				v155 += v1110;
				v159[2] = v156;
				v156 += v1132;
				v159[3] = v157;
				v157 += v1143;
				v159 += 5;
				--v1116;
			} while (v1116);
			v31 = (uint8_t)x_BYTE_E126D;
			goto LABEL_53;
		case 5:
		case 6:
		case 0x14:
		case 0x15:
		case 0x18:
		case 0x19:
		case 0x1A:
			v145 = *v4 - *v3;
			v1124 = (v4[2] - v3[2]) / v145;
			v1135 = (v4[3] - v3[3]) / v145;
			v1146 = (v4[4] - v3[4]) / v145;
			v1131 = (v5[2] - v3[2]) / v1123;
			v1142 = (v5[3] - v3[3]) / v1123;
			v1153 = (v5[4] - v3[4]) / v1123;
			v146 = *v3 << 16;
			v147 = *v4 << 16;
			v148 = v3[2];
			v149 = v3[3];
			v150 = v3[4];
			if (v1295)
			{
				v151 = -v1193;
				v1116 += v1193;
				v18 = __OFSUB__(v1123, -v1193);
				v16 = v1123 == -v1193;
				v17 = v1123 + v1193 < 0;
				v1123 += v1193;
				if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
					return;
				v146 += v1106 * v151;
				v147 += v151 * v1110;
				v148 += v151 * v1131;
				v149 += v151 * v1142;
				v150 += v151 * v1153;
				if (v1299)
				{
					v1123 = x_DWORD_DE568;
					v1116 = x_DWORD_DE568;
				}
			}
			else if (v1299)
			{
				v1123 = x_DWORD_DE568 - v1193;
				v1116 = x_DWORD_DE568 - v1193;
			}
			v152 = (x_DWORD*)unk_DE56Cx;
			do
			{
				v152[0] = v146;
				v146 += v1106;
				v152[1] = v147;
				v147 += v1110;
				v152[2] = v148;
				v148 += v1131;
				v152[3] = v149;
				v149 += v1142;
				v152[4] = v150;
				v150 += v1153;
				v152 += 5;
				v1116--;
			} while (v1116);
			v31 = (uint8_t)x_BYTE_E126D;
			goto LABEL_53;
		}
	}
	if (v6 == v8)
	{
		if (*a3 <= *a1)
			return;
		v3 = a2;
		v4 = a3;
		v5 = a1;
		goto LABEL_234;
	}
	if (v6 < v8)
	{
		v3 = a2;
		v4 = a3;
		v5 = a1;
		goto LABEL_129;
	}
	if (v7 == v8)
	{
		if (*a3 <= *a2)
			return;
		v3 = a2;
		v4 = a3;
		v5 = a1;
		goto LABEL_277;
	}
	if (v7 < v8)
	{
		v3 = a2;
		v4 = a3;
		v5 = a1;
		goto LABEL_24;
	}
	v3 = a3;
	v4 = a1;
	v5 = a2;
LABEL_129:
	v65 = v3[1];
	v1191 = v65;
	if (v65 >= 0)
	{
		if (v65 >= x_DWORD_DE568)
			return;
		v1102 = x_DWORD_DE554 + x_DWORD_DE560_ScreenWidth * v65;
		v1293 = 0;
	}
	else
	{
		v1102 = x_DWORD_DE554;
		v1293 = 1;
	}
	v66 = v5[1];
	v1297 = v66 > x_DWORD_DE568;
	v1114 = v66 - v65;
	v67 = v4[1];
	v1301 = v67 > x_DWORD_DE568;
	v68 = v67 - v65;
	v1118 = v68;
	v1123 = v68;
	v1104 = ((*v5 - *v3) << 16) / v1114;
	if (((*v4 - *v3) << 16) / v68 > v1104)
	{
		v1108 = ((*v4 - *v3) << 16) / v68;
		v1112 = ((*v4 - *v5) << 16) / (v4[1] - v5[1]);
		v1120 = v4[1] - v5[1];
		v1122 = *v5 << 16;
		switch (x_BYTE_E126D)
		{
		case 0:
		case 0xE:
		case 0xF:
			v110 = *v3 << 16;
			v111 = *v3 << 16;
			if (v1293)
			{
				v18 = __OFSUB__(v1123, -v1191);
				v16 = v1123 == -v1191;
				v17 = v1123 + v1191 < 0;
				v1123 += v1191;
				if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
					return;
				v1164 = -v1191;
				if (-v1191 - v1114 >= 0)
				{
					v112 = v1164 - v1114;
					v1120 -= v112;
					v113 = v1112 * v112 + v1122;
					v111 += v112 * v1108 + v1114 * v1108;
					if (v1301)
					{
						v1120 = x_DWORD_DE568;
						v1123 = x_DWORD_DE568;
					}
					v114 = (int *)unk_DE56Cx;
					goto LABEL_228;
				}
				v1114 += v1191;
				v110 += v1104 * v1164;
				v111 += v1164 * v1108;
				if (v1301)
				{
					v1123 = x_DWORD_DE568;
					if (v1297)
					{
						v1114 = x_DWORD_DE568;
					}
					else
					{
						v1297 = x_DWORD_DE568 <= v1114;
						v1120 = x_DWORD_DE568 - v1114;
					}
				}
			}
			else if (v1301)
			{
				v115 = x_DWORD_DE568 - v1191;
				v1123 = x_DWORD_DE568 - v1191;
				if (v1297)
				{
					v1114 = x_DWORD_DE568 - v1191;
				}
				else
				{
					v18 = __OFSUB__(v115, v1114);
					v116 = v115 - v1114;
					v1297 = (v116 < 0) ^ v18 | (v116 == 0);
					v1120 = v116;
				}
			}
			v114 = (int *)unk_DE56Cx;
			do
			{
				v114[0] = v110;
				v110 += v1104;
				v114[1] = v111;
				v111 += v1108;
				v114 += 5;
				v1114--;
			} while (v1114);
			v113 = v1122;
		LABEL_228:
			if (v1297)
			{
				v31 = (uint8_t)x_BYTE_E126D;
			}
			else
			{
				do
				{
					v114[0] = v113;
					v113 += v1112;
					v114[1] = v111;
					v111 += v1108;
					v114 += 5;
					v1120--;
				} while (v1120);
				v31 = (uint8_t)x_BYTE_E126D;
			}
			goto LABEL_53;
		case 1:
		case 4:
		case 0x10:
		case 0x11:
			v98 = v1114 * (int64_t)(*v4 - *v3) / v68;
			v99 = *v3 - *v5;
			v18 = __OFADD__(v98, v99);
			v100 = v98 + v99 == 0;
			v17 = v98 + v99 < 0;
			v101 = v98 + v99;
			if ((uint8_t)v17 ^ v18)
				return;
			if (!v100)
				v1146 = (signed int)(v3[4] + (uint64_t)(v1114 * (int64_t)(v4[4] - v3[4]) / v1118) - v5[4])
				/ (v101 + 1);
			v1150 = (v5[4] - v3[4]) / v1114;
			v1156 = (v4[4] - v5[4]) / v1120;
			v102 = *v3 << 16;
			v103 = *v3 << 16;
			v104 = v3[4];
			if (v1293)
			{
				v18 = __OFSUB__(v1123, -v1191);
				v16 = v1123 == -v1191;
				v17 = v1123 + v1191 < 0;
				v1123 += v1191;
				if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
					return;
				v1163 = -v1191;
				if (-v1191 - v1114 >= 0)
				{
					v105 = v1163 - v1114;
					v1120 -= v105;
					v106 = v1112 * v105 + v1122;
					v103 += v105 * v1108 + v1114 * v1108;
					v104 += v105 * v1156 + v1114 * v1150;
					if (v1301)
					{
						v1120 = x_DWORD_DE568;
						v1123 = x_DWORD_DE568;
					}
					v107 = (int *)unk_DE56Cx;
				LABEL_206:
					if (v1297)
					{
						v31 = (uint8_t)x_BYTE_E126D;
					}
					else
					{
						do
						{
							v107[0] = v106;
							v106 += v1112;
							v107[1] = v103;
							v103 += v1108;
							v107[4] = v104;
							v104 += v1156;
							v107 += 5;
							v1120--;
						} while (v1120);
						v31 = (uint8_t)x_BYTE_E126D;
					}
					goto LABEL_53;
				}
				v1114 += v1191;
				v102 += v1104 * v1163;
				v103 += v1163 * v1108;
				v104 += v1163 * v1150;
				if (v1301)
				{
					v1123 = x_DWORD_DE568;
					if (v1297)
					{
						v1114 = x_DWORD_DE568;
					}
					else
					{
						v1297 = x_DWORD_DE568 <= v1114;
						v1120 = x_DWORD_DE568 - v1114;
					}
				}
			}
			else if (v1301)
			{
				v108 = x_DWORD_DE568 - v1191;
				v1123 = x_DWORD_DE568 - v1191;
				if (v1297)
				{
					v1114 = x_DWORD_DE568 - v1191;
				}
				else
				{
					v18 = __OFSUB__(v108, v1114);
					v109 = v108 - v1114;
					v1297 = (v109 < 0) ^ v18 | (v109 == 0);
					v1120 = v109;
				}
			}
			v107 = (int *)unk_DE56Cx;
			do
			{
				v107[0] = v102;
				v102 += v1104;
				v107[1] = v103;
				v103 += v1108;
				v107[4] = v104;
				v104 += v1150;
				v107 += 5;
				v1114--;
			} while (v1114);
			v106 = v1122;
			goto LABEL_206;
		case 2:
		case 3:
		case 7:
		case 8:
		case 9:
		case 0xA:
		case 0xB:
		case 0xC:
		case 0xD:
		case 0x12:
		case 0x13:
		case 0x16:
		case 0x17:
			v84 = v1114 * (int64_t)(*v4 - *v3) / v68;
			v85 = *v3 - *v5;
			v18 = __OFADD__(v84, v85);
			v86 = v84 + v85 == 0;
			v17 = v84 + v85 < 0;
			v87 = v84 + v85;
			if ((uint8_t)v17 ^ v18)
				return;
			if (!v86)
			{
				v88 = v87 + 1;
				v1124 = (signed int)(v3[2] + (uint64_t)(v1114 * (int64_t)(v4[2] - v3[2]) / v1118) - v5[2])
					/ v88;
				v1135 = (signed int)(v3[3] + (uint64_t)(v1114 * (int64_t)(v4[3] - v3[3]) / v1118) - v5[3])
					/ v88;
			}
			v1128 = (v5[2] - v3[2]) / v1114;
			v1139 = (v5[3] - v3[3]) / v1114;
			v1134 = (v4[2] - v5[2]) / v1120;
			v1145 = (v4[3] - v5[3]) / v1120;
			v89 = *v3 << 16;
			v90 = *v3 << 16;
			v91 = v3[2];
			v92 = v3[3];
			if (v1293)
			{
				v18 = __OFSUB__(v1123, -v1191);
				v16 = v1123 == -v1191;
				v17 = v1123 + v1191 < 0;
				v1123 += v1191;
				if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
					return;
				v1162 = -v1191;
				if (-v1191 - v1114 >= 0)
				{
					v93 = v1162 - v1114;
					v1120 -= v93;
					v94 = v1112 * v93 + v1122;
					v90 += v93 * v1108 + v1114 * v1108;
					v91 += v93 * v1134 + v1114 * v1128;
					v92 += v93 * v1145 + v1114 * v1139;
					if (v1301)
					{
						v1120 = x_DWORD_DE568;
						v1123 = x_DWORD_DE568;
					}
					v95 = (int *)unk_DE56Cx;
				LABEL_181:
					if (v1297)
					{
						v31 = (uint8_t)x_BYTE_E126D;
					}
					else
					{
						do
						{
							v95[0] = v94;
							v94 += v1112;
							v95[1] = v90;
							v90 += v1108;
							v95[2] = v91;
							v91 += v1134;
							v95[3] = v92;
							v92 += v1145;
							v95 += 5;
							v1120--;
						} while (v1120);
						v31 = (uint8_t)x_BYTE_E126D;
					}
					goto LABEL_53;
				}
				v1114 += v1191;
				v89 += v1104 * v1162;
				v90 += v1162 * v1108;
				v91 += v1162 * v1128;
				v92 += v1162 * v1139;
				if (v1301)
				{
					v1123 = x_DWORD_DE568;
					if (v1297)
					{
						v1114 = x_DWORD_DE568;
					}
					else
					{
						v1297 = x_DWORD_DE568 <= v1114;
						v1120 = x_DWORD_DE568 - v1114;
					}
				}
			}
			else if (v1301)
			{
				v96 = x_DWORD_DE568 - v1191;
				v1123 = x_DWORD_DE568 - v1191;
				if (v1297)
				{
					v1114 = x_DWORD_DE568 - v1191;
				}
				else
				{
					v18 = __OFSUB__(v96, v1114);
					v97 = v96 - v1114;
					v1297 = (v97 < 0) ^ v18 | (v97 == 0);
					v1120 = v97;
				}
			}
			v95 = (int *)unk_DE56Cx;
			do
			{
				v95[0] = v89;
				v89 += v1104;
				v95[1] = v90;
				v90 += v1108;
				v95[2] = v91;
				v91 += v1128;
				v95[3] = v92;
				v92 += v1139;
				v95 += 5;
				v1114--;
			} while (v1114);
			v94 = v1122;
			goto LABEL_181;
		case 5:
		case 6:
		case 0x14:
		case 0x15:
		case 0x18:
		case 0x19:
		case 0x1A:
			v69 = v1114 * (int64_t)(*v4 - *v3) / v68;
			v70 = *v3 - *v5;
			v18 = __OFADD__(v69, v70);
			v71 = v69 + v70 == 0;
			v17 = v69 + v70 < 0;
			v72 = v69 + v70;
			if ((uint8_t)v17 ^ v18)
				return;
			if (!v71)
			{
				v73 = v72 + 1;
				v1124 = (signed int)(v3[2] + (uint64_t)(v1114 * (int64_t)(v4[2] - v3[2]) / v1118) - v5[2])
					/ v73;
				v1135 = (signed int)(v3[3] + (uint64_t)(v1114 * (int64_t)(v4[3] - v3[3]) / v1118) - v5[3])
					/ v73;
				v69 = (signed int)(v3[4] + (uint64_t)(v1114 * (int64_t)(v4[4] - v3[4]) / v1118) - v5[4]) / v73;
			}
			v1146 = v69;
			v1127 = (v5[2] - v3[2]) / v1114;
			v1138 = (v5[3] - v3[3]) / v1114;
			v1149 = (v5[4] - v3[4]) / v1114;
			v1133 = (v4[2] - v5[2]) / v1120;
			v1144 = (v4[3] - v5[3]) / v1120;
			v1155 = (v4[4] - v5[4]) / v1120;
			v74 = *v3 << 16;
			v75 = *v3 << 16;
			v76 = v3[2];
			v77 = v3[3];
			v78 = v3[4];
			if (v1293)
			{
				v18 = __OFSUB__(v1123, -v1191);
				v16 = v1123 == -v1191;
				v17 = v1123 + v1191 < 0;
				v1123 += v1191;
				if ((uint8_t)(v17 ^ v18) | (uint8_t)v16)
					return;
				v1161 = -v1191;
				if (-v1191 - v1114 >= 0)
				{
					v79 = v1161 - v1114;
					v1120 -= v79;
					v80 = v1112 * v79 + v1122;
					v75 += v79 * v1108 + v1114 * v1108;
					v76 += v79 * v1133 + v1114 * v1127;
					v77 += v79 * v1144 + v1114 * v1138;
					v78 += v79 * v1155 + v1114 * v1149;
					if (v1301)
					{
						v1120 = x_DWORD_DE568;
						v1123 = x_DWORD_DE568;
					}
					v81 = (int *)unk_DE56Cx;
				LABEL_156:
					if (v1297)
					{
						v31 = (uint8_t)x_BYTE_E126D;
					}
					else
					{
						do
						{
							v81[0] = v80;
							v80 += v1112;
							v81[1] = v75;
							v75 += v1108;
							v81[2] = v76;
							v76 += v1133;
							v81[3] = v77;
							v77 += v1144;
							v81[4] = v78;
							v78 += v1155;
							v81 += 5;
							v1120--;
						} while (v1120);
						v31 = (uint8_t)x_BYTE_E126D;
					}
				LABEL_53:
					switch (x_BYTE_E126D)
					{
					case 0:
						v169 = (uint16_t *)unk_DE56Cx;
						v170 = (char *)v1102;
						v171 = x_BYTE_E126C;
						HIWORD(v172) = 0;
						while (1)
						{
							LOWORD(v172) = v169[1];
							v173 = v169[3];
							v170 += x_DWORD_DE560_ScreenWidth;
							if ((v172 & 0x8000u) == 0)
								break;
							if ((int16_t)v173 > 0)
							{
								if (v173 > x_DWORD_DE564)
									v173 = x_DWORD_DE564;
								v174 = v170;
							LABEL_328:
								memset(v174, v171, v173);
							}
						LABEL_329:
							v169 += 10;
							if (!--v1123)
								return;
						}
						if (v173 > x_DWORD_DE564)
							v173 = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v173, (x_WORD)v172);
						LOWORD(v173) = v173 - v172;
						if ((uint8_t)(((v173 & 0x8000u) != 0) ^ v18) | ((x_WORD)v173 == 0))
							goto LABEL_329;
						v174 = &v170[v172];
						goto LABEL_328;
					case 1:
						v175 = (uint16_t *)unk_DE56Cx;
						while (1)
						{
							LOWORD(v31) = v175[1];
							v176 = v175[3];
							v177 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v31 & 0x8000u) == 0)
								break;
							if ((int16_t)v176 > 0)
							{
								v178 = v1146 * (uint16_t)-(int16_t)v31;
								v179 = v178;
								v31 = v178 >> 8;
								v180 = __CFADD__(v175[8], v179);
								v181 = v175[8] + v179;
								BYTE1(v31) += *((x_BYTE *)v175 + 18) + v180;
								if (v176 > x_DWORD_DE564)
									LOWORD(v176) = x_DWORD_DE564;
								v31 = (uint16_t)v31;
							LABEL_341:
								while (1)
								{
									*v177 = BYTE1(v31);
									v180 = __CFADD__((x_WORD)v1146, v181);
									v182 = v1146 + v181;
									v183 = BYTE2(v1146) + v180 + BYTE1(v31);
									v184 = v176 - 1;
									if (!v184)
										break;
									v177[1] = v183;
									v180 = __CFADD__((x_WORD)v1146, v182);
									v185 = v1146 + v182;
									v186 = BYTE2(v1146) + v180 + v183;
									v187 = v184 - 1;
									if (!v187)
										break;
									v177[2] = v186;
									v180 = __CFADD__((x_WORD)v1146, v185);
									v188 = v1146 + v185;
									v189 = BYTE2(v1146) + v180 + v186;
									v190 = v187 - 1;
									if (!v190)
										break;
									v177[3] = v189;
									v180 = __CFADD__((x_WORD)v1146, v188);
									v191 = v1146 + v188;
									v192 = BYTE2(v1146) + v180 + v189;
									v193 = v190 - 1;
									if (!v193)
										break;
									v177[4] = v192;
									v180 = __CFADD__((x_WORD)v1146, v191);
									v194 = v1146 + v191;
									v195 = BYTE2(v1146) + v180 + v192;
									v196 = v193 - 1;
									if (!v196)
										break;
									v177[5] = v195;
									v180 = __CFADD__((x_WORD)v1146, v194);
									v197 = v1146 + v194;
									v198 = BYTE2(v1146) + v180 + v195;
									v199 = v196 - 1;
									if (!v199)
										break;
									v177[6] = v198;
									v180 = __CFADD__((x_WORD)v1146, v197);
									v200 = v1146 + v197;
									v201 = BYTE2(v1146) + v180 + v198;
									v202 = v199 - 1;
									if (!v202)
										break;
									v177[7] = v201;
									v180 = __CFADD__((x_WORD)v1146, v200);
									v203 = v1146 + v200;
									v204 = BYTE2(v1146) + v180 + v201;
									v205 = v202 - 1;
									if (!v205)
										break;
									v177[8] = v204;
									v180 = __CFADD__((x_WORD)v1146, v203);
									v206 = v1146 + v203;
									v207 = BYTE2(v1146) + v180 + v204;
									v208 = v205 - 1;
									if (!v208)
										break;
									v177[9] = v207;
									v180 = __CFADD__((x_WORD)v1146, v206);
									v209 = v1146 + v206;
									v210 = BYTE2(v1146) + v180 + v207;
									v211 = v208 - 1;
									if (!v211)
										break;
									v177[10] = v210;
									v180 = __CFADD__((x_WORD)v1146, v209);
									v212 = v1146 + v209;
									v213 = BYTE2(v1146) + v180 + v210;
									v214 = v211 - 1;
									if (!v214)
										break;
									v177[11] = v213;
									v180 = __CFADD__((x_WORD)v1146, v212);
									v215 = v1146 + v212;
									v216 = BYTE2(v1146) + v180 + v213;
									v217 = v214 - 1;
									if (!v217)
										break;
									v177[12] = v216;
									v180 = __CFADD__((x_WORD)v1146, v215);
									v218 = v1146 + v215;
									v219 = BYTE2(v1146) + v180 + v216;
									v220 = v217 - 1;
									if (!v220)
										break;
									v177[13] = v219;
									v180 = __CFADD__((x_WORD)v1146, v218);
									v221 = v1146 + v218;
									v222 = BYTE2(v1146) + v180 + v219;
									v223 = v220 - 1;
									if (!v223)
										break;
									v177[14] = v222;
									v180 = __CFADD__((x_WORD)v1146, v221);
									v224 = v1146 + v221;
									v225 = BYTE2(v1146) + v180 + v222;
									v226 = v223 - 1;
									if (!v226)
										break;
									v177[15] = v225;
									v180 = __CFADD__((x_WORD)v1146, v224);
									v181 = v1146 + v224;
									BYTE1(v31) = BYTE2(v1146) + v180 + v225;
									LOWORD(v176) = v226 - 1;
									if (!(x_WORD)v176)
										break;
									v177 += 16;
								}
							}
						LABEL_358:
							v175 += 10;
							if (!--v1123)
								return;
						}
						if (v176 > x_DWORD_DE564)
							LOWORD(v176) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v176, (x_WORD)v31);
						LOWORD(v176) = v176 - v31;
						if ((uint8_t)(((v176 & 0x8000u) != 0) ^ v18) | ((x_WORD)v176 == 0))
							goto LABEL_358;
						v177 += v31;
						v31 = (uint8_t)x_BYTE_E126C;
						v181 = v175[8];
						BYTE1(v31) = *((x_BYTE *)v175 + 18);
						goto LABEL_341;
					case 2:
						v227 = (uint16_t *)unk_DE56Cx;
						v1165 = v1135 << 16;
						HIWORD(v228) = 0;
						HIWORD(v229) = 0;
						while (1)
						{
							LOWORD(v228) = v227[1];
							v230 = v227[3];
							v231 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v228 & 0x8000u) == 0)
								break;
							if ((int16_t)v230 > 0)
							{
								v232 = (uint16_t)-(int16_t)v228;
								v234 = __ROL4__(*((x_DWORD *)v227 + 3) + v1135 * v232, 16);
								BYTE1(v229) = v234;
								v233 = *((x_DWORD *)v227 + 2) + v1124 * v232;
								LOWORD(v234) = v233;
								v235 = v233 >> 8;
								LOBYTE(v229) = BYTE1(v235);
								if (v230 > x_DWORD_DE564)
									LOWORD(v230) = x_DWORD_DE564;
								v228 = (uint16_t)v235;
							LABEL_370:
								v1274 = v227;
								v236 = x_DWORD_DE55C_ActTexture;
								while (1)
								{
									v237 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v234);
									LOWORD(v234) = v1124 + v234;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[0] = v237;
									v180 = __CFADD__(v1165, v234);
									v238 = v1165 + v234;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v239 = v230 - 1;
									if (!v239)
										break;
									v240 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v238);
									LOWORD(v238) = v1124 + v238;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[1] = v240;
									v180 = __CFADD__(v1165, v238);
									v241 = v1165 + v238;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v242 = v239 - 1;
									if (!v242)
										break;
									v243 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v241);
									LOWORD(v241) = v1124 + v241;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[2] = v243;
									v180 = __CFADD__(v1165, v241);
									v244 = v1165 + v241;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v245 = v242 - 1;
									if (!v245)
										break;
									v246 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v244);
									LOWORD(v244) = v1124 + v244;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[3] = v246;
									v180 = __CFADD__(v1165, v244);
									v247 = v1165 + v244;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v248 = v245 - 1;
									if (!v248)
										break;
									v249 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v247);
									LOWORD(v247) = v1124 + v247;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[4] = v249;
									v180 = __CFADD__(v1165, v247);
									v250 = v1165 + v247;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v251 = v248 - 1;
									if (!v251)
										break;
									v252 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v250);
									LOWORD(v250) = v1124 + v250;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[5] = v252;
									v180 = __CFADD__(v1165, v250);
									v253 = v1165 + v250;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v254 = v251 - 1;
									if (!v254)
										break;
									v255 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v253);
									LOWORD(v253) = v1124 + v253;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[6] = v255;
									v180 = __CFADD__(v1165, v253);
									v256 = v1165 + v253;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v257 = v254 - 1;
									if (!v257)
										break;
									v258 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v256);
									LOWORD(v256) = v1124 + v256;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[7] = v258;
									v180 = __CFADD__(v1165, v256);
									v259 = v1165 + v256;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v260 = v257 - 1;
									if (!v260)
										break;
									v261 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v259);
									LOWORD(v259) = v1124 + v259;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[8] = v261;
									v180 = __CFADD__(v1165, v259);
									v262 = v1165 + v259;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v263 = v260 - 1;
									if (!v263)
										break;
									v264 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v262);
									LOWORD(v262) = v1124 + v262;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[9] = v264;
									v180 = __CFADD__(v1165, v262);
									v265 = v1165 + v262;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v266 = v263 - 1;
									if (!v266)
										break;
									v267 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v265);
									LOWORD(v265) = v1124 + v265;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[10] = v267;
									v180 = __CFADD__(v1165, v265);
									v268 = v1165 + v265;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v269 = v266 - 1;
									if (!v269)
										break;
									v270 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v268);
									LOWORD(v268) = v1124 + v268;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[11] = v270;
									v180 = __CFADD__(v1165, v268);
									v271 = v1165 + v268;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v272 = v269 - 1;
									if (!v272)
										break;
									v273 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v271);
									LOWORD(v271) = v1124 + v271;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[12] = v273;
									v180 = __CFADD__(v1165, v271);
									v274 = v1165 + v271;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v275 = v272 - 1;
									if (!v275)
										break;
									v276 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v274);
									LOWORD(v274) = v1124 + v274;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[13] = v276;
									v180 = __CFADD__(v1165, v274);
									v277 = v1165 + v274;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v278 = v275 - 1;
									if (!v278)
										break;
									v279 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v277);
									LOWORD(v277) = v1124 + v277;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[14] = v279;
									v180 = __CFADD__(v1165, v277);
									v280 = v1165 + v277;
									BYTE1(v229) += BYTE2(v1135) + v180;
									v281 = v278 - 1;
									if (!v281)
										break;
									v282 = *(x_BYTE *)(v229 + v236);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v280);
									LOWORD(v280) = v1124 + v280;
									LOBYTE(v229) = BYTE2(v1124) + v180 + v229;
									v231[15] = v282;
									v180 = __CFADD__(v1165, v280);
									v234 = v1165 + v280;
									BYTE1(v229) += BYTE2(v1135) + v180;
									LOWORD(v230) = v281 - 1;
									if (!(x_WORD)v230)
										break;
									v231 += 16;
								}
								v227 = v1274;
							}
						LABEL_389:
							v227 += 10;
							if (!--v1123)
								return;
						}
						if (v230 > x_DWORD_DE564)
							LOWORD(v230) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v230, (x_WORD)v228);
						LOWORD(v230) = v230 - v228;
						if ((uint8_t)(((v230 & 0x8000u) != 0) ^ v18) | ((x_WORD)v230 == 0))
							goto LABEL_389;
						v231 += v228;
						v234 = __ROL4__(*((x_DWORD *)v227 + 3), 16);
						BYTE1(v229) = v234;
						LOWORD(v234) = v227[4];
						LOBYTE(v229) = *((x_BYTE *)v227 + 10);
						goto LABEL_370;
					case 3:
						v283 = (uint16_t *)unk_DE56Cx;
						v1166 = v1135 << 16;
						HIWORD(v284) = 0;
						HIWORD(v285) = 0;
						while (1)
						{
							LOWORD(v284) = v283[1];
							v286 = v283[3];
							v287 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v284 & 0x8000u) == 0)
								break;
							if ((int16_t)v286 > 0)
							{
								v288 = (uint16_t)-(int16_t)v284;
								v290 = __ROL4__(*((x_DWORD *)v283 + 3) + v1135 * v288, 16);
								BYTE1(v285) = v290;
								v289 = *((x_DWORD *)v283 + 2) + v1124 * v288;
								LOWORD(v290) = v289;
								v291 = v289 >> 8;
								LOBYTE(v285) = BYTE1(v291);
								if (v286 > x_DWORD_DE564)
									LOWORD(v286) = x_DWORD_DE564;
								v284 = (uint16_t)v291;
							LABEL_401:
								v1275 = v283;
								v292 = x_DWORD_DE55C_ActTexture;
								while (1)
								{
									v293 = *(x_BYTE *)(v285 + v292);
									if (v293)
										*v287 = v293;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v290);
									LOWORD(v290) = v1124 + v290;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v290);
									v294 = v1166 + v290;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v295 = v286 - 1;
									if (!v295)
										break;
									v296 = *(x_BYTE *)(v285 + v292);
									if (v296)
										v287[1] = v296;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v294);
									LOWORD(v294) = v1124 + v294;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v294);
									v297 = v1166 + v294;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v298 = v295 - 1;
									if (!v298)
										break;
									v299 = *(x_BYTE *)(v285 + v292);
									if (v299)
										v287[2] = v299;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v297);
									LOWORD(v297) = v1124 + v297;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v297);
									v300 = v1166 + v297;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v301 = v298 - 1;
									if (!v301)
										break;
									v302 = *(x_BYTE *)(v285 + v292);
									if (v302)
										v287[3] = v302;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v300);
									LOWORD(v300) = v1124 + v300;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v300);
									v303 = v1166 + v300;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v304 = v301 - 1;
									if (!v304)
										break;
									v305 = *(x_BYTE *)(v285 + v292);
									if (v305)
										v287[4] = v305;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v303);
									LOWORD(v303) = v1124 + v303;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v303);
									v306 = v1166 + v303;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v307 = v304 - 1;
									if (!v307)
										break;
									v308 = *(x_BYTE *)(v285 + v292);
									if (v308)
										v287[5] = v308;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v306);
									LOWORD(v306) = v1124 + v306;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v306);
									v309 = v1166 + v306;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v310 = v307 - 1;
									if (!v310)
										break;
									v311 = *(x_BYTE *)(v285 + v292);
									if (v311)
										v287[6] = v311;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v309);
									LOWORD(v309) = v1124 + v309;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v309);
									v312 = v1166 + v309;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v313 = v310 - 1;
									if (!v313)
										break;
									v314 = *(x_BYTE *)(v285 + v292);
									if (v314)
										v287[7] = v314;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v312);
									LOWORD(v312) = v1124 + v312;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v312);
									v315 = v1166 + v312;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v316 = v313 - 1;
									if (!v316)
										break;
									v317 = *(x_BYTE *)(v285 + v292);
									if (v317)
										v287[8] = v317;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v315);
									LOWORD(v315) = v1124 + v315;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v315);
									v318 = v1166 + v315;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v319 = v316 - 1;
									if (!v319)
										break;
									v320 = *(x_BYTE *)(v285 + v292);
									if (v320)
										v287[9] = v320;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v318);
									LOWORD(v318) = v1124 + v318;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v318);
									v321 = v1166 + v318;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v322 = v319 - 1;
									if (!v322)
										break;
									v323 = *(x_BYTE *)(v285 + v292);
									if (v323)
										v287[10] = v323;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v321);
									LOWORD(v321) = v1124 + v321;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v321);
									v324 = v1166 + v321;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v325 = v322 - 1;
									if (!v325)
										break;
									v326 = *(x_BYTE *)(v285 + v292);
									if (v326)
										v287[11] = v326;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v324);
									LOWORD(v324) = v1124 + v324;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v324);
									v327 = v1166 + v324;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v328 = v325 - 1;
									if (!v328)
										break;
									v329 = *(x_BYTE *)(v285 + v292);
									if (v329)
										v287[12] = v329;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v327);
									LOWORD(v327) = v1124 + v327;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v327);
									v330 = v1166 + v327;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v331 = v328 - 1;
									if (!v331)
										break;
									v332 = *(x_BYTE *)(v285 + v292);
									if (v332)
										v287[13] = v332;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v330);
									LOWORD(v330) = v1124 + v330;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v330);
									v333 = v1166 + v330;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v334 = v331 - 1;
									if (!v334)
										break;
									v335 = *(x_BYTE *)(v285 + v292);
									if (v335)
										v287[14] = v335;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v333);
									LOWORD(v333) = v1124 + v333;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v333);
									v336 = v1166 + v333;
									BYTE1(v285) += BYTE2(v1135) + v180;
									v337 = v334 - 1;
									if (!v337)
										break;
									v338 = *(x_BYTE *)(v285 + v292);
									if (v338)
										v287[15] = v338;
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v336);
									LOWORD(v336) = v1124 + v336;
									LOBYTE(v285) = BYTE2(v1124) + v180 + v285;
									v180 = __CFADD__(v1166, v336);
									v290 = v1166 + v336;
									BYTE1(v285) += BYTE2(v1135) + v180;
									LOWORD(v286) = v337 - 1;
									if (!(x_WORD)v286)
										break;
									v287 += 16;
								}
								v283 = v1275;
							}
						LABEL_452:
							v283 += 10;
							if (!--v1123)
								return;
						}
						if (v286 > x_DWORD_DE564)
							LOWORD(v286) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v286, (x_WORD)v284);
						LOWORD(v286) = v286 - v284;
						if ((uint8_t)(((v286 & 0x8000u) != 0) ^ v18) | ((x_WORD)v286 == 0))
							goto LABEL_452;
						v287 += v284;
						v290 = __ROL4__(*((x_DWORD *)v283 + 3), 16);
						BYTE1(v285) = v290;
						LOWORD(v290) = v283[4];
						LOBYTE(v285) = *((x_BYTE *)v283 + 10);
						goto LABEL_401;
					case 4:
						v339 = (uint16_t *)unk_DE56Cx;
						while (1)
						{
							LOWORD(v31) = v339[1];
							v340 = v339[3];
							v341 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v31 & 0x8000u) == 0)
								break;
							if ((int16_t)v340 > 0)
							{
								v342 = v1146 * (uint16_t)-(int16_t)v31;
								v343 = v342;
								v31 = v342 >> 8;
								v180 = __CFADD__(v339[8], v343);
								v344 = v339[8] + v343;
								BYTE1(v31) += *((x_BYTE *)v339 + 18) + v180;
								if (v340 > x_DWORD_DE564)
									LOWORD(v340) = x_DWORD_DE564;
								v31 = (uint16_t)v31;
								LOBYTE(v31) = x_BYTE_E126C;
							LABEL_464:
								while (1)
								{
									*v341 = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v344);
									v345 = v1146 + v344;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v346 = v340 - 1;
									if (!v346)
										break;
									v341[1] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v345);
									v347 = v1146 + v345;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v348 = v346 - 1;
									if (!v348)
										break;
									v341[2] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v347);
									v349 = v1146 + v347;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v350 = v348 - 1;
									if (!v350)
										break;
									v341[3] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v349);
									v351 = v1146 + v349;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v352 = v350 - 1;
									if (!v352)
										break;
									v341[4] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v351);
									v353 = v1146 + v351;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v354 = v352 - 1;
									if (!v354)
										break;
									v341[5] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v353);
									v355 = v1146 + v353;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v356 = v354 - 1;
									if (!v356)
										break;
									v341[6] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v355);
									v357 = v1146 + v355;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v358 = v356 - 1;
									if (!v358)
										break;
									v341[7] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v357);
									v359 = v1146 + v357;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v360 = v358 - 1;
									if (!v360)
										break;
									v341[8] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v359);
									v361 = v1146 + v359;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v362 = v360 - 1;
									if (!v362)
										break;
									v341[9] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v361);
									v363 = v1146 + v361;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v364 = v362 - 1;
									if (!v364)
										break;
									v341[10] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v363);
									v365 = v1146 + v363;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v366 = v364 - 1;
									if (!v366)
										break;
									v341[11] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v365);
									v367 = v1146 + v365;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v368 = v366 - 1;
									if (!v368)
										break;
									v341[12] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v367);
									v369 = v1146 + v367;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v370 = v368 - 1;
									if (!v370)
										break;
									v341[13] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v369);
									v371 = v1146 + v369;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v372 = v370 - 1;
									if (!v372)
										break;
									v341[14] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v371);
									v373 = v1146 + v371;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v374 = v372 - 1;
									if (!v374)
										break;
									v341[15] = x_BYTE_F6EE0_tablesx[v31];
									v180 = __CFADD__((x_WORD)v1146, v373);
									v344 = v1146 + v373;
									BYTE1(v31) += BYTE2(v1146) + v180;
									LOWORD(v340) = v374 - 1;
									if (!(x_WORD)v340)
										break;
									v341 += 16;
								}
							}
						LABEL_481:
							v339 += 10;
							if (!--v1123)
								return;
						}
						if (v340 > x_DWORD_DE564)
							LOWORD(v340) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v340, (x_WORD)v31);
						LOWORD(v340) = v340 - v31;
						if ((uint8_t)(((v340 & 0x8000u) != 0) ^ v18) | ((x_WORD)v340 == 0))
							goto LABEL_481;
						v341 += v31;
						v31 = (uint8_t)x_BYTE_E126C;
						v344 = v339[8];
						BYTE1(v31) = *((x_BYTE *)v339 + 18);
						goto LABEL_464;
					case 5:
						v1276 = (char *)unk_DE56Cx;
						v1167 = v1135 << 16;
						v1183 = v1146 << 16;
						HIWORD(v375) = 0;
						HIWORD(v376) = 0;
						while (1)
						{
							v377 = v1276;
							v1276 += 20;
							LOWORD(v375) = *((x_WORD *)v377 + 1);
							v378 = *((uint16_t *)v377 + 3);
							v379 = x_DWORD_DE560_ScreenWidth + v1102;
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v375 & 0x8000u) == 0)
								break;
							if ((int16_t)v378 > 0)
							{
								v380 = (uint16_t)-(int16_t)v375;
								v381 = v380;
								v383 = __ROL4__(*((x_DWORD *)v377 + 3) + v1135 * v380, 16);
								BYTE1(v376) = v383;
								v382 = *((x_DWORD *)v377 + 2) + v1124 * v380;
								LOWORD(v383) = v382;
								v375 = v382 >> 8;
								LOBYTE(v376) = BYTE1(v375);
								v384 = __ROL4__(*((x_DWORD *)v377 + 4) + v1146 * v381, 16);
								BYTE1(v375) = v384;
								LOWORD(v384) = *((x_WORD *)v377 + 3);
								v375 = (uint16_t)v375;
								if ((int16_t)v384 > (int16_t)x_DWORD_DE564)
									LOWORD(v384) = x_DWORD_DE564;
							LABEL_493:
								v387 = v384 & 0xF;
								v388 = (x_BYTE *)(x_DWORD_B8845[v387] + v379);
								v389 = x_DWORD_DE55C_ActTexture;
								switch (v387)
								{
								case 0:
									goto LABEL_494;
								case 1:
									goto LABEL_509;
								case 2:
									goto LABEL_508;
								case 3:
									goto LABEL_507;
								case 4:
									goto LABEL_506;
								case 5:
									goto LABEL_505;
								case 6:
									goto LABEL_504;
								case 7:
									goto LABEL_503;
								case 8:
									goto LABEL_502;
								case 9:
									goto LABEL_501;
								case 10:
									goto LABEL_500;
								case 11:
									goto LABEL_499;
								case 12:
									goto LABEL_498;
								case 13:
									goto LABEL_497;
								case 14:
									goto LABEL_496;
								case 15:
									while (1)
									{
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[1] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_496:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[2] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_497:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[3] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_498:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[4] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_499:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[5] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_500:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[6] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_501:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[7] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_502:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[8] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_503:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[9] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_504:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[10] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_505:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[11] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_506:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[12] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_507:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[13] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_508:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[14] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									LABEL_509:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										v388[15] = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
										v388 += 16;
										v18 = __OFSUB__((x_WORD)v384, 16);
										LOWORD(v384) = v384 - 16;
										if ((uint8_t)(((v384 & 0x8000u) != 0) ^ v18) | ((x_WORD)v384 == 0))
											break;
									LABEL_494:
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v383);
										LOWORD(v383) = v1124 + v383;
										LOBYTE(v375) = *(x_BYTE *)(v376 + v389);
										LOBYTE(v376) = BYTE2(v1124) + v180 + v376;
										v180 = __CFADD__(v1167, v383);
										v383 += v1167;
										BYTE1(v376) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1183, v384);
										v384 += v1183;
										*v388 = x_BYTE_F6EE0_tablesx[v375];
										BYTE1(v375) += BYTE2(v1146) + v180;
									}
									break;
								}
							}
						LABEL_510:
							if (!--v1123)
								return;
						}
						if (v378 > x_DWORD_DE564)
							LOWORD(v378) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v378, (x_WORD)v375);
						v385 = v378 - v375;
						if ((uint8_t)((v385 < 0) ^ v18) | (v385 == 0))
							goto LABEL_510;
						v379 += v375;
						LOBYTE(v376) = v377[10];
						v383 = __ROL4__(*((x_DWORD *)v377 + 3), 16);
						v386 = v385;
						BYTE1(v376) = v383;
						LOWORD(v383) = *((x_WORD *)v377 + 4);
						v384 = __ROL4__(*((x_DWORD *)v377 + 4), 16);
						BYTE1(v375) = v384;
						LOWORD(v384) = v386;
						goto LABEL_493;
					case 6:
						v1277 = (char *)unk_DE56Cx;
						v1168 = v1135 << 16;
						v1184 = v1146 << 16;
						HIWORD(v390) = 0;
						HIWORD(v391) = 0;
						while (1)
						{
							v392 = v1277;
							v1277 += 20;
							LOWORD(v390) = *((x_WORD *)v392 + 1);
							v393 = *((uint16_t *)v392 + 3);
							v394 = x_DWORD_DE560_ScreenWidth + v1102;
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v390 & 0x8000u) == 0)
								break;
							if ((int16_t)v393 > 0)
							{
								v395 = (uint16_t)-(int16_t)v390;
								v396 = v395;
								v398 = __ROL4__(*((x_DWORD *)v392 + 3) + v1135 * v395, 16);
								BYTE1(v391) = v398;
								v397 = *((x_DWORD *)v392 + 2) + v1124 * v395;
								LOWORD(v398) = v397;
								v390 = v397 >> 8;
								LOBYTE(v391) = BYTE1(v390);
								v399 = __ROL4__(*((x_DWORD *)v392 + 4) + v1146 * v396, 16);
								BYTE1(v390) = v399;
								LOWORD(v399) = *((x_WORD *)v392 + 3);
								v390 = (uint16_t)v390;
								if ((int16_t)v399 > (int16_t)x_DWORD_DE564)
									LOWORD(v399) = x_DWORD_DE564;
							LABEL_522:
								v402 = v399 & 0xF;
								v403 = (x_BYTE *)(x_DWORD_B8845[v402] + v394);
								v404 = x_DWORD_DE55C_ActTexture;
								switch (v402)
								{
								case 0:
									goto LABEL_523;
								case 1:
									goto LABEL_568;
								case 2:
									goto LABEL_565;
								case 3:
									goto LABEL_562;
								case 4:
									goto LABEL_559;
								case 5:
									goto LABEL_556;
								case 6:
									goto LABEL_553;
								case 7:
									goto LABEL_550;
								case 8:
									goto LABEL_547;
								case 9:
									goto LABEL_544;
								case 10:
									goto LABEL_541;
								case 11:
									goto LABEL_538;
								case 12:
									goto LABEL_535;
								case 13:
									goto LABEL_532;
								case 14:
									goto LABEL_529;
								case 15:
									while (1)
									{
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[1] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_529:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[2] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_532:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[3] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_535:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[4] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_538:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[5] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_541:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[6] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_544:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[7] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_547:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[8] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_550:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[9] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_553:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[10] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_556:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[11] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_559:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[12] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_562:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[13] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_565:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[14] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									LABEL_568:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											v403[15] = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
										v403 += 16;
										v18 = __OFSUB__((x_WORD)v399, 16);
										LOWORD(v399) = v399 - 16;
										if ((uint8_t)(((v399 & 0x8000u) != 0) ^ v18) | ((x_WORD)v399 == 0))
											break;
									LABEL_523:
										LOBYTE(v390) = *(x_BYTE *)(v391 + v404);
										if ((x_BYTE)v390)
											*v403 = x_BYTE_F6EE0_tablesx[v390];
										v180 = __CFADD__((x_WORD)v1124, (x_WORD)v398);
										LOWORD(v398) = v1124 + v398;
										LOBYTE(v391) = BYTE2(v1124) + v180 + v391;
										v180 = __CFADD__(v1168, v398);
										v398 += v1168;
										BYTE1(v391) += BYTE2(v1135) + v180;
										v180 = __CFADD__(v1184, v399);
										v399 += v1184;
										BYTE1(v390) += BYTE2(v1146) + v180;
									}
									break;
								}
							}
						LABEL_571:
							if (!--v1123)
								return;
						}
						if (v393 > x_DWORD_DE564)
							LOWORD(v393) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v393, (x_WORD)v390);
						v400 = v393 - v390;
						if ((uint8_t)((v400 < 0) ^ v18) | (v400 == 0))
							goto LABEL_571;
						v394 += v390;
						LOBYTE(v391) = v392[10];
						v398 = __ROL4__(*((x_DWORD *)v392 + 3), 16);
						v401 = v400;
						BYTE1(v391) = v398;
						LOWORD(v398) = *((x_WORD *)v392 + 4);
						v399 = __ROL4__(*((x_DWORD *)v392 + 4), 16);
						BYTE1(v390) = v399;
						LOWORD(v399) = v401;
						goto LABEL_522;
					case 7:
					case 0xB:
						v405 = (uint16_t *)unk_DE56Cx;
						v1169 = v1135 << 16;
						HIWORD(v406) = 0;
						HIWORD(v407) = 0;
						while (1)
						{
							LOWORD(v406) = v405[1];
							v408 = v405[3];
							v409 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v406 & 0x8000u) == 0)
								break;
							if ((int16_t)v408 > 0)
							{
								v410 = (uint16_t)-(int16_t)v406;
								v412 = __ROL4__(*((x_DWORD *)v405 + 3) + v1135 * v410, 16);
								BYTE1(v407) = v412;
								v411 = *((x_DWORD *)v405 + 2) + v1124 * v410;
								LOWORD(v412) = v411;
								v413 = v411 >> 8;
								LOBYTE(v407) = BYTE1(v413);
								if (v408 > x_DWORD_DE564)
									LOWORD(v408) = x_DWORD_DE564;
								v406 = (uint16_t)v413;
							LABEL_583:
								v1278 = v405;
								v414 = x_DWORD_DE55C_ActTexture;
								BYTE1(v406) = x_BYTE_E126C;
								while (1)
								{
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v412);
									LOWORD(v412) = v1124 + v412;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v412);
									v415 = v1169 + v412;
									*v409 = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v416 = v408 - 1;
									if (!v416)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v415);
									LOWORD(v415) = v1124 + v415;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v415);
									v417 = v1169 + v415;
									v409[1] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v418 = v416 - 1;
									if (!v418)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v417);
									LOWORD(v417) = v1124 + v417;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v417);
									v419 = v1169 + v417;
									v409[2] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v420 = v418 - 1;
									if (!v420)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v419);
									LOWORD(v419) = v1124 + v419;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v419);
									v421 = v1169 + v419;
									v409[3] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v422 = v420 - 1;
									if (!v422)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v421);
									LOWORD(v421) = v1124 + v421;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v421);
									v423 = v1169 + v421;
									v409[4] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v424 = v422 - 1;
									if (!v424)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v423);
									LOWORD(v423) = v1124 + v423;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v423);
									v425 = v1169 + v423;
									v409[5] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v426 = v424 - 1;
									if (!v426)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v425);
									LOWORD(v425) = v1124 + v425;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v425);
									v427 = v1169 + v425;
									v409[6] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v428 = v426 - 1;
									if (!v428)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v427);
									LOWORD(v427) = v1124 + v427;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v427);
									v429 = v1169 + v427;
									v409[7] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v430 = v428 - 1;
									if (!v430)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v429);
									LOWORD(v429) = v1124 + v429;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v429);
									v431 = v1169 + v429;
									v409[8] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v432 = v430 - 1;
									if (!v432)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v431);
									LOWORD(v431) = v1124 + v431;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v431);
									v433 = v1169 + v431;
									v409[9] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v434 = v432 - 1;
									if (!v434)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v433);
									LOWORD(v433) = v1124 + v433;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v433);
									v435 = v1169 + v433;
									v409[10] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v436 = v434 - 1;
									if (!v436)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v435);
									LOWORD(v435) = v1124 + v435;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v435);
									v437 = v1169 + v435;
									v409[11] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v438 = v436 - 1;
									if (!v438)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v437);
									LOWORD(v437) = v1124 + v437;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v437);
									v439 = v1169 + v437;
									v409[12] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v440 = v438 - 1;
									if (!v440)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v439);
									LOWORD(v439) = v1124 + v439;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v439);
									v441 = v1169 + v439;
									v409[13] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v442 = v440 - 1;
									if (!v442)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v441);
									LOWORD(v441) = v1124 + v441;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v441);
									v443 = v1169 + v441;
									v409[14] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									v444 = v442 - 1;
									if (!v444)
										break;
									LOBYTE(v406) = *(x_BYTE *)(v407 + v414);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v443);
									LOWORD(v443) = v1124 + v443;
									LOBYTE(v407) = BYTE2(v1124) + v180 + v407;
									v180 = __CFADD__(v1169, v443);
									v412 = v1169 + v443;
									v409[15] = x_BYTE_F6EE0_tablesx[v406];
									BYTE1(v407) += BYTE2(v1135) + v180;
									LOWORD(v408) = v444 - 1;
									if (!(x_WORD)v408)
										break;
									v409 += 16;
								}
								v405 = v1278;
							}
						LABEL_602:
							v405 += 10;
							if (!--v1123)
								return;
						}
						if (v408 > x_DWORD_DE564)
							LOWORD(v408) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v408, (x_WORD)v406);
						LOWORD(v408) = v408 - v406;
						if ((uint8_t)(((v408 & 0x8000u) != 0) ^ v18) | ((x_WORD)v408 == 0))
							goto LABEL_602;
						v409 += v406;
						v412 = __ROL4__(*((x_DWORD *)v405 + 3), 16);
						BYTE1(v407) = v412;
						LOWORD(v412) = v405[4];
						LOBYTE(v407) = *((x_BYTE *)v405 + 10);
						goto LABEL_583;
					case 8:
						v445 = (uint16_t *)unk_DE56Cx;
						v1170 = v1135 << 16;
						HIWORD(v446) = 0;
						HIWORD(v447) = 0;
						while (1)
						{
							LOWORD(v446) = v445[1];
							v448 = v445[3];
							v449 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v446 & 0x8000u) == 0)
								break;
							if ((int16_t)v448 > 0)
							{
								v450 = (uint16_t)-(int16_t)v446;
								v452 = __ROL4__(*((x_DWORD *)v445 + 3) + v1135 * v450, 16);
								BYTE1(v447) = v452;
								v451 = *((x_DWORD *)v445 + 2) + v1124 * v450;
								LOWORD(v452) = v451;
								v453 = v451 >> 8;
								LOBYTE(v447) = BYTE1(v453);
								if (v448 > x_DWORD_DE564)
									LOWORD(v448) = x_DWORD_DE564;
								v446 = (uint16_t)v453;
							LABEL_614:
								v1279 = v445;
								v454 = x_DWORD_DE55C_ActTexture;
								BYTE1(v446) = x_BYTE_E126C;
								while (1)
								{
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v452);
									LOWORD(v452) = v1124 + v452;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										*v449 = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v452);
									v455 = v1170 + v452;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v456 = v448 - 1;
									if (!v456)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v455);
									LOWORD(v455) = v1124 + v455;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[1] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v455);
									v457 = v1170 + v455;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v458 = v456 - 1;
									if (!v458)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v457);
									LOWORD(v457) = v1124 + v457;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[2] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v457);
									v459 = v1170 + v457;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v460 = v458 - 1;
									if (!v460)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v459);
									LOWORD(v459) = v1124 + v459;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[3] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v459);
									v461 = v1170 + v459;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v462 = v460 - 1;
									if (!v462)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v461);
									LOWORD(v461) = v1124 + v461;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[4] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v461);
									v463 = v1170 + v461;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v464 = v462 - 1;
									if (!v464)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v463);
									LOWORD(v463) = v1124 + v463;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[5] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v463);
									v465 = v1170 + v463;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v466 = v464 - 1;
									if (!v466)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v465);
									LOWORD(v465) = v1124 + v465;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[6] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v465);
									v467 = v1170 + v465;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v468 = v466 - 1;
									if (!v468)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v467);
									LOWORD(v467) = v1124 + v467;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[7] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v467);
									v469 = v1170 + v467;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v470 = v468 - 1;
									if (!v470)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v469);
									LOWORD(v469) = v1124 + v469;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[8] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v469);
									v471 = v1170 + v469;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v472 = v470 - 1;
									if (!v472)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v471);
									LOWORD(v471) = v1124 + v471;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[9] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v471);
									v473 = v1170 + v471;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v474 = v472 - 1;
									if (!v474)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v473);
									LOWORD(v473) = v1124 + v473;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[10] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v473);
									v475 = v1170 + v473;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v476 = v474 - 1;
									if (!v476)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v475);
									LOWORD(v475) = v1124 + v475;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[11] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v475);
									v477 = v1170 + v475;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v478 = v476 - 1;
									if (!v478)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v477);
									LOWORD(v477) = v1124 + v477;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[12] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v477);
									v479 = v1170 + v477;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v480 = v478 - 1;
									if (!v480)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v479);
									LOWORD(v479) = v1124 + v479;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[13] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v479);
									v481 = v1170 + v479;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v482 = v480 - 1;
									if (!v482)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v481);
									LOWORD(v481) = v1124 + v481;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[14] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v481);
									v483 = v1170 + v481;
									BYTE1(v447) += BYTE2(v1135) + v180;
									v484 = v482 - 1;
									if (!v484)
										break;
									LOBYTE(v446) = *(x_BYTE *)(v447 + v454);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v483);
									LOWORD(v483) = v1124 + v483;
									LOBYTE(v447) = BYTE2(v1124) + v180 + v447;
									if ((x_BYTE)v446)
										v449[15] = x_BYTE_F6EE0_tablesx[v446];
									v180 = __CFADD__(v1170, v483);
									v452 = v1170 + v483;
									BYTE1(v447) += BYTE2(v1135) + v180;
									LOWORD(v448) = v484 - 1;
									if (!(x_WORD)v448)
										break;
									v449 += 16;
								}
								v445 = v1279;
							}
						LABEL_665:
							v445 += 10;
							if (!--v1123)
								return;
						}
						if (v448 > x_DWORD_DE564)
							LOWORD(v448) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v448, (x_WORD)v446);
						LOWORD(v448) = v448 - v446;
						if ((uint8_t)(((v448 & 0x8000u) != 0) ^ v18) | ((x_WORD)v448 == 0))
							goto LABEL_665;
						v449 += v446;
						v452 = __ROL4__(*((x_DWORD *)v445 + 3), 16);
						BYTE1(v447) = v452;
						LOWORD(v452) = v445[4];
						LOBYTE(v447) = *((x_BYTE *)v445 + 10);
						goto LABEL_614;
					case 9:
					case 0xA:
						v485 = (uint16_t *)unk_DE56Cx;
						v1171 = v1135 << 16;
						HIWORD(v486) = 0;
						HIWORD(v487) = 0;
						while (1)
						{
							LOWORD(v486) = v485[1];
							v488 = v485[3];
							v489 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v486 & 0x8000u) == 0)
								break;
							if ((int16_t)v488 > 0)
							{
								v490 = (uint16_t)-(int16_t)v486;
								v492 = __ROL4__(*((x_DWORD *)v485 + 3) + v1135 * v490, 16);
								BYTE1(v487) = v492;
								v491 = *((x_DWORD *)v485 + 2) + v1124 * v490;
								LOWORD(v492) = v491;
								v493 = v491 >> 8;
								LOBYTE(v487) = BYTE1(v493);
								if (v488 > x_DWORD_DE564)
									LOWORD(v488) = x_DWORD_DE564;
								v486 = (uint16_t)v493;
							LABEL_677:
								v1280 = v485;
								v494 = x_DWORD_DE55C_ActTexture;
								while (1)
								{
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v492);
									LOWORD(v492) = v1124 + v492;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = *v489;
										*v489 = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v492);
									v495 = v1171 + v492;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v496 = v488 - 1;
									if (!v496)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v495);
									LOWORD(v495) = v1124 + v495;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[1];
										v489[1] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v495);
									v497 = v1171 + v495;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v498 = v496 - 1;
									if (!v498)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v497);
									LOWORD(v497) = v1124 + v497;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[2];
										v489[2] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v497);
									v499 = v1171 + v497;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v500 = v498 - 1;
									if (!v500)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v499);
									LOWORD(v499) = v1124 + v499;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[3];
										v489[3] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v499);
									v501 = v1171 + v499;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v502 = v500 - 1;
									if (!v502)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v501);
									LOWORD(v501) = v1124 + v501;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[4];
										v489[4] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v501);
									v503 = v1171 + v501;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v504 = v502 - 1;
									if (!v504)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v503);
									LOWORD(v503) = v1124 + v503;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[5];
										v489[5] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v503);
									v505 = v1171 + v503;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v506 = v504 - 1;
									if (!v506)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v505);
									LOWORD(v505) = v1124 + v505;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[6];
										v489[6] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v505);
									v507 = v1171 + v505;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v508 = v506 - 1;
									if (!v508)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v507);
									LOWORD(v507) = v1124 + v507;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[7];
										v489[7] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v507);
									v509 = v1171 + v507;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v510 = v508 - 1;
									if (!v510)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v509);
									LOWORD(v509) = v1124 + v509;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[8];
										v489[8] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v509);
									v511 = v1171 + v509;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v512 = v510 - 1;
									if (!v512)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v511);
									LOWORD(v511) = v1124 + v511;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[9];
										v489[9] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v511);
									v513 = v1171 + v511;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v514 = v512 - 1;
									if (!v514)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v513);
									LOWORD(v513) = v1124 + v513;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[10];
										v489[10] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v513);
									v515 = v1171 + v513;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v516 = v514 - 1;
									if (!v516)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v515);
									LOWORD(v515) = v1124 + v515;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[11];
										v489[11] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v515);
									v517 = v1171 + v515;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v518 = v516 - 1;
									if (!v518)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v517);
									LOWORD(v517) = v1124 + v517;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[12];
										v489[12] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v517);
									v519 = v1171 + v517;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v520 = v518 - 1;
									if (!v520)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v519);
									LOWORD(v519) = v1124 + v519;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[13];
										v489[13] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v519);
									v521 = v1171 + v519;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v522 = v520 - 1;
									if (!v522)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v521);
									LOWORD(v521) = v1124 + v521;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[14];
										v489[14] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v521);
									v523 = v1171 + v521;
									BYTE1(v487) += BYTE2(v1135) + v180;
									v524 = v522 - 1;
									if (!v524)
										break;
									BYTE1(v486) = *(x_BYTE *)(v487 + v494);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v523);
									LOWORD(v523) = v1124 + v523;
									LOBYTE(v487) = BYTE2(v1124) + v180 + v487;
									if (BYTE1(v486))
									{
										LOBYTE(v486) = v489[15];
										v489[15] = x_BYTE_F6EE0_tablesx[v486];
									}
									v180 = __CFADD__(v1171, v523);
									v492 = v1171 + v523;
									BYTE1(v487) += BYTE2(v1135) + v180;
									LOWORD(v488) = v524 - 1;
									if (!(x_WORD)v488)
										break;
									v489 += 16;
								}
								v485 = v1280;
							}
						LABEL_728:
							v485 += 10;
							if (!--v1123)
								return;
						}
						if (v488 > x_DWORD_DE564)
							LOWORD(v488) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v488, (x_WORD)v486);
						LOWORD(v488) = v488 - v486;
						if ((uint8_t)(((v488 & 0x8000u) != 0) ^ v18) | ((x_WORD)v488 == 0))
							goto LABEL_728;
						v489 += v486;
						v492 = __ROL4__(*((x_DWORD *)v485 + 3), 16);
						BYTE1(v487) = v492;
						LOWORD(v492) = v485[4];
						LOBYTE(v487) = *((x_BYTE *)v485 + 10);
						goto LABEL_677;
					case 0xC:
						v525 = (uint16_t *)unk_DE56Cx;
						v1172 = v1135 << 16;
						HIWORD(v526) = 0;
						HIWORD(v527) = 0;
						while (1)
						{
							LOWORD(v526) = v525[1];
							v528 = v525[3];
							v529 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v526 & 0x8000u) == 0)
								break;
							if ((int16_t)v528 > 0)
							{
								v530 = (uint16_t)-(int16_t)v526;
								v532 = __ROL4__(*((x_DWORD *)v525 + 3) + v1135 * v530, 16);
								BYTE1(v527) = v532;
								v531 = *((x_DWORD *)v525 + 2) + v1124 * v530;
								LOWORD(v532) = v531;
								v533 = v531 >> 8;
								LOBYTE(v527) = BYTE1(v533);
								if (v528 > x_DWORD_DE564)
									LOWORD(v528) = x_DWORD_DE564;
								v526 = (uint16_t)v533;
							LABEL_740:
								v1281 = v525;
								v534 = x_DWORD_DE55C_ActTexture;
								LOBYTE(v526) = x_BYTE_E126C;
								while (1)
								{
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v532);
									LOWORD(v532) = v1124 + v532;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v532);
									v535 = v1172 + v532;
									*v529 = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v536 = v528 - 1;
									if (!v536)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v535);
									LOWORD(v535) = v1124 + v535;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v535);
									v537 = v1172 + v535;
									v529[1] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v538 = v536 - 1;
									if (!v538)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v537);
									LOWORD(v537) = v1124 + v537;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v537);
									v539 = v1172 + v537;
									v529[2] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v540 = v538 - 1;
									if (!v540)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v539);
									LOWORD(v539) = v1124 + v539;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v539);
									v541 = v1172 + v539;
									v529[3] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v542 = v540 - 1;
									if (!v542)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v541);
									LOWORD(v541) = v1124 + v541;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v541);
									v543 = v1172 + v541;
									v529[4] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v544 = v542 - 1;
									if (!v544)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v543);
									LOWORD(v543) = v1124 + v543;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v543);
									v545 = v1172 + v543;
									v529[5] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v546 = v544 - 1;
									if (!v546)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v545);
									LOWORD(v545) = v1124 + v545;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v545);
									v547 = v1172 + v545;
									v529[6] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v548 = v546 - 1;
									if (!v548)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v547);
									LOWORD(v547) = v1124 + v547;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v547);
									v549 = v1172 + v547;
									v529[7] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v550 = v548 - 1;
									if (!v550)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v549);
									LOWORD(v549) = v1124 + v549;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v549);
									v551 = v1172 + v549;
									v529[8] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v552 = v550 - 1;
									if (!v552)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v551);
									LOWORD(v551) = v1124 + v551;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v551);
									v553 = v1172 + v551;
									v529[9] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v554 = v552 - 1;
									if (!v554)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v553);
									LOWORD(v553) = v1124 + v553;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v553);
									v555 = v1172 + v553;
									v529[10] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v556 = v554 - 1;
									if (!v556)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v555);
									LOWORD(v555) = v1124 + v555;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v555);
									v557 = v1172 + v555;
									v529[11] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v558 = v556 - 1;
									if (!v558)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v557);
									LOWORD(v557) = v1124 + v557;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v557);
									v559 = v1172 + v557;
									v529[12] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v560 = v558 - 1;
									if (!v560)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v559);
									LOWORD(v559) = v1124 + v559;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v559);
									v561 = v1172 + v559;
									v529[13] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v562 = v560 - 1;
									if (!v562)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v561);
									LOWORD(v561) = v1124 + v561;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v561);
									v563 = v1172 + v561;
									v529[14] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									v564 = v562 - 1;
									if (!v564)
										break;
									BYTE1(v526) = *(x_BYTE *)(v527 + v534);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v563);
									LOWORD(v563) = v1124 + v563;
									LOBYTE(v527) = BYTE2(v1124) + v180 + v527;
									v180 = __CFADD__(v1172, v563);
									v532 = v1172 + v563;
									v529[15] = x_BYTE_F6EE0_tablesx[0x4000+v526];
									BYTE1(v527) += BYTE2(v1135) + v180;
									LOWORD(v528) = v564 - 1;
									if (!(x_WORD)v528)
										break;
									v529 += 16;
								}
								v525 = v1281;
							}
						LABEL_759:
							v525 += 10;
							if (!--v1123)
								return;
						}
						if (v528 > x_DWORD_DE564)
							LOWORD(v528) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v528, (x_WORD)v526);
						LOWORD(v528) = v528 - v526;
						if ((uint8_t)(((v528 & 0x8000u) != 0) ^ v18) | ((x_WORD)v528 == 0))
							goto LABEL_759;
						v529 += v526;
						v532 = __ROL4__(*((x_DWORD *)v525 + 3), 16);
						BYTE1(v527) = v532;
						LOWORD(v532) = v525[4];
						LOBYTE(v527) = *((x_BYTE *)v525 + 10);
						goto LABEL_740;
					case 0xD:
						v565 = (uint16_t *)unk_DE56Cx;
						v1173 = v1135 << 16;
						HIWORD(v566) = 0;
						HIWORD(v567) = 0;
						while (1)
						{
							LOWORD(v566) = v565[1];
							v568 = v565[3];
							v569 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v566 & 0x8000u) == 0)
								break;
							if ((int16_t)v568 > 0)
							{
								v570 = (uint16_t)-(int16_t)v566;
								v572 = __ROL4__(*((x_DWORD *)v565 + 3) + v1135 * v570, 16);
								BYTE1(v567) = v572;
								v571 = *((x_DWORD *)v565 + 2) + v1124 * v570;
								LOWORD(v572) = v571;
								v573 = v571 >> 8;
								LOBYTE(v567) = BYTE1(v573);
								if (v568 > x_DWORD_DE564)
									LOWORD(v568) = x_DWORD_DE564;
								v566 = (uint16_t)v573;
							LABEL_771:
								v1282 = v565;
								v574 = x_DWORD_DE55C_ActTexture;
								BYTE1(v566) = x_BYTE_E126C;
								while (1)
								{
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v572);
									LOWORD(v572) = v1124 + v572;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v572);
									v575 = v1173 + v572;
									*v569 = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v576 = v568 - 1;
									if (!v576)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v575);
									LOWORD(v575) = v1124 + v575;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v575);
									v577 = v1173 + v575;
									v569[1] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v578 = v576 - 1;
									if (!v578)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v577);
									LOWORD(v577) = v1124 + v577;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v577);
									v579 = v1173 + v577;
									v569[2] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v580 = v578 - 1;
									if (!v580)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v579);
									LOWORD(v579) = v1124 + v579;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v579);
									v581 = v1173 + v579;
									v569[3] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v582 = v580 - 1;
									if (!v582)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v581);
									LOWORD(v581) = v1124 + v581;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v581);
									v583 = v1173 + v581;
									v569[4] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v584 = v582 - 1;
									if (!v584)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v583);
									LOWORD(v583) = v1124 + v583;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v583);
									v585 = v1173 + v583;
									v569[5] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v586 = v584 - 1;
									if (!v586)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v585);
									LOWORD(v585) = v1124 + v585;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v585);
									v587 = v1173 + v585;
									v569[6] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v588 = v586 - 1;
									if (!v588)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v587);
									LOWORD(v587) = v1124 + v587;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v587);
									v589 = v1173 + v587;
									v569[7] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v590 = v588 - 1;
									if (!v590)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v589);
									LOWORD(v589) = v1124 + v589;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v589);
									v591 = v1173 + v589;
									v569[8] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v592 = v590 - 1;
									if (!v592)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v591);
									LOWORD(v591) = v1124 + v591;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v591);
									v593 = v1173 + v591;
									v569[9] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v594 = v592 - 1;
									if (!v594)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v593);
									LOWORD(v593) = v1124 + v593;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v593);
									v595 = v1173 + v593;
									v569[10] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v596 = v594 - 1;
									if (!v596)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v595);
									LOWORD(v595) = v1124 + v595;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v595);
									v597 = v1173 + v595;
									v569[11] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v598 = v596 - 1;
									if (!v598)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v597);
									LOWORD(v597) = v1124 + v597;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v597);
									v599 = v1173 + v597;
									v569[12] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v600 = v598 - 1;
									if (!v600)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v599);
									LOWORD(v599) = v1124 + v599;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v599);
									v601 = v1173 + v599;
									v569[13] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v602 = v600 - 1;
									if (!v602)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v601);
									LOWORD(v601) = v1124 + v601;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v601);
									v603 = v1173 + v601;
									v569[14] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									v604 = v602 - 1;
									if (!v604)
										break;
									LOBYTE(v566) = *(x_BYTE *)(v567 + v574);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v603);
									LOWORD(v603) = v1124 + v603;
									LOBYTE(v567) = BYTE2(v1124) + v180 + v567;
									v180 = __CFADD__(v1173, v603);
									v572 = v1173 + v603;
									v569[15] = x_BYTE_F6EE0_tablesx[0x4000+v566];
									BYTE1(v567) += BYTE2(v1135) + v180;
									LOWORD(v568) = v604 - 1;
									if (!(x_WORD)v568)
										break;
									v569 += 16;
								}
								v565 = v1282;
							}
						LABEL_790:
							v565 += 10;
							if (!--v1123)
								return;
						}
						if (v568 > x_DWORD_DE564)
							LOWORD(v568) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v568, (x_WORD)v566);
						LOWORD(v568) = v568 - v566;
						if ((uint8_t)(((v568 & 0x8000u) != 0) ^ v18) | ((x_WORD)v568 == 0))
							goto LABEL_790;
						v569 += v566;
						v572 = __ROL4__(*((x_DWORD *)v565 + 3), 16);
						BYTE1(v567) = v572;
						LOWORD(v572) = v565[4];
						LOBYTE(v567) = *((x_BYTE *)v565 + 10);
						goto LABEL_771;
					case 0xE:
						v605 = (uint16_t *)unk_DE56Cx;
						v606 = (x_BYTE *)v1102;
						HIWORD(v607) = 0;
						BYTE1(v607) = x_BYTE_E126C;
						HIWORD(v608) = 0;
						while (1)
						{
							LOWORD(v608) = v605[1];
							v609 = v605[3];
							v606 += x_DWORD_DE560_ScreenWidth;
							if ((v608 & 0x8000u) == 0)
								break;
							if ((int16_t)v609 > 0)
							{
								if (v609 > x_DWORD_DE564)
									LOWORD(v609) = x_DWORD_DE564;
							LABEL_802:
								for (i = v606; ; i += 16)
								{
									LOBYTE(v607) = *i;
									*i = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v611 = v609 - 1;
									if (!v611)
										break;
									LOBYTE(v607) = i[1];
									i[1] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v612 = v611 - 1;
									if (!v612)
										break;
									LOBYTE(v607) = i[2];
									i[2] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v613 = v612 - 1;
									if (!v613)
										break;
									LOBYTE(v607) = i[3];
									i[3] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v614 = v613 - 1;
									if (!v614)
										break;
									LOBYTE(v607) = i[4];
									i[4] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v615 = v614 - 1;
									if (!v615)
										break;
									LOBYTE(v607) = i[5];
									i[5] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v616 = v615 - 1;
									if (!v616)
										break;
									LOBYTE(v607) = i[6];
									i[6] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v617 = v616 - 1;
									if (!v617)
										break;
									LOBYTE(v607) = i[7];
									i[7] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v618 = v617 - 1;
									if (!v618)
										break;
									LOBYTE(v607) = i[8];
									i[8] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v619 = v618 - 1;
									if (!v619)
										break;
									LOBYTE(v607) = i[9];
									i[9] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v620 = v619 - 1;
									if (!v620)
										break;
									LOBYTE(v607) = i[10];
									i[10] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v621 = v620 - 1;
									if (!v621)
										break;
									LOBYTE(v607) = i[11];
									i[11] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v622 = v621 - 1;
									if (!v622)
										break;
									LOBYTE(v607) = i[12];
									i[12] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v623 = v622 - 1;
									if (!v623)
										break;
									LOBYTE(v607) = i[13];
									i[13] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v624 = v623 - 1;
									if (!v624)
										break;
									LOBYTE(v607) = i[14];
									i[14] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									v625 = v624 - 1;
									if (!v625)
										break;
									LOBYTE(v607) = i[15];
									i[15] = x_BYTE_F6EE0_tablesx[0x4000+v607];
									LOWORD(v609) = v625 - 1;
									if (!(x_WORD)v609)
										break;
								}
							}
						LABEL_819:
							v605 += 10;
							if (!--v1123)
								return;
						}
						if (v609 > x_DWORD_DE564)
							LOWORD(v609) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v609, (x_WORD)v608);
						LOWORD(v609) = v609 - v608;
						if ((uint8_t)(((v609 & 0x8000u) != 0) ^ v18) | ((x_WORD)v609 == 0))
							goto LABEL_819;
						i = &v606[v608];
						goto LABEL_802;
					case 0xF:
						v626 = (uint16_t *)unk_DE56Cx;
						v627 = (x_BYTE *)v1102;
						v628 = (uint8_t)x_BYTE_E126C;
						HIWORD(v629) = 0;
						while (1)
						{
							LOWORD(v629) = v626[1];
							v630 = v626[3];
							v627 += x_DWORD_DE560_ScreenWidth;
							if ((v629 & 0x8000u) == 0)
								break;
							if ((int16_t)v630 > 0)
							{
								if (v630 > x_DWORD_DE564)
									LOWORD(v630) = x_DWORD_DE564;
							LABEL_831:
								for (j = v627; ; j += 16)
								{
									BYTE1(v628) = *j;
									*j = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v632 = v630 - 1;
									if (!v632)
										break;
									BYTE1(v628) = j[1];
									j[1] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v633 = v632 - 1;
									if (!v633)
										break;
									BYTE1(v628) = j[2];
									j[2] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v634 = v633 - 1;
									if (!v634)
										break;
									BYTE1(v628) = j[3];
									j[3] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v635 = v634 - 1;
									if (!v635)
										break;
									BYTE1(v628) = j[4];
									j[4] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v636 = v635 - 1;
									if (!v636)
										break;
									BYTE1(v628) = j[5];
									j[5] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v637 = v636 - 1;
									if (!v637)
										break;
									BYTE1(v628) = j[6];
									j[6] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v638 = v637 - 1;
									if (!v638)
										break;
									BYTE1(v628) = j[7];
									j[7] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v639 = v638 - 1;
									if (!v639)
										break;
									BYTE1(v628) = j[8];
									j[8] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v640 = v639 - 1;
									if (!v640)
										break;
									BYTE1(v628) = j[9];
									j[9] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v641 = v640 - 1;
									if (!v641)
										break;
									BYTE1(v628) = j[10];
									j[10] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v642 = v641 - 1;
									if (!v642)
										break;
									BYTE1(v628) = j[11];
									j[11] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v643 = v642 - 1;
									if (!v643)
										break;
									BYTE1(v628) = j[12];
									j[12] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v644 = v643 - 1;
									if (!v644)
										break;
									BYTE1(v628) = j[13];
									j[13] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v645 = v644 - 1;
									if (!v645)
										break;
									BYTE1(v628) = j[14];
									j[14] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									v646 = v645 - 1;
									if (!v646)
										break;
									BYTE1(v628) = j[15];
									j[15] = x_BYTE_F6EE0_tablesx[0x4000+v628];
									LOWORD(v630) = v646 - 1;
									if (!(x_WORD)v630)
										break;
								}
							}
						LABEL_848:
							v626 += 10;
							if (!--v1123)
								return;
						}
						if (v630 > x_DWORD_DE564)
							LOWORD(v630) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v630, (x_WORD)v629);
						LOWORD(v630) = v630 - v629;
						if ((uint8_t)(((v630 & 0x8000u) != 0) ^ v18) | ((x_WORD)v630 == 0))
							goto LABEL_848;
						j = &v627[v629];
						goto LABEL_831;
					case 0x10:
						v647 = (uint16_t *)unk_DE56Cx;
						HIWORD(v648) = 0;
						while (1)
						{
							LOWORD(v31) = v647[1];
							v649 = v647[3];
							v650 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v31 & 0x8000u) == 0)
								break;
							if ((int16_t)v649 > 0)
							{
								v651 = v1146 * (uint16_t)-(int16_t)v31;
								v652 = v651;
								v31 = v651 >> 8;
								v180 = __CFADD__(v647[8], v652);
								v653 = v647[8] + v652;
								BYTE1(v31) += *((x_BYTE *)v647 + 18) + v180;
								if (v649 > x_DWORD_DE564)
									LOWORD(v649) = x_DWORD_DE564;
								v31 = (uint16_t)v31;
								LOBYTE(v31) = x_BYTE_E126C;
							LABEL_860:
								while (1)
								{
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = *v650;
									*v650 = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v653);
									v654 = v1146 + v653;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v655 = v649 - 1;
									if (!v655)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[1];
									v650[1] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v654);
									v656 = v1146 + v654;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v657 = v655 - 1;
									if (!v657)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[2];
									v650[2] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v656);
									v658 = v1146 + v656;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v659 = v657 - 1;
									if (!v659)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[3];
									v650[3] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v658);
									v660 = v1146 + v658;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v661 = v659 - 1;
									if (!v661)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[4];
									v650[4] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v660);
									v662 = v1146 + v660;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v663 = v661 - 1;
									if (!v663)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[5];
									v650[5] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v662);
									v664 = v1146 + v662;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v665 = v663 - 1;
									if (!v665)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[6];
									v650[6] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v664);
									v666 = v1146 + v664;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v667 = v665 - 1;
									if (!v667)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[7];
									v650[7] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v666);
									v668 = v1146 + v666;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v669 = v667 - 1;
									if (!v669)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[8];
									v650[8] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v668);
									v670 = v1146 + v668;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v671 = v669 - 1;
									if (!v671)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[9];
									v650[9] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v670);
									v672 = v1146 + v670;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v673 = v671 - 1;
									if (!v673)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[10];
									v650[10] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v672);
									v674 = v1146 + v672;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v675 = v673 - 1;
									if (!v675)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[11];
									v650[11] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v674);
									v676 = v1146 + v674;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v677 = v675 - 1;
									if (!v677)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[12];
									v650[12] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v676);
									v678 = v1146 + v676;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v679 = v677 - 1;
									if (!v679)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[13];
									v650[13] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v678);
									v680 = v1146 + v678;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v681 = v679 - 1;
									if (!v681)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[14];
									v650[14] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v680);
									v682 = v1146 + v680;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v683 = v681 - 1;
									if (!v683)
										break;
									BYTE1(v648) = x_BYTE_F6EE0_tablesx[v31];
									LOBYTE(v648) = v650[15];
									v650[15] = x_BYTE_F6EE0_tablesx[0x4000+v648];
									v180 = __CFADD__((x_WORD)v1146, v682);
									v653 = v1146 + v682;
									BYTE1(v31) += BYTE2(v1146) + v180;
									LOWORD(v649) = v683 - 1;
									if (!(x_WORD)v649)
										break;
									v650 += 16;
								}
							}
						LABEL_877:
							v647 += 10;
							if (!--v1123)
								return;
						}
						if (v649 > x_DWORD_DE564)
							LOWORD(v649) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v649, (x_WORD)v31);
						LOWORD(v649) = v649 - v31;
						if ((uint8_t)(((v649 & 0x8000u) != 0) ^ v18) | ((x_WORD)v649 == 0))
							goto LABEL_877;
						v650 += v31;
						v31 = (uint8_t)x_BYTE_E126C;
						v653 = v647[8];
						BYTE1(v31) = *((x_BYTE *)v647 + 18);
						goto LABEL_860;
					case 0x11:
						v684 = (uint16_t *)unk_DE56Cx;
						HIWORD(v685) = 0;
						while (1)
						{
							LOWORD(v31) = v684[1];
							v686 = v684[3];
							v687 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v31 & 0x8000u) == 0)
								break;
							if ((int16_t)v686 > 0)
							{
								v688 = v1146 * (uint16_t)-(int16_t)v31;
								v689 = v688;
								v31 = v688 >> 8;
								v180 = __CFADD__(v684[8], v689);
								v690 = v684[8] + v689;
								BYTE1(v31) += *((x_BYTE *)v684 + 18) + v180;
								if (v686 > x_DWORD_DE564)
									LOWORD(v686) = x_DWORD_DE564;
								v31 = (uint16_t)v31;
								LOBYTE(v31) = x_BYTE_E126C;
							LABEL_889:
								while (1)
								{
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = *v687;
									*v687 = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v690);
									v691 = v1146 + v690;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v692 = v686 - 1;
									if (!v692)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[1];
									v687[1] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v691);
									v693 = v1146 + v691;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v694 = v692 - 1;
									if (!v694)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[2];
									v687[2] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v693);
									v695 = v1146 + v693;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v696 = v694 - 1;
									if (!v696)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[3];
									v687[3] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v695);
									v697 = v1146 + v695;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v698 = v696 - 1;
									if (!v698)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[4];
									v687[4] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v697);
									v699 = v1146 + v697;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v700 = v698 - 1;
									if (!v700)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[5];
									v687[5] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v699);
									v701 = v1146 + v699;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v702 = v700 - 1;
									if (!v702)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[6];
									v687[6] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v701);
									v703 = v1146 + v701;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v704 = v702 - 1;
									if (!v704)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[7];
									v687[7] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v703);
									v705 = v1146 + v703;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v706 = v704 - 1;
									if (!v706)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[8];
									v687[8] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v705);
									v707 = v1146 + v705;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v708 = v706 - 1;
									if (!v708)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[9];
									v687[9] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v707);
									v709 = v1146 + v707;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v710 = v708 - 1;
									if (!v710)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[10];
									v687[10] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v709);
									v711 = v1146 + v709;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v712 = v710 - 1;
									if (!v712)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[11];
									v687[11] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v711);
									v713 = v1146 + v711;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v714 = v712 - 1;
									if (!v714)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[12];
									v687[12] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v713);
									v715 = v1146 + v713;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v716 = v714 - 1;
									if (!v716)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[13];
									v687[13] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v715);
									v717 = v1146 + v715;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v718 = v716 - 1;
									if (!v718)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[14];
									v687[14] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v717);
									v719 = v1146 + v717;
									BYTE1(v31) += BYTE2(v1146) + v180;
									v720 = v718 - 1;
									if (!v720)
										break;
									LOBYTE(v685) = x_BYTE_F6EE0_tablesx[v31];
									BYTE1(v685) = v687[15];
									v687[15] = x_BYTE_F6EE0_tablesx[0x4000+v685];
									v180 = __CFADD__((x_WORD)v1146, v719);
									v690 = v1146 + v719;
									BYTE1(v31) += BYTE2(v1146) + v180;
									LOWORD(v686) = v720 - 1;
									if (!(x_WORD)v686)
										break;
									v687 += 16;
								}
							}
						LABEL_906:
							v684 += 10;
							if (!--v1123)
								return;
						}
						if (v686 > x_DWORD_DE564)
							LOWORD(v686) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v686, (x_WORD)v31);
						LOWORD(v686) = v686 - v31;
						if ((uint8_t)(((v686 & 0x8000u) != 0) ^ v18) | ((x_WORD)v686 == 0))
							goto LABEL_906;
						v687 += v31;
						v31 = (uint8_t)x_BYTE_E126C;
						v690 = v684[8];
						BYTE1(v31) = *((x_BYTE *)v684 + 18);
						goto LABEL_889;
					case 0x12:
						v721 = (uint16_t *)unk_DE56Cx;
						v1174 = v1135 << 16;
						HIWORD(v722) = 0;
						HIWORD(v723) = 0;
						while (1)
						{
							LOWORD(v722) = v721[1];
							v724 = v721[3];
							v725 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v722 & 0x8000u) == 0)
								break;
							if ((int16_t)v724 > 0)
							{
								v726 = (uint16_t)-(int16_t)v722;
								v728 = __ROL4__(*((x_DWORD *)v721 + 3) + v1135 * v726, 16);
								BYTE1(v723) = v728;
								v727 = *((x_DWORD *)v721 + 2) + v1124 * v726;
								LOWORD(v728) = v727;
								v729 = v727 >> 8;
								LOBYTE(v723) = BYTE1(v729);
								if (v724 > x_DWORD_DE564)
									LOWORD(v724) = x_DWORD_DE564;
								v722 = (uint16_t)v729;
							LABEL_918:
								v1283 = v721;
								v730 = x_DWORD_DE55C_ActTexture;
								while (1)
								{
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v728);
									LOWORD(v728) = v1124 + v728;
									LOBYTE(v722) = *v725;
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v728);
									v731 = v1174 + v728;
									*v725 = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v732 = v724 - 1;
									if (!v732)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v731);
									LOWORD(v731) = v1124 + v731;
									LOBYTE(v722) = v725[1];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v731);
									v733 = v1174 + v731;
									v725[1] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v734 = v732 - 1;
									if (!v734)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v733);
									LOWORD(v733) = v1124 + v733;
									LOBYTE(v722) = v725[2];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v733);
									v735 = v1174 + v733;
									v725[2] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v736 = v734 - 1;
									if (!v736)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v735);
									LOWORD(v735) = v1124 + v735;
									LOBYTE(v722) = v725[3];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v735);
									v737 = v1174 + v735;
									v725[3] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v738 = v736 - 1;
									if (!v738)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v737);
									LOWORD(v737) = v1124 + v737;
									LOBYTE(v722) = v725[4];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v737);
									v739 = v1174 + v737;
									v725[4] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v740 = v738 - 1;
									if (!v740)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v739);
									LOWORD(v739) = v1124 + v739;
									LOBYTE(v722) = v725[5];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v739);
									v741 = v1174 + v739;
									v725[5] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v742 = v740 - 1;
									if (!v742)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v741);
									LOWORD(v741) = v1124 + v741;
									LOBYTE(v722) = v725[6];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v741);
									v743 = v1174 + v741;
									v725[6] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v744 = v742 - 1;
									if (!v744)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v743);
									LOWORD(v743) = v1124 + v743;
									LOBYTE(v722) = v725[7];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v743);
									v745 = v1174 + v743;
									v725[7] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v746 = v744 - 1;
									if (!v746)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v745);
									LOWORD(v745) = v1124 + v745;
									LOBYTE(v722) = v725[8];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v745);
									v747 = v1174 + v745;
									v725[8] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v748 = v746 - 1;
									if (!v748)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v747);
									LOWORD(v747) = v1124 + v747;
									LOBYTE(v722) = v725[9];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v747);
									v749 = v1174 + v747;
									v725[9] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v750 = v748 - 1;
									if (!v750)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v749);
									LOWORD(v749) = v1124 + v749;
									LOBYTE(v722) = v725[10];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v749);
									v751 = v1174 + v749;
									v725[10] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v752 = v750 - 1;
									if (!v752)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v751);
									LOWORD(v751) = v1124 + v751;
									LOBYTE(v722) = v725[11];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v751);
									v753 = v1174 + v751;
									v725[11] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v754 = v752 - 1;
									if (!v754)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v753);
									LOWORD(v753) = v1124 + v753;
									LOBYTE(v722) = v725[12];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v753);
									v755 = v1174 + v753;
									v725[12] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v756 = v754 - 1;
									if (!v756)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v755);
									LOWORD(v755) = v1124 + v755;
									LOBYTE(v722) = v725[13];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v755);
									v757 = v1174 + v755;
									v725[13] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v758 = v756 - 1;
									if (!v758)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v757);
									LOWORD(v757) = v1124 + v757;
									LOBYTE(v722) = v725[14];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v757);
									v759 = v1174 + v757;
									v725[14] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									v760 = v758 - 1;
									if (!v760)
										break;
									BYTE1(v722) = *(x_BYTE *)(v723 + v730);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v759);
									LOWORD(v759) = v1124 + v759;
									LOBYTE(v722) = v725[15];
									LOBYTE(v723) = BYTE2(v1124) + v180 + v723;
									v180 = __CFADD__(v1174, v759);
									v728 = v1174 + v759;
									v725[15] = x_BYTE_F6EE0_tablesx[0x4000+v722];
									BYTE1(v723) += BYTE2(v1135) + v180;
									LOWORD(v724) = v760 - 1;
									if (!(x_WORD)v724)
										break;
									v725 += 16;
								}
								v721 = v1283;
							}
						LABEL_937:
							v721 += 10;
							if (!--v1123)
								return;
						}
						if (v724 > x_DWORD_DE564)
							LOWORD(v724) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v724, (x_WORD)v722);
						LOWORD(v724) = v724 - v722;
						if ((uint8_t)(((v724 & 0x8000u) != 0) ^ v18) | ((x_WORD)v724 == 0))
							goto LABEL_937;
						v725 += v722;
						v728 = __ROL4__(*((x_DWORD *)v721 + 3), 16);
						BYTE1(v723) = v728;
						LOWORD(v728) = v721[4];
						LOBYTE(v723) = *((x_BYTE *)v721 + 10);
						goto LABEL_918;
					case 0x13:
						v761 = (uint16_t *)unk_DE56Cx;
						v1175 = v1135 << 16;
						HIWORD(v762) = 0;
						HIWORD(v763) = 0;
						while (1)
						{
							LOWORD(v762) = v761[1];
							v764 = v761[3];
							v765 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v762 & 0x8000u) == 0)
								break;
							if ((int16_t)v764 > 0)
							{
								v766 = (uint16_t)-(int16_t)v762;
								v768 = __ROL4__(*((x_DWORD *)v761 + 3) + v1135 * v766, 16);
								BYTE1(v763) = v768;
								v767 = *((x_DWORD *)v761 + 2) + v1124 * v766;
								LOWORD(v768) = v767;
								v769 = v767 >> 8;
								LOBYTE(v763) = BYTE1(v769);
								if (v764 > x_DWORD_DE564)
									LOWORD(v764) = x_DWORD_DE564;
								v762 = (uint16_t)v769;
							LABEL_949:
								v1284 = v761;
								v770 = x_DWORD_DE55C_ActTexture;
								while (1)
								{
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v768);
									LOWORD(v768) = v1124 + v768;
									BYTE1(v762) = *v765;
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v768);
									v771 = v1175 + v768;
									*v765 = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v772 = v764 - 1;
									if (!v772)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v771);
									LOWORD(v771) = v1124 + v771;
									BYTE1(v762) = v765[1];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v771);
									v773 = v1175 + v771;
									v765[1] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v774 = v772 - 1;
									if (!v774)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v773);
									LOWORD(v773) = v1124 + v773;
									BYTE1(v762) = v765[2];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v773);
									v775 = v1175 + v773;
									v765[2] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v776 = v774 - 1;
									if (!v776)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v775);
									LOWORD(v775) = v1124 + v775;
									BYTE1(v762) = v765[3];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v775);
									v777 = v1175 + v775;
									v765[3] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v778 = v776 - 1;
									if (!v778)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v777);
									LOWORD(v777) = v1124 + v777;
									BYTE1(v762) = v765[4];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v777);
									v779 = v1175 + v777;
									v765[4] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v780 = v778 - 1;
									if (!v780)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v779);
									LOWORD(v779) = v1124 + v779;
									BYTE1(v762) = v765[5];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v779);
									v781 = v1175 + v779;
									v765[5] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v782 = v780 - 1;
									if (!v782)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v781);
									LOWORD(v781) = v1124 + v781;
									BYTE1(v762) = v765[6];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v781);
									v783 = v1175 + v781;
									v765[6] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v784 = v782 - 1;
									if (!v784)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v783);
									LOWORD(v783) = v1124 + v783;
									BYTE1(v762) = v765[7];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v783);
									v785 = v1175 + v783;
									v765[7] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v786 = v784 - 1;
									if (!v786)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v785);
									LOWORD(v785) = v1124 + v785;
									BYTE1(v762) = v765[8];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v785);
									v787 = v1175 + v785;
									v765[8] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v788 = v786 - 1;
									if (!v788)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v787);
									LOWORD(v787) = v1124 + v787;
									BYTE1(v762) = v765[9];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v787);
									v789 = v1175 + v787;
									v765[9] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v790 = v788 - 1;
									if (!v790)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v789);
									LOWORD(v789) = v1124 + v789;
									BYTE1(v762) = v765[10];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v789);
									v791 = v1175 + v789;
									v765[10] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v792 = v790 - 1;
									if (!v792)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v791);
									LOWORD(v791) = v1124 + v791;
									BYTE1(v762) = v765[11];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v791);
									v793 = v1175 + v791;
									v765[11] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v794 = v792 - 1;
									if (!v794)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v793);
									LOWORD(v793) = v1124 + v793;
									BYTE1(v762) = v765[12];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v793);
									v795 = v1175 + v793;
									v765[12] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v796 = v794 - 1;
									if (!v796)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v795);
									LOWORD(v795) = v1124 + v795;
									BYTE1(v762) = v765[13];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v795);
									v797 = v1175 + v795;
									v765[13] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v798 = v796 - 1;
									if (!v798)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v797);
									LOWORD(v797) = v1124 + v797;
									BYTE1(v762) = v765[14];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v797);
									v799 = v1175 + v797;
									v765[14] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									v800 = v798 - 1;
									if (!v800)
										break;
									LOBYTE(v762) = *(x_BYTE *)(v763 + v770);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v799);
									LOWORD(v799) = v1124 + v799;
									BYTE1(v762) = v765[15];
									LOBYTE(v763) = BYTE2(v1124) + v180 + v763;
									v180 = __CFADD__(v1175, v799);
									v768 = v1175 + v799;
									v765[15] = x_BYTE_F6EE0_tablesx[0x4000+v762];
									BYTE1(v763) += BYTE2(v1135) + v180;
									LOWORD(v764) = v800 - 1;
									if (!(x_WORD)v764)
										break;
									v765 += 16;
								}
								v761 = v1284;
							}
						LABEL_968:
							v761 += 10;
							if (!--v1123)
								return;
						}
						if (v764 > x_DWORD_DE564)
							LOWORD(v764) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v764, (x_WORD)v762);
						LOWORD(v764) = v764 - v762;
						if ((uint8_t)(((v764 & 0x8000u) != 0) ^ v18) | ((x_WORD)v764 == 0))
							goto LABEL_968;
						v765 += v762;
						v768 = __ROL4__(*((x_DWORD *)v761 + 3), 16);
						BYTE1(v763) = v768;
						LOWORD(v768) = v761[4];
						LOBYTE(v763) = *((x_BYTE *)v761 + 10);
						goto LABEL_949;
					case 0x14:
						v801 = (uint16_t *)unk_DE56Cx;
						v1176 = v1135 << 16;
						v1185 = v1146 << 16;
						HIWORD(v802) = 0;
						HIWORD(v803) = 0;
						while (1)
						{
							LOWORD(v802) = v801[1];
							v804 = v801[3];
							v805 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v802 & 0x8000u) == 0)
								break;
							if ((int16_t)v804 > 0)
							{
								if (v804 > x_DWORD_DE564)
									v804 = x_DWORD_DE564;
								v1194 = v804;
								v806 = (uint16_t)-(int16_t)v802;
								v807 = v806;
								v809 = __ROL4__(*((x_DWORD *)v801 + 3) + v1135 * v806, 16);
								BYTE1(v803) = v809;
								v808 = *((x_DWORD *)v801 + 2) + v1124 * v806;
								LOWORD(v809) = v808;
								v802 = v808 >> 8;
								LOBYTE(v803) = BYTE1(v802);
								v810 = __ROL4__(*((x_DWORD *)v801 + 4) + v1146 * v807, 16);
								v802 = (uint16_t)v802;
							LABEL_980:
								v1285 = v801;
								v811 = x_DWORD_DE55C_ActTexture;
								while (1)
								{
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v809);
									LOWORD(v809) = v1124 + v809;
									BYTE1(v802) = v810;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v809);
									v812 = v1176 + v809;
									LOBYTE(v802) = *v805;
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v810);
									v813 = v1185 + v810;
									*v805 = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v813) = BYTE2(v1146) + v180 + v813;
									v1195 = v1194 - 1;
									if (!v1195)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v812);
									LOWORD(v812) = v1124 + v812;
									BYTE1(v802) = v813;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v812);
									v814 = v1176 + v812;
									LOBYTE(v802) = v805[1];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v813);
									v815 = v1185 + v813;
									v805[1] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v815) = BYTE2(v1146) + v180 + v815;
									v1196 = v1195 - 1;
									if (!v1196)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v814);
									LOWORD(v814) = v1124 + v814;
									BYTE1(v802) = v815;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v814);
									v816 = v1176 + v814;
									LOBYTE(v802) = v805[2];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v815);
									v817 = v1185 + v815;
									v805[2] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v817) = BYTE2(v1146) + v180 + v817;
									v1197 = v1196 - 1;
									if (!v1197)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v816);
									LOWORD(v816) = v1124 + v816;
									BYTE1(v802) = v817;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v816);
									v818 = v1176 + v816;
									LOBYTE(v802) = v805[3];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v817);
									v819 = v1185 + v817;
									v805[3] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v819) = BYTE2(v1146) + v180 + v819;
									v1198 = v1197 - 1;
									if (!v1198)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v818);
									LOWORD(v818) = v1124 + v818;
									BYTE1(v802) = v819;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v818);
									v820 = v1176 + v818;
									LOBYTE(v802) = v805[4];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v819);
									v821 = v1185 + v819;
									v805[4] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v821) = BYTE2(v1146) + v180 + v821;
									v1199 = v1198 - 1;
									if (!v1199)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v820);
									LOWORD(v820) = v1124 + v820;
									BYTE1(v802) = v821;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v820);
									v822 = v1176 + v820;
									LOBYTE(v802) = v805[5];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v821);
									v823 = v1185 + v821;
									v805[5] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v823) = BYTE2(v1146) + v180 + v823;
									v1200 = v1199 - 1;
									if (!v1200)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v822);
									LOWORD(v822) = v1124 + v822;
									BYTE1(v802) = v823;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v822);
									v824 = v1176 + v822;
									LOBYTE(v802) = v805[6];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v823);
									v825 = v1185 + v823;
									v805[6] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v825) = BYTE2(v1146) + v180 + v825;
									v1201 = v1200 - 1;
									if (!v1201)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v824);
									LOWORD(v824) = v1124 + v824;
									BYTE1(v802) = v825;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v824);
									v826 = v1176 + v824;
									LOBYTE(v802) = v805[7];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v825);
									v827 = v1185 + v825;
									v805[7] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v827) = BYTE2(v1146) + v180 + v827;
									v1202 = v1201 - 1;
									if (!v1202)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v826);
									LOWORD(v826) = v1124 + v826;
									BYTE1(v802) = v827;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v826);
									v828 = v1176 + v826;
									LOBYTE(v802) = v805[8];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v827);
									v829 = v1185 + v827;
									v805[8] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v829) = BYTE2(v1146) + v180 + v829;
									v1203 = v1202 - 1;
									if (!v1203)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v828);
									LOWORD(v828) = v1124 + v828;
									BYTE1(v802) = v829;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v828);
									v830 = v1176 + v828;
									LOBYTE(v802) = v805[9];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v829);
									v831 = v1185 + v829;
									v805[9] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v831) = BYTE2(v1146) + v180 + v831;
									v1204 = v1203 - 1;
									if (!v1204)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v830);
									LOWORD(v830) = v1124 + v830;
									BYTE1(v802) = v831;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v830);
									v832 = v1176 + v830;
									LOBYTE(v802) = v805[10];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v831);
									v833 = v1185 + v831;
									v805[10] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v833) = BYTE2(v1146) + v180 + v833;
									v1205 = v1204 - 1;
									if (!v1205)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v832);
									LOWORD(v832) = v1124 + v832;
									BYTE1(v802) = v833;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v832);
									v834 = v1176 + v832;
									LOBYTE(v802) = v805[11];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v833);
									v835 = v1185 + v833;
									v805[11] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v835) = BYTE2(v1146) + v180 + v835;
									v1206 = v1205 - 1;
									if (!v1206)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v834);
									LOWORD(v834) = v1124 + v834;
									BYTE1(v802) = v835;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v834);
									v836 = v1176 + v834;
									LOBYTE(v802) = v805[12];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v835);
									v837 = v1185 + v835;
									v805[12] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v837) = BYTE2(v1146) + v180 + v837;
									v1207 = v1206 - 1;
									if (!v1207)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v836);
									LOWORD(v836) = v1124 + v836;
									BYTE1(v802) = v837;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v836);
									v838 = v1176 + v836;
									LOBYTE(v802) = v805[13];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v837);
									v839 = v1185 + v837;
									v805[13] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v839) = BYTE2(v1146) + v180 + v839;
									v1208 = v1207 - 1;
									if (!v1208)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v838);
									LOWORD(v838) = v1124 + v838;
									BYTE1(v802) = v839;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v838);
									v840 = v1176 + v838;
									LOBYTE(v802) = v805[14];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v839);
									v841 = v1185 + v839;
									v805[14] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v841) = BYTE2(v1146) + v180 + v841;
									v1209 = v1208 - 1;
									if (!v1209)
										break;
									LOBYTE(v802) = *(x_BYTE *)(v803 + v811);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v840);
									LOWORD(v840) = v1124 + v840;
									BYTE1(v802) = v841;
									LOBYTE(v803) = BYTE2(v1124) + v180 + v803;
									BYTE1(v802) = x_BYTE_F6EE0_tablesx[v802];
									v180 = __CFADD__(v1176, v840);
									v809 = v1176 + v840;
									LOBYTE(v802) = v805[15];
									BYTE1(v803) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1185, v841);
									v810 = v1185 + v841;
									v805[15] = x_BYTE_F6EE0_tablesx[0x4000+v802];
									LOBYTE(v810) = BYTE2(v1146) + v180 + v810;
									v1194 = v1209 - 1;
									if (!v1194)
										break;
									v805 += 16;
								}
								v801 = v1285;
							}
						LABEL_999:
							v801 += 10;
							if (!--v1123)
								return;
						}
						if (v804 > x_DWORD_DE564)
							v804 = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v804, (x_WORD)v802);
						LOWORD(v804) = v804 - v802;
						if ((uint8_t)(((v804 & 0x8000u) != 0) ^ v18) | ((x_WORD)v804 == 0))
							goto LABEL_999;
						v805 += v802;
						v809 = __ROL4__(*((x_DWORD *)v801 + 3), 16);
						BYTE1(v803) = v809;
						LOWORD(v809) = v801[4];
						LOBYTE(v803) = *((x_BYTE *)v801 + 10);
						v1194 = v804;
						v810 = __ROL4__(*((x_DWORD *)v801 + 4), 16);
						goto LABEL_980;
					case 0x15:
						v842 = (uint16_t *)unk_DE56Cx;
						v1177 = v1135 << 16;
						v1186 = v1146 << 16;
						HIWORD(v843) = 0;
						HIWORD(v844) = 0;
						while (1)
						{
							LOWORD(v843) = v842[1];
							v845 = v842[3];
							v846 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v843 & 0x8000u) == 0)
								break;
							if ((int16_t)v845 > 0)
							{
								if (v845 > x_DWORD_DE564)
									v845 = x_DWORD_DE564;
								v1210 = v845;
								v847 = (uint16_t)-(int16_t)v843;
								v848 = v847;
								v850 = __ROL4__(*((x_DWORD *)v842 + 3) + v1135 * v847, 16);
								BYTE1(v844) = v850;
								v849 = *((x_DWORD *)v842 + 2) + v1124 * v847;
								LOWORD(v850) = v849;
								v843 = v849 >> 8;
								LOBYTE(v844) = BYTE1(v843);
								v851 = __ROL4__(*((x_DWORD *)v842 + 4) + v1146 * v848, 16);
								v843 = (uint16_t)v843;
							LABEL_1011:
								v1286 = v842;
								v852 = x_DWORD_DE55C_ActTexture;
								while (1)
								{
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v850);
									LOWORD(v850) = v1124 + v850;
									BYTE1(v843) = v851;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v850);
									v853 = v1177 + v850;
									BYTE1(v843) = *v846;
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v851);
									v854 = v1186 + v851;
									*v846 = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v854) = BYTE2(v1146) + v180 + v854;
									v1211 = v1210 - 1;
									if (!v1211)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v853);
									LOWORD(v853) = v1124 + v853;
									BYTE1(v843) = v854;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v853);
									v855 = v1177 + v853;
									BYTE1(v843) = v846[1];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v854);
									v856 = v1186 + v854;
									v846[1] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v856) = BYTE2(v1146) + v180 + v856;
									v1212 = v1211 - 1;
									if (!v1212)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v855);
									LOWORD(v855) = v1124 + v855;
									BYTE1(v843) = v856;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v855);
									v857 = v1177 + v855;
									BYTE1(v843) = v846[2];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v856);
									v858 = v1186 + v856;
									v846[2] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v858) = BYTE2(v1146) + v180 + v858;
									v1213 = v1212 - 1;
									if (!v1213)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v857);
									LOWORD(v857) = v1124 + v857;
									BYTE1(v843) = v858;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v857);
									v859 = v1177 + v857;
									BYTE1(v843) = v846[3];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v858);
									v860 = v1186 + v858;
									v846[3] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v860) = BYTE2(v1146) + v180 + v860;
									v1214 = v1213 - 1;
									if (!v1214)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v859);
									LOWORD(v859) = v1124 + v859;
									BYTE1(v843) = v860;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v859);
									v861 = v1177 + v859;
									BYTE1(v843) = v846[4];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v860);
									v862 = v1186 + v860;
									v846[4] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v862) = BYTE2(v1146) + v180 + v862;
									v1215 = v1214 - 1;
									if (!v1215)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v861);
									LOWORD(v861) = v1124 + v861;
									BYTE1(v843) = v862;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v861);
									v863 = v1177 + v861;
									BYTE1(v843) = v846[5];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v862);
									v864 = v1186 + v862;
									v846[5] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v864) = BYTE2(v1146) + v180 + v864;
									v1216 = v1215 - 1;
									if (!v1216)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v863);
									LOWORD(v863) = v1124 + v863;
									BYTE1(v843) = v864;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v863);
									v865 = v1177 + v863;
									BYTE1(v843) = v846[6];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v864);
									v866 = v1186 + v864;
									v846[6] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v866) = BYTE2(v1146) + v180 + v866;
									v1217 = v1216 - 1;
									if (!v1217)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v865);
									LOWORD(v865) = v1124 + v865;
									BYTE1(v843) = v866;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v865);
									v867 = v1177 + v865;
									BYTE1(v843) = v846[7];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v866);
									v868 = v1186 + v866;
									v846[7] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v868) = BYTE2(v1146) + v180 + v868;
									v1218 = v1217 - 1;
									if (!v1218)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v867);
									LOWORD(v867) = v1124 + v867;
									BYTE1(v843) = v868;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v867);
									v869 = v1177 + v867;
									BYTE1(v843) = v846[8];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v868);
									v870 = v1186 + v868;
									v846[8] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v870) = BYTE2(v1146) + v180 + v870;
									v1219 = v1218 - 1;
									if (!v1219)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v869);
									LOWORD(v869) = v1124 + v869;
									BYTE1(v843) = v870;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v869);
									v871 = v1177 + v869;
									BYTE1(v843) = v846[9];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v870);
									v872 = v1186 + v870;
									v846[9] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v872) = BYTE2(v1146) + v180 + v872;
									v1220 = v1219 - 1;
									if (!v1220)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v871);
									LOWORD(v871) = v1124 + v871;
									BYTE1(v843) = v872;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v871);
									v873 = v1177 + v871;
									BYTE1(v843) = v846[10];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v872);
									v874 = v1186 + v872;
									v846[10] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v874) = BYTE2(v1146) + v180 + v874;
									v1221 = v1220 - 1;
									if (!v1221)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v873);
									LOWORD(v873) = v1124 + v873;
									BYTE1(v843) = v874;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v873);
									v875 = v1177 + v873;
									BYTE1(v843) = v846[11];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v874);
									v876 = v1186 + v874;
									v846[11] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v876) = BYTE2(v1146) + v180 + v876;
									v1222 = v1221 - 1;
									if (!v1222)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v875);
									LOWORD(v875) = v1124 + v875;
									BYTE1(v843) = v876;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v875);
									v877 = v1177 + v875;
									BYTE1(v843) = v846[12];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v876);
									v878 = v1186 + v876;
									v846[12] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v878) = BYTE2(v1146) + v180 + v878;
									v1223 = v1222 - 1;
									if (!v1223)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v877);
									LOWORD(v877) = v1124 + v877;
									BYTE1(v843) = v878;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v877);
									v879 = v1177 + v877;
									BYTE1(v843) = v846[13];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v878);
									v880 = v1186 + v878;
									v846[13] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v880) = BYTE2(v1146) + v180 + v880;
									v1224 = v1223 - 1;
									if (!v1224)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v879);
									LOWORD(v879) = v1124 + v879;
									BYTE1(v843) = v880;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v879);
									v881 = v1177 + v879;
									BYTE1(v843) = v846[14];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v880);
									v882 = v1186 + v880;
									v846[14] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v882) = BYTE2(v1146) + v180 + v882;
									v1225 = v1224 - 1;
									if (!v1225)
										break;
									LOBYTE(v843) = *(x_BYTE *)(v844 + v852);
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v881);
									LOWORD(v881) = v1124 + v881;
									BYTE1(v843) = v882;
									LOBYTE(v844) = BYTE2(v1124) + v180 + v844;
									LOBYTE(v843) = x_BYTE_F6EE0_tablesx[v843];
									v180 = __CFADD__(v1177, v881);
									v850 = v1177 + v881;
									BYTE1(v843) = v846[15];
									BYTE1(v844) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1186, v882);
									v851 = v1186 + v882;
									v846[15] = x_BYTE_F6EE0_tablesx[0x4000+v843];
									LOBYTE(v851) = BYTE2(v1146) + v180 + v851;
									v1210 = v1225 - 1;
									if (!v1210)
										break;
									v846 += 16;
								}
								v842 = v1286;
							}
						LABEL_1030:
							v842 += 10;
							if (!--v1123)
								return;
						}
						if (v845 > x_DWORD_DE564)
							v845 = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v845, (x_WORD)v843);
						LOWORD(v845) = v845 - v843;
						if ((uint8_t)(((v845 & 0x8000u) != 0) ^ v18) | ((x_WORD)v845 == 0))
							goto LABEL_1030;
						v846 += v843;
						v850 = __ROL4__(*((x_DWORD *)v842 + 3), 16);
						BYTE1(v844) = v850;
						LOWORD(v850) = v842[4];
						LOBYTE(v844) = *((x_BYTE *)v842 + 10);
						v1210 = v845;
						v851 = __ROL4__(*((x_DWORD *)v842 + 4), 16);
						goto LABEL_1011;
					case 0x16:
						v883 = (uint16_t *)unk_DE56Cx;
						v1178 = v1135 << 16;
						HIWORD(v884) = 0;
						HIWORD(v885) = 0;
						while (1)
						{
							LOWORD(v884) = v883[1];
							v886 = v883[3];
							v887 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v884 & 0x8000u) == 0)
								break;
							if ((int16_t)v886 > 0)
							{
								v888 = (uint16_t)-(int16_t)v884;
								v890 = __ROL4__(*((x_DWORD *)v883 + 3) + v1135 * v888, 16);
								BYTE1(v885) = v890;
								v889 = *((x_DWORD *)v883 + 2) + v1124 * v888;
								LOWORD(v890) = v889;
								v891 = v889 >> 8;
								LOBYTE(v885) = BYTE1(v891);
								if (v886 > x_DWORD_DE564)
									LOWORD(v886) = x_DWORD_DE564;
								v884 = (uint16_t)v891;
							LABEL_1042:
								v1287 = v883;
								v892 = x_DWORD_DE55C_ActTexture;
								while (1)
								{
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = *v887;
										*v887 = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v890);
									LOWORD(v890) = v1124 + v890;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v890);
									v893 = v1178 + v890;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v894 = v886 - 1;
									if (!v894)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[1];
										v887[1] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v893);
									LOWORD(v893) = v1124 + v893;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v893);
									v895 = v1178 + v893;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v896 = v894 - 1;
									if (!v896)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[2];
										v887[2] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v895);
									LOWORD(v895) = v1124 + v895;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v895);
									v897 = v1178 + v895;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v898 = v896 - 1;
									if (!v898)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[3];
										v887[3] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v897);
									LOWORD(v897) = v1124 + v897;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v897);
									v899 = v1178 + v897;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v900 = v898 - 1;
									if (!v900)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[4];
										v887[4] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v899);
									LOWORD(v899) = v1124 + v899;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v899);
									v901 = v1178 + v899;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v902 = v900 - 1;
									if (!v902)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[5];
										v887[5] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v901);
									LOWORD(v901) = v1124 + v901;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v901);
									v903 = v1178 + v901;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v904 = v902 - 1;
									if (!v904)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[6];
										v887[6] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v903);
									LOWORD(v903) = v1124 + v903;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v903);
									v905 = v1178 + v903;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v906 = v904 - 1;
									if (!v906)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[7];
										v887[7] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v905);
									LOWORD(v905) = v1124 + v905;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v905);
									v907 = v1178 + v905;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v908 = v906 - 1;
									if (!v908)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[8];
										v887[8] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v907);
									LOWORD(v907) = v1124 + v907;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v907);
									v909 = v1178 + v907;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v910 = v908 - 1;
									if (!v910)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[9];
										v887[9] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v909);
									LOWORD(v909) = v1124 + v909;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v909);
									v911 = v1178 + v909;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v912 = v910 - 1;
									if (!v912)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[10];
										v887[10] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v911);
									LOWORD(v911) = v1124 + v911;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v911);
									v913 = v1178 + v911;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v914 = v912 - 1;
									if (!v914)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[11];
										v887[11] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v913);
									LOWORD(v913) = v1124 + v913;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v913);
									v915 = v1178 + v913;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v916 = v914 - 1;
									if (!v916)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[12];
										v887[12] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v915);
									LOWORD(v915) = v1124 + v915;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v915);
									v917 = v1178 + v915;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v918 = v916 - 1;
									if (!v918)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[13];
										v887[13] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v917);
									LOWORD(v917) = v1124 + v917;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v917);
									v919 = v1178 + v917;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v920 = v918 - 1;
									if (!v920)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[14];
										v887[14] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v919);
									LOWORD(v919) = v1124 + v919;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v919);
									v921 = v1178 + v919;
									BYTE1(v885) += BYTE2(v1135) + v180;
									v922 = v920 - 1;
									if (!v922)
										break;
									BYTE1(v884) = *(x_BYTE *)(v885 + v892);
									if (BYTE1(v884))
									{
										LOBYTE(v884) = v887[15];
										v887[15] = x_BYTE_F6EE0_tablesx[0x4000+v884];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v921);
									LOWORD(v921) = v1124 + v921;
									LOBYTE(v885) = BYTE2(v1124) + v180 + v885;
									v180 = __CFADD__(v1178, v921);
									v890 = v1178 + v921;
									BYTE1(v885) += BYTE2(v1135) + v180;
									LOWORD(v886) = v922 - 1;
									if (!(x_WORD)v886)
										break;
									v887 += 16;
								}
								v883 = v1287;
							}
						LABEL_1093:
							v883 += 10;
							if (!--v1123)
								return;
						}
						if (v886 > x_DWORD_DE564)
							LOWORD(v886) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v886, (x_WORD)v884);
						LOWORD(v886) = v886 - v884;
						if ((uint8_t)(((v886 & 0x8000u) != 0) ^ v18) | ((x_WORD)v886 == 0))
							goto LABEL_1093;
						v887 += v884;
						v890 = __ROL4__(*((x_DWORD *)v883 + 3), 16);
						BYTE1(v885) = v890;
						LOWORD(v890) = v883[4];
						LOBYTE(v885) = *((x_BYTE *)v883 + 10);
						goto LABEL_1042;
					case 0x17:
						v923 = (uint16_t *)unk_DE56Cx;
						v1179 = v1135 << 16;
						HIWORD(v924) = 0;
						HIWORD(v925) = 0;
						while (1)
						{
							LOWORD(v924) = v923[1];
							v926 = v923[3];
							v927 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v924 & 0x8000u) == 0)
								break;
							if ((int16_t)v926 > 0)
							{
								v928 = (uint16_t)-(int16_t)v924;
								v930 = __ROL4__(*((x_DWORD *)v923 + 3) + v1135 * v928, 16);
								BYTE1(v925) = v930;
								v929 = *((x_DWORD *)v923 + 2) + v1124 * v928;
								LOWORD(v930) = v929;
								v931 = v929 >> 8;
								LOBYTE(v925) = BYTE1(v931);
								if (v926 > x_DWORD_DE564)
									LOWORD(v926) = x_DWORD_DE564;
								v924 = (uint16_t)v931;
							LABEL_1105:
								v1288 = v923;
								v932 = x_DWORD_DE55C_ActTexture;
								while (1)
								{
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = *v927;
										*v927 = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v930);
									LOWORD(v930) = v1124 + v930;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v930);
									v933 = v1179 + v930;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v934 = v926 - 1;
									if (!v934)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[1];
										v927[1] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v933);
									LOWORD(v933) = v1124 + v933;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v933);
									v935 = v1179 + v933;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v936 = v934 - 1;
									if (!v936)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[2];
										v927[2] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v935);
									LOWORD(v935) = v1124 + v935;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v935);
									v937 = v1179 + v935;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v938 = v936 - 1;
									if (!v938)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[3];
										v927[3] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v937);
									LOWORD(v937) = v1124 + v937;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v937);
									v939 = v1179 + v937;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v940 = v938 - 1;
									if (!v940)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[4];
										v927[4] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v939);
									LOWORD(v939) = v1124 + v939;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v939);
									v941 = v1179 + v939;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v942 = v940 - 1;
									if (!v942)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[5];
										v927[5] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v941);
									LOWORD(v941) = v1124 + v941;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v941);
									v943 = v1179 + v941;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v944 = v942 - 1;
									if (!v944)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[6];
										v927[6] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v943);
									LOWORD(v943) = v1124 + v943;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v943);
									v945 = v1179 + v943;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v946 = v944 - 1;
									if (!v946)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[7];
										v927[7] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v945);
									LOWORD(v945) = v1124 + v945;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v945);
									v947 = v1179 + v945;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v948 = v946 - 1;
									if (!v948)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[8];
										v927[8] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v947);
									LOWORD(v947) = v1124 + v947;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v947);
									v949 = v1179 + v947;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v950 = v948 - 1;
									if (!v950)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[9];
										v927[9] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v949);
									LOWORD(v949) = v1124 + v949;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v949);
									v951 = v1179 + v949;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v952 = v950 - 1;
									if (!v952)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[10];
										v927[10] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v951);
									LOWORD(v951) = v1124 + v951;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v951);
									v953 = v1179 + v951;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v954 = v952 - 1;
									if (!v954)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[11];
										v927[11] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v953);
									LOWORD(v953) = v1124 + v953;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v953);
									v955 = v1179 + v953;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v956 = v954 - 1;
									if (!v956)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[12];
										v927[12] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v955);
									LOWORD(v955) = v1124 + v955;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v955);
									v957 = v1179 + v955;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v958 = v956 - 1;
									if (!v958)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[13];
										v927[13] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v957);
									LOWORD(v957) = v1124 + v957;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v957);
									v959 = v1179 + v957;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v960 = v958 - 1;
									if (!v960)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[14];
										v927[14] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v959);
									LOWORD(v959) = v1124 + v959;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v959);
									v961 = v1179 + v959;
									BYTE1(v925) += BYTE2(v1135) + v180;
									v962 = v960 - 1;
									if (!v962)
										break;
									LOBYTE(v924) = *(x_BYTE *)(v925 + v932);
									if ((x_BYTE)v924)
									{
										BYTE1(v924) = v927[15];
										v927[15] = x_BYTE_F6EE0_tablesx[0x4000+v924];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v961);
									LOWORD(v961) = v1124 + v961;
									LOBYTE(v925) = BYTE2(v1124) + v180 + v925;
									v180 = __CFADD__(v1179, v961);
									v930 = v1179 + v961;
									BYTE1(v925) += BYTE2(v1135) + v180;
									LOWORD(v926) = v962 - 1;
									if (!(x_WORD)v926)
										break;
									v927 += 16;
								}
								v923 = v1288;
							}
						LABEL_1156:
							v923 += 10;
							if (!--v1123)
								return;
						}
						if (v926 > x_DWORD_DE564)
							LOWORD(v926) = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v926, (x_WORD)v924);
						LOWORD(v926) = v926 - v924;
						if ((uint8_t)(((v926 & 0x8000u) != 0) ^ v18) | ((x_WORD)v926 == 0))
							goto LABEL_1156;
						v927 += v924;
						v930 = __ROL4__(*((x_DWORD *)v923 + 3), 16);
						BYTE1(v925) = v930;
						LOWORD(v930) = v923[4];
						LOBYTE(v925) = *((x_BYTE *)v923 + 10);
						goto LABEL_1105;
					case 0x18:
						v963 = (uint16_t *)unk_DE56Cx;
						v1180 = v1135 << 16;
						v1187 = v1146 << 16;
						HIWORD(v964) = 0;
						HIWORD(v965) = 0;
						while (1)
						{
							LOWORD(v964) = v963[1];
							v966 = v963[3];
							v967 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v964 & 0x8000u) == 0)
								break;
							if ((int16_t)v966 > 0)
							{
								if (v966 > x_DWORD_DE564)
									v966 = x_DWORD_DE564;
								v1226 = v966;
								v968 = (uint16_t)-(int16_t)v964;
								v969 = v968;
								v971 = __ROL4__(*((x_DWORD *)v963 + 3) + v1135 * v968, 16);
								BYTE1(v965) = v971;
								v970 = *((x_DWORD *)v963 + 2) + v1124 * v968;
								LOWORD(v971) = v970;
								v964 = v970 >> 8;
								LOBYTE(v965) = BYTE1(v964);
								v972 = __ROL4__(*((x_DWORD *)v963 + 4) + v1146 * v969, 16);
								v964 = (uint16_t)v964;
							LABEL_1168:
								v1289 = v963;
								v973 = x_DWORD_DE55C_ActTexture;
								while (1)
								{
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v972;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = *v967;
										*v967 = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v971);
									LOWORD(v971) = v1124 + v971;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v971);
									v974 = v1180 + v971;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v972);
									v975 = v1187 + v972;
									LOBYTE(v975) = BYTE2(v1146) + v180 + v975;
									v1227 = v1226 - 1;
									if (!v1227)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v975;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[1];
										v967[1] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v974);
									LOWORD(v974) = v1124 + v974;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v974);
									v976 = v1180 + v974;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v975);
									v977 = v1187 + v975;
									LOBYTE(v977) = BYTE2(v1146) + v180 + v977;
									v1228 = v1227 - 1;
									if (!v1228)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v977;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[2];
										v967[2] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v976);
									LOWORD(v976) = v1124 + v976;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v976);
									v978 = v1180 + v976;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v977);
									v979 = v1187 + v977;
									LOBYTE(v979) = BYTE2(v1146) + v180 + v979;
									v1229 = v1228 - 1;
									if (!v1229)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v979;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[3];
										v967[3] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v978);
									LOWORD(v978) = v1124 + v978;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v978);
									v980 = v1180 + v978;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v979);
									v981 = v1187 + v979;
									LOBYTE(v981) = BYTE2(v1146) + v180 + v981;
									v1230 = v1229 - 1;
									if (!v1230)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v981;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[4];
										v967[4] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v980);
									LOWORD(v980) = v1124 + v980;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v980);
									v982 = v1180 + v980;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v981);
									v983 = v1187 + v981;
									LOBYTE(v983) = BYTE2(v1146) + v180 + v983;
									v1231 = v1230 - 1;
									if (!v1231)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v983;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[5];
										v967[5] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v982);
									LOWORD(v982) = v1124 + v982;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v982);
									v984 = v1180 + v982;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v983);
									v985 = v1187 + v983;
									LOBYTE(v985) = BYTE2(v1146) + v180 + v985;
									v1232 = v1231 - 1;
									if (!v1232)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v985;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[6];
										v967[6] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v984);
									LOWORD(v984) = v1124 + v984;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v984);
									v986 = v1180 + v984;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v985);
									v987 = v1187 + v985;
									LOBYTE(v987) = BYTE2(v1146) + v180 + v987;
									v1233 = v1232 - 1;
									if (!v1233)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v987;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[7];
										v967[7] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v986);
									LOWORD(v986) = v1124 + v986;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v986);
									v988 = v1180 + v986;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v987);
									v989 = v1187 + v987;
									LOBYTE(v989) = BYTE2(v1146) + v180 + v989;
									v1234 = v1233 - 1;
									if (!v1234)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v989;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[8];
										v967[8] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v988);
									LOWORD(v988) = v1124 + v988;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v988);
									v990 = v1180 + v988;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v989);
									v991 = v1187 + v989;
									LOBYTE(v991) = BYTE2(v1146) + v180 + v991;
									v1235 = v1234 - 1;
									if (!v1235)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v991;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[9];
										v967[9] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v990);
									LOWORD(v990) = v1124 + v990;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v990);
									v992 = v1180 + v990;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v991);
									v993 = v1187 + v991;
									LOBYTE(v993) = BYTE2(v1146) + v180 + v993;
									v1236 = v1235 - 1;
									if (!v1236)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v993;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[10];
										v967[10] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v992);
									LOWORD(v992) = v1124 + v992;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v992);
									v994 = v1180 + v992;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v993);
									v995 = v1187 + v993;
									LOBYTE(v995) = BYTE2(v1146) + v180 + v995;
									v1237 = v1236 - 1;
									if (!v1237)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v995;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[11];
										v967[11] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v994);
									LOWORD(v994) = v1124 + v994;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v994);
									v996 = v1180 + v994;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v995);
									v997 = v1187 + v995;
									LOBYTE(v997) = BYTE2(v1146) + v180 + v997;
									v1238 = v1237 - 1;
									if (!v1238)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v997;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[12];
										v967[12] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v996);
									LOWORD(v996) = v1124 + v996;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v996);
									v998 = v1180 + v996;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v997);
									v999 = v1187 + v997;
									LOBYTE(v999) = BYTE2(v1146) + v180 + v999;
									v1239 = v1238 - 1;
									if (!v1239)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v999;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[13];
										v967[13] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v998);
									LOWORD(v998) = v1124 + v998;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v998);
									v1000 = v1180 + v998;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v999);
									v1001 = v1187 + v999;
									LOBYTE(v1001) = BYTE2(v1146) + v180 + v1001;
									v1240 = v1239 - 1;
									if (!v1240)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v1001;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[14];
										v967[14] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1000);
									LOWORD(v1000) = v1124 + v1000;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v1000);
									v1002 = v1180 + v1000;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v1001);
									v1003 = v1187 + v1001;
									LOBYTE(v1003) = BYTE2(v1146) + v180 + v1003;
									v1241 = v1240 - 1;
									if (!v1241)
										break;
									LOBYTE(v964) = *(x_BYTE *)(v965 + v973);
									if ((x_BYTE)v964)
									{
										BYTE1(v964) = v1003;
										BYTE1(v964) = x_BYTE_F6EE0_tablesx[v964];
										LOBYTE(v964) = v967[15];
										v967[15] = x_BYTE_F6EE0_tablesx[0x4000+v964];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1002);
									LOWORD(v1002) = v1124 + v1002;
									LOBYTE(v965) = BYTE2(v1124) + v180 + v965;
									v180 = __CFADD__(v1180, v1002);
									v971 = v1180 + v1002;
									BYTE1(v965) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1187, v1003);
									v972 = v1187 + v1003;
									LOBYTE(v972) = BYTE2(v1146) + v180 + v972;
									v1226 = v1241 - 1;
									if (!v1226)
										break;
									v967 += 16;
								}
								v963 = v1289;
							}
						LABEL_1219:
							v963 += 10;
							if (!--v1123)
								return;
						}
						if (v966 > x_DWORD_DE564)
							v966 = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v966, (x_WORD)v964);
						LOWORD(v966) = v966 - v964;
						if ((uint8_t)(((v966 & 0x8000u) != 0) ^ v18) | ((x_WORD)v966 == 0))
							goto LABEL_1219;
						v967 += v964;
						v971 = __ROL4__(*((x_DWORD *)v963 + 3), 16);
						BYTE1(v965) = v971;
						LOWORD(v971) = v963[4];
						LOBYTE(v965) = *((x_BYTE *)v963 + 10);
						v1226 = v966;
						v972 = __ROL4__(*((x_DWORD *)v963 + 4), 16);
						goto LABEL_1168;
					case 0x19:
						v1004 = (uint16_t *)unk_DE56Cx;
						v1181 = v1135 << 16;
						v1188 = v1146 << 16;
						HIWORD(v1005) = 0;
						HIWORD(v1006) = 0;
						while (1)
						{
							LOWORD(v1005) = v1004[1];
							v1007 = v1004[3];
							v1008 = (x_BYTE *)(x_DWORD_DE560_ScreenWidth + v1102);
							v1102 += x_DWORD_DE560_ScreenWidth;
							if ((v1005 & 0x8000u) == 0)
								break;
							if ((int16_t)v1007 > 0)
							{
								if (v1007 > x_DWORD_DE564)
									v1007 = x_DWORD_DE564;
								v1242 = v1007;
								v1009 = (uint16_t)-(int16_t)v1005;
								v1010 = v1009;
								v1012 = __ROL4__(*((x_DWORD *)v1004 + 3) + v1135 * v1009, 16);
								BYTE1(v1006) = v1012;
								v1011 = *((x_DWORD *)v1004 + 2) + v1124 * v1009;
								LOWORD(v1012) = v1011;
								v1005 = v1011 >> 8;
								LOBYTE(v1006) = BYTE1(v1005);
								v1013 = __ROL4__(*((x_DWORD *)v1004 + 4) + v1146 * v1010, 16);
								v1005 = (uint16_t)v1005;
							LABEL_1231:
								v1290 = v1004;
								v1014 = x_DWORD_DE55C_ActTexture;
								while (1)
								{
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1013;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = *v1008;
										*v1008 = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1012);
									LOWORD(v1012) = v1124 + v1012;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1012);
									v1015 = v1181 + v1012;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1013);
									v1016 = v1188 + v1013;
									LOBYTE(v1016) = BYTE2(v1146) + v180 + v1016;
									v1243 = v1242 - 1;
									if (!v1243)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1016;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[1];
										v1008[1] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1015);
									LOWORD(v1015) = v1124 + v1015;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1015);
									v1017 = v1181 + v1015;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1016);
									v1018 = v1188 + v1016;
									LOBYTE(v1018) = BYTE2(v1146) + v180 + v1018;
									v1244 = v1243 - 1;
									if (!v1244)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1018;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[2];
										v1008[2] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1017);
									LOWORD(v1017) = v1124 + v1017;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1017);
									v1019 = v1181 + v1017;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1018);
									v1020 = v1188 + v1018;
									LOBYTE(v1020) = BYTE2(v1146) + v180 + v1020;
									v1245 = v1244 - 1;
									if (!v1245)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1020;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[3];
										v1008[3] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1019);
									LOWORD(v1019) = v1124 + v1019;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1019);
									v1021 = v1181 + v1019;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1020);
									v1022 = v1188 + v1020;
									LOBYTE(v1022) = BYTE2(v1146) + v180 + v1022;
									v1246 = v1245 - 1;
									if (!v1246)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1022;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[4];
										v1008[4] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1021);
									LOWORD(v1021) = v1124 + v1021;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1021);
									v1023 = v1181 + v1021;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1022);
									v1024 = v1188 + v1022;
									LOBYTE(v1024) = BYTE2(v1146) + v180 + v1024;
									v1247 = v1246 - 1;
									if (!v1247)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1024;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[5];
										v1008[5] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1023);
									LOWORD(v1023) = v1124 + v1023;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1023);
									v1025 = v1181 + v1023;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1024);
									v1026 = v1188 + v1024;
									LOBYTE(v1026) = BYTE2(v1146) + v180 + v1026;
									v1248 = v1247 - 1;
									if (!v1248)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1026;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[6];
										v1008[6] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1025);
									LOWORD(v1025) = v1124 + v1025;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1025);
									v1027 = v1181 + v1025;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1026);
									v1028 = v1188 + v1026;
									LOBYTE(v1028) = BYTE2(v1146) + v180 + v1028;
									v1249 = v1248 - 1;
									if (!v1249)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1028;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[7];
										v1008[7] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1027);
									LOWORD(v1027) = v1124 + v1027;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1027);
									v1029 = v1181 + v1027;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1028);
									v1030 = v1188 + v1028;
									LOBYTE(v1030) = BYTE2(v1146) + v180 + v1030;
									v1250 = v1249 - 1;
									if (!v1250)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1030;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[8];
										v1008[8] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1029);
									LOWORD(v1029) = v1124 + v1029;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1029);
									v1031 = v1181 + v1029;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1030);
									v1032 = v1188 + v1030;
									LOBYTE(v1032) = BYTE2(v1146) + v180 + v1032;
									v1251 = v1250 - 1;
									if (!v1251)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1032;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[9];
										v1008[9] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1031);
									LOWORD(v1031) = v1124 + v1031;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1031);
									v1033 = v1181 + v1031;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1032);
									v1034 = v1188 + v1032;
									LOBYTE(v1034) = BYTE2(v1146) + v180 + v1034;
									v1252 = v1251 - 1;
									if (!v1252)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1034;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[10];
										v1008[10] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1033);
									LOWORD(v1033) = v1124 + v1033;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1033);
									v1035 = v1181 + v1033;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1034);
									v1036 = v1188 + v1034;
									LOBYTE(v1036) = BYTE2(v1146) + v180 + v1036;
									v1253 = v1252 - 1;
									if (!v1253)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1036;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[11];
										v1008[11] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1035);
									LOWORD(v1035) = v1124 + v1035;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1035);
									v1037 = v1181 + v1035;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1036);
									v1038 = v1188 + v1036;
									LOBYTE(v1038) = BYTE2(v1146) + v180 + v1038;
									v1254 = v1253 - 1;
									if (!v1254)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1038;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[12];
										v1008[12] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1037);
									LOWORD(v1037) = v1124 + v1037;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1037);
									v1039 = v1181 + v1037;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1038);
									v1040 = v1188 + v1038;
									LOBYTE(v1040) = BYTE2(v1146) + v180 + v1040;
									v1255 = v1254 - 1;
									if (!v1255)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1040;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[13];
										v1008[13] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1039);
									LOWORD(v1039) = v1124 + v1039;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1039);
									v1041 = v1181 + v1039;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1040);
									v1042 = v1188 + v1040;
									LOBYTE(v1042) = BYTE2(v1146) + v180 + v1042;
									v1256 = v1255 - 1;
									if (!v1256)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1042;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[14];
										v1008[14] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1041);
									LOWORD(v1041) = v1124 + v1041;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1041);
									v1043 = v1181 + v1041;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1042);
									v1044 = v1188 + v1042;
									LOBYTE(v1044) = BYTE2(v1146) + v180 + v1044;
									v1257 = v1256 - 1;
									if (!v1257)
										break;
									LOBYTE(v1005) = *(x_BYTE *)(v1006 + v1014);
									if ((x_BYTE)v1005)
									{
										BYTE1(v1005) = v1044;
										LOBYTE(v1005) = x_BYTE_F6EE0_tablesx[v1005];
										BYTE1(v1005) = v1008[15];
										v1008[15] = x_BYTE_F6EE0_tablesx[0x4000+v1005];
									}
									v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1043);
									LOWORD(v1043) = v1124 + v1043;
									LOBYTE(v1006) = BYTE2(v1124) + v180 + v1006;
									v180 = __CFADD__(v1181, v1043);
									v1012 = v1181 + v1043;
									BYTE1(v1006) += BYTE2(v1135) + v180;
									v180 = __CFADD__(v1188, v1044);
									v1013 = v1188 + v1044;
									LOBYTE(v1013) = BYTE2(v1146) + v180 + v1013;
									v1242 = v1257 - 1;
									if (!v1242)
										break;
									v1008 += 16;
								}
								v1004 = v1290;
							}
						LABEL_1282:
							v1004 += 10;
							if (!--v1123)
								return;
						}
						if (v1007 > x_DWORD_DE564)
							v1007 = x_DWORD_DE564;
						v18 = __OFSUB__((x_WORD)v1007, (x_WORD)v1005);
						LOWORD(v1007) = v1007 - v1005;
						if ((uint8_t)(((v1007 & 0x8000u) != 0) ^ v18) | ((x_WORD)v1007 == 0))
							goto LABEL_1282;
						v1008 += v1005;
						v1012 = __ROL4__(*((x_DWORD *)v1004 + 3), 16);
						BYTE1(v1006) = v1012;
						LOWORD(v1012) = v1004[4];
						LOBYTE(v1006) = *((x_BYTE *)v1004 + 10);
						v1242 = v1007;
						v1013 = __ROL4__(*((x_DWORD *)v1004 + 4), 16);
						goto LABEL_1231;
					case 0x1A:
						v1045 = (uint16_t *)unk_DE56Cx;
						v1182 = v1135 << 16;
						v1189 = v1146 << 16;
						HIWORD(v1046) = 0;
						HIWORD(v1047) = 0;
						break;
					}
					while (1)
					{
						LOWORD(v1046) = v1045[1];
						v1048 = v1045[3];
						v1049 = (char *)(x_DWORD_DE560_ScreenWidth + v1102);
						v1102 += x_DWORD_DE560_ScreenWidth;
						if ((v1046 & 0x8000u) == 0)
							break;
						if ((int16_t)v1048 > 0)
						{
							if (v1048 > x_DWORD_DE564)
								v1048 = x_DWORD_DE564;
							v1258 = v1048;
							v1050 = (uint16_t)-(int16_t)v1046;
							v1051 = v1050;
							v1053 = __ROL4__(*((x_DWORD *)v1045 + 3) + v1135 * v1050, 16);
							BYTE1(v1047) = v1053;
							v1052 = *((x_DWORD *)v1045 + 2) + v1124 * v1050;
							LOWORD(v1053) = v1052;
							v1046 = v1052 >> 8;
							LOBYTE(v1047) = BYTE1(v1046);
							v1054 = __ROL4__(*((x_DWORD *)v1045 + 4) + v1146 * v1051, 16);
							v1046 = (uint16_t)v1046;
						LABEL_1294:
							v1291 = v1045;
							v1055 = x_DWORD_DE55C_ActTexture;
							while (1)
							{
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1053);
								LOWORD(v1053) = v1124 + v1053;
								BYTE1(v1046) = v1054;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1056 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = *v1049;
									v1056 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1053);
								v1057 = v1182 + v1053;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1054);
								v1058 = v1189 + v1054;
								*v1049 = v1056;
								LOBYTE(v1058) = BYTE2(v1146) + v180 + v1058;
								v1259 = v1258 - 1;
								if (!v1259)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1057);
								LOWORD(v1057) = v1124 + v1057;
								BYTE1(v1046) = v1058;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1059 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[1];
									v1059 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1057);
								v1060 = v1182 + v1057;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1058);
								v1061 = v1189 + v1058;
								v1049[1] = v1059;
								LOBYTE(v1061) = BYTE2(v1146) + v180 + v1061;
								v1260 = v1259 - 1;
								if (!v1260)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1060);
								LOWORD(v1060) = v1124 + v1060;
								BYTE1(v1046) = v1061;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1062 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[2];
									v1062 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1060);
								v1063 = v1182 + v1060;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1061);
								v1064 = v1189 + v1061;
								v1049[2] = v1062;
								LOBYTE(v1064) = BYTE2(v1146) + v180 + v1064;
								v1261 = v1260 - 1;
								if (!v1261)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1063);
								LOWORD(v1063) = v1124 + v1063;
								BYTE1(v1046) = v1064;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1065 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[3];
									v1065 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1063);
								v1066 = v1182 + v1063;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1064);
								v1067 = v1189 + v1064;
								v1049[3] = v1065;
								LOBYTE(v1067) = BYTE2(v1146) + v180 + v1067;
								v1262 = v1261 - 1;
								if (!v1262)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1066);
								LOWORD(v1066) = v1124 + v1066;
								BYTE1(v1046) = v1067;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1068 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[4];
									v1068 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1066);
								v1069 = v1182 + v1066;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1067);
								v1070 = v1189 + v1067;
								v1049[4] = v1068;
								LOBYTE(v1070) = BYTE2(v1146) + v180 + v1070;
								v1263 = v1262 - 1;
								if (!v1263)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1069);
								LOWORD(v1069) = v1124 + v1069;
								BYTE1(v1046) = v1070;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1071 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[5];
									v1071 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1069);
								v1072 = v1182 + v1069;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1070);
								v1073 = v1189 + v1070;
								v1049[5] = v1071;
								LOBYTE(v1073) = BYTE2(v1146) + v180 + v1073;
								v1264 = v1263 - 1;
								if (!v1264)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1072);
								LOWORD(v1072) = v1124 + v1072;
								BYTE1(v1046) = v1073;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1074 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[6];
									v1074 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1072);
								v1075 = v1182 + v1072;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1073);
								v1076 = v1189 + v1073;
								v1049[6] = v1074;
								LOBYTE(v1076) = BYTE2(v1146) + v180 + v1076;
								v1265 = v1264 - 1;
								if (!v1265)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1075);
								LOWORD(v1075) = v1124 + v1075;
								BYTE1(v1046) = v1076;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1077 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[7];
									v1077 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1075);
								v1078 = v1182 + v1075;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1076);
								v1079 = v1189 + v1076;
								v1049[7] = v1077;
								LOBYTE(v1079) = BYTE2(v1146) + v180 + v1079;
								v1266 = v1265 - 1;
								if (!v1266)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1078);
								LOWORD(v1078) = v1124 + v1078;
								BYTE1(v1046) = v1079;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1080 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[8];
									v1080 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1078);
								v1081 = v1182 + v1078;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1079);
								v1082 = v1189 + v1079;
								v1049[8] = v1080;
								LOBYTE(v1082) = BYTE2(v1146) + v180 + v1082;
								v1267 = v1266 - 1;
								if (!v1267)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1081);
								LOWORD(v1081) = v1124 + v1081;
								BYTE1(v1046) = v1082;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1083 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[9];
									v1083 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1081);
								v1084 = v1182 + v1081;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1082);
								v1085 = v1189 + v1082;
								v1049[9] = v1083;
								LOBYTE(v1085) = BYTE2(v1146) + v180 + v1085;
								v1268 = v1267 - 1;
								if (!v1268)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1084);
								LOWORD(v1084) = v1124 + v1084;
								BYTE1(v1046) = v1085;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1086 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[10];
									v1086 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1084);
								v1087 = v1182 + v1084;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1085);
								v1088 = v1189 + v1085;
								v1049[10] = v1086;
								LOBYTE(v1088) = BYTE2(v1146) + v180 + v1088;
								v1269 = v1268 - 1;
								if (!v1269)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1087);
								LOWORD(v1087) = v1124 + v1087;
								BYTE1(v1046) = v1088;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1089 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[11];
									v1089 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1087);
								v1090 = v1182 + v1087;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1088);
								v1091 = v1189 + v1088;
								v1049[11] = v1089;
								LOBYTE(v1091) = BYTE2(v1146) + v180 + v1091;
								v1270 = v1269 - 1;
								if (!v1270)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1090);
								LOWORD(v1090) = v1124 + v1090;
								BYTE1(v1046) = v1091;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1092 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[12];
									v1092 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1090);
								v1093 = v1182 + v1090;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1091);
								v1094 = v1189 + v1091;
								v1049[12] = v1092;
								LOBYTE(v1094) = BYTE2(v1146) + v180 + v1094;
								v1271 = v1270 - 1;
								if (!v1271)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1093);
								LOWORD(v1093) = v1124 + v1093;
								BYTE1(v1046) = v1094;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1095 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[13];
									v1095 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1093);
								v1096 = v1182 + v1093;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1094);
								v1097 = v1189 + v1094;
								v1049[13] = v1095;
								LOBYTE(v1097) = BYTE2(v1146) + v180 + v1097;
								v1272 = v1271 - 1;
								if (!v1272)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1096);
								LOWORD(v1096) = v1124 + v1096;
								BYTE1(v1046) = v1097;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1098 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[14];
									v1098 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1096);
								v1099 = v1182 + v1096;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1097);
								v1100 = v1189 + v1097;
								v1049[14] = v1098;
								LOBYTE(v1100) = BYTE2(v1146) + v180 + v1100;
								v1273 = v1272 - 1;
								if (!v1273)
									break;
								LOBYTE(v1046) = *(x_BYTE *)(v1047 + v1055);
								v180 = __CFADD__((x_WORD)v1124, (x_WORD)v1099);
								LOWORD(v1099) = v1124 + v1099;
								BYTE1(v1046) = v1100;
								LOBYTE(v1047) = BYTE2(v1124) + v180 + v1047;
								if ((uint8_t)v1046 >= 0xCu)
								{
									v1101 = x_BYTE_F6EE0_tablesx[v1046];
								}
								else
								{
									LOBYTE(v1046) = x_BYTE_F6EE0_tablesx[v1046];
									BYTE1(v1046) = v1049[15];
									v1101 = x_BYTE_F6EE0_tablesx[0x4000+v1046];
								}
								v180 = __CFADD__(v1182, v1099);
								v1053 = v1182 + v1099;
								BYTE1(v1047) += BYTE2(v1135) + v180;
								v180 = __CFADD__(v1189, v1100);
								v1054 = v1189 + v1100;
								v1049[15] = v1101;
								LOBYTE(v1054) = BYTE2(v1146) + v180 + v1054;
								v1258 = v1273 - 1;
								if (!v1258)
									break;
								v1049 += 16;
							}
							v1045 = v1291;
						}
					LABEL_1361:
						v1045 += 10;
						if (!--v1123)
							return;
					}
					if (v1048 > x_DWORD_DE564)
						v1048 = x_DWORD_DE564;
					v18 = __OFSUB__((x_WORD)v1048, (x_WORD)v1046);
					LOWORD(v1048) = v1048 - v1046;
					if ((uint8_t)(((v1048 & 0x8000u) != 0) ^ v18) | ((x_WORD)v1048 == 0))
						goto LABEL_1361;
					v1049 += v1046;
					v1053 = __ROL4__(*((x_DWORD *)v1045 + 3), 16);
					BYTE1(v1047) = v1053;
					LOWORD(v1053) = v1045[4];
					LOBYTE(v1047) = *((x_BYTE *)v1045 + 10);
					v1258 = v1048;
					v1054 = __ROL4__(*((x_DWORD *)v1045 + 4), 16);
					goto LABEL_1294;
				}
				v1114 += v1191;
				v74 += v1104 * v1161;
				v75 += v1161 * v1108;
				v76 += v1161 * v1127;
				v77 += v1161 * v1138;
				v78 += v1161 * v1149;
				if (v1301)
				{
					v1123 = x_DWORD_DE568;
					if (v1297)
					{
						v1114 = x_DWORD_DE568;
					}
					else
					{
						v1297 = x_DWORD_DE568 <= v1114;
						v1120 = x_DWORD_DE568 - v1114;
					}
				}
			}
			else if (v1301)
			{
				v82 = x_DWORD_DE568 - v1191;
				v1123 = x_DWORD_DE568 - v1191;
				if (v1297)
				{
					v1114 = x_DWORD_DE568 - v1191;
				}
				else
				{
					v18 = __OFSUB__(v82, v1114);
					v83 = v82 - v1114;
					v1297 = (v83 < 0) ^ v18 | (v83 == 0);
					v1120 = v83;
				}
			}
			v81 = (int *)unk_DE56Cx;
			do
			{
				v81[0] = v74;
				v74 += v1104;
				v81[1] = v75;
				v75 += v1108;
				v81[2] = v76;
				v76 += v1127;
				v81[3] = v77;
				v77 += v1138;
				v81[4] = v78;
				v78 += v1149;
				v81 += 5;
				v1114--;
			} while (v1114);
			v80 = v1122;
			goto LABEL_156;
		}
	}
}

//----- (000BCD45) --------------------------------------------------------
void /*__spoils<>*/ sub_BCD45(Bit8u* a1, int a2, int a3, int a4, int a5)//29dd45
{
	if (a3)
		x_DWORD_DE560_ScreenWidth = a3;
	if (a1)
	{
		x_DWORD_DE558 = a1;
		x_DWORD_DE554 = a1 - x_DWORD_DE560_ScreenWidth;
	}
	if (a2)
		x_DWORD_DE55C_ActTexture = a2;
	if (a5)
		x_DWORD_DE568 = a5;
	if (a4)
		x_DWORD_DE564 = a4;
}

//----- (000BD1B6) --------------------------------------------------------
void sub_BD1B6(int a1)//29e1b6
{
	int v1; // ecx
	int v2; // eax
	x_BYTE *v3; // edx
	x_BYTE *v4; // ecx
	int v5; // ST04_4
	x_BYTE *v6; // ST08_4
	x_BYTE *v7; // ST0C_4
	int v8; // eax
	x_BYTE *v9; // edx
	x_BYTE *v10; // ecx
	int v11; // ST04_4
	x_BYTE *v12; // ST08_4
	x_BYTE *v13; // ST0C_4
	int v14; // eax
	x_BYTE *v15; // edx
	x_BYTE *v16; // ecx
	int v17; // ST04_4
	x_BYTE *v18; // ST08_4
	x_BYTE *v19; // ST0C_4
	int v20; // eax
	x_BYTE *v21; // edx
	x_BYTE *v22; // ecx
	int v23; // ST04_4
	x_BYTE *v24; // ST08_4
	x_BYTE *v25; // ST0C_4
	int v26; // eax
	x_BYTE *v27; // edx
	x_BYTE *v28; // ecx
	int v29; // ST04_4
	x_BYTE *v30; // ST08_4
	x_BYTE *v31; // ST0C_4
	int v32; // eax
	x_BYTE *v33; // edx
	x_BYTE *v34; // ecx
	int v35; // ST04_4
	x_BYTE *v36; // ST08_4
	x_BYTE *v37; // ST0C_4
	int v38; // eax
	x_BYTE *v39; // edx
	x_BYTE *v40; // ecx
	int v41; // ST04_4
	x_BYTE *v42; // ST08_4
	x_BYTE *v43; // ST0C_4
	int v44; // eax
	x_BYTE *v45; // edx
	x_BYTE *v46; // ecx
	int v47; // ST04_4
	x_BYTE *v48; // ST08_4
	x_BYTE *v49; // ST0C_4
	int v50; // eax
	x_BYTE *v51; // edx
	x_BYTE *v52; // ecx
	int v53; // ST04_4
	x_BYTE *v54; // ST08_4
	x_BYTE *v55; // ST0C_4
	int v56; // [esp-Ch] [ebp-18h]
	int v57; // [esp+8h] [ebp-4h]
	int savedregs; // [esp+Ch] [ebp+0h]

	//fix it
	v1 = 0;
	v3 = 0;
	v4 = 0;
	v9 = 0;
	v10 = 0;
	v15 = 0;
	v16 = 0;
	v19 = 0;
	v21 = 0;
	v22 = 0;
	v27 = 0;
	v28 = 0;
	v33 = 0;
	v34 = 0;
	v39 = 0;
	v40 = 0;
	v45 = 0;
	v46 = 0;
	v51 = 0;
	v52 = 0;
	//fix it

	v56 = v1;
	sub_9951B(0);
	v57 = 4096;
	v2 = sub_BD320(0, (x_BYTE *)x_DWORD_180628b_screen_buffer, (x_BYTE *)x_DWORD_E9C3C, 0, (Bit8u*)&savedregs, a1);
	v7 = v4;
	v6 = v3;
	v5 = v2;
	sub_9951B(1);
	v57 = 4096;
	v8 = sub_BD320(v5, v6, v7, 0, (Bit8u*)&savedregs, a1);
	v13 = v10;
	v12 = v9;
	v11 = v8;
	sub_9951B(2);
	v57 = 4096;
	v14 = sub_BD320(v11, v12, v13, 0, (Bit8u*)&savedregs, a1);
	v19 = v16;
	v18 = v15;
	v17 = v14;
	sub_9951B(3);
	v57 = 4096;
	v20 = sub_BD320(v17, v18, v19, 0, (Bit8u*)&savedregs, a1);
	v25 = v22;
	v24 = v21;
	v23 = v20;
	sub_9951B(4);
	v57 = 4096;
	v26 = sub_BD320(v23, v24, v25, 0, (Bit8u*)&savedregs, a1);
	v31 = v28;
	v30 = v27;
	v29 = v26;
	sub_9951B(5);
	v57 = 4096;
	v32 = sub_BD320(v29, v30, v31, 0, (Bit8u*)&savedregs, a1);
	v37 = v34;
	v36 = v33;
	v35 = v32;
	sub_9951B(6);
	v57 = 4096;
	v38 = sub_BD320(v35, v36, v37, 0, (Bit8u*)&savedregs, a1);
	v43 = v40;
	v42 = v39;
	v41 = v38;
	sub_9951B(7);
	v57 = 4096;
	v44 = sub_BD320(v41, v42, v43, 0, (Bit8u*)&savedregs, a1);
	v49 = v46;
	v48 = v45;
	v47 = v44;
	sub_9951B(8);
	v57 = 4096;
	v50 = sub_BD320(v47, v48, v49, 0, (Bit8u*)&savedregs, a1);
	v55 = v52;
	v54 = v51;
	v53 = v50;
	sub_9951B(9);
	v57 = 1536;
	sub_BD320(v53, v54, v55, 0, (Bit8u*)&savedregs, a1);
}

//----- (000BD2CB) --------------------------------------------------------
void /*__spoils<ecx>*/ sub_BD2CB(int a1)//29e2cb
{
	int v1; // ecx
	int v2; // eax
	x_BYTE *v3; // edx
	x_BYTE *v4; // ecx
	int v5; // ST04_4
	x_BYTE *v6; // ST08_4
	x_BYTE *v7; // ST0C_4
	int v8; // [esp-Ch] [ebp-18h]
	int v9; // [esp+8h] [ebp-4h]
	int savedregs; // [esp+Ch] [ebp+0h]

	//fix it
	v1 = 0;
	v3 = 0;
	v4 = 0;
	//fix it

	v8 = v1;
	sub_9951B(0);
	v9 = 4096;
	v2 = sub_BD320(0, (x_BYTE *)x_DWORD_180628b_screen_buffer, (x_BYTE *)x_DWORD_E9C3C, 0, (Bit8u*)&savedregs, a1);
	v7 = v4;
	v6 = v3;
	v5 = v2;
	sub_9951B(1);
	v9 = 3904;
	sub_BD320(v5, v6, v7, 0, (Bit8u*)&savedregs, a1);
}

//----- (000BD320) --------------------------------------------------------
int sub_BD320(int result, x_BYTE *a2, x_BYTE *a3, int a4, Bit8u* a5, int a6)//29e320
{
	int *v6; // edi
	int v7; // eax

	v6 = (int *)&loc_A0000_vga_buffer;
	do
	{
		LOBYTE(a4) = a3[1];
		LOWORD(result) = *(x_WORD *)(a6 + 2 * a4);
		LOBYTE(a4) = a2[1];
		LOWORD(result) = *(x_WORD *)(a6 + 2 * a4 + 512) + result;
		v7 = result << 16;
		LOBYTE(a4) = *a3;
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4);
		LOBYTE(a4) = *a2;
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4 + 512) + v7;
		*v6 = v7;
		LOBYTE(a4) = a3[3];
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4);
		LOBYTE(a4) = a2[3];
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4 + 512) + v7;
		v7 <<= 16;
		LOBYTE(a4) = a3[2];
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4);
		LOBYTE(a4) = a2[2];
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4 + 512) + v7;
		v6[1] = v7;
		LOBYTE(a4) = a3[5];
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4);
		LOBYTE(a4) = a2[5];
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4 + 512) + v7;
		v7 <<= 16;
		LOBYTE(a4) = a3[4];
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4);
		LOBYTE(a4) = a2[4];
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4 + 512) + v7;
		v6[2] = v7;
		LOBYTE(a4) = a3[7];
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4);
		LOBYTE(a4) = a2[7];
		LOWORD(v7) = *(x_WORD *)(a6 + 2 * a4 + 512) + v7;
		result = v7 << 16;
		LOBYTE(a4) = a3[6];
		LOWORD(result) = *(x_WORD *)(a6 + 2 * a4);
		LOBYTE(a4) = a2[6];
		LOWORD(result) = *(x_WORD *)(a6 + 2 * a4 + 512) + result;
		v6[3] = result;
		a3 += 8;
		a2 += 8;
		v6 += 4;
	} while ((*(x_DWORD *)(a5 - 4))-- != 1);
	return result;
}

//----- (000BD3DD) --------------------------------------------------------
void sub_BD3DD()//29e3dd
{
	char *v0; // edi
	char *v1; // esi
	signed int v2; // edx
	char *v3; // esi
	char *v4; // esi
	char *v5; // edi
	signed int v6; // edx
	char *v7; // esi
	char *v8; // esi
	char *v9; // edi
	signed int v10; // edx
	char *v11; // edi
	signed int v12; // edx
	char *v13; // edi
	signed int v14; // edx

	if (!x_BYTE_E3766)
		sub_8CACD_draw_cursor2();
	sub_9951B(0);
	v0 = (char *)&loc_A0000_vga_buffer + 51200;
	v1 = (char *)x_DWORD_180628b_screen_buffer;
	v2 = 11;
	do
	{
		qmemcpy(v0, v1, 0x280u);
		v1 += 1280;
		v0 += 1280;
		--v2;
	} while (v2);
	qmemcpy(v0, v1, 0x100u);
	v3 = v1 + 256;
	sub_9951B(1);
	qmemcpy(&loc_A0000_vga_buffer, v3, 0x180u);
	v4 = v3 + 1024;
	v5 = (char *)&loc_A0000_vga_buffer + 1024;
	v6 = 50;
	do
	{
		qmemcpy(v5, v4, 0x280u);
		v4 += 1280;
		v5 += 1280;
		--v6;
	} while (v6);
	qmemcpy(v5, v4, 0x200u);
	v7 = v4 + 512;
	sub_9951B(2);
	qmemcpy(&loc_A0000_vga_buffer, v7, 0x80u);
	v8 = v7 + 768;
	v9 = (char *)&loc_A0000_vga_buffer + 768;
	v10 = 51;
	do
	{
		qmemcpy(v9, v8, 0x280u);
		v8 += 1280;
		v9 += 1280;
		--v10;
	} while (v10);
	sub_9951B(3);
	v11 = (char *)&loc_A0000_vga_buffer + 512;
	v12 = 51;
	do
	{
		qmemcpy(v11, v8, 0x280u);
		v8 += 1280;
		v11 += 1280;
		--v12;
	} while (v12);
	sub_9951B(4);
	v13 = (char *)&loc_A0000_vga_buffer + 256;
	v14 = 34;
	do
	{
		qmemcpy(v13, v8, 0x280u);
		v8 += 1280;
		v13 += 1280;
		--v14;
	} while (v14);
	if (!x_BYTE_E3766)
		sub_8CB1F();
}

//----- (000BD524) --------------------------------------------------------
void sub_BD524(uint16_t a1, uint16_t a2, uint16_t a3, uint16_t a4, char a5)//29e524
{
	sub_BD542(a1/2, a2/2, a3/2, a4/2, a5);
}

//----- (000BD542) --------------------------------------------------------
void sub_BD542(uint16_t a1, uint16_t a2, uint16_t a3, uint16_t a4, char a5)//29e542
{
	int16_t v5; // bx
	uint16_t v6; // cx
	uint16_t v7; // cx
	uint16_t v8; // ax
	uint16_t v9; // ax
	Bit8u* v10; // edi
	int v11; // esi
	uint16_t v12; // ax
	uint16_t v13; // cx
	uint16_t v14; // si
	int16_t v15; // dx
	int16_t v16; // bx
	int16_t v17; // cx
	int v18; // edi
	unsigned int v19; // ecx
	uint16_t v20; // ax
	int v21; // eax
	int v22; // ecx
	int16_t v23; // cx
	x_BYTE *v24; // edi
	int v25; // [esp+0h] [ebp-Ch]
	signed int v26; // [esp+4h] [ebp-8h]
	Bit8u* v27; // [esp+8h] [ebp-4h]

	v27 = x_DWORD_180628b_screen_buffer + x_DWORD_18063C_sprite_sizex + x_DWORD_18062C_resolution_x * x_DWORD_180650_positiony;
	v5 = a2;
	if ((a2 & 0x8000u) == 0)
	{
		v7 = a4;
		if ((a4 & 0x8000u) == 0)
		{
			if (a2 == a4)
			{
				if ((int16_t)a2 >= (int16_t)x_DWORD_180644_map_resolution2_y)
					return;
				v18 = a1;
				v19 = a3;
				if (a3 < a1)
				{
					LOWORD(v19) = a1;
					LOWORD(v18) = a3;
				}
				v20 = x_DWORD_180648_map_resolution2_x - 1;
				if ((v18 & 0x8000u) == 0)
				{
					if ((int16_t)v18 > (int16_t)v20)
						return;
					if ((uint16_t)v19 > v20)
						LOWORD(v19) = x_DWORD_180648_map_resolution2_x - 1;
				}
				else
				{
					if ((int16_t)v19 <= 0)
						return;
					LOWORD(v18) = 0;
					if ((uint16_t)v19 > v20)
						LOWORD(v19) = x_DWORD_180648_map_resolution2_x - 1;
				}
				LOWORD(v19) = v19 - v18;
				goto LABEL_54;
			}
			if ((int16_t)(a2 - a4) < 0)
			{
				if ((int16_t)a2 >= (int16_t)x_DWORD_180644_map_resolution2_y)
					return;
				if ((int16_t)a4 >= (int16_t)x_DWORD_180644_map_resolution2_y)
					goto LABEL_5;
			}
			else
			{
				if ((int16_t)a4 >= (int16_t)x_DWORD_180644_map_resolution2_y)
					return;
				a4 = a2;
				a2 = v7;
				v9 = a1;
				a1 = a3;
				a3 = v9;
				if (v5 >= (int16_t)x_DWORD_180644_map_resolution2_y)
					goto LABEL_5;
			}
			goto LABEL_15;
		}
		a4 = a2;
		v5 = v7;
		v6 = a2;
		v8 = a1;
		a1 = a3;
		a3 = v8;
	}
	else
	{
		v6 = a4;
	}
	if ((v6 & 0x8000u) != 0)
		return;
	a1 += (int16_t)-v5 * (int16_t)(a3 - a1) / (int16_t)(v6 - v5);
	a2 = 0;
	if ((int16_t)(a4 - x_DWORD_180644_map_resolution2_y) >= 0)
	{
	LABEL_5:
		a3 = a1
			+ (unsigned int)((int16_t)(x_DWORD_180644_map_resolution2_y - a2) * (int16_t)(a3 - a1) / (int16_t)(a4 - a2));
		a4 = x_DWORD_180644_map_resolution2_y - 1;
	}
LABEL_15:
	if ((a1 & 0x8000u) == 0)
	{
		if ((int16_t)(a1 - x_DWORD_180648_map_resolution2_x) < 0)
		{
			if ((a3 & 0x8000u) == 0)
			{
				if ((int16_t)(a3 - x_DWORD_180648_map_resolution2_x) < 0)
				{
					v26 = 1;
					if (a1 == a3)
					{
						v21 = a2;
						v22 = a4;
						if (a4 >= a2)
						{
							v23 = a4 - a2;
						}
						else
						{
							LOWORD(v21) = a4;
							v23 = a2 - a4;
						}
						v24 = (x_BYTE *)(v27 + x_DWORD_18062C_resolution_x * v21 + a1);
						LOWORD(v22) = v23 + 1;
						do
						{
							*v24 = a5;
							v24 += x_DWORD_18062C_resolution_x;
							v22--;
						} while (v22);
						return;
					}
					if ((int16_t)(a1 - a3) >= 0)
						v26 = -1;
				}
				else
				{
					v26 = 1;
					a4 = a2
						+ (unsigned int)((int16_t)(x_DWORD_180648_map_resolution2_x - a1) * (int16_t)(a4 - a2) / (int16_t)(a3 - a1));
					a3 = x_DWORD_180648_map_resolution2_x - 1;
				}
			}
			else
			{
				v26 = -1;
				a4 = a2 + (unsigned int)((int16_t)a1 * (int16_t)(a4 - a2) / (int16_t)(a1 - a3));
				a3 = 0;
			}
		}
		else
		{
			if ((int16_t)a3 >= (int16_t)x_DWORD_180648_map_resolution2_x)
				return;
			v26 = -1;
			a2 += (int16_t)(a1 - x_DWORD_180648_map_resolution2_x) * (int16_t)(a4 - a2) / (int16_t)(a1 - a3);
			a1 = x_DWORD_180648_map_resolution2_x - 1;
			if ((a3 & 0x8000u) != 0)
			{
				a4 -= (int16_t)-a3 * (int16_t)(a4 - a2) / (int16_t)(a1 - a3);
				a3 = 0;
			}
		}
	}
	else
	{
		if ((a3 & 0x8000u) != 0)
			return;
		v26 = 1;
		a2 += (int16_t)-a1 * (int16_t)(a4 - a2) / (int16_t)(a3 - a1);
		a1 = 0;
		if ((int16_t)(a3 - x_DWORD_180648_map_resolution2_x) >= 0)
		{
			a4 = a2 + (unsigned int)((int16_t)x_DWORD_180648_map_resolution2_x * (int16_t)(a4 - a2) / (int16_t)a3);
			a3 = x_DWORD_180648_map_resolution2_x - 1;
		}
	}
	v10 = (v27 + x_DWORD_18062C_resolution_x * a2 + a1);
	v11 = v26;
	v12 = v26 * (a3 - a1);
	v13 = a4 - a2;
	if (a4 == a2)
	{
		v18 = a1;
		v19 = a3;
		if (a3 >= a1)
		{
			LOWORD(v19) = a3 - a1;
		}
		else
		{
			LOWORD(v18) = a3;
			LOWORD(v19) = a1 - a3;
		}
	LABEL_54:
		LOWORD(v19) = v19 + 1;
		memset((void *)(v27 + x_DWORD_18062C_resolution_x * a2 + v18), a5, v19);
		return;
	}
	if (v13 <= v12)
	{
		v25 = x_DWORD_18062C_resolution_x;
	}
	else
	{
		v12 = a4 - a2;
		v13 = v26 * (a3 - a1);
		v26 = x_DWORD_18062C_resolution_x;
		v25 = v11;
	}
	v14 = v12;
	v15 = 2 * v13;
	v16 = 2 * v13 - v12;
	v17 = 2 * (v13 - v12);
	*v10 = a5;
	do
	{
		while (1)
		{
			v10 += v26;
			if (v16 >= 0)
				break;
			v16 += v15;
			*v10 = a5;
			if (!--v14)
				return;
		}
		v10 += v25;
		v16 += v17;
		*v10 = a5;
		--v14;
	} while (v14);
}

